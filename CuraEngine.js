// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function(x) {
      console.log(x);
    };
    Module['printErr'] = function(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        assert(field[0] === '<', field); // assumed to be a vector type, if none of the above
        size = alignSize = Types.types[field].flatSize; // fully aligned
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++;
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] !== 'N') {
        // not namespaced
        if (func[i] === 'K') i++;
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      } else {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      }
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i)
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_toFloat32 = Math.toFloat32;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 18624;
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a244() } });
var ___fsmu8;
var ___dso_handle;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,192,55,0,0,252,2,0,0,96,1,0,0,164,0,0,0,150,1,0,0,212,0,0,0,104,0,0,0,252,0,0,0,34,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv119__pointer_type_infoE;
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0,0,0,0,208,55,0,0,252,2,0,0,168,0,0,0,164,0,0,0,150,1,0,0,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,240,55,0,0,252,2,0,0,244,2,0,0,164,0,0,0,150,1,0,0,212,0,0,0,72,2,0,0,26,1,0,0,168,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTIc;
__ZTIc=allocate([24,36,0,0,8,37,0,0], "i8", ALLOC_STATIC);
var __ZN14ConfigSettingsC1Ev;
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,65,114,105,116,104,109,101,116,105,99,32,101,120,99,101,112,116,105,111,110,46,0,0,0,117,115,97,103,101,58,32,67,117,114,97,69,110,103,105,110,101,32,91,45,104,93,32,91,45,118,93,32,91,45,109,32,51,120,51,109,97,116,114,105,120,93,32,91,45,115,32,60,115,101,116,116,105,110,103,107,101,121,62,61,60,118,97,108,117,101,62,93,32,45,111,32,60,111,117,116,112,117,116,46,103,99,111,100,101,62,32,60,109,111,100,101,108,46,115,116,108,62,0,0,0,0,0,0,42,42,42,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,105,110,102,105,108,108,79,118,101,114,108,97,112,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,111,112,116,105,109,105,122,101,100,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,69,58,32,37,102,32,37,102,10,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,79,99,116,111,98,101,114,0,83,58,32,37,102,32,37,102,10,0,0,0,0,0,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,65,117,103,117,115,116,0,0,80,114,111,99,101,115,115,101,100,32,97,108,108,32,108,97,121,101,114,115,32,105,110,32,37,53,46,49,102,115,10,0,74,117,108,121,0,0,0,0,76,97,121,101,114,32,99,111,117,110,116,58,32,37,105,10,0,0,0,0,0,0,0,0,74,117,110,101,0,0,0,0,37,115,10,0,0,0,0,0,77,97,121,0,0,0,0,0,77,49,48,55,10,0,0,0,65,112,114,105,108,0,0,0,115,112,97,114,115,101,73,110,102,105,108,108,76,105,110,101,68,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,77,49,50,55,32,84,48,10,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,77,49,48,54,32,83,37,100,10,0,0,0,0,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,49,50,54,32,84,48,32,59,32,118,97,108,117,101,32,61,32,37,100,10,0,0,0,74,97,110,117,97,114,121,0,71,57,50,32,69,48,10,0,68,111,77,97,120,105,109,97,32,101,114,114,111,114,0,0,71,49,48,10,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,32,69,37,48,46,53,108,102,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,32,90,37,48,46,50,102,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,32,88,37,48,46,50,102,32,89,37,48,46,50,102,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,32,70,37,105,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,71,48,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,117,112,83,107,105,110,67,111,117,110,116,0,0,0,0,0,71,49,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,71,49,32,70,37,105,32,69,37,48,46,53,108,102,10,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,71,49,49,10,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,80,114,111,99,101,115,115,73,110,116,101,114,115,101,99,116,105,111,110,115,32,101,114,114,111,114,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,116,114,97,118,101,108,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,84,37,105,10,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,71,49,32,70,37,105,32,69,37,48,46,52,108,102,10,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,71,49,48,32,83,49,10,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,71,52,32,80,37,100,10,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,109,97,108,108,32,108,97,121,101,114,44,32,97,100,100,105,110,103,32,100,101,108,97,121,32,111,102,32,37,102,0,100,111,119,110,83,107,105,110,67,111,117,110,116,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,84,89,80,69,58,37,115,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,114,111,116,101,32,37,53,46,49,102,32,107,105,108,111,98,121,116,101,115,46,10,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,87,114,111,116,101,32,37,53,46,49,102,32,77,66,46,10,0,0,0,0,0,0,0,0,85,112,100,97,116,101,69,100,103,101,73,110,116,111,65,69,76,58,32,105,110,118,97,108,105,100,32,99,97,108,108,0,82,101,97,100,105,110,103,32,109,101,115,104,32,102,114,111,109,32,98,105,110,97,114,121,32,98,108,111,98,32,119,105,116,104,32,37,105,32,118,101,114,116,101,120,101,115,10,0,119,43,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,60,70,73,76,65,77,69,78,84,62,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,60,95,95,84,73,77,69,95,95,62,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,101,110,100,67,111,100,101,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,105,108,97,109,101,110,116,58,32,37,100,10,0,0,0,115,116,97,114,116,67,111,100,101,0,0,0,0,0,0,0,80,114,105,110,116,32,116,105,109,101,58,32,37,100,10,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,51,93,46,89,0,0,0,0,0,80,77,0,0,0,0,0,0,71,101,110,101,114,97,116,101,100,32,119,105,116,104,32,67,117,114,97,95,83,116,101,97,109,69,110,103,105,110,101,32,37,115,0,0,0,0,0,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,51,93,46,88,0,0,0,0,0,105,110,115,101,116,67,111,117,110,116,0,0,0,0,0,0,65,77,0,0,0,0,0,0,78,111,32,111,117,116,112,117,116,32,102,105,108,101,32,115,112,101,99,105,102,105,101,100,10,0,0,0,0,0,0,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,50,93,46,89,0,0,0,0,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,58,32,37,99,10,0,0,0,0,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,50,93,46,88,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,0,0,0,0,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,49,93,46,89,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,114,111,99,101,115,115,72,111,114,105,122,111,110,116,97,108,32,101,114,114,111,114,0,46,115,116,108,0,0,0,0,83,101,116,116,105,110,103,32,102,111,117,110,100,58,32,37,115,10,0,0,0,0,0,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,49,93,46,88,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,37,115,32,102,111,114,32,111,117,116,112,117,116,46,10,0,0,103,99,111,100,101,70,108,97,118,111,114,0,0,0,0,0,114,98,0,0,0,0,0,0,102,105,120,72,111,114,114,105,98,108,101,0,0,0,0,0,49,51,46,49,48,0,0,0,102,97,110,83,112,101,101,100,77,97,120,0,0,0,0,0,67,117,114,97,95,83,116,101,97,109,69,110,103,105,110,101,32,118,101,114,115,105,111,110,32,37,115,10,0,0,0,0,102,97,110,83,112,101,101,100,77,105,110,0,0,0,0,0,77,49,48,52,32,83,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,101,120,116,114,117,100,101,114,32,104,101,97,116,101,114,32,111,102,102,10,77,49,52,48,32,83,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,104,101,97,116,101,100,32,98,101,100,32,104,101,97,116,101,114,32,111,102,102,32,40,105,102,32,121,111,117,32,104,97,118,101,32,105,116,41,10,71,57,49,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,114,101,108,97,116,105,118,101,32,112,111,115,105,116,105,111,110,105,110,103,10,71,49,32,69,45,49,32,70,51,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,114,101,116,114,97,99,116,32,116,104,101,32,102,105,108,97,109,101,110,116,32,97,32,98,105,116,32,98,101,102,111,114,101,32,108,105,102,116,105,110,103,32,116,104,101,32,110,111,122,122,108,101,44,32,116,111,32,114,101,108,101,97,115,101,32,115,111,109,101,32,111,102,32,116,104,101,32,112,114,101,115,115,117,114,101,10,71,49,32,90,43,48,46,53,32,69,45,53,32,88,45,50,48,32,89,45,50,48,32,70,57,48,48,48,32,32,32,59,109,111,118,101,32,90,32,117,112,32,97,32,98,105,116,32,97,110,100,32,114,101,116,114,97,99,116,32,102,105,108,97,109,101,110,116,32,101,118,101,110,32,109,111,114,101,10,71,50,56,32,88,48,32,89,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,109,111,118,101,32,88,47,89,32,116,111,32,109,105,110,32,101,110,100,115,116,111,112,115,44,32,115,111,32,116,104,101,32,104,101,97,100,32,105,115,32,111,117,116,32,111,102,32,116,104,101,32,119,97,121,10,77,56,52,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,115,116,101,112,112,101,114,115,32,111,102,102,10,71,57,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,105,110,103,10,0,0,0,0,0,99,111,111,108,72,101,97,100,76,105,102,116,0,0,0,0,77,49,48,57,32,83,50,49,48,32,32,32,32,32,59,72,101,97,116,117,112,32,116,111,32,50,49,48,67,10,71,50,49,32,32,32,32,32,32,32,32,32,32,32,59,109,101,116,114,105,99,32,118,97,108,117,101,115,10,71,57,48,32,32,32,32,32,32,32,32,32,32,32,59,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,105,110,103,10,71,50,56,32,32,32,32,32,32,32,32,32,32,32,59,72,111,109,101,10,71,49,32,90,49,53,46,48,32,70,51,48,48,32,59,109,111,118,101,32,116,104,101,32,112,108,97,116,102,111,114,109,32,100,111,119,110,32,49,53,109,109,10,71,57,50,32,69,48,32,32,32,32,32,32,32,32,59,122,101,114,111,32,116,104,101,32,101,120,116,114,117,100,101,100,32,108,101,110,103,116,104,10,71,49,32,70,50,48,48,32,69,53,32,32,32,32,59,101,120,116,114,117,100,101,32,53,109,109,32,111,102,32,102,101,101,100,32,115,116,111,99,107,10,71,57,50,32,69,48,32,32,32,32,32,32,32,32,59,122,101,114,111,32,116,104,101,32,101,120,116,114,117,100,101,100,32,108,101,110,103,116,104,32,97,103,97,105,110,10,0,0,0,101,120,116,114,117,115,105,111,110,87,105,100,116,104,0,0,109,105,110,105,109,97,108,70,101,101,100,114,97,116,101,0,109,105,110,105,109,97,108,76,97,121,101,114,84,105,109,101,0,0,0,0,0,0,0,0,108,97,121,101,114,84,104,105,99,107,110,101,115,115,0,0,114,97,102,116,73,110,116,101,114,102,97,99,101,76,105,110,101,119,105,100,116,104,0,0,84,111,116,97,108,32,116,105,109,101,32,101,108,97,112,115,101,100,32,37,53,46,50,102,115,46,10,0,0,0,0,0,114,97,102,116,73,110,116,101,114,102,97,99,101,84,104,105,99,107,110,101,115,115,0,0,73,110,115,101,114,116,76,111,99,97,108,77,105,110,105,109,97,73,110,116,111,65,69,76,58,32,109,105,115,115,105,110,103,32,114,105,103,104,116,98,111,117,110,100,33,0,0,0,83,79,76,73,68,0,0,0,112,114,111,99,101,115,115,0,114,97,102,116,66,97,115,101,76,105,110,101,119,105,100,116,104,0,0,0,0,0,0,0,87,114,111,116,101,32,108,97,121,101,114,115,32,105,110,32,37,53,46,50,102,115,46,10,0,0,0,0,0,0,0,0,114,97,102,116,66,97,115,101,84,104,105,99,107,110,101,115,115,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,76,65,89,69,82,58,37,100,0,0,0,0,0,0,0,0,114,97,102,116,76,105,110,101,83,112,97,99,105,110,103,0,101,120,112,111,114,116,0,0,114,97,102,116,77,97,114,103,105,110,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,76,65,89,69,82,58,45,49,0,0,0,0,0,0,0,0,111,98,106,101,99,116,83,105,110,107,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,82,65,70,84,0,0,0,0,112,111,115,121,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,76,65,89,69,82,58,45,50,0,0,0,0,0,0,0,0,111,98,106,101,99,116,80,111,115,105,116,105,111,110,46,89,0,0,0,0,0,0,0,0,102,105,108,97,109,101,110,116,70,108,111,119,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,83,85,80,80,79,82,84,0,112,111,115,120,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,70,73,76,76,0,0,0,0,111,98,106,101,99,116,80,111,115,105,116,105,111,110,46,88,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,87,65,76,76,45,73,78,78,69,82,0,0,0,0,0,0,109,117,108,116,105,86,111,108,117,109,101,79,118,101,114,108,97,112,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,72,111,108,101,76,105,110,107,97,103,101,32,101,114,114,111,114,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,87,65,76,76,45,79,85,84,69,82,0,0,0,0,0,0,101,110,97,98,108,101,67,111,109,98,105,110,103,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,83,75,73,82,84,0,0,0,109,105,110,105,109,97,108,69,120,116,114,117,115,105,111,110,66,101,102,111,114,101,82,101,116,114,97,99,116,105,111,110,0,0,0,0,0,0,0,0,116,111,116,97,108,95,108,97,121,101,114,115,61,37,100,0,114,101,116,114,97,99,116,105,111,110,77,105,110,105,109,97,108,68,105,115,116,97,110,99,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,59,77,65,84,69,82,73,65,76,58,60,70,73,76,65,77,69,78,84,62,0,0,0,0,114,101,116,114,97,99,116,105,111,110,65,109,111,117,110,116,69,120,116,114,117,100,101,114,83,119,105,116,99,104,0,0,102,97,108,115,101,0,0,0,59,84,73,77,69,58,60,95,95,84,73,77,69,95,95,62,0,0,0,0,0,0,0,0,114,101,116,114,97,99,116,105,111,110,83,112,101,101,100,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,59,70,76,65,86,79,82,58,85,108,116,105,71,67,111,100,101,0,0,0,0,0,0,0,114,101,116,114,97,99,116,105,111,110,65,109,111,117,110,116,0,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,71,101,110,101,114,97,116,101,100,32,117,112,47,100,111,119,110,32,115,107,105,110,32,105,110,32,37,53,46,51,102,115,10,0,0,0,0,0,0,0,115,117,112,112,111,114,116,69,120,116,114,117,100,101,114,0,102,105,108,97,109,101,110,116,68,105,97,109,101,116,101,114,0,0,0,0,0,0,0,0,115,107,105,110,0,0,0,0,115,117,112,112,111,114,116,90,68,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,71,101,110,101,114,97,116,101,100,32,105,110,115,101,116,32,105,110,32,37,53,46,51,102,115,10,0,0,0,0,0,0,115,117,112,112,111,114,116,88,89,68,105,115,116,97,110,99,101,0,0,0,0,0,0,0,105,110,115,101,116,0,0,0,115,117,112,112,111,114,116,76,105,110,101,68,105,115,116,97,110,99,101,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,67,111,111,114,100,105,110,97,116,101,32,101,120,99,101,101,100,115,32,114,97,110,103,101,32,98,111,117,110,100,115,0,114,98,0,0,0,0,0,0,71,101,110,101,114,97,116,101,100,32,108,97,121,101,114,32,112,97,114,116,115,32,105,110,32,37,53,46,51,102,115,10,0,0,0,0,0,0,0,0,115,117,112,112,111,114,116,69,118,101,114,121,119,104,101,114,101,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,71,101,110,101,114,97,116,105,110,103,32,108,97,121,101,114,32,112,97,114,116,115,46,46,46,10,0,0,0,0,0,0,115,117,112,112,111,114,116,65,110,103,108,101,0,0,0,0,71,101,110,101,114,97,116,105,110,103,32,115,117,112,112,111,114,116,32,109,97,112,46,46,46,10,0,0,0,0,0,0,102,97,110,79,110,76,97,121,101,114,78,114,0,0,0,0,83,108,105,99,101,100,32,109,111,100,101,108,32,105,110,32,37,53,46,51,102,115,10,0,109,111,118,101,83,112,101,101,100,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,83,108,105,99,105,110,103,32,109,111,100,101,108,46,46,46,10,0,0,0,0,0,0,0,105,110,102,105,108,108,83,112,101,101,100,0,0,0,0,0,118,101,99,116,111,114,0,0,79,112,116,105,109,105,122,101,32,109,111,100,101,108,32,37,53,46,51,102,115,32,10,0,112,114,105,110,116,83,112,101,101,100,0,0,0,0,0,0,37,46,48,76,102,0,0,0,32,32,86,101,114,116,101,120,32,99,111,117,110,116,115,58,32,37,105,32,45,62,32,37,105,32,37,48,46,49,102,37,37,10,0,0,0,0,0,0,105,110,105,116,105,97,108,76,97,121,101,114,83,112,101,101,100,0,0,0,0,0,0,0,105,110,105,116,105,97,108,76,97,121,101,114,84,104,105,99,107,110,101,115,115,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,32,32,70,97,99,101,32,99,111,117,110,116,115,58,32,37,105,32,45,62,32,37,105,32,37,48,46,49,102,37,37,10,0,0,0,0,0,0,0,0,105,110,105,116,105,97,108,83,112,101,101,100,117,112,76,97,121,101,114,115,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,84,104,117,0,0,0,0,0,37,76,102,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,65,110,97,108,121,122,105,110,103,32,97,110,100,32,111,112,116,105,109,105,122,105,110,103,32,109,111,100,101,108,46,46,46,10,0,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,115,107,105,114,116,77,105,110,76,101,110,103,116,104,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,73,110,116,49,50,56,32,111,112,101,114,97,116,111,114,42,58,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,76,111,97,100,101,100,32,102,114,111,109,32,100,105,115,107,32,105,110,32,37,53,46,51,102,115,10,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,115,107,105,114,116,76,105,110,101,67,111,117,110,116,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,67,111,111,114,100,105,110,97,116,101,32,101,120,99,101,101,100,115,32,114,97,110,103,101,32,98,111,117,110,100,115,46,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,111,105,110,69,114,114,111,114,0,0,0,0,0,0,0,73,110,116,49,50,56,32,111,112,101,114,97,116,111,114,47,58,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,32,118,101,114,116,101,120,32,37,108,102,32,37,108,102,32,37,108,102,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,109,111,100,101,108,58,32,37,115,10,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,114,116,0,0,0,0,0,0,115,107,105,114,116,68,105,115,116,97,110,99,101,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,76,111,97,100,105,110,103,32,37,115,32,102,114,111,109,32,100,105,115,107,46,46,46,10,0,0,0,0,0,0,0,0,80,114,111,103,114,101,115,115,58,37,115,58,37,105,58,37,105,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,184,49,0,0,68,0,0,0,78,1,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,49,0,0,44,2,0,0,184,1,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,49,0,0,198,0,0,0,24,3,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,49,0,0,10,1,0,0,16,0,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,49,0,0,10,1,0,0,38,0,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,50,0,0,192,1,0,0,230,0,0,0,120,0,0,0,236,1,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,50,0,0,8,3,0,0,248,1,0,0,120,0,0,0,228,2,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,50,0,0,182,1,0,0,252,1,0,0,120,0,0,0,240,1,0,0,250,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,50,0,0,16,3,0,0,132,1,0,0,120,0,0,0,222,1,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,51,0,0,2,3,0,0,6,1,0,0,120,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,51,0,0,180,1,0,0,62,1,0,0,120,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,51,0,0,90,0,0,0,64,1,0,0,120,0,0,0,170,2,0,0,20,0,0,0,254,1,0,0,28,0,0,0,210,0,0,0,172,2,0,0,240,0,0,0,248,255,255,255,96,51,0,0,116,0,0,0,48,0,0,0,188,0,0,0,78,0,0,0,8,0,0,0,174,0,0,0,200,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,51,0,0,242,2,0,0,182,2,0,0,120,0,0,0,112,0,0,0,130,0,0,0,202,2,0,0,144,1,0,0,172,0,0,0,14,0,0,0,146,2,0,0,248,255,255,255,136,51,0,0,116,1,0,0,98,2,0,0,148,2,0,0,190,2,0,0,56,2,0,0,0,1,0,0,46,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,51,0,0,220,0,0,0,4,2,0,0,120,0,0,0,22,1,0,0,238,0,0,0,118,0,0,0,120,1,0,0,204,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,51,0,0,160,0,0,0,182,0,0,0,120,0,0,0,248,0,0,0,246,1,0,0,162,0,0,0,230,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,51,0,0,246,2,0,0,2,0,0,0,120,0,0,0,156,1,0,0,4,3,0,0,76,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,51,0,0,114,0,0,0,142,2,0,0,120,0,0,0,180,2,0,0,218,0,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,52,0,0,160,2,0,0,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,52,0,0,64,0,0,0,130,1,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,52,0,0,12,0,0,0,198,1,0,0,120,0,0,0,102,0,0,0,88,0,0,0,82,0,0,0,86,0,0,0,80,0,0,0,98,0,0,0,96,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,52,0,0,18,1,0,0,36,0,0,0,120,0,0,0,38,2,0,0,42,2,0,0,30,2,0,0,40,2,0,0,28,2,0,0,34,2,0,0,32,2,0,0,202,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,52,0,0,92,0,0,0,50,0,0,0,120,0,0,0,108,2,0,0,106,2,0,0,96,2,0,0,100,2,0,0,244,1,0,0,104,2,0,0,94,2,0,0,114,2,0,0,112,2,0,0,110,2,0,0,102,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,52,0,0,134,0,0,0,4,0,0,0,120,0,0,0,238,2,0,0,226,2,0,0,220,2,0,0,222,2,0,0,198,2,0,0,224,2,0,0,218,2,0,0,234,2,0,0,232,2,0,0,230,2,0,0,102,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,52,0,0,208,0,0,0,2,1,0,0,120,0,0,0,98,1,0,0,26,2,0,0,66,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,52,0,0,62,0,0,0,206,1,0,0,120,0,0,0,20,2,0,0,134,2,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,52,0,0,22,0,0,0,242,1,0,0,120,0,0,0,76,0,0,0,232,1,0,0,226,1,0,0,168,2,0,0,80,2,0,0,158,2,0,0,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,52,0,0,214,1,0,0,110,1,0,0,120,0,0,0,206,2,0,0,6,3,0,0,48,2,0,0,30,1,0,0,46,0,0,0,54,2,0,0,36,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,53,0,0,214,1,0,0,40,0,0,0,120,0,0,0,8,1,0,0,110,0,0,0,244,0,0,0,74,2,0,0,74,1,0,0,174,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,53,0,0,214,1,0,0,40,1,0,0,120,0,0,0,18,2,0,0,200,1,0,0,132,2,0,0,158,0,0,0,146,1,0,0,128,1,0,0,12,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,53,0,0,214,1,0,0,74,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,53,0,0,148,0,0,0,166,1,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,53,0,0,214,1,0,0,224,0,0,0,120,0,0,0,136,1,0,0,196,0,0,0,90,1,0,0,254,2,0,0,200,0,0,0,60,2,0,0,10,2,0,0,58,0,0,0,122,0,0,0,152,2,0,0,50,1,0,0,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,53,0,0,22,3,0,0,84,0,0,0,120,0,0,0,152,0,0,0,54,0,0,0,104,1,0,0,144,2,0,0,142,0,0,0,108,1,0,0,186,1,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,53,0,0,186,0,0,0,174,2,0,0,170,1,0,0,70,2,0,0,82,1,0,0,118,2,0,0,124,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,53,0,0,214,1,0,0,232,0,0,0,120,0,0,0,18,2,0,0,200,1,0,0,132,2,0,0,158,0,0,0,146,1,0,0,128,1,0,0,12,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,53,0,0,214,1,0,0,188,1,0,0,120,0,0,0,18,2,0,0,200,1,0,0,132,2,0,0,158,0,0,0,146,1,0,0,128,1,0,0,12,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,53,0,0,94,1,0,0,208,2,0,0,204,0,0,0,152,1,0,0,12,1,0,0,68,2,0,0,166,0,0,0,86,2,0,0,136,2,0,0,150,0,0,0,136,0,0,0,128,0,0,0,18,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,53,0,0,18,0,0,0,80,1,0,0,8,2,0,0,192,2,0,0,188,2,0,0,22,2,0,0,24,1,0,0,250,1,0,0,100,1,0,0,32,0,0,0,60,0,0,0,210,2,0,0,86,1,0,0,186,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,53,0,0,28,1,0,0,214,2,0,0,2,2,0,0,70,2,0,0,82,1,0,0,118,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,54,0,0,108,0,0,0,128,2,0,0,252,255,255,255,252,255,255,255,32,54,0,0,140,1,0,0,92,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,56,54,0,0,162,2,0,0,112,1,0,0,252,255,255,255,252,255,255,255,56,54,0,0,60,1,0,0,62,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,80,54,0,0,242,0,0,0,26,3,0,0,248,255,255,255,248,255,255,255,80,54,0,0,218,1,0,0,204,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,104,54,0,0,58,1,0,0,90,2,0,0,248,255,255,255,248,255,255,255,104,54,0,0,122,1,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,54,0,0,78,2,0,0,220,1,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,54,0,0,248,2,0,0,224,1,0,0,34,0,0,0,152,1,0,0,12,1,0,0,68,2,0,0,54,1,0,0,86,2,0,0,136,2,0,0,150,0,0,0,136,0,0,0,128,0,0,0,18,3,0,0,216,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,54,0,0,160,1,0,0,212,1,0,0,68,1,0,0,192,2,0,0,188,2,0,0,22,2,0,0,14,2,0,0,250,1,0,0,100,1,0,0,32,0,0,0,60,0,0,0,210,2,0,0,86,1,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,54,0,0,176,2,0,0,138,1,0,0,120,0,0,0,114,1,0,0,154,2,0,0,20,1,0,0,0,3,0,0,56,0,0,0,42,1,0,0,38,1,0,0,222,0,0,0,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,55,0,0,56,1,0,0,144,0,0,0,120,0,0,0,130,2,0,0,10,0,0,0,82,2,0,0,178,2,0,0,194,2,0,0,250,0,0,0,140,2,0,0,208,1,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,55,0,0,184,2,0,0,76,1,0,0,120,0,0,0,100,0,0,0,70,1,0,0,70,0,0,0,162,1,0,0,10,3,0,0,210,1,0,0,52,2,0,0,234,1,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,55,0,0,216,0,0,0,196,1,0,0,120,0,0,0,88,2,0,0,116,2,0,0,32,1,0,0,150,2,0,0,4,1,0,0,206,0,0,0,172,1,0,0,126,2,0,0,120,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,55,0,0,246,0,0,0,190,0,0,0,66,2,0,0,152,1,0,0,12,1,0,0,68,2,0,0,166,0,0,0,86,2,0,0,136,2,0,0,126,1,0,0,228,1,0,0,178,0,0,0,18,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,55,0,0,26,0,0,0,164,2,0,0,24,2,0,0,192,2,0,0,188,2,0,0,22,2,0,0,24,1,0,0,250,1,0,0,100,1,0,0,52,1,0,0,126,0,0,0,30,0,0,0,86,1,0,0,186,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,55,0,0,252,2,0,0,236,0,0,0,164,0,0,0,150,1,0,0,84,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,55,0,0,252,2,0,0,46,2,0,0,164,0,0,0,150,1,0,0,212,0,0,0,66,0,0,0,156,2,0,0,44,1,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,16,56,0,0,254,0,0,0,196,2,0,0,146,0,0,0,140,0,0,0,14,3,0,0,180,255,255,255,180,255,255,255,180,255,255,255,180,255,255,255,16,56,0,0,92,2,0,0,178,1,0,0,50,2,0,0,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,56,0,0,64,2,0,0,124,1,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,0,0,234,0,0,0,212,2,0,0,16,1,0,0,12,2,0,0,0,0,0,0,0,0,0,0,116,36,0,0,156,36,0,0,118,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,80,75,99,0,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49].concat([49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,78,49,48,67,108,105,112,112,101,114,76,105,98,55,67,108,105,112,112,101,114,69,0,0,78,49,48,67,108,105,112,112,101,114,76,105,98,49,54,99,108,105,112,112,101,114,69,120,99,101,112,116,105,111,110,69,0,0,0,0,0,0,0,0,78,49,48,67,108,105,112,112,101,114,76,105,98,49,49,67,108,105,112,112,101,114,66,97,115,101,69,0,0,0,0,0,68,110,0,0,0,0,0,0,24,36,0,0,0,37,0,0,0,0,0,0,16,37,0,0,0,0,0,0,32,37,0,0,0,0,0,0,48,37,0,0,176,49,0,0,0,0,0,0,0,0,0,0,64,37,0,0,176,49,0,0,0,0,0,0,0,0,0,0,80,37,0,0,176,49,0,0,0,0,0,0,0,0,0,0,104,37,0,0,248,49,0,0,0,0,0,0,0,0,0,0,128,37,0,0,176,49,0,0,0,0,0,0,0,0,0,0,144,37,0,0,1,0,0,0,0,0,0,0,0,0,0,0,152,37,0,0,64,36,0,0,176,37,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,200,54,0,0,0,0,0,0,64,36,0,0,248,37,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,208,54,0,0,0,0,0,0,64,36,0,0,64,38,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,216,54,0,0,0,0,0,0,64,36,0,0,136,38,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,224,54,0,0,0,0,0,0,0,0,0,0,208,38,0,0,16,52,0,0,0,0,0,0,0,0,0,0,0,39,0,0,16,52,0,0,0,0,0,0,64,36,0,0,48,39,0,0,0,0,0,0,1,0,0,0,8,54,0,0,0,0,0,0,64,36,0,0,72,39,0,0,0,0,0,0,1,0,0,0,8,54,0,0,0,0,0,0,64,36,0,0,96,39,0,0,0,0,0,0,1,0,0,0,16,54,0,0,0,0,0,0,64,36,0,0,120,39,0,0,0,0,0,0,1,0,0,0,16,54,0,0,0,0,0,0,64,36,0,0,144,39,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,120,55,0,0,0,8,0,0,64,36,0,0,216,39,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,120,55,0,0,0,8,0,0,64,36,0,0,32,40,0,0,0,0,0,0,3,0,0,0,72,53,0,0,2,0,0,0,24,50,0,0,2,0,0,0,168,53,0,0,0,8,0,0,64,36,0,0,104,40,0,0,0,0,0,0,3,0,0,0,72,53,0,0,2,0,0,0,24,50,0,0,2,0,0,0,176,53,0,0,0,8,0,0,0,0,0,0,176,40,0,0,72,53,0,0,0,0,0,0,0,0,0,0,200,40,0,0,72,53,0,0,0,0,0,0,64,36,0,0,224,40,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,24,54,0,0,2,0,0,0,64,36,0,0,248,40,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,24,54,0,0,2,0,0,0,0,0,0,0,16,41,0,0,0,0,0,0,40,41,0,0,128,54,0,0,0,0,0,0,64,36,0,0,72,41,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,192,50,0,0,0,0,0,0,64,36,0,0,144,41,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,216,50,0,0,0,0,0,0,64,36,0,0,216,41,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,240,50,0,0,0,0,0,0,64,36,0,0,32,42,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,8,51,0,0,0,0,0,0,0,0,0,0,104,42,0,0,72,53,0,0,0,0,0,0,0,0,0,0,128,42,0,0,72,53,0,0,0,0,0,0,64,36,0,0,152,42,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,144,54,0,0,2,0,0,0,64,36,0,0,192,42,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,144,54,0,0,2,0,0,0,64,36,0,0,232,42,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,144,54,0,0,2,0,0,0,64,36,0,0,16,43,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,144,54,0,0,2,0,0,0,0,0,0,0,56,43,0,0,0,54,0,0,0,0,0,0,0,0,0,0,80,43,0,0,72,53,0,0,0,0,0,0,64,36,0,0,104,43,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,112,55,0,0,2,0,0,0,64,36,0,0,128,43,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,112,55,0,0,2,0,0,0,0,0,0,0,152,43,0,0,0,0,0,0,192,43,0,0,0,0,0,0,232,43,0,0,152,54,0,0,0,0,0,0,0,0,0,0,8,44,0,0,40,53,0,0,0,0,0,0,0,0,0,0,48,44,0,0,40,53,0,0,0,0,0,0,0,0,0,0,88,44,0,0,0,0,0,0,144,44,0,0,0,0,0,0,200,44,0,0,0,0,0,0,232,44,0,0,0,0,0,0,8,45,0,0,0,0,0,0,40,45,0,0,0,0,0,0,72,45,0,0,64,36,0,0,96,45,0,0,0,0,0,0,1,0,0,0,160,50,0,0,3,244,255,255,64,36,0,0,144,45,0,0,0,0,0,0,1,0,0,0,176,50,0,0,3,244,255,255,64,36,0,0,192,45,0,0,0,0,0,0,1,0,0,0,160,50,0,0,3,244,255,255,64,36,0,0,240,45,0,0,0,0,0,0,1,0,0,0,176,50,0,0,3,244,255,255,0,0,0,0,32,46,0,0,216,49,0,0,0,0,0,0,0,0,0,0,56,46,0,0,0,0,0,0,80,46,0,0,248,53,0,0,0,0,0,0,0,0,0,0,104,46,0,0,232,53,0,0,0,0,0,0,0,0,0,0,136,46,0,0,240,53,0,0,0,0,0,0,0,0,0,0,168,46,0,0,0,0,0,0,200,46,0,0,0,0,0,0,232,46,0,0,0,0,0,0,8,47,0,0,64,36,0,0,40,47,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,104,55,0,0,2,0,0,0,64,36,0,0,72,47,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,104,55,0,0,2,0,0,0,64,36,0,0,104,47,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,104,55,0,0,2,0,0,0,64,36,0,0,136,47,0,0,0,0,0,0,2,0,0,0,72,53,0,0,2,0,0,0,104,55,0,0,2,0,0,0,0,0,0,0,168,47,0,0,0,0,0,0,192,47,0,0,0,0,0,0,216,47,0,0,0,0,0,0,240,47,0,0,232,53,0,0,0,0,0,0,0,0,0,0,8,48,0,0,240,53,0,0,0,0,0,0,0,0,0,0,32,48,0,0,0,56,0,0,0,0,0,0,0,0,0,0,72,48,0,0,240,55,0,0,0,0,0,0,0,0,0,0,112,48,0,0,240,55,0,0,0,0,0,0,0,0,0,0,152,48,0,0,224,55,0,0,0,0,0,0,0,0,0,0,192,48,0,0,0,56,0,0,0,0,0,0,0,0,0,0,232,48,0,0,0,56,0,0,0,0,0,0,0,0,0,0,16,49,0,0,168,49,0,0,0,0,0,0,64,36,0,0,56,49,0,0,0,0,0,0,1,0,0,0,56,56,0,0,3,244,255,255,0,0,0,0,80,49,0,0,176,49,0,0,0,0,0,0,0,0,0,0,120,49,0,0,24,36,0,0,152,49,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((12712 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12720 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12728 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12744 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12760 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12776 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12792 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12808 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((12820 )>>2)]=__ZTIc;
HEAP32[((12824 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12960 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12976 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13232 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13248 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13328 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13336 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13480 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13496 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13656 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13736 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13744 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13752 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13768 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13784 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13800 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13808 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13816 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13824 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13832 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13840 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13848 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13952 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13968 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13976 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13992 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14008 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14024 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14032 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14040 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14048 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14184 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14192 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14200 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14208 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14224 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14240 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14256 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14272 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14288 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14304 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14320 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14336 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14376 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14392 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var _llvm_va_start=undefined;
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path, ext) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var f = PATH.splitPath(path)[2];
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }
        return f;
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.filter(function(p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }
          return p;
        }).join('/'));
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek
          };
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap
          };
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink
          };
          node.stream_ops = {};
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = FS.chrdev_stream_ops;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && buffer.buffer === HEAP8.buffer && offset === 0) {
              node.contents = buffer; // this is a subarray of the heap, and we can own it
              node.contentMode = MEMFS.CONTENT_OWNING;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        var done = function(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function() { done(null); };
            req.onerror = function() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function() { done(null); };
            req.onerror = function() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        var isRealDir = function(p) {
          return p !== '.' && p !== '..';
        };
        var toAbsolute = function(root) {
          return function(p) {
            return PATH.join(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            return path ? PATH.join(node.mount.mountpoint, path) : node.mount.mountpoint;
          }
          path = path ? PATH.join(node.name, path) : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        var node = {
          id: FS.nextInode++,
          name: name,
          mode: mode,
          node_ops: {},
          stream_ops: {},
          rdev: rdev,
          parent: null,
          mount: null
        };
        if (!parent) {
          parent = node;  // root node sets parent to itself
        }
        node.parent = parent;
        node.mount = parent.mount;
        // compatibility
        var readMode = 292 | 73;
        var writeMode = 146;
        // NOTE we must use Object.defineProperties instead of individual calls to
        // Object.defineProperty in order to make closure compiler happy
        Object.defineProperties(node, {
          read: {
            get: function() { return (node.mode & readMode) === readMode; },
            set: function(val) { val ? node.mode |= readMode : node.mode &= ~readMode; }
          },
          write: {
            get: function() { return (node.mode & writeMode) === writeMode; },
            set: function(val) { val ? node.mode |= writeMode : node.mode &= ~writeMode; }
          },
          isFolder: {
            get: function() { return FS.isDir(node.mode); },
          },
          isDevice: {
            get: function() { return FS.isChrdev(node.mode); },
          },
        });
        FS.hashAddNode(node);
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        // compatibility
        Object.defineProperties(stream, {
          object: {
            get: function() { return stream.node; },
            set: function(val) { stream.node = val; }
          },
          isRead: {
            get: function() { return (stream.flags & 2097155) !== 1; }
          },
          isWrite: {
            get: function() { return (stream.flags & 2097155) !== 0; }
          },
          isAppend: {
            get: function() { return (stream.flags & 1024); }
          }
        });
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        var done = function(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        path = PATH.normalize(path);
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072)
          });
          node = lookup.node;
        } catch (e) {
          // ignore
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(path, mode | 146);
          var stream = FS.open(path, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(path, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {} : ['binary'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          var handleMessage = function(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function ___gxx_personality_v0() {
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module.print('exit(' + status + ') called');
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  var _fabs=Math_abs;
  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return FUNCTION_TABLE[cmp](base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }
  var _atan2=Math_atan2;
  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }
  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x+y > 4294967295,(x+y)>>>0;
    }
  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _signal(sig, func) {
      // TODO
      return 0;
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  var _sqrt=Math_sqrt;
  var _cos=Math_cos;
  var _sin=Math_sin;
  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
  var _llvm_memset_p0i8_i64=_memset;
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }function _strncasecmp(px, py, n) {
      px = px|0; py = py|0; n = n|0;
      var i = 0, x = 0, y = 0;
      while ((i>>>0) < (n>>>0)) {
        x = _tolower(HEAP8[(((px)+(i))|0)])|0;
        y = _tolower(HEAP8[(((py)+(i))|0)])|0;
        if (((x|0) == (y|0)) & ((x|0) == 0)) return 0;
        if ((x|0) == 0) return -1;
        if ((y|0) == 0) return 1;
        if ((x|0) == (y|0)) {
          i = (i + 1)|0;
          continue;
        } else {
          return ((x>>>0) > (y>>>0) ? 1 : -1)|0;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      px = px|0; py = py|0;
      return _strncasecmp(px, py, -1)|0;
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = (tempDouble=ret,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0),ret>>>0;
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  var _tan=Math_tan;
  function _llvm_uadd_with_overflow_i64(a, b, c, d) {
      a = a|0; b = b|0; c = c|0; d = d|0;
      var l = 0, h = 0, overflow = 0;
      l = (a + c)>>>0;
      h = (b + d)>>>0;
      overflow = ((h>>>0) < (b>>>0))|0; // Return whether addition overflowed even the high word.
      if ((l>>>0) < (a>>>0)) {
        h = (h + 1)>>>0; // Add carry from low word to high word on overflow.
        overflow = overflow | (!h); // Check again for overflow.
      }
      return tempRet0 = h,tempRet1 = overflow,l|0;
    }
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_release() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      Module['abort']();
    }
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function ___cxa_guard_abort() {}
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function _catopen() { throw 'TODO: ' + aborter }
  function _catgets() { throw 'TODO: ' + aborter }
  function _catclose() { throw 'TODO: ' + aborter }
  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }
  function _freelocale(locale) {
      _free(locale);
    }
  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      var leadingSomething = function(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      var leadingNulls = function(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      var compareByDay = function(date1, date2) {
        var sgn = function(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      var getFirstWeekStartDate = function(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      var getWeekBasedYear = function(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            ctx = canvas.getContext('experimental-webgl', contextAttributes);
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZN10ClipperLib7Clipper5ResetEv,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZN10ClipperLib7Clipper5ClearEv,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZTv0_n20_N10ClipperLib7Clipper5ResetEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZN10__cxxabiv119__pointer_type_infoD0Ev,0,__ZNK10ClipperLib16clipperException4whatEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__Z16cmp_SupportPointPKvS0_,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZN10ClipperLib11ClipperBaseD2Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZN10ClipperLib7ClipperD1Ev,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZN10ClipperLib11ClipperBase5ClearEv,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__114error_categoryD2Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__Z15compare_int64_tPKvS0_,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZN10ClipperLib16clipperExceptionD0Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZN10ClipperLib8PolySortEPNS_6OutRecES1_,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt13runtime_errorC2EPKc,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZTv0_n12_N10ClipperLib7ClipperD0Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__Z10signal_FPEi,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZN14ConfigSettingsC2Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,___cxa_pure_virtual,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZN10ClipperLib11ClipperBase5ResetEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZTv0_n16_N10ClipperLib7Clipper5ClearEv,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZN10ClipperLib16clipperExceptionD1Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZTv0_n12_N10ClipperLib7ClipperD1Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZN10ClipperLib7ClipperD0Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZN10ClipperLib11ClipperBaseD0Ev,0,__ZNSt3__114error_categoryD0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZN10ClipperLib7Clipper15ExecuteInternalEb,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120,0];
// EMSCRIPTEN_START_FUNCS
function __Z8logErrorPKcz($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $args=sp;
 var $1=(($args)|0);
 var $2=$args;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=HEAP32[((_stdout)>>2)];
 var $4=_vfprintf($3,$fmt,$1);
 var $5=_fflush($3);
 STACKTOP=sp;return;
}
function __Z4_logPKcz($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $args=sp;
 var $1=HEAP32[((14448)>>2)];
 var $2=($1|0)<1;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($args)|0);
 var $5=$args;
 HEAP32[(($5)>>2)]=varrp;HEAP32[((($5)+(4))>>2)]=0;
 var $6=HEAP32[((_stdout)>>2)];
 var $7=_vfprintf($6,$fmt,$4);
 var $8=_fflush($6);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z30generateMultipleVolumesOverlapRNSt3__16vectorI18SliceVolumeStorageNS_9allocatorIS1_EEEEi($volumes,$overlap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fullLayer=sp;
 var $fullLayerClipper=(sp)+(16);
 var $tmp=(sp)+(120);
 var $tmp4=(sp)+(136);
 var $clipper=(sp)+(152);
 var $1=(($volumes+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($volumes)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=($8>>>0)<2;
 var $10=($overlap|0)<1;
 var $or_cond=$9|$10;
 if($or_cond){label=89;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($12|0)==($14|0);
 if($15){label=89;break;}else{label=3;break;}
 case 3: 
 var $16=(($fullLayer)|0);
 var $17=(($fullLayer+4)|0);
 var $18=(($fullLayer+8)|0);
 var $19=(($tmp4)|0);
 var $20=(($tmp4+4)|0);
 var $21=(($tmp4+8)|0);
 var $22=(((($overlap|0))/(2))&-1);
 var $23=($22|0);
 var $24=$clipper;
 var $25=$clipper;
 var $26=$fullLayerClipper;
 var $27=$fullLayerClipper;
 var $28=(($tmp)|0);
 var $29=(($tmp+4)|0);
 var $30=(($tmp+8)|0);
 var $layerNr_0244=0;var $33=$4;var $32=$2;label=4;break;
 case 4: 
 var $32;
 var $33;
 var $layerNr_0244;
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($17)>>2)]=0;
 HEAP32[(($18)>>2)]=0;
 var $34=($32|0)==($33|0);
 if($34){label=37;break;}else{var $volIdx_0214=0;label=5;break;}
 case 5: 
 var $volIdx_0214;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($fullLayerClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=20;break; }
 case 6: 
 var $36=HEAP32[(($3)>>2)];
 var $37=(($36+((($volIdx_0214)*(12))&-1))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[(($26)>>2)];
 var $40=((($39)-(12))|0);
 var $41=$40;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($27+$42)|0);
 var $44=$43;
 var $45=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($44,$fullLayer,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=23;break; }
 case 7: 
 var $46=(($38+((($layerNr_0244)*(12))&-1)+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($38+((($layerNr_0244)*(12))&-1))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=33;break;}else{var $p1_0213=0;label=8;break;}
 case 8: 
 var $p1_0213;
 HEAP32[(($28)>>2)]=0;
 HEAP32[(($29)>>2)]=0;
 HEAP32[(($30)>>2)]=0;
 var $51=HEAP32[(($48)>>2)];
 var $52=(($51+((($p1_0213)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($52,$tmp,20,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=24;break; }
 case 9: 
 var $54=HEAP32[(($26)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($27+$57)|0);
 var $59=$58;
 var $60=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($59,$tmp,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 var $62=HEAP32[(($28)>>2)];
 var $63=($62|0)==0;
 if($63){label=19;break;}else{label=11;break;}
 case 11: 
 var $64=HEAP32[(($29)>>2)];
 var $65=($62|0)==($64|0);
 if($65){var $81=$62;label=18;break;}else{var $66=$64;label=12;break;}
 case 12: 
 var $66;
 var $67=((($66)-(12))|0);
 HEAP32[(($29)>>2)]=$67;
 var $68=(($67)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69;
 var $71=($69|0)==0;
 if($71){var $72=$67;label=13;break;}else{label=14;break;}
 case 13: 
 var $72;
 var $73=($62|0)==($72|0);
 if($73){label=17;break;}else{var $66=$72;label=12;break;}
 case 14: 
 var $74=((($66)-(12)+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($69|0)==($75|0);
 if($76){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i_i=((($75)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $77=(((-$70))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$77)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $78=$uglygep29_i_i_i_i_i_i>>>4;
 var $79=$78^-1;
 var $scevgep30_i_i_i_i_i_i=(($75+($79<<4))|0);
 HEAP32[(($74)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=16;break;
 case 16: 
 var $80=$69;
 __ZdlPv($80);
 var $_pre29_i_i_i=HEAP32[(($29)>>2)];
 var $72=$_pre29_i_i_i;label=13;break;
 case 17: 
 var $_pre_i_i_i=HEAP32[(($28)>>2)];
 var $81=$_pre_i_i_i;label=18;break;
 case 18: 
 var $81;
 var $82=$81;
 __ZdlPv($82);
 label=19;break;
 case 19: 
 var $83=((($p1_0213)+(1))|0);
 var $84=HEAP32[(($46)>>2)];
 var $85=HEAP32[(($48)>>2)];
 var $86=$84;
 var $87=$85;
 var $88=((($86)-($87))|0);
 var $89=(((($88|0))/(96))&-1);
 var $90=($83>>>0)<($89>>>0);
 if($90){var $p1_0213=$83;label=8;break;}else{label=33;break;}
 case 20: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=22;break;
 case 21: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=22;break;
 case 22: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $92=$lpad_phi$0;
 var $93=$lpad_phi$1;
 var $_2=$93;var $_2118=$92;label=80;break;
 case 23: 
 var $95$0 = ___cxa_find_matching_catch(-1, -1); var $95$1 = tempRet0;
 var $96=$95$0;
 var $97=$95$1;
 var $_0=$97;var $_0116=$96;label=36;break;
 case 24: 
 var $99$0 = ___cxa_find_matching_catch(-1, -1); var $99$1 = tempRet0;
 var $100=$99$0;
 var $101=$99$1;
 var $102=HEAP32[(($28)>>2)];
 var $103=($102|0)==0;
 if($103){var $_0=$101;var $_0116=$100;label=36;break;}else{label=25;break;}
 case 25: 
 var $104=HEAP32[(($29)>>2)];
 var $105=($102|0)==($104|0);
 if($105){var $121=$102;label=32;break;}else{var $106=$104;label=26;break;}
 case 26: 
 var $106;
 var $107=((($106)-(12))|0);
 HEAP32[(($29)>>2)]=$107;
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$109;
 var $111=($109|0)==0;
 if($111){var $112=$107;label=27;break;}else{label=28;break;}
 case 27: 
 var $112;
 var $113=($102|0)==($112|0);
 if($113){label=31;break;}else{var $106=$112;label=26;break;}
 case 28: 
 var $114=((($106)-(12)+4)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($109|0)==($115|0);
 if($116){label=30;break;}else{label=29;break;}
 case 29: 
 var $scevgep_i_i_i_i_i_i136=((($115)-(16))|0);
 var $scevgep28_i_i_i_i_i_i137=$scevgep_i_i_i_i_i_i136;
 var $117=(((-$110))|0);
 var $uglygep_i_i_i_i_i_i138=(($scevgep28_i_i_i_i_i_i137+$117)|0);
 var $uglygep29_i_i_i_i_i_i139=$uglygep_i_i_i_i_i_i138;
 var $118=$uglygep29_i_i_i_i_i_i139>>>4;
 var $119=$118^-1;
 var $scevgep30_i_i_i_i_i_i140=(($115+($119<<4))|0);
 HEAP32[(($114)>>2)]=$scevgep30_i_i_i_i_i_i140;
 label=30;break;
 case 30: 
 var $120=$109;
 __ZdlPv($120);
 var $_pre29_i_i_i142=HEAP32[(($29)>>2)];
 var $112=$_pre29_i_i_i142;label=27;break;
 case 31: 
 var $_pre_i_i_i144=HEAP32[(($28)>>2)];
 var $121=$_pre_i_i_i144;label=32;break;
 case 32: 
 var $121;
 var $122=$121;
 __ZdlPv($122);
 var $_0=$101;var $_0116=$100;label=36;break;
 case 33: 
 var $123=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($fullLayerClipper,1,$fullLayer,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=23;break; }
 case 34: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($fullLayerClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=20;break; }
 case 35: 
 var $126=((($volIdx_0214)+(1))|0);
 var $127=HEAP32[(($1)>>2)];
 var $128=HEAP32[(($3)>>2)];
 var $129=$127;
 var $130=$128;
 var $131=((($129)-($130))|0);
 var $132=(((($131|0))/(12))&-1);
 var $133=($126>>>0)<($132>>>0);
 if($133){var $volIdx_0214=$126;label=5;break;}else{label=37;break;}
 case 36: 
 var $_0116;
 var $_0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($fullLayerClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_2=$_0;var $_2118=$_0116;label=80;break; } else { label=91;break; }
 case 37: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($fullLayer,$fullLayer,-20,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=21;break; }
 case 38: 
 var $134=HEAP32[(($1)>>2)];
 var $135=HEAP32[(($3)>>2)];
 var $136=($134|0)==($135|0);
 if($136){var $239=$134;label=69;break;}else{var $volIdx1_0227=0;var $138=$135;var $137=$134;label=39;break;}
 case 39: 
 var $137;
 var $138;
 var $volIdx1_0227;
 var $139=(($138+((($volIdx1_0227)*(12))&-1))|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+((($layerNr_0244)*(12))&-1)+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($140+((($layerNr_0244)*(12))&-1))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){var $232=$137;var $231=$138;label=68;break;}else{var $p13_0222=0;label=40;break;}
 case 40: 
 var $p13_0222;
 HEAP32[(($19)>>2)]=0;
 HEAP32[(($20)>>2)]=0;
 HEAP32[(($21)>>2)]=0;
 var $146=HEAP32[(($143)>>2)];
 var $147=(($146+((($p13_0222)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($147,$tmp4,$23,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=56;break; }
 case 41: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($clipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=56;break; }
 case 42: 
 var $150=HEAP32[(($24)>>2)];
 var $151=((($150)-(12))|0);
 var $152=$151;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($25+$153)|0);
 var $155=$154;
 var $156=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($155,$tmp4,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=57;break; }
 case 43: 
 var $158=HEAP32[(($24)>>2)];
 var $159=((($158)-(12))|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($25+$161)|0);
 var $163=$162;
 var $164=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($163,$fullLayer,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=57;break; }
 case 44: 
 var $166=HEAP32[(($143)>>2)];
 var $167=(($166+((($p13_0222)*(96))&-1)+32)|0);
 var $168=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($clipper,0,$167,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=57;break; }
 case 45: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($clipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=56;break; }
 case 46: 
 var $171=HEAP32[(($19)>>2)];
 var $172=($171|0)==0;
 if($172){label=55;break;}else{label=47;break;}
 case 47: 
 var $173=HEAP32[(($20)>>2)];
 var $174=($171|0)==($173|0);
 if($174){var $190=$171;label=54;break;}else{var $175=$173;label=48;break;}
 case 48: 
 var $175;
 var $176=((($175)-(12))|0);
 HEAP32[(($20)>>2)]=$176;
 var $177=(($176)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$178;
 var $180=($178|0)==0;
 if($180){var $181=$176;label=49;break;}else{label=50;break;}
 case 49: 
 var $181;
 var $182=($171|0)==($181|0);
 if($182){label=53;break;}else{var $175=$181;label=48;break;}
 case 50: 
 var $183=((($175)-(12)+4)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($178|0)==($184|0);
 if($185){label=52;break;}else{label=51;break;}
 case 51: 
 var $scevgep_i_i_i_i_i_i152=((($184)-(16))|0);
 var $scevgep28_i_i_i_i_i_i153=$scevgep_i_i_i_i_i_i152;
 var $186=(((-$179))|0);
 var $uglygep_i_i_i_i_i_i154=(($scevgep28_i_i_i_i_i_i153+$186)|0);
 var $uglygep29_i_i_i_i_i_i155=$uglygep_i_i_i_i_i_i154;
 var $187=$uglygep29_i_i_i_i_i_i155>>>4;
 var $188=$187^-1;
 var $scevgep30_i_i_i_i_i_i156=(($184+($188<<4))|0);
 HEAP32[(($183)>>2)]=$scevgep30_i_i_i_i_i_i156;
 label=52;break;
 case 52: 
 var $189=$178;
 __ZdlPv($189);
 var $_pre29_i_i_i158=HEAP32[(($20)>>2)];
 var $181=$_pre29_i_i_i158;label=49;break;
 case 53: 
 var $_pre_i_i_i160=HEAP32[(($19)>>2)];
 var $190=$_pre_i_i_i160;label=54;break;
 case 54: 
 var $190;
 var $191=$190;
 __ZdlPv($191);
 label=55;break;
 case 55: 
 var $192=((($p13_0222)+(1))|0);
 var $193=HEAP32[(($141)>>2)];
 var $194=HEAP32[(($143)>>2)];
 var $195=$193;
 var $196=$194;
 var $197=((($195)-($196))|0);
 var $198=(((($197|0))/(96))&-1);
 var $199=($192>>>0)<($198>>>0);
 if($199){var $p13_0222=$192;label=40;break;}else{label=67;break;}
 case 56: 
 var $201$0 = ___cxa_find_matching_catch(-1, -1); var $201$1 = tempRet0;
 var $202=$201$0;
 var $203=$201$1;
 var $_1=$203;var $_1117=$202;label=58;break;
 case 57: 
 var $205$0 = ___cxa_find_matching_catch(-1, -1); var $205$1 = tempRet0;
 var $206=$205$0;
 var $207=$205$1;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($clipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1=$207;var $_1117=$206;label=58;break; } else { label=91;break; }
 case 58: 
 var $_1117;
 var $_1;
 var $209=HEAP32[(($19)>>2)];
 var $210=($209|0)==0;
 if($210){var $_2=$_1;var $_2118=$_1117;label=80;break;}else{label=59;break;}
 case 59: 
 var $211=HEAP32[(($20)>>2)];
 var $212=($209|0)==($211|0);
 if($212){var $228=$209;label=66;break;}else{var $213=$211;label=60;break;}
 case 60: 
 var $213;
 var $214=((($213)-(12))|0);
 HEAP32[(($20)>>2)]=$214;
 var $215=(($214)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$216;
 var $218=($216|0)==0;
 if($218){var $219=$214;label=61;break;}else{label=62;break;}
 case 61: 
 var $219;
 var $220=($209|0)==($219|0);
 if($220){label=65;break;}else{var $213=$219;label=60;break;}
 case 62: 
 var $221=((($213)-(12)+4)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($216|0)==($222|0);
 if($223){label=64;break;}else{label=63;break;}
 case 63: 
 var $scevgep_i_i_i_i_i_i168=((($222)-(16))|0);
 var $scevgep28_i_i_i_i_i_i169=$scevgep_i_i_i_i_i_i168;
 var $224=(((-$217))|0);
 var $uglygep_i_i_i_i_i_i170=(($scevgep28_i_i_i_i_i_i169+$224)|0);
 var $uglygep29_i_i_i_i_i_i171=$uglygep_i_i_i_i_i_i170;
 var $225=$uglygep29_i_i_i_i_i_i171>>>4;
 var $226=$225^-1;
 var $scevgep30_i_i_i_i_i_i172=(($222+($226<<4))|0);
 HEAP32[(($221)>>2)]=$scevgep30_i_i_i_i_i_i172;
 label=64;break;
 case 64: 
 var $227=$216;
 __ZdlPv($227);
 var $_pre29_i_i_i174=HEAP32[(($20)>>2)];
 var $219=$_pre29_i_i_i174;label=61;break;
 case 65: 
 var $_pre_i_i_i176=HEAP32[(($19)>>2)];
 var $228=$_pre_i_i_i176;label=66;break;
 case 66: 
 var $228;
 var $229=$228;
 __ZdlPv($229);
 var $_2=$_1;var $_2118=$_1117;label=80;break;
 case 67: 
 var $_pre248=HEAP32[(($1)>>2)];
 var $_pre249=HEAP32[(($3)>>2)];
 var $232=$_pre248;var $231=$_pre249;label=68;break;
 case 68: 
 var $231;
 var $232;
 var $233=((($volIdx1_0227)+(1))|0);
 var $234=$232;
 var $235=$231;
 var $236=((($234)-($235))|0);
 var $237=(((($236|0))/(12))&-1);
 var $238=($233>>>0)<($237>>>0);
 if($238){var $volIdx1_0227=$233;var $138=$231;var $137=$232;label=39;break;}else{var $239=$231;label=69;break;}
 case 69: 
 var $239;
 var $240=HEAP32[(($16)>>2)];
 var $241=($240|0)==0;
 if($241){var $261=$239;label=78;break;}else{label=70;break;}
 case 70: 
 var $242=HEAP32[(($17)>>2)];
 var $243=($240|0)==($242|0);
 if($243){var $259=$240;label=77;break;}else{var $244=$242;label=71;break;}
 case 71: 
 var $244;
 var $245=((($244)-(12))|0);
 HEAP32[(($17)>>2)]=$245;
 var $246=(($245)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=$247;
 var $249=($247|0)==0;
 if($249){var $250=$245;label=72;break;}else{label=73;break;}
 case 72: 
 var $250;
 var $251=($240|0)==($250|0);
 if($251){label=76;break;}else{var $244=$250;label=71;break;}
 case 73: 
 var $252=((($244)-(12)+4)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=($247|0)==($253|0);
 if($254){label=75;break;}else{label=74;break;}
 case 74: 
 var $scevgep_i_i_i_i_i_i184=((($253)-(16))|0);
 var $scevgep28_i_i_i_i_i_i185=$scevgep_i_i_i_i_i_i184;
 var $255=(((-$248))|0);
 var $uglygep_i_i_i_i_i_i186=(($scevgep28_i_i_i_i_i_i185+$255)|0);
 var $uglygep29_i_i_i_i_i_i187=$uglygep_i_i_i_i_i_i186;
 var $256=$uglygep29_i_i_i_i_i_i187>>>4;
 var $257=$256^-1;
 var $scevgep30_i_i_i_i_i_i188=(($253+($257<<4))|0);
 HEAP32[(($252)>>2)]=$scevgep30_i_i_i_i_i_i188;
 label=75;break;
 case 75: 
 var $258=$247;
 __ZdlPv($258);
 var $_pre29_i_i_i190=HEAP32[(($17)>>2)];
 var $250=$_pre29_i_i_i190;label=72;break;
 case 76: 
 var $_pre_i_i_i192=HEAP32[(($16)>>2)];
 var $259=$_pre_i_i_i192;label=77;break;
 case 77: 
 var $259;
 var $260=$259;
 __ZdlPv($260);
 var $_pre=HEAP32[(($3)>>2)];
 var $261=$_pre;label=78;break;
 case 78: 
 var $261;
 var $262=((($layerNr_0244)+(1))|0);
 var $263=(($261+4)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($261)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=$264;
 var $268=$266;
 var $269=((($267)-($268))|0);
 var $270=(((($269|0))/(12))&-1);
 var $271=($262>>>0)<($270>>>0);
 if($271){label=79;break;}else{label=89;break;}
 case 79: 
 var $_pre250=HEAP32[(($1)>>2)];
 var $layerNr_0244=$262;var $33=$261;var $32=$_pre250;label=4;break;
 case 80: 
 var $_2118;
 var $_2;
 var $272=HEAP32[(($16)>>2)];
 var $273=($272|0)==0;
 if($273){label=90;break;}else{label=81;break;}
 case 81: 
 var $274=HEAP32[(($17)>>2)];
 var $275=($272|0)==($274|0);
 if($275){var $291=$272;label=88;break;}else{var $276=$274;label=82;break;}
 case 82: 
 var $276;
 var $277=((($276)-(12))|0);
 HEAP32[(($17)>>2)]=$277;
 var $278=(($277)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=$279;
 var $281=($279|0)==0;
 if($281){var $282=$277;label=83;break;}else{label=84;break;}
 case 83: 
 var $282;
 var $283=($272|0)==($282|0);
 if($283){label=87;break;}else{var $276=$282;label=82;break;}
 case 84: 
 var $284=((($276)-(12)+4)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($279|0)==($285|0);
 if($286){label=86;break;}else{label=85;break;}
 case 85: 
 var $scevgep_i_i_i_i_i_i200=((($285)-(16))|0);
 var $scevgep28_i_i_i_i_i_i201=$scevgep_i_i_i_i_i_i200;
 var $287=(((-$280))|0);
 var $uglygep_i_i_i_i_i_i202=(($scevgep28_i_i_i_i_i_i201+$287)|0);
 var $uglygep29_i_i_i_i_i_i203=$uglygep_i_i_i_i_i_i202;
 var $288=$uglygep29_i_i_i_i_i_i203>>>4;
 var $289=$288^-1;
 var $scevgep30_i_i_i_i_i_i204=(($285+($289<<4))|0);
 HEAP32[(($284)>>2)]=$scevgep30_i_i_i_i_i_i204;
 label=86;break;
 case 86: 
 var $290=$279;
 __ZdlPv($290);
 var $_pre29_i_i_i206=HEAP32[(($17)>>2)];
 var $282=$_pre29_i_i_i206;label=83;break;
 case 87: 
 var $_pre_i_i_i208=HEAP32[(($16)>>2)];
 var $291=$_pre_i_i_i208;label=88;break;
 case 88: 
 var $291;
 var $292=$291;
 __ZdlPv($292);
 label=90;break;
 case 89: 
 STACKTOP=sp;return;
 case 90: 
 var $293$0=$_2118;
 var $293$1=0;
 var $294$0=$293$0;
 var $294$1=$_2;
 ___resumeException($294$0)
 case 91: 
 var $296$0 = ___cxa_find_matching_catch(-1, -1,0); var $296$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z15optimizePolygonRNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEEE($poly){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($poly+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($poly)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>4;
 var $9=((($8)-(1))|0);
 var $10=($2|0)==($4|0);
 if($10){label=21;break;}else{label=2;break;}
 case 2: 
 var $p0_sroa_1_8__idx209=(($4+($9<<4)+8)|0);
 var $p0_sroa_0_0__idx=(($4+($9<<4))|0);
 var $ld$0$0=(($p0_sroa_1_8__idx209)|0);
 var $p0_sroa_1_8_copyload$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($p0_sroa_1_8__idx209+4)|0);
 var $p0_sroa_1_8_copyload$1=HEAP32[(($ld$1$1)>>2)];
 var $ld$2$0=(($p0_sroa_0_0__idx)|0);
 var $p0_sroa_0_0_copyload$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($p0_sroa_0_0__idx+4)|0);
 var $p0_sroa_0_0_copyload$1=HEAP32[(($ld$3$1)>>2)];
 var $p0_sroa_1_8_copyload219223$1=$p0_sroa_1_8_copyload$1;var $p0_sroa_1_8_copyload219223$0=$p0_sroa_1_8_copyload$0;var $p0_sroa_0_0_copyload217224$1=$p0_sroa_0_0_copyload$1;var $p0_sroa_0_0_copyload217224$0=$p0_sroa_0_0_copyload$0;var $i_0225=0;var $13=$4;var $12=$2;label=3;break;
 case 3: 
 var $12;
 var $13;
 var $i_0225;
 var $p0_sroa_0_0_copyload217224$0;
 var $p0_sroa_0_0_copyload217224$1;
 var $p0_sroa_1_8_copyload219223$0;
 var $p0_sroa_1_8_copyload219223$1;
 var $p1_sroa_0_0__idx200=(($13+($i_0225<<4))|0);
 var $ld$4$0=(($p1_sroa_0_0__idx200)|0);
 var $p1_sroa_0_0_copyload201$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p1_sroa_0_0__idx200+4)|0);
 var $p1_sroa_0_0_copyload201$1=HEAP32[(($ld$5$1)>>2)];
 var $p1_sroa_1_8__idx205=(($13+($i_0225<<4)+8)|0);
 var $ld$6$0=(($p1_sroa_1_8__idx205)|0);
 var $p1_sroa_1_8_copyload206$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p1_sroa_1_8__idx205+4)|0);
 var $p1_sroa_1_8_copyload206$1=HEAP32[(($ld$7$1)>>2)];
 var $14$0=_i64Subtract($p0_sroa_0_0_copyload217224$0,$p0_sroa_0_0_copyload217224$1,$p1_sroa_0_0_copyload201$0,$p1_sroa_0_0_copyload201$1);var $14$1=tempRet0;
 var $15$0=_i64Subtract($p0_sroa_1_8_copyload219223$0,$p0_sroa_1_8_copyload219223$1,$p1_sroa_1_8_copyload206$0,$p1_sroa_1_8_copyload206$1);var $15$1=tempRet0;
 var $$etemp$8$0=10;
 var $$etemp$8$1=0;
 var $_off$0=_i64Add($14$0,$14$1,$$etemp$8$0,$$etemp$8$1);var $_off$1=tempRet0;
 var $$etemp$9$0=20;
 var $$etemp$9$1=0;
 var $16=(($_off$1>>>0) > ($$etemp$9$1>>>0)) | (((($_off$1>>>0) == ($$etemp$9$1>>>0) & ($_off$0>>>0) >  ($$etemp$9$0>>>0))));
 if($16){label=9;break;}else{label=4;break;}
 case 4: 
 var $$etemp$10$0=10;
 var $$etemp$10$1=0;
 var $_off220$0=_i64Add($15$0,$15$1,$$etemp$10$0,$$etemp$10$1);var $_off220$1=tempRet0;
 var $$etemp$11$0=20;
 var $$etemp$11$1=0;
 var $18=(($_off220$1>>>0) > ($$etemp$11$1>>>0)) | (((($_off220$1>>>0) == ($$etemp$11$1>>>0) & ($_off220$0>>>0) >  ($$etemp$11$0>>>0))));
 if($18){label=9;break;}else{label=5;break;}
 case 5: 
 var $19$0=___muldi3($14$0,$14$1,$14$0,$14$1);var $19$1=tempRet0;
 var $20$0=___muldi3($15$0,$15$1,$15$0,$15$1);var $20$1=tempRet0;
 var $21$0=_i64Add($20$0,$20$1,$19$0,$19$1);var $21$1=tempRet0;
 var $$etemp$12$0=101;
 var $$etemp$12$1=0;
 var $22=(($21$1|0) < ($$etemp$12$1|0)) | (((($21$1|0) == ($$etemp$12$1|0) & ($21$0>>>0) <  ($$etemp$12$0>>>0))));
 if($22){label=6;break;}else{label=9;break;}
 case 6: 
 var $_idx168=$i_0225<<4;
 var $24=$_idx168>>4;
 var $25=(($13+($24<<4))|0);
 var $_sum169=((($24)+(1))|0);
 var $26=(($13+($_sum169<<4))|0);
 var $27=$12;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>4;
 var $31=$25;
 var $32=$26;
 _memmove($31,$32,$29,8,0);
 var $_sum170=((($30)+($24))|0);
 var $33=(($13+($_sum170<<4))|0);
 var $34=HEAP32[(($1)>>2)];
 var $35=($33|0)==($34|0);
 if($35){var $40=$33;label=8;break;}else{label=7;break;}
 case 7: 
 var $scevgep227=((($34)-(16))|0);
 var $scevgep227228=$scevgep227;
 var $sext241=$i_0225<<4;
 var $36=$sext241>>4;
 var $37=((($30)+($36))|0);
 var $scevgep229=(($13+($37<<4))|0);
 var $scevgep229230=$scevgep229;
 var $38=(((-$scevgep229230))|0);
 var $uglygep=(($scevgep227228+$38)|0);
 var $uglygep231=$uglygep;
 var $39=$uglygep231>>>4;
 var $scevgep227_sum=$39^-1;
 var $scevgep232=(($34+($scevgep227_sum<<4))|0);
 HEAP32[(($1)>>2)]=$scevgep232;
 var $40=$scevgep232;label=8;break;
 case 8: 
 var $40;
 var $41=((($i_0225)-(1))|0);
 var $i_1=$41;var $p0_sroa_0_0_copyload216$1=$p0_sroa_0_0_copyload217224$1;var $p0_sroa_0_0_copyload216$0=$p0_sroa_0_0_copyload217224$0;var $p0_sroa_1_8_copyload218$1=$p0_sroa_1_8_copyload219223$1;var $p0_sroa_1_8_copyload218$0=$p0_sroa_1_8_copyload219223$0;var $106=$40;label=20;break;
 case 9: 
 var $42=$12;
 var $43=$13;
 var $44=((($42)-($43))|0);
 var $45=$44>>4;
 var $46=((($45)-(1))|0);
 var $47=($i_0225>>>0)<($46>>>0);
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=((($i_0225)+(1))|0);
 var $50=(($13+($49<<4))|0);
 var $p2_sroa_1_8__idx194=(($13+($49<<4)+8)|0);
 var $_pn=$50;var $p2_sroa_1_8_copyload195215_in=$p2_sroa_1_8__idx194;label=12;break;
 case 11: 
 var $p2_sroa_1_8__idx193=(($13+8)|0);
 var $_pn=$13;var $p2_sroa_1_8_copyload195215_in=$p2_sroa_1_8__idx193;label=12;break;
 case 12: 
 var $p2_sroa_1_8_copyload195215_in;
 var $_pn;
 var $p2_sroa_0_0_copyload192214_in=(($_pn)|0);
 var $ld$13$0=(($p2_sroa_0_0_copyload192214_in)|0);
 var $p2_sroa_0_0_copyload192214$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($p2_sroa_0_0_copyload192214_in+4)|0);
 var $p2_sroa_0_0_copyload192214$1=HEAP32[(($ld$14$1)>>2)];
 var $ld$15$0=(($p2_sroa_1_8_copyload195215_in)|0);
 var $p2_sroa_1_8_copyload195215$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($p2_sroa_1_8_copyload195215_in+4)|0);
 var $p2_sroa_1_8_copyload195215$1=HEAP32[(($ld$16$1)>>2)];
 var $53$0=_i64Subtract($p1_sroa_0_0_copyload201$0,$p1_sroa_0_0_copyload201$1,$p0_sroa_0_0_copyload217224$0,$p0_sroa_0_0_copyload217224$1);var $53$1=tempRet0;
 var $54$0=_i64Subtract($p1_sroa_1_8_copyload206$0,$p1_sroa_1_8_copyload206$1,$p0_sroa_1_8_copyload219223$0,$p0_sroa_1_8_copyload219223$1);var $54$1=tempRet0;
 var $55$0=___muldi3($53$0,$53$1,$53$0,$53$1);var $55$1=tempRet0;
 var $56$0=___muldi3($54$0,$54$1,$54$0,$54$1);var $56$1=tempRet0;
 var $57$0=_i64Add($56$0,$56$1,$55$0,$55$1);var $57$1=tempRet0;
 var $58=(($57$0>>>0)+(($57$1|0)*4294967296));
 var $59=Math_sqrt($58);
 var $60=(($59)&-1);
 var $61=($60|0)<1;
 if($61){var $diff0_sroa_0_0_load212$1=0;var $diff0_sroa_0_0_load212$0=1000000;var $diff0_sroa_1_8_load213$1=0;var $diff0_sroa_1_8_load213$0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $$etemp$17$0=1000000;
 var $$etemp$17$1=0;
 var $63$0=___muldi3($53$0,$53$1,$$etemp$17$0,$$etemp$17$1);var $63$1=tempRet0;
 var $$etemp$18$0=1000000;
 var $$etemp$18$1=0;
 var $64$0=___muldi3($54$0,$54$1,$$etemp$18$0,$$etemp$18$1);var $64$1=tempRet0;
 var $65$0=$60;
 var $65$1=(((($60|0)<0))|0)?-1:0;
 var $66$0=___divdi3($63$0,$63$1,$65$0,$65$1);var $66$1=tempRet0;
 var $67$0=___divdi3($64$0,$64$1,$65$0,$65$1);var $67$1=tempRet0;
 var $diff0_sroa_0_0_load212$1=$66$1;var $diff0_sroa_0_0_load212$0=$66$0;var $diff0_sroa_1_8_load213$1=$67$1;var $diff0_sroa_1_8_load213$0=$67$0;label=14;break;
 case 14: 
 var $diff0_sroa_1_8_load213$0;
 var $diff0_sroa_1_8_load213$1;
 var $diff0_sroa_0_0_load212$0;
 var $diff0_sroa_0_0_load212$1;
 var $68$0=_i64Subtract($p1_sroa_0_0_copyload201$0,$p1_sroa_0_0_copyload201$1,$p2_sroa_0_0_copyload192214$0,$p2_sroa_0_0_copyload192214$1);var $68$1=tempRet0;
 var $69$0=_i64Subtract($p1_sroa_1_8_copyload206$0,$p1_sroa_1_8_copyload206$1,$p2_sroa_1_8_copyload195215$0,$p2_sroa_1_8_copyload195215$1);var $69$1=tempRet0;
 var $70$0=___muldi3($68$0,$68$1,$68$0,$68$1);var $70$1=tempRet0;
 var $71$0=___muldi3($69$0,$69$1,$69$0,$69$1);var $71$1=tempRet0;
 var $72$0=_i64Add($71$0,$71$1,$70$0,$70$1);var $72$1=tempRet0;
 var $73=(($72$0>>>0)+(($72$1|0)*4294967296));
 var $74=Math_sqrt($73);
 var $75=(($74)&-1);
 var $76=($75|0)<1;
 if($76){var $diff2_sroa_0_0_load210$1=0;var $diff2_sroa_0_0_load210$0=1000000;var $diff2_sroa_1_8_load211$1=0;var $diff2_sroa_1_8_load211$0=0;label=16;break;}else{label=15;break;}
 case 15: 
 var $$etemp$19$0=1000000;
 var $$etemp$19$1=0;
 var $78$0=___muldi3($68$0,$68$1,$$etemp$19$0,$$etemp$19$1);var $78$1=tempRet0;
 var $$etemp$20$0=1000000;
 var $$etemp$20$1=0;
 var $79$0=___muldi3($69$0,$69$1,$$etemp$20$0,$$etemp$20$1);var $79$1=tempRet0;
 var $80$0=$75;
 var $80$1=(((($75|0)<0))|0)?-1:0;
 var $81$0=___divdi3($78$0,$78$1,$80$0,$80$1);var $81$1=tempRet0;
 var $82$0=___divdi3($79$0,$79$1,$80$0,$80$1);var $82$1=tempRet0;
 var $diff2_sroa_0_0_load210$1=$81$1;var $diff2_sroa_0_0_load210$0=$81$0;var $diff2_sroa_1_8_load211$1=$82$1;var $diff2_sroa_1_8_load211$0=$82$0;label=16;break;
 case 16: 
 var $diff2_sroa_1_8_load211$0;
 var $diff2_sroa_1_8_load211$1;
 var $diff2_sroa_0_0_load210$0;
 var $diff2_sroa_0_0_load210$1;
 var $83$0=___muldi3($diff2_sroa_0_0_load210$0,$diff2_sroa_0_0_load210$1,$diff0_sroa_0_0_load212$0,$diff0_sroa_0_0_load212$1);var $83$1=tempRet0;
 var $84$0=___muldi3($diff2_sroa_1_8_load211$0,$diff2_sroa_1_8_load211$1,$diff0_sroa_1_8_load213$0,$diff0_sroa_1_8_load213$1);var $84$1=tempRet0;
 var $85$0=_i64Add($83$0,$83$1,$84$0,$84$1);var $85$1=tempRet0;
 var $$etemp$21$0=728379968;
 var $$etemp$21$1=-233;
 var $86=(($85$1|0) < ($$etemp$21$1|0)) | (((($85$1|0) == ($$etemp$21$1|0) & ($85$0>>>0) <  ($$etemp$21$0>>>0))));
 if($86){label=17;break;}else{var $i_1=$i_0225;var $p0_sroa_0_0_copyload216$1=$p1_sroa_0_0_copyload201$1;var $p0_sroa_0_0_copyload216$0=$p1_sroa_0_0_copyload201$0;var $p0_sroa_1_8_copyload218$1=$p1_sroa_1_8_copyload206$1;var $p0_sroa_1_8_copyload218$0=$p1_sroa_1_8_copyload206$0;var $106=$12;label=20;break;}
 case 17: 
 var $_idx=$i_0225<<4;
 var $88=$_idx>>4;
 var $89=(($13+($88<<4))|0);
 var $_sum=((($88)+(1))|0);
 var $90=(($13+($_sum<<4))|0);
 var $91=$90;
 var $92=((($42)-($91))|0);
 var $93=$92>>4;
 var $94=$89;
 var $95=$90;
 _memmove($94,$95,$92,8,0);
 var $_sum167=((($93)+($88))|0);
 var $96=(($13+($_sum167<<4))|0);
 var $97=HEAP32[(($1)>>2)];
 var $98=($96|0)==($97|0);
 if($98){var $103=$96;label=19;break;}else{label=18;break;}
 case 18: 
 var $scevgep234=((($97)-(16))|0);
 var $scevgep234235=$scevgep234;
 var $sext=$i_0225<<4;
 var $99=$sext>>4;
 var $100=((($93)+($99))|0);
 var $scevgep236=(($13+($100<<4))|0);
 var $scevgep236237=$scevgep236;
 var $101=(((-$scevgep236237))|0);
 var $uglygep238=(($scevgep234235+$101)|0);
 var $uglygep238239=$uglygep238;
 var $102=$uglygep238239>>>4;
 var $scevgep234_sum=$102^-1;
 var $scevgep240=(($97+($scevgep234_sum<<4))|0);
 HEAP32[(($1)>>2)]=$scevgep240;
 var $103=$scevgep240;label=19;break;
 case 19: 
 var $103;
 var $104=((($i_0225)-(1))|0);
 var $i_1=$104;var $p0_sroa_0_0_copyload216$1=$p0_sroa_0_0_copyload217224$1;var $p0_sroa_0_0_copyload216$0=$p0_sroa_0_0_copyload217224$0;var $p0_sroa_1_8_copyload218$1=$p0_sroa_1_8_copyload219223$1;var $p0_sroa_1_8_copyload218$0=$p0_sroa_1_8_copyload219223$0;var $106=$103;label=20;break;
 case 20: 
 var $106;
 var $p0_sroa_1_8_copyload218$0;
 var $p0_sroa_1_8_copyload218$1;
 var $p0_sroa_0_0_copyload216$0;
 var $p0_sroa_0_0_copyload216$1;
 var $i_1;
 var $107=((($i_1)+(1))|0);
 var $108=HEAP32[(($3)>>2)];
 var $109=$106;
 var $110=$108;
 var $111=((($109)-($110))|0);
 var $112=$111>>4;
 var $113=($107>>>0)<($112>>>0);
 if($113){var $p0_sroa_1_8_copyload219223$1=$p0_sroa_1_8_copyload218$1;var $p0_sroa_1_8_copyload219223$0=$p0_sroa_1_8_copyload218$0;var $p0_sroa_0_0_copyload217224$1=$p0_sroa_0_0_copyload216$1;var $p0_sroa_0_0_copyload217224$0=$p0_sroa_0_0_copyload216$0;var $i_0225=$107;var $13=$108;var $12=$106;label=3;break;}else{label=21;break;}
 case 21: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z16optimizePolygonsRNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEE($polys){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($polys+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($polys)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=16;break;}else{var $n_0100=0;var $6=$4;label=2;break;}
 case 2: 
 var $6;
 var $n_0100;
 var $7=(($6+((($n_0100)*(12))&-1))|0);
 __Z15optimizePolygonRNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEEE($7);
 var $8=HEAP32[(($3)>>2)];
 var $9=$8;
 var $10=(($8+((($n_0100)*(12))&-1)+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($8+((($n_0100)*(12))&-1))|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$11;
 var $15=$13;
 var $16=((($14)-($15))|0);
 var $17=$16>>4;
 var $18=($17>>>0)<3;
 if($18){label=4;break;}else{label=3;break;}
 case 3: 
 var $_pre110=HEAP32[(($1)>>2)];
 var $n_1=$n_0100;var $56=$8;var $55=$_pre110;label=15;break;
 case 4: 
 var $_idx=((($n_0100)*(12))&-1);
 var $20=(((($_idx|0))/(12))&-1);
 var $21=(($8+((($20)*(12))&-1))|0);
 var $_sum=((($20)+(1))|0);
 var $22=(($8+((($_sum)*(12))&-1))|0);
 var $23=HEAP32[(($1)>>2)];
 var $24=($22|0)==($23|0);
 if($24){var $_090_lcssa=$21;var $35=$22;label=8;break;}else{label=5;break;}
 case 5: 
 var $scevgep102_sum=(((-2)-($20))|0);
 var $scevgep103=(($23+((($scevgep102_sum)*(12))&-1))|0);
 var $scevgep103104=$scevgep103;
 var $25=(((-$9))|0);
 var $uglygep=(($scevgep103104+$25)|0);
 var $uglygep105=$uglygep;
 var $26=(((($uglygep105>>>0))/(12))&-1);
 var $27=((($20)+($26))|0);
 var $_09097=$21;var $_098=$22;label=6;break;
 case 6: 
 var $_098;
 var $_09097;
 var $28=(($_098)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($_098+4)|0);
 var $31=HEAP32[(($30)>>2)];
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_09097,$29,$31);
 var $32=(($_098+12)|0);
 var $33=(($_09097+12)|0);
 var $34=($32|0)==($23|0);
 if($34){label=7;break;}else{var $_09097=$33;var $_098=$32;label=6;break;}
 case 7: 
 var $scevgep_sum=((($27)+(1))|0);
 var $scevgep106=(($8+((($scevgep_sum)*(12))&-1))|0);
 var $_pre=HEAP32[(($1)>>2)];
 var $_090_lcssa=$scevgep106;var $35=$_pre;label=8;break;
 case 8: 
 var $35;
 var $_090_lcssa;
 var $36=($_090_lcssa|0)==($35|0);
 if($36){var $52=$35;label=14;break;}else{var $37=$35;label=9;break;}
 case 9: 
 var $37;
 var $38=((($37)-(12))|0);
 HEAP32[(($1)>>2)]=$38;
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=($40|0)==0;
 if($42){var $43=$38;label=10;break;}else{label=11;break;}
 case 10: 
 var $43;
 var $44=($_090_lcssa|0)==($43|0);
 if($44){var $52=$_090_lcssa;label=14;break;}else{var $37=$43;label=9;break;}
 case 11: 
 var $45=((($37)-(12)+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($40|0)==($46|0);
 if($47){label=13;break;}else{label=12;break;}
 case 12: 
 var $scevgep_i_i_i=((($46)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $48=(((-$41))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$48)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $49=$uglygep29_i_i_i>>>4;
 var $50=$49^-1;
 var $scevgep30_i_i_i=(($46+($50<<4))|0);
 HEAP32[(($45)>>2)]=$scevgep30_i_i_i;
 label=13;break;
 case 13: 
 var $51=$40;
 __ZdlPv($51);
 var $_pre107=HEAP32[(($1)>>2)];
 var $43=$_pre107;label=10;break;
 case 14: 
 var $52;
 var $53=((($n_0100)-(1))|0);
 var $_pre108=HEAP32[(($3)>>2)];
 var $n_1=$53;var $56=$_pre108;var $55=$52;label=15;break;
 case 15: 
 var $55;
 var $56;
 var $n_1;
 var $57=((($n_1)+(1))|0);
 var $58=$55;
 var $59=$56;
 var $60=((($58)-($59))|0);
 var $61=(((($60|0))/(12))&-1);
 var $62=($57>>>0)<($61>>>0);
 if($62){var $n_0100=$57;var $6=$56;label=2;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z20createLayerWithPartsR10SliceLayerP11SlicerLayeri($storageLayer,$layer,$unionAllType){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $polyList=sp;
 var $p=(sp)+(16);
 var $resultPolys=(sp)+(32);
 var $clipper=(sp)+(48);
 var $1=(sp)+(152);
 var $2=(sp)+(248);
 var $3=(($polyList)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($polyList+4)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($polyList+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($layer+28)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($layer+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=42;break;}else{label=2;break;}
 case 2: 
 var $11=(($p)|0);
 var $12=(($p+4)|0);
 var $13=(($p+8)|0);
 var $14=$unionAllType&2;
 var $15=($14|0)==0;
 var $i_0329=0;var $17=$9;label=3;break;
 case 3: 
 var $17;
 var $i_0329;
 HEAP32[(($11)>>2)]=0;
 HEAP32[(($12)>>2)]=0;
 HEAP32[(($13)>>2)]=0;
 var $18=(($17+((($i_0329)*(12))&-1))|0);
 var $19=HEAP32[(($18)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($p,$19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $_pre347=HEAP32[(($8)>>2)];
 var $20=(($_pre347+((($i_0329)*(12))&-1)+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($_pre347+((($i_0329)*(12))&-1))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$21;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=$26>>4;
 var $28=($27>>>0)>1;
 if($28){var $j_0319=1;var $29=$23;label=5;break;}else{label=17;break;}
 case 5: 
 var $29;
 var $j_0319;
 var $30=(($29+($j_0319<<4))|0);
 var $31=HEAP32[(($12)>>2)];
 var $32=HEAP32[(($13)>>2)];
 var $33=($31|0)==($32|0);
 if($33){label=9;break;}else{label=6;break;}
 case 6: 
 var $35=($31|0)==0;
 if($35){label=8;break;}else{label=7;break;}
 case 7: 
 var $37=$31;
 var $38=$30;
 assert(16 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];HEAP32[((($37)+(12))>>2)]=HEAP32[((($38)+(12))>>2)];
 label=8;break;
 case 8: 
 var $39=(($31+16)|0);
 HEAP32[(($12)>>2)]=$39;
 label=10;break;
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($p,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=11;break; }
 case 10: 
 var $41=((($j_0319)+(1))|0);
 var $42=HEAP32[(($8)>>2)];
 var $43=(($42+((($i_0329)*(12))&-1)+4)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($42+((($i_0329)*(12))&-1))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=$49>>4;
 var $51=($41>>>0)<($50>>>0);
 if($51){var $j_0319=$41;var $29=$46;label=5;break;}else{label=17;break;}
 case 11: 
 var $lpad_loopexit317$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit317$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit317$1;var $eh_lpad_body$0=$lpad_loopexit317$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=13;break;
 case 13: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $52=$eh_lpad_body$0;
 var $53=$eh_lpad_body$1;
 var $54=HEAP32[(($11)>>2)];
 var $55=$54;
 var $56=($54|0)==0;
 if($56){var $_2=$53;var $_2200=$52;label=129;break;}else{label=14;break;}
 case 14: 
 var $57=HEAP32[(($12)>>2)];
 var $58=($54|0)==($57|0);
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i=((($57)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $59=(((-$55))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$59)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $60=$uglygep29_i_i_i>>>4;
 var $61=$60^-1;
 var $scevgep30_i_i_i=(($57+($61<<4))|0);
 HEAP32[(($12)>>2)]=$scevgep30_i_i_i;
 label=16;break;
 case 16: 
 var $62=$54;
 __ZdlPv($62);
 var $_2=$53;var $_2200=$52;label=129;break;
 case 17: 
 if($15){label=21;break;}else{label=18;break;}
 case 18: 
 var $64=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11OrientationERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($p) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=12;break; }
 case 19: 
 if($64){label=20;break;}else{label=21;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14ReversePolygonERNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($p) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=12;break; }
 case 21: 
 var $67=HEAP32[(($4)>>2)];
 var $68=HEAP32[(($5)>>2)];
 var $69=($67|0)==($68|0);
 if($69){label=36;break;}else{label=22;break;}
 case 22: 
 var $71=($67|0)==0;
 if($71){label=35;break;}else{label=23;break;}
 case 23: 
 var $73=(($67)|0);
 HEAP32[(($73)>>2)]=0;
 var $74=(($67+4)|0);
 HEAP32[(($74)>>2)]=0;
 var $75=(($67+8)|0);
 HEAP32[(($75)>>2)]=0;
 var $76=HEAP32[(($12)>>2)];
 var $77=HEAP32[(($11)>>2)];
 var $78=$76;
 var $79=$77;
 var $80=((($78)-($79))|0);
 var $81=$80>>4;
 var $82=($81|0)==0;
 if($82){label=35;break;}else{label=24;break;}
 case 24: 
 var $84=($81>>>0)>268435455;
 if($84){label=25;break;}else{label=26;break;}
 case 25: 
 var $86=$67;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=31;break; }
 case 26: 
 var $87=(function() { try { __THREW__ = 0; return __Znwj($80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 var $89=$87;
 HEAP32[(($74)>>2)]=$89;
 HEAP32[(($73)>>2)]=$89;
 var $90=(($89+($81<<4))|0);
 HEAP32[(($75)>>2)]=$90;
 var $91=HEAP32[(($11)>>2)];
 var $92=HEAP32[(($12)>>2)];
 var $93=($91|0)==($92|0);
 if($93){label=35;break;}else{var $_011_i_i_i=$91;var $94=$89;label=28;break;}
 case 28: 
 var $94;
 var $_011_i_i_i;
 var $95=($94|0)==0;
 if($95){var $99=0;label=30;break;}else{label=29;break;}
 case 29: 
 var $97=$94;
 var $98=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];HEAP32[((($97)+(8))>>2)]=HEAP32[((($98)+(8))>>2)];HEAP32[((($97)+(12))>>2)]=HEAP32[((($98)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($74)>>2)];
 var $99=$_pre12_i_i_i;label=30;break;
 case 30: 
 var $99;
 var $100=(($99+16)|0);
 HEAP32[(($74)>>2)]=$100;
 var $101=(($_011_i_i_i+16)|0);
 var $102=($101|0)==($92|0);
 if($102){label=35;break;}else{var $_011_i_i_i=$101;var $94=$100;label=28;break;}
 case 31: 
 var $104$0 = ___cxa_find_matching_catch(-1, -1); var $104$1 = tempRet0;
 var $105=HEAP32[(($73)>>2)];
 var $106=$105;
 var $107=($105|0)==0;
 if($107){var $eh_lpad_body$1=$104$1;var $eh_lpad_body$0=$104$0;label=13;break;}else{label=32;break;}
 case 32: 
 var $108=HEAP32[(($74)>>2)];
 var $109=($105|0)==($108|0);
 if($109){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i216=((($108)-(16))|0);
 var $scevgep28_i_i_i217=$scevgep_i_i_i216;
 var $110=(((-$106))|0);
 var $uglygep_i_i_i218=(($scevgep28_i_i_i217+$110)|0);
 var $uglygep29_i_i_i219=$uglygep_i_i_i218;
 var $111=$uglygep29_i_i_i219>>>4;
 var $112=$111^-1;
 var $scevgep30_i_i_i220=(($108+($112<<4))|0);
 HEAP32[(($74)>>2)]=$scevgep30_i_i_i220;
 label=34;break;
 case 34: 
 var $113=$105;
 __ZdlPv($113);
 var $eh_lpad_body$1=$104$1;var $eh_lpad_body$0=$104$0;label=13;break;
 case 35: 
 var $114=HEAP32[(($4)>>2)];
 var $115=(($114+12)|0);
 HEAP32[(($4)>>2)]=$115;
 label=37;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($polyList,$p) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=12;break; }
 case 37: 
 var $117=HEAP32[(($11)>>2)];
 var $118=$117;
 var $119=($117|0)==0;
 if($119){label=41;break;}else{label=38;break;}
 case 38: 
 var $120=HEAP32[(($12)>>2)];
 var $121=($117|0)==($120|0);
 if($121){label=40;break;}else{label=39;break;}
 case 39: 
 var $scevgep_i_i_i223=((($120)-(16))|0);
 var $scevgep28_i_i_i224=$scevgep_i_i_i223;
 var $122=(((-$118))|0);
 var $uglygep_i_i_i225=(($scevgep28_i_i_i224+$122)|0);
 var $uglygep29_i_i_i226=$uglygep_i_i_i225;
 var $123=$uglygep29_i_i_i226>>>4;
 var $124=$123^-1;
 var $scevgep30_i_i_i227=(($120+($124<<4))|0);
 HEAP32[(($12)>>2)]=$scevgep30_i_i_i227;
 label=40;break;
 case 40: 
 var $125=$117;
 __ZdlPv($125);
 label=41;break;
 case 41: 
 var $126=((($i_0329)+(1))|0);
 var $127=HEAP32[(($6)>>2)];
 var $128=HEAP32[(($8)>>2)];
 var $129=$127;
 var $130=$128;
 var $131=((($129)-($130))|0);
 var $132=(((($131|0))/(12))&-1);
 var $133=($126>>>0)<($132>>>0);
 if($133){var $i_0329=$126;var $17=$128;label=3;break;}else{label=42;break;}
 case 42: 
 var $134=(($resultPolys)|0);
 HEAP32[(($134)>>2)]=0;
 var $135=(($resultPolys+4)|0);
 HEAP32[(($135)>>2)]=0;
 var $136=(($resultPolys+8)|0);
 HEAP32[(($136)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($clipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=46;break; }
 case 43: 
 var $138=$clipper;
 var $139=HEAP32[(($138)>>2)];
 var $140=((($139)-(12))|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=$clipper;
 var $144=(($143+$142)|0);
 var $145=$144;
 var $146=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($145,$polyList,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=49;break; }
 case 44: 
 var $148=($unionAllType|0)==0;
 if($148){label=51;break;}else{label=45;break;}
 case 45: 
 var $150=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS_9ExPolygonENS2_9allocatorIS4_EEEENS_12PolyFillTypeES9_($clipper,1,$resultPolys,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=49;break; }
 case 46: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $_1=$154;var $_1199=$153;label=124;break;
 case 47: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body246$1=$lpad_loopexit$1;var $eh_lpad_body246$0=$lpad_loopexit$0;label=50;break;
 case 48: 
 var $lpad_loopexit308$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit308$1 = tempRet0;
 var $eh_lpad_body246$1=$lpad_loopexit308$1;var $eh_lpad_body246$0=$lpad_loopexit308$0;label=50;break;
 case 49: 
 var $lpad_nonloopexit309$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit309$1 = tempRet0;
 var $eh_lpad_body246$1=$lpad_nonloopexit309$1;var $eh_lpad_body246$0=$lpad_nonloopexit309$0;label=50;break;
 case 50: 
 var $eh_lpad_body246$0;
 var $eh_lpad_body246$1;
 var $155=$eh_lpad_body246$0;
 var $156=$eh_lpad_body246$1;
 var $_0=$156;var $_0198=$155;label=123;break;
 case 51: 
 var $158=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS_9ExPolygonENS2_9allocatorIS4_EEEENS_12PolyFillTypeES9_($clipper,1,$resultPolys,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=49;break; }
 case 52: 
 var $159=HEAP32[(($135)>>2)];
 var $160=HEAP32[(($134)>>2)];
 var $161=($159|0)==($160|0);
 if($161){label=107;break;}else{label=53;break;}
 case 53: 
 var $162=$1;
 var $163=(($1)|0);
 var $164=(($1+8)|0);
 var $165=(($1+16)|0);
 var $166=(($1+24)|0);
 var $167=(($1+32)|0);
 var $168=$167;
 var $169=(($storageLayer+4)|0);
 var $170=(($storageLayer+8)|0);
 var $171=(($storageLayer)|0);
 var $172=(($storageLayer)|0);
 var $173=(($2)|0);
 var $174=(($2+4)|0);
 var $i1_0313=0;label=54;break;
 case 54: 
 var $i1_0313;
 _memset($162, 0, 96);
 var $$etemp$0$0=0;
 var $$etemp$0$1=-2147483648;
 var $st$1$0=(($163)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($163+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $$etemp$3$0=0;
 var $$etemp$3$1=-2147483648;
 var $st$4$0=(($164)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($164+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $$etemp$6$0=0;
 var $$etemp$6$1=-2147483648;
 var $st$7$0=(($165)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($165+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 var $$etemp$9$0=0;
 var $$etemp$9$1=-2147483648;
 var $st$10$0=(($166)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9$0;
 var $st$11$1=(($166+4)|0);
 HEAP32[(($st$11$1)>>2)]=$$etemp$9$1;
 HEAP32[(($168)>>2)]=0; HEAP32[((($168)+(4))>>2)]=0; HEAP32[((($168)+(8))>>2)]=0; HEAP32[((($168)+(12))>>2)]=0; HEAP32[((($168)+(16))>>2)]=0; HEAP32[((($168)+(20))>>2)]=0; HEAP32[((($168)+(24))>>2)]=0; HEAP32[((($168)+(28))>>2)]=0; HEAP32[((($168)+(32))>>2)]=0; HEAP32[((($168)+(36))>>2)]=0; HEAP32[((($168)+(40))>>2)]=0; HEAP32[((($168)+(44))>>2)]=0; HEAP32[((($168)+(48))>>2)]=0; HEAP32[((($168)+(52))>>2)]=0; HEAP32[((($168)+(56))>>2)]=0;
 var $176=HEAP32[(($169)>>2)];
 var $177=HEAP32[(($170)>>2)];
 var $178=($176|0)==($177|0);
 if($178){label=59;break;}else{label=55;break;}
 case 55: 
 var $180=($176|0)==0;
 if($180){var $182=0;label=58;break;}else{label=56;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartC2ERKS_($176,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=95;break; }
 case 57: 
 var $_pre=HEAP32[(($169)>>2)];
 var $182=$_pre;label=58;break;
 case 58: 
 var $182;
 var $183=(($182+96)|0);
 HEAP32[(($169)>>2)]=$183;
 label=60;break;
 case 59: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($171,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=95;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=48;break; }
 case 61: 
 var $185=HEAP32[(($172)>>2)];
 var $186=HEAP32[(($134)>>2)];
 var $187=(($186+((($i1_0313)*(24))&-1))|0);
 var $188=(($185+((($i1_0313)*(96))&-1)+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($185+((($i1_0313)*(96))&-1)+40)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($189|0)==($191|0);
 if($192){label=76;break;}else{label=62;break;}
 case 62: 
 var $194=($189|0)==0;
 if($194){label=75;break;}else{label=63;break;}
 case 63: 
 var $196=(($189)|0);
 HEAP32[(($196)>>2)]=0;
 var $197=(($189+4)|0);
 HEAP32[(($197)>>2)]=0;
 var $198=(($189+8)|0);
 HEAP32[(($198)>>2)]=0;
 var $199=(($186+((($i1_0313)*(24))&-1)+4)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(($187)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$200;
 var $204=$202;
 var $205=((($203)-($204))|0);
 var $206=$205>>4;
 var $207=($206|0)==0;
 if($207){label=75;break;}else{label=64;break;}
 case 64: 
 var $209=($206>>>0)>268435455;
 if($209){label=65;break;}else{label=66;break;}
 case 65: 
 var $211=$189;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=71;break; }
 case 66: 
 var $212=(function() { try { __THREW__ = 0; return __Znwj($205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=71;break; }
 case 67: 
 var $214=$212;
 HEAP32[(($197)>>2)]=$214;
 HEAP32[(($196)>>2)]=$214;
 var $215=(($214+($206<<4))|0);
 HEAP32[(($198)>>2)]=$215;
 var $216=HEAP32[(($201)>>2)];
 var $217=HEAP32[(($199)>>2)];
 var $218=($216|0)==($217|0);
 if($218){label=75;break;}else{var $_011_i_i_i232=$216;var $219=$214;label=68;break;}
 case 68: 
 var $219;
 var $_011_i_i_i232;
 var $220=($219|0)==0;
 if($220){var $224=0;label=70;break;}else{label=69;break;}
 case 69: 
 var $222=$219;
 var $223=$_011_i_i_i232;
 assert(16 % 1 === 0);HEAP32[(($222)>>2)]=HEAP32[(($223)>>2)];HEAP32[((($222)+(4))>>2)]=HEAP32[((($223)+(4))>>2)];HEAP32[((($222)+(8))>>2)]=HEAP32[((($223)+(8))>>2)];HEAP32[((($222)+(12))>>2)]=HEAP32[((($223)+(12))>>2)];
 var $_pre12_i_i_i234=HEAP32[(($197)>>2)];
 var $224=$_pre12_i_i_i234;label=70;break;
 case 70: 
 var $224;
 var $225=(($224+16)|0);
 HEAP32[(($197)>>2)]=$225;
 var $226=(($_011_i_i_i232+16)|0);
 var $227=($226|0)==($217|0);
 if($227){label=75;break;}else{var $_011_i_i_i232=$226;var $219=$225;label=68;break;}
 case 71: 
 var $229$0 = ___cxa_find_matching_catch(-1, -1); var $229$1 = tempRet0;
 var $230=HEAP32[(($196)>>2)];
 var $231=$230;
 var $232=($230|0)==0;
 if($232){var $eh_lpad_body246$1=$229$1;var $eh_lpad_body246$0=$229$0;label=50;break;}else{label=72;break;}
 case 72: 
 var $233=HEAP32[(($197)>>2)];
 var $234=($230|0)==($233|0);
 if($234){label=74;break;}else{label=73;break;}
 case 73: 
 var $scevgep_i_i_i237=((($233)-(16))|0);
 var $scevgep28_i_i_i238=$scevgep_i_i_i237;
 var $235=(((-$231))|0);
 var $uglygep_i_i_i239=(($scevgep28_i_i_i238+$235)|0);
 var $uglygep29_i_i_i240=$uglygep_i_i_i239;
 var $236=$uglygep29_i_i_i240>>>4;
 var $237=$236^-1;
 var $scevgep30_i_i_i241=(($233+($237<<4))|0);
 HEAP32[(($197)>>2)]=$scevgep30_i_i_i241;
 label=74;break;
 case 74: 
 var $238=$230;
 __ZdlPv($238);
 var $eh_lpad_body246$1=$229$1;var $eh_lpad_body246$0=$229$0;label=50;break;
 case 75: 
 var $239=HEAP32[(($188)>>2)];
 var $240=(($239+12)|0);
 HEAP32[(($188)>>2)]=$240;
 label=77;break;
 case 76: 
 var $242=(($185+((($i1_0313)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($242,$187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=48;break; }
 case 77: 
 var $243=HEAP32[(($134)>>2)];
 var $244=(($243+((($i1_0313)*(24))&-1)+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($243+((($i1_0313)*(24))&-1)+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($245|0)==($247|0);
 var $249=HEAP32[(($172)>>2)];
 if($248){var $_lcssa=$249;label=96;break;}else{var $j2_0307=0;var $251=$247;var $250=$249;label=78;break;}
 case 78: 
 var $250;
 var $251;
 var $j2_0307;
 var $252=(($251+((($j2_0307)*(12))&-1))|0);
 var $253=(($250+((($i1_0313)*(96))&-1)+36)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($250+((($i1_0313)*(96))&-1)+40)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=($254|0)==($256|0);
 if($257){label=93;break;}else{label=79;break;}
 case 79: 
 var $259=($254|0)==0;
 if($259){label=92;break;}else{label=80;break;}
 case 80: 
 var $261=(($254)|0);
 HEAP32[(($261)>>2)]=0;
 var $262=(($254+4)|0);
 HEAP32[(($262)>>2)]=0;
 var $263=(($254+8)|0);
 HEAP32[(($263)>>2)]=0;
 var $264=(($251+((($j2_0307)*(12))&-1)+4)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($252)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=$265;
 var $269=$267;
 var $270=((($268)-($269))|0);
 var $271=$270>>4;
 var $272=($271|0)==0;
 if($272){label=92;break;}else{label=81;break;}
 case 81: 
 var $274=($271>>>0)>268435455;
 if($274){label=82;break;}else{label=83;break;}
 case 82: 
 var $276=$254;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=88;break; }
 case 83: 
 var $277=(function() { try { __THREW__ = 0; return __Znwj($270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=88;break; }
 case 84: 
 var $279=$277;
 HEAP32[(($262)>>2)]=$279;
 HEAP32[(($261)>>2)]=$279;
 var $280=(($279+($271<<4))|0);
 HEAP32[(($263)>>2)]=$280;
 var $281=HEAP32[(($266)>>2)];
 var $282=HEAP32[(($264)>>2)];
 var $283=($281|0)==($282|0);
 if($283){label=92;break;}else{var $_011_i_i_i249=$281;var $284=$279;label=85;break;}
 case 85: 
 var $284;
 var $_011_i_i_i249;
 var $285=($284|0)==0;
 if($285){var $289=0;label=87;break;}else{label=86;break;}
 case 86: 
 var $287=$284;
 var $288=$_011_i_i_i249;
 assert(16 % 1 === 0);HEAP32[(($287)>>2)]=HEAP32[(($288)>>2)];HEAP32[((($287)+(4))>>2)]=HEAP32[((($288)+(4))>>2)];HEAP32[((($287)+(8))>>2)]=HEAP32[((($288)+(8))>>2)];HEAP32[((($287)+(12))>>2)]=HEAP32[((($288)+(12))>>2)];
 var $_pre12_i_i_i251=HEAP32[(($262)>>2)];
 var $289=$_pre12_i_i_i251;label=87;break;
 case 87: 
 var $289;
 var $290=(($289+16)|0);
 HEAP32[(($262)>>2)]=$290;
 var $291=(($_011_i_i_i249+16)|0);
 var $292=($291|0)==($282|0);
 if($292){label=92;break;}else{var $_011_i_i_i249=$291;var $284=$290;label=85;break;}
 case 88: 
 var $294$0 = ___cxa_find_matching_catch(-1, -1); var $294$1 = tempRet0;
 var $295=HEAP32[(($261)>>2)];
 var $296=$295;
 var $297=($295|0)==0;
 if($297){var $eh_lpad_body246$1=$294$1;var $eh_lpad_body246$0=$294$0;label=50;break;}else{label=89;break;}
 case 89: 
 var $298=HEAP32[(($262)>>2)];
 var $299=($295|0)==($298|0);
 if($299){label=91;break;}else{label=90;break;}
 case 90: 
 var $scevgep_i_i_i254=((($298)-(16))|0);
 var $scevgep28_i_i_i255=$scevgep_i_i_i254;
 var $300=(((-$296))|0);
 var $uglygep_i_i_i256=(($scevgep28_i_i_i255+$300)|0);
 var $uglygep29_i_i_i257=$uglygep_i_i_i256;
 var $301=$uglygep29_i_i_i257>>>4;
 var $302=$301^-1;
 var $scevgep30_i_i_i258=(($298+($302<<4))|0);
 HEAP32[(($262)>>2)]=$scevgep30_i_i_i258;
 label=91;break;
 case 91: 
 var $303=$295;
 __ZdlPv($303);
 var $eh_lpad_body246$1=$294$1;var $eh_lpad_body246$0=$294$0;label=50;break;
 case 92: 
 var $304=HEAP32[(($253)>>2)];
 var $305=(($304+12)|0);
 HEAP32[(($253)>>2)]=$305;
 label=94;break;
 case 93: 
 var $307=(($250+((($i1_0313)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($307,$252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=47;break; }
 case 94: 
 var $308=((($j2_0307)+(1))|0);
 var $309=HEAP32[(($134)>>2)];
 var $310=(($309+((($i1_0313)*(24))&-1)+16)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=(($309+((($i1_0313)*(24))&-1)+12)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=$311;
 var $315=$313;
 var $316=((($314)-($315))|0);
 var $317=(((($316|0))/(12))&-1);
 var $318=($308>>>0)<($317>>>0);
 var $319=HEAP32[(($172)>>2)];
 if($318){var $j2_0307=$308;var $251=$313;var $250=$319;label=78;break;}else{var $_lcssa=$319;label=96;break;}
 case 95: 
 var $321$0 = ___cxa_find_matching_catch(-1, -1); var $321$1 = tempRet0;
 var $322=$321$0;
 var $323=$321$1;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$323;var $_0198=$322;label=123;break; } else { label=139;break; }
 case 96: 
 var $_lcssa;
 var $324=(($_lcssa+((($i1_0313)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($2,$324) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=48;break; }
 case 97: 
 var $326=(($_lcssa+((($i1_0313)*(96))&-1))|0);
 __ZN4AABB9calculateENSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($326,$2);
 var $327=HEAP32[(($173)>>2)];
 var $328=($327|0)==0;
 if($328){label=106;break;}else{label=98;break;}
 case 98: 
 var $329=HEAP32[(($174)>>2)];
 var $330=($327|0)==($329|0);
 if($330){var $346=$327;label=105;break;}else{var $331=$329;label=99;break;}
 case 99: 
 var $331;
 var $332=((($331)-(12))|0);
 HEAP32[(($174)>>2)]=$332;
 var $333=(($332)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=$334;
 var $336=($334|0)==0;
 if($336){var $337=$332;label=100;break;}else{label=101;break;}
 case 100: 
 var $337;
 var $338=($327|0)==($337|0);
 if($338){label=104;break;}else{var $331=$337;label=99;break;}
 case 101: 
 var $339=((($331)-(12)+4)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=($334|0)==($340|0);
 if($341){label=103;break;}else{label=102;break;}
 case 102: 
 var $scevgep_i_i_i_i_i_i=((($340)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $342=(((-$335))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$342)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $343=$uglygep29_i_i_i_i_i_i>>>4;
 var $344=$343^-1;
 var $scevgep30_i_i_i_i_i_i=(($340+($344<<4))|0);
 HEAP32[(($339)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=103;break;
 case 103: 
 var $345=$334;
 __ZdlPv($345);
 var $_pre29_i_i_i=HEAP32[(($174)>>2)];
 var $337=$_pre29_i_i_i;label=100;break;
 case 104: 
 var $_pre_i_i_i=HEAP32[(($173)>>2)];
 var $346=$_pre_i_i_i;label=105;break;
 case 105: 
 var $346;
 var $347=$346;
 __ZdlPv($347);
 label=106;break;
 case 106: 
 var $348=((($i1_0313)+(1))|0);
 var $349=HEAP32[(($135)>>2)];
 var $350=HEAP32[(($134)>>2)];
 var $351=$349;
 var $352=$350;
 var $353=((($351)-($352))|0);
 var $354=(((($353|0))/(24))&-1);
 var $355=($348>>>0)<($354>>>0);
 if($355){var $i1_0313=$348;label=54;break;}else{label=107;break;}
 case 107: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($clipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=46;break; }
 case 108: 
 var $357=HEAP32[(($134)>>2)];
 var $358=($357|0)==0;
 if($358){label=113;break;}else{label=109;break;}
 case 109: 
 var $359=HEAP32[(($135)>>2)];
 var $360=($357|0)==($359|0);
 if($360){label=112;break;}else{label=110;break;}
 case 110: 
 var $362=((($359)-(24))|0);
 HEAP32[(($135)>>2)]=$362;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($362) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 111: 
 var $364$0 = ___cxa_find_matching_catch(-1, -1); var $364$1 = tempRet0;
 var $365=$364$0;
 ___cxa_call_unexpected($365);
 throw "Reached an unreachable!";
 case 112: 
 var $366=HEAP32[(($134)>>2)];
 var $367=$366;
 __ZdlPv($367);
 label=113;break;
 case 113: 
 var $368=HEAP32[(($3)>>2)];
 var $369=($368|0)==0;
 if($369){label=122;break;}else{label=114;break;}
 case 114: 
 var $370=HEAP32[(($4)>>2)];
 var $371=($368|0)==($370|0);
 if($371){var $387=$368;label=121;break;}else{var $372=$370;label=115;break;}
 case 115: 
 var $372;
 var $373=((($372)-(12))|0);
 HEAP32[(($4)>>2)]=$373;
 var $374=(($373)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=$375;
 var $377=($375|0)==0;
 if($377){var $378=$373;label=116;break;}else{label=117;break;}
 case 116: 
 var $378;
 var $379=($368|0)==($378|0);
 if($379){label=120;break;}else{var $372=$378;label=115;break;}
 case 117: 
 var $380=((($372)-(12)+4)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($375|0)==($381|0);
 if($382){label=119;break;}else{label=118;break;}
 case 118: 
 var $scevgep_i_i_i_i_i_i271=((($381)-(16))|0);
 var $scevgep28_i_i_i_i_i_i272=$scevgep_i_i_i_i_i_i271;
 var $383=(((-$376))|0);
 var $uglygep_i_i_i_i_i_i273=(($scevgep28_i_i_i_i_i_i272+$383)|0);
 var $uglygep29_i_i_i_i_i_i274=$uglygep_i_i_i_i_i_i273;
 var $384=$uglygep29_i_i_i_i_i_i274>>>4;
 var $385=$384^-1;
 var $scevgep30_i_i_i_i_i_i275=(($381+($385<<4))|0);
 HEAP32[(($380)>>2)]=$scevgep30_i_i_i_i_i_i275;
 label=119;break;
 case 119: 
 var $386=$375;
 __ZdlPv($386);
 var $_pre29_i_i_i277=HEAP32[(($4)>>2)];
 var $378=$_pre29_i_i_i277;label=116;break;
 case 120: 
 var $_pre_i_i_i279=HEAP32[(($3)>>2)];
 var $387=$_pre_i_i_i279;label=121;break;
 case 121: 
 var $387;
 var $388=$387;
 __ZdlPv($388);
 label=122;break;
 case 122: 
 STACKTOP=sp;return;
 case 123: 
 var $_0198;
 var $_0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($clipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1=$_0;var $_1199=$_0198;label=124;break; } else { label=139;break; }
 case 124: 
 var $_1199;
 var $_1;
 var $389=HEAP32[(($134)>>2)];
 var $390=($389|0)==0;
 if($390){var $_2=$_1;var $_2200=$_1199;label=129;break;}else{label=125;break;}
 case 125: 
 var $391=HEAP32[(($135)>>2)];
 var $392=($389|0)==($391|0);
 if($392){label=128;break;}else{label=126;break;}
 case 126: 
 var $394=((($391)-(24))|0);
 HEAP32[(($135)>>2)]=$394;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($394) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=125;break; } else { label=127;break; }
 case 127: 
 var $396$0 = ___cxa_find_matching_catch(-1, -1); var $396$1 = tempRet0;
 var $397=$396$0;
 ___cxa_call_unexpected($397);
 throw "Reached an unreachable!";
 case 128: 
 var $398=HEAP32[(($134)>>2)];
 var $399=$398;
 __ZdlPv($399);
 var $_2=$_1;var $_2200=$_1199;label=129;break;
 case 129: 
 var $_2200;
 var $_2;
 var $400=HEAP32[(($3)>>2)];
 var $401=($400|0)==0;
 if($401){label=138;break;}else{label=130;break;}
 case 130: 
 var $402=HEAP32[(($4)>>2)];
 var $403=($400|0)==($402|0);
 if($403){var $419=$400;label=137;break;}else{var $404=$402;label=131;break;}
 case 131: 
 var $404;
 var $405=((($404)-(12))|0);
 HEAP32[(($4)>>2)]=$405;
 var $406=(($405)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=$407;
 var $409=($407|0)==0;
 if($409){var $410=$405;label=132;break;}else{label=133;break;}
 case 132: 
 var $410;
 var $411=($400|0)==($410|0);
 if($411){label=136;break;}else{var $404=$410;label=131;break;}
 case 133: 
 var $412=((($404)-(12)+4)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=($407|0)==($413|0);
 if($414){label=135;break;}else{label=134;break;}
 case 134: 
 var $scevgep_i_i_i_i_i_i291=((($413)-(16))|0);
 var $scevgep28_i_i_i_i_i_i292=$scevgep_i_i_i_i_i_i291;
 var $415=(((-$408))|0);
 var $uglygep_i_i_i_i_i_i293=(($scevgep28_i_i_i_i_i_i292+$415)|0);
 var $uglygep29_i_i_i_i_i_i294=$uglygep_i_i_i_i_i_i293;
 var $416=$uglygep29_i_i_i_i_i_i294>>>4;
 var $417=$416^-1;
 var $scevgep30_i_i_i_i_i_i295=(($413+($417<<4))|0);
 HEAP32[(($412)>>2)]=$scevgep30_i_i_i_i_i_i295;
 label=135;break;
 case 135: 
 var $418=$407;
 __ZdlPv($418);
 var $_pre29_i_i_i297=HEAP32[(($4)>>2)];
 var $410=$_pre29_i_i_i297;label=132;break;
 case 136: 
 var $_pre_i_i_i299=HEAP32[(($3)>>2)];
 var $419=$_pre_i_i_i299;label=137;break;
 case 137: 
 var $419;
 var $420=$419;
 __ZdlPv($420);
 label=138;break;
 case 138: 
 var $421$0=$_2200;
 var $421$1=0;
 var $422$0=$421$0;
 var $422$1=$_2;
 ___resumeException($422$0)
 case 139: 
 var $424$0 = ___cxa_find_matching_catch(-1, -1,0); var $424$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4AABB9calculateENSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($this,$polys){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_sroa_057_0__idx=(($this)|0);
 var $$etemp$0$0=-1;
 var $$etemp$0$1=2147483647;
 var $st$1$0=(($_sroa_057_0__idx)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($_sroa_057_0__idx+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $_sroa_158_8__idx59=(($this+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=2147483647;
 var $st$4$0=(($_sroa_158_8__idx59)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($_sroa_158_8__idx59+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $_sroa_0_0__idx=(($this+16)|0);
 var $$etemp$6$0=0;
 var $$etemp$6$1=-2147483648;
 var $st$7$0=(($_sroa_0_0__idx)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($_sroa_0_0__idx+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 var $_sroa_1_8__idx56=(($this+24)|0);
 var $$etemp$9$0=0;
 var $$etemp$9$1=-2147483648;
 var $st$10$0=(($_sroa_1_8__idx56)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9$0;
 var $st$11$1=(($_sroa_1_8__idx56+4)|0);
 HEAP32[(($st$11$1)>>2)]=$$etemp$9$1;
 var $1=(($polys+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($polys)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=14;break;}else{var $i_061=0;var $11=$4;var $10=$2;var $9$1=2147483647;var $9$0=-1;var $8$1=2147483647;var $8$0=-1;var $7$1=-2147483648;var $7$0=0;var $6$1=-2147483648;var $6$0=0;label=2;break;}
 case 2: 
 var $6$0;
 var $6$1;
 var $7$0;
 var $7$1;
 var $8$0;
 var $8$1;
 var $9$0;
 var $9$1;
 var $10;
 var $11;
 var $i_061;
 var $12=(($11+((($i_061)*(12))&-1)+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($11+((($i_061)*(12))&-1))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 if($16){var $70=$10;var $69=$11;var $68$1=$9$1;var $68$0=$9$0;var $67$1=$8$1;var $67$0=$8$0;var $66$1=$7$1;var $66$0=$7$0;var $65$1=$6$1;var $65$0=$6$0;label=13;break;}else{var $j_060=0;var $22=$15;var $21$1=$9$1;var $21$0=$9$0;var $20$1=$8$1;var $20$0=$8$0;var $19=$11;var $18$1=$7$1;var $18$0=$7$0;var $17$1=$6$1;var $17$0=$6$0;label=3;break;}
 case 3: 
 var $17$0;
 var $17$1;
 var $18$0;
 var $18$1;
 var $19;
 var $20$0;
 var $20$1;
 var $21$0;
 var $21$1;
 var $22;
 var $j_060;
 var $23=(($22+($j_060<<4))|0);
 var $ld$12$0=(($23)|0);
 var $24$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($23+4)|0);
 var $24$1=HEAP32[(($ld$13$1)>>2)];
 var $25=(($21$1|0) > ($24$1|0)) | (((($21$1|0) == ($24$1|0) & ($21$0>>>0) >  ($24$0>>>0))));
 if($25){label=4;break;}else{var $29$1=$21$1;var $29$0=$21$0;var $28=$19;label=5;break;}
 case 4: 
 var $st$14$0=(($_sroa_057_0__idx)|0);
 HEAP32[(($st$14$0)>>2)]=$24$0;
 var $st$15$1=(($_sroa_057_0__idx+4)|0);
 HEAP32[(($st$15$1)>>2)]=$24$1;
 var $_pre64=HEAP32[(($3)>>2)];
 var $29$1=$24$1;var $29$0=$24$0;var $28=$_pre64;label=5;break;
 case 5: 
 var $28;
 var $29$0;
 var $29$1;
 var $30=(($28+((($i_061)*(12))&-1))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+($j_060<<4)+8)|0);
 var $ld$16$0=(($32)|0);
 var $33$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($32+4)|0);
 var $33$1=HEAP32[(($ld$17$1)>>2)];
 var $34=(($20$1|0) > ($33$1|0)) | (((($20$1|0) == ($33$1|0) & ($20$0>>>0) >  ($33$0>>>0))));
 if($34){label=6;break;}else{var $39$1=$20$1;var $39$0=$20$0;var $38=$28;var $37=$31;label=7;break;}
 case 6: 
 var $st$18$0=(($_sroa_158_8__idx59)|0);
 HEAP32[(($st$18$0)>>2)]=$33$0;
 var $st$19$1=(($_sroa_158_8__idx59+4)|0);
 HEAP32[(($st$19$1)>>2)]=$33$1;
 var $_pre65=HEAP32[(($3)>>2)];
 var $_phi_trans_insert=(($_pre65+((($i_061)*(12))&-1))|0);
 var $_pre66=HEAP32[(($_phi_trans_insert)>>2)];
 var $39$1=$33$1;var $39$0=$33$0;var $38=$_pre65;var $37=$_pre66;label=7;break;
 case 7: 
 var $37;
 var $38;
 var $39$0;
 var $39$1;
 var $40=(($37+($j_060<<4))|0);
 var $ld$20$0=(($40)|0);
 var $41$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($40+4)|0);
 var $41$1=HEAP32[(($ld$21$1)>>2)];
 var $42=(($18$1|0) < ($41$1|0)) | (((($18$1|0) == ($41$1|0) & ($18$0>>>0) <  ($41$0>>>0))));
 if($42){label=8;break;}else{var $47$1=$18$1;var $47$0=$18$0;var $46=$38;var $45=$37;label=9;break;}
 case 8: 
 var $st$22$0=(($_sroa_0_0__idx)|0);
 HEAP32[(($st$22$0)>>2)]=$41$0;
 var $st$23$1=(($_sroa_0_0__idx+4)|0);
 HEAP32[(($st$23$1)>>2)]=$41$1;
 var $_pre67=HEAP32[(($3)>>2)];
 var $_phi_trans_insert68=(($_pre67+((($i_061)*(12))&-1))|0);
 var $_pre69=HEAP32[(($_phi_trans_insert68)>>2)];
 var $47$1=$41$1;var $47$0=$41$0;var $46=$_pre67;var $45=$_pre69;label=9;break;
 case 9: 
 var $45;
 var $46;
 var $47$0;
 var $47$1;
 var $48=(($45+($j_060<<4)+8)|0);
 var $ld$24$0=(($48)|0);
 var $49$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($48+4)|0);
 var $49$1=HEAP32[(($ld$25$1)>>2)];
 var $50=(($17$1|0) < ($49$1|0)) | (((($17$1|0) == ($49$1|0) & ($17$0>>>0) <  ($49$0>>>0))));
 if($50){label=10;break;}else{var $55$1=$17$1;var $55$0=$17$0;var $54=$46;var $53=$45;label=11;break;}
 case 10: 
 var $st$26$0=(($_sroa_1_8__idx56)|0);
 HEAP32[(($st$26$0)>>2)]=$49$0;
 var $st$27$1=(($_sroa_1_8__idx56+4)|0);
 HEAP32[(($st$27$1)>>2)]=$49$1;
 var $_pre70=HEAP32[(($3)>>2)];
 var $_phi_trans_insert71=(($_pre70+((($i_061)*(12))&-1))|0);
 var $_pre72=HEAP32[(($_phi_trans_insert71)>>2)];
 var $55$1=$49$1;var $55$0=$49$0;var $54=$_pre70;var $53=$_pre72;label=11;break;
 case 11: 
 var $53;
 var $54;
 var $55$0;
 var $55$1;
 var $56=((($j_060)+(1))|0);
 var $57=(($54+((($i_061)*(12))&-1)+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$58;
 var $60=$53;
 var $61=((($59)-($60))|0);
 var $62=$61>>4;
 var $63=($56>>>0)<($62>>>0);
 if($63){var $j_060=$56;var $22=$53;var $21$1=$29$1;var $21$0=$29$0;var $20$1=$39$1;var $20$0=$39$0;var $19=$54;var $18$1=$47$1;var $18$0=$47$0;var $17$1=$55$1;var $17$0=$55$0;label=3;break;}else{label=12;break;}
 case 12: 
 var $_pre=HEAP32[(($1)>>2)];
 var $70=$_pre;var $69=$54;var $68$1=$29$1;var $68$0=$29$0;var $67$1=$39$1;var $67$0=$39$0;var $66$1=$47$1;var $66$0=$47$0;var $65$1=$55$1;var $65$0=$55$0;label=13;break;
 case 13: 
 var $65$0;
 var $65$1;
 var $66$0;
 var $66$1;
 var $67$0;
 var $67$1;
 var $68$0;
 var $68$1;
 var $69;
 var $70;
 var $71=((($i_061)+(1))|0);
 var $72=$70;
 var $73=$69;
 var $74=((($72)-($73))|0);
 var $75=(((($74|0))/(12))&-1);
 var $76=($71>>>0)<($75>>>0);
 if($76){var $i_061=$71;var $11=$69;var $10=$70;var $9$1=$68$1;var $9$0=$68$0;var $8$1=$67$1;var $8$0=$67$0;var $7$1=$66$1;var $7$0=$66$0;var $6$1=$65$1;var $6$0=$65$0;label=2;break;}else{label=14;break;}
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z16createLayerPartsR18SliceVolumeStorageP6Sliceri($storage,$slicer,$unionAllType){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($slicer+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($slicer)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=22;break;}else{label=2;break;}
 case 2: 
 var $7=(($1)|0);
 var $8=(($1+4)|0);
 var $9=(($1+8)|0);
 var $10=(($storage+4)|0);
 var $11=(($storage+8)|0);
 var $12=(($storage)|0);
 var $13=(($storage)|0);
 var $14=(($1)|0);
 var $layerNr_034=0;label=3;break;
 case 3: 
 var $layerNr_034;
 var $16=$1;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($16)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($16+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 HEAP32[(($7)>>2)]=0;
 HEAP32[(($8)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 var $17=HEAP32[(($10)>>2)];
 var $18=HEAP32[(($11)>>2)];
 var $19=($17|0)==($18|0);
 if($19){label=8;break;}else{label=4;break;}
 case 4: 
 var $21=($17|0)==0;
 if($21){var $24=0;label=7;break;}else{label=5;break;}
 case 5: 
 var $23=(($17)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEEC2ERKS4_($23,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=16;break; }
 case 6: 
 var $_pre36=HEAP32[(($10)>>2)];
 var $24=$_pre36;label=7;break;
 case 7: 
 var $24;
 var $25=(($24+12)|0);
 HEAP32[(($10)>>2)]=$25;
 label=9;break;
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI10SliceLayerNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($12,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=16;break; }
 case 9: 
 var $27=HEAP32[(($7)>>2)];
 var $28=($27|0)==0;
 if($28){label=15;break;}else{label=10;break;}
 case 10: 
 var $_pre=HEAP32[(($8)>>2)];
 var $29=$_pre;label=11;break;
 case 11: 
 var $29;
 var $30=($27|0)==($29|0);
 if($30){label=14;break;}else{label=12;break;}
 case 12: 
 var $32=((($29)-(96))|0);
 HEAP32[(($8)>>2)]=$32;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $29=$32;label=11;break; } else { label=13;break; }
 case 13: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 ___cxa_call_unexpected($35);
 throw "Reached an unreachable!";
 case 14: 
 var $36=HEAP32[(($7)>>2)];
 var $37=$36;
 __ZdlPv($37);
 label=15;break;
 case 15: 
 var $38=HEAP32[(($13)>>2)];
 var $39=(($38+((($layerNr_034)*(12))&-1))|0);
 var $40=HEAP32[(($4)>>2)];
 var $41=(($40+((($layerNr_034)*(48))&-1))|0);
 __Z20createLayerWithPartsR10SliceLayerP11SlicerLayeri($39,$41,$unionAllType);
 var $42=((($layerNr_034)+(1))|0);
 var $43=HEAP32[(($2)>>2)];
 var $44=HEAP32[(($4)>>2)];
 var $45=$43;
 var $46=$44;
 var $47=((($45)-($46))|0);
 var $48=(((($47|0))/(48))&-1);
 var $49=($42>>>0)<($48>>>0);
 if($49){var $layerNr_034=$42;label=3;break;}else{label=22;break;}
 case 16: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP32[(($7)>>2)];
 var $53=($52|0)==0;
 if($53){label=23;break;}else{label=17;break;}
 case 17: 
 var $_pre35=HEAP32[(($8)>>2)];
 var $54=$_pre35;label=18;break;
 case 18: 
 var $54;
 var $55=($52|0)==($54|0);
 if($55){label=21;break;}else{label=19;break;}
 case 19: 
 var $57=((($54)-(96))|0);
 HEAP32[(($8)>>2)]=$57;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $54=$57;label=18;break; } else { label=20;break; }
 case 20: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 ___cxa_call_unexpected($60);
 throw "Reached an unreachable!";
 case 21: 
 var $61=HEAP32[(($7)>>2)];
 var $62=$61;
 __ZdlPv($62);
 label=23;break;
 case 22: 
 STACKTOP=sp;return;
 case 23: 
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z14generateInsetsP14SliceLayerPartii($part,$offset,$insetCount){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($part+32)|0);
 var $3=(($part+44)|0);
 var $4=(((-$offset))|0);
 var $5=($4|0);
 __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($2,$3,$5,0,2,0);
 var $6=($insetCount|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($part+56)|0);
 var $8=(($1)|0);
 var $9=(($1+4)|0);
 var $10=(($1+8)|0);
 var $11=(($part+60)|0);
 var $12=(($part+64)|0);
 var $13=(($7)|0);
 var $14=(((($offset|0))/(2))&-1);
 var $i_0=0;label=8;break;
 case 3: 
 var $16=(($part+60)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($part+64)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($17|0)==($19|0);
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=($17|0)==0;
 if($22){var $24=0;label=6;break;}else{label=5;break;}
 case 5: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($17,$2);
 var $_pre=HEAP32[(($16)>>2)];
 var $24=$_pre;label=6;break;
 case 6: 
 var $24;
 var $25=(($24+12)|0);
 HEAP32[(($16)>>2)]=$25;
 label=45;break;
 case 7: 
 var $27=(($part+56)|0);
 __ZNSt3__16vectorINS0_INS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEE21__push_back_slow_pathIKS7_EEvRT_($27,$2);
 label=45;break;
 case 8: 
 var $i_0;
 var $29=($i_0|0)<($insetCount|0);
 if($29){label=9;break;}else{label=45;break;}
 case 9: 
 HEAP32[(($8)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 HEAP32[(($10)>>2)]=0;
 var $31=HEAP32[(($11)>>2)];
 var $32=HEAP32[(($12)>>2)];
 var $33=($31|0)==($32|0);
 if($33){label=14;break;}else{label=10;break;}
 case 10: 
 var $35=($31|0)==0;
 if($35){var $37=0;label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($31,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=36;break; }
 case 12: 
 var $_pre134=HEAP32[(($11)>>2)];
 var $37=$_pre134;label=13;break;
 case 13: 
 var $37;
 var $38=(($37+12)|0);
 HEAP32[(($11)>>2)]=$38;
 label=15;break;
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_INS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEE21__push_back_slow_pathIKS7_EEvRT_($7,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=36;break; }
 case 15: 
 var $40=HEAP32[(($8)>>2)];
 var $41=($40|0)==0;
 if($41){label=24;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($9)>>2)];
 var $43=($40|0)==($42|0);
 if($43){var $59=$40;label=23;break;}else{var $44=$42;label=17;break;}
 case 17: 
 var $44;
 var $45=((($44)-(12))|0);
 HEAP32[(($9)>>2)]=$45;
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=($47|0)==0;
 if($49){var $50=$45;label=18;break;}else{label=19;break;}
 case 18: 
 var $50;
 var $51=($40|0)==($50|0);
 if($51){label=22;break;}else{var $44=$50;label=17;break;}
 case 19: 
 var $52=((($44)-(12)+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($47|0)==($53|0);
 if($54){var $_pre29_i_i_i=$45;label=21;break;}else{label=20;break;}
 case 20: 
 var $scevgep_i_i_i_i_i_i=((($53)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $55=(((-$48))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$55)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $56=$uglygep29_i_i_i_i_i_i>>>4;
 var $57=$56^-1;
 var $scevgep30_i_i_i_i_i_i=(($53+($57<<4))|0);
 HEAP32[(($52)>>2)]=$scevgep30_i_i_i_i_i_i;
 var $_pre29_i_i_i_pre=HEAP32[(($9)>>2)];
 var $_pre29_i_i_i=$_pre29_i_i_i_pre;label=21;break;
 case 21: 
 var $_pre29_i_i_i;
 var $58=$47;
 __ZdlPv($58);
 var $50=$_pre29_i_i_i;label=18;break;
 case 22: 
 var $_pre_i_i_i=HEAP32[(($8)>>2)];
 var $59=$_pre_i_i_i;label=23;break;
 case 23: 
 var $59;
 var $60=$59;
 __ZdlPv($60);
 label=24;break;
 case 24: 
 var $61=HEAP32[(($13)>>2)];
 var $62=(($61+((($i_0)*(12))&-1))|0);
 var $63=(Math_imul($i_0,$4)|0);
 var $64=((($63)-($14))|0);
 var $65=($64|0);
 __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($2,$62,$65,0,2,0);
 var $66=HEAP32[(($13)>>2)];
 var $67=(($66+((($i_0)*(12))&-1))|0);
 __Z16optimizePolygonsRNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEE($67);
 var $68=HEAP32[(($13)>>2)];
 var $69=(($68+((($i_0)*(12))&-1)+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($68+((($i_0)*(12))&-1))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($70|0)==($72|0);
 var $74=((($i_0)+(1))|0);
 if($73){label=25;break;}else{var $i_0=$74;label=8;break;}
 case 25: 
 var $75=HEAP32[(($11)>>2)];
 var $76=((($75)-(12))|0);
 var $78=$75;label=26;break;
 case 26: 
 var $78;
 var $79=((($78)-(12))|0);
 HEAP32[(($11)>>2)]=$79;
 var $80=(($79)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==0;
 if($82){var $83=$79;label=27;break;}else{label=28;break;}
 case 27: 
 var $83;
 var $84=($76|0)==($83|0);
 if($84){label=45;break;}else{var $78=$83;label=26;break;}
 case 28: 
 var $85=((($78)-(12)+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($81|0)==($86|0);
 if($87){var $103=$81;label=35;break;}else{var $88=$86;label=29;break;}
 case 29: 
 var $88;
 var $89=((($88)-(12))|0);
 HEAP32[(($85)>>2)]=$89;
 var $90=(($89)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$91;
 var $93=($91|0)==0;
 if($93){var $94=$89;label=30;break;}else{label=31;break;}
 case 30: 
 var $94;
 var $95=($81|0)==($94|0);
 if($95){label=34;break;}else{var $88=$94;label=29;break;}
 case 31: 
 var $96=((($88)-(12)+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($91|0)==($97|0);
 if($98){label=33;break;}else{label=32;break;}
 case 32: 
 var $scevgep_i_i_i_i_i_i97=((($97)-(16))|0);
 var $scevgep28_i_i_i_i_i_i98=$scevgep_i_i_i_i_i_i97;
 var $99=(((-$92))|0);
 var $uglygep_i_i_i_i_i_i99=(($scevgep28_i_i_i_i_i_i98+$99)|0);
 var $uglygep29_i_i_i_i_i_i100=$uglygep_i_i_i_i_i_i99;
 var $100=$uglygep29_i_i_i_i_i_i100>>>4;
 var $101=$100^-1;
 var $scevgep30_i_i_i_i_i_i101=(($97+($101<<4))|0);
 HEAP32[(($96)>>2)]=$scevgep30_i_i_i_i_i_i101;
 label=33;break;
 case 33: 
 var $102=$91;
 __ZdlPv($102);
 var $_pre29_i_i_i103=HEAP32[(($85)>>2)];
 var $94=$_pre29_i_i_i103;label=30;break;
 case 34: 
 var $_pre_i_i_i105=HEAP32[(($80)>>2)];
 var $103=$_pre_i_i_i105;label=35;break;
 case 35: 
 var $103;
 var $104=$103;
 __ZdlPv($104);
 var $_pre131=HEAP32[(($11)>>2)];
 var $83=$_pre131;label=27;break;
 case 36: 
 var $106$0 = ___cxa_find_matching_catch(-1, -1); var $106$1 = tempRet0;
 var $107=HEAP32[(($8)>>2)];
 var $108=($107|0)==0;
 if($108){label=46;break;}else{label=37;break;}
 case 37: 
 var $109=HEAP32[(($9)>>2)];
 var $110=($107|0)==($109|0);
 if($110){var $126=$107;label=44;break;}else{var $111=$109;label=38;break;}
 case 38: 
 var $111;
 var $112=((($111)-(12))|0);
 HEAP32[(($9)>>2)]=$112;
 var $113=(($112)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114;
 var $116=($114|0)==0;
 if($116){var $117=$112;label=39;break;}else{label=40;break;}
 case 39: 
 var $117;
 var $118=($107|0)==($117|0);
 if($118){label=43;break;}else{var $111=$117;label=38;break;}
 case 40: 
 var $119=((($111)-(12)+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($114|0)==($120|0);
 if($121){var $_pre29_i_i_i119=$112;label=42;break;}else{label=41;break;}
 case 41: 
 var $scevgep_i_i_i_i_i_i113=((($120)-(16))|0);
 var $scevgep28_i_i_i_i_i_i114=$scevgep_i_i_i_i_i_i113;
 var $122=(((-$115))|0);
 var $uglygep_i_i_i_i_i_i115=(($scevgep28_i_i_i_i_i_i114+$122)|0);
 var $uglygep29_i_i_i_i_i_i116=$uglygep_i_i_i_i_i_i115;
 var $123=$uglygep29_i_i_i_i_i_i116>>>4;
 var $124=$123^-1;
 var $scevgep30_i_i_i_i_i_i117=(($120+($124<<4))|0);
 HEAP32[(($119)>>2)]=$scevgep30_i_i_i_i_i_i117;
 var $_pre29_i_i_i119_pre=HEAP32[(($9)>>2)];
 var $_pre29_i_i_i119=$_pre29_i_i_i119_pre;label=42;break;
 case 42: 
 var $_pre29_i_i_i119;
 var $125=$114;
 __ZdlPv($125);
 var $117=$_pre29_i_i_i119;label=39;break;
 case 43: 
 var $_pre_i_i_i121=HEAP32[(($8)>>2)];
 var $126=$_pre_i_i_i121;label=44;break;
 case 44: 
 var $126;
 var $127=$126;
 __ZdlPv($127);
 label=46;break;
 case 45: 
 STACKTOP=sp;return;
 case 46: 
 ___resumeException($106$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z14generateInsetsP10SliceLayerii($layer,$offset,$insetCount){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($layer+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($layer)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=15;break;}else{var $partNr_097=0;var $7=$4;label=3;break;}
 case 2: 
 var $6=($10|0)==($11|0);
 if($6){label=15;break;}else{var $partNr1_094=0;var $18=$10;var $17=$11;label=4;break;}
 case 3: 
 var $7;
 var $partNr_097;
 var $8=(($7+((($partNr_097)*(96))&-1))|0);
 __Z14generateInsetsP14SliceLayerPartii($8,$offset,$insetCount);
 var $9=((($partNr_097)+(1))|0);
 var $10=HEAP32[(($1)>>2)];
 var $11=HEAP32[(($3)>>2)];
 var $12=$10;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=(((($14|0))/(96))&-1);
 var $16=($9>>>0)<($15>>>0);
 if($16){var $partNr_097=$9;var $7=$11;label=3;break;}else{label=2;break;}
 case 4: 
 var $17;
 var $18;
 var $partNr1_094;
 var $19=$17;
 var $20=(($17+((($partNr1_094)*(96))&-1)+60)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($17+((($partNr1_094)*(96))&-1)+56)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($21|0)==($23|0);
 if($24){label=5;break;}else{var $partNr1_1=$partNr1_094;var $76=$18;var $75=$17;label=14;break;}
 case 5: 
 var $_idx=((($partNr1_094)*(96))&-1);
 var $26=(((($_idx|0))/(96))&-1);
 var $27=(($17+((($26)*(96))&-1))|0);
 var $_sum=((($26)+(1))|0);
 var $28=(($17+((($_sum)*(96))&-1))|0);
 var $29=($28|0)==($18|0);
 if($29){var $_085_lcssa=$27;label=9;break;}else{label=6;break;}
 case 6: 
 var $scevgep102_sum=(((-2)-($26))|0);
 var $scevgep103=(($18+((($scevgep102_sum)*(96))&-1))|0);
 var $scevgep103104=$scevgep103;
 var $30=(((-$19))|0);
 var $uglygep=(($scevgep103104+$30)|0);
 var $uglygep105=$uglygep;
 var $31=(((($uglygep105>>>0))/(96))&-1);
 var $32=((($26)+($31))|0);
 var $_08592=$27;var $_093=$28;label=7;break;
 case 7: 
 var $_093;
 var $_08592;
 var $33=$_08592;
 var $34=$_093;
 assert(32 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];HEAP32[((($33)+(12))>>2)]=HEAP32[((($34)+(12))>>2)];HEAP32[((($33)+(16))>>2)]=HEAP32[((($34)+(16))>>2)];HEAP32[((($33)+(20))>>2)]=HEAP32[((($34)+(20))>>2)];HEAP32[((($33)+(24))>>2)]=HEAP32[((($34)+(24))>>2)];HEAP32[((($33)+(28))>>2)]=HEAP32[((($34)+(28))>>2)];
 var $35=(($_08592+32)|0);
 var $36=(($_093+32)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_093+36)|0);
 var $39=HEAP32[(($38)>>2)];
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($35,$37,$39);
 var $40=(($_08592+44)|0);
 var $41=(($_093+44)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($_093+48)|0);
 var $44=HEAP32[(($43)>>2)];
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($40,$42,$44);
 var $45=(($_08592+56)|0);
 var $46=(($_093+56)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($_093+60)|0);
 var $49=HEAP32[(($48)>>2)];
 __ZNSt3__16vectorINS0_INS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEE6assignIPS7_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS7_NS_15iterator_traitsISD_E9referenceEEE5valueEvE4typeESD_SD_($45,$47,$49);
 var $50=(($_08592+68)|0);
 var $51=(($_093+68)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($_093+72)|0);
 var $54=HEAP32[(($53)>>2)];
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($50,$52,$54);
 var $55=(($_08592+80)|0);
 var $56=(($_093+80)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($_093+84)|0);
 var $59=HEAP32[(($58)>>2)];
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($55,$57,$59);
 var $60=(($_093+92)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($_08592+92)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=(($_093+96)|0);
 var $64=(($_08592+96)|0);
 var $65=($63|0)==($18|0);
 if($65){label=8;break;}else{var $_08592=$64;var $_093=$63;label=7;break;}
 case 8: 
 var $scevgep_sum=((($32)+(1))|0);
 var $scevgep106=(($17+((($scevgep_sum)*(96))&-1))|0);
 var $_085_lcssa=$scevgep106;label=9;break;
 case 9: 
 var $_085_lcssa;
 label=10;break;
 case 10: 
 var $66=HEAP32[(($1)>>2)];
 var $67=($_085_lcssa|0)==($66|0);
 if($67){label=13;break;}else{label=11;break;}
 case 11: 
 var $69=((($66)-(96))|0);
 HEAP32[(($1)>>2)]=$69;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 12: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 var $72=$71$0;
 ___cxa_call_unexpected($72);
 throw "Reached an unreachable!";
 case 13: 
 var $73=((($partNr1_094)-(1))|0);
 var $_pre=HEAP32[(($3)>>2)];
 var $partNr1_1=$73;var $76=$_085_lcssa;var $75=$_pre;label=14;break;
 case 14: 
 var $75;
 var $76;
 var $partNr1_1;
 var $77=((($partNr1_1)+(1))|0);
 var $78=$76;
 var $79=$75;
 var $80=((($78)-($79))|0);
 var $81=(((($80|0))/(96))&-1);
 var $82=($77>>>0)<($81>>>0);
 if($82){var $partNr1_094=$77;var $18=$76;var $17=$75;label=4;break;}else{label=15;break;}
 case 15: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z13generateSkinsiR18SliceVolumeStorageiiii($layerNr,$storage,$extrusionWidth,$downSkinCount,$upSkinCount,$infillOverlap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+464)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp=sp;
 var $downskinClipper=(sp)+(16);
 var $upskinClipper=(sp)+(120);
 var $thinWallClipper=(sp)+(224);
 var $downSkin=(sp)+(328);
 var $upSkin=(sp)+(344);
 var $skinCombineClipper=(sp)+(360);
 var $1=(($storage)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+((($layerNr)*(12))&-1)+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+((($layerNr)*(12))&-1))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){label=133;break;}else{label=2;break;}
 case 2: 
 var $8=(($temp)|0);
 var $9=(($temp+4)|0);
 var $10=(($temp+8)|0);
 var $11=(((($extrusionWidth|0))/(-2))&-1);
 var $12=($11|0);
 var $13=$downskinClipper;
 var $14=$downskinClipper;
 var $15=$upskinClipper;
 var $16=$upskinClipper;
 var $17=(Math_imul($infillOverlap,$extrusionWidth)|0);
 var $18=(((($17|0))/(100))&-1);
 var $19=((($11)-($18))|0);
 var $20=($19|0);
 var $21=$thinWallClipper;
 var $22=$thinWallClipper;
 var $23=((($extrusionWidth)*(6))&-1);
 var $24=(((($23|0))/(10))&-1);
 var $25=($24|0);
 var $26=((($layerNr)-($downSkinCount))|0);
 var $27=($26|0)>-1;
 var $28=((($upSkinCount)+($layerNr))|0);
 var $29=(($storage+4)|0);
 var $30=(($downSkin)|0);
 var $31=(($downSkin+4)|0);
 var $32=(($downSkin+8)|0);
 var $33=(($upSkin)|0);
 var $34=(($upSkin+4)|0);
 var $35=(($upSkin+8)|0);
 var $36=$skinCombineClipper;
 var $37=$skinCombineClipper;
 var $38=($extrusionWidth|0);
 var $39=($38)/(1000);
 var $40=($39)*((6.283185307179586));
 var $41=($39)*($40);
 var $42=($41)*((0.3));
 var $partNr_0406=0;var $44=$6;label=3;break;
 case 3: 
 var $44;
 var $partNr_0406;
 var $45=(($44+((($partNr_0406)*(96))&-1))|0);
 HEAP32[(($8)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 HEAP32[(($10)>>2)]=0;
 var $46=(($44+((($partNr_0406)*(96))&-1)+60)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($44+((($partNr_0406)*(96))&-1)+56)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=(((($52|0))/(12))&-1);
 var $54=((($53)-(1))|0);
 var $55=(($49+((($54)*(12))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($55,$temp,$12,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=18;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($downskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=18;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($upskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 var $59=HEAP32[(($13)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($14+$62)|0);
 var $64=$63;
 var $65=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($64,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $67=HEAP32[(($15)>>2)];
 var $68=((($67)-(12))|0);
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($16+$70)|0);
 var $72=$71;
 var $73=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($72,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $75=HEAP32[(($46)>>2)];
 var $76=HEAP32[(($48)>>2)];
 var $77=$75;
 var $78=$76;
 var $79=((($77)-($78))|0);
 var $80=(((($79|0))/(12))&-1);
 var $81=($80>>>0)>1;
 if($81){label=9;break;}else{label=25;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($thinWallClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $84=HEAP32[(($48)>>2)];
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($84,$temp,$20,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=24;break; }
 case 11: 
 var $86=HEAP32[(($21)>>2)];
 var $87=((($86)-(12))|0);
 var $88=$87;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($22+$89)|0);
 var $91=$90;
 var $92=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($91,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=24;break; }
 case 12: 
 var $94=HEAP32[(($48)>>2)];
 var $95=(($94+12)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($95,$temp,$25,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=24;break; }
 case 13: 
 var $97=HEAP32[(($21)>>2)];
 var $98=((($97)-(12))|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($22+$100)|0);
 var $102=$101;
 var $103=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($102,$temp,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=24;break; }
 case 14: 
 var $105=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($thinWallClipper,2,$temp,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $107=HEAP32[(($13)>>2)];
 var $108=((($107)-(12))|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($14+$110)|0);
 var $112=$111;
 var $113=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($112,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=24;break; }
 case 16: 
 var $115=HEAP32[(($15)>>2)];
 var $116=((($115)-(12))|0);
 var $117=$116;
 var $118=HEAP32[(($117)>>2)];
 var $119=(($16+$118)|0);
 var $120=$119;
 var $121=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($120,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=24;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($thinWallClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=22;break; }
 case 18: 
 var $124$0 = ___cxa_find_matching_catch(-1, -1); var $124$1 = tempRet0;
 var $125=$124$0;
 var $126=$124$1;
 var $_4=$125;var $_4244=$126;label=124;break;
 case 19: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $_3=$129;var $_3243=$130;label=123;break;
 case 20: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=23;break;
 case 21: 
 var $lpad_loopexit352$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit352$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit352$1;var $lpad_phi$0=$lpad_loopexit352$0;label=23;break;
 case 22: 
 var $lpad_nonloopexit353$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit353$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit353$1;var $lpad_phi$0=$lpad_nonloopexit353$0;label=23;break;
 case 23: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $131=$lpad_phi$0;
 var $132=$lpad_phi$1;
 var $_2=$131;var $_2242=$132;label=122;break;
 case 24: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($thinWallClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_2=$135;var $_2242=$136;label=122;break; } else { label=135;break; }
 case 25: 
 if($27){label=26;break;}else{label=35;break;}
 case 26: 
 var $139=HEAP32[(($1)>>2)];
 var $140=(($139+((($26)*(12))&-1)+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($139+((($26)*(12))&-1))|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($141|0)==($143|0);
 if($144){label=35;break;}else{label=27;break;}
 case 27: 
 var $145=(($44+((($partNr_0406)*(96))&-1)+16)|0);
 var $146=(($45)|0);
 var $147=(($44+((($partNr_0406)*(96))&-1)+24)|0);
 var $148=(($44+((($partNr_0406)*(96))&-1)+8)|0);
 var $partNr2_0350=0;var $150=$143;var $149=$141;label=28;break;
 case 28: 
 var $149;
 var $150;
 var $partNr2_0350;
 var $ld$0$0=(($145)|0);
 var $151$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($145+4)|0);
 var $151$1=HEAP32[(($ld$1$1)>>2)];
 var $152=(($150+((($partNr2_0350)*(96))&-1))|0);
 var $ld$2$0=(($152)|0);
 var $153$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($152+4)|0);
 var $153$1=HEAP32[(($ld$3$1)>>2)];
 var $154=(($151$1|0) < ($153$1|0)) | (((($151$1|0) == ($153$1|0) & ($151$0>>>0) <  ($153$0>>>0))));
 if($154){var $187=$149;var $186=$150;label=34;break;}else{label=29;break;}
 case 29: 
 var $ld$4$0=(($146)|0);
 var $156$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($146+4)|0);
 var $156$1=HEAP32[(($ld$5$1)>>2)];
 var $157=(($150+((($partNr2_0350)*(96))&-1)+16)|0);
 var $ld$6$0=(($157)|0);
 var $158$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($157+4)|0);
 var $158$1=HEAP32[(($ld$7$1)>>2)];
 var $159=(($156$1|0) > ($158$1|0)) | (((($156$1|0) == ($158$1|0) & ($156$0>>>0) >  ($158$0>>>0))));
 if($159){var $187=$149;var $186=$150;label=34;break;}else{label=30;break;}
 case 30: 
 var $ld$8$0=(($147)|0);
 var $161$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($147+4)|0);
 var $161$1=HEAP32[(($ld$9$1)>>2)];
 var $162=(($150+((($partNr2_0350)*(96))&-1)+8)|0);
 var $ld$10$0=(($162)|0);
 var $163$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($162+4)|0);
 var $163$1=HEAP32[(($ld$11$1)>>2)];
 var $164=(($161$1|0) < ($163$1|0)) | (((($161$1|0) == ($163$1|0) & ($161$0>>>0) <  ($163$0>>>0))));
 if($164){var $187=$149;var $186=$150;label=34;break;}else{label=31;break;}
 case 31: 
 var $ld$12$0=(($148)|0);
 var $165$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($148+4)|0);
 var $165$1=HEAP32[(($ld$13$1)>>2)];
 var $166=(($150+((($partNr2_0350)*(96))&-1)+24)|0);
 var $ld$14$0=(($166)|0);
 var $167$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($166+4)|0);
 var $167$1=HEAP32[(($ld$15$1)>>2)];
 var $not__i=(($165$1|0) > ($167$1|0)) | (((($165$1|0) == ($167$1|0) & ($165$0>>>0) >  ($167$0>>>0))));
 if($not__i){var $187=$149;var $186=$150;label=34;break;}else{label=32;break;}
 case 32: 
 var $169=HEAP32[(($13)>>2)];
 var $170=((($169)-(12))|0);
 var $171=$170;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($14+$172)|0);
 var $174=$173;
 var $175=(($150+((($partNr2_0350)*(96))&-1)+60)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($150+((($partNr2_0350)*(96))&-1)+56)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$176;
 var $180=$178;
 var $181=((($179)-($180))|0);
 var $182=(((($181|0))/(12))&-1);
 var $183=((($182)-(1))|0);
 var $184=(($178+((($183)*(12))&-1))|0);
 var $185=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($174,$184,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=20;break; }
 case 33: 
 var $_pre414=HEAP32[(($140)>>2)];
 var $_pre415=HEAP32[(($142)>>2)];
 var $187=$_pre414;var $186=$_pre415;label=34;break;
 case 34: 
 var $186;
 var $187;
 var $188=((($partNr2_0350)+(1))|0);
 var $189=$187;
 var $190=$186;
 var $191=((($189)-($190))|0);
 var $192=(((($191|0))/(96))&-1);
 var $193=($188>>>0)<($192>>>0);
 if($193){var $partNr2_0350=$188;var $150=$186;var $149=$187;label=28;break;}else{label=35;break;}
 case 35: 
 var $194=HEAP32[(($29)>>2)];
 var $195=HEAP32[(($1)>>2)];
 var $196=$194;
 var $197=$195;
 var $198=((($196)-($197))|0);
 var $199=(((($198|0))/(12))&-1);
 var $200=($28|0)<($199|0);
 if($200){label=36;break;}else{label=45;break;}
 case 36: 
 var $201=(($195+((($28)*(12))&-1)+4)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($195+((($28)*(12))&-1))|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($202|0)==($204|0);
 if($205){label=45;break;}else{label=37;break;}
 case 37: 
 var $206=(($44+((($partNr_0406)*(96))&-1)+16)|0);
 var $207=(($45)|0);
 var $208=(($44+((($partNr_0406)*(96))&-1)+24)|0);
 var $209=(($44+((($partNr_0406)*(96))&-1)+8)|0);
 var $partNr22_0355=0;var $211=$204;var $210=$202;label=38;break;
 case 38: 
 var $210;
 var $211;
 var $partNr22_0355;
 var $ld$16$0=(($206)|0);
 var $212$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($206+4)|0);
 var $212$1=HEAP32[(($ld$17$1)>>2)];
 var $213=(($211+((($partNr22_0355)*(96))&-1))|0);
 var $ld$18$0=(($213)|0);
 var $214$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($213+4)|0);
 var $214$1=HEAP32[(($ld$19$1)>>2)];
 var $215=(($212$1|0) < ($214$1|0)) | (((($212$1|0) == ($214$1|0) & ($212$0>>>0) <  ($214$0>>>0))));
 if($215){var $248=$210;var $247=$211;label=44;break;}else{label=39;break;}
 case 39: 
 var $ld$20$0=(($207)|0);
 var $217$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($207+4)|0);
 var $217$1=HEAP32[(($ld$21$1)>>2)];
 var $218=(($211+((($partNr22_0355)*(96))&-1)+16)|0);
 var $ld$22$0=(($218)|0);
 var $219$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($218+4)|0);
 var $219$1=HEAP32[(($ld$23$1)>>2)];
 var $220=(($217$1|0) > ($219$1|0)) | (((($217$1|0) == ($219$1|0) & ($217$0>>>0) >  ($219$0>>>0))));
 if($220){var $248=$210;var $247=$211;label=44;break;}else{label=40;break;}
 case 40: 
 var $ld$24$0=(($208)|0);
 var $222$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($208+4)|0);
 var $222$1=HEAP32[(($ld$25$1)>>2)];
 var $223=(($211+((($partNr22_0355)*(96))&-1)+8)|0);
 var $ld$26$0=(($223)|0);
 var $224$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($223+4)|0);
 var $224$1=HEAP32[(($ld$27$1)>>2)];
 var $225=(($222$1|0) < ($224$1|0)) | (((($222$1|0) == ($224$1|0) & ($222$0>>>0) <  ($224$0>>>0))));
 if($225){var $248=$210;var $247=$211;label=44;break;}else{label=41;break;}
 case 41: 
 var $ld$28$0=(($209)|0);
 var $226$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($209+4)|0);
 var $226$1=HEAP32[(($ld$29$1)>>2)];
 var $227=(($211+((($partNr22_0355)*(96))&-1)+24)|0);
 var $ld$30$0=(($227)|0);
 var $228$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($227+4)|0);
 var $228$1=HEAP32[(($ld$31$1)>>2)];
 var $not__i265=(($226$1|0) > ($228$1|0)) | (((($226$1|0) == ($228$1|0) & ($226$0>>>0) >  ($228$0>>>0))));
 if($not__i265){var $248=$210;var $247=$211;label=44;break;}else{label=42;break;}
 case 42: 
 var $230=HEAP32[(($15)>>2)];
 var $231=((($230)-(12))|0);
 var $232=$231;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($16+$233)|0);
 var $235=$234;
 var $236=(($211+((($partNr22_0355)*(96))&-1)+60)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($211+((($partNr22_0355)*(96))&-1)+56)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=$237;
 var $241=$239;
 var $242=((($240)-($241))|0);
 var $243=(((($242|0))/(12))&-1);
 var $244=((($243)-(1))|0);
 var $245=(($239+((($244)*(12))&-1))|0);
 var $246=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($235,$245,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=21;break; }
 case 43: 
 var $_pre417=HEAP32[(($201)>>2)];
 var $_pre418=HEAP32[(($203)>>2)];
 var $248=$_pre417;var $247=$_pre418;label=44;break;
 case 44: 
 var $247;
 var $248;
 var $249=((($partNr22_0355)+(1))|0);
 var $250=$248;
 var $251=$247;
 var $252=((($250)-($251))|0);
 var $253=(((($252|0))/(96))&-1);
 var $254=($249>>>0)<($253>>>0);
 if($254){var $partNr22_0355=$249;var $211=$247;var $210=$248;label=38;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($30)>>2)]=0;
 HEAP32[(($31)>>2)]=0;
 HEAP32[(($32)>>2)]=0;
 HEAP32[(($33)>>2)]=0;
 HEAP32[(($34)>>2)]=0;
 HEAP32[(($35)>>2)]=0;
 var $255=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($downskinClipper,2,$downSkin,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=69;break; }
 case 46: 
 var $257=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($upskinClipper,2,$upSkin,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=69;break; }
 case 47: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($skinCombineClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=69;break; }
 case 48: 
 var $260=HEAP32[(($36)>>2)];
 var $261=((($260)-(12))|0);
 var $262=$261;
 var $263=HEAP32[(($262)>>2)];
 var $264=(($37+$263)|0);
 var $265=$264;
 var $266=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($265,$downSkin,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=71;break; }
 case 49: 
 var $268=HEAP32[(($36)>>2)];
 var $269=((($268)-(12))|0);
 var $270=$269;
 var $271=HEAP32[(($270)>>2)];
 var $272=(($37+$271)|0);
 var $273=$272;
 var $274=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($273,$upSkin,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=71;break; }
 case 50: 
 var $276=(($44+((($partNr_0406)*(96))&-1)+68)|0);
 var $277=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($skinCombineClipper,1,$276,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=71;break; }
 case 51: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($skinCombineClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=69;break; }
 case 52: 
 var $280=(($44+((($partNr_0406)*(96))&-1)+72)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($276)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($281|0)==($283|0);
 if($284){label=74;break;}else{var $i_0369=0;var $285=$283;label=53;break;}
 case 53: 
 var $285;
 var $i_0369;
 var $286=(($285+((($i_0369)*(12))&-1))|0);
 var $287=(function() { try { __THREW__ = 0; return __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($286) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=68;break; }
 case 54: 
 var $289=Math_abs($287);
 var $290=($289)/(1000);
 var $291=($290)/(1000);
 var $292=$291<$42;
 if($292){label=56;break;}else{label=55;break;}
 case 55: 
 var $_pre416=HEAP32[(($280)>>2)];
 var $i_1=$i_0369;var $333=$_pre416;label=73;break;
 case 56: 
 var $294=HEAP32[(($282)>>2)];
 var $_idx=((($i_0369)*(12))&-1);
 var $295=(((($_idx|0))/(12))&-1);
 var $296=(($294+((($295)*(12))&-1))|0);
 var $_sum=((($295)+(1))|0);
 var $297=(($294+((($_sum)*(12))&-1))|0);
 var $298=HEAP32[(($280)>>2)];
 var $299=($297|0)==($298|0);
 if($299){var $_0238_lcssa=$296;var $307=$297;label=60;break;}else{var $_0238362=$296;var $_0363=$297;label=57;break;}
 case 57: 
 var $_0363;
 var $_0238362;
 var $300=(($_0363)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($_0363+4)|0);
 var $303=HEAP32[(($302)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_0238362,$301,$303) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=67;break; }
 case 58: 
 var $304=(($_0363+12)|0);
 var $305=(($_0238362+12)|0);
 var $306=($304|0)==($298|0);
 if($306){label=59;break;}else{var $_0238362=$305;var $_0363=$304;label=57;break;}
 case 59: 
 var $_pre=HEAP32[(($280)>>2)];
 var $_0238_lcssa=$305;var $307=$_pre;label=60;break;
 case 60: 
 var $307;
 var $_0238_lcssa;
 var $308=($_0238_lcssa|0)==($307|0);
 if($308){var $324=$307;label=66;break;}else{var $309=$307;label=61;break;}
 case 61: 
 var $309;
 var $310=((($309)-(12))|0);
 HEAP32[(($280)>>2)]=$310;
 var $311=(($310)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=$312;
 var $314=($312|0)==0;
 if($314){var $315=$310;label=62;break;}else{label=63;break;}
 case 62: 
 var $315;
 var $316=($_0238_lcssa|0)==($315|0);
 if($316){var $324=$_0238_lcssa;label=66;break;}else{var $309=$315;label=61;break;}
 case 63: 
 var $317=((($309)-(12)+4)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($312|0)==($318|0);
 if($319){label=65;break;}else{label=64;break;}
 case 64: 
 var $scevgep_i_i_i=((($318)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $320=(((-$313))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$320)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $321=$uglygep29_i_i_i>>>4;
 var $322=$321^-1;
 var $scevgep30_i_i_i=(($318+($322<<4))|0);
 HEAP32[(($317)>>2)]=$scevgep30_i_i_i;
 label=65;break;
 case 65: 
 var $323=$312;
 __ZdlPv($323);
 var $_pre410=HEAP32[(($280)>>2)];
 var $315=$_pre410;label=62;break;
 case 66: 
 var $324;
 var $325=((($i_0369)-(1))|0);
 var $i_1=$325;var $333=$324;label=73;break;
 case 67: 
 var $lpad_loopexit359$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit359$1 = tempRet0;
 var $lpad_phi360$1=$lpad_loopexit359$1;var $lpad_phi360$0=$lpad_loopexit359$0;label=70;break;
 case 68: 
 var $lpad_loopexit366$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit366$1 = tempRet0;
 var $lpad_phi360$1=$lpad_loopexit366$1;var $lpad_phi360$0=$lpad_loopexit366$0;label=70;break;
 case 69: 
 var $lpad_nonloopexit367$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit367$1 = tempRet0;
 var $lpad_phi360$1=$lpad_nonloopexit367$1;var $lpad_phi360$0=$lpad_nonloopexit367$0;label=70;break;
 case 70: 
 var $lpad_phi360$0;
 var $lpad_phi360$1;
 var $326=$lpad_phi360$0;
 var $327=$lpad_phi360$1;
 var $_0239=$326;var $_0240=$327;label=104;break;
 case 71: 
 var $329$0 = ___cxa_find_matching_catch(-1, -1); var $329$1 = tempRet0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($skinCombineClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=135;break; }
 case 72: 
 var $330=$329$1;
 var $331=$329$0;
 var $_0239=$331;var $_0240=$330;label=104;break;
 case 73: 
 var $333;
 var $i_1;
 var $334=((($i_1)+(1))|0);
 var $335=HEAP32[(($282)>>2)];
 var $336=$333;
 var $337=$335;
 var $338=((($336)-($337))|0);
 var $339=(((($338|0))/(12))&-1);
 var $340=($334>>>0)<($339>>>0);
 if($340){var $i_0369=$334;var $285=$335;label=53;break;}else{label=74;break;}
 case 74: 
 var $341=HEAP32[(($33)>>2)];
 var $342=($341|0)==0;
 if($342){label=83;break;}else{label=75;break;}
 case 75: 
 var $343=HEAP32[(($34)>>2)];
 var $344=($341|0)==($343|0);
 if($344){var $360=$341;label=82;break;}else{var $345=$343;label=76;break;}
 case 76: 
 var $345;
 var $346=((($345)-(12))|0);
 HEAP32[(($34)>>2)]=$346;
 var $347=(($346)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=$348;
 var $350=($348|0)==0;
 if($350){var $351=$346;label=77;break;}else{label=78;break;}
 case 77: 
 var $351;
 var $352=($341|0)==($351|0);
 if($352){label=81;break;}else{var $345=$351;label=76;break;}
 case 78: 
 var $353=((($345)-(12)+4)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=($348|0)==($354|0);
 if($355){label=80;break;}else{label=79;break;}
 case 79: 
 var $scevgep_i_i_i_i_i_i273=((($354)-(16))|0);
 var $scevgep28_i_i_i_i_i_i274=$scevgep_i_i_i_i_i_i273;
 var $356=(((-$349))|0);
 var $uglygep_i_i_i_i_i_i275=(($scevgep28_i_i_i_i_i_i274+$356)|0);
 var $uglygep29_i_i_i_i_i_i276=$uglygep_i_i_i_i_i_i275;
 var $357=$uglygep29_i_i_i_i_i_i276>>>4;
 var $358=$357^-1;
 var $scevgep30_i_i_i_i_i_i277=(($354+($358<<4))|0);
 HEAP32[(($353)>>2)]=$scevgep30_i_i_i_i_i_i277;
 label=80;break;
 case 80: 
 var $359=$348;
 __ZdlPv($359);
 var $_pre29_i_i_i279=HEAP32[(($34)>>2)];
 var $351=$_pre29_i_i_i279;label=77;break;
 case 81: 
 var $_pre_i_i_i281=HEAP32[(($33)>>2)];
 var $360=$_pre_i_i_i281;label=82;break;
 case 82: 
 var $360;
 var $361=$360;
 __ZdlPv($361);
 label=83;break;
 case 83: 
 var $362=HEAP32[(($30)>>2)];
 var $363=($362|0)==0;
 if($363){label=92;break;}else{label=84;break;}
 case 84: 
 var $364=HEAP32[(($31)>>2)];
 var $365=($362|0)==($364|0);
 if($365){var $381=$362;label=91;break;}else{var $366=$364;label=85;break;}
 case 85: 
 var $366;
 var $367=((($366)-(12))|0);
 HEAP32[(($31)>>2)]=$367;
 var $368=(($367)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=$369;
 var $371=($369|0)==0;
 if($371){var $372=$367;label=86;break;}else{label=87;break;}
 case 86: 
 var $372;
 var $373=($362|0)==($372|0);
 if($373){label=90;break;}else{var $366=$372;label=85;break;}
 case 87: 
 var $374=((($366)-(12)+4)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=($369|0)==($375|0);
 if($376){label=89;break;}else{label=88;break;}
 case 88: 
 var $scevgep_i_i_i_i_i_i289=((($375)-(16))|0);
 var $scevgep28_i_i_i_i_i_i290=$scevgep_i_i_i_i_i_i289;
 var $377=(((-$370))|0);
 var $uglygep_i_i_i_i_i_i291=(($scevgep28_i_i_i_i_i_i290+$377)|0);
 var $uglygep29_i_i_i_i_i_i292=$uglygep_i_i_i_i_i_i291;
 var $378=$uglygep29_i_i_i_i_i_i292>>>4;
 var $379=$378^-1;
 var $scevgep30_i_i_i_i_i_i293=(($375+($379<<4))|0);
 HEAP32[(($374)>>2)]=$scevgep30_i_i_i_i_i_i293;
 label=89;break;
 case 89: 
 var $380=$369;
 __ZdlPv($380);
 var $_pre29_i_i_i295=HEAP32[(($31)>>2)];
 var $372=$_pre29_i_i_i295;label=86;break;
 case 90: 
 var $_pre_i_i_i297=HEAP32[(($30)>>2)];
 var $381=$_pre_i_i_i297;label=91;break;
 case 91: 
 var $381;
 var $382=$381;
 __ZdlPv($382);
 label=92;break;
 case 92: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($upskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=19;break; }
 case 93: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($downskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=18;break; }
 case 94: 
 var $385=HEAP32[(($8)>>2)];
 var $386=($385|0)==0;
 if($386){label=103;break;}else{label=95;break;}
 case 95: 
 var $387=HEAP32[(($9)>>2)];
 var $388=($385|0)==($387|0);
 if($388){var $404=$385;label=102;break;}else{var $389=$387;label=96;break;}
 case 96: 
 var $389;
 var $390=((($389)-(12))|0);
 HEAP32[(($9)>>2)]=$390;
 var $391=(($390)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$392;
 var $394=($392|0)==0;
 if($394){var $395=$390;label=97;break;}else{label=98;break;}
 case 97: 
 var $395;
 var $396=($385|0)==($395|0);
 if($396){label=101;break;}else{var $389=$395;label=96;break;}
 case 98: 
 var $397=((($389)-(12)+4)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=($392|0)==($398|0);
 if($399){label=100;break;}else{label=99;break;}
 case 99: 
 var $scevgep_i_i_i_i_i_i305=((($398)-(16))|0);
 var $scevgep28_i_i_i_i_i_i306=$scevgep_i_i_i_i_i_i305;
 var $400=(((-$393))|0);
 var $uglygep_i_i_i_i_i_i307=(($scevgep28_i_i_i_i_i_i306+$400)|0);
 var $uglygep29_i_i_i_i_i_i308=$uglygep_i_i_i_i_i_i307;
 var $401=$uglygep29_i_i_i_i_i_i308>>>4;
 var $402=$401^-1;
 var $scevgep30_i_i_i_i_i_i309=(($398+($402<<4))|0);
 HEAP32[(($397)>>2)]=$scevgep30_i_i_i_i_i_i309;
 label=100;break;
 case 100: 
 var $403=$392;
 __ZdlPv($403);
 var $_pre29_i_i_i311=HEAP32[(($9)>>2)];
 var $395=$_pre29_i_i_i311;label=97;break;
 case 101: 
 var $_pre_i_i_i313=HEAP32[(($8)>>2)];
 var $404=$_pre_i_i_i313;label=102;break;
 case 102: 
 var $404;
 var $405=$404;
 __ZdlPv($405);
 label=103;break;
 case 103: 
 var $406=((($partNr_0406)+(1))|0);
 var $407=HEAP32[(($3)>>2)];
 var $408=HEAP32[(($5)>>2)];
 var $409=$407;
 var $410=$408;
 var $411=((($409)-($410))|0);
 var $412=(((($411|0))/(96))&-1);
 var $413=($406>>>0)<($412>>>0);
 if($413){var $partNr_0406=$406;var $44=$408;label=3;break;}else{label=133;break;}
 case 104: 
 var $_0240;
 var $_0239;
 var $415=HEAP32[(($33)>>2)];
 var $416=($415|0)==0;
 if($416){label=113;break;}else{label=105;break;}
 case 105: 
 var $417=HEAP32[(($34)>>2)];
 var $418=($415|0)==($417|0);
 if($418){var $434=$415;label=112;break;}else{var $419=$417;label=106;break;}
 case 106: 
 var $419;
 var $420=((($419)-(12))|0);
 HEAP32[(($34)>>2)]=$420;
 var $421=(($420)|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=$422;
 var $424=($422|0)==0;
 if($424){var $425=$420;label=107;break;}else{label=108;break;}
 case 107: 
 var $425;
 var $426=($415|0)==($425|0);
 if($426){label=111;break;}else{var $419=$425;label=106;break;}
 case 108: 
 var $427=((($419)-(12)+4)|0);
 var $428=HEAP32[(($427)>>2)];
 var $429=($422|0)==($428|0);
 if($429){label=110;break;}else{label=109;break;}
 case 109: 
 var $scevgep_i_i_i_i_i_i321=((($428)-(16))|0);
 var $scevgep28_i_i_i_i_i_i322=$scevgep_i_i_i_i_i_i321;
 var $430=(((-$423))|0);
 var $uglygep_i_i_i_i_i_i323=(($scevgep28_i_i_i_i_i_i322+$430)|0);
 var $uglygep29_i_i_i_i_i_i324=$uglygep_i_i_i_i_i_i323;
 var $431=$uglygep29_i_i_i_i_i_i324>>>4;
 var $432=$431^-1;
 var $scevgep30_i_i_i_i_i_i325=(($428+($432<<4))|0);
 HEAP32[(($427)>>2)]=$scevgep30_i_i_i_i_i_i325;
 label=110;break;
 case 110: 
 var $433=$422;
 __ZdlPv($433);
 var $_pre29_i_i_i327=HEAP32[(($34)>>2)];
 var $425=$_pre29_i_i_i327;label=107;break;
 case 111: 
 var $_pre_i_i_i329=HEAP32[(($33)>>2)];
 var $434=$_pre_i_i_i329;label=112;break;
 case 112: 
 var $434;
 var $435=$434;
 __ZdlPv($435);
 label=113;break;
 case 113: 
 var $436=HEAP32[(($30)>>2)];
 var $437=($436|0)==0;
 if($437){var $_2=$_0239;var $_2242=$_0240;label=122;break;}else{label=114;break;}
 case 114: 
 var $438=HEAP32[(($31)>>2)];
 var $439=($436|0)==($438|0);
 if($439){var $455=$436;label=121;break;}else{var $440=$438;label=115;break;}
 case 115: 
 var $440;
 var $441=((($440)-(12))|0);
 HEAP32[(($31)>>2)]=$441;
 var $442=(($441)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=$443;
 var $445=($443|0)==0;
 if($445){var $446=$441;label=116;break;}else{label=117;break;}
 case 116: 
 var $446;
 var $447=($436|0)==($446|0);
 if($447){label=120;break;}else{var $440=$446;label=115;break;}
 case 117: 
 var $448=((($440)-(12)+4)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=($443|0)==($449|0);
 if($450){label=119;break;}else{label=118;break;}
 case 118: 
 var $scevgep_i_i_i_i_i_i337=((($449)-(16))|0);
 var $scevgep28_i_i_i_i_i_i338=$scevgep_i_i_i_i_i_i337;
 var $451=(((-$444))|0);
 var $uglygep_i_i_i_i_i_i339=(($scevgep28_i_i_i_i_i_i338+$451)|0);
 var $uglygep29_i_i_i_i_i_i340=$uglygep_i_i_i_i_i_i339;
 var $452=$uglygep29_i_i_i_i_i_i340>>>4;
 var $453=$452^-1;
 var $scevgep30_i_i_i_i_i_i341=(($449+($453<<4))|0);
 HEAP32[(($448)>>2)]=$scevgep30_i_i_i_i_i_i341;
 label=119;break;
 case 119: 
 var $454=$443;
 __ZdlPv($454);
 var $_pre29_i_i_i343=HEAP32[(($31)>>2)];
 var $446=$_pre29_i_i_i343;label=116;break;
 case 120: 
 var $_pre_i_i_i345=HEAP32[(($30)>>2)];
 var $455=$_pre_i_i_i345;label=121;break;
 case 121: 
 var $455;
 var $456=$455;
 __ZdlPv($456);
 var $_2=$_0239;var $_2242=$_0240;label=122;break;
 case 122: 
 var $_2242;
 var $_2;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($upskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_3=$_2;var $_3243=$_2242;label=123;break; } else { label=135;break; }
 case 123: 
 var $_3243;
 var $_3;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($downskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_4=$_3;var $_4244=$_3243;label=124;break; } else { label=135;break; }
 case 124: 
 var $_4244;
 var $_4;
 var $459=HEAP32[(($8)>>2)];
 var $460=($459|0)==0;
 if($460){label=134;break;}else{label=125;break;}
 case 125: 
 var $461=HEAP32[(($9)>>2)];
 var $462=($459|0)==($461|0);
 if($462){var $478=$459;label=132;break;}else{var $463=$461;label=126;break;}
 case 126: 
 var $463;
 var $464=((($463)-(12))|0);
 HEAP32[(($9)>>2)]=$464;
 var $465=(($464)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=$466;
 var $468=($466|0)==0;
 if($468){var $469=$464;label=127;break;}else{label=128;break;}
 case 127: 
 var $469;
 var $470=($459|0)==($469|0);
 if($470){label=131;break;}else{var $463=$469;label=126;break;}
 case 128: 
 var $471=((($463)-(12)+4)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($466|0)==($472|0);
 if($473){label=130;break;}else{label=129;break;}
 case 129: 
 var $scevgep_i_i_i_i_i_i=((($472)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $474=(((-$467))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$474)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $475=$uglygep29_i_i_i_i_i_i>>>4;
 var $476=$475^-1;
 var $scevgep30_i_i_i_i_i_i=(($472+($476<<4))|0);
 HEAP32[(($471)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=130;break;
 case 130: 
 var $477=$466;
 __ZdlPv($477);
 var $_pre29_i_i_i=HEAP32[(($9)>>2)];
 var $469=$_pre29_i_i_i;label=127;break;
 case 131: 
 var $_pre_i_i_i=HEAP32[(($8)>>2)];
 var $478=$_pre_i_i_i;label=132;break;
 case 132: 
 var $478;
 var $479=$478;
 __ZdlPv($479);
 label=134;break;
 case 133: 
 STACKTOP=sp;return;
 case 134: 
 var $480$0=$_4;
 var $480$1=0;
 var $481$0=$480$0;
 var $481$1=$_4244;
 ___resumeException($481$0)
 case 135: 
 var $483$0 = ___cxa_find_matching_catch(-1, -1,0); var $483$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z14generateSparseiR18SliceVolumeStorageiii($layerNr,$storage,$extrusionWidth,$downSkinCount,$upSkinCount){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+480)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp=sp;
 var $downskinClipper=(sp)+(16);
 var $upskinClipper=(sp)+(120);
 var $downSkin=(sp)+(224);
 var $upSkin=(sp)+(240);
 var $result=(sp)+(256);
 var $skinClipper=(sp)+(272);
 var $sparseClipper=(sp)+(376);
 var $1=(($storage)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+((($layerNr)*(12))&-1)+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+((($layerNr)*(12))&-1))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){label=149;break;}else{label=2;break;}
 case 2: 
 var $8=(($temp)|0);
 var $9=(($temp+4)|0);
 var $10=(($temp+8)|0);
 var $11=(((($extrusionWidth|0))/(-2))&-1);
 var $12=($11|0);
 var $13=$downskinClipper;
 var $14=$downskinClipper;
 var $15=$upskinClipper;
 var $16=$upskinClipper;
 var $17=((($layerNr)-($downSkinCount))|0);
 var $18=($17|0)>-1;
 var $19=((($upSkinCount)+($layerNr))|0);
 var $20=(($storage+4)|0);
 var $21=(($downSkin)|0);
 var $22=(($downSkin+4)|0);
 var $23=(($downSkin+8)|0);
 var $24=(($upSkin)|0);
 var $25=(($upSkin+4)|0);
 var $26=(($upSkin+8)|0);
 var $27=(($result)|0);
 var $28=(($result+4)|0);
 var $29=(($result+8)|0);
 var $30=$skinClipper;
 var $31=$skinClipper;
 var $32=$sparseClipper;
 var $33=$sparseClipper;
 var $partNr_0492=0;var $35=$6;label=3;break;
 case 3: 
 var $35;
 var $partNr_0492;
 var $36=(($35+((($partNr_0492)*(96))&-1))|0);
 HEAP32[(($8)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 HEAP32[(($10)>>2)]=0;
 var $37=(($35+((($partNr_0492)*(96))&-1)+60)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($35+((($partNr_0492)*(96))&-1)+56)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=(((($43|0))/(12))&-1);
 var $45=((($44)-(1))|0);
 var $46=(($40+((($45)*(12))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($46,$temp,$12,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=17;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($downskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=17;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($upskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 var $50=HEAP32[(($13)>>2)];
 var $51=((($50)-(12))|0);
 var $52=$51;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($14+$53)|0);
 var $55=$54;
 var $56=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($55,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=21;break; }
 case 7: 
 var $58=HEAP32[(($15)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($16+$61)|0);
 var $63=$62;
 var $64=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($63,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=21;break; }
 case 8: 
 if($18){label=9;break;}else{label=25;break;}
 case 9: 
 var $67=HEAP32[(($1)>>2)];
 var $68=(($67+((($17)*(12))&-1)+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($67+((($17)*(12))&-1))|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($69|0)==($71|0);
 if($72){label=25;break;}else{label=10;break;}
 case 10: 
 var $73=(($35+((($partNr_0492)*(96))&-1)+16)|0);
 var $74=(($36)|0);
 var $75=(($35+((($partNr_0492)*(96))&-1)+24)|0);
 var $76=(($35+((($partNr_0492)*(96))&-1)+8)|0);
 var $partNr2_0421=0;var $77=$71;label=11;break;
 case 11: 
 var $77;
 var $partNr2_0421;
 var $ld$0$0=(($73)|0);
 var $78$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($73+4)|0);
 var $78$1=HEAP32[(($ld$1$1)>>2)];
 var $79=(($77+((($partNr2_0421)*(96))&-1))|0);
 var $ld$2$0=(($79)|0);
 var $80$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($79+4)|0);
 var $80$1=HEAP32[(($ld$3$1)>>2)];
 var $81=(($78$1|0) < ($80$1|0)) | (((($78$1|0) == ($80$1|0) & ($78$0>>>0) <  ($80$0>>>0))));
 if($81){label=24;break;}else{label=12;break;}
 case 12: 
 var $ld$4$0=(($74)|0);
 var $83$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($74+4)|0);
 var $83$1=HEAP32[(($ld$5$1)>>2)];
 var $84=(($77+((($partNr2_0421)*(96))&-1)+16)|0);
 var $ld$6$0=(($84)|0);
 var $85$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($84+4)|0);
 var $85$1=HEAP32[(($ld$7$1)>>2)];
 var $86=(($83$1|0) > ($85$1|0)) | (((($83$1|0) == ($85$1|0) & ($83$0>>>0) >  ($85$0>>>0))));
 if($86){label=24;break;}else{label=13;break;}
 case 13: 
 var $ld$8$0=(($75)|0);
 var $88$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($75+4)|0);
 var $88$1=HEAP32[(($ld$9$1)>>2)];
 var $89=(($77+((($partNr2_0421)*(96))&-1)+8)|0);
 var $ld$10$0=(($89)|0);
 var $90$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($89+4)|0);
 var $90$1=HEAP32[(($ld$11$1)>>2)];
 var $91=(($88$1|0) < ($90$1|0)) | (((($88$1|0) == ($90$1|0) & ($88$0>>>0) <  ($90$0>>>0))));
 if($91){label=24;break;}else{label=14;break;}
 case 14: 
 var $ld$12$0=(($76)|0);
 var $92$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($76+4)|0);
 var $92$1=HEAP32[(($ld$13$1)>>2)];
 var $93=(($77+((($partNr2_0421)*(96))&-1)+24)|0);
 var $ld$14$0=(($93)|0);
 var $94$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($93+4)|0);
 var $94$1=HEAP32[(($ld$15$1)>>2)];
 var $not__i=(($92$1|0) > ($94$1|0)) | (((($92$1|0) == ($94$1|0) & ($92$0>>>0) >  ($94$0>>>0))));
 if($not__i){label=24;break;}else{label=15;break;}
 case 15: 
 var $96=(($77+((($partNr2_0421)*(96))&-1)+60)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($77+((($partNr2_0421)*(96))&-1)+56)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$97;
 var $101=$99;
 var $102=((($100)-($101))|0);
 var $103=(((($102|0))/(12))&-1);
 var $104=($103>>>0)>1;
 var $105=HEAP32[(($13)>>2)];
 var $106=((($105)-(12))|0);
 var $107=$106;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($14+$108)|0);
 var $110=$109;
 if($104){label=16;break;}else{label=23;break;}
 case 16: 
 var $112=((($103)-(2))|0);
 var $113=(($99+((($112)*(12))&-1))|0);
 var $114=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($110,$113,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 17: 
 var $116$0 = ___cxa_find_matching_catch(-1, -1); var $116$1 = tempRet0;
 var $117=$116$0;
 var $118=$116$1;
 var $_5=$117;var $_5278=$118;label=140;break;
 case 18: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $121=$120$0;
 var $122=$120$1;
 var $_4=$121;var $_4277=$122;label=139;break;
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=22;break;
 case 20: 
 var $lpad_loopexit423$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit423$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit423$1;var $lpad_phi$0=$lpad_loopexit423$0;label=22;break;
 case 21: 
 var $lpad_nonloopexit424$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit424$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit424$1;var $lpad_phi$0=$lpad_nonloopexit424$0;label=22;break;
 case 22: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $123=$lpad_phi$0;
 var $124=$lpad_phi$1;
 var $_3=$123;var $_3276=$124;label=138;break;
 case 23: 
 var $126=((($103)-(1))|0);
 var $127=(($99+((($126)*(12))&-1))|0);
 var $128=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($110,$127,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 24: 
 var $129=((($partNr2_0421)+(1))|0);
 var $130=HEAP32[(($68)>>2)];
 var $131=HEAP32[(($70)>>2)];
 var $132=$130;
 var $133=$131;
 var $134=((($132)-($133))|0);
 var $135=(((($134|0))/(96))&-1);
 var $136=($129>>>0)<($135>>>0);
 if($136){var $partNr2_0421=$129;var $77=$131;label=11;break;}else{label=25;break;}
 case 25: 
 var $137=HEAP32[(($20)>>2)];
 var $138=HEAP32[(($1)>>2)];
 var $139=$137;
 var $140=$138;
 var $141=((($139)-($140))|0);
 var $142=(((($141|0))/(12))&-1);
 var $143=($19|0)<($142|0);
 if($143){label=26;break;}else{label=36;break;}
 case 26: 
 var $144=(($138+((($19)*(12))&-1)+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($138+((($19)*(12))&-1))|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($145|0)==($147|0);
 if($148){label=36;break;}else{label=27;break;}
 case 27: 
 var $149=(($35+((($partNr_0492)*(96))&-1)+16)|0);
 var $150=(($36)|0);
 var $151=(($35+((($partNr_0492)*(96))&-1)+24)|0);
 var $152=(($35+((($partNr_0492)*(96))&-1)+8)|0);
 var $partNr22_0426=0;var $153=$147;label=28;break;
 case 28: 
 var $153;
 var $partNr22_0426;
 var $ld$16$0=(($149)|0);
 var $154$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($149+4)|0);
 var $154$1=HEAP32[(($ld$17$1)>>2)];
 var $155=(($153+((($partNr22_0426)*(96))&-1))|0);
 var $ld$18$0=(($155)|0);
 var $156$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($155+4)|0);
 var $156$1=HEAP32[(($ld$19$1)>>2)];
 var $157=(($154$1|0) < ($156$1|0)) | (((($154$1|0) == ($156$1|0) & ($154$0>>>0) <  ($156$0>>>0))));
 if($157){label=35;break;}else{label=29;break;}
 case 29: 
 var $ld$20$0=(($150)|0);
 var $159$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($150+4)|0);
 var $159$1=HEAP32[(($ld$21$1)>>2)];
 var $160=(($153+((($partNr22_0426)*(96))&-1)+16)|0);
 var $ld$22$0=(($160)|0);
 var $161$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($160+4)|0);
 var $161$1=HEAP32[(($ld$23$1)>>2)];
 var $162=(($159$1|0) > ($161$1|0)) | (((($159$1|0) == ($161$1|0) & ($159$0>>>0) >  ($161$0>>>0))));
 if($162){label=35;break;}else{label=30;break;}
 case 30: 
 var $ld$24$0=(($151)|0);
 var $164$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($151+4)|0);
 var $164$1=HEAP32[(($ld$25$1)>>2)];
 var $165=(($153+((($partNr22_0426)*(96))&-1)+8)|0);
 var $ld$26$0=(($165)|0);
 var $166$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($165+4)|0);
 var $166$1=HEAP32[(($ld$27$1)>>2)];
 var $167=(($164$1|0) < ($166$1|0)) | (((($164$1|0) == ($166$1|0) & ($164$0>>>0) <  ($166$0>>>0))));
 if($167){label=35;break;}else{label=31;break;}
 case 31: 
 var $ld$28$0=(($152)|0);
 var $168$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($152+4)|0);
 var $168$1=HEAP32[(($ld$29$1)>>2)];
 var $169=(($153+((($partNr22_0426)*(96))&-1)+24)|0);
 var $ld$30$0=(($169)|0);
 var $170$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($169+4)|0);
 var $170$1=HEAP32[(($ld$31$1)>>2)];
 var $not__i304=(($168$1|0) > ($170$1|0)) | (((($168$1|0) == ($170$1|0) & ($168$0>>>0) >  ($170$0>>>0))));
 if($not__i304){label=35;break;}else{label=32;break;}
 case 32: 
 var $172=(($153+((($partNr22_0426)*(96))&-1)+60)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($153+((($partNr22_0426)*(96))&-1)+56)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=$173;
 var $177=$175;
 var $178=((($176)-($177))|0);
 var $179=(((($178|0))/(12))&-1);
 var $180=($179>>>0)>1;
 var $181=HEAP32[(($15)>>2)];
 var $182=((($181)-(12))|0);
 var $183=$182;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($16+$184)|0);
 var $186=$185;
 if($180){label=33;break;}else{label=34;break;}
 case 33: 
 var $188=((($179)-(2))|0);
 var $189=(($175+((($188)*(12))&-1))|0);
 var $190=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($186,$189,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=20;break; }
 case 34: 
 var $192=((($179)-(1))|0);
 var $193=(($175+((($192)*(12))&-1))|0);
 var $194=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($186,$193,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=20;break; }
 case 35: 
 var $195=((($partNr22_0426)+(1))|0);
 var $196=HEAP32[(($144)>>2)];
 var $197=HEAP32[(($146)>>2)];
 var $198=$196;
 var $199=$197;
 var $200=((($198)-($199))|0);
 var $201=(((($200|0))/(96))&-1);
 var $202=($195>>>0)<($201>>>0);
 if($202){var $partNr22_0426=$195;var $153=$197;label=28;break;}else{label=36;break;}
 case 36: 
 HEAP32[(($21)>>2)]=0;
 HEAP32[(($22)>>2)]=0;
 HEAP32[(($23)>>2)]=0;
 HEAP32[(($24)>>2)]=0;
 HEAP32[(($25)>>2)]=0;
 HEAP32[(($26)>>2)]=0;
 HEAP32[(($27)>>2)]=0;
 HEAP32[(($28)>>2)]=0;
 HEAP32[(($29)>>2)]=0;
 var $203=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($downskinClipper,2,$downSkin,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=60;break; }
 case 37: 
 var $205=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($upskinClipper,2,$upSkin,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=60;break; }
 case 38: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($skinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=60;break; }
 case 39: 
 var $208=HEAP32[(($30)>>2)];
 var $209=((($208)-(12))|0);
 var $210=$209;
 var $211=HEAP32[(($210)>>2)];
 var $212=(($31+$211)|0);
 var $213=$212;
 var $214=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($213,$downSkin,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=62;break; }
 case 40: 
 var $216=HEAP32[(($30)>>2)];
 var $217=((($216)-(12))|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($31+$219)|0);
 var $221=$220;
 var $222=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($221,$upSkin,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=62;break; }
 case 41: 
 var $224=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($skinClipper,1,$result,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=62;break; }
 case 42: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($skinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=60;break; }
 case 43: 
 var $226=HEAP32[(($28)>>2)];
 var $227=HEAP32[(($27)>>2)];
 var $228=($226|0)==($227|0);
 if($228){label=65;break;}else{var $i_0441=0;var $229=$227;label=44;break;}
 case 44: 
 var $229;
 var $i_0441;
 var $230=(($229+((($i_0441)*(12))&-1))|0);
 var $231=(function() { try { __THREW__ = 0; return __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($230) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=59;break; }
 case 45: 
 var $233=Math_abs($231);
 var $234=($233)/(1000);
 var $235=($234)/(1000);
 var $236=$235<3;
 if($236){label=47;break;}else{label=46;break;}
 case 46: 
 var $_pre503=HEAP32[(($28)>>2)];
 var $i_1=$i_0441;var $277=$_pre503;label=64;break;
 case 47: 
 var $238=HEAP32[(($27)>>2)];
 var $_idx=((($i_0441)*(12))&-1);
 var $239=(((($_idx|0))/(12))&-1);
 var $240=(($238+((($239)*(12))&-1))|0);
 var $_sum=((($239)+(1))|0);
 var $241=(($238+((($_sum)*(12))&-1))|0);
 var $242=HEAP32[(($28)>>2)];
 var $243=($241|0)==($242|0);
 if($243){var $_0271_lcssa=$240;var $251=$241;label=51;break;}else{var $_0271433=$240;var $_0434=$241;label=48;break;}
 case 48: 
 var $_0434;
 var $_0271433;
 var $244=(($_0434)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($_0434+4)|0);
 var $247=HEAP32[(($246)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_0271433,$245,$247) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=58;break; }
 case 49: 
 var $248=(($_0434+12)|0);
 var $249=(($_0271433+12)|0);
 var $250=($248|0)==($242|0);
 if($250){label=50;break;}else{var $_0271433=$249;var $_0434=$248;label=48;break;}
 case 50: 
 var $_pre=HEAP32[(($28)>>2)];
 var $_0271_lcssa=$249;var $251=$_pre;label=51;break;
 case 51: 
 var $251;
 var $_0271_lcssa;
 var $252=($_0271_lcssa|0)==($251|0);
 if($252){var $268=$251;label=57;break;}else{var $253=$251;label=52;break;}
 case 52: 
 var $253;
 var $254=((($253)-(12))|0);
 HEAP32[(($28)>>2)]=$254;
 var $255=(($254)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$256;
 var $258=($256|0)==0;
 if($258){var $259=$254;label=53;break;}else{label=54;break;}
 case 53: 
 var $259;
 var $260=($_0271_lcssa|0)==($259|0);
 if($260){var $268=$_0271_lcssa;label=57;break;}else{var $253=$259;label=52;break;}
 case 54: 
 var $261=((($253)-(12)+4)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($256|0)==($262|0);
 if($263){label=56;break;}else{label=55;break;}
 case 55: 
 var $scevgep_i_i_i=((($262)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $264=(((-$257))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$264)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $265=$uglygep29_i_i_i>>>4;
 var $266=$265^-1;
 var $scevgep30_i_i_i=(($262+($266<<4))|0);
 HEAP32[(($261)>>2)]=$scevgep30_i_i_i;
 label=56;break;
 case 56: 
 var $267=$256;
 __ZdlPv($267);
 var $_pre496=HEAP32[(($28)>>2)];
 var $259=$_pre496;label=53;break;
 case 57: 
 var $268;
 var $269=((($i_0441)-(1))|0);
 var $i_1=$269;var $277=$268;label=64;break;
 case 58: 
 var $lpad_loopexit430$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit430$1 = tempRet0;
 var $lpad_phi431$1=$lpad_loopexit430$1;var $lpad_phi431$0=$lpad_loopexit430$0;label=61;break;
 case 59: 
 var $lpad_loopexit438$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit438$1 = tempRet0;
 var $lpad_phi431$1=$lpad_loopexit438$1;var $lpad_phi431$0=$lpad_loopexit438$0;label=61;break;
 case 60: 
 var $lpad_nonloopexit439$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit439$1 = tempRet0;
 var $lpad_phi431$1=$lpad_nonloopexit439$1;var $lpad_phi431$0=$lpad_nonloopexit439$0;label=61;break;
 case 61: 
 var $lpad_phi431$0;
 var $lpad_phi431$1;
 var $270=$lpad_phi431$0;
 var $271=$lpad_phi431$1;
 var $_0272=$270;var $_0273=$271;label=111;break;
 case 62: 
 var $273$0 = ___cxa_find_matching_catch(-1, -1); var $273$1 = tempRet0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($skinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=151;break; }
 case 63: 
 var $274=$273$1;
 var $275=$273$0;
 var $_0272=$275;var $_0273=$274;label=111;break;
 case 64: 
 var $277;
 var $i_1;
 var $278=((($i_1)+(1))|0);
 var $279=HEAP32[(($27)>>2)];
 var $280=$277;
 var $281=$279;
 var $282=((($280)-($281))|0);
 var $283=(((($282|0))/(12))&-1);
 var $284=($278>>>0)<($283>>>0);
 if($284){var $i_0441=$278;var $229=$279;label=44;break;}else{label=65;break;}
 case 65: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($sparseClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=60;break; }
 case 66: 
 var $286=HEAP32[(($32)>>2)];
 var $287=((($286)-(12))|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($33+$289)|0);
 var $291=$290;
 var $292=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($291,$temp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=109;break; }
 case 67: 
 var $294=HEAP32[(($32)>>2)];
 var $295=((($294)-(12))|0);
 var $296=$295;
 var $297=HEAP32[(($296)>>2)];
 var $298=(($33+$297)|0);
 var $299=$298;
 var $300=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($299,$result,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=109;break; }
 case 68: 
 var $302=(($35+((($partNr_0492)*(96))&-1)+80)|0);
 var $303=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($sparseClipper,2,$302,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=109;break; }
 case 69: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($sparseClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=60;break; }
 case 70: 
 var $306=HEAP32[(($27)>>2)];
 var $307=($306|0)==0;
 if($307){label=79;break;}else{label=71;break;}
 case 71: 
 var $308=HEAP32[(($28)>>2)];
 var $309=($306|0)==($308|0);
 if($309){var $325=$306;label=78;break;}else{var $310=$308;label=72;break;}
 case 72: 
 var $310;
 var $311=((($310)-(12))|0);
 HEAP32[(($28)>>2)]=$311;
 var $312=(($311)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=$313;
 var $315=($313|0)==0;
 if($315){var $316=$311;label=73;break;}else{label=74;break;}
 case 73: 
 var $316;
 var $317=($306|0)==($316|0);
 if($317){label=77;break;}else{var $310=$316;label=72;break;}
 case 74: 
 var $318=((($310)-(12)+4)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=($313|0)==($319|0);
 if($320){label=76;break;}else{label=75;break;}
 case 75: 
 var $scevgep_i_i_i_i_i_i312=((($319)-(16))|0);
 var $scevgep28_i_i_i_i_i_i313=$scevgep_i_i_i_i_i_i312;
 var $321=(((-$314))|0);
 var $uglygep_i_i_i_i_i_i314=(($scevgep28_i_i_i_i_i_i313+$321)|0);
 var $uglygep29_i_i_i_i_i_i315=$uglygep_i_i_i_i_i_i314;
 var $322=$uglygep29_i_i_i_i_i_i315>>>4;
 var $323=$322^-1;
 var $scevgep30_i_i_i_i_i_i316=(($319+($323<<4))|0);
 HEAP32[(($318)>>2)]=$scevgep30_i_i_i_i_i_i316;
 label=76;break;
 case 76: 
 var $324=$313;
 __ZdlPv($324);
 var $_pre29_i_i_i318=HEAP32[(($28)>>2)];
 var $316=$_pre29_i_i_i318;label=73;break;
 case 77: 
 var $_pre_i_i_i320=HEAP32[(($27)>>2)];
 var $325=$_pre_i_i_i320;label=78;break;
 case 78: 
 var $325;
 var $326=$325;
 __ZdlPv($326);
 label=79;break;
 case 79: 
 var $327=HEAP32[(($24)>>2)];
 var $328=($327|0)==0;
 if($328){label=88;break;}else{label=80;break;}
 case 80: 
 var $329=HEAP32[(($25)>>2)];
 var $330=($327|0)==($329|0);
 if($330){var $346=$327;label=87;break;}else{var $331=$329;label=81;break;}
 case 81: 
 var $331;
 var $332=((($331)-(12))|0);
 HEAP32[(($25)>>2)]=$332;
 var $333=(($332)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=$334;
 var $336=($334|0)==0;
 if($336){var $337=$332;label=82;break;}else{label=83;break;}
 case 82: 
 var $337;
 var $338=($327|0)==($337|0);
 if($338){label=86;break;}else{var $331=$337;label=81;break;}
 case 83: 
 var $339=((($331)-(12)+4)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=($334|0)==($340|0);
 if($341){label=85;break;}else{label=84;break;}
 case 84: 
 var $scevgep_i_i_i_i_i_i328=((($340)-(16))|0);
 var $scevgep28_i_i_i_i_i_i329=$scevgep_i_i_i_i_i_i328;
 var $342=(((-$335))|0);
 var $uglygep_i_i_i_i_i_i330=(($scevgep28_i_i_i_i_i_i329+$342)|0);
 var $uglygep29_i_i_i_i_i_i331=$uglygep_i_i_i_i_i_i330;
 var $343=$uglygep29_i_i_i_i_i_i331>>>4;
 var $344=$343^-1;
 var $scevgep30_i_i_i_i_i_i332=(($340+($344<<4))|0);
 HEAP32[(($339)>>2)]=$scevgep30_i_i_i_i_i_i332;
 label=85;break;
 case 85: 
 var $345=$334;
 __ZdlPv($345);
 var $_pre29_i_i_i334=HEAP32[(($25)>>2)];
 var $337=$_pre29_i_i_i334;label=82;break;
 case 86: 
 var $_pre_i_i_i336=HEAP32[(($24)>>2)];
 var $346=$_pre_i_i_i336;label=87;break;
 case 87: 
 var $346;
 var $347=$346;
 __ZdlPv($347);
 label=88;break;
 case 88: 
 var $348=HEAP32[(($21)>>2)];
 var $349=($348|0)==0;
 if($349){label=97;break;}else{label=89;break;}
 case 89: 
 var $350=HEAP32[(($22)>>2)];
 var $351=($348|0)==($350|0);
 if($351){var $367=$348;label=96;break;}else{var $352=$350;label=90;break;}
 case 90: 
 var $352;
 var $353=((($352)-(12))|0);
 HEAP32[(($22)>>2)]=$353;
 var $354=(($353)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=$355;
 var $357=($355|0)==0;
 if($357){var $358=$353;label=91;break;}else{label=92;break;}
 case 91: 
 var $358;
 var $359=($348|0)==($358|0);
 if($359){label=95;break;}else{var $352=$358;label=90;break;}
 case 92: 
 var $360=((($352)-(12)+4)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=($355|0)==($361|0);
 if($362){label=94;break;}else{label=93;break;}
 case 93: 
 var $scevgep_i_i_i_i_i_i344=((($361)-(16))|0);
 var $scevgep28_i_i_i_i_i_i345=$scevgep_i_i_i_i_i_i344;
 var $363=(((-$356))|0);
 var $uglygep_i_i_i_i_i_i346=(($scevgep28_i_i_i_i_i_i345+$363)|0);
 var $uglygep29_i_i_i_i_i_i347=$uglygep_i_i_i_i_i_i346;
 var $364=$uglygep29_i_i_i_i_i_i347>>>4;
 var $365=$364^-1;
 var $scevgep30_i_i_i_i_i_i348=(($361+($365<<4))|0);
 HEAP32[(($360)>>2)]=$scevgep30_i_i_i_i_i_i348;
 label=94;break;
 case 94: 
 var $366=$355;
 __ZdlPv($366);
 var $_pre29_i_i_i350=HEAP32[(($22)>>2)];
 var $358=$_pre29_i_i_i350;label=91;break;
 case 95: 
 var $_pre_i_i_i352=HEAP32[(($21)>>2)];
 var $367=$_pre_i_i_i352;label=96;break;
 case 96: 
 var $367;
 var $368=$367;
 __ZdlPv($368);
 label=97;break;
 case 97: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($upskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=18;break; }
 case 98: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($downskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=17;break; }
 case 99: 
 var $371=HEAP32[(($8)>>2)];
 var $372=($371|0)==0;
 if($372){label=108;break;}else{label=100;break;}
 case 100: 
 var $373=HEAP32[(($9)>>2)];
 var $374=($371|0)==($373|0);
 if($374){var $390=$371;label=107;break;}else{var $375=$373;label=101;break;}
 case 101: 
 var $375;
 var $376=((($375)-(12))|0);
 HEAP32[(($9)>>2)]=$376;
 var $377=(($376)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=$378;
 var $380=($378|0)==0;
 if($380){var $381=$376;label=102;break;}else{label=103;break;}
 case 102: 
 var $381;
 var $382=($371|0)==($381|0);
 if($382){label=106;break;}else{var $375=$381;label=101;break;}
 case 103: 
 var $383=((($375)-(12)+4)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=($378|0)==($384|0);
 if($385){label=105;break;}else{label=104;break;}
 case 104: 
 var $scevgep_i_i_i_i_i_i360=((($384)-(16))|0);
 var $scevgep28_i_i_i_i_i_i361=$scevgep_i_i_i_i_i_i360;
 var $386=(((-$379))|0);
 var $uglygep_i_i_i_i_i_i362=(($scevgep28_i_i_i_i_i_i361+$386)|0);
 var $uglygep29_i_i_i_i_i_i363=$uglygep_i_i_i_i_i_i362;
 var $387=$uglygep29_i_i_i_i_i_i363>>>4;
 var $388=$387^-1;
 var $scevgep30_i_i_i_i_i_i364=(($384+($388<<4))|0);
 HEAP32[(($383)>>2)]=$scevgep30_i_i_i_i_i_i364;
 label=105;break;
 case 105: 
 var $389=$378;
 __ZdlPv($389);
 var $_pre29_i_i_i366=HEAP32[(($9)>>2)];
 var $381=$_pre29_i_i_i366;label=102;break;
 case 106: 
 var $_pre_i_i_i368=HEAP32[(($8)>>2)];
 var $390=$_pre_i_i_i368;label=107;break;
 case 107: 
 var $390;
 var $391=$390;
 __ZdlPv($391);
 label=108;break;
 case 108: 
 var $392=((($partNr_0492)+(1))|0);
 var $393=HEAP32[(($3)>>2)];
 var $394=HEAP32[(($5)>>2)];
 var $395=$393;
 var $396=$394;
 var $397=((($395)-($396))|0);
 var $398=(((($397|0))/(96))&-1);
 var $399=($392>>>0)<($398>>>0);
 if($399){var $partNr_0492=$392;var $35=$394;label=3;break;}else{label=149;break;}
 case 109: 
 var $401$0 = ___cxa_find_matching_catch(-1, -1); var $401$1 = tempRet0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($sparseClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=151;break; }
 case 110: 
 var $402=$401$1;
 var $403=$401$0;
 var $_0272=$403;var $_0273=$402;label=111;break;
 case 111: 
 var $_0273;
 var $_0272;
 var $405=HEAP32[(($27)>>2)];
 var $406=($405|0)==0;
 if($406){label=120;break;}else{label=112;break;}
 case 112: 
 var $407=HEAP32[(($28)>>2)];
 var $408=($405|0)==($407|0);
 if($408){var $424=$405;label=119;break;}else{var $409=$407;label=113;break;}
 case 113: 
 var $409;
 var $410=((($409)-(12))|0);
 HEAP32[(($28)>>2)]=$410;
 var $411=(($410)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=$412;
 var $414=($412|0)==0;
 if($414){var $415=$410;label=114;break;}else{label=115;break;}
 case 114: 
 var $415;
 var $416=($405|0)==($415|0);
 if($416){label=118;break;}else{var $409=$415;label=113;break;}
 case 115: 
 var $417=((($409)-(12)+4)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=($412|0)==($418|0);
 if($419){label=117;break;}else{label=116;break;}
 case 116: 
 var $scevgep_i_i_i_i_i_i376=((($418)-(16))|0);
 var $scevgep28_i_i_i_i_i_i377=$scevgep_i_i_i_i_i_i376;
 var $420=(((-$413))|0);
 var $uglygep_i_i_i_i_i_i378=(($scevgep28_i_i_i_i_i_i377+$420)|0);
 var $uglygep29_i_i_i_i_i_i379=$uglygep_i_i_i_i_i_i378;
 var $421=$uglygep29_i_i_i_i_i_i379>>>4;
 var $422=$421^-1;
 var $scevgep30_i_i_i_i_i_i380=(($418+($422<<4))|0);
 HEAP32[(($417)>>2)]=$scevgep30_i_i_i_i_i_i380;
 label=117;break;
 case 117: 
 var $423=$412;
 __ZdlPv($423);
 var $_pre29_i_i_i382=HEAP32[(($28)>>2)];
 var $415=$_pre29_i_i_i382;label=114;break;
 case 118: 
 var $_pre_i_i_i384=HEAP32[(($27)>>2)];
 var $424=$_pre_i_i_i384;label=119;break;
 case 119: 
 var $424;
 var $425=$424;
 __ZdlPv($425);
 label=120;break;
 case 120: 
 var $426=HEAP32[(($24)>>2)];
 var $427=($426|0)==0;
 if($427){label=129;break;}else{label=121;break;}
 case 121: 
 var $428=HEAP32[(($25)>>2)];
 var $429=($426|0)==($428|0);
 if($429){var $445=$426;label=128;break;}else{var $430=$428;label=122;break;}
 case 122: 
 var $430;
 var $431=((($430)-(12))|0);
 HEAP32[(($25)>>2)]=$431;
 var $432=(($431)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=$433;
 var $435=($433|0)==0;
 if($435){var $436=$431;label=123;break;}else{label=124;break;}
 case 123: 
 var $436;
 var $437=($426|0)==($436|0);
 if($437){label=127;break;}else{var $430=$436;label=122;break;}
 case 124: 
 var $438=((($430)-(12)+4)|0);
 var $439=HEAP32[(($438)>>2)];
 var $440=($433|0)==($439|0);
 if($440){label=126;break;}else{label=125;break;}
 case 125: 
 var $scevgep_i_i_i_i_i_i392=((($439)-(16))|0);
 var $scevgep28_i_i_i_i_i_i393=$scevgep_i_i_i_i_i_i392;
 var $441=(((-$434))|0);
 var $uglygep_i_i_i_i_i_i394=(($scevgep28_i_i_i_i_i_i393+$441)|0);
 var $uglygep29_i_i_i_i_i_i395=$uglygep_i_i_i_i_i_i394;
 var $442=$uglygep29_i_i_i_i_i_i395>>>4;
 var $443=$442^-1;
 var $scevgep30_i_i_i_i_i_i396=(($439+($443<<4))|0);
 HEAP32[(($438)>>2)]=$scevgep30_i_i_i_i_i_i396;
 label=126;break;
 case 126: 
 var $444=$433;
 __ZdlPv($444);
 var $_pre29_i_i_i398=HEAP32[(($25)>>2)];
 var $436=$_pre29_i_i_i398;label=123;break;
 case 127: 
 var $_pre_i_i_i400=HEAP32[(($24)>>2)];
 var $445=$_pre_i_i_i400;label=128;break;
 case 128: 
 var $445;
 var $446=$445;
 __ZdlPv($446);
 label=129;break;
 case 129: 
 var $447=HEAP32[(($21)>>2)];
 var $448=($447|0)==0;
 if($448){var $_3=$_0272;var $_3276=$_0273;label=138;break;}else{label=130;break;}
 case 130: 
 var $449=HEAP32[(($22)>>2)];
 var $450=($447|0)==($449|0);
 if($450){var $466=$447;label=137;break;}else{var $451=$449;label=131;break;}
 case 131: 
 var $451;
 var $452=((($451)-(12))|0);
 HEAP32[(($22)>>2)]=$452;
 var $453=(($452)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=$454;
 var $456=($454|0)==0;
 if($456){var $457=$452;label=132;break;}else{label=133;break;}
 case 132: 
 var $457;
 var $458=($447|0)==($457|0);
 if($458){label=136;break;}else{var $451=$457;label=131;break;}
 case 133: 
 var $459=((($451)-(12)+4)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=($454|0)==($460|0);
 if($461){label=135;break;}else{label=134;break;}
 case 134: 
 var $scevgep_i_i_i_i_i_i408=((($460)-(16))|0);
 var $scevgep28_i_i_i_i_i_i409=$scevgep_i_i_i_i_i_i408;
 var $462=(((-$455))|0);
 var $uglygep_i_i_i_i_i_i410=(($scevgep28_i_i_i_i_i_i409+$462)|0);
 var $uglygep29_i_i_i_i_i_i411=$uglygep_i_i_i_i_i_i410;
 var $463=$uglygep29_i_i_i_i_i_i411>>>4;
 var $464=$463^-1;
 var $scevgep30_i_i_i_i_i_i412=(($460+($464<<4))|0);
 HEAP32[(($459)>>2)]=$scevgep30_i_i_i_i_i_i412;
 label=135;break;
 case 135: 
 var $465=$454;
 __ZdlPv($465);
 var $_pre29_i_i_i414=HEAP32[(($22)>>2)];
 var $457=$_pre29_i_i_i414;label=132;break;
 case 136: 
 var $_pre_i_i_i416=HEAP32[(($21)>>2)];
 var $466=$_pre_i_i_i416;label=137;break;
 case 137: 
 var $466;
 var $467=$466;
 __ZdlPv($467);
 var $_3=$_0272;var $_3276=$_0273;label=138;break;
 case 138: 
 var $_3276;
 var $_3;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($upskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_4=$_3;var $_4277=$_3276;label=139;break; } else { label=151;break; }
 case 139: 
 var $_4277;
 var $_4;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($downskinClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_5=$_4;var $_5278=$_4277;label=140;break; } else { label=151;break; }
 case 140: 
 var $_5278;
 var $_5;
 var $470=HEAP32[(($8)>>2)];
 var $471=($470|0)==0;
 if($471){label=150;break;}else{label=141;break;}
 case 141: 
 var $472=HEAP32[(($9)>>2)];
 var $473=($470|0)==($472|0);
 if($473){var $489=$470;label=148;break;}else{var $474=$472;label=142;break;}
 case 142: 
 var $474;
 var $475=((($474)-(12))|0);
 HEAP32[(($9)>>2)]=$475;
 var $476=(($475)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=$477;
 var $479=($477|0)==0;
 if($479){var $480=$475;label=143;break;}else{label=144;break;}
 case 143: 
 var $480;
 var $481=($470|0)==($480|0);
 if($481){label=147;break;}else{var $474=$480;label=142;break;}
 case 144: 
 var $482=((($474)-(12)+4)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($477|0)==($483|0);
 if($484){label=146;break;}else{label=145;break;}
 case 145: 
 var $scevgep_i_i_i_i_i_i=((($483)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $485=(((-$478))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$485)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $486=$uglygep29_i_i_i_i_i_i>>>4;
 var $487=$486^-1;
 var $scevgep30_i_i_i_i_i_i=(($483+($487<<4))|0);
 HEAP32[(($482)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=146;break;
 case 146: 
 var $488=$477;
 __ZdlPv($488);
 var $_pre29_i_i_i=HEAP32[(($9)>>2)];
 var $480=$_pre29_i_i_i;label=143;break;
 case 147: 
 var $_pre_i_i_i=HEAP32[(($8)>>2)];
 var $489=$_pre_i_i_i;label=148;break;
 case 148: 
 var $489;
 var $490=$489;
 __ZdlPv($490);
 label=150;break;
 case 149: 
 STACKTOP=sp;return;
 case 150: 
 var $491$0=$_5;
 var $491$1=0;
 var $492$0=$491$0;
 var $492$1=$_5278;
 ___resumeException($492$0)
 case 151: 
 var $494$0 = ___cxa_find_matching_catch(-1, -1,0); var $494$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z15compare_int64_tPKvS0_($a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$a;
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $3=$b;
 var $ld$2$0=(($3)|0);
 var $4$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $4$1=HEAP32[(($ld$3$1)>>2)];
 var $5$0=_i64Subtract($2$0,$2$1,$4$0,$4$1);var $5$1=tempRet0;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $6=(($5$1|0) < ($$etemp$4$1|0)) | (((($5$1|0) == ($$etemp$4$1|0) & ($5$0>>>0) <  ($$etemp$4$0>>>0))));
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $8=(($5$1|0) > ($$etemp$5$1|0)) | (((($5$1|0) == ($$etemp$5$1|0) & ($5$0>>>0) >  ($$etemp$5$0>>>0))));
 var $_=($8&1);
 var $_0=$_;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($in_outline,$result,$extrusionWidth,$lineSpacing,$infillOverlap,$rotation){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $outline=sp;
 var $boundary=(sp)+(16);
 var $1=(sp)+(48);
 var $cutList=(sp)+(64);
 var $2=(sp)+(80);
 var $3=(sp)+(96);
 var $p=(sp)+(104);
 var $4=(sp)+(120);
 var $5=(sp)+(136);
 var $6=(($outline)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($outline+4)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($outline+8)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(Math_imul($infillOverlap,$extrusionWidth)|0);
 var $10=(((($9|0))/(100))&-1);
 var $11=($10|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($in_outline,$outline,$11,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $13=($rotation)/(180);
 var $14=($13)*((3.141592653589793));
 var $15=Math_cos($14);
 var $16=Math_sin($14);
 var $17=((-.0))-($16);
 var $18=HEAP32[(($7)>>2)];
 var $19=HEAP32[(($6)>>2)];
 var $20=($18|0)==($19|0);
 if($20){label=7;break;}else{var $i_033_i=0;var $22=$19;var $21=$18;label=3;break;}
 case 3: 
 var $21;
 var $22;
 var $i_033_i;
 var $23=(($22+((($i_033_i)*(12))&-1)+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($22+((($i_033_i)*(12))&-1))|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){var $52=$21;var $51=$22;label=6;break;}else{var $j_032_i=0;var $28=$26;label=4;break;}
 case 4: 
 var $28;
 var $j_032_i;
 var $_sroa_029_0__idx_i=(($28+($j_032_i<<4))|0);
 var $ld$0$0=(($_sroa_029_0__idx_i)|0);
 var $_sroa_029_0_copyload_i$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_sroa_029_0__idx_i+4)|0);
 var $_sroa_029_0_copyload_i$1=HEAP32[(($ld$1$1)>>2)];
 var $_sroa_130_8__idx31_i=(($28+($j_032_i<<4)+8)|0);
 var $ld$2$0=(($_sroa_130_8__idx31_i)|0);
 var $_sroa_130_8_copyload_i$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($_sroa_130_8__idx31_i+4)|0);
 var $_sroa_130_8_copyload_i$1=HEAP32[(($ld$3$1)>>2)];
 var $29=(($_sroa_029_0_copyload_i$0>>>0)+(($_sroa_029_0_copyload_i$1|0)*4294967296));
 var $30=($15)*($29);
 var $31=(($_sroa_130_8_copyload_i$0>>>0)+(($_sroa_130_8_copyload_i$1|0)*4294967296));
 var $32=($31)*($17);
 var $33=($30)+($32);
 var $34$0=$33>>>0;var $34$1=(Math_abs($33) >= 1 ? ($33 > 0 ? Math_min(Math_floor(($33)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($33 - +(((~~($33)))>>>0))/4294967296)))>>>0) : 0);
 var $35=($16)*($29);
 var $36=($15)*($31);
 var $37=($35)+($36);
 var $38$0=$37>>>0;var $38$1=(Math_abs($37) >= 1 ? ($37 > 0 ? Math_min(Math_floor(($37)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($37 - +(((~~($37)))>>>0))/4294967296)))>>>0) : 0);
 var $st$4$0=(($_sroa_029_0__idx_i)|0);
 HEAP32[(($st$4$0)>>2)]=$34$0;
 var $st$5$1=(($_sroa_029_0__idx_i+4)|0);
 HEAP32[(($st$5$1)>>2)]=$34$1;
 var $st$6$0=(($_sroa_130_8__idx31_i)|0);
 HEAP32[(($st$6$0)>>2)]=$38$0;
 var $st$7$1=(($_sroa_130_8__idx31_i+4)|0);
 HEAP32[(($st$7$1)>>2)]=$38$1;
 var $39=((($j_032_i)+(1))|0);
 var $40=HEAP32[(($6)>>2)];
 var $41=(($40+((($i_033_i)*(12))&-1)+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+((($i_033_i)*(12))&-1))|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$42;
 var $46=$44;
 var $47=((($45)-($46))|0);
 var $48=$47>>4;
 var $49=($39>>>0)<($48>>>0);
 if($49){var $j_032_i=$39;var $28=$44;label=4;break;}else{label=5;break;}
 case 5: 
 var $_pre_i=HEAP32[(($7)>>2)];
 var $52=$_pre_i;var $51=$40;label=6;break;
 case 6: 
 var $51;
 var $52;
 var $53=((($i_033_i)+(1))|0);
 var $54=$52;
 var $55=$51;
 var $56=((($54)-($55))|0);
 var $57=(((($56|0))/(12))&-1);
 var $58=($53>>>0)<($57>>>0);
 if($58){var $i_033_i=$53;var $22=$51;var $21=$52;label=3;break;}else{label=7;break;}
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($1,$outline) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=33;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN4AABBC2ENSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($boundary,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=34;break; }
 case 9: 
 var $59=(($1)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==0;
 if($61){label=18;break;}else{label=10;break;}
 case 10: 
 var $62=(($1+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($60|0)==($63|0);
 if($64){var $80=$60;label=17;break;}else{var $65=$63;label=11;break;}
 case 11: 
 var $65;
 var $66=((($65)-(12))|0);
 HEAP32[(($62)>>2)]=$66;
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=($68|0)==0;
 if($70){var $71=$66;label=12;break;}else{label=13;break;}
 case 12: 
 var $71;
 var $72=($60|0)==($71|0);
 if($72){label=16;break;}else{var $65=$71;label=11;break;}
 case 13: 
 var $73=((($65)-(12)+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($68|0)==($74|0);
 if($75){label=15;break;}else{label=14;break;}
 case 14: 
 var $scevgep_i_i_i_i_i_i=((($74)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $76=(((-$69))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$76)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $77=$uglygep29_i_i_i_i_i_i>>>4;
 var $78=$77^-1;
 var $scevgep30_i_i_i_i_i_i=(($74+($78<<4))|0);
 HEAP32[(($73)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=15;break;
 case 15: 
 var $79=$68;
 __ZdlPv($79);
 var $_pre29_i_i_i=HEAP32[(($62)>>2)];
 var $71=$_pre29_i_i_i;label=12;break;
 case 16: 
 var $_pre_i_i_i=HEAP32[(($59)>>2)];
 var $80=$_pre_i_i_i;label=17;break;
 case 17: 
 var $80;
 var $81=$80;
 __ZdlPv($81);
 label=18;break;
 case 18: 
 var $82=(($boundary)|0);
 var $ld$8$0=(($82)|0);
 var $83$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($82+4)|0);
 var $83$1=HEAP32[(($ld$9$1)>>2)];
 var $84$0=$lineSpacing;
 var $84$1=(((($lineSpacing|0)<0))|0)?-1:0;
 var $85$0=___divdi3($83$0,$83$1,$84$0,$84$1);var $85$1=tempRet0;
 var $$etemp$10$0=-1;
 var $$etemp$10$1=-1;
 var $86$0=_i64Add($85$0,$85$1,$$etemp$10$0,$$etemp$10$1);var $86$1=tempRet0;
 var $87$0=___muldi3($86$0,$86$1,$84$0,$84$1);var $87$1=tempRet0;
 var $st$11$0=(($82)|0);
 HEAP32[(($st$11$0)>>2)]=$87$0;
 var $st$12$1=(($82+4)|0);
 HEAP32[(($st$12$1)>>2)]=$87$1;
 var $88=(($boundary+16)|0);
 var $ld$13$0=(($88)|0);
 var $89$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($88+4)|0);
 var $89$1=HEAP32[(($ld$14$1)>>2)];
 var $90=((($lineSpacing)-(1))|0);
 var $91$0=$90;
 var $91$1=(((($90|0)<0))|0)?-1:0;
 var $92$0=_i64Add($89$0,$89$1,$91$0,$91$1);var $92$1=tempRet0;
 var $93$0=_i64Subtract($92$0,$92$1,$87$0,$87$1);var $93$1=tempRet0;
 var $94$0=___divdi3($93$0,$93$1,$84$0,$84$1);var $94$1=tempRet0;
 var $95$0=$94$0;
 var $95=$95$0;
 var $96=(($cutList)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=(($cutList+4)|0);
 HEAP32[(($97)>>2)]=0;
 var $98=(($cutList+8)|0);
 HEAP32[(($98)>>2)]=0;
 var $99=($95|0)>0;
 if($99){label=19;break;}else{label=20;break;}
 case 19: 
 var $100=(($2)|0);
 var $101=(($2+4)|0);
 var $102=(($2+8)|0);
 var $n_0443=1;var $109=0;var $108=0;label=22;break;
 case 20: 
 var $103=HEAP32[(($7)>>2)];
 var $104=HEAP32[(($6)>>2)];
 var $105=($103|0)==($104|0);
 var $_pre462=(((($lineSpacing|0))/(2))&-1);
 if($105){label=63;break;}else{label=21;break;}
 case 21: 
 var $106$0=$_pre462;
 var $106$1=0;
 var $polyNr_0433=0;var $175=$104;var $174=$103;label=50;break;
 case 22: 
 var $108;
 var $109;
 var $n_0443;
 HEAP32[(($100)>>2)]=0;
 HEAP32[(($101)>>2)]=0;
 HEAP32[(($102)>>2)]=0;
 var $110=($109|0)==($108|0);
 if($110){label=26;break;}else{label=23;break;}
 case 23: 
 var $112=($109|0)==0;
 if($112){label=25;break;}else{label=24;break;}
 case 24: 
 var $113=(($109)|0);
 HEAP32[(($113)>>2)]=0;
 var $114=(($109+4)|0);
 HEAP32[(($114)>>2)]=0;
 var $115=(($109+8)|0);
 HEAP32[(($115)>>2)]=0;
 label=25;break;
 case 25: 
 var $116=HEAP32[(($97)>>2)];
 var $117=(($116+12)|0);
 HEAP32[(($97)>>2)]=$117;
 label=31;break;
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IxNS_9allocatorIxEEEENS1_IS3_EEE21__push_back_slow_pathIKS3_EEvRT_($cutList,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=46;break; }
 case 27: 
 var $_pre461=HEAP32[(($100)>>2)];
 var $119=$_pre461;
 var $120=($_pre461|0)==0;
 if($120){label=31;break;}else{label=28;break;}
 case 28: 
 var $121=HEAP32[(($101)>>2)];
 var $122=($_pre461|0)==($121|0);
 if($122){label=30;break;}else{label=29;break;}
 case 29: 
 var $scevgep_i_i_i=((($121)-(8))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $123=(((-$119))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$123)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $124=$uglygep29_i_i_i>>>3;
 var $125=$124^-1;
 var $scevgep30_i_i_i=(($121+($125<<3))|0);
 HEAP32[(($101)>>2)]=$scevgep30_i_i_i;
 label=30;break;
 case 30: 
 var $126=$_pre461;
 __ZdlPv($126);
 label=31;break;
 case 31: 
 var $127=($n_0443|0)<($95|0);
 if($127){label=32;break;}else{label=20;break;}
 case 32: 
 var $_pre459=HEAP32[(($97)>>2)];
 var $_pre460=HEAP32[(($98)>>2)];
 var $phitmp=((($n_0443)+(1))|0);
 var $n_0443=$phitmp;var $109=$_pre459;var $108=$_pre460;label=22;break;
 case 33: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_1=$130;var $_1260=$131;label=130;break;
 case 34: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1); var $133$1 = tempRet0;
 var $134=$133$0;
 var $135=$133$1;
 var $136=(($1)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)==0;
 if($138){var $_1=$134;var $_1260=$135;label=130;break;}else{label=35;break;}
 case 35: 
 var $139=(($1+4)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($137|0)==($140|0);
 if($141){var $157=$137;label=42;break;}else{var $142=$140;label=36;break;}
 case 36: 
 var $142;
 var $143=((($142)-(12))|0);
 HEAP32[(($139)>>2)]=$143;
 var $144=(($143)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=$145;
 var $147=($145|0)==0;
 if($147){var $148=$143;label=37;break;}else{label=38;break;}
 case 37: 
 var $148;
 var $149=($137|0)==($148|0);
 if($149){label=41;break;}else{var $142=$148;label=36;break;}
 case 38: 
 var $150=((($142)-(12)+4)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=($145|0)==($151|0);
 if($152){label=40;break;}else{label=39;break;}
 case 39: 
 var $scevgep_i_i_i_i_i_i285=((($151)-(16))|0);
 var $scevgep28_i_i_i_i_i_i286=$scevgep_i_i_i_i_i_i285;
 var $153=(((-$146))|0);
 var $uglygep_i_i_i_i_i_i287=(($scevgep28_i_i_i_i_i_i286+$153)|0);
 var $uglygep29_i_i_i_i_i_i288=$uglygep_i_i_i_i_i_i287;
 var $154=$uglygep29_i_i_i_i_i_i288>>>4;
 var $155=$154^-1;
 var $scevgep30_i_i_i_i_i_i289=(($151+($155<<4))|0);
 HEAP32[(($150)>>2)]=$scevgep30_i_i_i_i_i_i289;
 label=40;break;
 case 40: 
 var $156=$145;
 __ZdlPv($156);
 var $_pre29_i_i_i291=HEAP32[(($139)>>2)];
 var $148=$_pre29_i_i_i291;label=37;break;
 case 41: 
 var $_pre_i_i_i293=HEAP32[(($136)>>2)];
 var $157=$_pre_i_i_i293;label=42;break;
 case 42: 
 var $157;
 var $158=$157;
 __ZdlPv($158);
 var $_1=$134;var $_1260=$135;label=130;break;
 case 43: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=45;break;
 case 45: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $160=$lpad_phi$0;
 var $161=$lpad_phi$1;
 var $_0=$160;var $_0259=$161;label=121;break;
 case 46: 
 var $162$0 = ___cxa_find_matching_catch(-1, -1); var $162$1 = tempRet0;
 var $_pre452=HEAP32[(($100)>>2)];
 var $163=$162$0;
 var $164=$162$1;
 var $165=$_pre452;
 var $166=($_pre452|0)==0;
 if($166){var $_0=$163;var $_0259=$164;label=121;break;}else{label=47;break;}
 case 47: 
 var $167=HEAP32[(($101)>>2)];
 var $168=($_pre452|0)==($167|0);
 if($168){label=49;break;}else{label=48;break;}
 case 48: 
 var $scevgep_i_i_i298=((($167)-(8))|0);
 var $scevgep28_i_i_i299=$scevgep_i_i_i298;
 var $169=(((-$165))|0);
 var $uglygep_i_i_i300=(($scevgep28_i_i_i299+$169)|0);
 var $uglygep29_i_i_i301=$uglygep_i_i_i300;
 var $170=$uglygep29_i_i_i301>>>3;
 var $171=$170^-1;
 var $scevgep30_i_i_i302=(($167+($171<<3))|0);
 HEAP32[(($101)>>2)]=$scevgep30_i_i_i302;
 label=49;break;
 case 49: 
 var $172=$_pre452;
 __ZdlPv($172);
 var $_0=$163;var $_0259=$164;label=121;break;
 case 50: 
 var $174;
 var $175;
 var $polyNr_0433;
 var $176=(($175+((($polyNr_0433)*(12))&-1)+4)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($175+((($polyNr_0433)*(12))&-1))|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=$177;
 var $181=$179;
 var $182=((($180)-($181))|0);
 var $183=$182>>4;
 var $184=((($183)-(1))|0);
 var $185=($177|0)==($179|0);
 if($185){var $241=$174;var $240=$175;label=62;break;}else{label=51;break;}
 case 51: 
 var $p1_sroa_1_8__idx41=(($179+($184<<4)+8)|0);
 var $p1_sroa_0_0__idx=(($179+($184<<4))|0);
 var $ld$15$0=(($p1_sroa_1_8__idx41)|0);
 var $p1_sroa_1_8_copyload$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($p1_sroa_1_8__idx41+4)|0);
 var $p1_sroa_1_8_copyload$1=HEAP32[(($ld$16$1)>>2)];
 var $ld$17$0=(($p1_sroa_0_0__idx)|0);
 var $p1_sroa_0_0_copyload$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($p1_sroa_0_0__idx+4)|0);
 var $p1_sroa_0_0_copyload$1=HEAP32[(($ld$18$1)>>2)];
 var $p1_sroa_0_0426$1=$p1_sroa_0_0_copyload$1;var $p1_sroa_0_0426$0=$p1_sroa_0_0_copyload$0;var $i_0427=0;var $p1_sroa_1_0428$1=$p1_sroa_1_8_copyload$1;var $p1_sroa_1_0428$0=$p1_sroa_1_8_copyload$0;var $187=$179;label=52;break;
 case 52: 
 var $187;
 var $p1_sroa_1_0428$0;
 var $p1_sroa_1_0428$1;
 var $i_0427;
 var $p1_sroa_0_0426$0;
 var $p1_sroa_0_0426$1;
 var $p0_sroa_0_0__idx29=(($187+($i_0427<<4))|0);
 var $ld$19$0=(($p0_sroa_0_0__idx29)|0);
 var $p0_sroa_0_0_copyload30$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($p0_sroa_0_0__idx29+4)|0);
 var $p0_sroa_0_0_copyload30$1=HEAP32[(($ld$20$1)>>2)];
 var $p0_sroa_1_8__idx33=(($187+($i_0427<<4)+8)|0);
 var $ld$21$0=(($p0_sroa_1_8__idx33)|0);
 var $p0_sroa_1_8_copyload34$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($p0_sroa_1_8__idx33+4)|0);
 var $p0_sroa_1_8_copyload34$1=HEAP32[(($ld$22$1)>>2)];
 var $188$0=_i64Subtract($p0_sroa_0_0_copyload30$0,$p0_sroa_0_0_copyload30$1,$87$0,$87$1);var $188$1=tempRet0;
 var $189$0=___divdi3($188$0,$188$1,$84$0,$84$1);var $189$1=tempRet0;
 var $190$0=$189$0;
 var $190=$190$0;
 var $191$0=_i64Subtract($p1_sroa_0_0426$0,$p1_sroa_0_0426$1,$87$0,$87$1);var $191$1=tempRet0;
 var $192$0=___divdi3($191$0,$191$1,$84$0,$84$1);var $192$1=tempRet0;
 var $193$0=$192$0;
 var $193=$193$0;
 var $194=(($p0_sroa_0_0_copyload30$1|0) > ($p1_sroa_0_0426$1|0)) | (((($p0_sroa_0_0_copyload30$1|0) == ($p1_sroa_0_0426$1|0) & ($p0_sroa_0_0_copyload30$0>>>0) >  ($p1_sroa_0_0426$0>>>0))));
 var $p1_sroa_0_0_p0_sroa_0_0_copyload30$0=$194?$p1_sroa_0_0426$0:$p0_sroa_0_0_copyload30$0;
 var $p1_sroa_0_0_p0_sroa_0_0_copyload30$1=$194?$p1_sroa_0_0426$1:$p0_sroa_0_0_copyload30$1;
 var $p0_sroa_0_0_copyload30_p1_sroa_0_0$0=$194?$p0_sroa_0_0_copyload30$0:$p1_sroa_0_0426$0;
 var $p0_sroa_0_0_copyload30_p1_sroa_0_0$1=$194?$p0_sroa_0_0_copyload30$1:$p1_sroa_0_0426$1;
 var $195=($190|0)>($193|0);
 var $idx0_0=$195?$193:$190;
 var $idx1_0=$195?$190:$193;
 var $196$0=_i64Subtract($p1_sroa_1_0428$0,$p1_sroa_1_0428$1,$p0_sroa_1_8_copyload34$0,$p0_sroa_1_8_copyload34$1);var $196$1=tempRet0;
 var $197$0=_i64Subtract($p1_sroa_0_0426$0,$p1_sroa_0_0426$1,$p0_sroa_0_0_copyload30$0,$p0_sroa_0_0_copyload30$1);var $197$1=tempRet0;
 var $idx_0425=$idx0_0;label=53;break;
 case 53: 
 var $idx_0425;
 var $199=(Math_imul($idx_0425,$lineSpacing)|0);
 var $200$0=$199;
 var $200$1=0;
 var $201$0=_i64Add($87$0,$87$1,$200$0,$200$1);var $201$1=tempRet0;
 var $202$0=_i64Add($201$0,$201$1,$106$0,$106$1);var $202$1=tempRet0;
 var $sext$0=0;
 var $sext$1=$202$0;
 var $203$0=$sext$1;
 var $203$1=(((($sext$1|0)<0))|0)?-1:0;
 var $204=(($203$1|0) >= ($p1_sroa_0_0_p0_sroa_0_0_copyload30$1|0)) & (((($203$1|0) >  ($p1_sroa_0_0_p0_sroa_0_0_copyload30$1|0)) | ($203$0>>>0) >= ($p1_sroa_0_0_p0_sroa_0_0_copyload30$0>>>0)));
 var $205=(($203$1|0) < ($p0_sroa_0_0_copyload30_p1_sroa_0_0$1|0)) | (((($203$1|0) == ($p0_sroa_0_0_copyload30_p1_sroa_0_0$1|0) & ($203$0>>>0) <  ($p0_sroa_0_0_copyload30_p1_sroa_0_0$0>>>0))));
 var $or_cond=$204&$205;
 if($or_cond){label=54;break;}else{label=59;break;}
 case 54: 
 var $207$0=_i64Subtract($203$0,$203$1,$p0_sroa_0_0_copyload30$0,$p0_sroa_0_0_copyload30$1);var $207$1=tempRet0;
 var $208$0=___muldi3($207$0,$207$1,$196$0,$196$1);var $208$1=tempRet0;
 var $209$0=___divdi3($208$0,$208$1,$197$0,$197$1);var $209$1=tempRet0;
 var $210$0=_i64Add($209$0,$209$1,$p0_sroa_1_8_copyload34$0,$p0_sroa_1_8_copyload34$1);var $210$1=tempRet0;
 var $211=HEAP32[(($96)>>2)];
 var $sext279$0=0;
 var $sext279$1=$210$0;
 var $212$0=$sext279$1;
 var $212$1=(((($sext279$1|0)<0))|0)?-1:0;
 var $st$23$0=(($3)|0);
 HEAP32[(($st$23$0)>>2)]=$212$0;
 var $st$24$1=(($3+4)|0);
 HEAP32[(($st$24$1)>>2)]=$212$1;
 var $213=(($211+((($idx_0425)*(12))&-1)+4)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(($211+((($idx_0425)*(12))&-1)+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($214|0)==($216|0);
 if($217){label=58;break;}else{label=55;break;}
 case 55: 
 var $219=($214|0)==0;
 if($219){var $221=0;label=57;break;}else{label=56;break;}
 case 56: 
 var $st$25$0=(($214)|0);
 HEAP32[(($st$25$0)>>2)]=$212$0;
 var $st$26$1=(($214+4)|0);
 HEAP32[(($st$26$1)>>2)]=$212$1;
 var $_pre451=HEAP32[(($213)>>2)];
 var $221=$_pre451;label=57;break;
 case 57: 
 var $221;
 var $222=(($221+8)|0);
 HEAP32[(($213)>>2)]=$222;
 label=59;break;
 case 58: 
 var $224=(($211+((($idx_0425)*(12))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIxNS_9allocatorIxEEE21__push_back_slow_pathIKxEEvRT_($224,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=44;break; }
 case 59: 
 var $225=((($idx_0425)+(1))|0);
 var $226=($225|0)>($idx1_0|0);
 if($226){label=60;break;}else{var $idx_0425=$225;label=53;break;}
 case 60: 
 var $228=((($i_0427)+(1))|0);
 var $229=HEAP32[(($6)>>2)];
 var $230=(($229+((($polyNr_0433)*(12))&-1)+4)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($229+((($polyNr_0433)*(12))&-1))|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=$231;
 var $235=$233;
 var $236=((($234)-($235))|0);
 var $237=$236>>4;
 var $238=($228>>>0)<($237>>>0);
 if($238){var $p1_sroa_0_0426$1=$p0_sroa_0_0_copyload30$1;var $p1_sroa_0_0426$0=$p0_sroa_0_0_copyload30$0;var $i_0427=$228;var $p1_sroa_1_0428$1=$p0_sroa_1_8_copyload34$1;var $p1_sroa_1_0428$0=$p0_sroa_1_8_copyload34$0;var $187=$233;label=52;break;}else{label=61;break;}
 case 61: 
 var $_pre=HEAP32[(($7)>>2)];
 var $241=$_pre;var $240=$229;label=62;break;
 case 62: 
 var $240;
 var $241;
 var $242=((($polyNr_0433)+(1))|0);
 var $243=$241;
 var $244=$240;
 var $245=((($243)-($244))|0);
 var $246=(((($245|0))/(12))&-1);
 var $247=($242>>>0)<($246>>>0);
 if($247){var $polyNr_0433=$242;var $175=$240;var $174=$241;label=50;break;}else{label=63;break;}
 case 63: 
 var $248$0=$_pre462;
 var $248$1=(((($_pre462|0)<0))|0)?-1:0;
 var $249$0=_i64Add($248$0,$248$1,$87$0,$87$1);var $249$1=tempRet0;
 var $250=(($249$1|0) < ($89$1|0)) | (((($249$1|0) == ($89$1|0) & ($249$0>>>0) <  ($89$0>>>0))));
 var $251=HEAP32[(($96)>>2)];
 if($250){label=64;break;}else{var $_lcssa415=$251;label=102;break;}
 case 64: 
 var $252=(((($extrusionWidth|0))/(5))&-1);
 var $253$0=$252;
 var $253$1=(((($252|0)<0))|0)?-1:0;
 var $254=(($p)|0);
 var $255=(($p+4)|0);
 var $256=(($p+8)|0);
 var $257=(($4)|0);
 var $258=(($4+8)|0);
 var $259=(($5)|0);
 var $260=(($5+8)|0);
 var $261=(($result+4)|0);
 var $262=(($result+8)|0);
 var $263=$5;
 var $idx2_0419=0;var $x3_0421$1=$249$1;var $x3_0421$0=$249$0;var $265=$251;label=65;break;
 case 65: 
 var $265;
 var $x3_0421$0;
 var $x3_0421$1;
 var $idx2_0419;
 var $266=(($265+((($idx2_0419)*(12))&-1))|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=$267;
 var $269=(($265+((($idx2_0419)*(12))&-1)+4)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=$270;
 var $272=$267;
 var $273=((($271)-($272))|0);
 var $274=$273>>3;
 (function() { try { __THREW__ = 0; return _qsort($268,$274,8,292) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=43;break; }
 case 66: 
 var $275=HEAP32[(($96)>>2)];
 var $276=(($275+((($idx2_0419)*(12))&-1)+4)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($275+((($idx2_0419)*(12))&-1))|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=$277;
 var $281=$279;
 var $282=((($280)-($281))|0);
 var $283=$282>>3;
 var $284=($283>>>0)>1;
 if($284){label=67;break;}else{var $413=$275;label=101;break;}
 case 67: 
 var $285=(($x3_0421$0>>>0)+(($x3_0421$1|0)*4294967296));
 var $286=($15)*($285);
 var $287=($285)*($17);
 var $i4_0414=0;var $291=1;var $290=$279;var $289=$275;label=68;break;
 case 68: 
 var $289;
 var $290;
 var $291;
 var $i4_0414;
 var $292=(($290+($291<<3))|0);
 var $ld$27$0=(($292)|0);
 var $293$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($292+4)|0);
 var $293$1=HEAP32[(($ld$28$1)>>2)];
 var $294=(($290+($i4_0414<<3))|0);
 var $ld$29$0=(($294)|0);
 var $295$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($294+4)|0);
 var $295$1=HEAP32[(($ld$30$1)>>2)];
 var $296$0=_i64Subtract($293$0,$293$1,$295$0,$295$1);var $296$1=tempRet0;
 var $297=(($296$1|0) < ($253$1|0)) | (((($296$1|0) == ($253$1|0) & ($296$0>>>0) <  ($253$0>>>0))));
 if($297){label=95;break;}else{label=69;break;}
 case 69: 
 HEAP32[(($254)>>2)]=0;
 HEAP32[(($255)>>2)]=0;
 HEAP32[(($256)>>2)]=0;
 var $299=(($289+((($idx2_0419)*(12))&-1))|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($300+($i4_0414<<3))|0);
 var $ld$31$0=(($301)|0);
 var $302$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($301+4)|0);
 var $302$1=HEAP32[(($ld$32$1)>>2)];
 var $303=(($302$0>>>0)+(($302$1|0)*4294967296));
 var $304=($16)*($303);
 var $305=($286)+($304);
 var $306$0=$305>>>0;var $306$1=(Math_abs($305) >= 1 ? ($305 > 0 ? Math_min(Math_floor(($305)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($305 - +(((~~($305)))>>>0))/4294967296)))>>>0) : 0);
 var $307=($15)*($303);
 var $308=($287)+($307);
 var $309$0=$308>>>0;var $309$1=(Math_abs($308) >= 1 ? ($308 > 0 ? Math_min(Math_floor(($308)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($308 - +(((~~($308)))>>>0))/4294967296)))>>>0) : 0);
 var $st$33$0=(($257)|0);
 HEAP32[(($st$33$0)>>2)]=$306$0;
 var $st$34$1=(($257+4)|0);
 HEAP32[(($st$34$1)>>2)]=$306$1;
 var $st$35$0=(($258)|0);
 HEAP32[(($st$35$0)>>2)]=$309$0;
 var $st$36$1=(($258+4)|0);
 HEAP32[(($st$36$1)>>2)]=$309$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($p,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=96;break; }
 case 70: 
 var $_pre456=HEAP32[(($96)>>2)];
 var $_pre457=HEAP32[(($255)>>2)];
 var $_pre458=HEAP32[(($256)>>2)];
 var $311=(($_pre456+((($idx2_0419)*(12))&-1))|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=(($312+($291<<3))|0);
 var $ld$37$0=(($313)|0);
 var $314$0=HEAP32[(($ld$37$0)>>2)];
 var $ld$38$1=(($313+4)|0);
 var $314$1=HEAP32[(($ld$38$1)>>2)];
 var $315=(($314$0>>>0)+(($314$1|0)*4294967296));
 var $316=($16)*($315);
 var $317=($286)+($316);
 var $318$0=$317>>>0;var $318$1=(Math_abs($317) >= 1 ? ($317 > 0 ? Math_min(Math_floor(($317)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($317 - +(((~~($317)))>>>0))/4294967296)))>>>0) : 0);
 var $319=($15)*($315);
 var $320=($287)+($319);
 var $321$0=$320>>>0;var $321$1=(Math_abs($320) >= 1 ? ($320 > 0 ? Math_min(Math_floor(($320)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($320 - +(((~~($320)))>>>0))/4294967296)))>>>0) : 0);
 var $st$39$0=(($259)|0);
 HEAP32[(($st$39$0)>>2)]=$318$0;
 var $st$40$1=(($259+4)|0);
 HEAP32[(($st$40$1)>>2)]=$318$1;
 var $st$41$0=(($260)|0);
 HEAP32[(($st$41$0)>>2)]=$321$0;
 var $st$42$1=(($260+4)|0);
 HEAP32[(($st$42$1)>>2)]=$321$1;
 var $322=($_pre457|0)==($_pre458|0);
 if($322){label=74;break;}else{label=71;break;}
 case 71: 
 var $324=($_pre457|0)==0;
 if($324){label=73;break;}else{label=72;break;}
 case 72: 
 var $326=$_pre457;
 assert(16 % 1 === 0);HEAP32[(($326)>>2)]=HEAP32[(($263)>>2)];HEAP32[((($326)+(4))>>2)]=HEAP32[((($263)+(4))>>2)];HEAP32[((($326)+(8))>>2)]=HEAP32[((($263)+(8))>>2)];HEAP32[((($326)+(12))>>2)]=HEAP32[((($263)+(12))>>2)];
 label=73;break;
 case 73: 
 var $327=(($_pre457+16)|0);
 HEAP32[(($255)>>2)]=$327;
 label=75;break;
 case 74: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($p,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=96;break; }
 case 75: 
 var $329=HEAP32[(($261)>>2)];
 var $330=HEAP32[(($262)>>2)];
 var $331=($329|0)==($330|0);
 if($331){label=90;break;}else{label=76;break;}
 case 76: 
 var $333=($329|0)==0;
 if($333){label=89;break;}else{label=77;break;}
 case 77: 
 var $335=(($329)|0);
 HEAP32[(($335)>>2)]=0;
 var $336=(($329+4)|0);
 HEAP32[(($336)>>2)]=0;
 var $337=(($329+8)|0);
 HEAP32[(($337)>>2)]=0;
 var $338=HEAP32[(($255)>>2)];
 var $339=HEAP32[(($254)>>2)];
 var $340=$338;
 var $341=$339;
 var $342=((($340)-($341))|0);
 var $343=$342>>4;
 var $344=($343|0)==0;
 if($344){label=89;break;}else{label=78;break;}
 case 78: 
 var $346=($343>>>0)>268435455;
 if($346){label=79;break;}else{label=80;break;}
 case 79: 
 var $348=$329;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($348) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=85;break; }
 case 80: 
 var $349=(function() { try { __THREW__ = 0; return __Znwj($342) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=85;break; }
 case 81: 
 var $351=$349;
 HEAP32[(($336)>>2)]=$351;
 HEAP32[(($335)>>2)]=$351;
 var $352=(($351+($343<<4))|0);
 HEAP32[(($337)>>2)]=$352;
 var $353=HEAP32[(($254)>>2)];
 var $354=HEAP32[(($255)>>2)];
 var $355=($353|0)==($354|0);
 if($355){label=89;break;}else{var $_011_i_i_i=$353;var $356=$351;label=82;break;}
 case 82: 
 var $356;
 var $_011_i_i_i;
 var $357=($356|0)==0;
 if($357){var $361=0;label=84;break;}else{label=83;break;}
 case 83: 
 var $359=$356;
 var $360=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($359)>>2)]=HEAP32[(($360)>>2)];HEAP32[((($359)+(4))>>2)]=HEAP32[((($360)+(4))>>2)];HEAP32[((($359)+(8))>>2)]=HEAP32[((($360)+(8))>>2)];HEAP32[((($359)+(12))>>2)]=HEAP32[((($360)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($336)>>2)];
 var $361=$_pre12_i_i_i;label=84;break;
 case 84: 
 var $361;
 var $362=(($361+16)|0);
 HEAP32[(($336)>>2)]=$362;
 var $363=(($_011_i_i_i+16)|0);
 var $364=($363|0)==($354|0);
 if($364){label=89;break;}else{var $_011_i_i_i=$363;var $356=$362;label=82;break;}
 case 85: 
 var $366$0 = ___cxa_find_matching_catch(-1, -1); var $366$1 = tempRet0;
 var $367=HEAP32[(($335)>>2)];
 var $368=$367;
 var $369=($367|0)==0;
 if($369){var $eh_lpad_body317$1=$366$1;var $eh_lpad_body317$0=$366$0;label=97;break;}else{label=86;break;}
 case 86: 
 var $370=HEAP32[(($336)>>2)];
 var $371=($367|0)==($370|0);
 if($371){label=88;break;}else{label=87;break;}
 case 87: 
 var $scevgep_i_i_i311=((($370)-(16))|0);
 var $scevgep28_i_i_i312=$scevgep_i_i_i311;
 var $372=(((-$368))|0);
 var $uglygep_i_i_i313=(($scevgep28_i_i_i312+$372)|0);
 var $uglygep29_i_i_i314=$uglygep_i_i_i313;
 var $373=$uglygep29_i_i_i314>>>4;
 var $374=$373^-1;
 var $scevgep30_i_i_i315=(($370+($374<<4))|0);
 HEAP32[(($336)>>2)]=$scevgep30_i_i_i315;
 label=88;break;
 case 88: 
 var $375=$367;
 __ZdlPv($375);
 var $eh_lpad_body317$1=$366$1;var $eh_lpad_body317$0=$366$0;label=97;break;
 case 89: 
 var $376=HEAP32[(($261)>>2)];
 var $377=(($376+12)|0);
 HEAP32[(($261)>>2)]=$377;
 label=91;break;
 case 90: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($result,$p) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=96;break; }
 case 91: 
 var $379=HEAP32[(($254)>>2)];
 var $380=$379;
 var $381=($379|0)==0;
 if($381){label=95;break;}else{label=92;break;}
 case 92: 
 var $382=HEAP32[(($255)>>2)];
 var $383=($379|0)==($382|0);
 if($383){label=94;break;}else{label=93;break;}
 case 93: 
 var $scevgep_i_i_i319=((($382)-(16))|0);
 var $scevgep28_i_i_i320=$scevgep_i_i_i319;
 var $384=(((-$380))|0);
 var $uglygep_i_i_i321=(($scevgep28_i_i_i320+$384)|0);
 var $uglygep29_i_i_i322=$uglygep_i_i_i321;
 var $385=$uglygep29_i_i_i322>>>4;
 var $386=$385^-1;
 var $scevgep30_i_i_i323=(($382+($386<<4))|0);
 HEAP32[(($255)>>2)]=$scevgep30_i_i_i323;
 label=94;break;
 case 94: 
 var $387=$379;
 __ZdlPv($387);
 label=95;break;
 case 95: 
 var $388=((($i4_0414)+(2))|0);
 var $389=$388|1;
 var $390=HEAP32[(($96)>>2)];
 var $391=(($390+((($idx2_0419)*(12))&-1)+4)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=(($390+((($idx2_0419)*(12))&-1))|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$392;
 var $396=$394;
 var $397=((($395)-($396))|0);
 var $398=$397>>3;
 var $399=($389>>>0)<($398>>>0);
 if($399){var $i4_0414=$388;var $291=$389;var $290=$394;var $289=$390;label=68;break;}else{var $413=$390;label=101;break;}
 case 96: 
 var $401$0 = ___cxa_find_matching_catch(-1, -1); var $401$1 = tempRet0;
 var $eh_lpad_body317$1=$401$1;var $eh_lpad_body317$0=$401$0;label=97;break;
 case 97: 
 var $eh_lpad_body317$0;
 var $eh_lpad_body317$1;
 var $402=$eh_lpad_body317$0;
 var $403=$eh_lpad_body317$1;
 var $404=HEAP32[(($254)>>2)];
 var $405=$404;
 var $406=($404|0)==0;
 if($406){var $_0=$402;var $_0259=$403;label=121;break;}else{label=98;break;}
 case 98: 
 var $407=HEAP32[(($255)>>2)];
 var $408=($404|0)==($407|0);
 if($408){label=100;break;}else{label=99;break;}
 case 99: 
 var $scevgep_i_i_i327=((($407)-(16))|0);
 var $scevgep28_i_i_i328=$scevgep_i_i_i327;
 var $409=(((-$405))|0);
 var $uglygep_i_i_i329=(($scevgep28_i_i_i328+$409)|0);
 var $uglygep29_i_i_i330=$uglygep_i_i_i329;
 var $410=$uglygep29_i_i_i330>>>4;
 var $411=$410^-1;
 var $scevgep30_i_i_i331=(($407+($411<<4))|0);
 HEAP32[(($255)>>2)]=$scevgep30_i_i_i331;
 label=100;break;
 case 100: 
 var $412=$404;
 __ZdlPv($412);
 var $_0=$402;var $_0259=$403;label=121;break;
 case 101: 
 var $413;
 var $414=((($idx2_0419)+(1))|0);
 var $415$0=_i64Add($x3_0421$0,$x3_0421$1,$84$0,$84$1);var $415$1=tempRet0;
 var $416=(($415$1|0) < ($89$1|0)) | (((($415$1|0) == ($89$1|0) & ($415$0>>>0) <  ($89$0>>>0))));
 if($416){var $idx2_0419=$414;var $x3_0421$1=$415$1;var $x3_0421$0=$415$0;var $265=$413;label=65;break;}else{var $_lcssa415=$413;label=102;break;}
 case 102: 
 var $_lcssa415;
 var $417=($_lcssa415|0)==0;
 if($417){label=111;break;}else{label=103;break;}
 case 103: 
 var $418=HEAP32[(($97)>>2)];
 var $419=($_lcssa415|0)==($418|0);
 if($419){var $435=$_lcssa415;label=110;break;}else{var $420=$418;label=104;break;}
 case 104: 
 var $420;
 var $421=((($420)-(12))|0);
 HEAP32[(($97)>>2)]=$421;
 var $422=(($421)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=$423;
 var $425=($423|0)==0;
 if($425){var $426=$421;label=105;break;}else{label=106;break;}
 case 105: 
 var $426;
 var $427=($_lcssa415|0)==($426|0);
 if($427){label=109;break;}else{var $420=$426;label=104;break;}
 case 106: 
 var $428=((($420)-(12)+4)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=($423|0)==($429|0);
 if($430){label=108;break;}else{label=107;break;}
 case 107: 
 var $scevgep_i_i_i_i_i_i337=((($429)-(8))|0);
 var $scevgep28_i_i_i_i_i_i338=$scevgep_i_i_i_i_i_i337;
 var $431=(((-$424))|0);
 var $uglygep_i_i_i_i_i_i339=(($scevgep28_i_i_i_i_i_i338+$431)|0);
 var $uglygep29_i_i_i_i_i_i340=$uglygep_i_i_i_i_i_i339;
 var $432=$uglygep29_i_i_i_i_i_i340>>>3;
 var $433=$432^-1;
 var $scevgep30_i_i_i_i_i_i341=(($429+($433<<3))|0);
 HEAP32[(($428)>>2)]=$scevgep30_i_i_i_i_i_i341;
 label=108;break;
 case 108: 
 var $434=$423;
 __ZdlPv($434);
 var $_pre29_i_i_i343=HEAP32[(($97)>>2)];
 var $426=$_pre29_i_i_i343;label=105;break;
 case 109: 
 var $_pre_i_i_i344=HEAP32[(($96)>>2)];
 var $435=$_pre_i_i_i344;label=110;break;
 case 110: 
 var $435;
 var $436=$435;
 __ZdlPv($436);
 label=111;break;
 case 111: 
 var $437=HEAP32[(($6)>>2)];
 var $438=($437|0)==0;
 if($438){label=120;break;}else{label=112;break;}
 case 112: 
 var $439=HEAP32[(($7)>>2)];
 var $440=($437|0)==($439|0);
 if($440){var $456=$437;label=119;break;}else{var $441=$439;label=113;break;}
 case 113: 
 var $441;
 var $442=((($441)-(12))|0);
 HEAP32[(($7)>>2)]=$442;
 var $443=(($442)|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=$444;
 var $446=($444|0)==0;
 if($446){var $447=$442;label=114;break;}else{label=115;break;}
 case 114: 
 var $447;
 var $448=($437|0)==($447|0);
 if($448){label=118;break;}else{var $441=$447;label=113;break;}
 case 115: 
 var $449=((($441)-(12)+4)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=($444|0)==($450|0);
 if($451){label=117;break;}else{label=116;break;}
 case 116: 
 var $scevgep_i_i_i_i_i_i349=((($450)-(16))|0);
 var $scevgep28_i_i_i_i_i_i350=$scevgep_i_i_i_i_i_i349;
 var $452=(((-$445))|0);
 var $uglygep_i_i_i_i_i_i351=(($scevgep28_i_i_i_i_i_i350+$452)|0);
 var $uglygep29_i_i_i_i_i_i352=$uglygep_i_i_i_i_i_i351;
 var $453=$uglygep29_i_i_i_i_i_i352>>>4;
 var $454=$453^-1;
 var $scevgep30_i_i_i_i_i_i353=(($450+($454<<4))|0);
 HEAP32[(($449)>>2)]=$scevgep30_i_i_i_i_i_i353;
 label=117;break;
 case 117: 
 var $455=$444;
 __ZdlPv($455);
 var $_pre29_i_i_i355=HEAP32[(($7)>>2)];
 var $447=$_pre29_i_i_i355;label=114;break;
 case 118: 
 var $_pre_i_i_i357=HEAP32[(($6)>>2)];
 var $456=$_pre_i_i_i357;label=119;break;
 case 119: 
 var $456;
 var $457=$456;
 __ZdlPv($457);
 label=120;break;
 case 120: 
 STACKTOP=sp;return;
 case 121: 
 var $_0259;
 var $_0;
 var $458=HEAP32[(($96)>>2)];
 var $459=($458|0)==0;
 if($459){var $_1=$_0;var $_1260=$_0259;label=130;break;}else{label=122;break;}
 case 122: 
 var $460=HEAP32[(($97)>>2)];
 var $461=($458|0)==($460|0);
 if($461){var $477=$458;label=129;break;}else{var $462=$460;label=123;break;}
 case 123: 
 var $462;
 var $463=((($462)-(12))|0);
 HEAP32[(($97)>>2)]=$463;
 var $464=(($463)|0);
 var $465=HEAP32[(($464)>>2)];
 var $466=$465;
 var $467=($465|0)==0;
 if($467){var $468=$463;label=124;break;}else{label=125;break;}
 case 124: 
 var $468;
 var $469=($458|0)==($468|0);
 if($469){label=128;break;}else{var $462=$468;label=123;break;}
 case 125: 
 var $470=((($462)-(12)+4)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=($465|0)==($471|0);
 if($472){label=127;break;}else{label=126;break;}
 case 126: 
 var $scevgep_i_i_i_i_i_i365=((($471)-(8))|0);
 var $scevgep28_i_i_i_i_i_i366=$scevgep_i_i_i_i_i_i365;
 var $473=(((-$466))|0);
 var $uglygep_i_i_i_i_i_i367=(($scevgep28_i_i_i_i_i_i366+$473)|0);
 var $uglygep29_i_i_i_i_i_i368=$uglygep_i_i_i_i_i_i367;
 var $474=$uglygep29_i_i_i_i_i_i368>>>3;
 var $475=$474^-1;
 var $scevgep30_i_i_i_i_i_i369=(($471+($475<<3))|0);
 HEAP32[(($470)>>2)]=$scevgep30_i_i_i_i_i_i369;
 label=127;break;
 case 127: 
 var $476=$465;
 __ZdlPv($476);
 var $_pre29_i_i_i371=HEAP32[(($97)>>2)];
 var $468=$_pre29_i_i_i371;label=124;break;
 case 128: 
 var $_pre_i_i_i373=HEAP32[(($96)>>2)];
 var $477=$_pre_i_i_i373;label=129;break;
 case 129: 
 var $477;
 var $478=$477;
 __ZdlPv($478);
 var $_1=$_0;var $_1260=$_0259;label=130;break;
 case 130: 
 var $_1260;
 var $_1;
 var $479=HEAP32[(($6)>>2)];
 var $480=($479|0)==0;
 if($480){label=139;break;}else{label=131;break;}
 case 131: 
 var $481=HEAP32[(($7)>>2)];
 var $482=($479|0)==($481|0);
 if($482){var $498=$479;label=138;break;}else{var $483=$481;label=132;break;}
 case 132: 
 var $483;
 var $484=((($483)-(12))|0);
 HEAP32[(($7)>>2)]=$484;
 var $485=(($484)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=$486;
 var $488=($486|0)==0;
 if($488){var $489=$484;label=133;break;}else{label=134;break;}
 case 133: 
 var $489;
 var $490=($479|0)==($489|0);
 if($490){label=137;break;}else{var $483=$489;label=132;break;}
 case 134: 
 var $491=((($483)-(12)+4)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($486|0)==($492|0);
 if($493){label=136;break;}else{label=135;break;}
 case 135: 
 var $scevgep_i_i_i_i_i_i381=((($492)-(16))|0);
 var $scevgep28_i_i_i_i_i_i382=$scevgep_i_i_i_i_i_i381;
 var $494=(((-$487))|0);
 var $uglygep_i_i_i_i_i_i383=(($scevgep28_i_i_i_i_i_i382+$494)|0);
 var $uglygep29_i_i_i_i_i_i384=$uglygep_i_i_i_i_i_i383;
 var $495=$uglygep29_i_i_i_i_i_i384>>>4;
 var $496=$495^-1;
 var $scevgep30_i_i_i_i_i_i385=(($492+($496<<4))|0);
 HEAP32[(($491)>>2)]=$scevgep30_i_i_i_i_i_i385;
 label=136;break;
 case 136: 
 var $497=$486;
 __ZdlPv($497);
 var $_pre29_i_i_i387=HEAP32[(($7)>>2)];
 var $489=$_pre29_i_i_i387;label=133;break;
 case 137: 
 var $_pre_i_i_i389=HEAP32[(($6)>>2)];
 var $498=$_pre_i_i_i389;label=138;break;
 case 138: 
 var $498;
 var $499=$498;
 __ZdlPv($499);
 label=139;break;
 case 139: 
 var $500$0=$_1;
 var $500$1=0;
 var $501$0=$500$0;
 var $501$1=$_1260;
 ___resumeException($501$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z11bridgeAngleP14SliceLayerPartP10SliceLayer($part,$prevLayer){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $bridgeClip=sp;
 var $islands=(sp)+(104);
 __ZN10ClipperLib7ClipperC1Ev($bridgeClip);
 var $1=$bridgeClip;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$bridgeClip;
 var $7=(($6+$5)|0);
 var $8=$7;
 var $9=(($part+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($8,$10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=9;break; }
 case 2: 
 var $12=(($prevLayer+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($prevLayer)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 if($16){label=14;break;}else{label=3;break;}
 case 3: 
 var $17=(($part+16)|0);
 var $18=(($part)|0);
 var $19=(($part+24)|0);
 var $20=(($part+8)|0);
 var $n_0128=0;var $22=$15;var $21=$13;label=4;break;
 case 4: 
 var $21;
 var $22;
 var $n_0128;
 var $ld$0$0=(($17)|0);
 var $23$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($17+4)|0);
 var $23$1=HEAP32[(($ld$1$1)>>2)];
 var $24=(($22+((($n_0128)*(96))&-1))|0);
 var $ld$2$0=(($24)|0);
 var $25$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($24+4)|0);
 var $25$1=HEAP32[(($ld$3$1)>>2)];
 var $26=(($23$1|0) < ($25$1|0)) | (((($23$1|0) == ($25$1|0) & ($23$0>>>0) <  ($25$0>>>0))));
 if($26){var $54=$21;var $53=$22;label=13;break;}else{label=5;break;}
 case 5: 
 var $ld$4$0=(($18)|0);
 var $28$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($18+4)|0);
 var $28$1=HEAP32[(($ld$5$1)>>2)];
 var $29=(($22+((($n_0128)*(96))&-1)+16)|0);
 var $ld$6$0=(($29)|0);
 var $30$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$7$1)>>2)];
 var $31=(($28$1|0) > ($30$1|0)) | (((($28$1|0) == ($30$1|0) & ($28$0>>>0) >  ($30$0>>>0))));
 if($31){var $54=$21;var $53=$22;label=13;break;}else{label=6;break;}
 case 6: 
 var $ld$8$0=(($19)|0);
 var $33$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($19+4)|0);
 var $33$1=HEAP32[(($ld$9$1)>>2)];
 var $34=(($22+((($n_0128)*(96))&-1)+8)|0);
 var $ld$10$0=(($34)|0);
 var $35$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$11$1)>>2)];
 var $36=(($33$1|0) < ($35$1|0)) | (((($33$1|0) == ($35$1|0) & ($33$0>>>0) <  ($35$0>>>0))));
 if($36){var $54=$21;var $53=$22;label=13;break;}else{label=7;break;}
 case 7: 
 var $ld$12$0=(($20)|0);
 var $37$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($20+4)|0);
 var $37$1=HEAP32[(($ld$13$1)>>2)];
 var $38=(($22+((($n_0128)*(96))&-1)+24)|0);
 var $ld$14$0=(($38)|0);
 var $39$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$15$1)>>2)];
 var $not__i=(($37$1|0) > ($39$1|0)) | (((($37$1|0) == ($39$1|0) & ($37$0>>>0) >  ($39$0>>>0))));
 if($not__i){var $54=$21;var $53=$22;label=13;break;}else{label=11;break;}
 case 8: 
 var $lpad_loopexit125$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit125$1 = tempRet0;
 var $lpad_phi127$1=$lpad_loopexit125$1;var $lpad_phi127$0=$lpad_loopexit125$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit126$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit126$1 = tempRet0;
 var $lpad_phi127$1=$lpad_nonloopexit126$1;var $lpad_phi127$0=$lpad_nonloopexit126$0;label=10;break;
 case 10: 
 var $lpad_phi127$0;
 var $lpad_phi127$1;
 var $41=$lpad_phi127$0;
 var $42=$lpad_phi127$1;
 var $_066=$42;var $_067=$41;label=60;break;
 case 11: 
 var $44=HEAP32[(($1)>>2)];
 var $45=((($44)-(12))|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($6+$47)|0);
 var $49=$48;
 var $50=(($22+((($n_0128)*(96))&-1)+32)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($49,$51,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=8;break; }
 case 12: 
 var $_pre135=HEAP32[(($12)>>2)];
 var $_pre136=HEAP32[(($14)>>2)];
 var $54=$_pre135;var $53=$_pre136;label=13;break;
 case 13: 
 var $53;
 var $54;
 var $55=((($n_0128)+(1))|0);
 var $56=$54;
 var $57=$53;
 var $58=((($56)-($57))|0);
 var $59=(((($58|0))/(96))&-1);
 var $60=($55>>>0)<($59>>>0);
 if($60){var $n_0128=$55;var $22=$53;var $21=$54;label=4;break;}else{label=14;break;}
 case 14: 
 var $61=(($islands)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($islands+4)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($islands+8)|0);
 HEAP32[(($63)>>2)]=0;
 var $64=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($bridgeClip,0,$islands,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 var $66=HEAP32[(($62)>>2)];
 var $67=HEAP32[(($61)>>2)];
 var $68=$66;
 var $69=$67;
 var $70=((($68)-($69))|0);
 var $71=(((($70|0))/(12))&-1);
 var $72=($71>>>0)>5;
 if($72){var $_0=-1;var $212=$67;label=50;break;}else{label=16;break;}
 case 16: 
 var $73=($66|0)==($67|0);
 if($73){var $idx1_0_lcssa=-1;var $idx2_0_lcssa=-1;var $118=$66;label=34;break;}else{var $area1_0115=0;var $area2_0116=0;var $idx1_0117=-1;var $idx2_0118=-1;var $n1_0119=0;var $98=$67;label=28;break;}
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $75=$lpad_phi$0;
 var $76=$lpad_phi$1;
 var $77=HEAP32[(($61)>>2)];
 var $78=($77|0)==0;
 if($78){var $_066=$76;var $_067=$75;label=60;break;}else{label=20;break;}
 case 20: 
 var $79=HEAP32[(($62)>>2)];
 var $80=($77|0)==($79|0);
 if($80){var $96=$77;label=27;break;}else{var $81=$79;label=21;break;}
 case 21: 
 var $81;
 var $82=((($81)-(12))|0);
 HEAP32[(($62)>>2)]=$82;
 var $83=(($82)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$84;
 var $86=($84|0)==0;
 if($86){var $87=$82;label=22;break;}else{label=23;break;}
 case 22: 
 var $87;
 var $88=($77|0)==($87|0);
 if($88){label=26;break;}else{var $81=$87;label=21;break;}
 case 23: 
 var $89=((($81)-(12)+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($84|0)==($90|0);
 if($91){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i_i_i_i75=((($90)-(16))|0);
 var $scevgep28_i_i_i_i_i_i76=$scevgep_i_i_i_i_i_i75;
 var $92=(((-$85))|0);
 var $uglygep_i_i_i_i_i_i77=(($scevgep28_i_i_i_i_i_i76+$92)|0);
 var $uglygep29_i_i_i_i_i_i78=$uglygep_i_i_i_i_i_i77;
 var $93=$uglygep29_i_i_i_i_i_i78>>>4;
 var $94=$93^-1;
 var $scevgep30_i_i_i_i_i_i79=(($90+($94<<4))|0);
 HEAP32[(($89)>>2)]=$scevgep30_i_i_i_i_i_i79;
 label=25;break;
 case 25: 
 var $95=$84;
 __ZdlPv($95);
 var $_pre29_i_i_i81=HEAP32[(($62)>>2)];
 var $87=$_pre29_i_i_i81;label=22;break;
 case 26: 
 var $_pre_i_i_i83=HEAP32[(($61)>>2)];
 var $96=$_pre_i_i_i83;label=27;break;
 case 27: 
 var $96;
 var $97=$96;
 __ZdlPv($97);
 var $_066=$76;var $_067=$75;label=60;break;
 case 28: 
 var $98;
 var $n1_0119;
 var $idx2_0118;
 var $idx1_0117;
 var $area2_0116;
 var $area1_0115;
 var $99=(($98+((($n1_0119)*(12))&-1))|0);
 var $100=(function() { try { __THREW__ = 0; return __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=17;break; }
 case 29: 
 var $102=Math_abs($100);
 var $103=$102>$area1_0115;
 if($103){label=30;break;}else{label=31;break;}
 case 30: 
 var $105=$area1_0115>$area2_0116;
 var $area2_1=$105?$area1_0115:$area2_0116;
 var $idx2_1=$105?$idx1_0117:$idx2_0118;
 var $idx2_2=$idx2_1;var $idx1_1=$n1_0119;var $area2_2=$area2_1;var $area1_1=$102;label=33;break;
 case 31: 
 var $107=$102>$area2_0116;
 if($107){label=32;break;}else{var $idx2_2=$idx2_0118;var $idx1_1=$idx1_0117;var $area2_2=$area2_0116;var $area1_1=$area1_0115;label=33;break;}
 case 32: 
 var $idx2_2=$n1_0119;var $idx1_1=$idx1_0117;var $area2_2=$102;var $area1_1=$area1_0115;label=33;break;
 case 33: 
 var $area1_1;
 var $area2_2;
 var $idx1_1;
 var $idx2_2;
 var $110=((($n1_0119)+(1))|0);
 var $111=HEAP32[(($62)>>2)];
 var $112=HEAP32[(($61)>>2)];
 var $113=$111;
 var $114=$112;
 var $115=((($113)-($114))|0);
 var $116=(((($115|0))/(12))&-1);
 var $117=($110>>>0)<($116>>>0);
 if($117){var $area1_0115=$area1_1;var $area2_0116=$area2_2;var $idx1_0117=$idx1_1;var $idx2_0118=$idx2_2;var $n1_0119=$110;var $98=$112;label=28;break;}else{var $idx1_0_lcssa=$idx1_1;var $idx2_0_lcssa=$idx2_2;var $118=$112;label=34;break;}
 case 34: 
 var $118;
 var $idx2_0_lcssa;
 var $idx1_0_lcssa;
 var $119=$idx2_0_lcssa|$idx1_0_lcssa;
 var $120=($119|0)<0;
 if($120){var $_0=-1;var $212=$118;label=50;break;}else{label=35;break;}
 case 35: 
 var $122=(($118+((($idx1_0_lcssa)*(12))&-1))|0);
 var $123=(($118+((($idx1_0_lcssa)*(12))&-1)+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($122)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$124;
 var $128=$126;
 var $129=((($127)-($128))|0);
 var $130=$129>>4;
 var $131=((($130)-(1))|0);
 var $132=($124|0)==($126|0);
 if($132){var $y_0_lcssa_i=0;var $x_0_lcssa_i=0;label=38;break;}else{label=36;break;}
 case 36: 
 var $p0_sroa_1_8__idx14_i=(($126+($131<<4)+8)|0);
 var $p0_sroa_0_0__idx_i=(($126+($131<<4))|0);
 var $ld$16$0=(($p0_sroa_1_8__idx14_i)|0);
 var $p0_sroa_1_8_copyload_i$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($p0_sroa_1_8__idx14_i+4)|0);
 var $p0_sroa_1_8_copyload_i$1=HEAP32[(($ld$17$1)>>2)];
 var $ld$18$0=(($p0_sroa_0_0__idx_i)|0);
 var $p0_sroa_0_0_copyload_i$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($p0_sroa_0_0__idx_i+4)|0);
 var $p0_sroa_0_0_copyload_i$1=HEAP32[(($ld$19$1)>>2)];
 var $n_031_i=0;var $p0_sroa_0_032_i$1=$p0_sroa_0_0_copyload_i$1;var $p0_sroa_0_032_i$0=$p0_sroa_0_0_copyload_i$0;var $p0_sroa_1_033_i$1=$p0_sroa_1_8_copyload_i$1;var $p0_sroa_1_033_i$0=$p0_sroa_1_8_copyload_i$0;var $y_034_i=0;var $x_035_i=0;label=37;break;
 case 37: 
 var $x_035_i;
 var $y_034_i;
 var $p0_sroa_1_033_i$0;
 var $p0_sroa_1_033_i$1;
 var $p0_sroa_0_032_i$0;
 var $p0_sroa_0_032_i$1;
 var $n_031_i;
 var $p1_sroa_0_0__idx4_i=(($126+($n_031_i<<4))|0);
 var $ld$20$0=(($p1_sroa_0_0__idx4_i)|0);
 var $p1_sroa_0_0_copyload5_i$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($p1_sroa_0_0__idx4_i+4)|0);
 var $p1_sroa_0_0_copyload5_i$1=HEAP32[(($ld$21$1)>>2)];
 var $p1_sroa_1_8__idx8_i=(($126+($n_031_i<<4)+8)|0);
 var $ld$22$0=(($p1_sroa_1_8__idx8_i)|0);
 var $p1_sroa_1_8_copyload9_i$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($p1_sroa_1_8__idx8_i+4)|0);
 var $p1_sroa_1_8_copyload9_i$1=HEAP32[(($ld$23$1)>>2)];
 var $134$0=___muldi3($p1_sroa_1_8_copyload9_i$0,$p1_sroa_1_8_copyload9_i$1,$p0_sroa_0_032_i$0,$p0_sroa_0_032_i$1);var $134$1=tempRet0;
 var $135$0=___muldi3($p1_sroa_0_0_copyload5_i$0,$p1_sroa_0_0_copyload5_i$1,$p0_sroa_1_033_i$0,$p0_sroa_1_033_i$1);var $135$1=tempRet0;
 var $136$0=_i64Subtract($134$0,$134$1,$135$0,$135$1);var $136$1=tempRet0;
 var $137=(($136$0>>>0)+(($136$1|0)*4294967296));
 var $138$0=_i64Add($p1_sroa_0_0_copyload5_i$0,$p1_sroa_0_0_copyload5_i$1,$p0_sroa_0_032_i$0,$p0_sroa_0_032_i$1);var $138$1=tempRet0;
 var $139=(($138$0>>>0)+(($138$1|0)*4294967296));
 var $140=($139)*($137);
 var $141=($x_035_i)+($140);
 var $142$0=_i64Add($p1_sroa_1_8_copyload9_i$0,$p1_sroa_1_8_copyload9_i$1,$p0_sroa_1_033_i$0,$p0_sroa_1_033_i$1);var $142$1=tempRet0;
 var $143=(($142$0>>>0)+(($142$1|0)*4294967296));
 var $144=($143)*($137);
 var $145=($y_034_i)+($144);
 var $146=((($n_031_i)+(1))|0);
 var $147=($146>>>0)<($130>>>0);
 if($147){var $n_031_i=$146;var $p0_sroa_0_032_i$1=$p1_sroa_0_0_copyload5_i$1;var $p0_sroa_0_032_i$0=$p1_sroa_0_0_copyload5_i$0;var $p0_sroa_1_033_i$1=$p1_sroa_1_8_copyload9_i$1;var $p0_sroa_1_033_i$0=$p1_sroa_1_8_copyload9_i$0;var $y_034_i=$145;var $x_035_i=$141;label=37;break;}else{var $y_0_lcssa_i=$145;var $x_0_lcssa_i=$141;label=38;break;}
 case 38: 
 var $x_0_lcssa_i;
 var $y_0_lcssa_i;
 var $148=(function() { try { __THREW__ = 0; return __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=18;break; }
 case 39: 
 var $149=($x_0_lcssa_i)/(6);
 var $150=($149)/($148);
 var $151=($y_0_lcssa_i)/(6);
 var $152=($151)/($148);
 var $153=$150<0;
 if($153){label=40;break;}else{var $x_1_i=$150;var $y_1_i=$152;label=41;break;}
 case 40: 
 var $155=((-.0))-($150);
 var $156=((-.0))-($152);
 var $x_1_i=$155;var $y_1_i=$156;label=41;break;
 case 41: 
 var $y_1_i;
 var $x_1_i;
 var $158$0=$x_1_i>>>0;var $158$1=(Math_abs($x_1_i) >= 1 ? ($x_1_i > 0 ? Math_min(Math_floor(($x_1_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($x_1_i - +(((~~($x_1_i)))>>>0))/4294967296)))>>>0) : 0);
 var $159$0=$y_1_i>>>0;var $159$1=(Math_abs($y_1_i) >= 1 ? ($y_1_i > 0 ? Math_min(Math_floor(($y_1_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($y_1_i - +(((~~($y_1_i)))>>>0))/4294967296)))>>>0) : 0);
 var $160=HEAP32[(($61)>>2)];
 var $161=(($160+((($idx2_0_lcssa)*(12))&-1))|0);
 var $162=(($160+((($idx2_0_lcssa)*(12))&-1)+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($161)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$163;
 var $167=$165;
 var $168=((($166)-($167))|0);
 var $169=$168>>4;
 var $170=((($169)-(1))|0);
 var $171=($163|0)==($165|0);
 if($171){var $y_0_lcssa_i102=0;var $x_0_lcssa_i101=0;label=44;break;}else{label=42;break;}
 case 42: 
 var $p0_sroa_1_8__idx14_i87=(($165+($170<<4)+8)|0);
 var $p0_sroa_0_0__idx_i88=(($165+($170<<4))|0);
 var $ld$24$0=(($p0_sroa_1_8__idx14_i87)|0);
 var $p0_sroa_1_8_copyload_i89$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($p0_sroa_1_8__idx14_i87+4)|0);
 var $p0_sroa_1_8_copyload_i89$1=HEAP32[(($ld$25$1)>>2)];
 var $ld$26$0=(($p0_sroa_0_0__idx_i88)|0);
 var $p0_sroa_0_0_copyload_i90$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($p0_sroa_0_0__idx_i88+4)|0);
 var $p0_sroa_0_0_copyload_i90$1=HEAP32[(($ld$27$1)>>2)];
 var $n_031_i96=0;var $p0_sroa_0_032_i95$1=$p0_sroa_0_0_copyload_i90$1;var $p0_sroa_0_032_i95$0=$p0_sroa_0_0_copyload_i90$0;var $p0_sroa_1_033_i94$1=$p0_sroa_1_8_copyload_i89$1;var $p0_sroa_1_033_i94$0=$p0_sroa_1_8_copyload_i89$0;var $y_034_i93=0;var $x_035_i92=0;label=43;break;
 case 43: 
 var $x_035_i92;
 var $y_034_i93;
 var $p0_sroa_1_033_i94$0;
 var $p0_sroa_1_033_i94$1;
 var $p0_sroa_0_032_i95$0;
 var $p0_sroa_0_032_i95$1;
 var $n_031_i96;
 var $p1_sroa_0_0__idx4_i97=(($165+($n_031_i96<<4))|0);
 var $ld$28$0=(($p1_sroa_0_0__idx4_i97)|0);
 var $p1_sroa_0_0_copyload5_i98$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($p1_sroa_0_0__idx4_i97+4)|0);
 var $p1_sroa_0_0_copyload5_i98$1=HEAP32[(($ld$29$1)>>2)];
 var $p1_sroa_1_8__idx8_i99=(($165+($n_031_i96<<4)+8)|0);
 var $ld$30$0=(($p1_sroa_1_8__idx8_i99)|0);
 var $p1_sroa_1_8_copyload9_i100$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($p1_sroa_1_8__idx8_i99+4)|0);
 var $p1_sroa_1_8_copyload9_i100$1=HEAP32[(($ld$31$1)>>2)];
 var $173$0=___muldi3($p1_sroa_1_8_copyload9_i100$0,$p1_sroa_1_8_copyload9_i100$1,$p0_sroa_0_032_i95$0,$p0_sroa_0_032_i95$1);var $173$1=tempRet0;
 var $174$0=___muldi3($p1_sroa_0_0_copyload5_i98$0,$p1_sroa_0_0_copyload5_i98$1,$p0_sroa_1_033_i94$0,$p0_sroa_1_033_i94$1);var $174$1=tempRet0;
 var $175$0=_i64Subtract($173$0,$173$1,$174$0,$174$1);var $175$1=tempRet0;
 var $176=(($175$0>>>0)+(($175$1|0)*4294967296));
 var $177$0=_i64Add($p1_sroa_0_0_copyload5_i98$0,$p1_sroa_0_0_copyload5_i98$1,$p0_sroa_0_032_i95$0,$p0_sroa_0_032_i95$1);var $177$1=tempRet0;
 var $178=(($177$0>>>0)+(($177$1|0)*4294967296));
 var $179=($178)*($176);
 var $180=($x_035_i92)+($179);
 var $181$0=_i64Add($p1_sroa_1_8_copyload9_i100$0,$p1_sroa_1_8_copyload9_i100$1,$p0_sroa_1_033_i94$0,$p0_sroa_1_033_i94$1);var $181$1=tempRet0;
 var $182=(($181$0>>>0)+(($181$1|0)*4294967296));
 var $183=($182)*($176);
 var $184=($y_034_i93)+($183);
 var $185=((($n_031_i96)+(1))|0);
 var $186=($185>>>0)<($169>>>0);
 if($186){var $n_031_i96=$185;var $p0_sroa_0_032_i95$1=$p1_sroa_0_0_copyload5_i98$1;var $p0_sroa_0_032_i95$0=$p1_sroa_0_0_copyload5_i98$0;var $p0_sroa_1_033_i94$1=$p1_sroa_1_8_copyload9_i100$1;var $p0_sroa_1_033_i94$0=$p1_sroa_1_8_copyload9_i100$0;var $y_034_i93=$184;var $x_035_i92=$180;label=43;break;}else{var $y_0_lcssa_i102=$184;var $x_0_lcssa_i101=$180;label=44;break;}
 case 44: 
 var $x_0_lcssa_i101;
 var $y_0_lcssa_i102;
 var $187=(function() { try { __THREW__ = 0; return __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=18;break; }
 case 45: 
 var $188=($x_0_lcssa_i101)/(6);
 var $189=($188)/($187);
 var $190=($y_0_lcssa_i102)/(6);
 var $191=($190)/($187);
 var $192=$189<0;
 if($192){label=46;break;}else{var $x_1_i105=$189;var $y_1_i104=$191;label=47;break;}
 case 46: 
 var $194=((-.0))-($189);
 var $195=((-.0))-($191);
 var $x_1_i105=$194;var $y_1_i104=$195;label=47;break;
 case 47: 
 var $y_1_i104;
 var $x_1_i105;
 var $197$0=$x_1_i105>>>0;var $197$1=(Math_abs($x_1_i105) >= 1 ? ($x_1_i105 > 0 ? Math_min(Math_floor(($x_1_i105)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($x_1_i105 - +(((~~($x_1_i105)))>>>0))/4294967296)))>>>0) : 0);
 var $198$0=$y_1_i104>>>0;var $198$1=(Math_abs($y_1_i104) >= 1 ? ($y_1_i104 > 0 ? Math_min(Math_floor(($y_1_i104)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($y_1_i104 - +(((~~($y_1_i104)))>>>0))/4294967296)))>>>0) : 0);
 var $199$0=_i64Subtract($197$0,$197$1,$158$0,$158$1);var $199$1=tempRet0;
 var $200=(($199$0>>>0)+(($199$1|0)*4294967296));
 var $201$0=_i64Subtract($198$0,$198$1,$159$0,$159$1);var $201$1=tempRet0;
 var $202=(($201$0>>>0)+(($201$1|0)*4294967296));
 var $203=Math_atan2($200,$202);
 var $204=($203)/((3.141592653589793));
 var $205=($204)*(180);
 var $206=$205<0;
 if($206){label=48;break;}else{var $angle_0=$205;label=49;break;}
 case 48: 
 var $208=($205)+(360);
 var $angle_0=$208;label=49;break;
 case 49: 
 var $angle_0;
 var $210=(($angle_0)&-1);
 var $_pre=HEAP32[(($61)>>2)];
 var $_0=$210;var $212=$_pre;label=50;break;
 case 50: 
 var $212;
 var $_0;
 var $213=($212|0)==0;
 if($213){label=59;break;}else{label=51;break;}
 case 51: 
 var $214=HEAP32[(($62)>>2)];
 var $215=($212|0)==($214|0);
 if($215){var $231=$212;label=58;break;}else{var $216=$214;label=52;break;}
 case 52: 
 var $216;
 var $217=((($216)-(12))|0);
 HEAP32[(($62)>>2)]=$217;
 var $218=(($217)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$219;
 var $221=($219|0)==0;
 if($221){var $222=$217;label=53;break;}else{label=54;break;}
 case 53: 
 var $222;
 var $223=($212|0)==($222|0);
 if($223){label=57;break;}else{var $216=$222;label=52;break;}
 case 54: 
 var $224=((($216)-(12)+4)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($219|0)==($225|0);
 if($226){label=56;break;}else{label=55;break;}
 case 55: 
 var $scevgep_i_i_i_i_i_i=((($225)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $227=(((-$220))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$227)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $228=$uglygep29_i_i_i_i_i_i>>>4;
 var $229=$228^-1;
 var $scevgep30_i_i_i_i_i_i=(($225+($229<<4))|0);
 HEAP32[(($224)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=56;break;
 case 56: 
 var $230=$219;
 __ZdlPv($230);
 var $_pre29_i_i_i=HEAP32[(($62)>>2)];
 var $222=$_pre29_i_i_i;label=53;break;
 case 57: 
 var $_pre_i_i_i=HEAP32[(($61)>>2)];
 var $231=$_pre_i_i_i;label=58;break;
 case 58: 
 var $231;
 var $232=$231;
 __ZdlPv($232);
 label=59;break;
 case 59: 
 __ZN10ClipperLib7ClipperD1Ev($bridgeClip);
 STACKTOP=sp;return $_0;
 case 60: 
 var $_067;
 var $_066;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($bridgeClip) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=62;break; }
 case 61: 
 var $234$0=$_067;
 var $234$1=0;
 var $235$0=$234$0;
 var $235$1=$_066;
 ___resumeException($235$0)
 case 62: 
 var $237$0 = ___cxa_find_matching_catch(-1, -1,0); var $237$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z16cmp_SupportPointPKvS0_($a,$b){
 var label=0;
 var $1=$a;
 var $2=HEAP32[(($1)>>2)];
 var $3=$b;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($2)-($4))|0);
 return $5;
}
function __Z19generateSupportGridR14SupportStorageP14OptimizedModel($storage,$om){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(($om+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5$0=$4;
 var $5$1=(((($4|0)<0))|0)?-1:0;
 var $6=(($storage)|0);
 var $st$0$0=(($6)|0);
 HEAP32[(($st$0$0)>>2)]=$5$0;
 var $st$1$1=(($6+4)|0);
 HEAP32[(($st$1$1)>>2)]=$5$1;
 var $7=(($om+28)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9$0=$8;
 var $9$1=(((($8|0)<0))|0)?-1:0;
 var $10=(($storage+8)|0);
 var $st$2$0=(($10)|0);
 HEAP32[(($st$2$0)>>2)]=$9$0;
 var $st$3$1=(($10+4)|0);
 HEAP32[(($st$3$1)>>2)]=$9$1;
 var $11=(($storage+16)|0);
 HEAP32[(($11)>>2)]=200;
 var $12=(($om+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(((($13|0))/(200))&-1);
 var $15=((($14)+(1))|0);
 var $16=(($storage+20)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($om+16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(((($18|0))/(200))&-1);
 var $20=((($19)+(1))|0);
 var $21=(($storage+24)|0);
 HEAP32[(($21)>>2)]=$20;
 var $22=(Math_imul($15,$20)|0);
 var $23$0=_llvm_umul_with_overflow_i32($22,12);
 var $23$1=tempRet0;
 var $24=$23$1;
 var $25=$23$0;
 var $26$0=_llvm_uadd_with_overflow_i32($25,4);
 var $26$1=tempRet0;
 var $27=$26$1;
 var $28=$24|$27;
 var $29=$26$0;
 var $30=$28?-1:$29;
 var $31=__Znaj($30);
 var $32=$31;
 HEAP32[(($32)>>2)]=$22;
 var $33=(($31+4)|0);
 var $34=$33;
 var $35=($22|0)==0;
 if($35){label=4;break;}else{label=2;break;}
 case 2: 
 var $37=(($34+((($22)*(12))&-1))|0);
 var $39=$34;label=3;break;
 case 3: 
 var $39;
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($39+4)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($39+8)|0);
 HEAP32[(($42)>>2)]=0;
 var $43=(($39+12)|0);
 var $44=($43|0)==($37|0);
 if($44){label=4;break;}else{var $39=$43;label=3;break;}
 case 4: 
 var $45=(($storage+28)|0);
 HEAP32[(($45)>>2)]=$34;
 var $46=(($om+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($om)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=8;break;}else{label=5;break;}
 case 5: 
 var $51=(($2)|0);
 var $52=(($2+8)|0);
 var $53=$2;
 var $54=(($1)|0);
 var $55=(($1+8)|0);
 var $56=$1;
 var $volumeIdx_0328=0;var $58=$49;var $57=$47;label=6;break;
 case 6: 
 var $57;
 var $58;
 var $volumeIdx_0328;
 var $59=(($58+((($volumeIdx_0328)*(28))&-1)+20)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($58+((($volumeIdx_0328)*(28))&-1)+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($60|0)==($62|0);
 if($63){var $274=$57;var $273=$58;label=34;break;}else{label=7;break;}
 case 7: 
 var $64=(($58+((($volumeIdx_0328)*(28))&-1)+4)|0);
 var $faceIdx_0325=0;var $67=$62;label=10;break;
 case 8: 
 var $65=HEAP32[(($16)>>2)];
 var $66=($65|0)>0;
 if($66){label=9;break;}else{label=38;break;}
 case 9: 
 var $_pre=HEAP32[(($21)>>2)];
 var $x7_0305=0;var $282=$_pre;var $281=$65;label=35;break;
 case 10: 
 var $67;
 var $faceIdx_0325;
 var $68=(($67+((($faceIdx_0325)*(24))&-1))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=HEAP32[(($64)>>2)];
 var $v0_sroa_0_0__idx244=(($70+((($69)*(24))&-1))|0);
 var $v0_sroa_0_0_copyload245=HEAP32[(($v0_sroa_0_0__idx244)>>2)];
 var $v0_sroa_1_4__idx254=(($70+((($69)*(24))&-1)+4)|0);
 var $v0_sroa_1_4_copyload255=HEAP32[(($v0_sroa_1_4__idx254)>>2)];
 var $v0_sroa_2_8__idx263=(($70+((($69)*(24))&-1)+8)|0);
 var $v0_sroa_2_8_copyload264=HEAP32[(($v0_sroa_2_8__idx263)>>2)];
 var $71=(($67+((($faceIdx_0325)*(24))&-1)+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $v1_sroa_0_0__idx202=(($70+((($72)*(24))&-1))|0);
 var $v1_sroa_0_0_copyload203=HEAP32[(($v1_sroa_0_0__idx202)>>2)];
 var $v1_sroa_1_4__idx216=(($70+((($72)*(24))&-1)+4)|0);
 var $v1_sroa_1_4_copyload217=HEAP32[(($v1_sroa_1_4__idx216)>>2)];
 var $v1_sroa_2_8__idx229=(($70+((($72)*(24))&-1)+8)|0);
 var $v1_sroa_2_8_copyload230=HEAP32[(($v1_sroa_2_8__idx229)>>2)];
 var $73=(($67+((($faceIdx_0325)*(24))&-1)+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $v2_sroa_0_0__idx167=(($70+((($74)*(24))&-1))|0);
 var $v2_sroa_0_0_copyload168=HEAP32[(($v2_sroa_0_0__idx167)>>2)];
 var $v2_sroa_1_4__idx176=(($70+((($74)*(24))&-1)+4)|0);
 var $v2_sroa_1_4_copyload177=HEAP32[(($v2_sroa_1_4__idx176)>>2)];
 var $v2_sroa_2_8__idx184=(($70+((($74)*(24))&-1)+8)|0);
 var $v2_sroa_2_8_copyload185=HEAP32[(($v2_sroa_2_8__idx184)>>2)];
 var $75=((($v1_sroa_0_0_copyload203)-($v0_sroa_0_0_copyload245))|0);
 var $76=((($v1_sroa_1_4_copyload217)-($v0_sroa_1_4_copyload255))|0);
 var $77=((($v1_sroa_2_8_copyload230)-($v0_sroa_2_8_copyload264))|0);
 var $78=((($v2_sroa_0_0_copyload168)-($v0_sroa_0_0_copyload245))|0);
 var $79=((($v2_sroa_1_4_copyload177)-($v0_sroa_1_4_copyload255))|0);
 var $80=((($v2_sroa_2_8_copyload185)-($v0_sroa_2_8_copyload264))|0);
 var $81=(Math_imul($80,$76)|0);
 var $82=(Math_imul($79,$77)|0);
 var $83=((($81)-($82))|0);
 var $84=(Math_imul($78,$77)|0);
 var $85=(Math_imul($80,$75)|0);
 var $86=((($84)-($85))|0);
 var $87=(Math_imul($79,$75)|0);
 var $88=(Math_imul($78,$76)|0);
 var $89=((($87)-($88))|0);
 var $90$0=$83;
 var $90$1=(((($83|0)<0))|0)?-1:0;
 var $91$0=___muldi3($90$0,$90$1,$90$0,$90$1);var $91$1=tempRet0;
 var $92$0=$86;
 var $92$1=(((($86|0)<0))|0)?-1:0;
 var $93$0=___muldi3($92$0,$92$1,$92$0,$92$1);var $93$1=tempRet0;
 var $94$0=$89;
 var $94$1=(((($89|0)<0))|0)?-1:0;
 var $95$0=___muldi3($94$0,$94$1,$94$0,$94$1);var $95$1=tempRet0;
 var $96$0=_i64Add($91$0,$91$1,$95$0,$95$1);var $96$1=tempRet0;
 var $97$0=_i64Add($96$0,$96$1,$93$0,$93$1);var $97$1=tempRet0;
 var $98=(($97$0>>>0)+(($97$1|0)*4294967296));
 var $99=Math_sqrt($98);
 var $100=(($99)&-1);
 var $101=($89|0);
 var $102=($100|0);
 var $103=($101)/($102);
 var $104=Math_abs($103);
 var $105$0=$v0_sroa_0_0_copyload245;
 var $105$1=(((($v0_sroa_0_0_copyload245|0)<0))|0)?-1:0;
 var $ld$4$0=(($6)|0);
 var $106$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($6+4)|0);
 var $106$1=HEAP32[(($ld$5$1)>>2)];
 var $107$0=_i64Subtract($105$0,$105$1,$106$0,$106$1);var $107$1=tempRet0;
 var $108=HEAP32[(($11)>>2)];
 var $109$0=$108;
 var $109$1=(((($108|0)<0))|0)?-1:0;
 var $110$0=___divdi3($107$0,$107$1,$109$0,$109$1);var $110$1=tempRet0;
 var $111$0=$110$0;
 var $111=$111$0;
 var $112$0=$v0_sroa_1_4_copyload255;
 var $112$1=(((($v0_sroa_1_4_copyload255|0)<0))|0)?-1:0;
 var $ld$6$0=(($10)|0);
 var $113$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($10+4)|0);
 var $113$1=HEAP32[(($ld$7$1)>>2)];
 var $114$0=_i64Subtract($112$0,$112$1,$113$0,$113$1);var $114$1=tempRet0;
 var $115$0=___divdi3($114$0,$114$1,$109$0,$109$1);var $115$1=tempRet0;
 var $116$0=$115$0;
 var $116=$116$0;
 var $117$0=$v1_sroa_0_0_copyload203;
 var $117$1=(((($v1_sroa_0_0_copyload203|0)<0))|0)?-1:0;
 var $118$0=_i64Subtract($117$0,$117$1,$106$0,$106$1);var $118$1=tempRet0;
 var $119$0=___divdi3($118$0,$118$1,$109$0,$109$1);var $119$1=tempRet0;
 var $120$0=$119$0;
 var $120=$120$0;
 var $121$0=$v1_sroa_1_4_copyload217;
 var $121$1=(((($v1_sroa_1_4_copyload217|0)<0))|0)?-1:0;
 var $122$0=_i64Subtract($121$0,$121$1,$113$0,$113$1);var $122$1=tempRet0;
 var $123$0=___divdi3($122$0,$122$1,$109$0,$109$1);var $123$1=tempRet0;
 var $124$0=$123$0;
 var $124=$124$0;
 var $125$0=$v2_sroa_0_0_copyload168;
 var $125$1=(((($v2_sroa_0_0_copyload168|0)<0))|0)?-1:0;
 var $126$0=_i64Subtract($125$0,$125$1,$106$0,$106$1);var $126$1=tempRet0;
 var $127$0=___divdi3($126$0,$126$1,$109$0,$109$1);var $127$1=tempRet0;
 var $128$0=$127$0;
 var $128=$128$0;
 var $129$0=$v2_sroa_1_4_copyload177;
 var $129$1=(((($v2_sroa_1_4_copyload177|0)<0))|0)?-1:0;
 var $130$0=_i64Subtract($129$0,$129$1,$113$0,$113$1);var $130$1=tempRet0;
 var $131$0=___divdi3($130$0,$130$1,$109$0,$109$1);var $131$1=tempRet0;
 var $132$0=$131$0;
 var $132=$132$0;
 var $133=($111|0)>($120|0);
 var $v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264=$133?$v1_sroa_2_8_copyload230:$v0_sroa_2_8_copyload264;
 var $_=$133?$124:$116;
 var $_292=$133?$120:$111;
 var $v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230=$133?$v0_sroa_2_8_copyload264:$v1_sroa_2_8_copyload230;
 var $_293=$133?$116:$124;
 var $_294=$133?$111:$120;
 var $134=($_294|0)>($128|0);
 var $v2_sroa_2_8_copyload185_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230=$134?$v2_sroa_2_8_copyload185:$v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230;
 var $__293=$134?$132:$_293;
 var $__294=$134?$128:$_294;
 var $v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230_v2_sroa_2_8_copyload185=$134?$v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230:$v2_sroa_2_8_copyload185;
 var $_293_=$134?$_293:$132;
 var $_294_=$134?$_294:$128;
 var $135=($_292|0)>($__294|0);
 var $v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264=$135?$v2_sroa_2_8_copyload185_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230:$v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264;
 var $v1_sroa_1_4_copyload217281__=$135?$__293:$_;
 var $v1_sroa_0_0_copyload203278__292=$135?$__294:$_292;
 var $v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230284=$135?$v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264:$v2_sroa_2_8_copyload185_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230;
 var $__v1_sroa_1_4_copyload217281=$135?$_:$__293;
 var $_292_v1_sroa_0_0_copyload203278=$135?$_292:$__294;
 var $136$0=$v1_sroa_0_0_copyload203278__292;
 var $136$1=(((($v1_sroa_0_0_copyload203278__292|0)<0))|0)?-1:0;
 var $137$0=$_292_v1_sroa_0_0_copyload203278;
 var $137$1=(((($_292_v1_sroa_0_0_copyload203278|0)<0))|0)?-1:0;
 var $138=($v1_sroa_0_0_copyload203278__292|0)<($_292_v1_sroa_0_0_copyload203278|0);
 if($138){label=11;break;}else{label=21;break;}
 case 11: 
 var $139$0=$v1_sroa_1_4_copyload217281__;
 var $139$1=(((($v1_sroa_1_4_copyload217281__|0)<0))|0)?-1:0;
 var $140=((($__v1_sroa_1_4_copyload217281)-($v1_sroa_1_4_copyload217281__))|0);
 var $141$0=$140;
 var $141$1=(((($140|0)<0))|0)?-1:0;
 var $142=((($_292_v1_sroa_0_0_copyload203278)-($v1_sroa_0_0_copyload203278__292))|0);
 var $143$0=$142;
 var $143$1=(((($142|0)<0))|0)?-1:0;
 var $144=((($_293_)-($v1_sroa_1_4_copyload217281__))|0);
 var $145$0=$144;
 var $145$1=(((($144|0)<0))|0)?-1:0;
 var $146=((($_294_)-($v1_sroa_0_0_copyload203278__292))|0);
 var $147$0=$146;
 var $147$1=(((($146|0)<0))|0)?-1:0;
 var $148$0=$v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264;
 var $148$1=(((($v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264|0)<0))|0)?-1:0;
 var $149=((($v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230284)-($v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264))|0);
 var $150$0=$149;
 var $150$1=(((($149|0)<0))|0)?-1:0;
 var $151=((($v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230_v2_sroa_2_8_copyload185)-($v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264))|0);
 var $152$0=$151;
 var $152$1=(((($151|0)<0))|0)?-1:0;
 var $x_0312$1=$136$1;var $x_0312$0=$136$0;label=12;break;
 case 12: 
 var $x_0312$0;
 var $x_0312$1;
 var $154$0=_i64Subtract($x_0312$0,$x_0312$1,$136$0,$136$1);var $154$1=tempRet0;
 var $155$0=___muldi3($154$0,$154$1,$141$0,$141$1);var $155$1=tempRet0;
 var $156$0=___divdi3($155$0,$155$1,$143$0,$143$1);var $156$1=tempRet0;
 var $157$0=_i64Add($156$0,$156$1,$139$0,$139$1);var $157$1=tempRet0;
 var $158$0=___muldi3($154$0,$154$1,$145$0,$145$1);var $158$1=tempRet0;
 var $159$0=___divdi3($158$0,$158$1,$147$0,$147$1);var $159$1=tempRet0;
 var $160$0=_i64Add($159$0,$159$1,$139$0,$139$1);var $160$1=tempRet0;
 var $161$0=___muldi3($154$0,$154$1,$150$0,$150$1);var $161$1=tempRet0;
 var $162$0=___divdi3($161$0,$161$1,$143$0,$143$1);var $162$1=tempRet0;
 var $163$0=_i64Add($162$0,$162$1,$148$0,$148$1);var $163$1=tempRet0;
 var $164$0=___muldi3($154$0,$154$1,$152$0,$152$1);var $164$1=tempRet0;
 var $165$0=___divdi3($164$0,$164$1,$147$0,$147$1);var $165$1=tempRet0;
 var $166$0=_i64Add($165$0,$165$1,$148$0,$148$1);var $166$1=tempRet0;
 var $167=(($157$1|0) > ($160$1|0)) | (((($157$1|0) == ($160$1|0) & ($157$0>>>0) >  ($160$0>>>0))));
 var $_295$0=$167?$160$0:$157$0;
 var $_295$1=$167?$160$1:$157$1;
 var $_296$0=$167?$157$0:$160$0;
 var $_296$1=$167?$157$1:$160$1;
 var $_297$0=$167?$166$0:$163$0;
 var $_297$1=$167?$166$1:$163$1;
 var $168=(($_295$1|0) < ($_296$1|0)) | (((($_295$1|0) == ($_296$1|0) & ($_295$0>>>0) <  ($_296$0>>>0))));
 if($168){label=13;break;}else{label=20;break;}
 case 13: 
 var $_298$0=$167?$163$0:$166$0;
 var $_298$1=$167?$163$1:$166$1;
 var $169$0=_i64Subtract($_298$0,$_298$1,$_297$0,$_297$1);var $169$1=tempRet0;
 var $170$0=_i64Subtract($_296$0,$_296$1,$_295$0,$_295$1);var $170$1=tempRet0;
 var $y_0308$1=$_295$1;var $y_0308$0=$_295$0;label=14;break;
 case 14: 
 var $y_0308$0;
 var $y_0308$1;
 var $171=HEAP32[(($16)>>2)];
 var $172$0=$171;
 var $172$1=(((($171|0)<0))|0)?-1:0;
 var $173$0=___muldi3($172$0,$172$1,$y_0308$0,$y_0308$1);var $173$1=tempRet0;
 var $174$0=_i64Add($173$0,$173$1,$x_0312$0,$x_0312$1);var $174$1=tempRet0;
 var $175$0=$174$0;
 var $175=$175$0;
 var $176=HEAP32[(($45)>>2)];
 var $177$0=_i64Subtract($y_0308$0,$y_0308$1,$_295$0,$_295$1);var $177$1=tempRet0;
 var $178$0=___muldi3($177$0,$177$1,$169$0,$169$1);var $178$1=tempRet0;
 var $179$0=___divdi3($178$0,$178$1,$170$0,$170$1);var $179$1=tempRet0;
 var $180$0=_i64Add($179$0,$179$1,$_297$0,$_297$1);var $180$1=tempRet0;
 var $181$0=$180$0;
 var $181=$181$0;
 HEAP32[(($54)>>2)]=$181;
 HEAPF64[(($55)>>3)]=$104;
 var $182=(($176+((($175)*(12))&-1)+4)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($176+((($175)*(12))&-1)+8)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=18;break;}else{label=15;break;}
 case 15: 
 var $188=($183|0)==0;
 if($188){var $191=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $190=$183;
 assert(16 % 1 === 0);HEAP32[(($190)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($190)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];HEAP32[((($190)+(8))>>2)]=HEAP32[((($56)+(8))>>2)];HEAP32[((($190)+(12))>>2)]=HEAP32[((($56)+(12))>>2)];
 var $_pre334=HEAP32[(($182)>>2)];
 var $191=$_pre334;label=17;break;
 case 17: 
 var $191;
 var $192=(($191+16)|0);
 HEAP32[(($182)>>2)]=$192;
 label=19;break;
 case 18: 
 var $194=(($176+((($175)*(12))&-1))|0);
 __ZNSt3__16vectorI12SupportPointNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($194,$1);
 label=19;break;
 case 19: 
 var $$etemp$8$0=1;
 var $$etemp$8$1=0;
 var $195$0=_i64Add($y_0308$0,$y_0308$1,$$etemp$8$0,$$etemp$8$1);var $195$1=tempRet0;
 var $196=(($195$1|0) < ($_296$1|0)) | (((($195$1|0) == ($_296$1|0) & ($195$0>>>0) <  ($_296$0>>>0))));
 if($196){var $y_0308$1=$195$1;var $y_0308$0=$195$0;label=14;break;}else{label=20;break;}
 case 20: 
 var $$etemp$9$0=1;
 var $$etemp$9$1=0;
 var $197$0=_i64Add($x_0312$0,$x_0312$1,$$etemp$9$0,$$etemp$9$1);var $197$1=tempRet0;
 var $198=(($197$1|0) < ($137$1|0)) | (((($197$1|0) == ($137$1|0) & ($197$0>>>0) <  ($137$0>>>0))));
 if($198){var $x_0312$1=$197$1;var $x_0312$0=$197$0;label=12;break;}else{label=21;break;}
 case 21: 
 var $199$0=$_294_;
 var $199$1=(((($_294_|0)<0))|0)?-1:0;
 var $200=($_292_v1_sroa_0_0_copyload203278|0)<($_294_|0);
 if($200){label=22;break;}else{label=32;break;}
 case 22: 
 var $201$0=$__v1_sroa_1_4_copyload217281;
 var $201$1=(((($__v1_sroa_1_4_copyload217281|0)<0))|0)?-1:0;
 var $202=((($_293_)-($__v1_sroa_1_4_copyload217281))|0);
 var $203$0=$202;
 var $203$1=(((($202|0)<0))|0)?-1:0;
 var $204=((($_294_)-($_292_v1_sroa_0_0_copyload203278))|0);
 var $205$0=$204;
 var $205$1=(((($204|0)<0))|0)?-1:0;
 var $206$0=$v1_sroa_1_4_copyload217281__;
 var $206$1=(((($v1_sroa_1_4_copyload217281__|0)<0))|0)?-1:0;
 var $207=((($_293_)-($v1_sroa_1_4_copyload217281__))|0);
 var $208$0=$207;
 var $208$1=(((($207|0)<0))|0)?-1:0;
 var $209=((($_294_)-($v1_sroa_0_0_copyload203278__292))|0);
 var $210$0=$209;
 var $210$1=(((($209|0)<0))|0)?-1:0;
 var $211$0=$v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230284;
 var $211$1=(((($v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230284|0)<0))|0)?-1:0;
 var $212=((($v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230_v2_sroa_2_8_copyload185)-($v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230284))|0);
 var $213$0=$212;
 var $213$1=(((($212|0)<0))|0)?-1:0;
 var $214$0=$v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264;
 var $214$1=(((($v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264|0)<0))|0)?-1:0;
 var $215=((($v0_sroa_2_8_copyload264_v1_sroa_2_8_copyload230_v2_sroa_2_8_copyload185)-($v1_sroa_2_8_copyload230284_v1_sroa_2_8_copyload230_v0_sroa_2_8_copyload264))|0);
 var $216$0=$215;
 var $216$1=(((($215|0)<0))|0)?-1:0;
 var $x1_0320$1=$137$1;var $x1_0320$0=$137$0;label=23;break;
 case 23: 
 var $x1_0320$0;
 var $x1_0320$1;
 var $218$0=_i64Subtract($x1_0320$0,$x1_0320$1,$137$0,$137$1);var $218$1=tempRet0;
 var $219$0=___muldi3($218$0,$218$1,$203$0,$203$1);var $219$1=tempRet0;
 var $220$0=___divdi3($219$0,$219$1,$205$0,$205$1);var $220$1=tempRet0;
 var $221$0=_i64Add($220$0,$220$1,$201$0,$201$1);var $221$1=tempRet0;
 var $222$0=_i64Subtract($x1_0320$0,$x1_0320$1,$136$0,$136$1);var $222$1=tempRet0;
 var $223$0=___muldi3($222$0,$222$1,$208$0,$208$1);var $223$1=tempRet0;
 var $224$0=___divdi3($223$0,$223$1,$210$0,$210$1);var $224$1=tempRet0;
 var $225$0=_i64Add($224$0,$224$1,$206$0,$206$1);var $225$1=tempRet0;
 var $226$0=___muldi3($218$0,$218$1,$213$0,$213$1);var $226$1=tempRet0;
 var $227$0=___divdi3($226$0,$226$1,$205$0,$205$1);var $227$1=tempRet0;
 var $228$0=_i64Add($227$0,$227$1,$211$0,$211$1);var $228$1=tempRet0;
 var $229$0=___muldi3($222$0,$222$1,$216$0,$216$1);var $229$1=tempRet0;
 var $230$0=___divdi3($229$0,$229$1,$210$0,$210$1);var $230$1=tempRet0;
 var $231$0=_i64Add($230$0,$230$1,$214$0,$214$1);var $231$1=tempRet0;
 var $232=(($221$1|0) > ($225$1|0)) | (((($221$1|0) == ($225$1|0) & ($221$0>>>0) >  ($225$0>>>0))));
 var $_299$0=$232?$225$0:$221$0;
 var $_299$1=$232?$225$1:$221$1;
 var $_300$0=$232?$221$0:$225$0;
 var $_300$1=$232?$221$1:$225$1;
 var $_301$0=$232?$231$0:$228$0;
 var $_301$1=$232?$231$1:$228$1;
 var $233=(($_299$1|0) < ($_300$1|0)) | (((($_299$1|0) == ($_300$1|0) & ($_299$0>>>0) <  ($_300$0>>>0))));
 if($233){label=24;break;}else{label=31;break;}
 case 24: 
 var $_302$0=$232?$228$0:$231$0;
 var $_302$1=$232?$228$1:$231$1;
 var $234$0=_i64Subtract($_302$0,$_302$1,$_301$0,$_301$1);var $234$1=tempRet0;
 var $235$0=_i64Subtract($_300$0,$_300$1,$_299$0,$_299$1);var $235$1=tempRet0;
 var $y6_0316$1=$_299$1;var $y6_0316$0=$_299$0;label=25;break;
 case 25: 
 var $y6_0316$0;
 var $y6_0316$1;
 var $236=HEAP32[(($16)>>2)];
 var $237$0=$236;
 var $237$1=(((($236|0)<0))|0)?-1:0;
 var $238$0=___muldi3($237$0,$237$1,$y6_0316$0,$y6_0316$1);var $238$1=tempRet0;
 var $239$0=_i64Add($238$0,$238$1,$x1_0320$0,$x1_0320$1);var $239$1=tempRet0;
 var $240$0=$239$0;
 var $240=$240$0;
 var $241=HEAP32[(($45)>>2)];
 var $242$0=_i64Subtract($y6_0316$0,$y6_0316$1,$_299$0,$_299$1);var $242$1=tempRet0;
 var $243$0=___muldi3($242$0,$242$1,$234$0,$234$1);var $243$1=tempRet0;
 var $244$0=___divdi3($243$0,$243$1,$235$0,$235$1);var $244$1=tempRet0;
 var $245$0=_i64Add($244$0,$244$1,$_301$0,$_301$1);var $245$1=tempRet0;
 var $246$0=$245$0;
 var $246=$246$0;
 HEAP32[(($51)>>2)]=$246;
 HEAPF64[(($52)>>3)]=$104;
 var $247=(($241+((($240)*(12))&-1)+4)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($241+((($240)*(12))&-1)+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=29;break;}else{label=26;break;}
 case 26: 
 var $253=($248|0)==0;
 if($253){var $256=0;label=28;break;}else{label=27;break;}
 case 27: 
 var $255=$248;
 assert(16 % 1 === 0);HEAP32[(($255)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($255)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($255)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];HEAP32[((($255)+(12))>>2)]=HEAP32[((($53)+(12))>>2)];
 var $_pre333=HEAP32[(($247)>>2)];
 var $256=$_pre333;label=28;break;
 case 28: 
 var $256;
 var $257=(($256+16)|0);
 HEAP32[(($247)>>2)]=$257;
 label=30;break;
 case 29: 
 var $259=(($241+((($240)*(12))&-1))|0);
 __ZNSt3__16vectorI12SupportPointNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($259,$2);
 label=30;break;
 case 30: 
 var $$etemp$10$0=1;
 var $$etemp$10$1=0;
 var $260$0=_i64Add($y6_0316$0,$y6_0316$1,$$etemp$10$0,$$etemp$10$1);var $260$1=tempRet0;
 var $261=(($260$1|0) < ($_300$1|0)) | (((($260$1|0) == ($_300$1|0) & ($260$0>>>0) <  ($_300$0>>>0))));
 if($261){var $y6_0316$1=$260$1;var $y6_0316$0=$260$0;label=25;break;}else{label=31;break;}
 case 31: 
 var $$etemp$11$0=1;
 var $$etemp$11$1=0;
 var $262$0=_i64Add($x1_0320$0,$x1_0320$1,$$etemp$11$0,$$etemp$11$1);var $262$1=tempRet0;
 var $263=(($262$1|0) < ($199$1|0)) | (((($262$1|0) == ($199$1|0) & ($262$0>>>0) <  ($199$0>>>0))));
 if($263){var $x1_0320$1=$262$1;var $x1_0320$0=$262$0;label=23;break;}else{label=32;break;}
 case 32: 
 var $264=((($faceIdx_0325)+(1))|0);
 var $265=HEAP32[(($59)>>2)];
 var $266=HEAP32[(($61)>>2)];
 var $267=$265;
 var $268=$266;
 var $269=((($267)-($268))|0);
 var $270=(((($269|0))/(24))&-1);
 var $271=($264>>>0)<($270>>>0);
 if($271){var $faceIdx_0325=$264;var $67=$266;label=10;break;}else{label=33;break;}
 case 33: 
 var $_pre331=HEAP32[(($46)>>2)];
 var $_pre332=HEAP32[(($48)>>2)];
 var $274=$_pre331;var $273=$_pre332;label=34;break;
 case 34: 
 var $273;
 var $274;
 var $275=((($volumeIdx_0328)+(1))|0);
 var $276=$274;
 var $277=$273;
 var $278=((($276)-($277))|0);
 var $279=(((($278|0))/(28))&-1);
 var $280=($275>>>0)<($279>>>0);
 if($280){var $volumeIdx_0328=$275;var $58=$273;var $57=$274;label=6;break;}else{label=8;break;}
 case 35: 
 var $281;
 var $282;
 var $x7_0305;
 var $283=($282|0)>0;
 if($283){var $y8_0303=0;var $284=$281;label=36;break;}else{var $301=$282;var $300=$281;label=37;break;}
 case 36: 
 var $284;
 var $y8_0303;
 var $285=(Math_imul($284,$y8_0303)|0);
 var $286=((($285)+($x7_0305))|0);
 var $287=HEAP32[(($45)>>2)];
 var $288=(($287+((($286)*(12))&-1))|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=$289;
 var $291=(($287+((($286)*(12))&-1)+4)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=$292;
 var $294=$289;
 var $295=((($293)-($294))|0);
 var $296=$295>>4;
 _qsort($290,$296,16,192);
 var $297=((($y8_0303)+(1))|0);
 var $298=HEAP32[(($21)>>2)];
 var $299=($297|0)<($298|0);
 var $_pre338=HEAP32[(($16)>>2)];
 if($299){var $y8_0303=$297;var $284=$_pre338;label=36;break;}else{var $301=$298;var $300=$_pre338;label=37;break;}
 case 37: 
 var $300;
 var $301;
 var $302=((($x7_0305)+(1))|0);
 var $303=($302|0)<($300|0);
 if($303){var $x7_0305=$302;var $282=$301;var $281=$300;label=35;break;}else{label=38;break;}
 case 38: 
 var $304=HEAP32[(($11)>>2)];
 var $305=(((($304|0))/(2))&-1);
 var $306$0=$305;
 var $306$1=(((($305|0)<0))|0)?-1:0;
 var $ld$12$0=(($6)|0);
 var $307$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($6+4)|0);
 var $307$1=HEAP32[(($ld$13$1)>>2)];
 var $308$0=_i64Add($307$0,$307$1,$306$0,$306$1);var $308$1=tempRet0;
 var $st$14$0=(($6)|0);
 HEAP32[(($st$14$0)>>2)]=$308$0;
 var $st$15$1=(($6+4)|0);
 HEAP32[(($st$15$1)>>2)]=$308$1;
 var $ld$16$0=(($10)|0);
 var $309$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($10+4)|0);
 var $309$1=HEAP32[(($ld$17$1)>>2)];
 var $310$0=_i64Add($309$0,$309$1,$306$0,$306$1);var $310$1=tempRet0;
 var $st$18$0=(($10)|0);
 HEAP32[(($st$18$0)>>2)]=$310$0;
 var $st$19$1=(($10+4)|0);
 HEAP32[(($st$19$1)>>2)]=$310$1;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z13generateSkirtR16SliceDataStorageiiii($storage,$distance,$extrusionWidth,$count,$minLength){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $skirtUnion=sp;
 var $skirt=(sp)+(104);
 var $skirtResult=(sp)+(120);
 var $1=($count|0)>0;
 if($1){label=2;break;}else{label=74;break;}
 case 2: 
 var $2=(($storage+64)|0);
 var $3=(($storage+60)|0);
 var $4=(($skirtResult)|0);
 var $5=(($skirtResult+4)|0);
 var $6=(($skirtResult+8)|0);
 var $7=(($storage+40)|0);
 var $8=(($storage+44)|0);
 var $9=(($storage+36)|0);
 var $10=(($skirt)|0);
 var $11=(($skirt+4)|0);
 var $12=(($skirt+8)|0);
 var $13=(((($extrusionWidth|0))/(2))&-1);
 var $14=$skirtUnion;
 var $15=$skirtUnion;
 var $length_0193=0;var $skirtNr_0194=0;var $_0195=$count;label=3;break;
 case 3: 
 var $_0195;
 var $skirtNr_0194;
 var $length_0193;
 __ZN10ClipperLib7ClipperC1Ev($skirtUnion);
 var $17=HEAP32[(($2)>>2)];
 var $18=HEAP32[(($3)>>2)];
 var $19=($17|0)==($18|0);
 if($19){label=30;break;}else{label=4;break;}
 case 4: 
 var $20=(Math_imul($skirtNr_0194,$extrusionWidth)|0);
 var $21=((($20)+($distance))|0);
 var $22=((($21)+($13))|0);
 var $23=($22|0);
 var $volumeIdx_0166=0;var $26=$18;var $25=$17;label=5;break;
 case 5: 
 var $25;
 var $26;
 var $volumeIdx_0166;
 var $27=(($26+((($volumeIdx_0166)*(12))&-1)+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($26+((($volumeIdx_0166)*(12))&-1))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($28|0)==($30|0);
 if($31){var $104=$25;var $103=$26;label=29;break;}else{label=6;break;}
 case 6: 
 var $32=(($30+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($30)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){var $104=$25;var $103=$26;label=29;break;}else{var $i_0165=0;label=7;break;}
 case 7: 
 var $i_0165;
 HEAP32[(($10)>>2)]=0;
 HEAP32[(($11)>>2)]=0;
 HEAP32[(($12)>>2)]=0;
 var $37=HEAP32[(($34)>>2)];
 var $38=(($37+((($i_0165)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($38,$skirt,$23,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=19;break; }
 case 8: 
 var $40=HEAP32[(($14)>>2)];
 var $41=((($40)-(12))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($15+$43)|0);
 var $45=$44;
 var $46=HEAP32[(($10)>>2)];
 var $47=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($45,$46,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=19;break; }
 case 9: 
 var $49=HEAP32[(($10)>>2)];
 var $50=($49|0)==0;
 if($50){label=18;break;}else{label=10;break;}
 case 10: 
 var $51=HEAP32[(($11)>>2)];
 var $52=($49|0)==($51|0);
 if($52){var $68=$49;label=17;break;}else{var $53=$51;label=11;break;}
 case 11: 
 var $53;
 var $54=((($53)-(12))|0);
 HEAP32[(($11)>>2)]=$54;
 var $55=(($54)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56;
 var $58=($56|0)==0;
 if($58){var $59=$54;label=12;break;}else{label=13;break;}
 case 12: 
 var $59;
 var $60=($49|0)==($59|0);
 if($60){label=16;break;}else{var $53=$59;label=11;break;}
 case 13: 
 var $61=((($53)-(12)+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($56|0)==($62|0);
 if($63){label=15;break;}else{label=14;break;}
 case 14: 
 var $scevgep_i_i_i_i_i_i=((($62)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $64=(((-$57))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$64)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $65=$uglygep29_i_i_i_i_i_i>>>4;
 var $66=$65^-1;
 var $scevgep30_i_i_i_i_i_i=(($62+($66<<4))|0);
 HEAP32[(($61)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=15;break;
 case 15: 
 var $67=$56;
 __ZdlPv($67);
 var $_pre29_i_i_i=HEAP32[(($11)>>2)];
 var $59=$_pre29_i_i_i;label=12;break;
 case 16: 
 var $_pre_i_i_i=HEAP32[(($10)>>2)];
 var $68=$_pre_i_i_i;label=17;break;
 case 17: 
 var $68;
 var $69=$68;
 __ZdlPv($69);
 label=18;break;
 case 18: 
 var $70=((($i_0165)+(1))|0);
 var $71=HEAP32[(($32)>>2)];
 var $72=HEAP32[(($34)>>2)];
 var $73=$71;
 var $74=$72;
 var $75=((($73)-($74))|0);
 var $76=(((($75|0))/(96))&-1);
 var $77=($70>>>0)<($76>>>0);
 if($77){var $i_0165=$70;label=7;break;}else{label=28;break;}
 case 19: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=$79$0;
 var $81=$79$1;
 var $82=HEAP32[(($10)>>2)];
 var $83=($82|0)==0;
 if($83){var $_0103=$81;var $_0104=$80;label=73;break;}else{label=20;break;}
 case 20: 
 var $84=HEAP32[(($11)>>2)];
 var $85=($82|0)==($84|0);
 if($85){var $101=$82;label=27;break;}else{var $86=$84;label=21;break;}
 case 21: 
 var $86;
 var $87=((($86)-(12))|0);
 HEAP32[(($11)>>2)]=$87;
 var $88=(($87)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$89;
 var $91=($89|0)==0;
 if($91){var $92=$87;label=22;break;}else{label=23;break;}
 case 22: 
 var $92;
 var $93=($82|0)==($92|0);
 if($93){label=26;break;}else{var $86=$92;label=21;break;}
 case 23: 
 var $94=((($86)-(12)+4)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($89|0)==($95|0);
 if($96){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i_i_i_i119=((($95)-(16))|0);
 var $scevgep28_i_i_i_i_i_i120=$scevgep_i_i_i_i_i_i119;
 var $97=(((-$90))|0);
 var $uglygep_i_i_i_i_i_i121=(($scevgep28_i_i_i_i_i_i120+$97)|0);
 var $uglygep29_i_i_i_i_i_i122=$uglygep_i_i_i_i_i_i121;
 var $98=$uglygep29_i_i_i_i_i_i122>>>4;
 var $99=$98^-1;
 var $scevgep30_i_i_i_i_i_i123=(($95+($99<<4))|0);
 HEAP32[(($94)>>2)]=$scevgep30_i_i_i_i_i_i123;
 label=25;break;
 case 25: 
 var $100=$89;
 __ZdlPv($100);
 var $_pre29_i_i_i125=HEAP32[(($11)>>2)];
 var $92=$_pre29_i_i_i125;label=22;break;
 case 26: 
 var $_pre_i_i_i127=HEAP32[(($10)>>2)];
 var $101=$_pre_i_i_i127;label=27;break;
 case 27: 
 var $101;
 var $102=$101;
 __ZdlPv($102);
 var $_0103=$81;var $_0104=$80;label=73;break;
 case 28: 
 var $_pre_pre=HEAP32[(($2)>>2)];
 var $_pre204_pre=HEAP32[(($3)>>2)];
 var $104=$_pre_pre;var $103=$_pre204_pre;label=29;break;
 case 29: 
 var $103;
 var $104;
 var $105=((($volumeIdx_0166)+(1))|0);
 var $106=$104;
 var $107=$103;
 var $108=((($106)-($107))|0);
 var $109=(((($108|0))/(12))&-1);
 var $110=($105>>>0)<($109>>>0);
 if($110){var $volumeIdx_0166=$105;var $26=$103;var $25=$104;label=5;break;}else{label=30;break;}
 case 30: 
 HEAP32[(($4)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($6)>>2)]=0;
 var $111=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($skirtUnion,1,$skirtResult,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=53;break; }
 case 31: 
 var $112=HEAP32[(($5)>>2)];
 var $113=HEAP32[(($4)>>2)];
 var $114=($112|0)==($113|0);
 if($114){var $length_1_lcssa=$length_0193;var $_lcssa173=$112;var $_lcssa176=$112;label=63;break;}else{var $length_1181=$length_0193;var $n_0182=0;var $115=$113;label=32;break;}
 case 32: 
 var $115;
 var $n_0182;
 var $length_1181;
 var $116=(($115+((($n_0182)*(12))&-1))|0);
 var $117=HEAP32[(($7)>>2)];
 var $118=HEAP32[(($8)>>2)];
 var $119=($117|0)==($118|0);
 if($119){label=47;break;}else{label=33;break;}
 case 33: 
 var $121=($117|0)==0;
 if($121){label=46;break;}else{label=34;break;}
 case 34: 
 var $123=(($117)|0);
 HEAP32[(($123)>>2)]=0;
 var $124=(($117+4)|0);
 HEAP32[(($124)>>2)]=0;
 var $125=(($117+8)|0);
 HEAP32[(($125)>>2)]=0;
 var $126=(($115+((($n_0182)*(12))&-1)+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($116)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=$127;
 var $131=$129;
 var $132=((($130)-($131))|0);
 var $133=$132>>4;
 var $134=($133|0)==0;
 if($134){label=46;break;}else{label=35;break;}
 case 35: 
 var $136=($133>>>0)>268435455;
 if($136){label=36;break;}else{label=37;break;}
 case 36: 
 var $138=$117;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=42;break; }
 case 37: 
 var $139=(function() { try { __THREW__ = 0; return __Znwj($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=42;break; }
 case 38: 
 var $141=$139;
 HEAP32[(($124)>>2)]=$141;
 HEAP32[(($123)>>2)]=$141;
 var $142=(($141+($133<<4))|0);
 HEAP32[(($125)>>2)]=$142;
 var $143=HEAP32[(($128)>>2)];
 var $144=HEAP32[(($126)>>2)];
 var $145=($143|0)==($144|0);
 if($145){label=46;break;}else{var $_011_i_i_i=$143;var $146=$141;label=39;break;}
 case 39: 
 var $146;
 var $_011_i_i_i;
 var $147=($146|0)==0;
 if($147){var $151=0;label=41;break;}else{label=40;break;}
 case 40: 
 var $149=$146;
 var $150=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($149)>>2)]=HEAP32[(($150)>>2)];HEAP32[((($149)+(4))>>2)]=HEAP32[((($150)+(4))>>2)];HEAP32[((($149)+(8))>>2)]=HEAP32[((($150)+(8))>>2)];HEAP32[((($149)+(12))>>2)]=HEAP32[((($150)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($124)>>2)];
 var $151=$_pre12_i_i_i;label=41;break;
 case 41: 
 var $151;
 var $152=(($151+16)|0);
 HEAP32[(($124)>>2)]=$152;
 var $153=(($_011_i_i_i+16)|0);
 var $154=($153|0)==($144|0);
 if($154){label=46;break;}else{var $_011_i_i_i=$153;var $146=$152;label=39;break;}
 case 42: 
 var $156$0 = ___cxa_find_matching_catch(-1, -1); var $156$1 = tempRet0;
 var $157=HEAP32[(($123)>>2)];
 var $158=$157;
 var $159=($157|0)==0;
 if($159){var $eh_lpad_body$1=$156$1;var $eh_lpad_body$0=$156$0;label=54;break;}else{label=43;break;}
 case 43: 
 var $160=HEAP32[(($124)>>2)];
 var $161=($157|0)==($160|0);
 if($161){label=45;break;}else{label=44;break;}
 case 44: 
 var $scevgep_i_i_i=((($160)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $162=(((-$158))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$162)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $163=$uglygep29_i_i_i>>>4;
 var $164=$163^-1;
 var $scevgep30_i_i_i=(($160+($164<<4))|0);
 HEAP32[(($124)>>2)]=$scevgep30_i_i_i;
 label=45;break;
 case 45: 
 var $165=$157;
 __ZdlPv($165);
 var $eh_lpad_body$1=$156$1;var $eh_lpad_body$0=$156$0;label=54;break;
 case 46: 
 var $166=HEAP32[(($7)>>2)];
 var $167=(($166+12)|0);
 HEAP32[(($7)>>2)]=$167;
 label=48;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($9,$116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=52;break; }
 case 48: 
 var $169=HEAP32[(($4)>>2)];
 var $_idx=(($169+((($n_0182)*(12))&-1))|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx114=(($169+((($n_0182)*(12))&-1)+4)|0);
 var $_idx114_val=HEAP32[(($_idx114)>>2)];
 var $170=$_idx114_val;
 var $171=$_idx_val;
 var $172=((($170)-($171))|0);
 var $173=$172>>4;
 var $174=((($173)-(1))|0);
 var $175=($173|0)==0;
 if($175){var $length_0_lcssa_i$1=0;var $length_0_lcssa_i$0=0;label=51;break;}else{label=49;break;}
 case 49: 
 var $p0_sroa_1_8__idx6_i=(($_idx_val+($174<<4)+8)|0);
 var $p0_sroa_0_0__idx_i=(($_idx_val+($174<<4))|0);
 var $ld$0$0=(($p0_sroa_1_8__idx6_i)|0);
 var $p0_sroa_1_8_copyload_i$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($p0_sroa_1_8__idx6_i+4)|0);
 var $p0_sroa_1_8_copyload_i$1=HEAP32[(($ld$1$1)>>2)];
 var $ld$2$0=(($p0_sroa_0_0__idx_i)|0);
 var $p0_sroa_0_0_copyload_i$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($p0_sroa_0_0__idx_i+4)|0);
 var $p0_sroa_0_0_copyload_i$1=HEAP32[(($ld$3$1)>>2)];
 var $p0_sroa_1_8_copyload89_i$1=$p0_sroa_1_8_copyload_i$1;var $p0_sroa_1_8_copyload89_i$0=$p0_sroa_1_8_copyload_i$0;var $p0_sroa_0_0_copyload710_i$1=$p0_sroa_0_0_copyload_i$1;var $p0_sroa_0_0_copyload710_i$0=$p0_sroa_0_0_copyload_i$0;var $length_011_i$1=0;var $length_011_i$0=0;var $n_012_i=0;label=50;break;
 case 50: 
 var $n_012_i;
 var $length_011_i$0;
 var $length_011_i$1;
 var $p0_sroa_0_0_copyload710_i$0;
 var $p0_sroa_0_0_copyload710_i$1;
 var $p0_sroa_1_8_copyload89_i$0;
 var $p0_sroa_1_8_copyload89_i$1;
 var $p1_sroa_0_0__idx1_i=(($_idx_val+($n_012_i<<4))|0);
 var $ld$4$0=(($p1_sroa_0_0__idx1_i)|0);
 var $p1_sroa_0_0_copyload2_i$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p1_sroa_0_0__idx1_i+4)|0);
 var $p1_sroa_0_0_copyload2_i$1=HEAP32[(($ld$5$1)>>2)];
 var $p1_sroa_1_8__idx4_i=(($_idx_val+($n_012_i<<4)+8)|0);
 var $ld$6$0=(($p1_sroa_1_8__idx4_i)|0);
 var $p1_sroa_1_8_copyload5_i$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p1_sroa_1_8__idx4_i+4)|0);
 var $p1_sroa_1_8_copyload5_i$1=HEAP32[(($ld$7$1)>>2)];
 var $177$0=_i64Subtract($p0_sroa_0_0_copyload710_i$0,$p0_sroa_0_0_copyload710_i$1,$p1_sroa_0_0_copyload2_i$0,$p1_sroa_0_0_copyload2_i$1);var $177$1=tempRet0;
 var $178$0=_i64Subtract($p0_sroa_1_8_copyload89_i$0,$p0_sroa_1_8_copyload89_i$1,$p1_sroa_1_8_copyload5_i$0,$p1_sroa_1_8_copyload5_i$1);var $178$1=tempRet0;
 var $179$0=___muldi3($177$0,$177$1,$177$0,$177$1);var $179$1=tempRet0;
 var $180$0=___muldi3($178$0,$178$1,$178$0,$178$1);var $180$1=tempRet0;
 var $181$0=_i64Add($180$0,$180$1,$179$0,$179$1);var $181$1=tempRet0;
 var $182=(($181$0>>>0)+(($181$1|0)*4294967296));
 var $183=Math_sqrt($182);
 var $184=(($183)&-1);
 var $185$0=$184;
 var $185$1=(((($184|0)<0))|0)?-1:0;
 var $186$0=_i64Add($185$0,$185$1,$length_011_i$0,$length_011_i$1);var $186$1=tempRet0;
 var $187=((($n_012_i)+(1))|0);
 var $188=($187>>>0)<($173>>>0);
 if($188){var $p0_sroa_1_8_copyload89_i$1=$p1_sroa_1_8_copyload5_i$1;var $p0_sroa_1_8_copyload89_i$0=$p1_sroa_1_8_copyload5_i$0;var $p0_sroa_0_0_copyload710_i$1=$p1_sroa_0_0_copyload2_i$1;var $p0_sroa_0_0_copyload710_i$0=$p1_sroa_0_0_copyload2_i$0;var $length_011_i$1=$186$1;var $length_011_i$0=$186$0;var $n_012_i=$187;label=50;break;}else{var $length_0_lcssa_i$1=$186$1;var $length_0_lcssa_i$0=$186$0;label=51;break;}
 case 51: 
 var $length_0_lcssa_i$0;
 var $length_0_lcssa_i$1;
 var $189$0=$length_1181;
 var $189$1=0;
 var $190$0=_i64Add($length_0_lcssa_i$0,$length_0_lcssa_i$1,$189$0,$189$1);var $190$1=tempRet0;
 var $191$0=$190$0;
 var $191=$191$0;
 var $192=((($n_0182)+(1))|0);
 var $193=HEAP32[(($5)>>2)];
 var $194=$193;
 var $195=$169;
 var $196=((($194)-($195))|0);
 var $197=(((($196|0))/(12))&-1);
 var $198=($192>>>0)<($197>>>0);
 if($198){var $length_1181=$191;var $n_0182=$192;var $115=$169;label=32;break;}else{var $length_1_lcssa=$191;var $_lcssa173=$193;var $_lcssa176=$169;label=63;break;}
 case 52: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=54;break;
 case 53: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=54;break;
 case 54: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $199=$eh_lpad_body$0;
 var $200=$eh_lpad_body$1;
 var $201=HEAP32[(($4)>>2)];
 var $202=($201|0)==0;
 if($202){var $_0103=$200;var $_0104=$199;label=73;break;}else{label=55;break;}
 case 55: 
 var $203=HEAP32[(($5)>>2)];
 var $204=($201|0)==($203|0);
 if($204){var $220=$201;label=62;break;}else{var $205=$203;label=56;break;}
 case 56: 
 var $205;
 var $206=((($205)-(12))|0);
 HEAP32[(($5)>>2)]=$206;
 var $207=(($206)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=$208;
 var $210=($208|0)==0;
 if($210){var $211=$206;label=57;break;}else{label=58;break;}
 case 57: 
 var $211;
 var $212=($201|0)==($211|0);
 if($212){label=61;break;}else{var $205=$211;label=56;break;}
 case 58: 
 var $213=((($205)-(12)+4)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($208|0)==($214|0);
 if($215){label=60;break;}else{label=59;break;}
 case 59: 
 var $scevgep_i_i_i_i_i_i136=((($214)-(16))|0);
 var $scevgep28_i_i_i_i_i_i137=$scevgep_i_i_i_i_i_i136;
 var $216=(((-$209))|0);
 var $uglygep_i_i_i_i_i_i138=(($scevgep28_i_i_i_i_i_i137+$216)|0);
 var $uglygep29_i_i_i_i_i_i139=$uglygep_i_i_i_i_i_i138;
 var $217=$uglygep29_i_i_i_i_i_i139>>>4;
 var $218=$217^-1;
 var $scevgep30_i_i_i_i_i_i140=(($214+($218<<4))|0);
 HEAP32[(($213)>>2)]=$scevgep30_i_i_i_i_i_i140;
 label=60;break;
 case 60: 
 var $219=$208;
 __ZdlPv($219);
 var $_pre29_i_i_i142=HEAP32[(($5)>>2)];
 var $211=$_pre29_i_i_i142;label=57;break;
 case 61: 
 var $_pre_i_i_i144=HEAP32[(($4)>>2)];
 var $220=$_pre_i_i_i144;label=62;break;
 case 62: 
 var $220;
 var $221=$220;
 __ZdlPv($221);
 var $_0103=$200;var $_0104=$199;label=73;break;
 case 63: 
 var $_lcssa176;
 var $_lcssa173;
 var $length_1_lcssa;
 var $222=((($skirtNr_0194)+(1))|0);
 var $223=($222|0)>=($_0195|0);
 var $224=($length_1_lcssa|0)>0;
 var $or_cond=$223&$224;
 var $225=($length_1_lcssa|0)<($minLength|0);
 var $or_cond113=$or_cond&$225;
 var $226=($or_cond113&1);
 var $_1=((($226)+($_0195))|0);
 var $227=($_lcssa176|0)==0;
 if($227){label=72;break;}else{label=64;break;}
 case 64: 
 var $228=($_lcssa176|0)==($_lcssa173|0);
 if($228){var $244=$_lcssa176;label=71;break;}else{var $229=$_lcssa173;label=65;break;}
 case 65: 
 var $229;
 var $230=((($229)-(12))|0);
 HEAP32[(($5)>>2)]=$230;
 var $231=(($230)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=$232;
 var $234=($232|0)==0;
 if($234){var $235=$230;label=66;break;}else{label=67;break;}
 case 66: 
 var $235;
 var $236=($_lcssa176|0)==($235|0);
 if($236){label=70;break;}else{var $229=$235;label=65;break;}
 case 67: 
 var $237=((($229)-(12)+4)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($232|0)==($238|0);
 if($239){label=69;break;}else{label=68;break;}
 case 68: 
 var $scevgep_i_i_i_i_i_i152=((($238)-(16))|0);
 var $scevgep28_i_i_i_i_i_i153=$scevgep_i_i_i_i_i_i152;
 var $240=(((-$233))|0);
 var $uglygep_i_i_i_i_i_i154=(($scevgep28_i_i_i_i_i_i153+$240)|0);
 var $uglygep29_i_i_i_i_i_i155=$uglygep_i_i_i_i_i_i154;
 var $241=$uglygep29_i_i_i_i_i_i155>>>4;
 var $242=$241^-1;
 var $scevgep30_i_i_i_i_i_i156=(($238+($242<<4))|0);
 HEAP32[(($237)>>2)]=$scevgep30_i_i_i_i_i_i156;
 label=69;break;
 case 69: 
 var $243=$232;
 __ZdlPv($243);
 var $_pre29_i_i_i158=HEAP32[(($5)>>2)];
 var $235=$_pre29_i_i_i158;label=66;break;
 case 70: 
 var $_pre_i_i_i160=HEAP32[(($4)>>2)];
 var $244=$_pre_i_i_i160;label=71;break;
 case 71: 
 var $244;
 var $245=$244;
 __ZdlPv($245);
 label=72;break;
 case 72: 
 __ZN10ClipperLib7ClipperD1Ev($skirtUnion);
 var $246=($222|0)<($_1|0);
 if($246){var $length_0193=$length_1_lcssa;var $skirtNr_0194=$222;var $_0195=$_1;label=3;break;}else{label=74;break;}
 case 73: 
 var $_0104;
 var $_0103;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($skirtUnion) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=76;break; }
 case 74: 
 STACKTOP=sp;return;
 case 75: 
 var $248$0=$_0104;
 var $248$1=0;
 var $249$0=$248$0;
 var $249$1=$_0103;
 ___resumeException($249$0)
 case 76: 
 var $251$0 = ___cxa_find_matching_catch(-1, -1,0); var $251$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z12generateRaftR16SliceDataStorageiibi($storage,$distance,$supportAngle,$supportEverywhere,$supportDistance){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $raftUnion=sp;
 var $raft=(sp)+(104);
 var $supportGenerator=(sp)+(120);
 var $raftResult=(sp)+(160);
 __ZN10ClipperLib7ClipperC1Ev($raftUnion);
 var $1=(($storage+64)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($storage+60)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=29;break;}else{label=2;break;}
 case 2: 
 var $6=(($raft)|0);
 var $7=(($raft+4)|0);
 var $8=(($raft+8)|0);
 var $9=($distance|0);
 var $10=$raftUnion;
 var $11=$raftUnion;
 var $volumeIdx_0183=0;var $14=$4;var $13=$2;label=3;break;
 case 3: 
 var $13;
 var $14;
 var $volumeIdx_0183;
 var $15=(($14+((($volumeIdx_0183)*(12))&-1)+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($14+((($volumeIdx_0183)*(12))&-1))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($16|0)==($18|0);
 if($19){var $96=$13;var $95=$14;label=28;break;}else{label=4;break;}
 case 4: 
 var $20=(($18+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($18)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($21|0)==($23|0);
 if($24){var $96=$13;var $95=$14;label=28;break;}else{var $i_0181=0;label=6;break;}
 case 5: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=$26$0;
 var $28=$26$1;
 var $_0=$28;var $_094=$27;label=91;break;
 case 6: 
 var $i_0181;
 HEAP32[(($6)>>2)]=0;
 HEAP32[(($7)>>2)]=0;
 HEAP32[(($8)>>2)]=0;
 var $29=HEAP32[(($22)>>2)];
 var $30=(($29+((($i_0181)*(96))&-1)+32)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($30,$raft,$9,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=18;break; }
 case 7: 
 var $32=HEAP32[(($10)>>2)];
 var $33=((($32)-(12))|0);
 var $34=$33;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($11+$35)|0);
 var $37=$36;
 var $38=HEAP32[(($6)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($37,$38,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $41=HEAP32[(($6)>>2)];
 var $42=($41|0)==0;
 if($42){label=17;break;}else{label=9;break;}
 case 9: 
 var $43=HEAP32[(($7)>>2)];
 var $44=($41|0)==($43|0);
 if($44){var $60=$41;label=16;break;}else{var $45=$43;label=10;break;}
 case 10: 
 var $45;
 var $46=((($45)-(12))|0);
 HEAP32[(($7)>>2)]=$46;
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$48;
 var $50=($48|0)==0;
 if($50){var $51=$46;label=11;break;}else{label=12;break;}
 case 11: 
 var $51;
 var $52=($41|0)==($51|0);
 if($52){label=15;break;}else{var $45=$51;label=10;break;}
 case 12: 
 var $53=((($45)-(12)+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($48|0)==($54|0);
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $scevgep_i_i_i_i_i_i=((($54)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $56=(((-$49))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$56)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $57=$uglygep29_i_i_i_i_i_i>>>4;
 var $58=$57^-1;
 var $scevgep30_i_i_i_i_i_i=(($54+($58<<4))|0);
 HEAP32[(($53)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=14;break;
 case 14: 
 var $59=$48;
 __ZdlPv($59);
 var $_pre29_i_i_i=HEAP32[(($7)>>2)];
 var $51=$_pre29_i_i_i;label=11;break;
 case 15: 
 var $_pre_i_i_i=HEAP32[(($6)>>2)];
 var $60=$_pre_i_i_i;label=16;break;
 case 16: 
 var $60;
 var $61=$60;
 __ZdlPv($61);
 label=17;break;
 case 17: 
 var $62=((($i_0181)+(1))|0);
 var $63=HEAP32[(($20)>>2)];
 var $64=HEAP32[(($22)>>2)];
 var $65=$63;
 var $66=$64;
 var $67=((($65)-($66))|0);
 var $68=(((($67|0))/(96))&-1);
 var $69=($62>>>0)<($68>>>0);
 if($69){var $i_0181=$62;label=6;break;}else{label=27;break;}
 case 18: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 var $72=$71$0;
 var $73=$71$1;
 var $74=HEAP32[(($6)>>2)];
 var $75=($74|0)==0;
 if($75){var $_0=$73;var $_094=$72;label=91;break;}else{label=19;break;}
 case 19: 
 var $76=HEAP32[(($7)>>2)];
 var $77=($74|0)==($76|0);
 if($77){var $93=$74;label=26;break;}else{var $78=$76;label=20;break;}
 case 20: 
 var $78;
 var $79=((($78)-(12))|0);
 HEAP32[(($7)>>2)]=$79;
 var $80=(($79)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$81;
 var $83=($81|0)==0;
 if($83){var $84=$79;label=21;break;}else{label=22;break;}
 case 21: 
 var $84;
 var $85=($74|0)==($84|0);
 if($85){label=25;break;}else{var $78=$84;label=20;break;}
 case 22: 
 var $86=((($78)-(12)+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($81|0)==($87|0);
 if($88){label=24;break;}else{label=23;break;}
 case 23: 
 var $scevgep_i_i_i_i_i_i107=((($87)-(16))|0);
 var $scevgep28_i_i_i_i_i_i108=$scevgep_i_i_i_i_i_i107;
 var $89=(((-$82))|0);
 var $uglygep_i_i_i_i_i_i109=(($scevgep28_i_i_i_i_i_i108+$89)|0);
 var $uglygep29_i_i_i_i_i_i110=$uglygep_i_i_i_i_i_i109;
 var $90=$uglygep29_i_i_i_i_i_i110>>>4;
 var $91=$90^-1;
 var $scevgep30_i_i_i_i_i_i111=(($87+($91<<4))|0);
 HEAP32[(($86)>>2)]=$scevgep30_i_i_i_i_i_i111;
 label=24;break;
 case 24: 
 var $92=$81;
 __ZdlPv($92);
 var $_pre29_i_i_i113=HEAP32[(($7)>>2)];
 var $84=$_pre29_i_i_i113;label=21;break;
 case 25: 
 var $_pre_i_i_i115=HEAP32[(($6)>>2)];
 var $93=$_pre_i_i_i115;label=26;break;
 case 26: 
 var $93;
 var $94=$93;
 __ZdlPv($94);
 var $_0=$73;var $_094=$72;label=91;break;
 case 27: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_pre191_pre=HEAP32[(($3)>>2)];
 var $96=$_pre_pre;var $95=$_pre191_pre;label=28;break;
 case 28: 
 var $95;
 var $96;
 var $97=((($volumeIdx_0183)+(1))|0);
 var $98=$96;
 var $99=$95;
 var $100=((($98)-($99))|0);
 var $101=(((($100|0))/(12))&-1);
 var $102=($97>>>0)<($101>>>0);
 if($102){var $volumeIdx_0183=$97;var $14=$95;var $13=$96;label=3;break;}else{label=29;break;}
 case 29: 
 var $103=($supportAngle|0)>-1;
 if($103){label=30;break;}else{label=50;break;}
 case 30: 
 var $105=(($storage+72)|0);
 (function() { try { __THREW__ = 0; return __ZN20SupportPolyGeneratorC2ER14SupportStorageiibii($supportGenerator,$105,0,$supportAngle,$supportEverywhere,$supportDistance,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=5;break; }
 case 31: 
 var $106=$raftUnion;
 var $107=HEAP32[(($106)>>2)];
 var $108=((($107)-(12))|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $111=$raftUnion;
 var $112=(($111+$110)|0);
 var $113=$112;
 var $114=(($supportGenerator)|0);
 var $115=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($113,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=41;break; }
 case 32: 
 var $117=(($supportGenerator)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=($118|0)==0;
 if($119){label=50;break;}else{label=33;break;}
 case 33: 
 var $120=(($supportGenerator+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($118|0)==($121|0);
 if($122){var $138=$118;label=40;break;}else{var $123=$121;label=34;break;}
 case 34: 
 var $123;
 var $124=((($123)-(12))|0);
 HEAP32[(($120)>>2)]=$124;
 var $125=(($124)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$126;
 var $128=($126|0)==0;
 if($128){var $129=$124;label=35;break;}else{label=36;break;}
 case 35: 
 var $129;
 var $130=($118|0)==($129|0);
 if($130){label=39;break;}else{var $123=$129;label=34;break;}
 case 36: 
 var $131=((($123)-(12)+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($126|0)==($132|0);
 if($133){label=38;break;}else{label=37;break;}
 case 37: 
 var $scevgep_i_i_i_i_i_i_i_i=((($132)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i;
 var $134=(((-$127))|0);
 var $uglygep_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i+$134)|0);
 var $uglygep29_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i;
 var $135=$uglygep29_i_i_i_i_i_i_i_i>>>4;
 var $136=$135^-1;
 var $scevgep30_i_i_i_i_i_i_i_i=(($132+($136<<4))|0);
 HEAP32[(($131)>>2)]=$scevgep30_i_i_i_i_i_i_i_i;
 label=38;break;
 case 38: 
 var $137=$126;
 __ZdlPv($137);
 var $_pre29_i_i_i_i_i=HEAP32[(($120)>>2)];
 var $129=$_pre29_i_i_i_i_i;label=35;break;
 case 39: 
 var $_pre_i_i_i_i_i=HEAP32[(($117)>>2)];
 var $138=$_pre_i_i_i_i_i;label=40;break;
 case 40: 
 var $138;
 var $139=$138;
 __ZdlPv($139);
 label=50;break;
 case 41: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1); var $141$1 = tempRet0;
 var $142=$141$0;
 var $143=$141$1;
 var $144=(($supportGenerator)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145|0)==0;
 if($146){var $_0=$143;var $_094=$142;label=91;break;}else{label=42;break;}
 case 42: 
 var $147=(($supportGenerator+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($145|0)==($148|0);
 if($149){var $165=$145;label=49;break;}else{var $150=$148;label=43;break;}
 case 43: 
 var $150;
 var $151=((($150)-(12))|0);
 HEAP32[(($147)>>2)]=$151;
 var $152=(($151)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153;
 var $155=($153|0)==0;
 if($155){var $156=$151;label=44;break;}else{label=45;break;}
 case 44: 
 var $156;
 var $157=($145|0)==($156|0);
 if($157){label=48;break;}else{var $150=$156;label=43;break;}
 case 45: 
 var $158=((($150)-(12)+4)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($153|0)==($159|0);
 if($160){label=47;break;}else{label=46;break;}
 case 46: 
 var $scevgep_i_i_i_i_i_i_i_i123=((($159)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i_i124=$scevgep_i_i_i_i_i_i_i_i123;
 var $161=(((-$154))|0);
 var $uglygep_i_i_i_i_i_i_i_i125=(($scevgep28_i_i_i_i_i_i_i_i124+$161)|0);
 var $uglygep29_i_i_i_i_i_i_i_i126=$uglygep_i_i_i_i_i_i_i_i125;
 var $162=$uglygep29_i_i_i_i_i_i_i_i126>>>4;
 var $163=$162^-1;
 var $scevgep30_i_i_i_i_i_i_i_i127=(($159+($163<<4))|0);
 HEAP32[(($158)>>2)]=$scevgep30_i_i_i_i_i_i_i_i127;
 label=47;break;
 case 47: 
 var $164=$153;
 __ZdlPv($164);
 var $_pre29_i_i_i_i_i129=HEAP32[(($147)>>2)];
 var $156=$_pre29_i_i_i_i_i129;label=44;break;
 case 48: 
 var $_pre_i_i_i_i_i131=HEAP32[(($144)>>2)];
 var $165=$_pre_i_i_i_i_i131;label=49;break;
 case 49: 
 var $165;
 var $166=$165;
 __ZdlPv($166);
 var $_0=$143;var $_094=$142;label=91;break;
 case 50: 
 var $167=(($raftResult)|0);
 HEAP32[(($167)>>2)]=0;
 var $168=(($raftResult+4)|0);
 HEAP32[(($168)>>2)]=0;
 var $169=(($raftResult+8)|0);
 HEAP32[(($169)>>2)]=0;
 var $170=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($raftUnion,1,$raftResult,1,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=71;break; }
 case 51: 
 var $171=HEAP32[(($168)>>2)];
 var $172=HEAP32[(($167)>>2)];
 var $173=($171|0)==($172|0);
 if($173){var $_lcssa=$171;var $_lcssa170=$171;label=81;break;}else{label=52;break;}
 case 52: 
 var $174=(($storage+52)|0);
 var $175=(($storage+56)|0);
 var $176=(($storage+48)|0);
 var $n_0175=0;var $177=$172;label=53;break;
 case 53: 
 var $177;
 var $n_0175;
 var $178=(($177+((($n_0175)*(12))&-1))|0);
 var $179=HEAP32[(($174)>>2)];
 var $180=HEAP32[(($175)>>2)];
 var $181=($179|0)==($180|0);
 if($181){label=68;break;}else{label=54;break;}
 case 54: 
 var $183=($179|0)==0;
 if($183){label=67;break;}else{label=55;break;}
 case 55: 
 var $185=(($179)|0);
 HEAP32[(($185)>>2)]=0;
 var $186=(($179+4)|0);
 HEAP32[(($186)>>2)]=0;
 var $187=(($179+8)|0);
 HEAP32[(($187)>>2)]=0;
 var $188=(($177+((($n_0175)*(12))&-1)+4)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($178)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=$189;
 var $193=$191;
 var $194=((($192)-($193))|0);
 var $195=$194>>4;
 var $196=($195|0)==0;
 if($196){label=67;break;}else{label=56;break;}
 case 56: 
 var $198=($195>>>0)>268435455;
 if($198){label=57;break;}else{label=58;break;}
 case 57: 
 var $200=$179;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=63;break; }
 case 58: 
 var $201=(function() { try { __THREW__ = 0; return __Znwj($194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=63;break; }
 case 59: 
 var $203=$201;
 HEAP32[(($186)>>2)]=$203;
 HEAP32[(($185)>>2)]=$203;
 var $204=(($203+($195<<4))|0);
 HEAP32[(($187)>>2)]=$204;
 var $205=HEAP32[(($190)>>2)];
 var $206=HEAP32[(($188)>>2)];
 var $207=($205|0)==($206|0);
 if($207){label=67;break;}else{var $_011_i_i_i=$205;var $208=$203;label=60;break;}
 case 60: 
 var $208;
 var $_011_i_i_i;
 var $209=($208|0)==0;
 if($209){var $213=0;label=62;break;}else{label=61;break;}
 case 61: 
 var $211=$208;
 var $212=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];HEAP32[((($211)+(8))>>2)]=HEAP32[((($212)+(8))>>2)];HEAP32[((($211)+(12))>>2)]=HEAP32[((($212)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($186)>>2)];
 var $213=$_pre12_i_i_i;label=62;break;
 case 62: 
 var $213;
 var $214=(($213+16)|0);
 HEAP32[(($186)>>2)]=$214;
 var $215=(($_011_i_i_i+16)|0);
 var $216=($215|0)==($206|0);
 if($216){label=67;break;}else{var $_011_i_i_i=$215;var $208=$214;label=60;break;}
 case 63: 
 var $218$0 = ___cxa_find_matching_catch(-1, -1); var $218$1 = tempRet0;
 var $219=HEAP32[(($185)>>2)];
 var $220=$219;
 var $221=($219|0)==0;
 if($221){var $eh_lpad_body$1=$218$1;var $eh_lpad_body$0=$218$0;label=72;break;}else{label=64;break;}
 case 64: 
 var $222=HEAP32[(($186)>>2)];
 var $223=($219|0)==($222|0);
 if($223){label=66;break;}else{label=65;break;}
 case 65: 
 var $scevgep_i_i_i=((($222)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $224=(((-$220))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$224)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $225=$uglygep29_i_i_i>>>4;
 var $226=$225^-1;
 var $scevgep30_i_i_i=(($222+($226<<4))|0);
 HEAP32[(($186)>>2)]=$scevgep30_i_i_i;
 label=66;break;
 case 66: 
 var $227=$219;
 __ZdlPv($227);
 var $eh_lpad_body$1=$218$1;var $eh_lpad_body$0=$218$0;label=72;break;
 case 67: 
 var $228=HEAP32[(($174)>>2)];
 var $229=(($228+12)|0);
 HEAP32[(($174)>>2)]=$229;
 label=69;break;
 case 68: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($176,$178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=70;break; }
 case 69: 
 var $231=((($n_0175)+(1))|0);
 var $232=HEAP32[(($168)>>2)];
 var $233=HEAP32[(($167)>>2)];
 var $234=$232;
 var $235=$233;
 var $236=((($234)-($235))|0);
 var $237=(((($236|0))/(12))&-1);
 var $238=($231>>>0)<($237>>>0);
 if($238){var $n_0175=$231;var $177=$233;label=53;break;}else{var $_lcssa=$232;var $_lcssa170=$233;label=81;break;}
 case 70: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=72;break;
 case 71: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=72;break;
 case 72: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $239=$eh_lpad_body$0;
 var $240=$eh_lpad_body$1;
 var $241=HEAP32[(($167)>>2)];
 var $242=($241|0)==0;
 if($242){var $_0=$240;var $_094=$239;label=91;break;}else{label=73;break;}
 case 73: 
 var $243=HEAP32[(($168)>>2)];
 var $244=($241|0)==($243|0);
 if($244){var $260=$241;label=80;break;}else{var $245=$243;label=74;break;}
 case 74: 
 var $245;
 var $246=((($245)-(12))|0);
 HEAP32[(($168)>>2)]=$246;
 var $247=(($246)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=$248;
 var $250=($248|0)==0;
 if($250){var $251=$246;label=75;break;}else{label=76;break;}
 case 75: 
 var $251;
 var $252=($241|0)==($251|0);
 if($252){label=79;break;}else{var $245=$251;label=74;break;}
 case 76: 
 var $253=((($245)-(12)+4)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=($248|0)==($254|0);
 if($255){label=78;break;}else{label=77;break;}
 case 77: 
 var $scevgep_i_i_i_i_i_i140=((($254)-(16))|0);
 var $scevgep28_i_i_i_i_i_i141=$scevgep_i_i_i_i_i_i140;
 var $256=(((-$249))|0);
 var $uglygep_i_i_i_i_i_i142=(($scevgep28_i_i_i_i_i_i141+$256)|0);
 var $uglygep29_i_i_i_i_i_i143=$uglygep_i_i_i_i_i_i142;
 var $257=$uglygep29_i_i_i_i_i_i143>>>4;
 var $258=$257^-1;
 var $scevgep30_i_i_i_i_i_i144=(($254+($258<<4))|0);
 HEAP32[(($253)>>2)]=$scevgep30_i_i_i_i_i_i144;
 label=78;break;
 case 78: 
 var $259=$248;
 __ZdlPv($259);
 var $_pre29_i_i_i146=HEAP32[(($168)>>2)];
 var $251=$_pre29_i_i_i146;label=75;break;
 case 79: 
 var $_pre_i_i_i148=HEAP32[(($167)>>2)];
 var $260=$_pre_i_i_i148;label=80;break;
 case 80: 
 var $260;
 var $261=$260;
 __ZdlPv($261);
 var $_0=$240;var $_094=$239;label=91;break;
 case 81: 
 var $_lcssa170;
 var $_lcssa;
 var $262=($_lcssa170|0)==0;
 if($262){label=90;break;}else{label=82;break;}
 case 82: 
 var $263=($_lcssa170|0)==($_lcssa|0);
 if($263){var $279=$_lcssa170;label=89;break;}else{var $264=$_lcssa;label=83;break;}
 case 83: 
 var $264;
 var $265=((($264)-(12))|0);
 HEAP32[(($168)>>2)]=$265;
 var $266=(($265)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=$267;
 var $269=($267|0)==0;
 if($269){var $270=$265;label=84;break;}else{label=85;break;}
 case 84: 
 var $270;
 var $271=($_lcssa170|0)==($270|0);
 if($271){label=88;break;}else{var $264=$270;label=83;break;}
 case 85: 
 var $272=((($264)-(12)+4)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($267|0)==($273|0);
 if($274){label=87;break;}else{label=86;break;}
 case 86: 
 var $scevgep_i_i_i_i_i_i156=((($273)-(16))|0);
 var $scevgep28_i_i_i_i_i_i157=$scevgep_i_i_i_i_i_i156;
 var $275=(((-$268))|0);
 var $uglygep_i_i_i_i_i_i158=(($scevgep28_i_i_i_i_i_i157+$275)|0);
 var $uglygep29_i_i_i_i_i_i159=$uglygep_i_i_i_i_i_i158;
 var $276=$uglygep29_i_i_i_i_i_i159>>>4;
 var $277=$276^-1;
 var $scevgep30_i_i_i_i_i_i160=(($273+($277<<4))|0);
 HEAP32[(($272)>>2)]=$scevgep30_i_i_i_i_i_i160;
 label=87;break;
 case 87: 
 var $278=$267;
 __ZdlPv($278);
 var $_pre29_i_i_i162=HEAP32[(($168)>>2)];
 var $270=$_pre29_i_i_i162;label=84;break;
 case 88: 
 var $_pre_i_i_i164=HEAP32[(($167)>>2)];
 var $279=$_pre_i_i_i164;label=89;break;
 case 89: 
 var $279;
 var $280=$279;
 __ZdlPv($280);
 label=90;break;
 case 90: 
 __ZN10ClipperLib7ClipperD1Ev($raftUnion);
 STACKTOP=sp;return;
 case 91: 
 var $_094;
 var $_0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($raftUnion) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=93;break; }
 case 92: 
 var $282$0=$_094;
 var $282$1=0;
 var $283$0=$282$0;
 var $283$1=$_0;
 ___resumeException($283$0)
 case 93: 
 var $285$0 = ___cxa_find_matching_catch(-1, -1,0); var $285$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z11processFilePKcR14ConfigSettingsR11GCodeExportb($input_filename,$config,$gcode,$firstFile){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1016)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tv_i5_i=sp;
 var $tv_i4_i885=(sp)+(8);
 var $tv_i_i886=(sp)+(16);
 var $tv_i4_i878=(sp)+(24);
 var $tv_i_i879=(sp)+(32);
 var $p_i=(sp)+(40);
 var $1=(sp)+(56);
 var $2=(sp)+(72);
 var $tv_i4_i657=(sp)+(80);
 var $tv_i_i658=(sp)+(88);
 var $tv_i4_i651=(sp)+(96);
 var $tv_i_i652=(sp)+(104);
 var $tv_i4_i646=(sp)+(112);
 var $tv_i_i647=(sp)+(120);
 var $tv_i4_i629=(sp)+(128);
 var $tv_i_i630=(sp)+(136);
 var $tv_i4_i627=(sp)+(144);
 var $tv_i_i628=(sp)+(152);
 var $3=(sp)+(160);
 var $tv_i4_i=(sp)+(176);
 var $tv_i_i=(sp)+(184);
 var $tv_i=(sp)+(192);
 var $slicerList=(sp)+(200);
 var $4=(sp)+(216);
 var $storage=(sp)+(224);
 var $5=(sp)+(328);
 var $6=(sp)+(344);
 var $skirtConfig=(sp)+(360);
 var $inset0Config=(sp)+(376);
 var $inset1Config=(sp)+(392);
 var $fillConfig=(sp)+(408);
 var $supportConfig=(sp)+(424);
 var $raftBaseConfig=(sp)+(440);
 var $raftInterfaceConfig=(sp)+(456);
 var $gcodeLayer=(sp)+(472);
 var $raftLines=(sp)+(560);
 var $gcodeLayer7=(sp)+(576);
 var $raftLines8=(sp)+(664);
 var $gcodeLayer11=(sp)+(680);
 var $partOrderOptimizer=(sp)+(768);
 var $fillPolygons=(sp)+(824);
 var $supportGenerator=(sp)+(840);
 var $supportClipper=(sp)+(880);
 var $polys=(sp)+(984);
 var $supportLines=(sp)+(1000);
 var $n_01066=1;label=2;break;
 case 2: 
 var $n_01066;
 var $8=(($config+276+($n_01066<<3))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10$0=$9;
 var $10$1=(((($9|0)<0))|0)?-1:0;
 var $11=(($config+276+($n_01066<<3)+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13$0=$12;
 var $13$1=(((($12|0)<0))|0)?-1:0;
 var $_sroa_0906_0__idx=(($gcode+72+($n_01066<<4))|0);
 var $st$0$0=(($_sroa_0906_0__idx)|0);
 HEAP32[(($st$0$0)>>2)]=$10$0;
 var $st$1$1=(($_sroa_0906_0__idx+4)|0);
 HEAP32[(($st$1$1)>>2)]=$10$1;
 var $_sroa_1907_8__idx908=(($gcode+72+($n_01066<<4)+8)|0);
 var $st$2$0=(($_sroa_1907_8__idx908)|0);
 HEAP32[(($st$2$0)>>2)]=$13$0;
 var $st$3$1=(($_sroa_1907_8__idx908+4)|0);
 HEAP32[(($st$3$1)>>2)]=$13$1;
 var $14=((($n_01066)+(1))|0);
 var $15=($14>>>0)<16;
 if($15){var $n_01066=$14;label=2;break;}else{label=3;break;}
 case 3: 
 var $17=(($config+272)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($gcode+352)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=$tv_i;
 var $21=_gettimeofday($tv_i,0);
 var $22=(($tv_i)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($tv_i+4)|0);
 var $25=HEAP32[(($24)>>2)];
 __Z4_logPKcz(6048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$input_filename,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=(($config+184)|0);
 var $27=__Z9loadModelPKcR10FMatrix3x3($input_filename,$26);
 var $28=($27|0)==0;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 __Z4_logPKcz(5816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$input_filename,tempVarArgs)); STACKTOP=tempVarArgs;
 label=464;break;
 case 5: 
 var $31=($25|0);
 var $32=($31)/(1000000);
 var $33=($23|0);
 var $34=($33)+($32);
 var $35=$tv_i_i;
 var $36=_gettimeofday($tv_i_i,0);
 var $37=(($tv_i_i)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($tv_i_i+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$tv_i4_i;
 var $42=_gettimeofday($tv_i4_i,0);
 var $43=(($tv_i4_i)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0);
 var $46=(($tv_i4_i+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0);
 var $49=($48)/(1000000);
 var $50=($45)+($49);
 var $51=($40|0);
 var $52=($51)/(1000000);
 var $53=($38|0);
 var $54=($53)+($52);
 var $55=($54)-($34);
 __Z4_logPKcz(5384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$55,tempVarArgs)); STACKTOP=tempVarArgs;
 __Z4_logPKcz(5192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $56=__Znwj(48);
 var $57=$56;
 var $58=(($config+256)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($config+260)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($config+264)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(((-$63))|0);
 var $_sroa_0892_0_tmp625_idx=(($3)|0);
 HEAP32[(($_sroa_0892_0_tmp625_idx)>>2)]=$59;
 var $_sroa_1893_4_tmp625_idx894=(($3+4)|0);
 HEAP32[(($_sroa_1893_4_tmp625_idx894)>>2)]=$61;
 var $_sroa_2_8_tmp625_idx895=(($3+8)|0);
 HEAP32[(($_sroa_2_8_tmp625_idx895)>>2)]=$64;
 (function() { try { __THREW__ = 0; return __ZN14OptimizedModelC2EP11SimpleModel6Point3($57,$27,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $65=(($27+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($27)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($66|0)==($68|0);
 if($69){var $_lcssa1057=$66;var $_lcssa1059=$66;label=10;break;}else{label=7;break;}
 case 7: 
 var $70=$56;
 var $v_01060=0;var $71=$68;label=8;break;
 case 8: 
 var $71;
 var $v_01060;
 var $72=(($71+((($v_01060)*(12))&-1)+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($71+((($v_01060)*(12))&-1))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$73;
 var $77=$75;
 var $78=((($76)-($77))|0);
 var $79=(((($78|0))/(36))&-1);
 var $80=HEAP32[(($70)>>2)];
 var $81=(($80+((($v_01060)*(28))&-1)+20)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($80+((($v_01060)*(28))&-1)+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$82;
 var $86=$84;
 var $87=((($85)-($86))|0);
 var $88=(((($87|0))/(24))&-1);
 var $89=($88>>>0);
 var $90=($79>>>0);
 var $91=($89)/($90);
 var $92=($91)*(100);
 var $93=$92;
 __Z4_logPKcz(5064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$79,HEAP32[(((tempVarArgs)+(8))>>2)]=$88,HEAPF64[(((tempVarArgs)+(16))>>3)]=$93,tempVarArgs)); STACKTOP=tempVarArgs;
 var $94=HEAP32[(($67)>>2)];
 var $95=(($94+((($v_01060)*(12))&-1)+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($94+((($v_01060)*(12))&-1))|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$96;
 var $100=$98;
 var $101=((($99)-($100))|0);
 var $102=(((($101|0))/(36))&-1);
 var $103=((($102)*(3))&-1);
 var $104=HEAP32[(($70)>>2)];
 var $105=(($104+((($v_01060)*(28))&-1)+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($104+((($v_01060)*(28))&-1)+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$106;
 var $110=$108;
 var $111=((($109)-($110))|0);
 var $112=(((($111|0))/(24))&-1);
 var $113=($112>>>0);
 var $114=($103>>>0);
 var $115=($113)/($114);
 var $116=($115)*(100);
 var $117=$116;
 __Z4_logPKcz(4960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$103,HEAP32[(((tempVarArgs)+(8))>>2)]=$112,HEAPF64[(((tempVarArgs)+(16))>>3)]=$117,tempVarArgs)); STACKTOP=tempVarArgs;
 var $118=((($v_01060)+(1))|0);
 var $119=HEAP32[(($65)>>2)];
 var $120=HEAP32[(($67)>>2)];
 var $121=$119;
 var $122=$120;
 var $123=((($121)-($122))|0);
 var $124=(((($123|0))/(12))&-1);
 var $125=($118>>>0)<($124>>>0);
 if($125){var $v_01060=$118;var $71=$120;label=8;break;}else{var $_lcssa1057=$119;var $_lcssa1059=$120;label=10;break;}
 case 9: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 __ZdlPv($56);
 var $_8=$128;var $_8585=$129;label=470;break;
 case 10: 
 var $_lcssa1059;
 var $_lcssa1057;
 var $130=($_lcssa1059|0)==0;
 if($130){label=19;break;}else{label=11;break;}
 case 11: 
 var $131=($_lcssa1059|0)==($_lcssa1057|0);
 if($131){var $147=$_lcssa1059;label=18;break;}else{var $132=$_lcssa1057;label=12;break;}
 case 12: 
 var $132;
 var $133=((($132)-(12))|0);
 HEAP32[(($65)>>2)]=$133;
 var $134=(($133)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$135;
 var $137=($135|0)==0;
 if($137){var $138=$133;label=13;break;}else{label=14;break;}
 case 13: 
 var $138;
 var $139=($_lcssa1059|0)==($138|0);
 if($139){label=17;break;}else{var $132=$138;label=12;break;}
 case 14: 
 var $140=((($132)-(12)+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($135|0)==($141|0);
 if($142){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i_i_i_i_i_i=((($141)-(36))|0);
 var $scevgep28_i_i_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i_i_i;
 var $143=(((-$136))|0);
 var $uglygep_i_i_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i_i_i+$143)|0);
 var $uglygep29_i_i_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i_i_i;
 var $144=(((($uglygep29_i_i_i_i_i_i_i_i_i_i>>>0))/(36))&-1);
 var $145=$144^-1;
 var $scevgep30_i_i_i_i_i_i_i_i_i_i=(($141+((($145)*(36))&-1))|0);
 HEAP32[(($140)>>2)]=$scevgep30_i_i_i_i_i_i_i_i_i_i;
 label=16;break;
 case 16: 
 var $146=$135;
 __ZdlPv($146);
 var $_pre29_i_i_i_i_i=HEAP32[(($65)>>2)];
 var $138=$_pre29_i_i_i_i_i;label=13;break;
 case 17: 
 var $_pre_i_i_i_i_i=HEAP32[(($67)>>2)];
 var $147=$_pre_i_i_i_i_i;label=18;break;
 case 18: 
 var $147;
 var $148=$147;
 __ZdlPv($148);
 label=19;break;
 case 19: 
 var $150=$27;
 __ZdlPv($150);
 var $151=$tv_i_i628;
 var $152=_gettimeofday($tv_i_i628,0);
 var $153=(($tv_i_i628)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($tv_i_i628+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$tv_i4_i627;
 var $158=_gettimeofday($tv_i4_i627,0);
 var $159=(($tv_i4_i627)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0);
 var $162=(($tv_i4_i627+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0);
 var $165=($164)/(1000000);
 var $166=($161)+($165);
 var $167=($156|0);
 var $168=($167)/(1000000);
 var $169=($154|0);
 var $170=($169)+($168);
 var $171=($170)-($50);
 __Z4_logPKcz(4912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$171,tempVarArgs)); STACKTOP=tempVarArgs;
 __Z4_logPKcz(4864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $172=(($slicerList)|0);
 HEAP32[(($172)>>2)]=0;
 var $173=(($slicerList+4)|0);
 HEAP32[(($173)>>2)]=0;
 var $174=(($slicerList+8)|0);
 HEAP32[(($174)>>2)]=0;
 var $175=(($56+4)|0);
 var $176=$175;
 var $177=HEAP32[(($176)>>2)];
 var $178=$56;
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=33;break;}else{label=20;break;}
 case 20: 
 var $181=(($config+16)|0);
 var $182=(($config+12)|0);
 var $183=(($config+268)|0);
 var $volumeIdx_01052=0;var $185=$179;label=21;break;
 case 21: 
 var $185;
 var $volumeIdx_01052;
 var $186=(function() { try { __THREW__ = 0; return __Znwj(36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=29;break; }
 case 22: 
 var $188=$186;
 var $189=(($185+((($volumeIdx_01052)*(28))&-1))|0);
 var $190=HEAP32[(($181)>>2)];
 var $191=(((($190|0))/(2))&-1);
 var $192=HEAP32[(($182)>>2)];
 var $193=HEAP32[(($183)>>2)];
 var $194=$193&16;
 var $195=($194|0)!=0;
 var $196=$193&4;
 var $197=($196|0)!=0;
 (function() { try { __THREW__ = 0; return __ZN6SlicerC2EP15OptimizedVolumeiibb($188,$189,$191,$192,$195,$197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 HEAP32[(($4)>>2)]=$188;
 var $198=HEAP32[(($173)>>2)];
 var $199=HEAP32[(($174)>>2)];
 var $200=($198|0)==($199|0);
 if($200){label=27;break;}else{label=24;break;}
 case 24: 
 var $202=($198|0)==0;
 if($202){var $204=0;label=26;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($198)>>2)]=$188;
 var $_pre1081=HEAP32[(($173)>>2)];
 var $204=$_pre1081;label=26;break;
 case 26: 
 var $204;
 var $205=(($204+4)|0);
 HEAP32[(($173)>>2)]=$205;
 label=28;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIP6SlicerNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($slicerList,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 var $207=((($volumeIdx_01052)+(1))|0);
 var $208=HEAP32[(($176)>>2)];
 var $209=HEAP32[(($178)>>2)];
 var $210=$208;
 var $211=$209;
 var $212=((($210)-($211))|0);
 var $213=(((($212|0))/(28))&-1);
 var $214=($207>>>0)<($213>>>0);
 if($214){var $volumeIdx_01052=$207;var $185=$209;label=21;break;}else{label=33;break;}
 case 29: 
 var $lpad_loopexit1048$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1048$1 = tempRet0;
 var $lpad_phi1050$1=$lpad_loopexit1048$1;var $lpad_phi1050$0=$lpad_loopexit1048$0;label=31;break;
 case 30: 
 var $lpad_nonloopexit1049$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit1049$1 = tempRet0;
 var $lpad_phi1050$1=$lpad_nonloopexit1049$1;var $lpad_phi1050$0=$lpad_nonloopexit1049$0;label=31;break;
 case 31: 
 var $lpad_phi1050$0;
 var $lpad_phi1050$1;
 var $216=$lpad_phi1050$0;
 var $217=$lpad_phi1050$1;
 var $_7=$216;var $_7584=$217;label=466;break;
 case 32: 
 var $219$0 = ___cxa_find_matching_catch(-1, -1); var $219$1 = tempRet0;
 var $220=$219$0;
 var $221=$219$1;
 __ZdlPv($186);
 var $_7=$220;var $_7584=$221;label=466;break;
 case 33: 
 var $222=$tv_i_i630;
 var $223=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i630,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=30;break; }
 case 34: 
 var $224=(($tv_i_i630)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(($tv_i_i630+4)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=$tv_i4_i629;
 var $229=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i629,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $231=(($tv_i4_i629)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0);
 var $234=(($tv_i4_i629+4)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=($235|0);
 var $237=($236)/(1000000);
 var $238=($233)+($237);
 var $239=($227|0);
 var $240=($239)/(1000000);
 var $241=($225|0);
 var $242=($241)+($240);
 var $243=($242)-($166);
 __Z4_logPKcz(4816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$243,tempVarArgs)); STACKTOP=tempVarArgs;
 var $244=(($storage+36)|0);
 var $245=$244;
 _memset($245, 0, 52);
 var $246=(($config+116)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)>-1;
 if($248){label=36;break;}else{label=44;break;}
 case 36: 
 var $250=HEAP32[((_stdout)>>2)];
 var $251=_fwrite(4768,26,1,$250);
 var $252=(($storage+72)|0);
 (function() { try { __THREW__ = 0; return __Z19generateSupportGridR14SupportStorageP14OptimizedModel($252,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=42;break; }
 case 37: 
 var $lpad_loopexit983$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit983$1 = tempRet0;
 var $lpad_phi985$1=$lpad_loopexit983$1;var $lpad_phi985$0=$lpad_loopexit983$0;label=43;break;
 case 38: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi985$1=$lpad_us_lcssa$1;var $lpad_phi985$0=$lpad_us_lcssa$0;label=43;break;
 case 39: 
 var $lpad_loopexit1009$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1009$1 = tempRet0;
 var $lpad_phi985$1=$lpad_loopexit1009$1;var $lpad_phi985$0=$lpad_loopexit1009$0;label=43;break;
 case 40: 
 var $lpad_loopexit1018$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1018$1 = tempRet0;
 var $lpad_phi985$1=$lpad_loopexit1018$1;var $lpad_phi985$0=$lpad_loopexit1018$0;label=43;break;
 case 41: 
 var $lpad_loopexit1025$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1025$1 = tempRet0;
 var $lpad_phi985$1=$lpad_loopexit1025$1;var $lpad_phi985$0=$lpad_loopexit1025$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit1026$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit1026$1 = tempRet0;
 var $lpad_phi985$1=$lpad_nonloopexit1026$1;var $lpad_phi985$0=$lpad_nonloopexit1026$0;label=43;break;
 case 43: 
 var $lpad_phi985$0;
 var $lpad_phi985$1;
 var $253=$lpad_phi985$0;
 var $254=$lpad_phi985$1;
 var $_6=$253;var $_6583=$254;label=465;break;
 case 44: 
 var $256=(($56+12)|0);
 var $257=$storage;
 assert(12 % 1 === 0);HEAP32[(($257)>>2)]=HEAP32[(($256)>>2)];HEAP32[((($257)+(4))>>2)]=HEAP32[((($256)+(4))>>2)];HEAP32[((($257)+(8))>>2)]=HEAP32[((($256)+(8))>>2)];
 var $258=(($storage+12)|0);
 var $259=(($56+24)|0);
 var $260=$258;
 assert(12 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($259)>>2)];HEAP32[((($260)+(4))>>2)]=HEAP32[((($259)+(4))>>2)];HEAP32[((($260)+(8))>>2)]=HEAP32[((($259)+(8))>>2)];
 var $261=(($storage+24)|0);
 var $262=(($56+36)|0);
 var $263=$261;
 assert(12 % 1 === 0);HEAP32[(($263)>>2)]=HEAP32[(($262)>>2)];HEAP32[((($263)+(4))>>2)]=HEAP32[((($262)+(4))>>2)];HEAP32[((($263)+(8))>>2)]=HEAP32[((($262)+(8))>>2)];
 var $264=($56|0)==0;
 if($264){label=51;break;}else{label=45;break;}
 case 45: 
 var $266=HEAP32[(($178)>>2)];
 var $267=($266|0)==0;
 if($267){label=50;break;}else{label=46;break;}
 case 46: 
 var $268=HEAP32[(($176)>>2)];
 var $269=($266|0)==($268|0);
 if($269){label=49;break;}else{label=47;break;}
 case 47: 
 var $271=((($268)-(28))|0);
 HEAP32[(($176)>>2)]=$271;
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeD1Ev($271) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=48;break; }
 case 48: 
 var $273$0 = ___cxa_find_matching_catch(-1, -1); var $273$1 = tempRet0;
 var $274=$273$0;
 ___cxa_call_unexpected($274);
 throw "Reached an unreachable!";
 case 49: 
 var $275=HEAP32[(($178)>>2)];
 var $276=$275;
 __ZdlPv($276);
 label=50;break;
 case 50: 
 __ZdlPv($56);
 label=51;break;
 case 51: 
 __Z4_logPKcz(4720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $278=HEAP32[(($173)>>2)];
 var $279=HEAP32[(($172)>>2)];
 var $280=($278|0)==($279|0);
 var $281=(($storage+60)|0);
 if($280){label=91;break;}else{label=52;break;}
 case 52: 
 var $282=(($5)|0);
 var $283=(($5+4)|0);
 var $284=(($5+8)|0);
 var $285=(($storage+64)|0);
 var $286=(($storage+68)|0);
 var $287=(($281)|0);
 var $288=(($config+268)|0);
 var $volumeIdx1_01041=0;label=53;break;
 case 53: 
 var $volumeIdx1_01041;
 var $289=$5;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($289)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($289+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 HEAP32[(($282)>>2)]=0;
 HEAP32[(($283)>>2)]=0;
 HEAP32[(($284)>>2)]=0;
 var $290=HEAP32[(($285)>>2)];
 var $291=HEAP32[(($286)>>2)];
 var $292=($290|0)==($291|0);
 if($292){label=58;break;}else{label=54;break;}
 case 54: 
 var $294=($290|0)==0;
 if($294){var $296=0;label=57;break;}else{label=55;break;}
 case 55: 
 (function() { try { __THREW__ = 0; return __ZN18SliceVolumeStorageC1ERKS_($290,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=80;break; }
 case 56: 
 var $_pre1090=HEAP32[(($285)>>2)];
 var $296=$_pre1090;label=57;break;
 case 57: 
 var $296;
 var $297=(($296+12)|0);
 HEAP32[(($285)>>2)]=$297;
 label=59;break;
 case 58: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI18SliceVolumeStorageNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($281,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=80;break; }
 case 59: 
 var $299=HEAP32[(($282)>>2)];
 var $300=($299|0)==0;
 if($300){label=70;break;}else{label=60;break;}
 case 60: 
 var $301=HEAP32[(($283)>>2)];
 var $302=($299|0)==($301|0);
 if($302){var $320=$299;label=69;break;}else{var $303=$301;label=61;break;}
 case 61: 
 var $303;
 var $304=((($303)-(12))|0);
 HEAP32[(($283)>>2)]=$304;
 var $305=(($304)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=($306|0)==0;
 if($307){var $308=$304;label=62;break;}else{label=63;break;}
 case 62: 
 var $308;
 var $309=($299|0)==($308|0);
 if($309){label=68;break;}else{var $303=$308;label=61;break;}
 case 63: 
 var $310=((($303)-(12)+4)|0);
 label=64;break;
 case 64: 
 var $311=HEAP32[(($310)>>2)];
 var $312=($306|0)==($311|0);
 if($312){label=67;break;}else{label=65;break;}
 case 65: 
 var $314=((($311)-(96))|0);
 HEAP32[(($310)>>2)]=$314;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=66;break; }
 case 66: 
 var $316$0 = ___cxa_find_matching_catch(-1, -1); var $316$1 = tempRet0;
 var $317=$316$0;
 ___cxa_call_unexpected($317);
 throw "Reached an unreachable!";
 case 67: 
 var $318=HEAP32[(($305)>>2)];
 var $319=$318;
 __ZdlPv($319);
 var $_pre29_i_i_i_i_i633=HEAP32[(($283)>>2)];
 var $308=$_pre29_i_i_i_i_i633;label=62;break;
 case 68: 
 var $_pre_i_i_i_i_i634=HEAP32[(($282)>>2)];
 var $320=$_pre_i_i_i_i_i634;label=69;break;
 case 69: 
 var $320;
 var $321=$320;
 __ZdlPv($321);
 label=70;break;
 case 70: 
 var $322=HEAP32[(($287)>>2)];
 var $323=(($322+((($volumeIdx1_01041)*(12))&-1))|0);
 var $324=HEAP32[(($172)>>2)];
 var $325=(($324+($volumeIdx1_01041<<2))|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=HEAP32[(($288)>>2)];
 var $328=$327&3;
 (function() { try { __THREW__ = 0; return __Z16createLayerPartsR18SliceVolumeStorageP6Sliceri($323,$326,$328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $330=HEAP32[(($172)>>2)];
 var $331=(($330+($volumeIdx1_01041<<2))|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=($332|0)==0;
 if($333){var $350=$330;label=79;break;}else{label=72;break;}
 case 72: 
 var $335=(($332)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=($336|0)==0;
 if($337){label=78;break;}else{label=73;break;}
 case 73: 
 var $338=(($332+4)|0);
 label=74;break;
 case 74: 
 var $339=HEAP32[(($338)>>2)];
 var $340=($336|0)==($339|0);
 if($340){label=77;break;}else{label=75;break;}
 case 75: 
 var $342=((($339)-(48))|0);
 HEAP32[(($338)>>2)]=$342;
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayerD2Ev($342) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=76;break; }
 case 76: 
 var $344$0 = ___cxa_find_matching_catch(-1, -1); var $344$1 = tempRet0;
 var $345=$344$0;
 ___cxa_call_unexpected($345);
 throw "Reached an unreachable!";
 case 77: 
 var $346=HEAP32[(($335)>>2)];
 var $347=$346;
 __ZdlPv($347);
 label=78;break;
 case 78: 
 var $348=$332;
 __ZdlPv($348);
 var $_pre1080=HEAP32[(($172)>>2)];
 var $350=$_pre1080;label=79;break;
 case 79: 
 var $350;
 var $351=((($volumeIdx1_01041)+(1))|0);
 var $352=HEAP32[(($173)>>2)];
 var $353=$352;
 var $354=$350;
 var $355=((($353)-($354))|0);
 var $356=$355>>2;
 var $357=($351>>>0)<($356>>>0);
 if($357){var $volumeIdx1_01041=$351;label=53;break;}else{label=91;break;}
 case 80: 
 var $359$0 = ___cxa_find_matching_catch(-1, -1); var $359$1 = tempRet0;
 var $360=$359$0;
 var $361=$359$1;
 var $362=HEAP32[(($282)>>2)];
 var $363=($362|0)==0;
 if($363){var $_6=$360;var $_6583=$361;label=465;break;}else{label=81;break;}
 case 81: 
 var $364=HEAP32[(($283)>>2)];
 var $365=($362|0)==($364|0);
 if($365){var $383=$362;label=90;break;}else{var $366=$364;label=82;break;}
 case 82: 
 var $366;
 var $367=((($366)-(12))|0);
 HEAP32[(($283)>>2)]=$367;
 var $368=(($367)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=($369|0)==0;
 if($370){var $371=$367;label=83;break;}else{label=84;break;}
 case 83: 
 var $371;
 var $372=($362|0)==($371|0);
 if($372){label=89;break;}else{var $366=$371;label=82;break;}
 case 84: 
 var $373=((($366)-(12)+4)|0);
 label=85;break;
 case 85: 
 var $374=HEAP32[(($373)>>2)];
 var $375=($369|0)==($374|0);
 if($375){label=88;break;}else{label=86;break;}
 case 86: 
 var $377=((($374)-(96))|0);
 HEAP32[(($373)>>2)]=$377;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($377) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=87;break; }
 case 87: 
 var $379$0 = ___cxa_find_matching_catch(-1, -1); var $379$1 = tempRet0;
 var $380=$379$0;
 ___cxa_call_unexpected($380);
 throw "Reached an unreachable!";
 case 88: 
 var $381=HEAP32[(($368)>>2)];
 var $382=$381;
 __ZdlPv($382);
 var $_pre29_i_i_i_i_i640=HEAP32[(($283)>>2)];
 var $371=$_pre29_i_i_i_i_i640;label=83;break;
 case 89: 
 var $_pre_i_i_i_i_i642=HEAP32[(($282)>>2)];
 var $383=$_pre_i_i_i_i_i642;label=90;break;
 case 90: 
 var $383;
 var $384=$383;
 __ZdlPv($384);
 var $_6=$360;var $_6583=$361;label=465;break;
 case 91: 
 var $385=(($config+88)|0);
 var $386=HEAP32[(($385)>>2)];
 (function() { try { __THREW__ = 0; return __Z30generateMultipleVolumesOverlapRNSt3__16vectorI18SliceVolumeStorageNS_9allocatorIS1_EEEEi($281,$386) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=42;break; }
 case 92: 
 var $388=$tv_i_i647;
 var $389=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i647,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=42;break; }
 case 93: 
 var $390=(($tv_i_i647)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=(($tv_i_i647+4)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=$tv_i4_i646;
 var $395=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i646,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=42;break; }
 case 94: 
 var $397=(($tv_i4_i646)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=($398|0);
 var $400=(($tv_i4_i646+4)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=($401|0);
 var $403=($402)/(1000000);
 var $404=($399)+($403);
 var $405=($393|0);
 var $406=($405)/(1000000);
 var $407=($391|0);
 var $408=($407)+($406);
 var $409=($408)-($238);
 __Z4_logPKcz(4648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$409,tempVarArgs)); STACKTOP=tempVarArgs;
 var $410=(($281)|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=(($411+4)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(($411)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=$413;
 var $417=$415;
 var $418=((($416)-($417))|0);
 var $419=(((($418|0))/(12))&-1);
 var $420=($413|0)==($415|0);
 if($420){label=103;break;}else{label=95;break;}
 case 95: 
 var $421=(($storage+64)|0);
 var $422=HEAP32[((_stdout)>>2)];
 var $423=(($config+28)|0);
 var $424=(($config+32)|0);
 var $layerNr_01024=0;var $425=$411;label=96;break;
 case 96: 
 var $425;
 var $layerNr_01024;
 var $426=HEAP32[(($421)>>2)];
 var $427=($426|0)==($425|0);
 if($427){label=99;break;}else{var $volumeIdx2_01021=0;var $428=$425;label=97;break;}
 case 97: 
 var $428;
 var $volumeIdx2_01021;
 var $429=(($428+((($volumeIdx2_01021)*(12))&-1))|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=(($430+((($layerNr_01024)*(12))&-1))|0);
 var $432=HEAP32[(($423)>>2)];
 var $433=HEAP32[(($424)>>2)];
 (function() { try { __THREW__ = 0; return __Z14generateInsetsP10SliceLayerii($431,$432,$433) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=40;break; }
 case 98: 
 var $435=((($volumeIdx2_01021)+(1))|0);
 var $436=HEAP32[(($421)>>2)];
 var $437=HEAP32[(($410)>>2)];
 var $438=$436;
 var $439=$437;
 var $440=((($438)-($439))|0);
 var $441=(((($440|0))/(12))&-1);
 var $442=($435>>>0)<($441>>>0);
 if($442){var $volumeIdx2_01021=$435;var $428=$437;label=97;break;}else{label=99;break;}
 case 99: 
 var $443=((($layerNr_01024)+(1))|0);
 var $444=HEAP32[((14448)>>2)];
 var $445=($444|0)<2;
 if($445){label=100;break;}else{label=102;break;}
 case 100: 
 var $446=($443>>>0)<($419>>>0);
 if($446){label=101;break;}else{label=103;break;}
 case 101: 
 var $_pre1089=HEAP32[(($410)>>2)];
 var $layerNr_01024=$443;var $425=$_pre1089;label=96;break;
 case 102: 
 var $448=_fprintf($422,6080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4560,HEAP32[(((tempVarArgs)+(8))>>2)]=$443,HEAP32[(((tempVarArgs)+(16))>>2)]=$419,tempVarArgs)); STACKTOP=tempVarArgs;
 var $449=_fflush($422);
 label=100;break;
 case 103: 
 var $450=$tv_i_i652;
 var $451=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i652,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=42;break; }
 case 104: 
 var $452=(($tv_i_i652)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=(($tv_i_i652+4)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=$tv_i4_i651;
 var $457=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i651,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=42;break; }
 case 105: 
 var $459=(($tv_i4_i651)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=($460|0);
 var $462=(($tv_i4_i651+4)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=($463|0);
 var $465=($464)/(1000000);
 var $466=($461)+($465);
 var $467=($455|0);
 var $468=($467)/(1000000);
 var $469=($453|0);
 var $470=($469)+($468);
 var $471=($470)-($404);
 __Z4_logPKcz(4504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$471,tempVarArgs)); STACKTOP=tempVarArgs;
 if($420){label=114;break;}else{label=106;break;}
 case 106: 
 var $472=(($storage+64)|0);
 var $473=HEAP32[((_stdout)>>2)];
 var $474=(($config+28)|0);
 var $475=(($config+36)|0);
 var $476=(($config+40)|0);
 var $477=(($config+48)|0);
 var $layerNr3_01015=0;label=107;break;
 case 107: 
 var $layerNr3_01015;
 var $478=HEAP32[(($472)>>2)];
 var $479=HEAP32[(($410)>>2)];
 var $480=($478|0)==($479|0);
 if($480){label=111;break;}else{var $volumeIdx4_01012=0;var $481=$479;label=108;break;}
 case 108: 
 var $481;
 var $volumeIdx4_01012;
 var $482=(($481+((($volumeIdx4_01012)*(12))&-1))|0);
 var $483=HEAP32[(($474)>>2)];
 var $484=HEAP32[(($475)>>2)];
 var $485=HEAP32[(($476)>>2)];
 var $486=HEAP32[(($477)>>2)];
 (function() { try { __THREW__ = 0; return __Z13generateSkinsiR18SliceVolumeStorageiiii($layerNr3_01015,$482,$483,$484,$485,$486) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=39;break; }
 case 109: 
 var $488=HEAP32[(($410)>>2)];
 var $489=(($488+((($volumeIdx4_01012)*(12))&-1))|0);
 var $490=HEAP32[(($474)>>2)];
 var $491=HEAP32[(($475)>>2)];
 var $492=HEAP32[(($476)>>2)];
 (function() { try { __THREW__ = 0; return __Z14generateSparseiR18SliceVolumeStorageiii($layerNr3_01015,$489,$490,$491,$492) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=39;break; }
 case 110: 
 var $494=((($volumeIdx4_01012)+(1))|0);
 var $495=HEAP32[(($472)>>2)];
 var $496=HEAP32[(($410)>>2)];
 var $497=$495;
 var $498=$496;
 var $499=((($497)-($498))|0);
 var $500=(((($499|0))/(12))&-1);
 var $501=($494>>>0)<($500>>>0);
 if($501){var $volumeIdx4_01012=$494;var $481=$496;label=108;break;}else{label=111;break;}
 case 111: 
 var $502=((($layerNr3_01015)+(1))|0);
 var $503=HEAP32[((14448)>>2)];
 var $504=($503|0)<2;
 if($504){label=112;break;}else{label=113;break;}
 case 112: 
 var $505=($502>>>0)<($419>>>0);
 if($505){var $layerNr3_01015=$502;label=107;break;}else{label=114;break;}
 case 113: 
 var $507=_fprintf($473,6080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4464,HEAP32[(((tempVarArgs)+(8))>>2)]=$502,HEAP32[(((tempVarArgs)+(16))>>2)]=$419,tempVarArgs)); STACKTOP=tempVarArgs;
 var $508=_fflush($473);
 label=112;break;
 case 114: 
 var $509=$tv_i_i658;
 var $510=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i658,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=42;break; }
 case 115: 
 var $511=(($tv_i_i658)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($tv_i_i658+4)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=$tv_i4_i657;
 var $516=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i657,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=42;break; }
 case 116: 
 var $518=(($tv_i4_i657)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=($519|0);
 var $521=(($tv_i4_i657+4)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=($522|0);
 var $524=($523)/(1000000);
 var $525=($520)+($524);
 var $526=($514|0);
 var $527=($526)/(1000000);
 var $528=($512|0);
 var $529=($528)+($527);
 var $530=($529)-($466);
 __Z4_logPKcz(4384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$530,tempVarArgs)); STACKTOP=tempVarArgs;
 var $531=(($config+52)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=(($config+28)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=(($config+56)|0);
 var $536=HEAP32[(($535)>>2)];
 var $537=(($config+60)|0);
 var $538=HEAP32[(($537)>>2)];
 (function() { try { __THREW__ = 0; return __Z13generateSkirtR16SliceDataStorageiiii($storage,$532,$534,$536,$538) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=42;break; }
 case 117: 
 var $540=(($config+160)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=HEAP32[(($246)>>2)];
 var $543=(($config+120)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=($544|0)>0;
 var $546=(($config+128)|0);
 var $547=HEAP32[(($546)>>2)];
 (function() { try { __THREW__ = 0; return __Z12generateRaftR16SliceDataStorageiibi($storage,$541,$542,$545,$547) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=42;break; }
 case 118: 
 var $548=(($storage+64)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=HEAP32[(($410)>>2)];
 var $551=($549|0)==($550|0);
 if($551){label=128;break;}else{var $volumeIdx5_01004=0;var $553=$549;var $552=$550;label=119;break;}
 case 119: 
 var $552;
 var $553;
 var $volumeIdx5_01004;
 if($420){var $609=$553;var $608=$552;label=127;break;}else{var $layerNr6_0996=0;var $554=$552;label=120;break;}
 case 120: 
 var $554;
 var $layerNr6_0996;
 var $555=(($554+((($volumeIdx5_01004)*(12))&-1))|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=(($556+((($layerNr6_0996)*(12))&-1)+4)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=(($556+((($layerNr6_0996)*(12))&-1))|0);
 var $560=HEAP32[(($559)>>2)];
 var $561=($558|0)==($560|0);
 if($561){var $604=$554;label=125;break;}else{label=121;break;}
 case 121: 
 var $562=($layerNr6_0996|0)==0;
 var $563=((($layerNr6_0996)-(1))|0);
 if($562){var $partNr_0992_us=0;var $565=$560;label=122;break;}else{var $partNr_0992=0;var $581=$556;var $580=$560;label=123;break;}
 case 122: 
 var $565;
 var $partNr_0992_us;
 var $566=(($565+((($partNr_0992_us)*(96))&-1)+92)|0);
 HEAP32[(($566)>>2)]=-1;
 var $567=((($partNr_0992_us)+(1))|0);
 var $568=HEAP32[(($410)>>2)];
 var $569=(($568+((($volumeIdx5_01004)*(12))&-1))|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=(($570+4)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=(($570)|0);
 var $574=HEAP32[(($573)>>2)];
 var $575=$572;
 var $576=$574;
 var $577=((($575)-($576))|0);
 var $578=(((($577|0))/(96))&-1);
 var $579=($567>>>0)<($578>>>0);
 if($579){var $partNr_0992_us=$567;var $565=$574;label=122;break;}else{var $604=$568;label=125;break;}
 case 123: 
 var $580;
 var $581;
 var $partNr_0992;
 var $582=(($580+((($partNr_0992)*(96))&-1))|0);
 var $583=(($581+((($563)*(12))&-1))|0);
 var $584=(function() { try { __THREW__ = 0; return __Z11bridgeAngleP14SliceLayerPartP10SliceLayer($582,$583) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { label=38;break; }
 case 124: 
 var $586=HEAP32[(($410)>>2)];
 var $587=(($586+((($volumeIdx5_01004)*(12))&-1))|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=(($588+((($layerNr6_0996)*(12))&-1))|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+((($partNr_0992)*(96))&-1)+92)|0);
 HEAP32[(($591)>>2)]=$584;
 var $_pre1079=HEAP32[(($410)>>2)];
 var $592=((($partNr_0992)+(1))|0);
 var $593=(($_pre1079+((($volumeIdx5_01004)*(12))&-1))|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=(($594+((($layerNr6_0996)*(12))&-1)+4)|0);
 var $596=HEAP32[(($595)>>2)];
 var $597=(($594+((($layerNr6_0996)*(12))&-1))|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=$596;
 var $600=$598;
 var $601=((($599)-($600))|0);
 var $602=(((($601|0))/(96))&-1);
 var $603=($592>>>0)<($602>>>0);
 if($603){var $partNr_0992=$592;var $581=$594;var $580=$598;label=123;break;}else{var $604=$_pre1079;label=125;break;}
 case 125: 
 var $604;
 var $605=((($layerNr6_0996)+(1))|0);
 var $606=($605>>>0)<($419>>>0);
 if($606){var $layerNr6_0996=$605;var $554=$604;label=120;break;}else{label=126;break;}
 case 126: 
 var $_pre1078=HEAP32[(($548)>>2)];
 var $609=$_pre1078;var $608=$604;label=127;break;
 case 127: 
 var $608;
 var $609;
 var $610=((($volumeIdx5_01004)+(1))|0);
 var $611=$609;
 var $612=$608;
 var $613=((($611)-($612))|0);
 var $614=(((($613|0))/(12))&-1);
 var $615=($610>>>0)<($614>>>0);
 if($615){var $volumeIdx5_01004=$610;var $553=$609;var $552=$608;label=119;break;}else{label=128;break;}
 case 128: 
 var $616=(($config+64)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=(($config+72)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=(($config+68)|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=(($config+80)|0);
 var $623=HEAP32[(($622)>>2)];
 var $624=($617|0);
 var $625=($624)/(1000);
 var $626=(($gcode+24)|0);
 HEAPF64[(($626)>>3)]=$625;
 var $627=(($gcode+332)|0);
 HEAP32[(($627)>>2)]=$619;
 var $628=($621|0);
 var $629=($628)/(1000);
 var $630=(($gcode+32)|0);
 HEAPF64[(($630)>>3)]=$629;
 var $631=($623|0);
 var $632=($631)/(1000);
 var $633=(($gcode+40)|0);
 HEAPF64[(($633)>>3)]=$632;
 if($firstFile){label=129;break;}else{label=132;break;}
 case 129: 
 var $635=HEAP32[(($19)>>2)];
 var $636=($635|0)==1;
 var $637=(($gcode)|0);
 if($636){label=130;break;}else{label=131;break;}
 case 130: 
 var $639=HEAP32[(($637)>>2)];
 var $640=_fprintf($639,512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4328,tempVarArgs)); STACKTOP=tempVarArgs;
 var $641=HEAP32[(($637)>>2)];
 var $642=_fprintf($641,512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4264,tempVarArgs)); STACKTOP=tempVarArgs;
 var $643=HEAP32[(($637)>>2)];
 var $644=_fprintf($643,512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4200,tempVarArgs)); STACKTOP=tempVarArgs;
 label=131;break;
 case 131: 
 var $645=(($config+404)|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=HEAP32[(($637)>>2)];
 var $648=_fprintf($647,512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$646,tempVarArgs)); STACKTOP=tempVarArgs;
 label=147;break;
 case 132: 
 var $650=(($gcode+348)|0);
 var $651=HEAP32[(($650)>>2)];
 var $652=($651|0)==0;
 if($652){label=137;break;}else{label=133;break;}
 case 133: 
 var $654=HEAP32[(($19)>>2)];
 var $655=($654|0)==2;
 var $656=(($gcode)|0);
 var $657=HEAP32[(($656)>>2)];
 if($655){label=134;break;}else{label=135;break;}
 case 134: 
 var $659=_fwrite(576,8,1,$657);
 label=136;break;
 case 135: 
 var $661=_fwrite(528,5,1,$657);
 label=136;break;
 case 136: 
 HEAP32[(($650)>>2)]=0;
 label=137;break;
 case 137: 
 var $663=(($gcode+8)|0);
 var $664=HEAPF64[(($663)>>3)];
 var $665=$664!=0;
 if($665){label=138;break;}else{var $677=$664;label=139;break;}
 case 138: 
 var $667=(($gcode)|0);
 var $668=HEAP32[(($667)>>2)];
 var $669=_fwrite(664,7,1,$668);
 var $670=HEAPF64[(($663)>>3)];
 var $671=(($gcode+360)|0);
 var $672=HEAPF64[(($671)>>3)];
 var $673=($670)+($672);
 HEAPF64[(($671)>>3)]=$673;
 var $674=(($gcode+48)|0);
 var $675=HEAPF64[(($674)>>3)];
 var $676=($675)-($670);
 HEAPF64[(($674)>>3)]=$676;
 HEAPF64[(($663)>>3)]=0;
 var $677=0;label=139;break;
 case 139: 
 var $677;
 var $678=HEAPF64[(($626)>>3)];
 var $679=$678>0;
 if($679){label=140;break;}else{label=146;break;}
 case 140: 
 var $681=(($gcode+340)|0);
 var $682=HEAP8[($681)];
 var $683=$682&1;
 var $684=(($683<<24)>>24)==0;
 if($684){label=141;break;}else{label=146;break;}
 case 141: 
 var $686=(($gcode+48)|0);
 var $687=HEAPF64[(($686)>>3)];
 var $688=HEAPF64[(($633)>>3)];
 var $689=($687)+($688);
 var $690=$689<$677;
 if($690){label=142;break;}else{label=146;break;}
 case 142: 
 var $692=HEAP32[(($19)>>2)];
 var $693=($692|0)==1;
 var $694=(($gcode)|0);
 var $695=HEAP32[(($694)>>2)];
 if($693){label=143;break;}else{label=144;break;}
 case 143: 
 var $697=_fwrite(688,4,1,$695);
 label=145;break;
 case 144: 
 var $699=HEAP32[(($627)>>2)];
 var $700=((($699)*(60))&-1);
 var $701=($677)-($678);
 var $702=_fprintf($695,904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$700,HEAPF64[(((tempVarArgs)+(8))>>3)]=$701,tempVarArgs)); STACKTOP=tempVarArgs;
 var $703=HEAP32[(($627)>>2)];
 var $704=(($gcode+328)|0);
 HEAP32[(($704)>>2)]=$703;
 label=145;break;
 case 145: 
 var $706=HEAPF64[(($663)>>3)];
 HEAPF64[(($686)>>3)]=$706;
 HEAP8[($681)]=1;
 label=146;break;
 case 146: 
 var $708=HEAP32[((14496)>>2)];
 var $709=((($708)+(5000))|0);
 var $710=(($gcode+336)|0);
 HEAP32[(($710)>>2)]=$709;
 var $711=(($258)|0);
 var $712=HEAP32[(($711)>>2)];
 var $713$0=$712;
 var $713$1=(((($712|0)<0))|0)?-1:0;
 var $714=(($storage+16)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716$0=$715;
 var $716$1=(((($715|0)<0))|0)?-1:0;
 var $717=(($6)|0);
 var $st$7$0=(($717)|0);
 HEAP32[(($st$7$0)>>2)]=$713$0;
 var $st$8$1=(($717+4)|0);
 HEAP32[(($st$8$1)>>2)]=$713$1;
 var $718=(($6+8)|0);
 var $st$9$0=(($718)|0);
 HEAP32[(($st$9$0)>>2)]=$716$0;
 var $st$10$1=(($718+4)|0);
 HEAP32[(($st$10$1)>>2)]=$716$1;
 var $719=(($config+108)|0);
 var $720=HEAP32[(($719)>>2)];
 __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($gcode,$6,$720,0);
 label=147;break;
 case 147: 
 __ZN11GCodeExport10addCommentEPKcz($gcode,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$419,tempVarArgs)); STACKTOP=tempVarArgs;
 var $722=(($config+100)|0);
 var $723=HEAP32[(($722)>>2)];
 var $724=HEAP32[(($533)>>2)];
 var $725=(($skirtConfig)|0);
 HEAP32[(($725)>>2)]=$723;
 var $726=(($skirtConfig+4)|0);
 HEAP32[(($726)>>2)]=$724;
 var $727=(($skirtConfig+8)|0);
 HEAP32[(($727)>>2)]=4080;
 var $728=(($inset0Config)|0);
 HEAP32[(($728)>>2)]=$723;
 var $729=(($inset0Config+4)|0);
 HEAP32[(($729)>>2)]=$724;
 var $730=(($inset0Config+8)|0);
 HEAP32[(($730)>>2)]=4032;
 var $731=(($inset1Config)|0);
 HEAP32[(($731)>>2)]=$723;
 var $732=(($inset1Config+4)|0);
 HEAP32[(($732)>>2)]=$724;
 var $733=(($inset1Config+8)|0);
 HEAP32[(($733)>>2)]=3920;
 var $734=(($config+104)|0);
 var $735=HEAP32[(($734)>>2)];
 var $736=(($fillConfig)|0);
 HEAP32[(($736)>>2)]=$735;
 var $737=(($fillConfig+4)|0);
 HEAP32[(($737)>>2)]=$724;
 var $738=(($fillConfig+8)|0);
 HEAP32[(($738)>>2)]=3872;
 var $739=(($supportConfig)|0);
 HEAP32[(($739)>>2)]=$723;
 var $740=(($supportConfig+4)|0);
 HEAP32[(($740)>>2)]=$724;
 var $741=(($supportConfig+8)|0);
 HEAP32[(($741)>>2)]=3800;
 var $742=(($config+168)|0);
 var $743=HEAP32[(($742)>>2)];
 var $744=($743|0)>0;
 var $745=(($config+176)|0);
 if($744){label=149;break;}else{label=148;break;}
 case 148: 
 var $746=(($config+108)|0);
 var $747=(($config+76)|0);
 var $748=(($gcodeLayer11)|0);
 var $749=(($gcodeLayer11+8)|0);
 var $750=(($gcodeLayer11+16)|0);
 var $751=(($gcodeLayer11+40)|0);
 var $752=$749;
 var $753=(($gcodeLayer11+44)|0);
 var $754=(($gcodeLayer11+48)|0);
 var $755=(($gcode+56)|0);
 var $756=(($gcode+60)|0);
 var $757=(($gcodeLayer11+36)|0);
 var $758=(($gcodeLayer11+52)|0);
 var $759=(($gcodeLayer11+56)|0);
 var $760=(($gcodeLayer11+72)|0);
 var $761=(($gcodeLayer11+68)|0);
 var $762=(($gcodeLayer11+69)|0);
 var $763=(($gcode+344)|0);
 var $764=$760;
 var $765=(($gcodeLayer11+60)|0);
 var $766=(($gcodeLayer11+64)|0);
 var $767=(($config+16)|0);
 var $768=(($config+12)|0);
 var $769=(($gcode+336)|0);
 var $770=(($storage+36)|0);
 var $771=(($config+136)|0);
 var $772=(($storage+72)|0);
 var $773=(($config+132)|0);
 var $774=$supportClipper;
 var $775=$supportClipper;
 var $776=(($supportGenerator)|0);
 var $777=(($supportLines)|0);
 var $778=(($supportLines+4)|0);
 var $779=(($supportLines+8)|0);
 var $780=(($config+124)|0);
 var $781=(($config+48)|0);
 var $782=(($supportGenerator)|0);
 var $783=(($supportGenerator+4)|0);
 var $784=(($polys)|0);
 var $785=(($polys+4)|0);
 var $786=(($polys+8)|0);
 var $787=(($config+92)|0);
 var $788=(($config+96)|0);
 var $789=(($config+140)|0);
 var $790=(($config+144)|0);
 var $791=(($config+20)|0);
 var $792=(($gcode+16)|0);
 var $793=(($config+24)|0);
 var $794=(($config+112)|0);
 var $795=(($gcode+348)|0);
 var $796=(($gcode)|0);
 var $797=(($config+148)|0);
 var $798=(($config+156)|0);
 var $799=(($config+152)|0);
 var $800=$partOrderOptimizer;
 var $_sroa_0909_0__idx=(($partOrderOptimizer)|0);
 var $_sroa_1910_8__idx911=(($partOrderOptimizer+8)|0);
 var $801=(($partOrderOptimizer+44)|0);
 var $802=(($partOrderOptimizer+40)|0);
 var $803=(($partOrderOptimizer+28)|0);
 var $804=(($partOrderOptimizer+16)|0);
 var $805=(($partOrderOptimizer+20)|0);
 var $806=(($partOrderOptimizer+32)|0);
 var $807=(($config+84)|0);
 var $808=(($config+32)|0);
 var $809=(($fillPolygons)|0);
 var $810=(($fillPolygons+4)|0);
 var $811=(($fillPolygons+8)|0);
 var $812=(($config+44)|0);
 var $813=$p_i;
 var $814=$1;
 var $815=(($gcodeLayer11+8)|0);
 var $816=$815;
 var $817=$2;
 var $818=(($partOrderOptimizer+24)|0);
 var $819=(($partOrderOptimizer+16)|0);
 var $820=HEAP32[((_stdout)>>2)];
 var $layerNr10_0=0;var $volumeIdx9_0=0;label=202;break;
 case 149: 
 var $822=HEAP32[(($745)>>2)];
 var $823=($822|0)>0;
 if($823){label=150;break;}else{label=148;break;}
 case 150: 
 var $825=(($config+96)|0);
 var $826=HEAP32[(($825)>>2)];
 var $827=(($config+172)|0);
 var $828=HEAP32[(($827)>>2)];
 var $829=(($raftBaseConfig)|0);
 HEAP32[(($829)>>2)]=$826;
 var $830=(($raftBaseConfig+4)|0);
 HEAP32[(($830)>>2)]=$828;
 var $831=(($raftBaseConfig+8)|0);
 HEAP32[(($831)>>2)]=3800;
 var $832=(($config+180)|0);
 var $833=HEAP32[(($832)>>2)];
 var $834=(($raftInterfaceConfig)|0);
 HEAP32[(($834)>>2)]=$826;
 var $835=(($raftInterfaceConfig+4)|0);
 HEAP32[(($835)>>2)]=$833;
 var $836=(($raftInterfaceConfig+8)|0);
 HEAP32[(($836)>>2)]=3800;
 __ZN11GCodeExport10addCommentEPKcz($gcode,3720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 __ZN11GCodeExport10addCommentEPKcz($gcode,3600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $837=(($config+108)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=(($config+76)|0);
 var $840=HEAP32[(($839)>>2)];
 var $841=(($gcodeLayer)|0);
 HEAP32[(($841)>>2)]=$gcode;
 var $842=(($gcodeLayer+8)|0);
 var $843=(($gcodeLayer+16)|0);
 var $844=(($gcodeLayer+40)|0);
 var $845=$842;
 HEAP32[(($845)>>2)]=0; HEAP32[((($845)+(4))>>2)]=0; HEAP32[((($845)+(8))>>2)]=0; HEAP32[((($845)+(12))>>2)]=0; HEAP32[((($845)+(16))>>2)]=0; HEAP32[((($845)+(20))>>2)]=0; HEAP32[((($845)+(24))>>2)]=0;
 HEAP32[(($844)>>2)]=$838;
 var $846=(($gcodeLayer+44)|0);
 HEAP32[(($846)>>2)]=0;
 var $847=(($gcodeLayer+48)|0);
 HEAP32[(($847)>>2)]=1024;
 var $848=(($gcode+56)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850$0=$849;
 var $850$1=(((($849|0)<0))|0)?-1:0;
 var $851=(($gcode+60)|0);
 var $852=HEAP32[(($851)>>2)];
 var $853$0=$852;
 var $853$1=(((($852|0)<0))|0)?-1:0;
 var $st$11$0=(($842)|0);
 HEAP32[(($st$11$0)>>2)]=$850$0;
 var $st$12$1=(($842+4)|0);
 HEAP32[(($st$12$1)>>2)]=$850$1;
 var $st$13$0=(($843)|0);
 HEAP32[(($st$13$0)>>2)]=$853$0;
 var $st$14$1=(($843+4)|0);
 HEAP32[(($st$14$1)>>2)]=$853$1;
 var $854=(($gcodeLayer+36)|0);
 HEAP32[(($854)>>2)]=0;
 var $855=(($gcodeLayer+52)|0);
 HEAP32[(($855)>>2)]=100;
 var $856=(($gcodeLayer+56)|0);
 HEAP32[(($856)>>2)]=100;
 var $857=(($gcodeLayer+72)|0);
 var $858=(($gcodeLayer+68)|0);
 HEAP8[($858)]=0;
 var $859=(($gcodeLayer+69)|0);
 HEAP8[($859)]=0;
 var $860=(($gcode+344)|0);
 var $861=$857;
 HEAP32[(($861)>>2)]=0; HEAP32[((($861)+(4))>>2)]=0; HEAP32[((($861)+(8))>>2)]=0; HEAP32[((($861)+(12))>>2)]=0;
 var $862=HEAP32[(($860)>>2)];
 var $863=(($gcodeLayer+60)|0);
 HEAP32[(($863)>>2)]=$862;
 var $864=(($gcodeLayer+64)|0);
 HEAP32[(($864)>>2)]=$840;
 var $865=HEAP32[(($742)>>2)];
 var $866=(($gcode+336)|0);
 HEAP32[(($866)>>2)]=$865;
 var $867=HEAP32[(($742)>>2)];
 var $868=(($config+20)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=(($config+24)|0);
 var $871=($869|0);
 var $872=($871)/(1000);
 var $873=($872)*((0.5));
 var $874=HEAP32[(($19)>>2)];
 var $875=($874|0)==1;
 var $876=($867|0);
 var $877=($876)/(1000);
 if($875){label=151;break;}else{label=152;break;}
 case 151: 
 var $879=(($gcode+16)|0);
 HEAPF64[(($879)>>3)]=$877;
 label=153;break;
 case 152: 
 var $881=HEAP32[(($870)>>2)];
 var $882=($873)*((3.141592653589793));
 var $883=($873)*($882);
 var $884=($877)/($883);
 var $885=($881|0);
 var $886=($885)*($884);
 var $887=($886)/(100);
 var $888=(($gcode+16)|0);
 HEAPF64[(($888)>>3)]=$887;
 label=153;break;
 case 153: 
 var $889=(($storage+48)|0);
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer,$889,$raftBaseConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=154;break; } else { label=181;break; }
 case 154: 
 var $891=(($raftLines)|0);
 HEAP32[(($891)>>2)]=0;
 var $892=(($raftLines+4)|0);
 HEAP32[(($892)>>2)]=0;
 var $893=(($raftLines+8)|0);
 HEAP32[(($893)>>2)]=0;
 var $894=HEAP32[(($827)>>2)];
 var $895=(($config+164)|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=(($config+48)|0);
 var $898=HEAP32[(($897)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($889,$raftLines,$894,$896,$898,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=155;break; } else { label=182;break; }
 case 155: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer,$raftLines,$raftBaseConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=182;break; }
 case 156: 
 __ZN12GCodePlanner10writeGCodeEb($gcodeLayer,0);
 var $901=HEAP32[(($891)>>2)];
 var $902=($901|0)==0;
 if($902){label=165;break;}else{label=157;break;}
 case 157: 
 var $903=HEAP32[(($892)>>2)];
 var $904=($901|0)==($903|0);
 if($904){var $920=$901;label=164;break;}else{var $905=$903;label=158;break;}
 case 158: 
 var $905;
 var $906=((($905)-(12))|0);
 HEAP32[(($892)>>2)]=$906;
 var $907=(($906)|0);
 var $908=HEAP32[(($907)>>2)];
 var $909=$908;
 var $910=($908|0)==0;
 if($910){var $911=$906;label=159;break;}else{label=160;break;}
 case 159: 
 var $911;
 var $912=($901|0)==($911|0);
 if($912){label=163;break;}else{var $905=$911;label=158;break;}
 case 160: 
 var $913=((($905)-(12)+4)|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=($908|0)==($914|0);
 if($915){label=162;break;}else{label=161;break;}
 case 161: 
 var $scevgep_i_i_i_i_i_i=((($914)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $916=(((-$909))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$916)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $917=$uglygep29_i_i_i_i_i_i>>>4;
 var $918=$917^-1;
 var $scevgep30_i_i_i_i_i_i=(($914+($918<<4))|0);
 HEAP32[(($913)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=162;break;
 case 162: 
 var $919=$908;
 __ZdlPv($919);
 var $_pre29_i_i_i=HEAP32[(($892)>>2)];
 var $911=$_pre29_i_i_i;label=159;break;
 case 163: 
 var $_pre_i_i_i=HEAP32[(($891)>>2)];
 var $920=$_pre_i_i_i;label=164;break;
 case 164: 
 var $920;
 var $921=$920;
 __ZdlPv($921);
 label=165;break;
 case 165: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlannerD1Ev($gcodeLayer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=166;break; } else { label=42;break; }
 case 166: 
 __ZN11GCodeExport10addCommentEPKcz($gcode,3552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 __ZN11GCodeExport10addCommentEPKcz($gcode,3600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $923=HEAP32[(($837)>>2)];
 var $924=HEAP32[(($839)>>2)];
 var $925=(($gcodeLayer7)|0);
 HEAP32[(($925)>>2)]=$gcode;
 var $926=(($gcodeLayer7+8)|0);
 var $927=(($gcodeLayer7+16)|0);
 var $928=(($gcodeLayer7+40)|0);
 var $929=$926;
 HEAP32[(($929)>>2)]=0; HEAP32[((($929)+(4))>>2)]=0; HEAP32[((($929)+(8))>>2)]=0; HEAP32[((($929)+(12))>>2)]=0; HEAP32[((($929)+(16))>>2)]=0; HEAP32[((($929)+(20))>>2)]=0; HEAP32[((($929)+(24))>>2)]=0;
 HEAP32[(($928)>>2)]=$923;
 var $930=(($gcodeLayer7+44)|0);
 HEAP32[(($930)>>2)]=0;
 var $931=(($gcodeLayer7+48)|0);
 HEAP32[(($931)>>2)]=1024;
 var $932=HEAP32[(($848)>>2)];
 var $933$0=$932;
 var $933$1=(((($932|0)<0))|0)?-1:0;
 var $934=HEAP32[(($851)>>2)];
 var $935$0=$934;
 var $935$1=(((($934|0)<0))|0)?-1:0;
 var $st$15$0=(($926)|0);
 HEAP32[(($st$15$0)>>2)]=$933$0;
 var $st$16$1=(($926+4)|0);
 HEAP32[(($st$16$1)>>2)]=$933$1;
 var $st$17$0=(($927)|0);
 HEAP32[(($st$17$0)>>2)]=$935$0;
 var $st$18$1=(($927+4)|0);
 HEAP32[(($st$18$1)>>2)]=$935$1;
 var $936=(($gcodeLayer7+36)|0);
 HEAP32[(($936)>>2)]=0;
 var $937=(($gcodeLayer7+52)|0);
 HEAP32[(($937)>>2)]=100;
 var $938=(($gcodeLayer7+56)|0);
 HEAP32[(($938)>>2)]=100;
 var $939=(($gcodeLayer7+72)|0);
 var $940=(($gcodeLayer7+68)|0);
 HEAP8[($940)]=0;
 var $941=(($gcodeLayer7+69)|0);
 HEAP8[($941)]=0;
 var $942=$939;
 HEAP32[(($942)>>2)]=0; HEAP32[((($942)+(4))>>2)]=0; HEAP32[((($942)+(8))>>2)]=0; HEAP32[((($942)+(12))>>2)]=0;
 var $943=HEAP32[(($860)>>2)];
 var $944=(($gcodeLayer7+60)|0);
 HEAP32[(($944)>>2)]=$943;
 var $945=(($gcodeLayer7+64)|0);
 HEAP32[(($945)>>2)]=$924;
 var $946=HEAP32[(($742)>>2)];
 var $947=HEAP32[(($745)>>2)];
 var $948=((($947)+($946))|0);
 HEAP32[(($866)>>2)]=$948;
 var $949=HEAP32[(($745)>>2)];
 var $950=HEAP32[(($868)>>2)];
 var $951=($950|0);
 var $952=($951)/(1000);
 var $953=($952)*((0.5));
 var $954=HEAP32[(($19)>>2)];
 var $955=($954|0)==1;
 var $956=($949|0);
 var $957=($956)/(1000);
 if($955){label=167;break;}else{label=168;break;}
 case 167: 
 var $959=(($gcode+16)|0);
 HEAPF64[(($959)>>3)]=$957;
 label=169;break;
 case 168: 
 var $961=HEAP32[(($870)>>2)];
 var $962=($953)*((3.141592653589793));
 var $963=($953)*($962);
 var $964=($957)/($963);
 var $965=($961|0);
 var $966=($965)*($964);
 var $967=($966)/(100);
 var $968=(($gcode+16)|0);
 HEAPF64[(($968)>>3)]=$967;
 label=169;break;
 case 169: 
 var $969=(($raftLines8)|0);
 HEAP32[(($969)>>2)]=0;
 var $970=(($raftLines8+4)|0);
 HEAP32[(($970)>>2)]=0;
 var $971=(($raftLines8+8)|0);
 HEAP32[(($971)>>2)]=0;
 var $972=HEAP32[(($832)>>2)];
 var $973=HEAP32[(($895)>>2)];
 var $974=HEAP32[(($897)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($889,$raftLines8,$972,$973,$974,90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=192;break; }
 case 170: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer7,$raftLines8,$raftInterfaceConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { label=192;break; }
 case 171: 
 __ZN12GCodePlanner10writeGCodeEb($gcodeLayer7,0);
 var $977=HEAP32[(($969)>>2)];
 var $978=($977|0)==0;
 if($978){label=180;break;}else{label=172;break;}
 case 172: 
 var $979=HEAP32[(($970)>>2)];
 var $980=($977|0)==($979|0);
 if($980){var $996=$977;label=179;break;}else{var $981=$979;label=173;break;}
 case 173: 
 var $981;
 var $982=((($981)-(12))|0);
 HEAP32[(($970)>>2)]=$982;
 var $983=(($982)|0);
 var $984=HEAP32[(($983)>>2)];
 var $985=$984;
 var $986=($984|0)==0;
 if($986){var $987=$982;label=174;break;}else{label=175;break;}
 case 174: 
 var $987;
 var $988=($977|0)==($987|0);
 if($988){label=178;break;}else{var $981=$987;label=173;break;}
 case 175: 
 var $989=((($981)-(12)+4)|0);
 var $990=HEAP32[(($989)>>2)];
 var $991=($984|0)==($990|0);
 if($991){label=177;break;}else{label=176;break;}
 case 176: 
 var $scevgep_i_i_i_i_i_i668=((($990)-(16))|0);
 var $scevgep28_i_i_i_i_i_i669=$scevgep_i_i_i_i_i_i668;
 var $992=(((-$985))|0);
 var $uglygep_i_i_i_i_i_i670=(($scevgep28_i_i_i_i_i_i669+$992)|0);
 var $uglygep29_i_i_i_i_i_i671=$uglygep_i_i_i_i_i_i670;
 var $993=$uglygep29_i_i_i_i_i_i671>>>4;
 var $994=$993^-1;
 var $scevgep30_i_i_i_i_i_i672=(($990+($994<<4))|0);
 HEAP32[(($989)>>2)]=$scevgep30_i_i_i_i_i_i672;
 label=177;break;
 case 177: 
 var $995=$984;
 __ZdlPv($995);
 var $_pre29_i_i_i674=HEAP32[(($970)>>2)];
 var $987=$_pre29_i_i_i674;label=174;break;
 case 178: 
 var $_pre_i_i_i676=HEAP32[(($969)>>2)];
 var $996=$_pre_i_i_i676;label=179;break;
 case 179: 
 var $996;
 var $997=$996;
 __ZdlPv($997);
 label=180;break;
 case 180: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlannerD1Ev($gcodeLayer7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=42;break; }
 case 181: 
 var $999$0 = ___cxa_find_matching_catch(-1, -1); var $999$1 = tempRet0;
 var $1000=$999$0;
 var $1001=$999$1;
 var $_0=$1000;var $_0577=$1001;label=191;break;
 case 182: 
 var $1003$0 = ___cxa_find_matching_catch(-1, -1); var $1003$1 = tempRet0;
 var $1004=$1003$0;
 var $1005=$1003$1;
 var $1006=HEAP32[(($891)>>2)];
 var $1007=($1006|0)==0;
 if($1007){var $_0=$1004;var $_0577=$1005;label=191;break;}else{label=183;break;}
 case 183: 
 var $1008=HEAP32[(($892)>>2)];
 var $1009=($1006|0)==($1008|0);
 if($1009){var $1025=$1006;label=190;break;}else{var $1010=$1008;label=184;break;}
 case 184: 
 var $1010;
 var $1011=((($1010)-(12))|0);
 HEAP32[(($892)>>2)]=$1011;
 var $1012=(($1011)|0);
 var $1013=HEAP32[(($1012)>>2)];
 var $1014=$1013;
 var $1015=($1013|0)==0;
 if($1015){var $1016=$1011;label=185;break;}else{label=186;break;}
 case 185: 
 var $1016;
 var $1017=($1006|0)==($1016|0);
 if($1017){label=189;break;}else{var $1010=$1016;label=184;break;}
 case 186: 
 var $1018=((($1010)-(12)+4)|0);
 var $1019=HEAP32[(($1018)>>2)];
 var $1020=($1013|0)==($1019|0);
 if($1020){label=188;break;}else{label=187;break;}
 case 187: 
 var $scevgep_i_i_i_i_i_i684=((($1019)-(16))|0);
 var $scevgep28_i_i_i_i_i_i685=$scevgep_i_i_i_i_i_i684;
 var $1021=(((-$1014))|0);
 var $uglygep_i_i_i_i_i_i686=(($scevgep28_i_i_i_i_i_i685+$1021)|0);
 var $uglygep29_i_i_i_i_i_i687=$uglygep_i_i_i_i_i_i686;
 var $1022=$uglygep29_i_i_i_i_i_i687>>>4;
 var $1023=$1022^-1;
 var $scevgep30_i_i_i_i_i_i688=(($1019+($1023<<4))|0);
 HEAP32[(($1018)>>2)]=$scevgep30_i_i_i_i_i_i688;
 label=188;break;
 case 188: 
 var $1024=$1013;
 __ZdlPv($1024);
 var $_pre29_i_i_i690=HEAP32[(($892)>>2)];
 var $1016=$_pre29_i_i_i690;label=185;break;
 case 189: 
 var $_pre_i_i_i692=HEAP32[(($891)>>2)];
 var $1025=$_pre_i_i_i692;label=190;break;
 case 190: 
 var $1025;
 var $1026=$1025;
 __ZdlPv($1026);
 var $_0=$1004;var $_0577=$1005;label=191;break;
 case 191: 
 var $_0577;
 var $_0;
 (function() { try { __THREW__ = 0; return __ZN12GCodePlannerD1Ev($gcodeLayer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_6=$_0;var $_6583=$_0577;label=465;break; } else { label=471;break; }
 case 192: 
 var $1028$0 = ___cxa_find_matching_catch(-1, -1); var $1028$1 = tempRet0;
 var $1029=$1028$0;
 var $1030=$1028$1;
 var $1031=HEAP32[(($969)>>2)];
 var $1032=($1031|0)==0;
 if($1032){label=201;break;}else{label=193;break;}
 case 193: 
 var $1033=HEAP32[(($970)>>2)];
 var $1034=($1031|0)==($1033|0);
 if($1034){var $1050=$1031;label=200;break;}else{var $1035=$1033;label=194;break;}
 case 194: 
 var $1035;
 var $1036=((($1035)-(12))|0);
 HEAP32[(($970)>>2)]=$1036;
 var $1037=(($1036)|0);
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=$1038;
 var $1040=($1038|0)==0;
 if($1040){var $1041=$1036;label=195;break;}else{label=196;break;}
 case 195: 
 var $1041;
 var $1042=($1031|0)==($1041|0);
 if($1042){label=199;break;}else{var $1035=$1041;label=194;break;}
 case 196: 
 var $1043=((($1035)-(12)+4)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=($1038|0)==($1044|0);
 if($1045){label=198;break;}else{label=197;break;}
 case 197: 
 var $scevgep_i_i_i_i_i_i700=((($1044)-(16))|0);
 var $scevgep28_i_i_i_i_i_i701=$scevgep_i_i_i_i_i_i700;
 var $1046=(((-$1039))|0);
 var $uglygep_i_i_i_i_i_i702=(($scevgep28_i_i_i_i_i_i701+$1046)|0);
 var $uglygep29_i_i_i_i_i_i703=$uglygep_i_i_i_i_i_i702;
 var $1047=$uglygep29_i_i_i_i_i_i703>>>4;
 var $1048=$1047^-1;
 var $scevgep30_i_i_i_i_i_i704=(($1044+($1048<<4))|0);
 HEAP32[(($1043)>>2)]=$scevgep30_i_i_i_i_i_i704;
 label=198;break;
 case 198: 
 var $1049=$1038;
 __ZdlPv($1049);
 var $_pre29_i_i_i706=HEAP32[(($970)>>2)];
 var $1041=$_pre29_i_i_i706;label=195;break;
 case 199: 
 var $_pre_i_i_i708=HEAP32[(($969)>>2)];
 var $1050=$_pre_i_i_i708;label=200;break;
 case 200: 
 var $1050;
 var $1051=$1050;
 __ZdlPv($1051);
 label=201;break;
 case 201: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlannerD1Ev($gcodeLayer7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_6=$1029;var $_6583=$1030;label=465;break; } else { label=471;break; }
 case 202: 
 var $volumeIdx9_0;
 var $layerNr10_0;
 var $1053=($layerNr10_0>>>0)<($419>>>0);
 if($1053){label=203;break;}else{label=443;break;}
 case 203: 
 var $1055=((($layerNr10_0)+(1))|0);
 var $1056=HEAP32[((14448)>>2)];
 var $1057=($1056|0)<2;
 if($1057){label=205;break;}else{label=204;break;}
 case 204: 
 var $1059=_fprintf($820,6080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=3480,HEAP32[(((tempVarArgs)+(8))>>2)]=$1055,HEAP32[(((tempVarArgs)+(16))>>2)]=$419,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1060=_fflush($820);
 label=205;break;
 case 205: 
 var $1062=HEAP32[(($746)>>2)];
 var $1063=HEAP32[(($747)>>2)];
 HEAP32[(($748)>>2)]=$gcode;
 HEAP32[(($752)>>2)]=0; HEAP32[((($752)+(4))>>2)]=0; HEAP32[((($752)+(8))>>2)]=0; HEAP32[((($752)+(12))>>2)]=0; HEAP32[((($752)+(16))>>2)]=0; HEAP32[((($752)+(20))>>2)]=0; HEAP32[((($752)+(24))>>2)]=0;
 HEAP32[(($751)>>2)]=$1062;
 HEAP32[(($753)>>2)]=0;
 HEAP32[(($754)>>2)]=1024;
 var $1064=HEAP32[(($755)>>2)];
 var $1065$0=$1064;
 var $1065$1=(((($1064|0)<0))|0)?-1:0;
 var $1066=HEAP32[(($756)>>2)];
 var $1067$0=$1066;
 var $1067$1=(((($1066|0)<0))|0)?-1:0;
 var $st$19$0=(($749)|0);
 HEAP32[(($st$19$0)>>2)]=$1065$0;
 var $st$20$1=(($749+4)|0);
 HEAP32[(($st$20$1)>>2)]=$1065$1;
 var $st$21$0=(($750)|0);
 HEAP32[(($st$21$0)>>2)]=$1067$0;
 var $st$22$1=(($750+4)|0);
 HEAP32[(($st$22$1)>>2)]=$1067$1;
 HEAP32[(($757)>>2)]=0;
 HEAP32[(($758)>>2)]=100;
 HEAP32[(($759)>>2)]=100;
 HEAP8[($761)]=0;
 HEAP8[($762)]=0;
 HEAP32[(($764)>>2)]=0; HEAP32[((($764)+(4))>>2)]=0; HEAP32[((($764)+(8))>>2)]=0; HEAP32[((($764)+(12))>>2)]=0;
 var $1068=HEAP32[(($763)>>2)];
 HEAP32[(($765)>>2)]=$1068;
 HEAP32[(($766)>>2)]=$1063;
 __ZN11GCodeExport10addCommentEPKcz($gcode,3448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$layerNr10_0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1069=HEAP32[(($767)>>2)];
 var $1070=HEAP32[(($768)>>2)];
 var $1071=(Math_imul($1070,$layerNr10_0)|0);
 var $1072=HEAP32[(($742)>>2)];
 var $1073=HEAP32[(($745)>>2)];
 var $1074=((($1071)+($1069))|0);
 var $1075=((($1074)+($1072))|0);
 var $1076=((($1075)+($1073))|0);
 HEAP32[(($769)>>2)]=$1076;
 var $1077=($layerNr10_0|0)==0;
 if($1077){label=208;break;}else{label=206;break;}
 case 206: 
 var $1078=HEAP32[(($548)>>2)];
 var $1079=HEAP32[(($410)>>2)];
 var $1080=($1078|0)==($1079|0);
 if($1080){var $volumeIdx9_1_lcssa=$volumeIdx9_0;label=313;break;}else{label=207;break;}
 case 207: 
 var $1081=$1079;
 var $1082=$1078;
 var $1083=((($1082)-($1081))|0);
 var $1084=(((($1083|0))/(12))&-1);
 var $1085=$layerNr10_0&1;
 var $1086=($1085|0)==0;
 var $_=$1086?45:135;
 var $1087=($_|0);
 var $volumeIdx9_1951=$volumeIdx9_0;var $volumeCnt_0952=0;var $1095=$1084;var $1094=$1079;label=210;break;
 case 208: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer11,$770,$skirtConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=206;break; } else { label=209;break; }
 case 209: 
 var $1090$0 = ___cxa_find_matching_catch(-1, -1); var $1090$1 = tempRet0;
 var $1091=$1090$0;
 var $1092=$1090$1;
 var $_5=$1091;var $_5582=$1092;label=442;break;
 case 210: 
 var $1094;
 var $1095;
 var $volumeCnt_0952;
 var $volumeIdx9_1951;
 var $1096=($volumeCnt_0952|0)==0;
 if($1096){var $volumeIdx9_2=$volumeIdx9_1951;label=212;break;}else{label=211;break;}
 case 211: 
 var $1098=((($volumeIdx9_1951)+(1))|0);
 var $1099=(((($1098>>>0))%(($1095>>>0)))&-1);
 var $volumeIdx9_2=$1099;label=212;break;
 case 212: 
 var $volumeIdx9_2;
 var $1101=(($1094+((($volumeIdx9_2)*(12))&-1))|0);
 var $1102=HEAP32[(($1101)>>2)];
 HEAP32[(($765)>>2)]=$volumeIdx9_2;
 var $1103=HEAP32[(($755)>>2)];
 var $1104$0=$1103;
 var $1104$1=(((($1103|0)<0))|0)?-1:0;
 var $1105=HEAP32[(($756)>>2)];
 var $1106$0=$1105;
 var $1106$1=(((($1105|0)<0))|0)?-1:0;
 HEAP32[(($800)>>2)]=0; HEAP32[((($800)+(4))>>2)]=0; HEAP32[((($800)+(8))>>2)]=0; HEAP32[((($800)+(12))>>2)]=0; HEAP32[((($800)+(16))>>2)]=0; HEAP32[((($800)+(20))>>2)]=0; HEAP32[((($800)+(24))>>2)]=0; HEAP32[((($800)+(28))>>2)]=0; HEAP32[((($800)+(32))>>2)]=0; HEAP32[((($800)+(36))>>2)]=0; HEAP32[((($800)+(40))>>2)]=0; HEAP32[((($800)+(44))>>2)]=0; HEAP32[((($800)+(48))>>2)]=0;
 var $st$23$0=(($_sroa_0909_0__idx)|0);
 HEAP32[(($st$23$0)>>2)]=$1104$0;
 var $st$24$1=(($_sroa_0909_0__idx+4)|0);
 HEAP32[(($st$24$1)>>2)]=$1104$1;
 var $st$25$0=(($_sroa_1910_8__idx911)|0);
 HEAP32[(($st$25$0)>>2)]=$1106$0;
 var $st$26$1=(($_sroa_1910_8__idx911+4)|0);
 HEAP32[(($st$26$1)>>2)]=$1106$1;
 var $1107=(($1102+((($layerNr10_0)*(12))&-1)+4)|0);
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=(($1102+((($layerNr10_0)*(12))&-1))|0);
 var $1110=HEAP32[(($1109)>>2)];
 var $1111=($1108|0)==($1110|0);
 if($1111){label=225;break;}else{var $partNr12_0919=0;var $1114=$1110;var $1113=0;var $1112=0;label=213;break;}
 case 213: 
 var $1112;
 var $1113;
 var $1114;
 var $partNr12_0919;
 var $1115=(($1114+((($partNr12_0919)*(96))&-1)+56)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=(($1116)|0);
 var $1118=HEAP32[(($1117)>>2)];
 HEAP32[(($2)>>2)]=$1118;
 var $1119=($1113|0)==($1112|0);
 if($1119){label=217;break;}else{label=214;break;}
 case 214: 
 var $1121=($1113|0)==0;
 if($1121){var $1123=0;label=216;break;}else{label=215;break;}
 case 215: 
 HEAP32[(($1113)>>2)]=$1118;
 var $_pre_i=HEAP32[(($805)>>2)];
 var $1123=$_pre_i;label=216;break;
 case 216: 
 var $1123;
 var $1124=(($1123+4)|0);
 HEAP32[(($805)>>2)]=$1124;
 label=218;break;
 case 217: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($819,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { label=220;break; }
 case 218: 
 var $1127=((($partNr12_0919)+(1))|0);
 var $1128=HEAP32[(($1107)>>2)];
 var $1129=HEAP32[(($1109)>>2)];
 var $1130=$1128;
 var $1131=$1129;
 var $1132=((($1130)-($1131))|0);
 var $1133=(((($1132|0))/(96))&-1);
 var $1134=($1127>>>0)<($1133>>>0);
 if($1134){label=219;break;}else{label=225;break;}
 case 219: 
 var $_pre1086=HEAP32[(($805)>>2)];
 var $_pre1087=HEAP32[(($818)>>2)];
 var $partNr12_0919=$1127;var $1114=$1129;var $1113=$_pre1086;var $1112=$_pre1087;label=213;break;
 case 220: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=224;break;
 case 221: 
 var $lpad_loopexit921$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit921$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit921$1;var $lpad_phi$0=$lpad_loopexit921$0;label=224;break;
 case 222: 
 var $lpad_loopexit928$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit928$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit928$1;var $lpad_phi$0=$lpad_loopexit928$0;label=224;break;
 case 223: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=224;break;
 case 224: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $1135=$lpad_phi$0;
 var $1136=$lpad_phi$1;
 var $_2=$1135;var $_2579=$1136;label=301;break;
 case 225: 
 (function() { try { __THREW__ = 0; return __ZN13PathOptimizer8optimizeEv($partOrderOptimizer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=226;break; } else { label=223;break; }
 case 226: 
 var $1137=HEAP32[(($801)>>2)];
 var $1138=HEAP32[(($802)>>2)];
 var $1139=($1137|0)==($1138|0);
 if($1139){var $1300=$1137;label=278;break;}else{var $partCounter_0940=0;var $1140=$1138;label=227;break;}
 case 227: 
 var $1140;
 var $partCounter_0940;
 var $1141=(($1140+($partCounter_0940<<2))|0);
 var $1142=HEAP32[(($1141)>>2)];
 var $1143=HEAP32[(($1109)>>2)];
 var $1144=HEAP32[(($807)>>2)];
 var $1145=($1144|0)==0;
 if($1145){label=229;break;}else{label=228;break;}
 case 228: 
 var $1147=(($1143+((($1142)*(96))&-1)+44)|0);
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner15setCombBoundaryEPNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($gcodeLayer11,$1147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=230;break; } else { label=222;break; }
 case 229: 
 HEAP8[($762)]=1;
 label=230;break;
 case 230: 
 HEAP8[($761)]=1;
 var $1150=HEAP32[(($808)>>2)];
 var $1151=($1150|0)>0;
 if($1151){label=231;break;}else{label=237;break;}
 case 231: 
 var $1153=(($1143+((($1142)*(96))&-1)+60)|0);
 var $1154=HEAP32[(($1153)>>2)];
 var $1155=(($1143+((($1142)*(96))&-1)+56)|0);
 var $1156=HEAP32[(($1155)>>2)];
 var $1157=$1154;
 var $1158=$1156;
 var $1159=((($1157)-($1158))|0);
 var $1160=(((($1159|0))/(12))&-1);
 var $insetNr_0924=((($1160)-(1))|0);
 var $1161=($insetNr_0924|0)>-1;
 if($1161){var $insetNr_0925=$insetNr_0924;var $1162=$1156;label=232;break;}else{label=237;break;}
 case 232: 
 var $1162;
 var $insetNr_0925;
 var $1163=($insetNr_0925|0)==0;
 var $1164=(($1162+((($insetNr_0925)*(12))&-1))|0);
 if($1163){label=233;break;}else{label=236;break;}
 case 233: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer11,$1164,$inset0Config) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=237;break; } else { label=221;break; }
 case 234: 
 var $insetNr_0=((($insetNr_0925)-(1))|0);
 var $1166=($insetNr_0|0)>-1;
 if($1166){label=235;break;}else{label=237;break;}
 case 235: 
 var $_pre1088=HEAP32[(($1155)>>2)];
 var $insetNr_0925=$insetNr_0;var $1162=$_pre1088;label=232;break;
 case 236: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer11,$1164,$inset1Config) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=221;break; }
 case 237: 
 HEAP32[(($809)>>2)]=0;
 HEAP32[(($810)>>2)]=0;
 HEAP32[(($811)>>2)]=0;
 var $1168=(($1143+((($1142)*(96))&-1)+68)|0);
 var $1169=HEAP32[(($533)>>2)];
 var $1170=HEAP32[(($781)>>2)];
 var $1171=(($1143+((($1142)*(96))&-1)+92)|0);
 var $1172=HEAP32[(($1171)>>2)];
 var $1173=($1172|0)>-1;
 var $1174=$1173?$1172:$_;
 var $1175=($1174|0);
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($1168,$fillPolygons,$1169,$1169,$1170,$1175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=238;break; } else { label=242;break; }
 case 238: 
 var $1177=HEAP32[(($812)>>2)];
 var $1178=($1177|0)>0;
 if($1178){label=239;break;}else{label=252;break;}
 case 239: 
 var $1180=HEAP32[(($533)>>2)];
 var $1181=$1180<<2;
 var $1182=($1177|0)>($1181|0);
 var $1183=(($1143+((($1142)*(96))&-1)+80)|0);
 if($1182){label=240;break;}else{label=251;break;}
 case 240: 
 var $1185=$1177<<1;
 var $1186=HEAP32[(($781)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($1183,$fillPolygons,$1180,$1185,$1186,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=242;break; }
 case 241: 
 var $1188=HEAP32[(($533)>>2)];
 var $1189=HEAP32[(($812)>>2)];
 var $1190=$1189<<1;
 var $1191=HEAP32[(($781)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($1183,$fillPolygons,$1188,$1190,$1191,135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=242;break; }
 case 242: 
 var $1193$0 = ___cxa_find_matching_catch(-1, -1); var $1193$1 = tempRet0;
 var $1194=$1193$0;
 var $1195=$1193$1;
 var $1196=HEAP32[(($809)>>2)];
 var $1197=($1196|0)==0;
 if($1197){var $_2=$1194;var $_2579=$1195;label=301;break;}else{label=243;break;}
 case 243: 
 var $1198=HEAP32[(($810)>>2)];
 var $1199=($1196|0)==($1198|0);
 if($1199){var $1215=$1196;label=250;break;}else{var $1200=$1198;label=244;break;}
 case 244: 
 var $1200;
 var $1201=((($1200)-(12))|0);
 HEAP32[(($810)>>2)]=$1201;
 var $1202=(($1201)|0);
 var $1203=HEAP32[(($1202)>>2)];
 var $1204=$1203;
 var $1205=($1203|0)==0;
 if($1205){var $1206=$1201;label=245;break;}else{label=246;break;}
 case 245: 
 var $1206;
 var $1207=($1196|0)==($1206|0);
 if($1207){label=249;break;}else{var $1200=$1206;label=244;break;}
 case 246: 
 var $1208=((($1200)-(12)+4)|0);
 var $1209=HEAP32[(($1208)>>2)];
 var $1210=($1203|0)==($1209|0);
 if($1210){label=248;break;}else{label=247;break;}
 case 247: 
 var $scevgep_i_i_i_i_i_i722=((($1209)-(16))|0);
 var $scevgep28_i_i_i_i_i_i723=$scevgep_i_i_i_i_i_i722;
 var $1211=(((-$1204))|0);
 var $uglygep_i_i_i_i_i_i724=(($scevgep28_i_i_i_i_i_i723+$1211)|0);
 var $uglygep29_i_i_i_i_i_i725=$uglygep_i_i_i_i_i_i724;
 var $1212=$uglygep29_i_i_i_i_i_i725>>>4;
 var $1213=$1212^-1;
 var $scevgep30_i_i_i_i_i_i726=(($1209+($1213<<4))|0);
 HEAP32[(($1208)>>2)]=$scevgep30_i_i_i_i_i_i726;
 label=248;break;
 case 248: 
 var $1214=$1203;
 __ZdlPv($1214);
 var $_pre29_i_i_i728=HEAP32[(($810)>>2)];
 var $1206=$_pre29_i_i_i728;label=245;break;
 case 249: 
 var $_pre_i_i_i730=HEAP32[(($809)>>2)];
 var $1215=$_pre_i_i_i730;label=250;break;
 case 250: 
 var $1215;
 var $1216=$1215;
 __ZdlPv($1216);
 var $_2=$1194;var $_2579=$1195;label=301;break;
 case 251: 
 var $1218=HEAP32[(($781)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($1183,$fillPolygons,$1180,$1177,$1218,$1087) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=242;break; }
 case 252: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer11,$fillPolygons,$fillConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=253;break; } else { label=242;break; }
 case 253: 
 var $1221=HEAP32[(($757)>>2)];
 var $1222=($1221|0)==0;
 if($1222){label=268;break;}else{label=254;break;}
 case 254: 
 var $ld$27$0=(($749)|0);
 var $_sroa_0912_0_copyload$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($749+4)|0);
 var $_sroa_0912_0_copyload$1=HEAP32[(($ld$28$1)>>2)];
 var $ld$29$0=(($750)|0);
 var $_sroa_1914_8_copyload$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($750+4)|0);
 var $_sroa_1914_8_copyload$1=HEAP32[(($ld$30$1)>>2)];
 var $1224=(($1221)|0);
 var $1225=HEAP32[(($1224)>>2)];
 var $1226=(($1225+4)|0);
 var $1227=HEAP32[(($1226)>>2)];
 var $1228=(($1225)|0);
 var $1229=HEAP32[(($1228)>>2)];
 var $1230=($1227|0)==($1229|0);
 if($1230){label=265;break;}else{label=255;break;}
 case 255: 
 var $1231=$1227;
 var $1232=$1229;
 var $1233=((($1231)-($1232))|0);
 var $1234=(((($1233|0))/(12))&-1);
 var $n_047_i=0;var $crossings_048_i=0;label=256;break;
 case 256: 
 var $crossings_048_i;
 var $n_047_i;
 var $1236=(($1229+((($n_047_i)*(12))&-1)+4)|0);
 var $1237=HEAP32[(($1236)>>2)];
 var $1238=(($1229+((($n_047_i)*(12))&-1))|0);
 var $1239=HEAP32[(($1238)>>2)];
 var $1240=$1237;
 var $1241=$1239;
 var $1242=((($1240)-($1241))|0);
 var $1243=$1242>>4;
 var $1244=($1243|0)==0;
 if($1244){var $crossings_3_i=$crossings_048_i;label=263;break;}else{label=257;break;}
 case 257: 
 var $1246=((($1243)-(1))|0);
 var $1247=($1237|0)==($1239|0);
 if($1247){var $crossings_3_i=$crossings_048_i;label=263;break;}else{label=258;break;}
 case 258: 
 var $p0_sroa_1_8__idx14_i=(($1239+($1246<<4)+8)|0);
 var $p0_sroa_0_0__idx_i=(($1239+($1246<<4))|0);
 var $ld$31$0=(($p0_sroa_1_8__idx14_i)|0);
 var $p0_sroa_1_8_copyload_i$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($p0_sroa_1_8__idx14_i+4)|0);
 var $p0_sroa_1_8_copyload_i$1=HEAP32[(($ld$32$1)>>2)];
 var $ld$33$0=(($p0_sroa_0_0__idx_i)|0);
 var $p0_sroa_0_0_copyload_i$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($p0_sroa_0_0__idx_i+4)|0);
 var $p0_sroa_0_0_copyload_i$1=HEAP32[(($ld$34$1)>>2)];
 var $p0_sroa_1_043_i$1=$p0_sroa_1_8_copyload_i$1;var $p0_sroa_1_043_i$0=$p0_sroa_1_8_copyload_i$0;var $p0_sroa_0_044_i$1=$p0_sroa_0_0_copyload_i$1;var $p0_sroa_0_044_i$0=$p0_sroa_0_0_copyload_i$0;var $i_045_i=0;var $crossings_146_i=$crossings_048_i;label=259;break;
 case 259: 
 var $crossings_146_i;
 var $i_045_i;
 var $p0_sroa_0_044_i$0;
 var $p0_sroa_0_044_i$1;
 var $p0_sroa_1_043_i$0;
 var $p0_sroa_1_043_i$1;
 var $p1_sroa_0_0__idx1_i=(($1239+($i_045_i<<4))|0);
 var $ld$35$0=(($p1_sroa_0_0__idx1_i)|0);
 var $p1_sroa_0_0_copyload2_i$0=HEAP32[(($ld$35$0)>>2)];
 var $ld$36$1=(($p1_sroa_0_0__idx1_i+4)|0);
 var $p1_sroa_0_0_copyload2_i$1=HEAP32[(($ld$36$1)>>2)];
 var $p1_sroa_1_8__idx6_i=(($1239+($i_045_i<<4)+8)|0);
 var $ld$37$0=(($p1_sroa_1_8__idx6_i)|0);
 var $p1_sroa_1_8_copyload7_i$0=HEAP32[(($ld$37$0)>>2)];
 var $ld$38$1=(($p1_sroa_1_8__idx6_i+4)|0);
 var $p1_sroa_1_8_copyload7_i$1=HEAP32[(($ld$38$1)>>2)];
 var $1249=(($p0_sroa_1_043_i$1|0) >= ($_sroa_1914_8_copyload$1|0)) & (((($p0_sroa_1_043_i$1|0) >  ($_sroa_1914_8_copyload$1|0)) | ($p0_sroa_1_043_i$0>>>0) >= ($_sroa_1914_8_copyload$0>>>0)));
 var $1250=(($p1_sroa_1_8_copyload7_i$1|0) < ($_sroa_1914_8_copyload$1|0)) | (((($p1_sroa_1_8_copyload7_i$1|0) == ($_sroa_1914_8_copyload$1|0) & ($p1_sroa_1_8_copyload7_i$0>>>0) <  ($_sroa_1914_8_copyload$0>>>0))));
 var $or_cond_i=$1249&$1250;
 if($or_cond_i){label=261;break;}else{label=260;break;}
 case 260: 
 var $1252=(($p1_sroa_1_8_copyload7_i$1|0) <= ($_sroa_1914_8_copyload$1|0)) & (((($p1_sroa_1_8_copyload7_i$1|0) <  ($_sroa_1914_8_copyload$1|0)) | ($p1_sroa_1_8_copyload7_i$0>>>0) <= ($_sroa_1914_8_copyload$0>>>0)));
 var $1253=(($p0_sroa_1_043_i$1|0) > ($_sroa_1914_8_copyload$1|0)) | (((($p0_sroa_1_043_i$1|0) == ($_sroa_1914_8_copyload$1|0) & ($p0_sroa_1_043_i$0>>>0) >  ($_sroa_1914_8_copyload$0>>>0))));
 var $or_cond41_i=$1252|$1253;
 if($or_cond41_i){var $crossings_2_i=$crossings_146_i;label=262;break;}else{label=261;break;}
 case 261: 
 var $1255$0=_i64Subtract($p1_sroa_0_0_copyload2_i$0,$p1_sroa_0_0_copyload2_i$1,$p0_sroa_0_044_i$0,$p0_sroa_0_044_i$1);var $1255$1=tempRet0;
 var $1256$0=_i64Subtract($_sroa_1914_8_copyload$0,$_sroa_1914_8_copyload$1,$p0_sroa_1_043_i$0,$p0_sroa_1_043_i$1);var $1256$1=tempRet0;
 var $1257$0=___muldi3($1255$0,$1255$1,$1256$0,$1256$1);var $1257$1=tempRet0;
 var $1258$0=_i64Subtract($p1_sroa_1_8_copyload7_i$0,$p1_sroa_1_8_copyload7_i$1,$p0_sroa_1_043_i$0,$p0_sroa_1_043_i$1);var $1258$1=tempRet0;
 var $1259$0=___divdi3($1257$0,$1257$1,$1258$0,$1258$1);var $1259$1=tempRet0;
 var $1260$0=_i64Add($1259$0,$1259$1,$p0_sroa_0_044_i$0,$p0_sroa_0_044_i$1);var $1260$1=tempRet0;
 var $not_42_i=(($1260$1|0) >= ($_sroa_0912_0_copyload$1|0)) & (((($1260$1|0) >  ($_sroa_0912_0_copyload$1|0)) | ($1260$0>>>0) >= ($_sroa_0912_0_copyload$0>>>0)));
 var $1261=($not_42_i&1);
 var $crossings_1__i=((($1261)+($crossings_146_i))|0);
 var $crossings_2_i=$crossings_1__i;label=262;break;
 case 262: 
 var $crossings_2_i;
 var $1263=((($i_045_i)+(1))|0);
 var $1264=($1263>>>0)<($1243>>>0);
 if($1264){var $p0_sroa_1_043_i$1=$p1_sroa_1_8_copyload7_i$1;var $p0_sroa_1_043_i$0=$p1_sroa_1_8_copyload7_i$0;var $p0_sroa_0_044_i$1=$p1_sroa_0_0_copyload2_i$1;var $p0_sroa_0_044_i$0=$p1_sroa_0_0_copyload2_i$0;var $i_045_i=$1263;var $crossings_146_i=$crossings_2_i;label=259;break;}else{var $crossings_3_i=$crossings_2_i;label=263;break;}
 case 263: 
 var $crossings_3_i;
 var $1265=((($n_047_i)+(1))|0);
 var $1266=($1265>>>0)<($1234>>>0);
 if($1266){var $n_047_i=$1265;var $crossings_048_i=$crossings_3_i;label=256;break;}else{label=264;break;}
 case 264: 
 var $1267=$crossings_3_i&1;
 var $not__i=($1267|0)==0;
 if($not__i){label=265;break;}else{label=268;break;}
 case 265: 
 assert(16 % 1 === 0);HEAP32[(($813)>>2)]=HEAP32[(($816)>>2)];HEAP32[((($813)+(4))>>2)]=HEAP32[((($816)+(4))>>2)];HEAP32[((($813)+(8))>>2)]=HEAP32[((($816)+(8))>>2)];HEAP32[((($813)+(12))>>2)]=HEAP32[((($816)+(12))>>2)];
 var $1268=__ZN4Comb10moveInsideERN10ClipperLib8IntPointE($1221,$p_i);
 if($1268){label=266;break;}else{label=268;break;}
 case 266: 
 assert(16 % 1 === 0);HEAP32[(($814)>>2)]=HEAP32[(($813)>>2)];HEAP32[((($814)+(4))>>2)]=HEAP32[((($813)+(4))>>2)];HEAP32[((($814)+(8))>>2)]=HEAP32[((($813)+(8))>>2)];HEAP32[((($814)+(12))>>2)]=HEAP32[((($813)+(12))>>2)];
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner9addTravelEN10ClipperLib8IntPointE($gcodeLayer11,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=267;break; } else { label=242;break; }
 case 267: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner17forceNewPathStartEv($gcodeLayer11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=268;break; } else { label=242;break; }
 case 268: 
 var $1271=HEAP32[(($809)>>2)];
 var $1272=($1271|0)==0;
 if($1272){label=277;break;}else{label=269;break;}
 case 269: 
 var $1273=HEAP32[(($810)>>2)];
 var $1274=($1271|0)==($1273|0);
 if($1274){var $1290=$1271;label=276;break;}else{var $1275=$1273;label=270;break;}
 case 270: 
 var $1275;
 var $1276=((($1275)-(12))|0);
 HEAP32[(($810)>>2)]=$1276;
 var $1277=(($1276)|0);
 var $1278=HEAP32[(($1277)>>2)];
 var $1279=$1278;
 var $1280=($1278|0)==0;
 if($1280){var $1281=$1276;label=271;break;}else{label=272;break;}
 case 271: 
 var $1281;
 var $1282=($1271|0)==($1281|0);
 if($1282){label=275;break;}else{var $1275=$1281;label=270;break;}
 case 272: 
 var $1283=((($1275)-(12)+4)|0);
 var $1284=HEAP32[(($1283)>>2)];
 var $1285=($1278|0)==($1284|0);
 if($1285){label=274;break;}else{label=273;break;}
 case 273: 
 var $scevgep_i_i_i_i_i_i740=((($1284)-(16))|0);
 var $scevgep28_i_i_i_i_i_i741=$scevgep_i_i_i_i_i_i740;
 var $1286=(((-$1279))|0);
 var $uglygep_i_i_i_i_i_i742=(($scevgep28_i_i_i_i_i_i741+$1286)|0);
 var $uglygep29_i_i_i_i_i_i743=$uglygep_i_i_i_i_i_i742;
 var $1287=$uglygep29_i_i_i_i_i_i743>>>4;
 var $1288=$1287^-1;
 var $scevgep30_i_i_i_i_i_i744=(($1284+($1288<<4))|0);
 HEAP32[(($1283)>>2)]=$scevgep30_i_i_i_i_i_i744;
 label=274;break;
 case 274: 
 var $1289=$1278;
 __ZdlPv($1289);
 var $_pre29_i_i_i746=HEAP32[(($810)>>2)];
 var $1281=$_pre29_i_i_i746;label=271;break;
 case 275: 
 var $_pre_i_i_i748=HEAP32[(($809)>>2)];
 var $1290=$_pre_i_i_i748;label=276;break;
 case 276: 
 var $1290;
 var $1291=$1290;
 __ZdlPv($1291);
 label=277;break;
 case 277: 
 var $1292=((($partCounter_0940)+(1))|0);
 var $1293=HEAP32[(($801)>>2)];
 var $1294=HEAP32[(($802)>>2)];
 var $1295=$1293;
 var $1296=$1294;
 var $1297=((($1295)-($1296))|0);
 var $1298=$1297>>2;
 var $1299=($1292>>>0)<($1298>>>0);
 if($1299){var $partCounter_0940=$1292;var $1140=$1294;label=227;break;}else{var $1300=$1294;label=278;break;}
 case 278: 
 var $1300;
 var $1301=HEAP32[(($757)>>2)];
 var $1302=($1301|0)==0;
 if($1302){var $1329=$1300;label=288;break;}else{label=279;break;}
 case 279: 
 var $1304=(($1301+4)|0);
 var $1305=HEAP32[(($1304)>>2)];
 var $1306=($1305|0)==0;
 if($1306){label=281;break;}else{label=280;break;}
 case 280: 
 var $1308=$1305;
 __ZdaPv($1308);
 label=281;break;
 case 281: 
 var $1310=(($1301+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=($1311|0)==0;
 if($1312){label=283;break;}else{label=282;break;}
 case 282: 
 var $1314=$1311;
 __ZdaPv($1314);
 label=283;break;
 case 283: 
 var $1316=(($1301+12)|0);
 var $1317=HEAP32[(($1316)>>2)];
 var $1318=($1317|0)==0;
 if($1318){label=285;break;}else{label=284;break;}
 case 284: 
 var $1320=$1317;
 __ZdaPv($1320);
 label=285;break;
 case 285: 
 var $1322=(($1301+16)|0);
 var $1323=HEAP32[(($1322)>>2)];
 var $1324=($1323|0)==0;
 if($1324){label=287;break;}else{label=286;break;}
 case 286: 
 var $1326=$1323;
 __ZdaPv($1326);
 label=287;break;
 case 287: 
 var $1327=$1301;
 __ZdlPv($1327);
 var $_pre=HEAP32[(($802)>>2)];
 var $1329=$_pre;label=288;break;
 case 288: 
 var $1329;
 HEAP32[(($757)>>2)]=0;
 var $1330=$1329;
 var $1331=($1329|0)==0;
 if($1331){label=292;break;}else{label=289;break;}
 case 289: 
 var $1332=HEAP32[(($801)>>2)];
 var $1333=($1329|0)==($1332|0);
 if($1333){label=291;break;}else{label=290;break;}
 case 290: 
 var $scevgep_i_i_i_i=((($1332)-(4))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $1334=(((-$1330))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$1334)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $1335=$uglygep29_i_i_i_i>>>2;
 var $1336=$1335^-1;
 var $scevgep30_i_i_i_i=(($1332+($1336<<2))|0);
 HEAP32[(($801)>>2)]=$scevgep30_i_i_i_i;
 label=291;break;
 case 291: 
 var $1337=$1329;
 __ZdlPv($1337);
 label=292;break;
 case 292: 
 var $1338=HEAP32[(($803)>>2)];
 var $1339=$1338;
 var $1340=($1338|0)==0;
 if($1340){label=296;break;}else{label=293;break;}
 case 293: 
 var $1341=HEAP32[(($806)>>2)];
 var $1342=($1338|0)==($1341|0);
 if($1342){label=295;break;}else{label=294;break;}
 case 294: 
 var $scevgep_i_i_i5_i=((($1341)-(4))|0);
 var $scevgep28_i_i_i6_i=$scevgep_i_i_i5_i;
 var $1343=(((-$1339))|0);
 var $uglygep_i_i_i7_i=(($scevgep28_i_i_i6_i+$1343)|0);
 var $uglygep29_i_i_i8_i=$uglygep_i_i_i7_i;
 var $1344=$uglygep29_i_i_i8_i>>>2;
 var $1345=$1344^-1;
 var $scevgep30_i_i_i9_i=(($1341+($1345<<2))|0);
 HEAP32[(($806)>>2)]=$scevgep30_i_i_i9_i;
 label=295;break;
 case 295: 
 var $1346=$1338;
 __ZdlPv($1346);
 label=296;break;
 case 296: 
 var $1347=HEAP32[(($804)>>2)];
 var $1348=$1347;
 var $1349=($1347|0)==0;
 if($1349){label=300;break;}else{label=297;break;}
 case 297: 
 var $1350=HEAP32[(($805)>>2)];
 var $1351=($1347|0)==($1350|0);
 if($1351){label=299;break;}else{label=298;break;}
 case 298: 
 var $scevgep_i_i_i14_i=((($1350)-(4))|0);
 var $scevgep28_i_i_i15_i=$scevgep_i_i_i14_i;
 var $1352=(((-$1348))|0);
 var $uglygep_i_i_i16_i=(($scevgep28_i_i_i15_i+$1352)|0);
 var $uglygep29_i_i_i17_i=$uglygep_i_i_i16_i;
 var $1353=$uglygep29_i_i_i17_i>>>2;
 var $1354=$1353^-1;
 var $scevgep30_i_i_i18_i=(($1350+($1354<<2))|0);
 HEAP32[(($805)>>2)]=$scevgep30_i_i_i18_i;
 label=299;break;
 case 299: 
 var $1355=$1347;
 __ZdlPv($1355);
 label=300;break;
 case 300: 
 var $1356=((($volumeCnt_0952)+(1))|0);
 var $1357=HEAP32[(($548)>>2)];
 var $1358=HEAP32[(($410)>>2)];
 var $1359=$1357;
 var $1360=$1358;
 var $1361=((($1359)-($1360))|0);
 var $1362=(((($1361|0))/(12))&-1);
 var $1363=($1356>>>0)<($1362>>>0);
 if($1363){var $volumeIdx9_1951=$volumeIdx9_2;var $volumeCnt_0952=$1356;var $1095=$1362;var $1094=$1358;label=210;break;}else{var $volumeIdx9_1_lcssa=$volumeIdx9_2;label=313;break;}
 case 301: 
 var $_2579;
 var $_2;
 var $1364=HEAP32[(($802)>>2)];
 var $1365=$1364;
 var $1366=($1364|0)==0;
 if($1366){label=305;break;}else{label=302;break;}
 case 302: 
 var $1367=HEAP32[(($801)>>2)];
 var $1368=($1364|0)==($1367|0);
 if($1368){label=304;break;}else{label=303;break;}
 case 303: 
 var $scevgep_i_i_i_i756=((($1367)-(4))|0);
 var $scevgep28_i_i_i_i757=$scevgep_i_i_i_i756;
 var $1369=(((-$1365))|0);
 var $uglygep_i_i_i_i758=(($scevgep28_i_i_i_i757+$1369)|0);
 var $uglygep29_i_i_i_i759=$uglygep_i_i_i_i758;
 var $1370=$uglygep29_i_i_i_i759>>>2;
 var $1371=$1370^-1;
 var $scevgep30_i_i_i_i760=(($1367+($1371<<2))|0);
 HEAP32[(($801)>>2)]=$scevgep30_i_i_i_i760;
 label=304;break;
 case 304: 
 var $1372=$1364;
 __ZdlPv($1372);
 label=305;break;
 case 305: 
 var $1373=HEAP32[(($803)>>2)];
 var $1374=$1373;
 var $1375=($1373|0)==0;
 if($1375){label=309;break;}else{label=306;break;}
 case 306: 
 var $1376=HEAP32[(($806)>>2)];
 var $1377=($1373|0)==($1376|0);
 if($1377){label=308;break;}else{label=307;break;}
 case 307: 
 var $scevgep_i_i_i5_i765=((($1376)-(4))|0);
 var $scevgep28_i_i_i6_i766=$scevgep_i_i_i5_i765;
 var $1378=(((-$1374))|0);
 var $uglygep_i_i_i7_i767=(($scevgep28_i_i_i6_i766+$1378)|0);
 var $uglygep29_i_i_i8_i768=$uglygep_i_i_i7_i767;
 var $1379=$uglygep29_i_i_i8_i768>>>2;
 var $1380=$1379^-1;
 var $scevgep30_i_i_i9_i769=(($1376+($1380<<2))|0);
 HEAP32[(($806)>>2)]=$scevgep30_i_i_i9_i769;
 label=308;break;
 case 308: 
 var $1381=$1373;
 __ZdlPv($1381);
 label=309;break;
 case 309: 
 var $1382=HEAP32[(($804)>>2)];
 var $1383=$1382;
 var $1384=($1382|0)==0;
 if($1384){var $_5=$_2;var $_5582=$_2579;label=442;break;}else{label=310;break;}
 case 310: 
 var $1385=HEAP32[(($805)>>2)];
 var $1386=($1382|0)==($1385|0);
 if($1386){label=312;break;}else{label=311;break;}
 case 311: 
 var $scevgep_i_i_i14_i774=((($1385)-(4))|0);
 var $scevgep28_i_i_i15_i775=$scevgep_i_i_i14_i774;
 var $1387=(((-$1383))|0);
 var $uglygep_i_i_i16_i776=(($scevgep28_i_i_i15_i775+$1387)|0);
 var $uglygep29_i_i_i17_i777=$uglygep_i_i_i16_i776;
 var $1388=$uglygep29_i_i_i17_i777>>>2;
 var $1389=$1388^-1;
 var $scevgep30_i_i_i18_i778=(($1385+($1389<<2))|0);
 HEAP32[(($805)>>2)]=$scevgep30_i_i_i18_i778;
 label=312;break;
 case 312: 
 var $1390=$1382;
 __ZdlPv($1390);
 var $_5=$_2;var $_5582=$_2579;label=442;break;
 case 313: 
 var $volumeIdx9_1_lcssa;
 var $1391=HEAP32[(($246)>>2)];
 var $1392=($1391|0)>-1;
 if($1392){label=314;break;}else{label=412;break;}
 case 314: 
 var $1394=HEAP32[(($771)>>2)];
 var $1395=($1394|0)>-1;
 if($1395){label=315;break;}else{label=316;break;}
 case 315: 
 HEAP32[(($765)>>2)]=$1394;
 label=316;break;
 case 316: 
 var $1398=HEAP32[(($543)>>2)];
 var $1399=($1398|0)>0;
 var $1400=HEAP32[(($546)>>2)];
 var $1401=HEAP32[(($773)>>2)];
 (function() { try { __THREW__ = 0; return __ZN20SupportPolyGeneratorC2ER14SupportStorageiibii($supportGenerator,$772,$1076,$1391,$1399,$1400,$1401) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=317;break; } else { label=209;break; }
 case 317: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperC1Ev($supportClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=339;break; }
 case 318: 
 var $1403=HEAP32[(($774)>>2)];
 var $1404=((($1403)-(12))|0);
 var $1405=$1404;
 var $1406=HEAP32[(($1405)>>2)];
 var $1407=(($775+$1406)|0);
 var $1408=$1407;
 var $1409=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($1408,$776,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=340;break; }
 case 319: 
 var $1410=HEAP32[(($548)>>2)];
 var $1411=HEAP32[(($410)>>2)];
 var $1412=($1410|0)==($1411|0);
 if($1412){label=366;break;}else{var $volumeCnt13_0977=0;var $1413=$1411;label=320;break;}
 case 320: 
 var $1413;
 var $volumeCnt13_0977;
 var $1414=(($1413+((($volumeIdx9_1_lcssa)*(12))&-1))|0);
 var $1415=HEAP32[(($1414)>>2)];
 HEAP32[(($784)>>2)]=0;
 HEAP32[(($785)>>2)]=0;
 HEAP32[(($786)>>2)]=0;
 var $1416=(($1415+((($layerNr10_0)*(12))&-1)+4)|0);
 var $1417=HEAP32[(($1416)>>2)];
 var $1418=(($1415+((($layerNr10_0)*(12))&-1))|0);
 var $1419=HEAP32[(($1418)>>2)];
 var $1420=($1417|0)==($1419|0);
 if($1420){label=354;break;}else{var $n15_0967=0;var $1422=$1419;var $1421=$1417;label=321;break;}
 case 321: 
 var $1421;
 var $1422;
 var $n15_0967;
 var $1423=(($1422+((($n15_0967)*(96))&-1)+36)|0);
 var $1424=HEAP32[(($1423)>>2)];
 var $1425=(($1422+((($n15_0967)*(96))&-1)+32)|0);
 var $1426=HEAP32[(($1425)>>2)];
 var $1427=($1424|0)==($1426|0);
 if($1427){var $1526=$1421;var $1525=$1422;label=353;break;}else{var $m16_0964=0;var $1428=$1426;label=322;break;}
 case 322: 
 var $1428;
 var $m16_0964;
 var $1429=(($1428+((($m16_0964)*(12))&-1))|0);
 var $1430=HEAP32[(($785)>>2)];
 var $1431=HEAP32[(($786)>>2)];
 var $1432=($1430|0)==($1431|0);
 if($1432){label=337;break;}else{label=323;break;}
 case 323: 
 var $1434=($1430|0)==0;
 if($1434){label=336;break;}else{label=324;break;}
 case 324: 
 var $1436=(($1430)|0);
 HEAP32[(($1436)>>2)]=0;
 var $1437=(($1430+4)|0);
 HEAP32[(($1437)>>2)]=0;
 var $1438=(($1430+8)|0);
 HEAP32[(($1438)>>2)]=0;
 var $1439=(($1428+((($m16_0964)*(12))&-1)+4)|0);
 var $1440=HEAP32[(($1439)>>2)];
 var $1441=(($1429)|0);
 var $1442=HEAP32[(($1441)>>2)];
 var $1443=$1440;
 var $1444=$1442;
 var $1445=((($1443)-($1444))|0);
 var $1446=$1445>>4;
 var $1447=($1446|0)==0;
 if($1447){label=336;break;}else{label=325;break;}
 case 325: 
 var $1449=($1446>>>0)>268435455;
 if($1449){label=326;break;}else{label=327;break;}
 case 326: 
 var $1451=$1430;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1451) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=327;break; } else { label=332;break; }
 case 327: 
 var $1452=(function() { try { __THREW__ = 0; return __Znwj($1445) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=328;break; } else { label=332;break; }
 case 328: 
 var $1454=$1452;
 HEAP32[(($1437)>>2)]=$1454;
 HEAP32[(($1436)>>2)]=$1454;
 var $1455=(($1454+($1446<<4))|0);
 HEAP32[(($1438)>>2)]=$1455;
 var $1456=HEAP32[(($1441)>>2)];
 var $1457=HEAP32[(($1439)>>2)];
 var $1458=($1456|0)==($1457|0);
 if($1458){label=336;break;}else{var $_011_i_i_i=$1456;var $1459=$1454;label=329;break;}
 case 329: 
 var $1459;
 var $_011_i_i_i;
 var $1460=($1459|0)==0;
 if($1460){var $1464=0;label=331;break;}else{label=330;break;}
 case 330: 
 var $1462=$1459;
 var $1463=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($1462)>>2)]=HEAP32[(($1463)>>2)];HEAP32[((($1462)+(4))>>2)]=HEAP32[((($1463)+(4))>>2)];HEAP32[((($1462)+(8))>>2)]=HEAP32[((($1463)+(8))>>2)];HEAP32[((($1462)+(12))>>2)]=HEAP32[((($1463)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($1437)>>2)];
 var $1464=$_pre12_i_i_i;label=331;break;
 case 331: 
 var $1464;
 var $1465=(($1464+16)|0);
 HEAP32[(($1437)>>2)]=$1465;
 var $1466=(($_011_i_i_i+16)|0);
 var $1467=($1466|0)==($1457|0);
 if($1467){label=336;break;}else{var $_011_i_i_i=$1466;var $1459=$1465;label=329;break;}
 case 332: 
 var $1469$0 = ___cxa_find_matching_catch(-1, -1); var $1469$1 = tempRet0;
 var $1470=HEAP32[(($1436)>>2)];
 var $1471=$1470;
 var $1472=($1470|0)==0;
 if($1472){var $eh_lpad_body$1=$1469$1;var $eh_lpad_body$0=$1469$0;label=343;break;}else{label=333;break;}
 case 333: 
 var $1473=HEAP32[(($1437)>>2)];
 var $1474=($1470|0)==($1473|0);
 if($1474){label=335;break;}else{label=334;break;}
 case 334: 
 var $scevgep_i_i_i785=((($1473)-(16))|0);
 var $scevgep28_i_i_i786=$scevgep_i_i_i785;
 var $1475=(((-$1471))|0);
 var $uglygep_i_i_i787=(($scevgep28_i_i_i786+$1475)|0);
 var $uglygep29_i_i_i788=$uglygep_i_i_i787;
 var $1476=$uglygep29_i_i_i788>>>4;
 var $1477=$1476^-1;
 var $scevgep30_i_i_i789=(($1473+($1477<<4))|0);
 HEAP32[(($1437)>>2)]=$scevgep30_i_i_i789;
 label=335;break;
 case 335: 
 var $1478=$1470;
 __ZdlPv($1478);
 var $eh_lpad_body$1=$1469$1;var $eh_lpad_body$0=$1469$0;label=343;break;
 case 336: 
 var $1479=HEAP32[(($785)>>2)];
 var $1480=(($1479+12)|0);
 HEAP32[(($785)>>2)]=$1480;
 label=338;break;
 case 337: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($polys,$1429) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=338;break; } else { label=341;break; }
 case 338: 
 var $1482=((($m16_0964)+(1))|0);
 var $1483=HEAP32[(($1418)>>2)];
 var $1484=(($1483+((($n15_0967)*(96))&-1)+36)|0);
 var $1485=HEAP32[(($1484)>>2)];
 var $1486=(($1483+((($n15_0967)*(96))&-1)+32)|0);
 var $1487=HEAP32[(($1486)>>2)];
 var $1488=$1485;
 var $1489=$1487;
 var $1490=((($1488)-($1489))|0);
 var $1491=(((($1490|0))/(12))&-1);
 var $1492=($1482>>>0)<($1491>>>0);
 if($1492){var $m16_0964=$1482;var $1428=$1487;label=322;break;}else{label=352;break;}
 case 339: 
 var $1494$0 = ___cxa_find_matching_catch(-1, -1); var $1494$1 = tempRet0;
 var $1495=$1494$0;
 var $1496=$1494$1;
 var $_4=$1495;var $_4581=$1496;label=403;break;
 case 340: 
 var $1498$0 = ___cxa_find_matching_catch(-1, -1); var $1498$1 = tempRet0;
 var $1499=$1498$0;
 var $1500=$1498$1;
 var $_3=$1499;var $_3580=$1500;label=402;break;
 case 341: 
 var $lpad_loopexit959$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit959$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit959$1;var $eh_lpad_body$0=$lpad_loopexit959$0;label=343;break;
 case 342: 
 var $lpad_nonloopexit960$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit960$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit960$1;var $eh_lpad_body$0=$lpad_nonloopexit960$0;label=343;break;
 case 343: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $1501=$eh_lpad_body$0;
 var $1502=$eh_lpad_body$1;
 var $1503=HEAP32[(($784)>>2)];
 var $1504=($1503|0)==0;
 if($1504){var $_3=$1501;var $_3580=$1502;label=402;break;}else{label=344;break;}
 case 344: 
 var $1505=HEAP32[(($785)>>2)];
 var $1506=($1503|0)==($1505|0);
 if($1506){var $1522=$1503;label=351;break;}else{var $1507=$1505;label=345;break;}
 case 345: 
 var $1507;
 var $1508=((($1507)-(12))|0);
 HEAP32[(($785)>>2)]=$1508;
 var $1509=(($1508)|0);
 var $1510=HEAP32[(($1509)>>2)];
 var $1511=$1510;
 var $1512=($1510|0)==0;
 if($1512){var $1513=$1508;label=346;break;}else{label=347;break;}
 case 346: 
 var $1513;
 var $1514=($1503|0)==($1513|0);
 if($1514){label=350;break;}else{var $1507=$1513;label=345;break;}
 case 347: 
 var $1515=((($1507)-(12)+4)|0);
 var $1516=HEAP32[(($1515)>>2)];
 var $1517=($1510|0)==($1516|0);
 if($1517){label=349;break;}else{label=348;break;}
 case 348: 
 var $scevgep_i_i_i_i_i_i794=((($1516)-(16))|0);
 var $scevgep28_i_i_i_i_i_i795=$scevgep_i_i_i_i_i_i794;
 var $1518=(((-$1511))|0);
 var $uglygep_i_i_i_i_i_i796=(($scevgep28_i_i_i_i_i_i795+$1518)|0);
 var $uglygep29_i_i_i_i_i_i797=$uglygep_i_i_i_i_i_i796;
 var $1519=$uglygep29_i_i_i_i_i_i797>>>4;
 var $1520=$1519^-1;
 var $scevgep30_i_i_i_i_i_i798=(($1516+($1520<<4))|0);
 HEAP32[(($1515)>>2)]=$scevgep30_i_i_i_i_i_i798;
 label=349;break;
 case 349: 
 var $1521=$1510;
 __ZdlPv($1521);
 var $_pre29_i_i_i800=HEAP32[(($785)>>2)];
 var $1513=$_pre29_i_i_i800;label=346;break;
 case 350: 
 var $_pre_i_i_i802=HEAP32[(($784)>>2)];
 var $1522=$_pre_i_i_i802;label=351;break;
 case 351: 
 var $1522;
 var $1523=$1522;
 __ZdlPv($1523);
 var $_3=$1501;var $_3580=$1502;label=402;break;
 case 352: 
 var $_pre1077=HEAP32[(($1416)>>2)];
 var $1526=$_pre1077;var $1525=$1483;label=353;break;
 case 353: 
 var $1525;
 var $1526;
 var $1527=((($n15_0967)+(1))|0);
 var $1528=$1526;
 var $1529=$1525;
 var $1530=((($1528)-($1529))|0);
 var $1531=(((($1530|0))/(96))&-1);
 var $1532=($1527>>>0)<($1531>>>0);
 if($1532){var $n15_0967=$1527;var $1422=$1525;var $1421=$1526;label=321;break;}else{label=354;break;}
 case 354: 
 var $1533=HEAP32[(($546)>>2)];
 var $1534=($1533|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($polys,$polys,$1534,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=355;break; } else { label=342;break; }
 case 355: 
 var $1536=HEAP32[(($774)>>2)];
 var $1537=((($1536)-(12))|0);
 var $1538=$1537;
 var $1539=HEAP32[(($1538)>>2)];
 var $1540=(($775+$1539)|0);
 var $1541=$1540;
 var $1542=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($1541,$polys,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=356;break; } else { label=342;break; }
 case 356: 
 var $1544=HEAP32[(($784)>>2)];
 var $1545=($1544|0)==0;
 if($1545){label=365;break;}else{label=357;break;}
 case 357: 
 var $1546=HEAP32[(($785)>>2)];
 var $1547=($1544|0)==($1546|0);
 if($1547){var $1563=$1544;label=364;break;}else{var $1548=$1546;label=358;break;}
 case 358: 
 var $1548;
 var $1549=((($1548)-(12))|0);
 HEAP32[(($785)>>2)]=$1549;
 var $1550=(($1549)|0);
 var $1551=HEAP32[(($1550)>>2)];
 var $1552=$1551;
 var $1553=($1551|0)==0;
 if($1553){var $1554=$1549;label=359;break;}else{label=360;break;}
 case 359: 
 var $1554;
 var $1555=($1544|0)==($1554|0);
 if($1555){label=363;break;}else{var $1548=$1554;label=358;break;}
 case 360: 
 var $1556=((($1548)-(12)+4)|0);
 var $1557=HEAP32[(($1556)>>2)];
 var $1558=($1551|0)==($1557|0);
 if($1558){label=362;break;}else{label=361;break;}
 case 361: 
 var $scevgep_i_i_i_i_i_i810=((($1557)-(16))|0);
 var $scevgep28_i_i_i_i_i_i811=$scevgep_i_i_i_i_i_i810;
 var $1559=(((-$1552))|0);
 var $uglygep_i_i_i_i_i_i812=(($scevgep28_i_i_i_i_i_i811+$1559)|0);
 var $uglygep29_i_i_i_i_i_i813=$uglygep_i_i_i_i_i_i812;
 var $1560=$uglygep29_i_i_i_i_i_i813>>>4;
 var $1561=$1560^-1;
 var $scevgep30_i_i_i_i_i_i814=(($1557+($1561<<4))|0);
 HEAP32[(($1556)>>2)]=$scevgep30_i_i_i_i_i_i814;
 label=362;break;
 case 362: 
 var $1562=$1551;
 __ZdlPv($1562);
 var $_pre29_i_i_i816=HEAP32[(($785)>>2)];
 var $1554=$_pre29_i_i_i816;label=359;break;
 case 363: 
 var $_pre_i_i_i818=HEAP32[(($784)>>2)];
 var $1563=$_pre_i_i_i818;label=364;break;
 case 364: 
 var $1563;
 var $1564=$1563;
 __ZdlPv($1564);
 label=365;break;
 case 365: 
 var $1565=((($volumeCnt13_0977)+(1))|0);
 var $1566=HEAP32[(($548)>>2)];
 var $1567=HEAP32[(($410)>>2)];
 var $1568=$1566;
 var $1569=$1567;
 var $1570=((($1568)-($1569))|0);
 var $1571=(((($1570|0))/(12))&-1);
 var $1572=($1565>>>0)<($1571>>>0);
 if($1572){var $volumeCnt13_0977=$1565;var $1413=$1567;label=320;break;}else{label=366;break;}
 case 366: 
 var $1573=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($supportClipper,2,$776,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=367;break; } else { label=340;break; }
 case 367: 
 HEAP32[(($777)>>2)]=0;
 HEAP32[(($778)>>2)]=0;
 HEAP32[(($779)>>2)]=0;
 var $1575=HEAP32[(($780)>>2)];
 var $1576=($1575|0)>0;
 if($1576){label=368;break;}else{label=381;break;}
 case 368: 
 var $1578=HEAP32[(($533)>>2)];
 var $1579=$1578<<2;
 var $1580=($1575|0)>($1579|0);
 if($1580){label=369;break;}else{label=380;break;}
 case 369: 
 var $1582=$1575<<1;
 var $1583=HEAP32[(($781)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($776,$supportLines,$1578,$1582,$1583,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=370;break; } else { label=371;break; }
 case 370: 
 var $1585=HEAP32[(($533)>>2)];
 var $1586=HEAP32[(($780)>>2)];
 var $1587=$1586<<1;
 var $1588=HEAP32[(($781)>>2)];
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($776,$supportLines,$1585,$1587,$1588,90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=381;break; } else { label=371;break; }
 case 371: 
 var $1590$0 = ___cxa_find_matching_catch(-1, -1); var $1590$1 = tempRet0;
 var $1591=$1590$0;
 var $1592=$1590$1;
 var $1593=HEAP32[(($777)>>2)];
 var $1594=($1593|0)==0;
 if($1594){var $_3=$1591;var $_3580=$1592;label=402;break;}else{label=372;break;}
 case 372: 
 var $1595=HEAP32[(($778)>>2)];
 var $1596=($1593|0)==($1595|0);
 if($1596){var $1612=$1593;label=379;break;}else{var $1597=$1595;label=373;break;}
 case 373: 
 var $1597;
 var $1598=((($1597)-(12))|0);
 HEAP32[(($778)>>2)]=$1598;
 var $1599=(($1598)|0);
 var $1600=HEAP32[(($1599)>>2)];
 var $1601=$1600;
 var $1602=($1600|0)==0;
 if($1602){var $1603=$1598;label=374;break;}else{label=375;break;}
 case 374: 
 var $1603;
 var $1604=($1593|0)==($1603|0);
 if($1604){label=378;break;}else{var $1597=$1603;label=373;break;}
 case 375: 
 var $1605=((($1597)-(12)+4)|0);
 var $1606=HEAP32[(($1605)>>2)];
 var $1607=($1600|0)==($1606|0);
 if($1607){label=377;break;}else{label=376;break;}
 case 376: 
 var $scevgep_i_i_i_i_i_i826=((($1606)-(16))|0);
 var $scevgep28_i_i_i_i_i_i827=$scevgep_i_i_i_i_i_i826;
 var $1608=(((-$1601))|0);
 var $uglygep_i_i_i_i_i_i828=(($scevgep28_i_i_i_i_i_i827+$1608)|0);
 var $uglygep29_i_i_i_i_i_i829=$uglygep_i_i_i_i_i_i828;
 var $1609=$uglygep29_i_i_i_i_i_i829>>>4;
 var $1610=$1609^-1;
 var $scevgep30_i_i_i_i_i_i830=(($1606+($1610<<4))|0);
 HEAP32[(($1605)>>2)]=$scevgep30_i_i_i_i_i_i830;
 label=377;break;
 case 377: 
 var $1611=$1600;
 __ZdlPv($1611);
 var $_pre29_i_i_i832=HEAP32[(($778)>>2)];
 var $1603=$_pre29_i_i_i832;label=374;break;
 case 378: 
 var $_pre_i_i_i834=HEAP32[(($777)>>2)];
 var $1612=$_pre_i_i_i834;label=379;break;
 case 379: 
 var $1612;
 var $1613=$1612;
 __ZdlPv($1613);
 var $_3=$1591;var $_3580=$1592;label=402;break;
 case 380: 
 var $1615=HEAP32[(($781)>>2)];
 var $1616=$layerNr10_0&1;
 var $1617=($1616|0)!=0;
 var $1618=$1617?0:90;
 (function() { try { __THREW__ = 0; return __Z18generateLineInfillRKNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERS7_iiid($776,$supportLines,$1578,$1575,$1615,$1618) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=381;break; } else { label=371;break; }
 case 381: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer11,$776,$supportConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=382;break; } else { label=371;break; }
 case 382: 
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($gcodeLayer11,$supportLines,$supportConfig) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=383;break; } else { label=371;break; }
 case 383: 
 var $1622=HEAP32[(($777)>>2)];
 var $1623=($1622|0)==0;
 if($1623){label=392;break;}else{label=384;break;}
 case 384: 
 var $1624=HEAP32[(($778)>>2)];
 var $1625=($1622|0)==($1624|0);
 if($1625){var $1641=$1622;label=391;break;}else{var $1626=$1624;label=385;break;}
 case 385: 
 var $1626;
 var $1627=((($1626)-(12))|0);
 HEAP32[(($778)>>2)]=$1627;
 var $1628=(($1627)|0);
 var $1629=HEAP32[(($1628)>>2)];
 var $1630=$1629;
 var $1631=($1629|0)==0;
 if($1631){var $1632=$1627;label=386;break;}else{label=387;break;}
 case 386: 
 var $1632;
 var $1633=($1622|0)==($1632|0);
 if($1633){label=390;break;}else{var $1626=$1632;label=385;break;}
 case 387: 
 var $1634=((($1626)-(12)+4)|0);
 var $1635=HEAP32[(($1634)>>2)];
 var $1636=($1629|0)==($1635|0);
 if($1636){label=389;break;}else{label=388;break;}
 case 388: 
 var $scevgep_i_i_i_i_i_i842=((($1635)-(16))|0);
 var $scevgep28_i_i_i_i_i_i843=$scevgep_i_i_i_i_i_i842;
 var $1637=(((-$1630))|0);
 var $uglygep_i_i_i_i_i_i844=(($scevgep28_i_i_i_i_i_i843+$1637)|0);
 var $uglygep29_i_i_i_i_i_i845=$uglygep_i_i_i_i_i_i844;
 var $1638=$uglygep29_i_i_i_i_i_i845>>>4;
 var $1639=$1638^-1;
 var $scevgep30_i_i_i_i_i_i846=(($1635+($1639<<4))|0);
 HEAP32[(($1634)>>2)]=$scevgep30_i_i_i_i_i_i846;
 label=389;break;
 case 389: 
 var $1640=$1629;
 __ZdlPv($1640);
 var $_pre29_i_i_i848=HEAP32[(($778)>>2)];
 var $1632=$_pre29_i_i_i848;label=386;break;
 case 390: 
 var $_pre_i_i_i850=HEAP32[(($777)>>2)];
 var $1641=$_pre_i_i_i850;label=391;break;
 case 391: 
 var $1641;
 var $1642=$1641;
 __ZdlPv($1642);
 label=392;break;
 case 392: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($supportClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=393;break; } else { label=339;break; }
 case 393: 
 var $1644=HEAP32[(($782)>>2)];
 var $1645=($1644|0)==0;
 if($1645){label=412;break;}else{label=394;break;}
 case 394: 
 var $1646=HEAP32[(($783)>>2)];
 var $1647=($1644|0)==($1646|0);
 if($1647){var $1663=$1644;label=401;break;}else{var $1648=$1646;label=395;break;}
 case 395: 
 var $1648;
 var $1649=((($1648)-(12))|0);
 HEAP32[(($783)>>2)]=$1649;
 var $1650=(($1649)|0);
 var $1651=HEAP32[(($1650)>>2)];
 var $1652=$1651;
 var $1653=($1651|0)==0;
 if($1653){var $1654=$1649;label=396;break;}else{label=397;break;}
 case 396: 
 var $1654;
 var $1655=($1644|0)==($1654|0);
 if($1655){label=400;break;}else{var $1648=$1654;label=395;break;}
 case 397: 
 var $1656=((($1648)-(12)+4)|0);
 var $1657=HEAP32[(($1656)>>2)];
 var $1658=($1651|0)==($1657|0);
 if($1658){label=399;break;}else{label=398;break;}
 case 398: 
 var $scevgep_i_i_i_i_i_i_i_i=((($1657)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i;
 var $1659=(((-$1652))|0);
 var $uglygep_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i+$1659)|0);
 var $uglygep29_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i;
 var $1660=$uglygep29_i_i_i_i_i_i_i_i>>>4;
 var $1661=$1660^-1;
 var $scevgep30_i_i_i_i_i_i_i_i=(($1657+($1661<<4))|0);
 HEAP32[(($1656)>>2)]=$scevgep30_i_i_i_i_i_i_i_i;
 label=399;break;
 case 399: 
 var $1662=$1651;
 __ZdlPv($1662);
 var $_pre29_i_i_i_i_i855=HEAP32[(($783)>>2)];
 var $1654=$_pre29_i_i_i_i_i855;label=396;break;
 case 400: 
 var $_pre_i_i_i_i_i856=HEAP32[(($782)>>2)];
 var $1663=$_pre_i_i_i_i_i856;label=401;break;
 case 401: 
 var $1663;
 var $1664=$1663;
 __ZdlPv($1664);
 label=412;break;
 case 402: 
 var $_3580;
 var $_3;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD1Ev($supportClipper) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_4=$_3;var $_4581=$_3580;label=403;break; } else { label=471;break; }
 case 403: 
 var $_4581;
 var $_4;
 var $1666=HEAP32[(($782)>>2)];
 var $1667=($1666|0)==0;
 if($1667){var $_5=$_4;var $_5582=$_4581;label=442;break;}else{label=404;break;}
 case 404: 
 var $1668=HEAP32[(($783)>>2)];
 var $1669=($1666|0)==($1668|0);
 if($1669){var $1685=$1666;label=411;break;}else{var $1670=$1668;label=405;break;}
 case 405: 
 var $1670;
 var $1671=((($1670)-(12))|0);
 HEAP32[(($783)>>2)]=$1671;
 var $1672=(($1671)|0);
 var $1673=HEAP32[(($1672)>>2)];
 var $1674=$1673;
 var $1675=($1673|0)==0;
 if($1675){var $1676=$1671;label=406;break;}else{label=407;break;}
 case 406: 
 var $1676;
 var $1677=($1666|0)==($1676|0);
 if($1677){label=410;break;}else{var $1670=$1676;label=405;break;}
 case 407: 
 var $1678=((($1670)-(12)+4)|0);
 var $1679=HEAP32[(($1678)>>2)];
 var $1680=($1673|0)==($1679|0);
 if($1680){label=409;break;}else{label=408;break;}
 case 408: 
 var $scevgep_i_i_i_i_i_i_i_i861=((($1679)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i_i862=$scevgep_i_i_i_i_i_i_i_i861;
 var $1681=(((-$1674))|0);
 var $uglygep_i_i_i_i_i_i_i_i863=(($scevgep28_i_i_i_i_i_i_i_i862+$1681)|0);
 var $uglygep29_i_i_i_i_i_i_i_i864=$uglygep_i_i_i_i_i_i_i_i863;
 var $1682=$uglygep29_i_i_i_i_i_i_i_i864>>>4;
 var $1683=$1682^-1;
 var $scevgep30_i_i_i_i_i_i_i_i865=(($1679+($1683<<4))|0);
 HEAP32[(($1678)>>2)]=$scevgep30_i_i_i_i_i_i_i_i865;
 label=409;break;
 case 409: 
 var $1684=$1673;
 __ZdlPv($1684);
 var $_pre29_i_i_i_i_i867=HEAP32[(($783)>>2)];
 var $1676=$_pre29_i_i_i_i_i867;label=406;break;
 case 410: 
 var $_pre_i_i_i_i_i869=HEAP32[(($782)>>2)];
 var $1685=$_pre_i_i_i_i_i869;label=411;break;
 case 411: 
 var $1685;
 var $1686=$1685;
 __ZdlPv($1686);
 var $_5=$_4;var $_5582=$_4581;label=442;break;
 case 412: 
 var $1687=HEAP32[(($787)>>2)];
 var $1688=($layerNr10_0|0)<($1687|0);
 if($1688){label=413;break;}else{label=415;break;}
 case 413: 
 var $1690=HEAP32[(($788)>>2)];
 var $1691=((($1690)*(100))&-1);
 var $1692=HEAP32[(($722)>>2)];
 var $1693=(((($1691|0))/(($1692|0)))&-1);
 var $1694=((($1687)-($layerNr10_0))|0);
 var $1695=(Math_imul($1693,$1694)|0);
 var $1696=((($layerNr10_0)*(100))&-1);
 var $1697=((($1695)+($1696))|0);
 var $1698=(((($1697>>>0))/(($1687>>>0)))&-1);
 var $1699=($1698|0)<1;
 var $_speedFactor_i=$1699?1:$1698;
 HEAP32[(($758)>>2)]=$_speedFactor_i;
 if($1077){label=414;break;}else{label=419;break;}
 case 414: 
 var $1701=($1693|0)<1;
 var $_speedFactor_i873=$1701?1:$1693;
 HEAP32[(($759)>>2)]=$_speedFactor_i873;
 label=415;break;
 case 415: 
 var $1703=HEAP32[(($789)>>2)];
 var $1704=($1703|0);
 var $1705=HEAP32[(($790)>>2)];
 __ZN12GCodePlanner21forceMinimalLayerTimeEdi($gcodeLayer11,$1704,$1705);
 if($1077){label=416;break;}else{label=420;break;}
 case 416: 
 var $1707=HEAP32[(($767)>>2)];
 var $1708=HEAP32[(($791)>>2)];
 var $1709=($1708|0);
 var $1710=($1709)/(1000);
 var $1711=($1710)*((0.5));
 var $1712=HEAP32[(($19)>>2)];
 var $1713=($1712|0)==1;
 var $1714=($1707|0);
 var $1715=($1714)/(1000);
 if($1713){label=417;break;}else{label=418;break;}
 case 417: 
 HEAPF64[(($792)>>3)]=$1715;
 var $1747=1;label=423;break;
 case 418: 
 var $1718=HEAP32[(($793)>>2)];
 var $1719=($1711)*((3.141592653589793));
 var $1720=($1711)*($1719);
 var $1721=($1715)/($1720);
 var $1722=($1718|0);
 var $1723=($1722)*($1721);
 var $1724=($1723)/(100);
 HEAPF64[(($792)>>3)]=$1724;
 var $1747=$1712;label=423;break;
 case 419: 
 var $1725=HEAP32[(($789)>>2)];
 var $1726=($1725|0);
 var $1727=HEAP32[(($790)>>2)];
 __ZN12GCodePlanner21forceMinimalLayerTimeEdi($gcodeLayer11,$1726,$1727);
 label=420;break;
 case 420: 
 var $1729=HEAP32[(($768)>>2)];
 var $1730=HEAP32[(($791)>>2)];
 var $1731=($1730|0);
 var $1732=($1731)/(1000);
 var $1733=($1732)*((0.5));
 var $1734=HEAP32[(($19)>>2)];
 var $1735=($1734|0)==1;
 var $1736=($1729|0);
 var $1737=($1736)/(1000);
 if($1735){label=421;break;}else{label=422;break;}
 case 421: 
 HEAPF64[(($792)>>3)]=$1737;
 var $1747=1;label=423;break;
 case 422: 
 var $1740=HEAP32[(($793)>>2)];
 var $1741=($1733)*((3.141592653589793));
 var $1742=($1733)*($1741);
 var $1743=($1737)/($1742);
 var $1744=($1740|0);
 var $1745=($1744)*($1743);
 var $1746=($1745)/(100);
 HEAPF64[(($792)>>3)]=$1746;
 var $1747=$1734;label=423;break;
 case 423: 
 var $1747;
 var $1748=HEAP32[(($794)>>2)];
 var $1749=($layerNr10_0|0)<($1748|0);
 if($1749){label=436;break;}else{label=424;break;}
 case 424: 
 var $1751=HEAP32[(($758)>>2)];
 var $1752=($1751|0)<51;
 if($1752){label=425;break;}else{label=426;break;}
 case 425: 
 var $1754=HEAP32[(($798)>>2)];
 var $speed_0=$1754;label=427;break;
 case 426: 
 var $1756=((($1751)-(50))|0);
 var $1757=HEAP32[(($799)>>2)];
 var $1758=(Math_imul($1757,$1756)|0);
 var $1759=(((($1758|0))/(50))&-1);
 var $1760=HEAP32[(($798)>>2)];
 var $1761=(((100)-($1751))|0);
 var $1762=(Math_imul($1760,$1761)|0);
 var $1763=(((($1762|0))/(50))&-1);
 var $1764=((($1763)+($1759))|0);
 var $speed_0=$1764;label=427;break;
 case 427: 
 var $speed_0;
 var $1766=HEAP32[(($795)>>2)];
 var $1767=($1766|0)==($speed_0|0);
 if($1767){label=441;break;}else{label=428;break;}
 case 428: 
 var $1769=($speed_0|0)>0;
 var $1770=($1747|0)==2;
 var $1771=HEAP32[(($796)>>2)];
 if($1769){label=429;break;}else{label=432;break;}
 case 429: 
 var $1773=((($speed_0)*(255))&-1);
 var $1774=(((($1773|0))/(100))&-1);
 if($1770){label=430;break;}else{label=431;break;}
 case 430: 
 var $1776=_fprintf($1771,632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$1774,tempVarArgs)); STACKTOP=tempVarArgs;
 label=435;break;
 case 431: 
 var $1778=_fprintf($1771,600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$1774,tempVarArgs)); STACKTOP=tempVarArgs;
 label=435;break;
 case 432: 
 if($1770){label=433;break;}else{label=434;break;}
 case 433: 
 var $1781=_fwrite(576,8,1,$1771);
 label=435;break;
 case 434: 
 var $1783=_fwrite(528,5,1,$1771);
 label=435;break;
 case 435: 
 HEAP32[(($795)>>2)]=$speed_0;
 label=441;break;
 case 436: 
 var $1786=HEAP32[(($795)>>2)];
 var $1787=($1786|0)==0;
 if($1787){label=441;break;}else{label=437;break;}
 case 437: 
 var $1789=($1747|0)==2;
 var $1790=HEAP32[(($796)>>2)];
 if($1789){label=438;break;}else{label=439;break;}
 case 438: 
 var $1792=_fwrite(576,8,1,$1790);
 label=440;break;
 case 439: 
 var $1794=_fwrite(528,5,1,$1790);
 label=440;break;
 case 440: 
 HEAP32[(($795)>>2)]=0;
 label=441;break;
 case 441: 
 var $1797=HEAP32[(($797)>>2)];
 var $1798=($1797|0)>0;
 __ZN12GCodePlanner10writeGCodeEb($gcodeLayer11,$1798);
 (function() { try { __THREW__ = 0; return __ZN12GCodePlannerD1Ev($gcodeLayer11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $layerNr10_0=$1055;var $volumeIdx9_0=$volumeIdx9_1_lcssa;label=202;break; } else { label=37;break; }
 case 442: 
 var $_5582;
 var $_5;
 (function() { try { __THREW__ = 0; return __ZN12GCodePlannerD1Ev($gcodeLayer11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_6=$_5;var $_6583=$_5582;label=465;break; } else { label=471;break; }
 case 443: 
 var $1800=$tv_i_i879;
 var $1801=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i879,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=444;break; } else { label=42;break; }
 case 444: 
 var $1802=(($tv_i_i879)|0);
 var $1803=HEAP32[(($1802)>>2)];
 var $1804=(($tv_i_i879+4)|0);
 var $1805=HEAP32[(($1804)>>2)];
 var $1806=$tv_i4_i878;
 var $1807=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i878,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=445;break; } else { label=42;break; }
 case 445: 
 var $1809=($1805|0);
 var $1810=($1809)/(1000000);
 var $1811=($1803|0);
 var $1812=($1811)+($1810);
 var $1813=($1812)-($525);
 __Z4_logPKcz(3368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1813,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1814=HEAP32[(($796)>>2)];
 var $1815=_ftell($1814);
 var $1816=($1815|0);
 var $1817=$1816>1048576;
 if($1817){label=446;break;}else{var $fsize_0_i=$1816;label=447;break;}
 case 446: 
 var $1819=($1816)*((9.5367431640625e-7));
 var $1820=HEAP32[((_stderr)>>2)];
 var $1821=$1819;
 var $1822=_fprintf($1820,1400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1821,tempVarArgs)); STACKTOP=tempVarArgs;
 var $fsize_0_i=$1819;label=447;break;
 case 447: 
 var $fsize_0_i;
 var $1824=$fsize_0_i>1024;
 if($1824){label=448;break;}else{label=449;break;}
 case 448: 
 var $1826=($fsize_0_i)*((0.0009765625));
 var $1827=HEAP32[((_stderr)>>2)];
 var $1828=$1826;
 var $1829=_fprintf($1827,1352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1828,tempVarArgs)); STACKTOP=tempVarArgs;
 label=449;break;
 case 449: 
 var $1830=HEAP32[(($795)>>2)];
 var $1831=($1830|0)==0;
 if($1831){label=454;break;}else{label=450;break;}
 case 450: 
 var $1833=HEAP32[(($19)>>2)];
 var $1834=($1833|0)==2;
 var $1835=HEAP32[(($796)>>2)];
 if($1834){label=451;break;}else{label=452;break;}
 case 451: 
 var $1837=_fwrite(576,8,1,$1835);
 label=453;break;
 case 452: 
 var $1839=_fwrite(528,5,1,$1835);
 label=453;break;
 case 453: 
 HEAP32[(($795)>>2)]=0;
 label=454;break;
 case 454: 
 var $1841=HEAP32[((14448)>>2)];
 var $1842=($1841|0)<2;
 if($1842){label=456;break;}else{label=455;break;}
 case 455: 
 var $1844=_fprintf($820,6080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=3336,HEAP32[(((tempVarArgs)+(8))>>2)]=1,HEAP32[(((tempVarArgs)+(16))>>2)]=1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1845=_fflush($820);
 label=456;break;
 case 456: 
 var $1846=$tv_i_i886;
 var $1847=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i886,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=457;break; } else { label=42;break; }
 case 457: 
 var $1848=$tv_i4_i885;
 var $1849=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i885,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=458;break; } else { label=42;break; }
 case 458: 
 var $1850=$tv_i5_i;
 var $1851=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i5_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=459;break; } else { label=42;break; }
 case 459: 
 var $1852=(($tv_i5_i)|0);
 var $1853=HEAP32[(($1852)>>2)];
 var $1854=($1853|0);
 var $1855=(($tv_i5_i+4)|0);
 var $1856=HEAP32[(($1855)>>2)];
 var $1857=($1856|0);
 var $1858=($1857)/(1000000);
 var $1859=($1854)+($1858);
 var $1860=HEAPF64[((8)>>3)];
 var $1861=($1859)-($1860);
 __Z4_logPKcz(3224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1861,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1862=(($storage+8)|0);
 var $1863=HEAP32[((14496)>>2)];
 var $1864=HEAP32[(($1862)>>2)];
 var $1865=($1863|0)<($1864|0);
 var $1866=$1865?$1864:$1863;
 HEAP32[((14496)>>2)]=$1866;
 (function() { try { __THREW__ = 0; return __ZN16SliceDataStorageD2Ev($storage) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=460;break; } else { label=30;break; }
 case 460: 
 var $1867=HEAP32[(($172)>>2)];
 var $1868=$1867;
 var $1869=($1867|0)==0;
 if($1869){label=464;break;}else{label=461;break;}
 case 461: 
 var $1870=HEAP32[(($173)>>2)];
 var $1871=($1867|0)==($1870|0);
 if($1871){label=463;break;}else{label=462;break;}
 case 462: 
 var $scevgep_i_i_i617=((($1870)-(4))|0);
 var $scevgep28_i_i_i618=$scevgep_i_i_i617;
 var $1872=(((-$1868))|0);
 var $uglygep_i_i_i619=(($scevgep28_i_i_i618+$1872)|0);
 var $uglygep29_i_i_i620=$uglygep_i_i_i619;
 var $1873=$uglygep29_i_i_i620>>>2;
 var $1874=$1873^-1;
 var $scevgep30_i_i_i621=(($1870+($1874<<2))|0);
 HEAP32[(($173)>>2)]=$scevgep30_i_i_i621;
 label=463;break;
 case 463: 
 var $1875=$1867;
 __ZdlPv($1875);
 label=464;break;
 case 464: 
 STACKTOP=sp;return;
 case 465: 
 var $_6583;
 var $_6;
 (function() { try { __THREW__ = 0; return __ZN16SliceDataStorageD2Ev($storage) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_7=$_6;var $_7584=$_6583;label=466;break; } else { label=471;break; }
 case 466: 
 var $_7584;
 var $_7;
 var $1876=HEAP32[(($172)>>2)];
 var $1877=$1876;
 var $1878=($1876|0)==0;
 if($1878){var $_8=$_7;var $_8585=$_7584;label=470;break;}else{label=467;break;}
 case 467: 
 var $1879=HEAP32[(($173)>>2)];
 var $1880=($1876|0)==($1879|0);
 if($1880){label=469;break;}else{label=468;break;}
 case 468: 
 var $scevgep_i_i_i=((($1879)-(4))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $1881=(((-$1877))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$1881)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $1882=$uglygep29_i_i_i>>>2;
 var $1883=$1882^-1;
 var $scevgep30_i_i_i=(($1879+($1883<<2))|0);
 HEAP32[(($173)>>2)]=$scevgep30_i_i_i;
 label=469;break;
 case 469: 
 var $1884=$1876;
 __ZdlPv($1884);
 var $_8=$_7;var $_8585=$_7584;label=470;break;
 case 470: 
 var $_8585;
 var $_8;
 var $1885$0=$_8;
 var $1885$1=0;
 var $1886$0=$1885$0;
 var $1886$1=$_8585;
 ___resumeException($1886$0)
 case 471: 
 var $1888$0 = ___cxa_find_matching_catch(-1, -1,0); var $1888$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($this,$p,$speed,$lineWidth){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $p; $p=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($p)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($p)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($p)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($p)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($lineWidth|0)!=0;
 if($1){label=2;break;}else{label=11;break;}
 case 2: 
 var $3=(($this+56)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5$0=$4;
 var $5$1=(((($4|0)<0))|0)?-1:0;
 var $6=(($this+60)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8$0=$7;
 var $8$1=(((($7|0)<0))|0)?-1:0;
 var $p_idx=(($p)|0);
 var $ld$0$0=(($p_idx)|0);
 var $p_idx_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($p_idx+4)|0);
 var $p_idx_val$1=HEAP32[(($ld$1$1)>>2)];
 var $p_idx7=(($p+8)|0);
 var $ld$2$0=(($p_idx7)|0);
 var $p_idx7_val$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($p_idx7+4)|0);
 var $p_idx7_val$1=HEAP32[(($ld$3$1)>>2)];
 var $9$0=_i64Subtract($p_idx_val$0,$p_idx_val$1,$5$0,$5$1);var $9$1=tempRet0;
 var $10$0=_i64Subtract($p_idx7_val$0,$p_idx7_val$1,$8$0,$8$1);var $10$1=tempRet0;
 var $11=(($this+340)|0);
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $_phi_trans_insert=(($this+8)|0);
 var $_pre=HEAPF64[(($_phi_trans_insert)>>3)];
 var $_pre15=(($this)|0);
 var $48=$_pre;var $_pre_phi=$_pre15;label=10;break;
 case 4: 
 var $16=(($this+352)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==1;
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=_fwrite(936,4,1,$20);
 var $_pre18=(($this+8)|0);
 var $_pre_phi19=$_pre18;label=7;break;
 case 6: 
 var $24=(($this+332)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($25)*(60))&-1);
 var $27=(($this+8)|0);
 var $28=HEAPF64[(($27)>>3)];
 var $29=_fprintf($20,904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$26,HEAPF64[(((tempVarArgs)+(8))>>3)]=$28,tempVarArgs)); STACKTOP=tempVarArgs;
 var $30=HEAP32[(($24)>>2)];
 var $31=(($this+328)|0);
 HEAP32[(($31)>>2)]=$30;
 var $_pre_phi19=$27;label=7;break;
 case 7: 
 var $_pre_phi19;
 var $33=HEAPF64[(($_pre_phi19)>>3)];
 var $34=$33>10000;
 var $35=$33!=0;
 var $or_cond=$34&$35;
 if($or_cond){label=8;break;}else{var $46=$33;label=9;break;}
 case 8: 
 var $37=HEAP32[(($19)>>2)];
 var $38=_fwrite(664,7,1,$37);
 var $39=HEAPF64[(($_pre_phi19)>>3)];
 var $40=(($this+360)|0);
 var $41=HEAPF64[(($40)>>3)];
 var $42=($39)+($41);
 HEAPF64[(($40)>>3)]=$42;
 var $43=(($this+48)|0);
 var $44=HEAPF64[(($43)>>3)];
 var $45=($44)-($39);
 HEAPF64[(($43)>>3)]=$45;
 HEAPF64[(($_pre_phi19)>>3)]=0;
 var $46=0;label=9;break;
 case 9: 
 var $46;
 HEAP8[($11)]=0;
 var $48=$46;var $_pre_phi=$19;label=10;break;
 case 10: 
 var $_pre_phi;
 var $48;
 var $49=(($this+16)|0);
 var $50=HEAPF64[(($49)>>3)];
 var $51=($lineWidth|0);
 var $52=($51)*($50);
 var $53=($52)/(1000);
 var $54=(($9$0>>>0)+(($9$1|0)*4294967296));
 var $55=($54)/(1000);
 var $56=(($10$0>>>0)+(($10$1|0)*4294967296));
 var $57=($56)/(1000);
 var $58=($55)*($55);
 var $59=($57)*($57);
 var $60=($58)+($59);
 var $61=Math_sqrt($60);
 var $62=($53)*($61);
 var $63=(($this+8)|0);
 var $64=($48)+($62);
 HEAPF64[(($63)>>3)]=$64;
 var $65=HEAP32[(($_pre_phi)>>2)];
 var $66=_fwrite(880,2,1,$65);
 label=12;break;
 case 11: 
 var $68=(($this)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=_fwrite(840,2,1,$69);
 label=12;break;
 case 12: 
 var $72=(($this+328)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)==($speed|0);
 var $_pre16=(($this)|0);
 if($74){label=14;break;}else{label=13;break;}
 case 13: 
 var $76=HEAP32[(($_pre16)>>2)];
 var $77=((($speed)*(60))&-1);
 var $78=_fprintf($76,816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP32[(($72)>>2)]=$speed;
 label=14;break;
 case 14: 
 var $79=HEAP32[(($_pre16)>>2)];
 var $80=(($p)|0);
 var $ld$4$0=(($80)|0);
 var $81$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($80+4)|0);
 var $81$1=HEAP32[(($ld$5$1)>>2)];
 var $82=(($this+344)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($this+72+($83<<4))|0);
 var $ld$6$0=(($84)|0);
 var $85$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($84+4)|0);
 var $85$1=HEAP32[(($ld$7$1)>>2)];
 var $86$0=_i64Subtract($81$0,$81$1,$85$0,$85$1);var $86$1=tempRet0;
 var $87=(($86$0>>>0)+(($86$1|0)*4294967296));
 var $88=($87)/(1000);
 var $89=$88;
 var $90=(($p+8)|0);
 var $ld$8$0=(($90)|0);
 var $91$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($90+4)|0);
 var $91$1=HEAP32[(($ld$9$1)>>2)];
 var $92=(($this+72+($83<<4)+8)|0);
 var $ld$10$0=(($92)|0);
 var $93$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($92+4)|0);
 var $93$1=HEAP32[(($ld$11$1)>>2)];
 var $94$0=_i64Subtract($91$0,$91$1,$93$0,$93$1);var $94$1=tempRet0;
 var $95=(($94$0>>>0)+(($94$1|0)*4294967296));
 var $96=($95)/(1000);
 var $97=$96;
 var $98=_fprintf($79,768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$89,HEAPF64[(((tempVarArgs)+(8))>>3)]=$97,tempVarArgs)); STACKTOP=tempVarArgs;
 var $99=(($this+336)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($this+64)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=16;break;}else{label=15;break;}
 case 15: 
 var $105=HEAP32[(($_pre16)>>2)];
 var $106=($100|0);
 var $107=($106)/(1000);
 var $108=$107;
 var $109=_fprintf($105,744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$108,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 16: 
 if($1){label=17;break;}else{label=18;break;}
 case 17: 
 var $112=HEAP32[(($_pre16)>>2)];
 var $113=(($this+8)|0);
 var $114=HEAPF64[(($113)>>3)];
 var $115=_fprintf($112,712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$114,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 var $117=HEAP32[(($_pre16)>>2)];
 var $fputc=_fputc(10,$117);
 var $118$0=$81$0;
 var $118=$118$0;
 var $119$0=$91$0;
 var $119=$119$0;
 var $120=HEAP32[(($99)>>2)];
 var $_sroa_0_0__idx=(($this+56)|0);
 HEAP32[(($_sroa_0_0__idx)>>2)]=$118;
 var $_sroa_1_4__idx10=(($this+60)|0);
 HEAP32[(($_sroa_1_4__idx10)>>2)]=$119;
 HEAP32[(($101)>>2)]=$120;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11GCodeExport10addCommentEPKcz($this,$comment,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $args=sp;
 var $1=(($args)|0);
 var $2=$args;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $fputc=_fputc(59,$4);
 var $5=HEAP32[(($3)>>2)];
 var $6=_vfprintf($5,$comment,$1);
 var $7=HEAP32[(($3)>>2)];
 var $fputc4=_fputc(10,$7);
 STACKTOP=sp;return;
}
function __ZN12GCodePlanner22addPolygonsByOptimizerERNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEEP15GCodePathConfig($this,$polygons,$config){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $orderOptimizer=(sp)+(8);
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=$orderOptimizer;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0; HEAP32[((($4)+(24))>>2)]=0; HEAP32[((($4)+(28))>>2)]=0; HEAP32[((($4)+(32))>>2)]=0; HEAP32[((($4)+(36))>>2)]=0; HEAP32[((($4)+(40))>>2)]=0; HEAP32[((($4)+(44))>>2)]=0; HEAP32[((($4)+(48))>>2)]=0;
 assert(16 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];HEAP32[((($4)+(12))>>2)]=HEAP32[((($3)+(12))>>2)];
 var $5=(($polygons+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($polygons)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=26;break;}else{label=2;break;}
 case 2: 
 var $10=$1;
 var $11=(($orderOptimizer+20)|0);
 var $12=(($orderOptimizer+24)|0);
 var $13=(($orderOptimizer+16)|0);
 var $i_067=0;var $17=$8;var $16=0;var $15=0;label=3;break;
 case 3: 
 var $15;
 var $16;
 var $17;
 var $i_067;
 var $18=(($17+((($i_067)*(12))&-1))|0);
 HEAP32[(($1)>>2)]=$18;
 var $19=($16|0)==($15|0);
 if($19){label=7;break;}else{label=4;break;}
 case 4: 
 var $21=($16|0)==0;
 if($21){var $23=0;label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($16)>>2)]=$18;
 var $_pre_i=HEAP32[(($11)>>2)];
 var $23=$_pre_i;label=6;break;
 case 6: 
 var $23;
 var $24=(($23+4)|0);
 HEAP32[(($11)>>2)]=$24;
 label=8;break;
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($13,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $26=((($i_067)+(1))|0);
 var $27=HEAP32[(($5)>>2)];
 var $28=HEAP32[(($7)>>2)];
 var $29=$27;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=(((($31|0))/(12))&-1);
 var $33=($26>>>0)<($32>>>0);
 if($33){label=9;break;}else{label=26;break;}
 case 9: 
 var $_pre=HEAP32[(($11)>>2)];
 var $_pre76=HEAP32[(($12)>>2)];
 var $i_067=$26;var $17=$28;var $16=$_pre;var $15=$_pre76;label=3;break;
 case 10: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $_pre_phi=$69;label=14;break;
 case 11: 
 var $lpad_loopexit62$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit62$1 = tempRet0;
 var $lpad_phi64$1=$lpad_loopexit62$1;var $lpad_phi64$0=$lpad_loopexit62$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit63$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit63$1 = tempRet0;
 var $lpad_phi64$1=$lpad_nonloopexit63$1;var $lpad_phi64$0=$lpad_nonloopexit63$0;label=13;break;
 case 13: 
 var $lpad_phi64$0;
 var $lpad_phi64$1;
 var $_pre77=(($orderOptimizer+40)|0);
 var $lpad_phi$1=$lpad_phi64$1;var $lpad_phi$0=$lpad_phi64$0;var $_pre_phi=$_pre77;label=14;break;
 case 14: 
 var $_pre_phi;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $35=HEAP32[(($_pre_phi)>>2)];
 var $36=$35;
 var $37=($35|0)==0;
 if($37){label=18;break;}else{label=15;break;}
 case 15: 
 var $38=(($orderOptimizer+44)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($35|0)==($39|0);
 if($40){label=17;break;}else{label=16;break;}
 case 16: 
 var $scevgep_i_i_i_i25=((($39)-(4))|0);
 var $scevgep28_i_i_i_i26=$scevgep_i_i_i_i25;
 var $41=(((-$36))|0);
 var $uglygep_i_i_i_i27=(($scevgep28_i_i_i_i26+$41)|0);
 var $uglygep29_i_i_i_i28=$uglygep_i_i_i_i27;
 var $42=$uglygep29_i_i_i_i28>>>2;
 var $43=$42^-1;
 var $scevgep30_i_i_i_i29=(($39+($43<<2))|0);
 HEAP32[(($38)>>2)]=$scevgep30_i_i_i_i29;
 label=17;break;
 case 17: 
 var $44=$35;
 __ZdlPv($44);
 label=18;break;
 case 18: 
 var $45=(($orderOptimizer+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$46;
 var $48=($46|0)==0;
 if($48){label=22;break;}else{label=19;break;}
 case 19: 
 var $49=(($orderOptimizer+32)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($46|0)==($50|0);
 if($51){label=21;break;}else{label=20;break;}
 case 20: 
 var $scevgep_i_i_i5_i34=((($50)-(4))|0);
 var $scevgep28_i_i_i6_i35=$scevgep_i_i_i5_i34;
 var $52=(((-$47))|0);
 var $uglygep_i_i_i7_i36=(($scevgep28_i_i_i6_i35+$52)|0);
 var $uglygep29_i_i_i8_i37=$uglygep_i_i_i7_i36;
 var $53=$uglygep29_i_i_i8_i37>>>2;
 var $54=$53^-1;
 var $scevgep30_i_i_i9_i38=(($50+($54<<2))|0);
 HEAP32[(($49)>>2)]=$scevgep30_i_i_i9_i38;
 label=21;break;
 case 21: 
 var $55=$46;
 __ZdlPv($55);
 label=22;break;
 case 22: 
 var $56=(($orderOptimizer+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57;
 var $59=($57|0)==0;
 if($59){label=44;break;}else{label=23;break;}
 case 23: 
 var $60=(($orderOptimizer+20)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($57|0)==($61|0);
 if($62){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i14_i43=((($61)-(4))|0);
 var $scevgep28_i_i_i15_i44=$scevgep_i_i_i14_i43;
 var $63=(((-$58))|0);
 var $uglygep_i_i_i16_i45=(($scevgep28_i_i_i15_i44+$63)|0);
 var $uglygep29_i_i_i17_i46=$uglygep_i_i_i16_i45;
 var $64=$uglygep29_i_i_i17_i46>>>2;
 var $65=$64^-1;
 var $scevgep30_i_i_i18_i47=(($61+($65<<2))|0);
 HEAP32[(($60)>>2)]=$scevgep30_i_i_i18_i47;
 label=25;break;
 case 25: 
 var $66=$57;
 __ZdlPv($66);
 label=44;break;
 case 26: 
 (function() { try { __THREW__ = 0; return __ZN13PathOptimizer8optimizeEv($orderOptimizer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=12;break; }
 case 27: 
 var $67=(($orderOptimizer+44)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($orderOptimizer+40)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=$70;
 var $72=($68|0)==($70|0);
 if($72){var $_lcssa52=$68;var $_lcssa54=$68;var $_lcssa56=$71;label=31;break;}else{label=28;break;}
 case 28: 
 var $73=(($orderOptimizer+28)|0);
 var $i1_058=0;var $75=$70;label=29;break;
 case 29: 
 var $75;
 var $i1_058;
 var $76=(($75+($i1_058<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=HEAP32[(($7)>>2)];
 var $79=(($78+((($77)*(12))&-1))|0);
 var $80=HEAP32[(($73)>>2)];
 var $81=(($80+($77<<2))|0);
 var $82=HEAP32[(($81)>>2)];
 (function() { try { __THREW__ = 0; return __ZN12GCodePlanner10addPolygonERNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEEiP15GCodePathConfig($this,$79,$82,$config) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=10;break; }
 case 30: 
 var $84=((($i1_058)+(1))|0);
 var $85=HEAP32[(($67)>>2)];
 var $86=HEAP32[(($69)>>2)];
 var $87=$85;
 var $88=$86;
 var $89=((($87)-($88))|0);
 var $90=$89>>2;
 var $91=($84>>>0)<($90>>>0);
 if($91){var $i1_058=$84;var $75=$86;label=29;break;}else{var $_lcssa52=$85;var $_lcssa54=$86;var $_lcssa56=$88;label=31;break;}
 case 31: 
 var $_lcssa56;
 var $_lcssa54;
 var $_lcssa52;
 var $92=($_lcssa54|0)==0;
 if($92){label=35;break;}else{label=32;break;}
 case 32: 
 var $93=($_lcssa54|0)==($_lcssa52|0);
 if($93){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i_i=((($_lcssa52)-(4))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $94=(((-$_lcssa56))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$94)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $95=$uglygep29_i_i_i_i>>>2;
 var $96=$95^-1;
 var $scevgep30_i_i_i_i=(($_lcssa52+($96<<2))|0);
 HEAP32[(($67)>>2)]=$scevgep30_i_i_i_i;
 label=34;break;
 case 34: 
 var $97=$_lcssa54;
 __ZdlPv($97);
 label=35;break;
 case 35: 
 var $98=(($orderOptimizer+28)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$99;
 var $101=($99|0)==0;
 if($101){label=39;break;}else{label=36;break;}
 case 36: 
 var $102=(($orderOptimizer+32)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($99|0)==($103|0);
 if($104){label=38;break;}else{label=37;break;}
 case 37: 
 var $scevgep_i_i_i5_i=((($103)-(4))|0);
 var $scevgep28_i_i_i6_i=$scevgep_i_i_i5_i;
 var $105=(((-$100))|0);
 var $uglygep_i_i_i7_i=(($scevgep28_i_i_i6_i+$105)|0);
 var $uglygep29_i_i_i8_i=$uglygep_i_i_i7_i;
 var $106=$uglygep29_i_i_i8_i>>>2;
 var $107=$106^-1;
 var $scevgep30_i_i_i9_i=(($103+($107<<2))|0);
 HEAP32[(($102)>>2)]=$scevgep30_i_i_i9_i;
 label=38;break;
 case 38: 
 var $108=$99;
 __ZdlPv($108);
 label=39;break;
 case 39: 
 var $109=(($orderOptimizer+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=$110;
 var $112=($110|0)==0;
 if($112){label=43;break;}else{label=40;break;}
 case 40: 
 var $113=(($orderOptimizer+20)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($110|0)==($114|0);
 if($115){label=42;break;}else{label=41;break;}
 case 41: 
 var $scevgep_i_i_i14_i=((($114)-(4))|0);
 var $scevgep28_i_i_i15_i=$scevgep_i_i_i14_i;
 var $116=(((-$111))|0);
 var $uglygep_i_i_i16_i=(($scevgep28_i_i_i15_i+$116)|0);
 var $uglygep29_i_i_i17_i=$uglygep_i_i_i16_i;
 var $117=$uglygep29_i_i_i17_i>>>2;
 var $118=$117^-1;
 var $scevgep30_i_i_i18_i=(($114+($118<<2))|0);
 HEAP32[(($113)>>2)]=$scevgep30_i_i_i18_i;
 label=42;break;
 case 42: 
 var $119=$110;
 __ZdlPv($119);
 label=43;break;
 case 43: 
 STACKTOP=sp;return;
 case 44: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner10writeGCodeEb($this,$liftHeadIfNeeded){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(($this)|0);
 var $7=(($this+28)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($this+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=42;break;}else{label=2;break;}
 case 2: 
 var $12=HEAP32[(($6)>>2)];
 var $13=(($12+344)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($this+40)|0);
 var $16=(($this+52)|0);
 var $17=(($this+56)|0);
 var $18=$2;
 var $newPoint_sroa_0_0__idx=(($1)|0);
 var $newPoint_sroa_1_8__idx134=(($1+8)|0);
 var $19=$3;
 var $n_0187=0;var $extruder_0188=$14;var $lastConfig_0189=0;var $21=$10;label=3;break;
 case 3: 
 var $21;
 var $lastConfig_0189;
 var $extruder_0188;
 var $n_0187;
 var $22=(($21+((($n_0187)*(24))&-1)+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($extruder_0188|0)==($23|0);
 if($24){label=9;break;}else{label=4;break;}
 case 4: 
 var $26=HEAP32[(($6)>>2)];
 var $27=(($26+344)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==($23|0);
 if($29){var $extruder_1=$23;label=17;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($27)>>2)]=$23;
 var $31=(($26+352)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==1;
 var $34=(($26)|0);
 var $35=HEAP32[(($34)>>2)];
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=_fwrite(1152,7,1,$35);
 label=8;break;
 case 7: 
 var $39=(($26+332)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)*(60))&-1);
 var $42=(($26+8)|0);
 var $43=HEAPF64[(($42)>>3)];
 var $44=(($26+32)|0);
 var $45=HEAPF64[(($44)>>3)];
 var $46=($43)-($45);
 var $47=_fprintf($35,1096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$41,HEAPF64[(((tempVarArgs)+(8))>>3)]=$46,tempVarArgs)); STACKTOP=tempVarArgs;
 var $48=HEAP32[(($39)>>2)];
 var $49=(($26+328)|0);
 HEAP32[(($49)>>2)]=$48;
 label=8;break;
 case 8: 
 var $51=(($26+340)|0);
 HEAP8[($51)]=1;
 var $52=HEAP32[(($34)>>2)];
 var $53=HEAP32[(($27)>>2)];
 var $54=_fprintf($52,1048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$53,tempVarArgs)); STACKTOP=tempVarArgs;
 var $extruder_1=$23;label=17;break;
 case 9: 
 var $56=(($21+((($n_0187)*(24))&-1)+4)|0);
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){var $extruder_1=$extruder_0188;label=17;break;}else{label=10;break;}
 case 10: 
 var $61=HEAP32[(($6)>>2)];
 var $62=(($61+24)|0);
 var $63=HEAPF64[(($62)>>3)];
 var $64=$63>0;
 if($64){label=11;break;}else{var $extruder_1=$extruder_0188;label=17;break;}
 case 11: 
 var $66=(($61+340)|0);
 var $67=HEAP8[($66)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=12;break;}else{var $extruder_1=$extruder_0188;label=17;break;}
 case 12: 
 var $71=(($61+48)|0);
 var $72=HEAPF64[(($71)>>3)];
 var $73=(($61+40)|0);
 var $74=HEAPF64[(($73)>>3)];
 var $75=($72)+($74);
 var $76=(($61+8)|0);
 var $77=HEAPF64[(($76)>>3)];
 var $78=$75<$77;
 if($78){label=13;break;}else{var $extruder_1=$extruder_0188;label=17;break;}
 case 13: 
 var $80=(($61+352)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==1;
 var $83=(($61)|0);
 var $84=HEAP32[(($83)>>2)];
 if($82){label=14;break;}else{label=15;break;}
 case 14: 
 var $86=_fwrite(688,4,1,$84);
 label=16;break;
 case 15: 
 var $88=(($61+332)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=((($89)*(60))&-1);
 var $91=($77)-($63);
 var $92=_fprintf($84,904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$90,HEAPF64[(((tempVarArgs)+(8))>>3)]=$91,tempVarArgs)); STACKTOP=tempVarArgs;
 var $93=HEAP32[(($88)>>2)];
 var $94=(($61+328)|0);
 HEAP32[(($94)>>2)]=$93;
 label=16;break;
 case 16: 
 var $96=HEAPF64[(($76)>>3)];
 HEAPF64[(($71)>>3)]=$96;
 HEAP8[($66)]=1;
 var $extruder_1=$extruder_0188;label=17;break;
 case 17: 
 var $extruder_1;
 var $97=(($21+((($n_0187)*(24))&-1))|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==($15|0);
 var $100=($lastConfig_0189|0)==($98|0);
 var $or_cond=$99|$100;
 if($or_cond){var $lastConfig_1=$lastConfig_0189;var $107=$98;label=19;break;}else{label=18;break;}
 case 18: 
 var $102=HEAP32[(($6)>>2)];
 var $103=(($98+8)|0);
 var $104=HEAP32[(($103)>>2)];
 __ZN11GCodeExport10addCommentEPKcz($102,1320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$104,tempVarArgs)); STACKTOP=tempVarArgs;
 var $105=HEAP32[(($97)>>2)];
 var $lastConfig_1=$105;var $107=$105;label=19;break;
 case 19: 
 var $107;
 var $lastConfig_1;
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($107+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 var $_pn_in=$112?$17:$16;
 var $_pn=HEAP32[(($_pn_in)>>2)];
 var $speed_0_in=(Math_imul($_pn,$109)|0);
 var $speed_0=(((($speed_0_in|0))/(100))&-1);
 var $113=(($21+((($n_0187)*(24))&-1)+16)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($21+((($n_0187)*(24))&-1)+12)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$114;
 var $118=$116;
 var $119=((($117)-($118))|0);
 var $120=($119|0)!=16;
 var $121=($107|0)==($15|0);
 var $or_cond161=$120|$121;
 if($or_cond161){label=24;break;}else{label=20;break;}
 case 20: 
 var $123=HEAP32[(($6)>>2)];
 var $124=(($123+56)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126$0=$125;
 var $126$1=(((($125|0)<0))|0)?-1:0;
 var $127=(($123+60)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129$0=$128;
 var $129$1=(((($128|0)<0))|0)?-1:0;
 var $_idx106=(($116)|0);
 var $ld$0$0=(($_idx106)|0);
 var $_idx106_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_idx106+4)|0);
 var $_idx106_val$1=HEAP32[(($ld$1$1)>>2)];
 var $_idx107=(($116+8)|0);
 var $ld$2$0=(($_idx107)|0);
 var $_idx107_val$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($_idx107+4)|0);
 var $_idx107_val$1=HEAP32[(($ld$3$1)>>2)];
 var $130$0=_i64Subtract($126$0,$126$1,$_idx106_val$0,$_idx106_val$1);var $130$1=tempRet0;
 var $131$0=_i64Subtract($129$0,$129$1,$_idx107_val$0,$_idx107_val$1);var $131$1=tempRet0;
 var $132=$111<<1;
 var $133$0=$132;
 var $133$1=(((($132|0)<0))|0)?-1:0;
 var $134=(($133$1|0) < ($130$1|0)) | (((($133$1|0) == ($130$1|0) & ($133$0>>>0) <  ($130$0>>>0))));
 if($134){label=24;break;}else{label=21;break;}
 case 21: 
 var $136=(((-$132))|0);
 var $137$0=$136;
 var $137$1=(((($136|0)<0))|0)?-1:0;
 var $138=(($137$1|0) > ($130$1|0)) | (((($137$1|0) == ($130$1|0) & ($137$0>>>0) >  ($130$0>>>0))));
 if($138){label=24;break;}else{label=22;break;}
 case 22: 
 var $140=(($133$1|0) < ($131$1|0)) | (((($133$1|0) == ($131$1|0) & ($133$0>>>0) <  ($131$0>>>0))));
 var $141=(($137$1|0) > ($131$1|0)) | (((($137$1|0) == ($131$1|0) & ($137$0>>>0) >  ($131$0>>>0))));
 var $or_cond_i=$140|$141;
 if($or_cond_i){label=24;break;}else{label=23;break;}
 case 23: 
 var $142$0=___muldi3($130$0,$130$1,$130$0,$130$1);var $142$1=tempRet0;
 var $143$0=___muldi3($131$0,$131$1,$131$0,$131$1);var $143$1=tempRet0;
 var $144$0=_i64Add($143$0,$143$1,$142$0,$142$1);var $144$1=tempRet0;
 var $145=(Math_imul($132,$132)|0);
 var $146$0=$145;
 var $146$1=0;
 var $147=(($144$1|0) > ($146$1|0)) | (((($144$1|0) == ($146$1|0) & ($144$0>>>0) >  ($146$0>>>0))));
 if($147){label=24;break;}else{label=25;break;}
 case 24: 
 var $148=($114|0)==($116|0);
 if($148){var $n_1=$n_0187;label=41;break;}else{var $i1_0185=0;var $243=$116;var $242=$111;label=39;break;}
 case 25: 
 var $i_0172=((($n_0187)+(1))|0);
 var $150=HEAP32[(($7)>>2)];
 var $151=HEAP32[(($9)>>2)];
 var $152=$150;
 var $153=$151;
 var $154=((($152)-($153))|0);
 var $155=(((($154|0))/(24))&-1);
 var $156=($i_0172>>>0)<($155>>>0);
 if($156){var $i_0_in173=$n_0187;var $i_0176=$i_0172;var $p0_sroa_0_0_copyload146158174$1=$_idx106_val$1;var $p0_sroa_0_0_copyload146158174$0=$_idx106_val$0;var $p0_sroa_1_8_copyload152160175$1=$_idx107_val$1;var $p0_sroa_1_8_copyload152160175$0=$_idx107_val$0;label=26;break;}else{var $i_0_in165=$n_0187;var $i_0167=$i_0172;label=31;break;}
 case 26: 
 var $p0_sroa_1_8_copyload152160175$0;
 var $p0_sroa_1_8_copyload152160175$1;
 var $p0_sroa_0_0_copyload146158174$0;
 var $p0_sroa_0_0_copyload146158174$1;
 var $i_0176;
 var $i_0_in173;
 var $157=(($151+((($i_0176)*(24))&-1)+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($151+((($i_0176)*(24))&-1)+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$158;
 var $162=$160;
 var $163=((($161)-($162))|0);
 var $164=($163|0)==16;
 if($164){label=27;break;}else{var $i_0_in165=$i_0_in173;var $i_0167=$i_0176;label=31;break;}
 case 27: 
 var $_idx102=(($160)|0);
 var $ld$4$0=(($_idx102)|0);
 var $_idx102_val$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($_idx102+4)|0);
 var $_idx102_val$1=HEAP32[(($ld$5$1)>>2)];
 var $_idx103=(($160+8)|0);
 var $ld$6$0=(($_idx103)|0);
 var $_idx103_val$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($_idx103+4)|0);
 var $_idx103_val$1=HEAP32[(($ld$7$1)>>2)];
 var $166$0=_i64Subtract($p0_sroa_0_0_copyload146158174$0,$p0_sroa_0_0_copyload146158174$1,$_idx102_val$0,$_idx102_val$1);var $166$1=tempRet0;
 var $167$0=_i64Subtract($p0_sroa_1_8_copyload152160175$0,$p0_sroa_1_8_copyload152160175$1,$_idx103_val$0,$_idx103_val$1);var $167$1=tempRet0;
 var $168=(($133$1|0) < ($166$1|0)) | (((($133$1|0) == ($166$1|0) & ($133$0>>>0) <  ($166$0>>>0))));
 var $169=(($137$1|0) > ($166$1|0)) | (((($137$1|0) == ($166$1|0) & ($137$0>>>0) >  ($166$0>>>0))));
 var $or_cond219=$168|$169;
 if($or_cond219){var $i_0_in165=$i_0_in173;var $i_0167=$i_0176;label=31;break;}else{label=28;break;}
 case 28: 
 var $171=(($133$1|0) < ($167$1|0)) | (((($133$1|0) == ($167$1|0) & ($133$0>>>0) <  ($167$0>>>0))));
 var $172=(($137$1|0) > ($167$1|0)) | (((($137$1|0) == ($167$1|0) & ($137$0>>>0) >  ($167$0>>>0))));
 var $or_cond_i122=$171|$172;
 if($or_cond_i122){var $i_0_in165=$i_0_in173;var $i_0167=$i_0176;label=31;break;}else{label=29;break;}
 case 29: 
 var $173$0=___muldi3($166$0,$166$1,$166$0,$166$1);var $173$1=tempRet0;
 var $174$0=___muldi3($167$0,$167$1,$167$0,$167$1);var $174$1=tempRet0;
 var $175$0=_i64Add($174$0,$174$1,$173$0,$173$1);var $175$1=tempRet0;
 var $176=(($175$1|0) > ($146$1|0)) | (((($175$1|0) == ($146$1|0) & ($175$0>>>0) >  ($146$0>>>0))));
 if($176){var $i_0_in165=$i_0_in173;var $i_0167=$i_0176;label=31;break;}else{label=30;break;}
 case 30: 
 var $i_0=((($i_0176)+(1))|0);
 var $178=($i_0>>>0)<($155>>>0);
 if($178){var $i_0_in173=$i_0176;var $i_0176=$i_0;var $p0_sroa_0_0_copyload146158174$1=$_idx102_val$1;var $p0_sroa_0_0_copyload146158174$0=$_idx102_val$0;var $p0_sroa_1_8_copyload152160175$1=$_idx103_val$1;var $p0_sroa_1_8_copyload152160175$0=$_idx103_val$0;label=26;break;}else{var $i_0_in165=$i_0176;var $i_0167=$i_0;label=31;break;}
 case 31: 
 var $i_0167;
 var $i_0_in165;
 var $179=(($151+((($i_0_in165)*(24))&-1))|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)==($15|0);
 var $i_0_in_i_0=$181?$i_0_in165:$i_0167;
 var $182=((($n_0187)+(2))|0);
 var $183=($i_0_in_i_0>>>0)>($182>>>0);
 if($183){label=32;break;}else{label=24;break;}
 case 32: 
 var $185=((($i_0_in_i_0)-(1))|0);
 var $186=($n_0187>>>0)<($185>>>0);
 if($186){var $p0_sroa_1_8_copyload152159179$1=$129$1;var $p0_sroa_1_8_copyload152159179$0=$129$0;var $p0_sroa_0_0_copyload146157180$1=$126$1;var $p0_sroa_0_0_copyload146157180$0=$126$0;var $x_0181=$n_0187;var $190=$151;var $189=$123;var $188=$125;var $187=$128;label=33;break;}else{var $236=$123;var $235=$151;var $234=$107;label=38;break;}
 case 33: 
 var $187;
 var $188;
 var $189;
 var $190;
 var $x_0181;
 var $p0_sroa_0_0_copyload146157180$0;
 var $p0_sroa_0_0_copyload146157180$1;
 var $p0_sroa_1_8_copyload152159179$0;
 var $p0_sroa_1_8_copyload152159179$1;
 var $191=(($190+((($x_0181)*(24))&-1)+12)|0);
 var $192=HEAP32[(($191)>>2)];
 var $_idx98=(($192)|0);
 var $ld$8$0=(($_idx98)|0);
 var $_idx98_val$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($_idx98+4)|0);
 var $_idx98_val$1=HEAP32[(($ld$9$1)>>2)];
 var $_idx99=(($192+8)|0);
 var $ld$10$0=(($_idx99)|0);
 var $_idx99_val$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($_idx99+4)|0);
 var $_idx99_val$1=HEAP32[(($ld$11$1)>>2)];
 var $193$0=_i64Subtract($p0_sroa_0_0_copyload146157180$0,$p0_sroa_0_0_copyload146157180$1,$_idx98_val$0,$_idx98_val$1);var $193$1=tempRet0;
 var $194$0=_i64Subtract($p0_sroa_1_8_copyload152159179$0,$p0_sroa_1_8_copyload152159179$1,$_idx99_val$0,$_idx99_val$1);var $194$1=tempRet0;
 var $195=((($x_0181)+(1))|0);
 var $196=(($190+((($195)*(24))&-1)+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $_idx120=(($197)|0);
 var $ld$12$0=(($_idx120)|0);
 var $_idx120_val$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($_idx120+4)|0);
 var $_idx120_val$1=HEAP32[(($ld$13$1)>>2)];
 var $_idx121=(($197+8)|0);
 var $ld$14$0=(($_idx121)|0);
 var $_idx121_val$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($_idx121+4)|0);
 var $_idx121_val$1=HEAP32[(($ld$15$1)>>2)];
 var $198$0=_i64Add($_idx120_val$0,$_idx120_val$1,$_idx98_val$0,$_idx98_val$1);var $198$1=tempRet0;
 var $199$0=_i64Add($_idx121_val$0,$_idx121_val$1,$_idx99_val$0,$_idx99_val$1);var $199$1=tempRet0;
 var $$etemp$16$0=2;
 var $$etemp$16$1=0;
 var $200$0=___divdi3($198$0,$198$1,$$etemp$16$0,$$etemp$16$1);var $200$1=tempRet0;
 var $$etemp$17$0=2;
 var $$etemp$17$1=0;
 var $201$0=___divdi3($199$0,$199$1,$$etemp$17$0,$$etemp$17$1);var $201$1=tempRet0;
 var $202$0=$188;
 var $202$1=(((($188|0)<0))|0)?-1:0;
 var $203$0=$187;
 var $203$1=(((($187|0)<0))|0)?-1:0;
 var $204$0=_i64Subtract($202$0,$202$1,$200$0,$200$1);var $204$1=tempRet0;
 var $205$0=_i64Subtract($203$0,$203$1,$201$0,$201$1);var $205$1=tempRet0;
 var $206$0=___muldi3($204$0,$204$1,$204$0,$204$1);var $206$1=tempRet0;
 var $207$0=___muldi3($205$0,$205$1,$205$0,$205$1);var $207$1=tempRet0;
 var $208$0=_i64Add($207$0,$207$1,$206$0,$206$1);var $208$1=tempRet0;
 var $209=(($208$0>>>0)+(($208$1|0)*4294967296));
 var $210=Math_sqrt($209);
 var $211=(($210)&-1);
 var $212=($211|0)>0;
 if($212){label=34;break;}else{var $230=$190;var $p0_sroa_0_0_copyload$1=$_idx120_val$1;var $p0_sroa_0_0_copyload$0=$_idx120_val$0;var $p0_sroa_1_8_copyload$1=$_idx121_val$1;var $p0_sroa_1_8_copyload$0=$_idx121_val$0;label=35;break;}
 case 34: 
 var $214$0=___muldi3($194$0,$194$1,$194$0,$194$1);var $214$1=tempRet0;
 var $215$0=___muldi3($193$0,$193$1,$193$0,$193$1);var $215$1=tempRet0;
 var $216$0=_i64Add($214$0,$214$1,$215$0,$215$1);var $216$1=tempRet0;
 var $217=(($216$0>>>0)+(($216$1|0)*4294967296));
 var $218=Math_sqrt($217);
 var $219=(($218)&-1);
 var $220$0=$211;
 var $220$1=(((($211|0)<0))|0)?-1:0;
 var $221$0=$219;
 var $221$1=(((($219|0)<0))|0)?-1:0;
 var $st$18$0=(($newPoint_sroa_0_0__idx)|0);
 HEAP32[(($st$18$0)>>2)]=$200$0;
 var $st$19$1=(($newPoint_sroa_0_0__idx+4)|0);
 HEAP32[(($st$19$1)>>2)]=$200$1;
 var $st$20$0=(($newPoint_sroa_1_8__idx134)|0);
 HEAP32[(($st$20$0)>>2)]=$201$0;
 var $st$21$1=(($newPoint_sroa_1_8__idx134+4)|0);
 HEAP32[(($st$21$1)>>2)]=$201$1;
 var $222=HEAP32[(($97)>>2)];
 var $223=(($222+4)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225$0=$224;
 var $225$1=(((($224|0)<0))|0)?-1:0;
 var $226$0=___muldi3($225$0,$225$1,$221$0,$221$1);var $226$1=tempRet0;
 var $227$0=___divdi3($226$0,$226$1,$220$0,$220$1);var $227$1=tempRet0;
 var $228$0=$227$0;
 var $228=$228$0;
 __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($189,$1,$speed_0,$228);
 var $_pre203=HEAP32[(($9)>>2)];
 var $_phi_trans_insert=(($_pre203+((($195)*(24))&-1)+12)|0);
 var $_pre204=HEAP32[(($_phi_trans_insert)>>2)];
 var $p0_sroa_0_0__idx_phi_trans_insert=(($_pre204)|0);
 var $ld$22$0=(($p0_sroa_0_0__idx_phi_trans_insert)|0);
 var $p0_sroa_0_0_copyload_pre$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($p0_sroa_0_0__idx_phi_trans_insert+4)|0);
 var $p0_sroa_0_0_copyload_pre$1=HEAP32[(($ld$23$1)>>2)];
 var $p0_sroa_1_8__idx148_phi_trans_insert=(($_pre204+8)|0);
 var $ld$24$0=(($p0_sroa_1_8__idx148_phi_trans_insert)|0);
 var $p0_sroa_1_8_copyload_pre$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($p0_sroa_1_8__idx148_phi_trans_insert+4)|0);
 var $p0_sroa_1_8_copyload_pre$1=HEAP32[(($ld$25$1)>>2)];
 var $230=$_pre203;var $p0_sroa_0_0_copyload$1=$p0_sroa_0_0_copyload_pre$1;var $p0_sroa_0_0_copyload$0=$p0_sroa_0_0_copyload_pre$0;var $p0_sroa_1_8_copyload$1=$p0_sroa_1_8_copyload_pre$1;var $p0_sroa_1_8_copyload$0=$p0_sroa_1_8_copyload_pre$0;label=35;break;
 case 35: 
 var $p0_sroa_1_8_copyload$0;
 var $p0_sroa_1_8_copyload$1;
 var $p0_sroa_0_0_copyload$0;
 var $p0_sroa_0_0_copyload$1;
 var $230;
 var $231=((($x_0181)+(2))|0);
 var $232=($231>>>0)<($185>>>0);
 var $_pre209=HEAP32[(($6)>>2)];
 if($232){label=36;break;}else{label=37;break;}
 case 36: 
 var $_phi_trans_insert210=(($_pre209+56)|0);
 var $_pre211=HEAP32[(($_phi_trans_insert210)>>2)];
 var $_phi_trans_insert212=(($_pre209+60)|0);
 var $_pre213=HEAP32[(($_phi_trans_insert212)>>2)];
 var $p0_sroa_1_8_copyload152159179$1=$p0_sroa_1_8_copyload$1;var $p0_sroa_1_8_copyload152159179$0=$p0_sroa_1_8_copyload$0;var $p0_sroa_0_0_copyload146157180$1=$p0_sroa_0_0_copyload$1;var $p0_sroa_0_0_copyload146157180$0=$p0_sroa_0_0_copyload$0;var $x_0181=$231;var $190=$230;var $189=$_pre209;var $188=$_pre211;var $187=$_pre213;label=33;break;
 case 37: 
 var $_pre202=HEAP32[(($97)>>2)];
 var $236=$_pre209;var $235=$230;var $234=$_pre202;label=38;break;
 case 38: 
 var $234;
 var $235;
 var $236;
 var $237=(($235+((($185)*(24))&-1)+12)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=$238;
 assert(16 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($239)+(8))>>2)];HEAP32[((($18)+(12))>>2)]=HEAP32[((($239)+(12))>>2)];
 var $240=(($234+4)|0);
 var $241=HEAP32[(($240)>>2)];
 __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($236,$2,$speed_0,$241);
 var $n_1=$185;label=41;break;
 case 39: 
 var $242;
 var $243;
 var $i1_0185;
 var $244=HEAP32[(($6)>>2)];
 var $245=(($243+($i1_0185<<4))|0);
 var $246=$245;
 assert(16 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($246)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($246)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($246)+(8))>>2)];HEAP32[((($19)+(12))>>2)]=HEAP32[((($246)+(12))>>2)];
 __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($244,$3,$speed_0,$242);
 var $247=((($i1_0185)+(1))|0);
 var $248=HEAP32[(($113)>>2)];
 var $249=HEAP32[(($115)>>2)];
 var $250=$248;
 var $251=$249;
 var $252=((($250)-($251))|0);
 var $253=$252>>4;
 var $254=($247>>>0)<($253>>>0);
 if($254){label=40;break;}else{var $n_1=$n_0187;label=41;break;}
 case 40: 
 var $_pre216=HEAP32[(($97)>>2)];
 var $_phi_trans_insert217=(($_pre216+4)|0);
 var $_pre218=HEAP32[(($_phi_trans_insert217)>>2)];
 var $i1_0185=$247;var $243=$249;var $242=$_pre218;label=39;break;
 case 41: 
 var $n_1;
 var $255=((($n_1)+(1))|0);
 var $256=HEAP32[(($7)>>2)];
 var $257=HEAP32[(($9)>>2)];
 var $258=$256;
 var $259=$257;
 var $260=((($258)-($259))|0);
 var $261=(((($260|0))/(24))&-1);
 var $262=($255>>>0)<($261>>>0);
 if($262){var $n_0187=$255;var $extruder_0188=$extruder_1;var $lastConfig_0189=$lastConfig_1;var $21=$257;label=3;break;}else{label=42;break;}
 case 42: 
 var $263=(($this+80)|0);
 var $264=HEAPF64[(($263)>>3)];
 var $265=HEAP32[(($6)>>2)];
 var $266=(($265+368)|0);
 var $267=HEAPF64[(($266)>>3)];
 var $268=($264)+($267);
 HEAPF64[(($266)>>3)]=$268;
 if($liftHeadIfNeeded){label=43;break;}else{label=52;break;}
 case 43: 
 var $270=(($this+72)|0);
 var $271=HEAPF64[(($270)>>3)];
 var $272=$271>0;
 if($272){label=44;break;}else{label=52;break;}
 case 44: 
 var $274=HEAP32[(($6)>>2)];
 var $275=(($274+368)|0);
 var $276=HEAPF64[(($275)>>3)];
 var $277=($271)+($276);
 HEAPF64[(($275)>>3)]=$277;
 var $278=HEAP32[(($6)>>2)];
 var $279=HEAPF64[(($270)>>3)];
 __ZN11GCodeExport10addCommentEPKcz($278,1240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$279,tempVarArgs)); STACKTOP=tempVarArgs;
 var $280=HEAP32[(($6)>>2)];
 var $281=(($280+24)|0);
 var $282=HEAPF64[(($281)>>3)];
 var $283=$282>0;
 if($283){label=45;break;}else{var $316=$280;label=51;break;}
 case 45: 
 var $285=(($280+340)|0);
 var $286=HEAP8[($285)];
 var $287=$286&1;
 var $288=(($287<<24)>>24)==0;
 if($288){label=46;break;}else{var $316=$280;label=51;break;}
 case 46: 
 var $290=(($280+48)|0);
 var $291=HEAPF64[(($290)>>3)];
 var $292=(($280+40)|0);
 var $293=HEAPF64[(($292)>>3)];
 var $294=($291)+($293);
 var $295=(($280+8)|0);
 var $296=HEAPF64[(($295)>>3)];
 var $297=$294<$296;
 if($297){label=47;break;}else{var $316=$280;label=51;break;}
 case 47: 
 var $299=(($280+352)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==1;
 var $302=(($280)|0);
 var $303=HEAP32[(($302)>>2)];
 if($301){label=48;break;}else{label=49;break;}
 case 48: 
 var $305=_fwrite(688,4,1,$303);
 label=50;break;
 case 49: 
 var $307=(($280+332)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=((($308)*(60))&-1);
 var $310=($296)-($282);
 var $311=_fprintf($303,904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$309,HEAPF64[(((tempVarArgs)+(8))>>3)]=$310,tempVarArgs)); STACKTOP=tempVarArgs;
 var $312=HEAP32[(($307)>>2)];
 var $313=(($280+328)|0);
 HEAP32[(($313)>>2)]=$312;
 label=50;break;
 case 50: 
 var $315=HEAPF64[(($295)>>3)];
 HEAPF64[(($290)>>3)]=$315;
 HEAP8[($285)]=1;
 var $_pre=HEAP32[(($6)>>2)];
 var $316=$_pre;label=51;break;
 case 51: 
 var $316;
 var $317=(($316+64)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=((($318)+(3000))|0);
 var $320=(($316+336)|0);
 HEAP32[(($320)>>2)]=$319;
 var $321=HEAP32[(($6)>>2)];
 var $322=(($321+56)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324$0=$323;
 var $324$1=(((($323|0)<0))|0)?-1:0;
 var $325=(($321+60)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327$0=$326;
 var $327$1=(((($326|0)<0))|0)?-1:0;
 var $328=(($4)|0);
 var $st$26$0=(($328)|0);
 HEAP32[(($st$26$0)>>2)]=$324$0;
 var $st$27$1=(($328+4)|0);
 HEAP32[(($st$27$1)>>2)]=$324$1;
 var $329=(($4+8)|0);
 var $st$28$0=(($329)|0);
 HEAP32[(($st$28$0)>>2)]=$327$0;
 var $st$29$1=(($329+4)|0);
 HEAP32[(($st$29$1)>>2)]=$327$1;
 var $330=(($this+40)|0);
 var $331=HEAP32[(($330)>>2)];
 __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($321,$4,$331,0);
 var $332=HEAP32[(($6)>>2)];
 var $333=(($332+56)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335$0=$334;
 var $335$1=(((($334|0)<0))|0)?-1:0;
 var $336=(($332+60)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338$0=$337;
 var $338$1=(((($337|0)<0))|0)?-1:0;
 var $$etemp$30$0=20000;
 var $$etemp$30$1=0;
 var $339$0=_i64Add($335$0,$335$1,$$etemp$30$0,$$etemp$30$1);var $339$1=tempRet0;
 var $340=(($5)|0);
 var $st$31$0=(($340)|0);
 HEAP32[(($st$31$0)>>2)]=$339$0;
 var $st$32$1=(($340+4)|0);
 HEAP32[(($st$32$1)>>2)]=$339$1;
 var $341=(($5+8)|0);
 var $st$33$0=(($341)|0);
 HEAP32[(($st$33$0)>>2)]=$338$0;
 var $st$34$1=(($341+4)|0);
 HEAP32[(($st$34$1)>>2)]=$338$1;
 var $342=HEAP32[(($330)>>2)];
 __ZN11GCodeExport7addMoveEN10ClipperLib8IntPointEii($332,$5,$342,0);
 var $343=HEAP32[(($6)>>2)];
 var $344=HEAPF64[(($270)>>3)];
 var $345=(($343)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=($344)*(1000);
 var $348=(($347)&-1);
 var $349=_fprintf($346,1192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$348,tempVarArgs)); STACKTOP=tempVarArgs;
 label=52;break;
 case 52: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlannerD1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+36)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=11;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 __ZdaPv($9);
 label=4;break;
 case 4: 
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=5;break;}
 case 5: 
 var $15=$12;
 __ZdaPv($15);
 label=6;break;
 case 6: 
 var $17=(($2+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=$18;
 __ZdaPv($21);
 label=8;break;
 case 8: 
 var $23=(($2+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=$24;
 __ZdaPv($27);
 label=10;break;
 case 10: 
 var $28=$2;
 __ZdlPv($28);
 label=11;break;
 case 11: 
 var $29=(($this+24)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=20;break;}else{label=12;break;}
 case 12: 
 var $32=(($this+28)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($30|0)==($33|0);
 if($34){var $50=$30;label=19;break;}else{var $35=$33;label=13;break;}
 case 13: 
 var $35;
 var $36=((($35)-(24))|0);
 HEAP32[(($32)>>2)]=$36;
 var $37=((($35)-(24)+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 var $40=($38|0)==0;
 if($40){var $41=$36;label=14;break;}else{label=15;break;}
 case 14: 
 var $41;
 var $42=($30|0)==($41|0);
 if($42){label=18;break;}else{var $35=$41;label=13;break;}
 case 15: 
 var $43=((($35)-(24)+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($38|0)==($44|0);
 if($45){label=17;break;}else{label=16;break;}
 case 16: 
 var $scevgep_i_i_i_i_i_i_i_i=((($44)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i;
 var $46=(((-$39))|0);
 var $uglygep_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i+$46)|0);
 var $uglygep29_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i;
 var $47=$uglygep29_i_i_i_i_i_i_i_i>>>4;
 var $48=$47^-1;
 var $scevgep30_i_i_i_i_i_i_i_i=(($44+($48<<4))|0);
 HEAP32[(($43)>>2)]=$scevgep30_i_i_i_i_i_i_i_i;
 label=17;break;
 case 17: 
 var $49=$38;
 __ZdlPv($49);
 var $_pre29_i_i_i=HEAP32[(($32)>>2)];
 var $41=$_pre29_i_i_i;label=14;break;
 case 18: 
 var $_pre_i_i_i=HEAP32[(($29)>>2)];
 var $50=$_pre_i_i_i;label=19;break;
 case 19: 
 var $50;
 var $51=$50;
 __ZdlPv($51);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN13PathOptimizer8optimizeEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $picked=sp;
 var $best=(sp)+(16);
 var $best1=(sp)+(24);
 var $1=(($picked)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($picked+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($picked+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($this+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($5|0)==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $p0_sroa_0_0__idx192_pre=(($this)|0);
 var $p0_sroa_1_8__idx206_pre=(($this+8)|0);
 var $p0_sroa_1_8__idx206_pre_phi275=$p0_sroa_1_8__idx206_pre;var $p0_sroa_0_0__idx192_pre_phi277=$p0_sroa_0_0__idx192_pre;var $99=$5;label=28;break;
 case 3: 
 var $9=(($this+32)|0);
 var $10=(($this+36)|0);
 var $11=(($this+28)|0);
 var $12=$picked;
 var $13=(($this)|0);
 var $14=(($this+8)|0);
 var $i_0254=0;var $16=$7;label=4;break;
 case 4: 
 var $16;
 var $i_0254;
 HEAP32[(($best)>>2)]=-1;
 var $17=(($16+($i_0254<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($18)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($20|0)==($22|0);
 if($23){var $54=-1;label=13;break;}else{label=5;break;}
 case 5: 
 var $ld$0$0=(($13)|0);
 var $24$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($13+4)|0);
 var $24$1=HEAP32[(($ld$1$1)>>2)];
 var $ld$2$0=(($14)|0);
 var $25$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($14+4)|0);
 var $25$1=HEAP32[(($ld$3$1)>>2)];
 var $26=$20;
 var $27=$22;
 var $28=((($26)-($27))|0);
 var $29=$28>>4;
 var $j_0245=0;var $bestDist_0246=18446744073709552000;var $31=-1;label=6;break;
 case 6: 
 var $31;
 var $bestDist_0246;
 var $j_0245;
 var $32=(($22+($j_0245<<4))|0);
 var $ld$4$0=(($32)|0);
 var $33$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($32+4)|0);
 var $33$1=HEAP32[(($ld$5$1)>>2)];
 var $34$0=_i64Subtract($33$0,$33$1,$24$0,$24$1);var $34$1=tempRet0;
 var $35=(($34$0>>>0)+(($34$1|0)*4294967296));
 var $36=(($22+($j_0245<<4)+8)|0);
 var $ld$6$0=(($36)|0);
 var $37$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($36+4)|0);
 var $37$1=HEAP32[(($ld$7$1)>>2)];
 var $38$0=_i64Subtract($37$0,$37$1,$25$0,$25$1);var $38$1=tempRet0;
 var $39=(($38$0>>>0)+(($38$1|0)*4294967296));
 var $40=($35)*($35);
 var $41=($39)*($39);
 var $42=($40)+($41);
 var $43=$42<$bestDist_0246;
 if($43){label=7;break;}else{var $bestDist_1=$bestDist_0246;var $51=$31;label=12;break;}
 case 7: 
 HEAP32[(($best)>>2)]=$j_0245;
 var $bestDist_1=$42;var $51=$j_0245;label=12;break;
 case 8: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=10;break;
 case 10: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $46=HEAP32[(($1)>>2)];
 var $47=($46|0)==0;
 if($47){label=61;break;}else{label=11;break;}
 case 11: 
 var $49=$46;
 __ZdlPv($49);
 label=61;break;
 case 12: 
 var $51;
 var $bestDist_1;
 var $52=((($j_0245)+(1))|0);
 var $53=($52>>>0)<($29>>>0);
 if($53){var $j_0245=$52;var $bestDist_0246=$bestDist_1;var $31=$51;label=6;break;}else{var $54=$51;label=13;break;}
 case 13: 
 var $54;
 var $55=HEAP32[(($9)>>2)];
 var $56=HEAP32[(($10)>>2)];
 var $57=($55|0)==($56|0);
 if($57){label=17;break;}else{label=14;break;}
 case 14: 
 var $59=($55|0)==0;
 if($59){var $61=0;label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($55)>>2)]=$54;
 var $_pre266=HEAP32[(($9)>>2)];
 var $61=$_pre266;label=16;break;
 case 16: 
 var $61;
 var $62=(($61+4)|0);
 HEAP32[(($9)>>2)]=$62;
 label=18;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($11,$best) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=9;break; }
 case 18: 
 var $64=HEAP32[(($2)>>2)];
 var $65=HEAP32[(($3)>>2)];
 var $66=$65<<5;
 var $67=($64|0)==($66|0);
 if($67){label=19;break;}else{var $80=$64;label=26;break;}
 case 19: 
 var $69=((($64)+(1))|0);
 var $70=($69|0)<0;
 if($70){label=20;break;}else{var $73=$65;label=22;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=9;break; }
 case 21: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $73=$_pre_i;label=22;break;
 case 22: 
 var $73;
 var $74=$73<<5;
 var $75=($74>>>0)>1073741822;
 if($75){var $_0_i=2147483647;label=24;break;}else{label=23;break;}
 case 23: 
 var $76=$73<<6;
 var $77=((($64)+(32))|0);
 var $78=$77&-32;
 var $79=($76>>>0)<($78>>>0);
 var $_sroa_speculated_i=$79?$78:$76;
 var $_0_i=$_sroa_speculated_i;label=24;break;
 case 24: 
 var $_0_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEj($picked,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=9;break; }
 case 25: 
 var $_pre46_i=HEAP32[(($2)>>2)];
 var $80=$_pre46_i;label=26;break;
 case 26: 
 var $80;
 var $81=((($80)+(1))|0);
 HEAP32[(($2)>>2)]=$81;
 var $82=HEAP32[(($1)>>2)];
 var $83=$80>>>5;
 var $84=(($82+($83<<2))|0);
 var $85=$80&31;
 var $86=1<<$85;
 var $87=$86^-1;
 var $88=HEAP32[(($84)>>2)];
 var $89=$88&$87;
 HEAP32[(($84)>>2)]=$89;
 var $90=((($i_0254)+(1))|0);
 var $91=HEAP32[(($4)>>2)];
 var $92=HEAP32[(($6)>>2)];
 var $93=$91;
 var $94=$92;
 var $95=((($93)-($94))|0);
 var $96=$95>>2;
 var $97=($90>>>0)<($96>>>0);
 if($97){var $i_0254=$90;var $16=$92;label=4;break;}else{label=27;break;}
 case 27: 
 var $98=($91|0)==($92|0);
 if($98){var $p0_sroa_1_8__idx206_pre_phi275=$14;var $p0_sroa_0_0__idx192_pre_phi277=$13;var $99=$92;label=28;break;}else{label=29;break;}
 case 28: 
 var $99;
 var $p0_sroa_0_0__idx192_pre_phi277;
 var $p0_sroa_1_8__idx206_pre_phi275;
 var $_pre272=(($this+44)|0);
 var $104=$99;var $_pre_phi=$_pre272;var $p0_sroa_1_8__idx206_pre_phi274=$p0_sroa_1_8__idx206_pre_phi275;var $p0_sroa_0_0__idx192_pre_phi276=$p0_sroa_0_0__idx192_pre_phi277;label=30;break;
 case 29: 
 var $ld$8$0=(($14)|0);
 var $p0_sroa_1_8_copyload207$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($14+4)|0);
 var $p0_sroa_1_8_copyload207$1=HEAP32[(($ld$9$1)>>2)];
 var $ld$10$0=(($13)|0);
 var $p0_sroa_0_0_copyload193$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($13+4)|0);
 var $p0_sroa_0_0_copyload193$1=HEAP32[(($ld$11$1)>>2)];
 var $100=(($this+28)|0);
 var $101=(($this+44)|0);
 var $102=(($this+48)|0);
 var $103=(($this+40)|0);
 var $p0_sroa_1_8_copyload207214238$1=$p0_sroa_1_8_copyload207$1;var $p0_sroa_1_8_copyload207214238$0=$p0_sroa_1_8_copyload207$0;var $p0_sroa_0_0_copyload193209240$1=$p0_sroa_0_0_copyload193$1;var $p0_sroa_0_0_copyload193209240$0=$p0_sroa_0_0_copyload193$0;var $n_0242=0;var $112=$91;var $111=$92;label=32;break;
 case 30: 
 var $p0_sroa_0_0__idx192_pre_phi276;
 var $p0_sroa_1_8__idx206_pre_phi274;
 var $_pre_phi;
 var $104;
 var $105=HEAP32[(($_pre_phi)>>2)];
 var $106=(($this+40)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=58;break;}else{label=31;break;}
 case 31: 
 var $109=(($this+28)|0);
 var $n6_0226=0;var $p0_sroa_0_0_copyload193211227_in=$p0_sroa_0_0__idx192_pre_phi276;var $p0_sroa_1_8_copyload207216228_in=$p0_sroa_1_8__idx206_pre_phi274;var $240=$107;var $239=$104;label=51;break;
 case 32: 
 var $111;
 var $112;
 var $n_0242;
 var $p0_sroa_0_0_copyload193209240$0;
 var $p0_sroa_0_0_copyload193209240$1;
 var $p0_sroa_1_8_copyload207214238$0;
 var $p0_sroa_1_8_copyload207214238$1;
 HEAP32[(($best1)>>2)]=-1;
 var $113=($112|0)==($111|0);
 if($113){var $p0_sroa_0_0_copyload193208$1=$p0_sroa_0_0_copyload193209240$1;var $p0_sroa_0_0_copyload193208$0=$p0_sroa_0_0_copyload193209240$0;var $p0_sroa_1_8_copyload207213$1=$p0_sroa_1_8_copyload207214238$1;var $p0_sroa_1_8_copyload207213$0=$p0_sroa_1_8_copyload207214238$0;label=50;break;}else{var $bestDist2_0231=18446744073709552000;var $i3_0232=0;var $115=$111;var $114=-1;label=33;break;}
 case 33: 
 var $114;
 var $115;
 var $i3_0232;
 var $bestDist2_0231;
 var $116=HEAP32[(($1)>>2)];
 var $117=$i3_0232>>>5;
 var $118=(($116+($117<<2))|0);
 var $119=$i3_0232&31;
 var $120=1<<$119;
 var $121=HEAP32[(($118)>>2)];
 var $122=$121&$120;
 var $123=($122|0)==0;
 if($123){label=34;break;}else{var $bestDist2_2=$bestDist2_0231;var $188=$114;var $187=$115;label=41;break;}
 case 34: 
 var $125=(($115+($i3_0232<<2))|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+4)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($126)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$128;
 var $132=$130;
 var $133=((($131)-($132))|0);
 var $134=$133>>4;
 if(($134|0)==2){ label=35;break;}else if(($134|0)==0){ var $bestDist2_2=$bestDist2_0231;var $188=$114;var $187=$115;label=41;break;}else{label=39;break;}
 case 35: 
 var $136=(($130)|0);
 var $ld$12$0=(($136)|0);
 var $137$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($136+4)|0);
 var $137$1=HEAP32[(($ld$13$1)>>2)];
 var $138$0=_i64Subtract($137$0,$137$1,$p0_sroa_0_0_copyload193209240$0,$p0_sroa_0_0_copyload193209240$1);var $138$1=tempRet0;
 var $139=(($138$0>>>0)+(($138$1|0)*4294967296));
 var $140=(($130+8)|0);
 var $ld$14$0=(($140)|0);
 var $141$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($140+4)|0);
 var $141$1=HEAP32[(($ld$15$1)>>2)];
 var $142$0=_i64Subtract($141$0,$141$1,$p0_sroa_1_8_copyload207214238$0,$p0_sroa_1_8_copyload207214238$1);var $142$1=tempRet0;
 var $143=(($142$0>>>0)+(($142$1|0)*4294967296));
 var $144=($139)*($139);
 var $145=($143)*($143);
 var $146=($144)+($145);
 var $147=$146<$bestDist2_0231;
 if($147){label=36;break;}else{var $bestDist2_1=$bestDist2_0231;var $154=$114;var $153=$115;var $152=$130;label=37;break;}
 case 36: 
 HEAP32[(($best1)>>2)]=$i3_0232;
 var $149=HEAP32[(($100)>>2)];
 var $150=(($149+($i3_0232<<2))|0);
 HEAP32[(($150)>>2)]=0;
 var $_pre261=HEAP32[(($6)>>2)];
 var $_phi_trans_insert=(($_pre261+($i3_0232<<2))|0);
 var $_pre262=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert263=(($_pre262)|0);
 var $_pre264=HEAP32[(($_phi_trans_insert263)>>2)];
 var $bestDist2_1=$146;var $154=$i3_0232;var $153=$_pre261;var $152=$_pre264;label=37;break;
 case 37: 
 var $152;
 var $153;
 var $154;
 var $bestDist2_1;
 var $155=(($152+16)|0);
 var $ld$16$0=(($155)|0);
 var $156$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($155+4)|0);
 var $156$1=HEAP32[(($ld$17$1)>>2)];
 var $157$0=_i64Subtract($156$0,$156$1,$p0_sroa_0_0_copyload193209240$0,$p0_sroa_0_0_copyload193209240$1);var $157$1=tempRet0;
 var $158=(($157$0>>>0)+(($157$1|0)*4294967296));
 var $159=(($152+24)|0);
 var $ld$18$0=(($159)|0);
 var $160$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($159+4)|0);
 var $160$1=HEAP32[(($ld$19$1)>>2)];
 var $161$0=_i64Subtract($160$0,$160$1,$p0_sroa_1_8_copyload207214238$0,$p0_sroa_1_8_copyload207214238$1);var $161$1=tempRet0;
 var $162=(($161$0>>>0)+(($161$1|0)*4294967296));
 var $163=($158)*($158);
 var $164=($162)*($162);
 var $165=($163)+($164);
 var $166=$165<$bestDist2_1;
 if($166){label=38;break;}else{var $bestDist2_2=$bestDist2_1;var $188=$154;var $187=$153;label=41;break;}
 case 38: 
 HEAP32[(($best1)>>2)]=$i3_0232;
 var $168=HEAP32[(($100)>>2)];
 var $169=(($168+($i3_0232<<2))|0);
 HEAP32[(($169)>>2)]=1;
 var $_pre265=HEAP32[(($6)>>2)];
 var $bestDist2_2=$165;var $188=$i3_0232;var $187=$_pre265;label=41;break;
 case 39: 
 var $171=HEAP32[(($100)>>2)];
 var $172=(($171+($i3_0232<<2))|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($130+($173<<4))|0);
 var $ld$20$0=(($174)|0);
 var $175$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($174+4)|0);
 var $175$1=HEAP32[(($ld$21$1)>>2)];
 var $176$0=_i64Subtract($175$0,$175$1,$p0_sroa_0_0_copyload193209240$0,$p0_sroa_0_0_copyload193209240$1);var $176$1=tempRet0;
 var $177=(($176$0>>>0)+(($176$1|0)*4294967296));
 var $178=(($130+($173<<4)+8)|0);
 var $ld$22$0=(($178)|0);
 var $179$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($178+4)|0);
 var $179$1=HEAP32[(($ld$23$1)>>2)];
 var $180$0=_i64Subtract($179$0,$179$1,$p0_sroa_1_8_copyload207214238$0,$p0_sroa_1_8_copyload207214238$1);var $180$1=tempRet0;
 var $181=(($180$0>>>0)+(($180$1|0)*4294967296));
 var $182=($177)*($177);
 var $183=($181)*($181);
 var $184=($182)+($183);
 var $185=$184<$bestDist2_0231;
 if($185){label=40;break;}else{var $bestDist2_2=$bestDist2_0231;var $188=$114;var $187=$115;label=41;break;}
 case 40: 
 HEAP32[(($best1)>>2)]=$i3_0232;
 var $bestDist2_2=$184;var $188=$i3_0232;var $187=$115;label=41;break;
 case 41: 
 var $187;
 var $188;
 var $bestDist2_2;
 var $189=((($i3_0232)+(1))|0);
 var $190=HEAP32[(($4)>>2)];
 var $191=$190;
 var $192=$187;
 var $193=((($191)-($192))|0);
 var $194=$193>>2;
 var $195=($189>>>0)<($194>>>0);
 if($195){var $bestDist2_0231=$bestDist2_2;var $i3_0232=$189;var $115=$187;var $114=$188;label=33;break;}else{label=42;break;}
 case 42: 
 var $196=($188|0)>-1;
 if($196){label=43;break;}else{var $p0_sroa_0_0_copyload193208$1=$p0_sroa_0_0_copyload193209240$1;var $p0_sroa_0_0_copyload193208$0=$p0_sroa_0_0_copyload193209240$0;var $p0_sroa_1_8_copyload207213$1=$p0_sroa_1_8_copyload207214238$1;var $p0_sroa_1_8_copyload207213$0=$p0_sroa_1_8_copyload207214238$0;label=50;break;}
 case 43: 
 var $198=(($187+($188<<2))|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+4)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($199)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=$201;
 var $205=$203;
 var $206=((($204)-($205))|0);
 var $207=($206|0)==32;
 var $208=HEAP32[(($100)>>2)];
 var $209=(($208+($188<<2))|0);
 var $210=HEAP32[(($209)>>2)];
 if($207){label=44;break;}else{var $_pn219=$210;label=45;break;}
 case 44: 
 var $212=((($210)+(1))|0);
 var $213=(((($212|0))%(2))&-1);
 var $_pn219=$213;label=45;break;
 case 45: 
 var $_pn219;
 var $p0_sroa_0_0_copyload193210_in=(($203+($_pn219<<4))|0);
 var $p0_sroa_1_8_copyload207215_in=(($203+($_pn219<<4)+8)|0);
 var $ld$24$0=(($p0_sroa_0_0_copyload193210_in)|0);
 var $p0_sroa_0_0_copyload193210$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($p0_sroa_0_0_copyload193210_in+4)|0);
 var $p0_sroa_0_0_copyload193210$1=HEAP32[(($ld$25$1)>>2)];
 var $ld$26$0=(($p0_sroa_1_8_copyload207215_in)|0);
 var $p0_sroa_1_8_copyload207215$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($p0_sroa_1_8_copyload207215_in+4)|0);
 var $p0_sroa_1_8_copyload207215$1=HEAP32[(($ld$27$1)>>2)];
 var $214=HEAP32[(($1)>>2)];
 var $215=$188>>>5;
 var $216=(($214+($215<<2))|0);
 var $217=$188&31;
 var $218=1<<$217;
 var $219=HEAP32[(($216)>>2)];
 var $220=$219|$218;
 HEAP32[(($216)>>2)]=$220;
 var $221=HEAP32[(($101)>>2)];
 var $222=HEAP32[(($102)>>2)];
 var $223=($221|0)==($222|0);
 if($223){label=49;break;}else{label=46;break;}
 case 46: 
 var $225=($221|0)==0;
 if($225){var $227=0;label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($221)>>2)]=$188;
 var $_pre=HEAP32[(($101)>>2)];
 var $227=$_pre;label=48;break;
 case 48: 
 var $227;
 var $228=(($227+4)|0);
 HEAP32[(($101)>>2)]=$228;
 var $p0_sroa_0_0_copyload193208$1=$p0_sroa_0_0_copyload193210$1;var $p0_sroa_0_0_copyload193208$0=$p0_sroa_0_0_copyload193210$0;var $p0_sroa_1_8_copyload207213$1=$p0_sroa_1_8_copyload207215$1;var $p0_sroa_1_8_copyload207213$0=$p0_sroa_1_8_copyload207215$0;label=50;break;
 case 49: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($103,$best1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p0_sroa_0_0_copyload193208$1=$p0_sroa_0_0_copyload193210$1;var $p0_sroa_0_0_copyload193208$0=$p0_sroa_0_0_copyload193210$0;var $p0_sroa_1_8_copyload207213$1=$p0_sroa_1_8_copyload207215$1;var $p0_sroa_1_8_copyload207213$0=$p0_sroa_1_8_copyload207215$0;label=50;break; } else { label=8;break; }
 case 50: 
 var $p0_sroa_1_8_copyload207213$0;
 var $p0_sroa_1_8_copyload207213$1;
 var $p0_sroa_0_0_copyload193208$0;
 var $p0_sroa_0_0_copyload193208$1;
 var $230=((($n_0242)+(1))|0);
 var $231=HEAP32[(($4)>>2)];
 var $232=HEAP32[(($6)>>2)];
 var $233=$231;
 var $234=$232;
 var $235=((($233)-($234))|0);
 var $236=$235>>2;
 var $237=($230>>>0)<($236>>>0);
 if($237){var $p0_sroa_1_8_copyload207214238$1=$p0_sroa_1_8_copyload207213$1;var $p0_sroa_1_8_copyload207214238$0=$p0_sroa_1_8_copyload207213$0;var $p0_sroa_0_0_copyload193209240$1=$p0_sroa_0_0_copyload193208$1;var $p0_sroa_0_0_copyload193209240$0=$p0_sroa_0_0_copyload193208$0;var $n_0242=$230;var $112=$231;var $111=$232;label=32;break;}else{var $104=$232;var $_pre_phi=$101;var $p0_sroa_1_8__idx206_pre_phi274=$14;var $p0_sroa_0_0__idx192_pre_phi276=$13;label=30;break;}
 case 51: 
 var $239;
 var $240;
 var $p0_sroa_1_8_copyload207216228_in;
 var $p0_sroa_0_0_copyload193211227_in;
 var $n6_0226;
 var $ld$28$0=(($p0_sroa_0_0_copyload193211227_in)|0);
 var $p0_sroa_0_0_copyload193211227$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($p0_sroa_0_0_copyload193211227_in+4)|0);
 var $p0_sroa_0_0_copyload193211227$1=HEAP32[(($ld$29$1)>>2)];
 var $ld$30$0=(($p0_sroa_1_8_copyload207216228_in)|0);
 var $p0_sroa_1_8_copyload207216228$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($p0_sroa_1_8_copyload207216228_in+4)|0);
 var $p0_sroa_1_8_copyload207216228$1=HEAP32[(($ld$31$1)>>2)];
 var $241=(($240+($n6_0226<<2))|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($239+($242<<2))|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+4)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($244)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($246|0)==($248|0);
 if($249){var $best7_0_lcssa=-1;label=54;break;}else{label=52;break;}
 case 52: 
 var $250=$246;
 var $251=$248;
 var $252=((($250)-($251))|0);
 var $253=$252>>4;
 var $best7_0221=-1;var $bestDist8_0222=18446744073709552000;var $i9_0223=0;label=53;break;
 case 53: 
 var $i9_0223;
 var $bestDist8_0222;
 var $best7_0221;
 var $255=(($248+($i9_0223<<4))|0);
 var $ld$32$0=(($255)|0);
 var $256$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($255+4)|0);
 var $256$1=HEAP32[(($ld$33$1)>>2)];
 var $257$0=_i64Subtract($256$0,$256$1,$p0_sroa_0_0_copyload193211227$0,$p0_sroa_0_0_copyload193211227$1);var $257$1=tempRet0;
 var $258=(($257$0>>>0)+(($257$1|0)*4294967296));
 var $259=(($248+($i9_0223<<4)+8)|0);
 var $ld$34$0=(($259)|0);
 var $260$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($259+4)|0);
 var $260$1=HEAP32[(($ld$35$1)>>2)];
 var $261$0=_i64Subtract($260$0,$260$1,$p0_sroa_1_8_copyload207216228$0,$p0_sroa_1_8_copyload207216228$1);var $261$1=tempRet0;
 var $262=(($261$0>>>0)+(($261$1|0)*4294967296));
 var $263=($258)*($258);
 var $264=($262)*($262);
 var $265=($263)+($264);
 var $266=$265<$bestDist8_0222;
 var $best7_1=$266?$i9_0223:$best7_0221;
 var $bestDist8_1=$266?$265:$bestDist8_0222;
 var $267=((($i9_0223)+(1))|0);
 var $268=($267>>>0)<($253>>>0);
 if($268){var $best7_0221=$best7_1;var $bestDist8_0222=$bestDist8_1;var $i9_0223=$267;label=53;break;}else{var $best7_0_lcssa=$best7_1;label=54;break;}
 case 54: 
 var $best7_0_lcssa;
 var $269=HEAP32[(($109)>>2)];
 var $270=(($269+($242<<2))|0);
 HEAP32[(($270)>>2)]=$best7_0_lcssa;
 var $271=HEAP32[(($6)>>2)];
 var $272=(($271+($242<<2))|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+4)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=(($273)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=$275;
 var $279=$277;
 var $280=((($278)-($279))|0);
 var $281=$280>>4;
 var $282=($281>>>0)<3;
 if($282){label=55;break;}else{var $_pn=$best7_0_lcssa;label=56;break;}
 case 55: 
 var $284=((($best7_0_lcssa)+(1))|0);
 var $285=(((($284|0))%(2))&-1);
 var $_pn=$285;label=56;break;
 case 56: 
 var $_pn;
 var $287=((($n6_0226)+(1))|0);
 var $288=HEAP32[(($_pre_phi)>>2)];
 var $289=HEAP32[(($106)>>2)];
 var $290=$288;
 var $291=$289;
 var $292=((($290)-($291))|0);
 var $293=$292>>2;
 var $294=($287>>>0)<($293>>>0);
 if($294){label=57;break;}else{label=58;break;}
 case 57: 
 var $p0_sroa_1_8_copyload207217_in=(($277+($_pn<<4)+8)|0);
 var $p0_sroa_0_0_copyload193212_in=(($277+($_pn<<4))|0);
 var $n6_0226=$287;var $p0_sroa_0_0_copyload193211227_in=$p0_sroa_0_0_copyload193212_in;var $p0_sroa_1_8_copyload207216228_in=$p0_sroa_1_8_copyload207217_in;var $240=$289;var $239=$271;label=51;break;
 case 58: 
 var $295=HEAP32[(($1)>>2)];
 var $296=($295|0)==0;
 if($296){label=60;break;}else{label=59;break;}
 case 59: 
 var $298=$295;
 __ZdlPv($298);
 label=60;break;
 case 60: 
 STACKTOP=sp;return;
 case 61: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner15setCombBoundaryEPNSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($this,$polygons){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+36)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=11;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 __ZdaPv($9);
 label=4;break;
 case 4: 
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=5;break;}
 case 5: 
 var $15=$12;
 __ZdaPv($15);
 label=6;break;
 case 6: 
 var $17=(($2+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=$18;
 __ZdaPv($21);
 label=8;break;
 case 8: 
 var $23=(($2+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=$24;
 __ZdaPv($27);
 label=10;break;
 case 10: 
 var $28=$2;
 __ZdlPv($28);
 label=11;break;
 case 11: 
 var $30=($polygons|0)==0;
 if($30){var $storemerge=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $32=__Znwj(88);
 var $33=$32;
 var $34=$32;
 HEAP32[(($34)>>2)]=$polygons;
 var $35=(($32+24)|0);
 var $36=$35;
 HEAPF64[(($36)>>3)]=1;
 var $37=(($32+32)|0);
 var $38=(($32+48)|0);
 var $39=$38;
 HEAP32[(($37)>>2)]=0; HEAP32[((($37)+(4))>>2)]=0; HEAP32[((($37)+(8))>>2)]=0; HEAP32[((($37)+(12))>>2)]=0;
 HEAPF64[(($39)>>3)]=1;
 var $40=(($32+56)|0);
 var $41=(($polygons+4)|0);
 HEAP32[(($40)>>2)]=0; HEAP32[((($40)+(4))>>2)]=0; HEAP32[((($40)+(8))>>2)]=0; HEAP32[((($40)+(12))>>2)]=0; HEAP32[((($40)+(16))>>2)]=0; HEAP32[((($40)+(20))>>2)]=0; HEAP32[((($40)+(24))>>2)]=0; HEAP32[((($40)+(28))>>2)]=0;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($polygons)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=$42;
 var $46=$44;
 var $47=((($45)-($46))|0);
 var $48=(((($47|0))/(12))&-1);
 var $49$0=_llvm_umul_with_overflow_i32($48,8);
 var $49$1=tempRet0;
 var $50=$49$1;
 var $51=$49$0;
 var $52=$50?-1:$51;
 var $53=(function() { try { __THREW__ = 0; return __Znaj($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $54=$53;
 var $55=(($32+4)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=$54;
 var $57=(function() { try { __THREW__ = 0; return __Znaj($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $58=$57;
 var $59=(($32+8)|0);
 var $60=$59;
 HEAP32[(($60)>>2)]=$58;
 var $61$0=_llvm_umul_with_overflow_i32($48,4);
 var $61$1=tempRet0;
 var $62=$61$1;
 var $63=$61$0;
 var $64=$62?-1:$63;
 var $65=(function() { try { __THREW__ = 0; return __Znaj($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 var $66=$65;
 var $67=(($32+12)|0);
 var $68=$67;
 HEAP32[(($68)>>2)]=$66;
 var $69=(function() { try { __THREW__ = 0; return __Znaj($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $70=$69;
 var $71=(($32+16)|0);
 var $72=$71;
 HEAP32[(($72)>>2)]=$70;
 var $storemerge=$33;label=17;break;
 case 17: 
 var $storemerge;
 HEAP32[(($1)>>2)]=$storemerge;
 return;
 case 18: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 __ZdlPv($32);
 ___resumeException($75$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner21forceMinimalLayerTimeEdi($this,$minTime,$minimalSpeed){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+28)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this+24)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){var $extrudeTime_0_lcssa=0;var $travelTime_0_lcssa=0;var $67=$4;label=8;break;}else{label=2;break;}
 case 2: 
 var $8=(($2+60)|0);
 var $9=(($2+56)|0);
 var $10=HEAP32[(($8)>>2)];
 var $11=HEAP32[(($9)>>2)];
 var $12$0=$10;
 var $12$1=(((($10|0)<0))|0)?-1:0;
 var $13$0=$11;
 var $13$1=(((($11|0)<0))|0)?-1:0;
 var $14=$4;
 var $15=$6;
 var $16=((($14)-($15))|0);
 var $17=(((($16|0))/(24))&-1);
 var $p0_sroa_1_8_copyload5571$1=$12$1;var $p0_sroa_1_8_copyload5571$0=$12$0;var $p0_sroa_0_0_copyload5372$1=$13$1;var $p0_sroa_0_0_copyload5372$0=$13$0;var $n_073=0;var $extrudeTime_074=0;var $travelTime_075=0;label=3;break;
 case 3: 
 var $travelTime_075;
 var $extrudeTime_074;
 var $n_073;
 var $p0_sroa_0_0_copyload5372$0;
 var $p0_sroa_0_0_copyload5372$1;
 var $p0_sroa_1_8_copyload5571$0;
 var $p0_sroa_1_8_copyload5571$1;
 var $18=(($6+((($n_073)*(24))&-1)+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+((($n_073)*(24))&-1)+12)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($19|0)==($21|0);
 if($22){var $p0_sroa_1_8_copyload56_lcssa$1=$p0_sroa_1_8_copyload5571$1;var $p0_sroa_1_8_copyload56_lcssa$0=$p0_sroa_1_8_copyload5571$0;var $p0_sroa_0_0_copyload54_lcssa$1=$p0_sroa_0_0_copyload5372$1;var $p0_sroa_0_0_copyload54_lcssa$0=$p0_sroa_0_0_copyload5372$0;var $extrudeTime_1_lcssa=$extrudeTime_074;var $travelTime_1_lcssa=$travelTime_075;label=7;break;}else{label=4;break;}
 case 4: 
 var $23=(($6+((($n_073)*(24))&-1))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0);
 var $28=(($24+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 var $31=$19;
 var $32=$21;
 var $33=((($31)-($32))|0);
 var $34=$33>>4;
 if($30){var $p0_sroa_1_8_copyload5659_us$1=$p0_sroa_1_8_copyload5571$1;var $p0_sroa_1_8_copyload5659_us$0=$p0_sroa_1_8_copyload5571$0;var $p0_sroa_0_0_copyload5460_us$1=$p0_sroa_0_0_copyload5372$1;var $p0_sroa_0_0_copyload5460_us$0=$p0_sroa_0_0_copyload5372$0;var $i_061_us=0;var $travelTime_163_us=$travelTime_075;label=5;break;}else{var $p0_sroa_1_8_copyload5659$1=$p0_sroa_1_8_copyload5571$1;var $p0_sroa_1_8_copyload5659$0=$p0_sroa_1_8_copyload5571$0;var $p0_sroa_0_0_copyload5460$1=$p0_sroa_0_0_copyload5372$1;var $p0_sroa_0_0_copyload5460$0=$p0_sroa_0_0_copyload5372$0;var $i_061=0;var $extrudeTime_162=$extrudeTime_074;label=6;break;}
 case 5: 
 var $travelTime_163_us;
 var $i_061_us;
 var $p0_sroa_0_0_copyload5460_us$0;
 var $p0_sroa_0_0_copyload5460_us$1;
 var $p0_sroa_1_8_copyload5659_us$0;
 var $p0_sroa_1_8_copyload5659_us$1;
 var $_idx_us=(($21+($i_061_us<<4))|0);
 var $ld$0$0=(($_idx_us)|0);
 var $_idx_val_us$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_idx_us+4)|0);
 var $_idx_val_us$1=HEAP32[(($ld$1$1)>>2)];
 var $_idx49_us=(($21+($i_061_us<<4)+8)|0);
 var $ld$2$0=(($_idx49_us)|0);
 var $_idx49_val_us$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($_idx49_us+4)|0);
 var $_idx49_val_us$1=HEAP32[(($ld$3$1)>>2)];
 var $36$0=_i64Subtract($p0_sroa_0_0_copyload5460_us$0,$p0_sroa_0_0_copyload5460_us$1,$_idx_val_us$0,$_idx_val_us$1);var $36$1=tempRet0;
 var $37$0=_i64Subtract($p0_sroa_1_8_copyload5659_us$0,$p0_sroa_1_8_copyload5659_us$1,$_idx49_val_us$0,$_idx49_val_us$1);var $37$1=tempRet0;
 var $38=(($36$0>>>0)+(($36$1|0)*4294967296));
 var $39=($38)/(1000);
 var $40=(($37$0>>>0)+(($37$1|0)*4294967296));
 var $41=($40)/(1000);
 var $42=($41)*($41);
 var $43=($39)*($39);
 var $44=($43)+($42);
 var $45=Math_sqrt($44);
 var $46=($45)/($27);
 var $47=($travelTime_163_us)+($46);
 var $48=((($i_061_us)+(1))|0);
 var $49=($48>>>0)<($34>>>0);
 if($49){var $p0_sroa_1_8_copyload5659_us$1=$_idx49_val_us$1;var $p0_sroa_1_8_copyload5659_us$0=$_idx49_val_us$0;var $p0_sroa_0_0_copyload5460_us$1=$_idx_val_us$1;var $p0_sroa_0_0_copyload5460_us$0=$_idx_val_us$0;var $i_061_us=$48;var $travelTime_163_us=$47;label=5;break;}else{var $p0_sroa_1_8_copyload56_lcssa$1=$_idx49_val_us$1;var $p0_sroa_1_8_copyload56_lcssa$0=$_idx49_val_us$0;var $p0_sroa_0_0_copyload54_lcssa$1=$_idx_val_us$1;var $p0_sroa_0_0_copyload54_lcssa$0=$_idx_val_us$0;var $extrudeTime_1_lcssa=$extrudeTime_074;var $travelTime_1_lcssa=$47;label=7;break;}
 case 6: 
 var $extrudeTime_162;
 var $i_061;
 var $p0_sroa_0_0_copyload5460$0;
 var $p0_sroa_0_0_copyload5460$1;
 var $p0_sroa_1_8_copyload5659$0;
 var $p0_sroa_1_8_copyload5659$1;
 var $_idx=(($21+($i_061<<4))|0);
 var $ld$4$0=(($_idx)|0);
 var $_idx_val$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($_idx+4)|0);
 var $_idx_val$1=HEAP32[(($ld$5$1)>>2)];
 var $_idx49=(($21+($i_061<<4)+8)|0);
 var $ld$6$0=(($_idx49)|0);
 var $_idx49_val$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($_idx49+4)|0);
 var $_idx49_val$1=HEAP32[(($ld$7$1)>>2)];
 var $51$0=_i64Subtract($p0_sroa_0_0_copyload5460$0,$p0_sroa_0_0_copyload5460$1,$_idx_val$0,$_idx_val$1);var $51$1=tempRet0;
 var $52$0=_i64Subtract($p0_sroa_1_8_copyload5659$0,$p0_sroa_1_8_copyload5659$1,$_idx49_val$0,$_idx49_val$1);var $52$1=tempRet0;
 var $53=(($51$0>>>0)+(($51$1|0)*4294967296));
 var $54=($53)/(1000);
 var $55=(($52$0>>>0)+(($52$1|0)*4294967296));
 var $56=($55)/(1000);
 var $57=($56)*($56);
 var $58=($54)*($54);
 var $59=($58)+($57);
 var $60=Math_sqrt($59);
 var $61=($60)/($27);
 var $62=($extrudeTime_162)+($61);
 var $63=((($i_061)+(1))|0);
 var $64=($63>>>0)<($34>>>0);
 if($64){var $p0_sroa_1_8_copyload5659$1=$_idx49_val$1;var $p0_sroa_1_8_copyload5659$0=$_idx49_val$0;var $p0_sroa_0_0_copyload5460$1=$_idx_val$1;var $p0_sroa_0_0_copyload5460$0=$_idx_val$0;var $i_061=$63;var $extrudeTime_162=$62;label=6;break;}else{var $p0_sroa_1_8_copyload56_lcssa$1=$_idx49_val$1;var $p0_sroa_1_8_copyload56_lcssa$0=$_idx49_val$0;var $p0_sroa_0_0_copyload54_lcssa$1=$_idx_val$1;var $p0_sroa_0_0_copyload54_lcssa$0=$_idx_val$0;var $extrudeTime_1_lcssa=$62;var $travelTime_1_lcssa=$travelTime_075;label=7;break;}
 case 7: 
 var $travelTime_1_lcssa;
 var $extrudeTime_1_lcssa;
 var $p0_sroa_0_0_copyload54_lcssa$0;
 var $p0_sroa_0_0_copyload54_lcssa$1;
 var $p0_sroa_1_8_copyload56_lcssa$0;
 var $p0_sroa_1_8_copyload56_lcssa$1;
 var $65=((($n_073)+(1))|0);
 var $66=($65>>>0)<($17>>>0);
 if($66){var $p0_sroa_1_8_copyload5571$1=$p0_sroa_1_8_copyload56_lcssa$1;var $p0_sroa_1_8_copyload5571$0=$p0_sroa_1_8_copyload56_lcssa$0;var $p0_sroa_0_0_copyload5372$1=$p0_sroa_0_0_copyload54_lcssa$1;var $p0_sroa_0_0_copyload5372$0=$p0_sroa_0_0_copyload54_lcssa$0;var $n_073=$65;var $extrudeTime_074=$extrudeTime_1_lcssa;var $travelTime_075=$travelTime_1_lcssa;label=3;break;}else{var $extrudeTime_0_lcssa=$extrudeTime_1_lcssa;var $travelTime_0_lcssa=$travelTime_1_lcssa;var $67=$6;label=8;break;}
 case 8: 
 var $67;
 var $travelTime_0_lcssa;
 var $extrudeTime_0_lcssa;
 var $68=($extrudeTime_0_lcssa)+($travelTime_0_lcssa);
 var $69=$68<$minTime;
 if($69){label=9;break;}else{label=21;break;}
 case 9: 
 var $71=($minTime)-($travelTime_0_lcssa);
 var $72=$71<1;
 var $minExtrudeTime_0=$72?1:$71;
 var $73=($extrudeTime_0_lcssa)/($minExtrudeTime_0);
 var $74=($4|0)==($67|0);
 if($74){var $factor_0_lcssa=$73;label=15;break;}else{label=10;break;}
 case 10: 
 var $75=$4;
 var $76=$67;
 var $77=((($75)-($76))|0);
 var $78=(((($77|0))/(24))&-1);
 var $79=($minimalSpeed|0);
 var $factor_057=$73;var $n1_058=0;label=11;break;
 case 11: 
 var $n1_058;
 var $factor_057;
 var $81=(($67+((($n1_058)*(24))&-1))|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+4)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($84|0)==0;
 if($85){var $factor_1=$factor_057;label=14;break;}else{label=12;break;}
 case 12: 
 var $87=(($82)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0);
 var $90=($factor_057)*($89);
 var $91=(($90)&-1);
 var $92=($91|0)<($minimalSpeed|0);
 if($92){label=13;break;}else{var $factor_1=$factor_057;label=14;break;}
 case 13: 
 var $94=($79)/($89);
 var $factor_1=$94;label=14;break;
 case 14: 
 var $factor_1;
 var $96=((($n1_058)+(1))|0);
 var $97=($96>>>0)<($78>>>0);
 if($97){var $factor_057=$factor_1;var $n1_058=$96;label=11;break;}else{var $factor_0_lcssa=$factor_1;label=15;break;}
 case 15: 
 var $factor_0_lcssa;
 var $98=($factor_0_lcssa)*(100);
 var $99=(($this+52)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0);
 var $102=$98<$101;
 if($102){label=16;break;}else{label=17;break;}
 case 16: 
 var $104=(($98)&-1);
 var $105=($104|0)<1;
 var $_speedFactor_i=$105?1:$104;
 HEAP32[(($99)>>2)]=$_speedFactor_i;
 var $factor_2=$factor_0_lcssa;label=18;break;
 case 17: 
 var $107=($101)/(100);
 var $factor_2=$107;label=18;break;
 case 18: 
 var $factor_2;
 var $109=($extrudeTime_0_lcssa)/($factor_2);
 var $110=($minTime)-($109);
 var $111=($110)-($travelTime_0_lcssa);
 var $112=$111>(0.1);
 if($112){label=19;break;}else{label=20;break;}
 case 19: 
 var $114=(($this+72)|0);
 HEAPF64[(($114)>>3)]=$111;
 label=20;break;
 case 20: 
 var $116=($travelTime_0_lcssa)+($109);
 var $117=(($this+80)|0);
 HEAPF64[(($117)>>3)]=$116;
 label=22;break;
 case 21: 
 var $119=(($this+80)|0);
 HEAPF64[(($119)>>3)]=$68;
 label=22;break;
 case 22: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z10signal_FPEi($n){
 var label=0;
 var $puts=_puts(16);
 _exit(1);
 throw "Reached an unreachable!";
}
function _main($argc,$argv){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+808)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $gcode=sp;
 var $config=(sp)+(376);
 var $numberString=(sp)+(792);
 var $1=_signal(8,472);
 var $2=(($gcode+56)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($gcode+60)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($gcode+64)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($gcode+72)|0);
 var $6=(($gcode+8)|0);
 var $7=(($gcode+24)|0);
 var $8=$6;
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0; HEAP32[((($8)+(12))>>2)]=0;
 HEAPF64[(($7)>>3)]=4.5;
 var $9=(($gcode+40)|0);
 HEAPF64[(($9)>>3)]=0;
 var $10=(($gcode+48)|0);
 HEAPF64[(($10)>>3)]=-10000;
 var $11=(($gcode+32)|0);
 HEAPF64[(($11)>>3)]=14.5;
 var $12=(($gcode+344)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($gcode+348)|0);
 HEAP32[(($13)>>2)]=-1;
 var $14=(($gcode+360)|0);
 var $15=(($gcode+328)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($gcode+332)|0);
 var $17=$14;
 HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0; HEAP32[((($17)+(8))>>2)]=0; HEAP32[((($17)+(12))>>2)]=0;
 HEAP32[(($16)>>2)]=45;
 var $18=(($gcode+340)|0);
 HEAP8[($18)]=1;
 var $19=$5;
 _memset($19, 0, 256);
 var $20=HEAP32[((_stdout)>>2)];
 var $21=(($gcode)|0);
 HEAP32[(($21)>>2)]=$20;
 (function() { try { __THREW__ = 0; return __ZN14ConfigSettingsC2Ev($config) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=7;break; }
 case 2: 
 var $23=(($config+20)|0);
 HEAP32[(($23)>>2)]=2890;
 var $24=(($config+24)|0);
 HEAP32[(($24)>>2)]=100;
 var $25=(($config+16)|0);
 HEAP32[(($25)>>2)]=300;
 var $26=(($config+12)|0);
 HEAP32[(($26)>>2)]=100;
 var $27=(($config+28)|0);
 HEAP32[(($27)>>2)]=400;
 var $28=(($config+32)|0);
 HEAP32[(($28)>>2)]=2;
 var $29=(($config+36)|0);
 HEAP32[(($29)>>2)]=6;
 var $30=(($config+40)|0);
 HEAP32[(($30)>>2)]=6;
 var $31=(($config+92)|0);
 HEAP32[(($31)>>2)]=4;
 var $32=(($config+96)|0);
 HEAP32[(($32)>>2)]=20;
 var $33=(($config+100)|0);
 HEAP32[(($33)>>2)]=50;
 var $34=(($config+104)|0);
 HEAP32[(($34)>>2)]=50;
 var $35=(($config+108)|0);
 HEAP32[(($35)>>2)]=200;
 var $36=(($config+112)|0);
 HEAP32[(($36)>>2)]=2;
 var $37=(($config+52)|0);
 HEAP32[(($37)>>2)]=6000;
 var $38=(($config+56)|0);
 HEAP32[(($38)>>2)]=1;
 var $39=(($config+60)|0);
 HEAP32[(($39)>>2)]=0;
 var $40=(($config+44)|0);
 HEAP32[(($40)>>2)]=2000;
 var $41=(($config+48)|0);
 HEAP32[(($41)>>2)]=15;
 var $42=(($config+256)|0);
 HEAP32[(($42)>>2)]=102500;
 var $43=(($config+260)|0);
 HEAP32[(($43)>>2)]=102500;
 var $44=(($config+264)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=(($config+116)|0);
 HEAP32[(($45)>>2)]=-1;
 var $46=(($config+120)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($config+124)|0);
 HEAP32[(($47)>>2)]=2000;
 var $48=(($config+136)|0);
 HEAP32[(($48)>>2)]=-1;
 var $49=(($config+128)|0);
 HEAP32[(($49)>>2)]=700;
 var $50=(($config+132)|0);
 HEAP32[(($50)>>2)]=150;
 var $51=(($config+64)|0);
 HEAP32[(($51)>>2)]=4500;
 var $52=(($config+72)|0);
 HEAP32[(($52)>>2)]=45;
 var $53=(($config+68)|0);
 HEAP32[(($53)>>2)]=14500;
 var $54=(($config+76)|0);
 HEAP32[(($54)>>2)]=1500;
 var $55=(($config+80)|0);
 HEAP32[(($55)>>2)]=100;
 var $56=(($config+84)|0);
 HEAP32[(($56)>>2)]=1;
 var $57=(($config+88)|0);
 HEAP32[(($57)>>2)]=0;
 var $58=(($config+140)|0);
 HEAP32[(($58)>>2)]=5;
 var $59=(($config+144)|0);
 HEAP32[(($59)>>2)]=10;
 var $60=(($config+148)|0);
 HEAP32[(($60)>>2)]=1;
 var $61=(($config+152)|0);
 HEAP32[(($61)>>2)]=100;
 var $62=(($config+156)|0);
 HEAP32[(($62)>>2)]=100;
 var $63=(($config+160)|0);
 HEAP32[(($63)>>2)]=5000;
 var $64=(($config+164)|0);
 HEAP32[(($64)>>2)]=1000;
 var $65=(($config+168)|0);
 var $66=(($config+268)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($config+272)|0);
 HEAP32[(($67)>>2)]=0;
 var $68=(($config+404)|0);
 var $69=$65;
 HEAP32[(($69)>>2)]=0; HEAP32[((($69)+(4))>>2)]=0; HEAP32[((($69)+(8))>>2)]=0; HEAP32[((($69)+(12))>>2)]=0;
 HEAP32[(($68)>>2)]=2840;
 var $70=(($config+408)|0);
 HEAP32[(($70)>>2)]=2272;
 var $71=HEAP32[((_stderr)>>2)];
 var $72=_fprintf($71,2224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=2200,tempVarArgs)); STACKTOP=tempVarArgs;
 var $73=($argc|0)>1;
 if($73){label=3;break;}else{label=34;break;}
 case 3: 
 var $74=(($config+184)|0);
 var $75=(($config+192)|0);
 var $76=(($config+200)|0);
 var $77=(($config+208)|0);
 var $78=(($config+216)|0);
 var $79=(($config+224)|0);
 var $80=(($config+232)|0);
 var $81=(($config+240)|0);
 var $82=(($config+248)|0);
 var $fileNr_057=0;var $argn_058=1;label=4;break;
 case 4: 
 var $argn_058;
 var $fileNr_057;
 var $84=(($argv+($argn_058<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=HEAP8[($85)];
 var $87=(($86<<24)>>24)==45;
 if($87){label=5;break;}else{label=29;break;}
 case 5: 
 var $str_051=(($85+1)|0);
 var $88=HEAP8[($str_051)];
 var $89=(($88<<24)>>24)==0;
 if($89){var $argn_3=$argn_058;var $fileNr_1=$fileNr_057;label=33;break;}else{var $argn_152=$argn_058;var $str_053=$str_051;var $90=$88;label=6;break;}
 case 6: 
 var $90;
 var $str_053;
 var $argn_152;
 var $91=(($90<<24)>>24);
 switch(($91|0)){case 104:{ label=15;break;}case 118:{ label=17;break;}case 98:{ label=18;break;}case 111:{ label=19;break;}case 115:{ label=22;break;}case 109:{ label=27;break;}default:{label=28;break;}}break;
 case 7: 
 var $93$0 = ___cxa_find_matching_catch(-1, -1); var $93$1 = tempRet0;
 var $94=$93$0;
 var $95=$93$1;
 var $_0=$95;var $_035=$94;label=49;break;
 case 8: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=11;break;
 case 9: 
 var $lpad_loopexit54$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit54$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit54$1;var $lpad_phi$0=$lpad_loopexit54$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit55$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit55$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit55$1;var $lpad_phi$0=$lpad_nonloopexit55$0;label=11;break;
 case 11: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $96=$lpad_phi$0;
 var $97=$lpad_phi$1;
 var $98=(($config)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$99;
 var $101=($99|0)==0;
 if($101){var $_0=$97;var $_035=$96;label=49;break;}else{label=12;break;}
 case 12: 
 var $102=(($config+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($99|0)==($103|0);
 if($104){label=14;break;}else{label=13;break;}
 case 13: 
 var $scevgep_i_i_i_i_i=((($103)-(8))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $105=(((-$100))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$105)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $106=$uglygep29_i_i_i_i_i>>>3;
 var $107=$106^-1;
 var $scevgep30_i_i_i_i_i=(($103+($107<<3))|0);
 HEAP32[(($102)>>2)]=$scevgep30_i_i_i_i_i;
 label=14;break;
 case 14: 
 var $108=$99;
 __ZdlPv($108);
 var $_0=$97;var $_035=$96;label=49;break;
 case 15: 
 var $puts_i=_puts(40);
 (function() { try { __THREW__ = 0; return _exit(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $112=HEAP32[((14448)>>2)];
 var $113=((($112)+(1))|0);
 HEAP32[((14448)>>2)]=$113;
 var $argn_1_be=$argn_152;label=23;break;
 case 18: 
 var $115=((($argn_152)+(1))|0);
 var $116=(($argv+($115<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=_fopen($117,2176);
 HEAP32[((14504)>>2)]=$118;
 var $argn_1_be=$115;label=23;break;
 case 19: 
 var $120=((($argn_152)+(1))|0);
 var $121=(($argv+($120<<2))|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=_fopen($122,1504);
 HEAP32[(($21)>>2)]=$123;
 var $124=($123|0)==0;
 if($124){label=20;break;}else{var $argn_1_be=$120;label=23;break;}
 case 20: 
 var $126=HEAP32[(($121)>>2)];
 __Z8logErrorPKcz(2128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$126,tempVarArgs)); STACKTOP=tempVarArgs;
 (function() { try { __THREW__ = 0; return _exit(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=10;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $129=((($argn_152)+(1))|0);
 var $130=(($argv+($129<<2))|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=_strchr($131,61);
 var $133=($132|0)==0;
 if($133){var $argn_1_be=$129;label=23;break;}else{label=24;break;}
 case 23: 
 var $argn_1_be;
 var $str_0=(($str_053+1)|0);
 var $134=HEAP8[($str_0)];
 var $135=(($134<<24)>>24)==0;
 if($135){var $argn_3=$argn_1_be;var $fileNr_1=$fileNr_057;label=33;break;}else{var $argn_152=$argn_1_be;var $str_053=$str_0;var $90=$134;label=6;break;}
 case 24: 
 var $137=(($132+1)|0);
 HEAP8[($132)]=0;
 var $138=HEAP32[(($130)>>2)];
 var $139=(function() { try { __THREW__ = 0; return __ZN14ConfigSettings10setSettingEPKcS1_($config,$138,$137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=8;break; }
 case 25: 
 if($139){var $argn_1_be=$129;label=23;break;}else{label=26;break;}
 case 26: 
 var $142=HEAP32[(($130)>>2)];
 var $143=_printf(2080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$142,tempVarArgs)); STACKTOP=tempVarArgs;
 var $argn_1_be=$129;label=23;break;
 case 27: 
 var $145=((($argn_152)+(1))|0);
 var $146=(($argv+($145<<2))|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=_sscanf($147,1968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 72)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$74,HEAP32[(((tempVarArgs)+(8))>>2)]=$75,HEAP32[(((tempVarArgs)+(16))>>2)]=$76,HEAP32[(((tempVarArgs)+(24))>>2)]=$77,HEAP32[(((tempVarArgs)+(32))>>2)]=$78,HEAP32[(((tempVarArgs)+(40))>>2)]=$79,HEAP32[(((tempVarArgs)+(48))>>2)]=$80,HEAP32[(((tempVarArgs)+(56))>>2)]=$81,HEAP32[(((tempVarArgs)+(64))>>2)]=$82,tempVarArgs)); STACKTOP=tempVarArgs;
 var $argn_1_be=$145;label=23;break;
 case 28: 
 __Z8logErrorPKcz(1904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$91,tempVarArgs)); STACKTOP=tempVarArgs;
 var $argn_1_be=$argn_152;label=23;break;
 case 29: 
 var $151=HEAP32[(($21)>>2)];
 var $152=($151|0)==0;
 if($152){label=30;break;}else{label=31;break;}
 case 30: 
 __Z8logErrorPKcz(1848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_036=1;label=42;break;
 case 31: 
 __ZN11GCodeExport10addCommentEPKcz($gcode,1760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=2200,tempVarArgs)); STACKTOP=tempVarArgs;
 var $155=HEAP32[(($84)>>2)];
 var $156=($fileNr_057|0)==0;
 (function() { try { __THREW__ = 0; return __Z11processFilePKcR14ConfigSettingsR11GCodeExportb($155,$config,$gcode,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=9;break; }
 case 32: 
 var $158=((($fileNr_057)+(1))|0);
 var $argn_3=$argn_058;var $fileNr_1=$158;label=33;break;
 case 33: 
 var $fileNr_1;
 var $argn_3;
 var $159=((($argn_3)+(1))|0);
 var $160=($159|0)<($argc|0);
 if($160){var $fileNr_057=$fileNr_1;var $argn_058=$159;label=4;break;}else{label=34;break;}
 case 34: 
 var $161=HEAP32[(($21)>>2)];
 var $162=($161|0)==0;
 if($162){var $_036=0;label=42;break;}else{label=35;break;}
 case 35: 
 var $164=HEAP32[(($13)>>2)];
 var $165=($164|0)==0;
 var $_pre62=(($gcode+352)|0);
 if($165){var $174=$161;label=40;break;}else{label=36;break;}
 case 36: 
 var $167=HEAP32[(($_pre62)>>2)];
 var $168=($167|0)==2;
 if($168){label=37;break;}else{label=38;break;}
 case 37: 
 var $170=_fwrite(576,8,1,$161);
 label=39;break;
 case 38: 
 var $172=_fwrite(528,5,1,$161);
 label=39;break;
 case 39: 
 HEAP32[(($13)>>2)]=0;
 var $_pre=HEAP32[(($21)>>2)];
 var $174=$_pre;label=40;break;
 case 40: 
 var $174;
 var $175=HEAP32[((14496)>>2)];
 var $176=((($175)+(5000))|0);
 var $177=(($gcode+336)|0);
 HEAP32[(($177)>>2)]=$176;
 var $178=HEAP32[(($70)>>2)];
 var $179=_fprintf($174,512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$178,tempVarArgs)); STACKTOP=tempVarArgs;
 var $180=(($gcode+368)|0);
 var $181=HEAPF64[(($180)>>3)];
 var $182=(($181)&-1);
 __Z4_logPKcz(1712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$182,tempVarArgs)); STACKTOP=tempVarArgs;
 var $183=HEAPF64[(($14)>>3)];
 var $184=HEAPF64[(($6)>>3)];
 var $185=($183)+($184);
 var $186=(($185)&-1);
 __Z4_logPKcz(1680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$186,tempVarArgs)); STACKTOP=tempVarArgs;
 var $187=HEAP32[(($_pre62)>>2)];
 var $188=($187|0)==1;
 if($188){label=41;break;}else{var $_036=0;label=42;break;}
 case 41: 
 var $190=(($numberString)|0);
 var $191=HEAPF64[(($180)>>3)];
 var $192=(($191)&-1);
 var $193=_sprintf($190,1632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$192,tempVarArgs)); STACKTOP=tempVarArgs;
 __ZN11GCodeExport17replaceTagInStartEPKcS1_($gcode,1576,$190);
 var $194=HEAPF64[(($14)>>3)];
 var $195=HEAPF64[(($6)>>3)];
 var $196=($194)+($195);
 var $197=(($196)&-1);
 var $198=_sprintf($190,1632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$197,tempVarArgs)); STACKTOP=tempVarArgs;
 __ZN11GCodeExport17replaceTagInStartEPKcS1_($gcode,1536,$190);
 var $_036=0;label=42;break;
 case 42: 
 var $_036;
 var $200=(($config)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$201;
 var $203=($201|0)==0;
 if($203){label=46;break;}else{label=43;break;}
 case 43: 
 var $204=(($config+4)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($201|0)==($205|0);
 if($206){label=45;break;}else{label=44;break;}
 case 44: 
 var $scevgep_i_i_i_i_i39=((($205)-(8))|0);
 var $scevgep28_i_i_i_i_i40=$scevgep_i_i_i_i_i39;
 var $207=(((-$202))|0);
 var $uglygep_i_i_i_i_i41=(($scevgep28_i_i_i_i_i40+$207)|0);
 var $uglygep29_i_i_i_i_i42=$uglygep_i_i_i_i_i41;
 var $208=$uglygep29_i_i_i_i_i42>>>3;
 var $209=$208^-1;
 var $scevgep30_i_i_i_i_i43=(($205+($209<<3))|0);
 HEAP32[(($204)>>2)]=$scevgep30_i_i_i_i_i43;
 label=45;break;
 case 45: 
 var $210=$201;
 __ZdlPv($210);
 label=46;break;
 case 46: 
 var $211=HEAP32[(($21)>>2)];
 var $212=($211|0)==0;
 if($212){label=48;break;}else{label=47;break;}
 case 47: 
 var $214=_fclose($211);
 label=48;break;
 case 48: 
 STACKTOP=sp;return $_036;
 case 49: 
 var $_035;
 var $_0;
 var $215=HEAP32[(($21)>>2)];
 var $216=($215|0)==0;
 if($216){label=51;break;}else{label=50;break;}
 case 50: 
 var $218=_fclose($215);
 label=51;break;
 case 51: 
 var $219$0=$_035;
 var $219$1=0;
 var $220$0=$219$0;
 var $220$1=$_0;
 ___resumeException($220$0)
  default: assert(0, "bad label: " + label);
 }
}
Module["_main"] = _main;
function __ZN11GCodeExport17replaceTagInStartEPKcS1_($this,$tag,$replaceValue){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buffer=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_ftell($2);
 var $4=HEAP32[(($1)>>2)];
 var $5=_fseek($4,0,0);
 var $6=(($buffer)|0);
 var $7=HEAP32[(($1)>>2)];
 var $8=_fread($6,1024,1,$7);
 var $9=_strstr($6,$tag);
 var $10=_strlen($tag);
 _memset($9, 32, $10);
 var $11=($9|0)==0;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=_strlen($replaceValue);
 assert($13 % 1 === 0);(_memcpy($9, $replaceValue, $13)|0);
 label=3;break;
 case 3: 
 var $15=HEAP32[(($1)>>2)];
 var $16=_fseek($15,0,0);
 var $17=HEAP32[(($1)>>2)];
 var $18=_fwrite($6,1024,1,$17);
 var $19=HEAP32[(($1)>>2)];
 var $20=_fseek($19,$3,0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI18SliceVolumeStorageNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>357913941;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(12))&-1);
 var $21=($20>>>0)>178956969;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(12))&-1);
 var $_070=357913941;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(12))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_071=0;var $40=$28;var $39=$31;label=7;break;}else{var $_070=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_070;
 var $36=((($_070)*(12))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_071=$_070;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_071;
 var $41;
 var $42=(($41+((($39)*(12))&-1))|0);
 var $43=(($41+((($_071)*(12))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $48=$14;var $47=$40;label=11;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN18SliceVolumeStorageC1ERKS_($42,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre68=HEAP32[(($3)>>2)];
 var $_pre69=HEAP32[(($1)>>2)];
 var $48=$_pre68;var $47=$_pre69;label=11;break;
 case 10: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 var $121$1=$46$1;var $121$0=$46$0;label=45;break;
 case 11: 
 var $47;
 var $48;
 var $_sum=((($39)+(1))|0);
 var $49=(($41+((($_sum)*(12))&-1))|0);
 var $50=($47|0)==($48|0);
 if($50){label=12;break;}else{var $_049_i=$47;var $__v_sroa_1_4_load5563=$42;label=13;break;}
 case 12: 
 HEAP32[(($3)>>2)]=$42;
 HEAP32[(($1)>>2)]=$49;
 HEAP32[(($15)>>2)]=$43;
 var $86=$47;label=29;break;
 case 13: 
 var $__v_sroa_1_4_load5563;
 var $_049_i;
 var $51=((($__v_sroa_1_4_load5563)-(12))|0);
 var $52=((($_049_i)-(12))|0);
 var $53=($51|0)==0;
 if($53){label=15;break;}else{label=14;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZN18SliceVolumeStorageC1ERKS_($51,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $55=($52|0)==($48|0);
 if($55){label=16;break;}else{var $_049_i=$52;var $__v_sroa_1_4_load5563=$51;label=13;break;}
 case 16: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre67=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$51;
 HEAP32[(($1)>>2)]=$49;
 HEAP32[(($15)>>2)]=$43;
 var $57=($_pre_i|0)==($_pre67|0);
 if($57){var $86=$_pre_i;label=29;break;}else{var $58=$_pre67;label=17;break;}
 case 17: 
 var $58;
 var $59=((($58)-(12))|0);
 var $60=(($59)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)==0;
 if($62){label=28;break;}else{label=18;break;}
 case 18: 
 var $63=((($58)-(12)+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($61|0)==($64|0);
 if($65){var $83=$61;label=27;break;}else{var $66=$64;label=19;break;}
 case 19: 
 var $66;
 var $67=((($66)-(12))|0);
 HEAP32[(($63)>>2)]=$67;
 var $68=(($67)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){var $71=$67;label=20;break;}else{label=21;break;}
 case 20: 
 var $71;
 var $72=($61|0)==($71|0);
 if($72){label=26;break;}else{var $66=$71;label=19;break;}
 case 21: 
 var $73=((($66)-(12)+4)|0);
 label=22;break;
 case 22: 
 var $74=HEAP32[(($73)>>2)];
 var $75=($69|0)==($74|0);
 if($75){label=25;break;}else{label=23;break;}
 case 23: 
 var $77=((($74)-(96))|0);
 HEAP32[(($73)>>2)]=$77;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=24;break; }
 case 24: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=$79$0;
 ___cxa_call_unexpected($80);
 throw "Reached an unreachable!";
 case 25: 
 var $81=HEAP32[(($68)>>2)];
 var $82=$81;
 __ZdlPv($82);
 var $_pre29_i_i_i_i_i45=HEAP32[(($63)>>2)];
 var $71=$_pre29_i_i_i_i_i45;label=20;break;
 case 26: 
 var $_pre_i_i_i_i_i47=HEAP32[(($60)>>2)];
 var $83=$_pre_i_i_i_i_i47;label=27;break;
 case 27: 
 var $83;
 var $84=$83;
 __ZdlPv($84);
 label=28;break;
 case 28: 
 var $85=($_pre_i|0)==($59|0);
 if($85){var $86=$_pre_i;label=29;break;}else{var $58=$59;label=17;break;}
 case 29: 
 var $86;
 var $87=($86|0)==0;
 if($87){label=31;break;}else{label=30;break;}
 case 30: 
 var $89=$86;
 __ZdlPv($89);
 label=31;break;
 case 31: 
 return;
 case 32: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $92=($__v_sroa_1_4_load5563|0)==($49|0);
 if($92){var $121$1=$91$1;var $121$0=$91$0;label=45;break;}else{var $93=$49;label=33;break;}
 case 33: 
 var $93;
 var $94=((($93)-(12))|0);
 var $95=(($94)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==0;
 if($97){label=44;break;}else{label=34;break;}
 case 34: 
 var $98=((($93)-(12)+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($96|0)==($99|0);
 if($100){var $118=$96;label=43;break;}else{var $101=$99;label=35;break;}
 case 35: 
 var $101;
 var $102=((($101)-(12))|0);
 HEAP32[(($98)>>2)]=$102;
 var $103=(($102)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)==0;
 if($105){var $106=$102;label=36;break;}else{label=37;break;}
 case 36: 
 var $106;
 var $107=($96|0)==($106|0);
 if($107){label=42;break;}else{var $101=$106;label=35;break;}
 case 37: 
 var $108=((($101)-(12)+4)|0);
 label=38;break;
 case 38: 
 var $109=HEAP32[(($108)>>2)];
 var $110=($104|0)==($109|0);
 if($110){label=41;break;}else{label=39;break;}
 case 39: 
 var $112=((($109)-(96))|0);
 HEAP32[(($108)>>2)]=$112;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=40;break; }
 case 40: 
 var $114$0 = ___cxa_find_matching_catch(-1, -1); var $114$1 = tempRet0;
 var $115=$114$0;
 ___cxa_call_unexpected($115);
 throw "Reached an unreachable!";
 case 41: 
 var $116=HEAP32[(($103)>>2)];
 var $117=$116;
 __ZdlPv($117);
 var $_pre29_i_i_i_i_i=HEAP32[(($98)>>2)];
 var $106=$_pre29_i_i_i_i_i;label=36;break;
 case 42: 
 var $_pre_i_i_i_i_i=HEAP32[(($95)>>2)];
 var $118=$_pre_i_i_i_i_i;label=43;break;
 case 43: 
 var $118;
 var $119=$118;
 __ZdlPv($119);
 label=44;break;
 case 44: 
 var $120=($__v_sroa_1_4_load5563|0)==($94|0);
 if($120){var $121$1=$91$1;var $121$0=$91$0;label=45;break;}else{var $93=$94;label=33;break;}
 case 45: 
 var $121$0;
 var $121$1;
 var $122=($41|0)==0;
 if($122){label=47;break;}else{label=46;break;}
 case 46: 
 var $124=$41;
 __ZdlPv($124);
 label=47;break;
 case 47: 
 ___resumeException($121$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18SliceVolumeStorageC1ERKS_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($0+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($0)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=24;break;}else{label=2;break;}
 case 2: 
 var $11=$8;
 var $12=$6;
 var $13=((($12)-($11))|0);
 var $14=(((($13|0))/(12))&-1);
 var $15=($14>>>0)>357913941;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $18=(function() { try { __THREW__ = 0; return __Znwj($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $20=$18;
 HEAP32[(($3)>>2)]=$20;
 HEAP32[(($2)>>2)]=$20;
 var $21=(($20+((($14)*(12))&-1))|0);
 HEAP32[(($4)>>2)]=$21;
 var $22=HEAP32[(($7)>>2)];
 var $23=HEAP32[(($5)>>2)];
 var $24=($22|0)==($23|0);
 if($24){label=24;break;}else{var $_011_i_i_i_i=$22;var $25=$20;label=6;break;}
 case 6: 
 var $25;
 var $_011_i_i_i_i;
 var $26=($25|0)==0;
 if($26){var $30=0;label=9;break;}else{label=7;break;}
 case 7: 
 var $28=(($25)|0);
 var $29=(($_011_i_i_i_i)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEEC2ERKS4_($28,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 var $_pre12_i_i_i_i=HEAP32[(($3)>>2)];
 var $30=$_pre12_i_i_i_i;label=9;break;
 case 9: 
 var $30;
 var $31=(($30+12)|0);
 HEAP32[(($3)>>2)]=$31;
 var $32=(($_011_i_i_i_i+12)|0);
 var $33=($32|0)==($23|0);
 if($33){label=24;break;}else{var $_011_i_i_i_i=$32;var $25=$31;label=6;break;}
 case 10: 
 var $lpad_loopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_loopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_loopexit_i_i_i$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_nonloopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_nonloopexit_i_i_i$0;label=12;break;
 case 12: 
 var $lpad_phi_i_i_i$0;
 var $lpad_phi_i_i_i$1;
 var $35=HEAP32[(($2)>>2)];
 var $36=($35|0)==0;
 if($36){label=23;break;}else{label=13;break;}
 case 13: 
 var $37=HEAP32[(($3)>>2)];
 var $38=($35|0)==($37|0);
 if($38){var $56=$35;label=22;break;}else{var $39=$37;label=14;break;}
 case 14: 
 var $39;
 var $40=((($39)-(12))|0);
 HEAP32[(($3)>>2)]=$40;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){var $44=$40;label=15;break;}else{label=16;break;}
 case 15: 
 var $44;
 var $45=($35|0)==($44|0);
 if($45){label=21;break;}else{var $39=$44;label=14;break;}
 case 16: 
 var $46=((($39)-(12)+4)|0);
 label=17;break;
 case 17: 
 var $47=HEAP32[(($46)>>2)];
 var $48=($42|0)==($47|0);
 if($48){label=20;break;}else{label=18;break;}
 case 18: 
 var $50=((($47)-(96))|0);
 HEAP32[(($46)>>2)]=$50;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 19: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=$52$0;
 ___cxa_call_unexpected($53);
 throw "Reached an unreachable!";
 case 20: 
 var $54=HEAP32[(($41)>>2)];
 var $55=$54;
 __ZdlPv($55);
 var $_pre29_i=HEAP32[(($3)>>2)];
 var $44=$_pre29_i;label=15;break;
 case 21: 
 var $_pre_i=HEAP32[(($2)>>2)];
 var $56=$_pre_i;label=22;break;
 case 22: 
 var $56;
 var $57=$56;
 __ZdlPv($57);
 label=23;break;
 case 23: 
 ___resumeException($lpad_phi_i_i_i$0)
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEEC2ERKS4_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($5|0)==($7|0);
 if($8){label=17;break;}else{label=2;break;}
 case 2: 
 var $10=$7;
 var $11=$5;
 var $12=((($11)-($10))|0);
 var $13=(((($12|0))/(96))&-1);
 var $14=($13>>>0)>44739242;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $17=(function() { try { __THREW__ = 0; return __Znwj($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $19=$17;
 HEAP32[(($2)>>2)]=$19;
 HEAP32[(($1)>>2)]=$19;
 var $20=(($19+((($13)*(96))&-1))|0);
 HEAP32[(($3)>>2)]=$20;
 var $21=HEAP32[(($6)>>2)];
 var $22=HEAP32[(($4)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=17;break;}else{var $_011_i=$21;var $24=$19;label=6;break;}
 case 6: 
 var $24;
 var $_011_i;
 var $25=($24|0)==0;
 if($25){var $27=0;label=9;break;}else{label=7;break;}
 case 7: 
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartC2ERKS_($24,$_011_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 var $_pre12_i=HEAP32[(($2)>>2)];
 var $27=$_pre12_i;label=9;break;
 case 9: 
 var $27;
 var $28=(($27+96)|0);
 HEAP32[(($2)>>2)]=$28;
 var $29=(($_011_i+96)|0);
 var $30=($29|0)==($22|0);
 if($30){label=17;break;}else{var $_011_i=$29;var $24=$28;label=6;break;}
 case 10: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=12;break;
 case 12: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $32=HEAP32[(($1)>>2)];
 var $33=($32|0)==0;
 if($33){label=18;break;}else{label=13;break;}
 case 13: 
 var $34=HEAP32[(($2)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=16;break;}else{label=14;break;}
 case 14: 
 var $37=((($34)-(96))|0);
 HEAP32[(($2)>>2)]=$37;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=15;break; }
 case 15: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1); var $39$1 = tempRet0;
 var $40=$39$0;
 ___cxa_call_unexpected($40);
 throw "Reached an unreachable!";
 case 16: 
 var $41=HEAP32[(($1)>>2)];
 var $42=$41;
 __ZdlPv($42);
 label=18;break;
 case 17: 
 return;
 case 18: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14SliceLayerPartC2ERKS_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$this;
 var $3=$0;
 assert(32 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];HEAP32[((($2)+(12))>>2)]=HEAP32[((($3)+(12))>>2)];HEAP32[((($2)+(16))>>2)]=HEAP32[((($3)+(16))>>2)];HEAP32[((($2)+(20))>>2)]=HEAP32[((($3)+(20))>>2)];HEAP32[((($2)+(24))>>2)]=HEAP32[((($3)+(24))>>2)];HEAP32[((($2)+(28))>>2)]=HEAP32[((($3)+(28))>>2)];
 var $4=(($this+32)|0);
 var $5=(($0+32)|0);
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($4,$5);
 var $6=(($this+44)|0);
 var $7=(($0+44)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($6,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $8=(($this+56)|0);
 var $9=(($8)|0);
 var $10=(($8)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($this+60)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($this+64)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($0+60)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($0+56)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($14|0)==($16|0);
 if($17){label=13;break;}else{label=3;break;}
 case 3: 
 var $19=$16;
 var $20=$14;
 var $21=((($20)-($19))|0);
 var $22=(((($21|0))/(12))&-1);
 var $23=($22>>>0)>357913941;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=$8;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $26=(function() { try { __THREW__ = 0; return __Znwj($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $28=$26;
 HEAP32[(($11)>>2)]=$28;
 HEAP32[(($10)>>2)]=$28;
 var $29=(($28+((($22)*(12))&-1))|0);
 HEAP32[(($12)>>2)]=$29;
 var $30=HEAP32[(($15)>>2)];
 var $31=HEAP32[(($13)>>2)];
 var $32=($30|0)==($31|0);
 if($32){label=13;break;}else{var $_011_i_i_i=$30;var $33=$28;label=7;break;}
 case 7: 
 var $33;
 var $_011_i_i_i;
 var $34=($33|0)==0;
 if($34){var $36=0;label=10;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($33,$_011_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=11;break; }
 case 9: 
 var $_pre12_i_i_i=HEAP32[(($11)>>2)];
 var $36=$_pre12_i_i_i;label=10;break;
 case 10: 
 var $36;
 var $37=(($36+12)|0);
 HEAP32[(($11)>>2)]=$37;
 var $38=(($_011_i_i_i+12)|0);
 var $39=($38|0)==($31|0);
 if($39){label=13;break;}else{var $_011_i_i_i=$38;var $33=$37;label=7;break;}
 case 11: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=17;break;
 case 12: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=17;break;
 case 13: 
 var $40=(($this+68)|0);
 var $41=(($0+68)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($40,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $42=(($this+80)|0);
 var $43=(($0+80)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($42,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 var $44=(($this+92)|0);
 var $45=(($0+92)|0);
 var $46=HEAP32[(($45)>>2)];
 HEAP32[(($44)>>2)]=$46;
 return;
 case 16: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1); var $48$1 = tempRet0;
 var $49=$48$0;
 var $50=$48$1;
 var $_2=$50;var $_212=$49;label=38;break;
 case 17: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEENS4_IS8_EEED2Ev($9);
 var $51=$lpad_phi_i_i$0;
 var $52=$lpad_phi_i_i$1;
 var $_1=$52;var $_111=$51;label=29;break;
 case 18: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=$54$0;
 var $56=$54$1;
 var $_0=$56;var $_010=$55;label=28;break;
 case 19: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1); var $58$1 = tempRet0;
 var $59=$58$0;
 var $60=$58$1;
 var $61=(($40)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){var $_0=$60;var $_010=$59;label=28;break;}else{label=20;break;}
 case 20: 
 var $64=(($this+72)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($62|0)==($65|0);
 if($66){var $82=$62;label=27;break;}else{var $67=$65;label=21;break;}
 case 21: 
 var $67;
 var $68=((($67)-(12))|0);
 HEAP32[(($64)>>2)]=$68;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=$70;
 var $72=($70|0)==0;
 if($72){var $73=$68;label=22;break;}else{label=23;break;}
 case 22: 
 var $73;
 var $74=($62|0)==($73|0);
 if($74){label=26;break;}else{var $67=$73;label=21;break;}
 case 23: 
 var $75=((($67)-(12)+4)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($70|0)==($76|0);
 if($77){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i_i_i_i=((($76)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $78=(((-$71))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$78)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $79=$uglygep29_i_i_i_i_i_i>>>4;
 var $80=$79^-1;
 var $scevgep30_i_i_i_i_i_i=(($76+($80<<4))|0);
 HEAP32[(($75)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=25;break;
 case 25: 
 var $81=$70;
 __ZdlPv($81);
 var $_pre29_i_i_i=HEAP32[(($64)>>2)];
 var $73=$_pre29_i_i_i;label=22;break;
 case 26: 
 var $_pre_i_i_i=HEAP32[(($61)>>2)];
 var $82=$_pre_i_i_i;label=27;break;
 case 27: 
 var $82;
 var $83=$82;
 __ZdlPv($83);
 var $_0=$60;var $_010=$59;label=28;break;
 case 28: 
 var $_010;
 var $_0;
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEENS4_IS8_EEED2Ev($9);
 var $_1=$_0;var $_111=$_010;label=29;break;
 case 29: 
 var $_111;
 var $_1;
 var $85=(($6)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($86|0)==0;
 if($87){var $_2=$_1;var $_212=$_111;label=38;break;}else{label=30;break;}
 case 30: 
 var $88=(($this+48)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($86|0)==($89|0);
 if($90){var $106=$86;label=37;break;}else{var $91=$89;label=31;break;}
 case 31: 
 var $91;
 var $92=((($91)-(12))|0);
 HEAP32[(($88)>>2)]=$92;
 var $93=(($92)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$94;
 var $96=($94|0)==0;
 if($96){var $97=$92;label=32;break;}else{label=33;break;}
 case 32: 
 var $97;
 var $98=($86|0)==($97|0);
 if($98){label=36;break;}else{var $91=$97;label=31;break;}
 case 33: 
 var $99=((($91)-(12)+4)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($94|0)==($100|0);
 if($101){label=35;break;}else{label=34;break;}
 case 34: 
 var $scevgep_i_i_i_i_i_i20=((($100)-(16))|0);
 var $scevgep28_i_i_i_i_i_i21=$scevgep_i_i_i_i_i_i20;
 var $102=(((-$95))|0);
 var $uglygep_i_i_i_i_i_i22=(($scevgep28_i_i_i_i_i_i21+$102)|0);
 var $uglygep29_i_i_i_i_i_i23=$uglygep_i_i_i_i_i_i22;
 var $103=$uglygep29_i_i_i_i_i_i23>>>4;
 var $104=$103^-1;
 var $scevgep30_i_i_i_i_i_i24=(($100+($104<<4))|0);
 HEAP32[(($99)>>2)]=$scevgep30_i_i_i_i_i_i24;
 label=35;break;
 case 35: 
 var $105=$94;
 __ZdlPv($105);
 var $_pre29_i_i_i26=HEAP32[(($88)>>2)];
 var $97=$_pre29_i_i_i26;label=32;break;
 case 36: 
 var $_pre_i_i_i28=HEAP32[(($85)>>2)];
 var $106=$_pre_i_i_i28;label=37;break;
 case 37: 
 var $106;
 var $107=$106;
 __ZdlPv($107);
 var $_2=$_1;var $_212=$_111;label=38;break;
 case 38: 
 var $_212;
 var $_2;
 var $108=(($4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($109|0)==0;
 if($110){label=47;break;}else{label=39;break;}
 case 39: 
 var $111=(($this+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($109|0)==($112|0);
 if($113){var $129=$109;label=46;break;}else{var $114=$112;label=40;break;}
 case 40: 
 var $114;
 var $115=((($114)-(12))|0);
 HEAP32[(($111)>>2)]=$115;
 var $116=(($115)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 var $119=($117|0)==0;
 if($119){var $120=$115;label=41;break;}else{label=42;break;}
 case 41: 
 var $120;
 var $121=($109|0)==($120|0);
 if($121){label=45;break;}else{var $114=$120;label=40;break;}
 case 42: 
 var $122=((($114)-(12)+4)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($117|0)==($123|0);
 if($124){label=44;break;}else{label=43;break;}
 case 43: 
 var $scevgep_i_i_i_i_i_i36=((($123)-(16))|0);
 var $scevgep28_i_i_i_i_i_i37=$scevgep_i_i_i_i_i_i36;
 var $125=(((-$118))|0);
 var $uglygep_i_i_i_i_i_i38=(($scevgep28_i_i_i_i_i_i37+$125)|0);
 var $uglygep29_i_i_i_i_i_i39=$uglygep_i_i_i_i_i_i38;
 var $126=$uglygep29_i_i_i_i_i_i39>>>4;
 var $127=$126^-1;
 var $scevgep30_i_i_i_i_i_i40=(($123+($127<<4))|0);
 HEAP32[(($122)>>2)]=$scevgep30_i_i_i_i_i_i40;
 label=44;break;
 case 44: 
 var $128=$117;
 __ZdlPv($128);
 var $_pre29_i_i_i42=HEAP32[(($111)>>2)];
 var $120=$_pre29_i_i_i42;label=41;break;
 case 45: 
 var $_pre_i_i_i44=HEAP32[(($108)>>2)];
 var $129=$_pre_i_i_i44;label=46;break;
 case 46: 
 var $129;
 var $130=$129;
 __ZdlPv($130);
 label=47;break;
 case 47: 
 var $131$0=$_212;
 var $131$1=0;
 var $132$0=$131$0;
 var $132$1=$_2;
 ___resumeException($132$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113__vector_baseINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEENS4_IS8_EEED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=15;break;}else{label=2;break;}
 case 2: 
 var $4=(($this+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($2|0)==($5|0);
 if($6){var $34=$2;label=14;break;}else{var $7=$5;label=3;break;}
 case 3: 
 var $7;
 var $8=((($7)-(12))|0);
 HEAP32[(($4)>>2)]=$8;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $12=$8;label=4;break;}else{label=5;break;}
 case 4: 
 var $12;
 var $13=($2|0)==($12|0);
 if($13){label=13;break;}else{var $7=$12;label=3;break;}
 case 5: 
 var $14=((($7)-(12)+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($10|0)==($15|0);
 if($16){var $32=$10;label=12;break;}else{var $17=$15;label=6;break;}
 case 6: 
 var $17;
 var $18=((($17)-(12))|0);
 HEAP32[(($14)>>2)]=$18;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=($20|0)==0;
 if($22){var $23=$18;label=7;break;}else{label=8;break;}
 case 7: 
 var $23;
 var $24=($10|0)==($23|0);
 if($24){label=11;break;}else{var $17=$23;label=6;break;}
 case 8: 
 var $25=((($17)-(12)+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($20|0)==($26|0);
 if($27){label=10;break;}else{label=9;break;}
 case 9: 
 var $scevgep_i_i_i_i_i_i=((($26)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $28=(((-$21))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$28)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $29=$uglygep29_i_i_i_i_i_i>>>4;
 var $30=$29^-1;
 var $scevgep30_i_i_i_i_i_i=(($26+($30<<4))|0);
 HEAP32[(($25)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=10;break;
 case 10: 
 var $31=$20;
 __ZdlPv($31);
 var $_pre29_i_i_i=HEAP32[(($14)>>2)];
 var $23=$_pre29_i_i_i;label=7;break;
 case 11: 
 var $_pre_i_i_i=HEAP32[(($9)>>2)];
 var $32=$_pre_i_i_i;label=12;break;
 case 12: 
 var $32;
 var $33=$32;
 __ZdlPv($33);
 var $_pre29=HEAP32[(($4)>>2)];
 var $12=$_pre29;label=4;break;
 case 13: 
 var $_pre=HEAP32[(($1)>>2)];
 var $34=$_pre;label=14;break;
 case 14: 
 var $34;
 var $35=$34;
 __ZdlPv($35);
 label=15;break;
 case 15: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIP6SlicerNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI12SupportPointNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>4;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>268435455;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>4;
 var $21=($20>>>0)>134217726;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>4;
 var $_044=268435455;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>3;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>4;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<4;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<4))|0);
 var $43=(($41+($_045<<4))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=$42;
 var $47=$__x;
 assert(16 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];HEAP32[((($46)+(12))>>2)]=HEAP32[((($47)+(12))>>2)];
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $48=(($41+($_sum<<4))|0);
 var $49=$41;
 var $50=$14;
 assert($40 % 1 === 0);(_memcpy($49, $50, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $51=($14|0)==0;
 if($51){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($50);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIxNS_9allocatorIxEEE21__push_back_slow_pathIKxEEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>3;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>536870911;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>3;
 var $21=($20>>>0)>268435454;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>3;
 var $_044=536870911;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>2;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>3;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<3;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<3))|0);
 var $43=(($41+($_045<<3))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $ld$0$0=(($__x)|0);
 var $46$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($__x+4)|0);
 var $46$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($42)|0);
 HEAP32[(($st$2$0)>>2)]=$46$0;
 var $st$3$1=(($42+4)|0);
 HEAP32[(($st$3$1)>>2)]=$46$1;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<3))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_IxNS_9allocatorIxEEEENS1_IS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>357913941;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(12))&-1);
 var $21=($20>>>0)>178956969;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(12))&-1);
 var $_069=357913941;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(12))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_070=0;var $40=$28;var $39=$31;label=7;break;}else{var $_069=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_069;
 var $36=((($_069)*(12))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_070=$_069;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_070;
 var $41;
 var $42=(($41+((($39)*(12))&-1))|0);
 var $43=(($41+((($_070)*(12))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $48=$14;var $47=$40;label=11;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIxNS_9allocatorIxEEEC2ERKS3_($42,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre67=HEAP32[(($3)>>2)];
 var $_pre68=HEAP32[(($1)>>2)];
 var $48=$_pre67;var $47=$_pre68;label=11;break;
 case 10: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 var $93$1=$46$1;var $93$0=$46$0;label=31;break;
 case 11: 
 var $47;
 var $48;
 var $_sum=((($39)+(1))|0);
 var $49=(($41+((($_sum)*(12))&-1))|0);
 var $50=($47|0)==($48|0);
 if($50){label=12;break;}else{var $_049_i=$47;var $__v_sroa_1_4_load5462=$42;label=13;break;}
 case 12: 
 HEAP32[(($3)>>2)]=$42;
 HEAP32[(($1)>>2)]=$49;
 HEAP32[(($15)>>2)]=$43;
 var $72=$47;label=22;break;
 case 13: 
 var $__v_sroa_1_4_load5462;
 var $_049_i;
 var $51=((($__v_sroa_1_4_load5462)-(12))|0);
 var $52=((($_049_i)-(12))|0);
 var $53=($51|0)==0;
 if($53){label=15;break;}else{label=14;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIxNS_9allocatorIxEEEC2ERKS3_($51,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=25;break; }
 case 15: 
 var $55=($52|0)==($48|0);
 if($55){label=16;break;}else{var $_049_i=$52;var $__v_sroa_1_4_load5462=$51;label=13;break;}
 case 16: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre66=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$51;
 HEAP32[(($1)>>2)]=$49;
 HEAP32[(($15)>>2)]=$43;
 var $57=($_pre_i|0)==($_pre66|0);
 if($57){var $72=$_pre_i;label=22;break;}else{var $58=$_pre66;label=17;break;}
 case 17: 
 var $58;
 var $59=((($58)-(12))|0);
 var $60=(($59)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=($61|0)==0;
 if($63){label=18;break;}else{label=19;break;}
 case 18: 
 var $64=($_pre_i|0)==($59|0);
 if($64){var $72=$_pre_i;label=22;break;}else{var $58=$59;label=17;break;}
 case 19: 
 var $65=((($58)-(12)+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($61|0)==($66|0);
 if($67){label=21;break;}else{label=20;break;}
 case 20: 
 var $scevgep_i_i_i_i_i40=((($66)-(8))|0);
 var $scevgep28_i_i_i_i_i41=$scevgep_i_i_i_i_i40;
 var $68=(((-$62))|0);
 var $uglygep_i_i_i_i_i42=(($scevgep28_i_i_i_i_i41+$68)|0);
 var $uglygep29_i_i_i_i_i43=$uglygep_i_i_i_i_i42;
 var $69=$uglygep29_i_i_i_i_i43>>>3;
 var $70=$69^-1;
 var $scevgep30_i_i_i_i_i44=(($66+($70<<3))|0);
 HEAP32[(($65)>>2)]=$scevgep30_i_i_i_i_i44;
 label=21;break;
 case 21: 
 var $71=$61;
 __ZdlPv($71);
 label=18;break;
 case 22: 
 var $72;
 var $73=($72|0)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=$72;
 __ZdlPv($75);
 label=24;break;
 case 24: 
 return;
 case 25: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=($__v_sroa_1_4_load5462|0)==($49|0);
 if($78){var $93$1=$77$1;var $93$0=$77$0;label=31;break;}else{var $79=$49;label=26;break;}
 case 26: 
 var $79;
 var $80=((($79)-(12))|0);
 var $81=(($80)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82;
 var $84=($82|0)==0;
 if($84){label=27;break;}else{label=28;break;}
 case 27: 
 var $85=($__v_sroa_1_4_load5462|0)==($80|0);
 if($85){var $93$1=$77$1;var $93$0=$77$0;label=31;break;}else{var $79=$80;label=26;break;}
 case 28: 
 var $86=((($79)-(12)+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($82|0)==($87|0);
 if($88){label=30;break;}else{label=29;break;}
 case 29: 
 var $scevgep_i_i_i_i_i=((($87)-(8))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $89=(((-$83))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$89)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $90=$uglygep29_i_i_i_i_i>>>3;
 var $91=$90^-1;
 var $scevgep30_i_i_i_i_i=(($87+($91<<3))|0);
 HEAP32[(($86)>>2)]=$scevgep30_i_i_i_i_i;
 label=30;break;
 case 30: 
 var $92=$82;
 __ZdlPv($92);
 label=27;break;
 case 31: 
 var $93$0;
 var $93$1;
 var $94=($41|0)==0;
 if($94){label=33;break;}else{label=32;break;}
 case 32: 
 var $96=$41;
 __ZdlPv($96);
 label=33;break;
 case 33: 
 ___resumeException($93$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIxNS_9allocatorIxEEEC2ERKS3_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>3;
 var $12=($11|0)==0;
 if($12){label=13;break;}else{label=2;break;}
 case 2: 
 var $14=($11>>>0)>536870911;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $17=(function() { try { __THREW__ = 0; return __Znwj($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $19=$17;
 HEAP32[(($2)>>2)]=$19;
 HEAP32[(($1)>>2)]=$19;
 var $20=(($19+($11<<3))|0);
 HEAP32[(($3)>>2)]=$20;
 var $21=HEAP32[(($6)>>2)];
 var $22=HEAP32[(($4)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=13;break;}else{var $_011_i=$21;var $24=$19;label=6;break;}
 case 6: 
 var $24;
 var $_011_i;
 var $25=($24|0)==0;
 if($25){var $28=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $ld$0$0=(($_011_i)|0);
 var $27$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_011_i+4)|0);
 var $27$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($24)|0);
 HEAP32[(($st$2$0)>>2)]=$27$0;
 var $st$3$1=(($24+4)|0);
 HEAP32[(($st$3$1)>>2)]=$27$1;
 var $_pre12_i=HEAP32[(($2)>>2)];
 var $28=$_pre12_i;label=8;break;
 case 8: 
 var $28;
 var $29=(($28+8)|0);
 HEAP32[(($2)>>2)]=$29;
 var $30=(($_011_i+8)|0);
 var $31=($30|0)==($22|0);
 if($31){label=13;break;}else{var $_011_i=$30;var $24=$29;label=6;break;}
 case 9: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=HEAP32[(($1)>>2)];
 var $35=$34;
 var $36=($34|0)==0;
 if($36){label=14;break;}else{label=10;break;}
 case 10: 
 var $37=HEAP32[(($2)>>2)];
 var $38=($34|0)==($37|0);
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i=((($37)-(8))|0);
 var $scevgep28_i=$scevgep_i;
 var $39=(((-$35))|0);
 var $uglygep_i=(($scevgep28_i+$39)|0);
 var $uglygep29_i=$uglygep_i;
 var $40=$uglygep29_i>>>3;
 var $41=$40^-1;
 var $scevgep30_i=(($37+($41<<3))|0);
 HEAP32[(($2)>>2)]=$scevgep30_i;
 label=12;break;
 case 12: 
 var $42=$34;
 __ZdlPv($42);
 label=14;break;
 case 13: 
 return;
 case 14: 
 ___resumeException($33$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_INS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEE6assignIPS7_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS7_NS_15iterator_traitsISD_E9referenceEEE5valueEvE4typeESD_SD_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__first;
 var $2=$__last;
 var $3=((($2)-($1))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($this+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 var $10=$8;
 var $11=((($9)-($10))|0);
 var $12=(((($11|0))/(12))&-1);
 var $13=($4>>>0)>($12>>>0);
 if($13){label=27;break;}else{label=2;break;}
 case 2: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=((($17)-($10))|0);
 var $19=(((($18|0))/(12))&-1);
 var $20=($4>>>0)>($19>>>0);
 if($20){label=3;break;}else{var $__growing_0_off0=0;var $__mid_0=$__last;label=4;break;}
 case 3: 
 var $22=(($__first+((($19)*(12))&-1))|0);
 var $__growing_0_off0=1;var $__mid_0=$22;label=4;break;
 case 4: 
 var $__mid_0;
 var $__growing_0_off0;
 var $24=($__mid_0|0)==($__first|0);
 if($24){var $_085_lcssa=$8;label=10;break;}else{label=5;break;}
 case 5: 
 var $scevgep=((($__mid_0)-(12))|0);
 var $scevgep122=$scevgep;
 var $25=(((-$1))|0);
 var $uglygep=(($scevgep122+$25)|0);
 var $uglygep123=$uglygep;
 var $26=(((($uglygep123>>>0))/(12))&-1);
 var $27=((($26)+(1))|0);
 var $_085119=$8;var $_0120=$__first;label=6;break;
 case 6: 
 var $_0120;
 var $_085119;
 var $29=($_085119|0)==($_0120|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $31=(($_0120)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($_0120+4)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($_085119,$32,$34);
 label=8;break;
 case 8: 
 var $35=(($_0120+12)|0);
 var $36=(($_085119+12)|0);
 var $37=($35|0)==($__mid_0|0);
 if($37){label=9;break;}else{var $_085119=$36;var $_0120=$35;label=6;break;}
 case 9: 
 var $scevgep124=(($8+((($27)*(12))&-1))|0);
 var $_085_lcssa=$scevgep124;label=10;break;
 case 10: 
 var $_085_lcssa;
 if($__growing_0_off0){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=HEAP32[(($15)>>2)];
 var $39=($_085_lcssa|0)==($38|0);
 if($39){label=50;break;}else{var $50=$38;label=17;break;}
 case 12: 
 var $41=($__mid_0|0)==($__last|0);
 if($41){label=50;break;}else{label=13;break;}
 case 13: 
 var $_pre_i=HEAP32[(($15)>>2)];
 var $_011_i=$__mid_0;var $43=$_pre_i;label=14;break;
 case 14: 
 var $43;
 var $_011_i;
 var $44=($43|0)==0;
 if($44){var $46=0;label=16;break;}else{label=15;break;}
 case 15: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($43,$_011_i);
 var $_pre12_i=HEAP32[(($15)>>2)];
 var $46=$_pre12_i;label=16;break;
 case 16: 
 var $46;
 var $47=(($46+12)|0);
 HEAP32[(($15)>>2)]=$47;
 var $48=(($_011_i+12)|0);
 var $49=($48|0)==($__last|0);
 if($49){label=50;break;}else{var $_011_i=$48;var $43=$47;label=14;break;}
 case 17: 
 var $50;
 var $51=((($50)-(12))|0);
 HEAP32[(($15)>>2)]=$51;
 var $52=(($51)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){var $55=$51;label=18;break;}else{label=19;break;}
 case 18: 
 var $55;
 var $56=($_085_lcssa|0)==($55|0);
 if($56){label=50;break;}else{var $50=$55;label=17;break;}
 case 19: 
 var $57=((($50)-(12)+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($53|0)==($58|0);
 if($59){var $75=$53;label=26;break;}else{var $60=$58;label=20;break;}
 case 20: 
 var $60;
 var $61=((($60)-(12))|0);
 HEAP32[(($57)>>2)]=$61;
 var $62=(($61)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$63;
 var $65=($63|0)==0;
 if($65){var $66=$61;label=21;break;}else{label=22;break;}
 case 21: 
 var $66;
 var $67=($53|0)==($66|0);
 if($67){label=25;break;}else{var $60=$66;label=20;break;}
 case 22: 
 var $68=((($60)-(12)+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($63|0)==($69|0);
 if($70){label=24;break;}else{label=23;break;}
 case 23: 
 var $scevgep_i_i_i_i_i_i=((($69)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $71=(((-$64))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$71)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $72=$uglygep29_i_i_i_i_i_i>>>4;
 var $73=$72^-1;
 var $scevgep30_i_i_i_i_i_i=(($69+($73<<4))|0);
 HEAP32[(($68)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=24;break;
 case 24: 
 var $74=$63;
 __ZdlPv($74);
 var $_pre29_i_i_i=HEAP32[(($57)>>2)];
 var $66=$_pre29_i_i_i;label=21;break;
 case 25: 
 var $_pre_i_i_i=HEAP32[(($52)>>2)];
 var $75=$_pre_i_i_i;label=26;break;
 case 26: 
 var $75;
 var $76=$75;
 __ZdlPv($76);
 var $_pre127=HEAP32[(($15)>>2)];
 var $55=$_pre127;label=18;break;
 case 27: 
 var $78=($8|0)==0;
 if($78){var $111=$6;label=41;break;}else{label=28;break;}
 case 28: 
 var $79=(($this+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($8|0)==($80|0);
 if($81){var $109=$8;label=40;break;}else{var $82=$80;label=29;break;}
 case 29: 
 var $82;
 var $83=((($82)-(12))|0);
 HEAP32[(($79)>>2)]=$83;
 var $84=(($83)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==0;
 if($86){var $107=$83;label=38;break;}else{label=30;break;}
 case 30: 
 var $87=((($82)-(12)+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($85|0)==($88|0);
 if($89){var $105=$85;label=37;break;}else{var $90=$88;label=31;break;}
 case 31: 
 var $90;
 var $91=((($90)-(12))|0);
 HEAP32[(($87)>>2)]=$91;
 var $92=(($91)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$93;
 var $95=($93|0)==0;
 if($95){var $96=$91;label=32;break;}else{label=33;break;}
 case 32: 
 var $96;
 var $97=($85|0)==($96|0);
 if($97){label=36;break;}else{var $90=$96;label=31;break;}
 case 33: 
 var $98=((($90)-(12)+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($93|0)==($99|0);
 if($100){label=35;break;}else{label=34;break;}
 case 34: 
 var $scevgep_i_i_i_i_i_i98=((($99)-(16))|0);
 var $scevgep28_i_i_i_i_i_i99=$scevgep_i_i_i_i_i_i98;
 var $101=(((-$94))|0);
 var $uglygep_i_i_i_i_i_i100=(($scevgep28_i_i_i_i_i_i99+$101)|0);
 var $uglygep29_i_i_i_i_i_i101=$uglygep_i_i_i_i_i_i100;
 var $102=$uglygep29_i_i_i_i_i_i101>>>4;
 var $103=$102^-1;
 var $scevgep30_i_i_i_i_i_i102=(($99+($103<<4))|0);
 HEAP32[(($98)>>2)]=$scevgep30_i_i_i_i_i_i102;
 label=35;break;
 case 35: 
 var $104=$93;
 __ZdlPv($104);
 var $_pre29_i_i_i104=HEAP32[(($87)>>2)];
 var $96=$_pre29_i_i_i104;label=32;break;
 case 36: 
 var $_pre_i_i_i106=HEAP32[(($84)>>2)];
 var $105=$_pre_i_i_i106;label=37;break;
 case 37: 
 var $105;
 var $106=$105;
 __ZdlPv($106);
 var $_pre126=HEAP32[(($79)>>2)];
 var $107=$_pre126;label=38;break;
 case 38: 
 var $107;
 var $108=($8|0)==($107|0);
 if($108){label=39;break;}else{var $82=$107;label=29;break;}
 case 39: 
 var $_pre_i93=HEAP32[(($7)>>2)];
 var $109=$_pre_i93;label=40;break;
 case 40: 
 var $109;
 var $110=$109;
 __ZdlPv($110);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($79)>>2)]=0;
 HEAP32[(($7)>>2)]=0;
 var $111=0;label=41;break;
 case 41: 
 var $111;
 var $112=($4>>>0)>357913941;
 if($112){label=42;break;}else{var $117=$111;var $116=0;label=43;break;}
 case 42: 
 var $114=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($114);
 var $_pre=HEAP32[(($5)>>2)];
 var $_pre125=HEAP32[(($7)>>2)];
 var $phitmp=$_pre125;
 var $117=$_pre;var $116=$phitmp;label=43;break;
 case 43: 
 var $116;
 var $117;
 var $118=$117;
 var $119=((($118)-($116))|0);
 var $120=(((($119|0))/(12))&-1);
 var $121=($120>>>0)>178956969;
 if($121){var $_086116=357913941;label=46;break;}else{label=44;break;}
 case 44: 
 var $122=$120<<1;
 var $123=($122>>>0)<($4>>>0);
 var $_sroa_speculated=$123?$4:$122;
 var $124=($_sroa_speculated>>>0)>357913941;
 if($124){label=45;break;}else{var $_086116=$_sroa_speculated;label=46;break;}
 case 45: 
 var $126=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($126);
 var $_086116=$_sroa_speculated;label=46;break;
 case 46: 
 var $_086116;
 var $127=((($_086116)*(12))&-1);
 var $128=__Znwj($127);
 var $129=$128;
 var $130=(($this+4)|0);
 HEAP32[(($130)>>2)]=$129;
 HEAP32[(($7)>>2)]=$129;
 var $131=(($129+((($_086116)*(12))&-1))|0);
 HEAP32[(($5)>>2)]=$131;
 var $132=($__first|0)==($__last|0);
 if($132){label=50;break;}else{var $_011_i112=$__first;var $133=$129;label=47;break;}
 case 47: 
 var $133;
 var $_011_i112;
 var $134=($133|0)==0;
 if($134){var $136=0;label=49;break;}else{label=48;break;}
 case 48: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($133,$_011_i112);
 var $_pre12_i113=HEAP32[(($130)>>2)];
 var $136=$_pre12_i113;label=49;break;
 case 49: 
 var $136;
 var $137=(($136+12)|0);
 HEAP32[(($130)>>2)]=$137;
 var $138=(($_011_i112+12)|0);
 var $139=($138|0)==($__last|0);
 if($139){label=50;break;}else{var $_011_i112=$138;var $133=$137;label=47;break;}
 case 50: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__first;
 var $2=$__last;
 var $3=((($2)-($1))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($this+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 var $10=$8;
 var $11=((($9)-($10))|0);
 var $12=(((($11|0))/(12))&-1);
 var $13=($4>>>0)>($12>>>0);
 if($13){label=35;break;}else{label=2;break;}
 case 2: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=((($17)-($10))|0);
 var $19=(((($18|0))/(12))&-1);
 var $20=($4>>>0)>($19>>>0);
 if($20){label=3;break;}else{var $__growing_0_off0=0;var $__mid_0=$__last;label=4;break;}
 case 3: 
 var $22=(($__first+((($19)*(12))&-1))|0);
 var $__growing_0_off0=1;var $__mid_0=$22;label=4;break;
 case 4: 
 var $__mid_0;
 var $__growing_0_off0;
 var $24=($__mid_0|0)==($__first|0);
 if($24){var $_085_lcssa=$8;label=10;break;}else{label=5;break;}
 case 5: 
 var $scevgep=((($__mid_0)-(12))|0);
 var $scevgep137=$scevgep;
 var $25=(((-$1))|0);
 var $uglygep=(($scevgep137+$25)|0);
 var $uglygep138=$uglygep;
 var $26=(((($uglygep138>>>0))/(12))&-1);
 var $27=((($26)+(1))|0);
 var $_085130=$8;var $_0131=$__first;label=6;break;
 case 6: 
 var $_0131;
 var $_085130;
 var $29=($_085130|0)==($_0131|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $31=(($_0131)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($_0131+4)|0);
 var $34=HEAP32[(($33)>>2)];
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_085130,$32,$34);
 label=8;break;
 case 8: 
 var $35=(($_0131+12)|0);
 var $36=(($_085130+12)|0);
 var $37=($35|0)==($__mid_0|0);
 if($37){label=9;break;}else{var $_085130=$36;var $_0131=$35;label=6;break;}
 case 9: 
 var $scevgep139=(($8+((($27)*(12))&-1))|0);
 var $_085_lcssa=$scevgep139;label=10;break;
 case 10: 
 var $_085_lcssa;
 if($__growing_0_off0){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=HEAP32[(($15)>>2)];
 var $39=($_085_lcssa|0)==($38|0);
 if($39){label=66;break;}else{var $93=$38;label=30;break;}
 case 12: 
 var $41=($__mid_0|0)==($__last|0);
 if($41){label=66;break;}else{label=13;break;}
 case 13: 
 var $_pre_i=HEAP32[(($15)>>2)];
 var $_011_i=$__mid_0;var $43=$_pre_i;label=14;break;
 case 14: 
 var $43;
 var $_011_i;
 var $44=($43|0)==0;
 if($44){var $89=0;label=29;break;}else{label=15;break;}
 case 15: 
 var $46=(($43)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($43+4)|0);
 HEAP32[(($47)>>2)]=0;
 var $48=(($43+8)|0);
 HEAP32[(($48)>>2)]=0;
 var $49=(($_011_i+4)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_011_i)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$50;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>4;
 var $57=($56|0)==0;
 if($57){label=28;break;}else{label=16;break;}
 case 16: 
 var $59=($56>>>0)>268435455;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=$43;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=23;break; }
 case 18: 
 var $62=(function() { try { __THREW__ = 0; return __Znwj($55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=23;break; }
 case 19: 
 var $64=$62;
 HEAP32[(($47)>>2)]=$64;
 HEAP32[(($46)>>2)]=$64;
 var $65=(($64+($56<<4))|0);
 HEAP32[(($48)>>2)]=$65;
 var $66=HEAP32[(($51)>>2)];
 var $67=HEAP32[(($49)>>2)];
 var $68=($66|0)==($67|0);
 if($68){label=28;break;}else{var $_011_i_i_i=$66;var $69=$64;label=20;break;}
 case 20: 
 var $69;
 var $_011_i_i_i;
 var $70=($69|0)==0;
 if($70){var $74=0;label=22;break;}else{label=21;break;}
 case 21: 
 var $72=$69;
 var $73=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];HEAP32[((($72)+(12))>>2)]=HEAP32[((($73)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($47)>>2)];
 var $74=$_pre12_i_i_i;label=22;break;
 case 22: 
 var $74;
 var $75=(($74+16)|0);
 HEAP32[(($47)>>2)]=$75;
 var $76=(($_011_i_i_i+16)|0);
 var $77=($76|0)==($67|0);
 if($77){label=28;break;}else{var $_011_i_i_i=$76;var $69=$75;label=20;break;}
 case 23: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=HEAP32[(($46)>>2)];
 var $81=$80;
 var $82=($80|0)==0;
 if($82){label=27;break;}else{label=24;break;}
 case 24: 
 var $83=HEAP32[(($47)>>2)];
 var $84=($80|0)==($83|0);
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $scevgep_i_i_i=((($83)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $85=(((-$81))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$85)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $86=$uglygep29_i_i_i>>>4;
 var $87=$86^-1;
 var $scevgep30_i_i_i=(($83+($87<<4))|0);
 HEAP32[(($47)>>2)]=$scevgep30_i_i_i;
 label=26;break;
 case 26: 
 var $88=$80;
 __ZdlPv($88);
 label=27;break;
 case 27: 
 ___resumeException($79$0)
 case 28: 
 var $_pre12_i=HEAP32[(($15)>>2)];
 var $89=$_pre12_i;label=29;break;
 case 29: 
 var $89;
 var $90=(($89+12)|0);
 HEAP32[(($15)>>2)]=$90;
 var $91=(($_011_i+12)|0);
 var $92=($91|0)==($__last|0);
 if($92){label=66;break;}else{var $_011_i=$91;var $43=$90;label=14;break;}
 case 30: 
 var $93;
 var $94=((($93)-(12))|0);
 HEAP32[(($15)>>2)]=$94;
 var $95=(($94)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$96;
 var $98=($96|0)==0;
 if($98){var $99=$94;label=31;break;}else{label=32;break;}
 case 31: 
 var $99;
 var $100=($_085_lcssa|0)==($99|0);
 if($100){label=66;break;}else{var $93=$99;label=30;break;}
 case 32: 
 var $101=((($93)-(12)+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($96|0)==($102|0);
 if($103){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i94=((($102)-(16))|0);
 var $scevgep28_i_i_i95=$scevgep_i_i_i94;
 var $104=(((-$97))|0);
 var $uglygep_i_i_i96=(($scevgep28_i_i_i95+$104)|0);
 var $uglygep29_i_i_i97=$uglygep_i_i_i96;
 var $105=$uglygep29_i_i_i97>>>4;
 var $106=$105^-1;
 var $scevgep30_i_i_i98=(($102+($106<<4))|0);
 HEAP32[(($101)>>2)]=$scevgep30_i_i_i98;
 label=34;break;
 case 34: 
 var $107=$96;
 __ZdlPv($107);
 var $_pre141=HEAP32[(($15)>>2)];
 var $99=$_pre141;label=31;break;
 case 35: 
 var $109=($8|0)==0;
 if($109){var $130=$6;label=44;break;}else{label=36;break;}
 case 36: 
 var $110=(($this+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($8|0)==($111|0);
 if($112){var $128=$8;label=43;break;}else{var $113=$111;label=37;break;}
 case 37: 
 var $113;
 var $114=((($113)-(12))|0);
 HEAP32[(($110)>>2)]=$114;
 var $115=(($114)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=$116;
 var $118=($116|0)==0;
 if($118){var $119=$114;label=38;break;}else{label=39;break;}
 case 38: 
 var $119;
 var $120=($8|0)==($119|0);
 if($120){label=42;break;}else{var $113=$119;label=37;break;}
 case 39: 
 var $121=((($113)-(12)+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($116|0)==($122|0);
 if($123){label=41;break;}else{label=40;break;}
 case 40: 
 var $scevgep_i_i_i_i=((($122)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $124=(((-$117))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$124)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $125=$uglygep29_i_i_i_i>>>4;
 var $126=$125^-1;
 var $scevgep30_i_i_i_i=(($122+($126<<4))|0);
 HEAP32[(($121)>>2)]=$scevgep30_i_i_i_i;
 label=41;break;
 case 41: 
 var $127=$116;
 __ZdlPv($127);
 var $_pre40_i=HEAP32[(($110)>>2)];
 var $119=$_pre40_i;label=38;break;
 case 42: 
 var $_pre_i102=HEAP32[(($7)>>2)];
 var $128=$_pre_i102;label=43;break;
 case 43: 
 var $128;
 var $129=$128;
 __ZdlPv($129);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($110)>>2)]=0;
 HEAP32[(($7)>>2)]=0;
 var $130=0;label=44;break;
 case 44: 
 var $130;
 var $131=($4>>>0)>357913941;
 if($131){label=45;break;}else{var $136=$130;var $135=0;label=46;break;}
 case 45: 
 var $133=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($133);
 var $_pre=HEAP32[(($5)>>2)];
 var $_pre140=HEAP32[(($7)>>2)];
 var $phitmp=$_pre140;
 var $136=$_pre;var $135=$phitmp;label=46;break;
 case 46: 
 var $135;
 var $136;
 var $137=$136;
 var $138=((($137)-($135))|0);
 var $139=(((($138|0))/(12))&-1);
 var $140=($139>>>0)>178956969;
 if($140){var $_086124=357913941;label=49;break;}else{label=47;break;}
 case 47: 
 var $141=$139<<1;
 var $142=($141>>>0)<($4>>>0);
 var $_sroa_speculated=$142?$4:$141;
 var $143=($_sroa_speculated>>>0)>357913941;
 if($143){label=48;break;}else{var $_086124=$_sroa_speculated;label=49;break;}
 case 48: 
 var $145=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($145);
 var $_086124=$_sroa_speculated;label=49;break;
 case 49: 
 var $_086124;
 var $146=((($_086124)*(12))&-1);
 var $147=__Znwj($146);
 var $148=$147;
 var $149=(($this+4)|0);
 HEAP32[(($149)>>2)]=$148;
 HEAP32[(($7)>>2)]=$148;
 var $150=(($148+((($_086124)*(12))&-1))|0);
 HEAP32[(($5)>>2)]=$150;
 var $151=($__first|0)==($__last|0);
 if($151){label=66;break;}else{var $_011_i105=$__first;var $152=$148;label=50;break;}
 case 50: 
 var $152;
 var $_011_i105;
 var $153=($152|0)==0;
 if($153){var $198=0;label=65;break;}else{label=51;break;}
 case 51: 
 var $155=(($152)|0);
 HEAP32[(($155)>>2)]=0;
 var $156=(($152+4)|0);
 HEAP32[(($156)>>2)]=0;
 var $157=(($152+8)|0);
 HEAP32[(($157)>>2)]=0;
 var $158=(($_011_i105+4)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($_011_i105)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$159;
 var $163=$161;
 var $164=((($162)-($163))|0);
 var $165=$164>>4;
 var $166=($165|0)==0;
 if($166){label=64;break;}else{label=52;break;}
 case 52: 
 var $168=($165>>>0)>268435455;
 if($168){label=53;break;}else{label=54;break;}
 case 53: 
 var $170=$152;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=59;break; }
 case 54: 
 var $171=(function() { try { __THREW__ = 0; return __Znwj($164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=59;break; }
 case 55: 
 var $173=$171;
 HEAP32[(($156)>>2)]=$173;
 HEAP32[(($155)>>2)]=$173;
 var $174=(($173+($165<<4))|0);
 HEAP32[(($157)>>2)]=$174;
 var $175=HEAP32[(($160)>>2)];
 var $176=HEAP32[(($158)>>2)];
 var $177=($175|0)==($176|0);
 if($177){label=64;break;}else{var $_011_i_i_i110=$175;var $178=$173;label=56;break;}
 case 56: 
 var $178;
 var $_011_i_i_i110;
 var $179=($178|0)==0;
 if($179){var $183=0;label=58;break;}else{label=57;break;}
 case 57: 
 var $181=$178;
 var $182=$_011_i_i_i110;
 assert(16 % 1 === 0);HEAP32[(($181)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($181)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($181)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];HEAP32[((($181)+(12))>>2)]=HEAP32[((($182)+(12))>>2)];
 var $_pre12_i_i_i112=HEAP32[(($156)>>2)];
 var $183=$_pre12_i_i_i112;label=58;break;
 case 58: 
 var $183;
 var $184=(($183+16)|0);
 HEAP32[(($156)>>2)]=$184;
 var $185=(($_011_i_i_i110+16)|0);
 var $186=($185|0)==($176|0);
 if($186){label=64;break;}else{var $_011_i_i_i110=$185;var $178=$184;label=56;break;}
 case 59: 
 var $188$0 = ___cxa_find_matching_catch(-1, -1); var $188$1 = tempRet0;
 var $189=HEAP32[(($155)>>2)];
 var $190=$189;
 var $191=($189|0)==0;
 if($191){label=63;break;}else{label=60;break;}
 case 60: 
 var $192=HEAP32[(($156)>>2)];
 var $193=($189|0)==($192|0);
 if($193){label=62;break;}else{label=61;break;}
 case 61: 
 var $scevgep_i_i_i115=((($192)-(16))|0);
 var $scevgep28_i_i_i116=$scevgep_i_i_i115;
 var $194=(((-$190))|0);
 var $uglygep_i_i_i117=(($scevgep28_i_i_i116+$194)|0);
 var $uglygep29_i_i_i118=$uglygep_i_i_i117;
 var $195=$uglygep29_i_i_i118>>>4;
 var $196=$195^-1;
 var $scevgep30_i_i_i119=(($192+($196<<4))|0);
 HEAP32[(($156)>>2)]=$scevgep30_i_i_i119;
 label=62;break;
 case 62: 
 var $197=$189;
 __ZdlPv($197);
 label=63;break;
 case 63: 
 ___resumeException($188$0)
 case 64: 
 var $_pre12_i106=HEAP32[(($149)>>2)];
 var $198=$_pre12_i106;label=65;break;
 case 65: 
 var $198;
 var $199=(($198+12)|0);
 HEAP32[(($149)>>2)]=$199;
 var $200=(($_011_i105+12)|0);
 var $201=($200|0)==($__last|0);
 if($201){label=66;break;}else{var $_011_i105=$200;var $152=$199;label=50;break;}
 case 66: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__last;
 var $2=$__first;
 var $3=((($1)-($2))|0);
 var $4=$3>>4;
 var $5=(($this+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 var $10=$8;
 var $11=((($9)-($10))|0);
 var $12=$11>>4;
 var $13=($4>>>0)>($12>>>0);
 if($13){label=10;break;}else{label=2;break;}
 case 2: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=((($17)-($10))|0);
 var $19=$18>>4;
 var $20=($4>>>0)>($19>>>0);
 if($20){label=5;break;}else{label=3;break;}
 case 3: 
 var $21=$__last;
 var $22=((($21)-($2))|0);
 var $23=$22>>4;
 var $24=$8;
 var $25=$__first;
 _memmove($24,$25,$22,8,0);
 var $26=(($8+($23<<4))|0);
 var $27=HEAP32[(($15)>>2)];
 var $28=($26|0)==($27|0);
 if($28){label=23;break;}else{label=4;break;}
 case 4: 
 var $scevgep=((($27)-(16))|0);
 var $scevgep90=$scevgep;
 var $scevgep9192=$26;
 var $29=(((-$scevgep9192))|0);
 var $uglygep=(($scevgep90+$29)|0);
 var $uglygep93=$uglygep;
 var $30=$uglygep93>>>4;
 var $31=$30^-1;
 var $scevgep94=(($27+($31<<4))|0);
 HEAP32[(($15)>>2)]=$scevgep94;
 label=23;break;
 case 5: 
 var $33=(($__first+($19<<4))|0);
 var $34=$8;
 var $35=$__first;
 _memmove($34,$35,$18,8,0);
 var $36=($33|0)==($__last|0);
 if($36){label=23;break;}else{label=6;break;}
 case 6: 
 var $_pre_i=HEAP32[(($15)>>2)];
 var $_011_i=$33;var $38=$_pre_i;label=7;break;
 case 7: 
 var $38;
 var $_011_i;
 var $39=($38|0)==0;
 if($39){var $43=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $41=$38;
 var $42=$_011_i;
 assert(16 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];HEAP32[((($41)+(12))>>2)]=HEAP32[((($42)+(12))>>2)];
 var $_pre12_i=HEAP32[(($15)>>2)];
 var $43=$_pre12_i;label=9;break;
 case 9: 
 var $43;
 var $44=(($43+16)|0);
 HEAP32[(($15)>>2)]=$44;
 var $45=(($_011_i+16)|0);
 var $46=($45|0)==($__last|0);
 if($46){label=23;break;}else{var $_011_i=$45;var $38=$44;label=7;break;}
 case 10: 
 var $48=($8|0)==0;
 if($48){var $56=$6;label=14;break;}else{label=11;break;}
 case 11: 
 var $49=(($this+4)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($8|0)==($50|0);
 if($51){label=13;break;}else{label=12;break;}
 case 12: 
 var $scevgep_i=((($50)-(16))|0);
 var $scevgep40_i=$scevgep_i;
 var $52=(((-$10))|0);
 var $uglygep_i=(($scevgep40_i+$52)|0);
 var $uglygep41_i=$uglygep_i;
 var $53=$uglygep41_i>>>4;
 var $54=$53^-1;
 var $scevgep42_i=(($50+($54<<4))|0);
 HEAP32[(($49)>>2)]=$scevgep42_i;
 label=13;break;
 case 13: 
 var $55=$8;
 __ZdlPv($55);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($49)>>2)]=0;
 HEAP32[(($7)>>2)]=0;
 var $56=0;label=14;break;
 case 14: 
 var $56;
 var $57=($4>>>0)>268435455;
 if($57){label=15;break;}else{var $62=$56;var $61=0;label=16;break;}
 case 15: 
 var $59=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 var $_pre=HEAP32[(($5)>>2)];
 var $_pre95=HEAP32[(($7)>>2)];
 var $phitmp=$_pre95;
 var $62=$_pre;var $61=$phitmp;label=16;break;
 case 16: 
 var $61;
 var $62;
 var $63=$62;
 var $64=((($63)-($61))|0);
 var $65=$64>>4;
 var $66=($65>>>0)>134217726;
 if($66){var $_087=268435455;label=19;break;}else{label=17;break;}
 case 17: 
 var $67=$64>>3;
 var $68=($67>>>0)<($4>>>0);
 var $_sroa_speculated=$68?$4:$67;
 var $69=($_sroa_speculated>>>0)>268435455;
 if($69){label=18;break;}else{var $_087=$_sroa_speculated;label=19;break;}
 case 18: 
 var $71=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($71);
 var $_087=$_sroa_speculated;label=19;break;
 case 19: 
 var $_087;
 var $72=$_087<<4;
 var $73=__Znwj($72);
 var $74=$73;
 var $75=(($this+4)|0);
 HEAP32[(($75)>>2)]=$74;
 HEAP32[(($7)>>2)]=$74;
 var $76=(($74+($_087<<4))|0);
 HEAP32[(($5)>>2)]=$76;
 var $77=($__first|0)==($__last|0);
 if($77){label=23;break;}else{var $_011_i82=$__first;var $78=$74;label=20;break;}
 case 20: 
 var $78;
 var $_011_i82;
 var $79=($78|0)==0;
 if($79){var $83=0;label=22;break;}else{label=21;break;}
 case 21: 
 var $81=$78;
 var $82=$_011_i82;
 assert(16 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];HEAP32[((($81)+(12))>>2)]=HEAP32[((($82)+(12))>>2)];
 var $_pre12_i83=HEAP32[(($75)>>2)];
 var $83=$_pre12_i83;label=22;break;
 case 22: 
 var $83;
 var $84=(($83+16)|0);
 HEAP32[(($75)>>2)]=$84;
 var $85=(($_011_i82+16)|0);
 var $86=($85|0)==($__last|0);
 if($86){label=23;break;}else{var $_011_i82=$85;var $78=$84;label=20;break;}
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_INS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEE21__push_back_slow_pathIKS7_EEvRT_($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v=sp;
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=(((($9|0))/(12))&-1);
 var $11=((($10)+(1))|0);
 var $12=($11>>>0)>357913941;
 if($12){label=2;break;}else{var $16=$6;label=3;break;}
 case 2: 
 var $14=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 var $_pre=HEAP32[(($5)>>2)];
 var $16=$_pre;label=3;break;
 case 3: 
 var $16;
 var $17=(($1)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18;
 var $20=$16;
 var $21=((($19)-($20))|0);
 var $22=(((($21|0))/(12))&-1);
 var $23=($22>>>0)>178956969;
 if($23){var $_0=357913941;label=5;break;}else{label=4;break;}
 case 4: 
 var $24=$22<<1;
 var $25=($24>>>0)<($11>>>0);
 var $_sroa_speculated=$25?$11:$24;
 var $_0=$_sroa_speculated;label=5;break;
 case 5: 
 var $_0;
 var $26=HEAP32[(($3)>>2)];
 var $27=$26;
 var $28=((($27)-($20))|0);
 var $29=(((($28|0))/(12))&-1);
 var $30=(($__v+12)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=(($__v+16)|0);
 HEAP32[(($31)>>2)]=$2;
 var $32=($_0|0)==0;
 if($32){var $37=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $34=((($_0)*(12))&-1);
 var $35=__Znwj($34);
 var $36=$35;
 var $37=$36;label=7;break;
 case 7: 
 var $37;
 var $38=(($__v)|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($37+((($29)*(12))&-1))|0);
 var $40=(($__v+8)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=(($__v+4)|0);
 HEAP32[(($41)>>2)]=$39;
 var $42=(($37+((($_0)*(12))&-1))|0);
 HEAP32[(($30)>>2)]=$42;
 var $43=($39|0)==0;
 if($43){var $46=$16;var $45=$26;label=10;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($39,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=18;break; }
 case 9: 
 var $_pre40=HEAP32[(($5)>>2)];
 var $_pre41=HEAP32[(($3)>>2)];
 var $46=$_pre40;var $45=$_pre41;label=10;break;
 case 10: 
 var $45;
 var $46;
 var $_sum=((($29)+(1))|0);
 var $47=(($37+((($_sum)*(12))&-1))|0);
 HEAP32[(($40)>>2)]=$47;
 var $48=($45|0)==($46|0);
 if($48){var $61=$45;var $60=$39;var $59=$45;var $58=$47;var $57=$42;label=16;break;}else{var $_049_i=$45;var $49=$39;label=11;break;}
 case 11: 
 var $49;
 var $_049_i;
 var $50=((($49)-(12))|0);
 var $51=((($_049_i)-(12))|0);
 var $52=($50|0)==0;
 if($52){var $54=$49;label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($50,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 var $_pre51_i=HEAP32[(($41)>>2)];
 var $54=$_pre51_i;label=14;break;
 case 14: 
 var $54;
 var $55=((($54)-(12))|0);
 HEAP32[(($41)>>2)]=$55;
 var $56=($51|0)==($46|0);
 if($56){label=15;break;}else{var $_049_i=$51;var $49=$55;label=11;break;}
 case 15: 
 var $_pre_i=HEAP32[(($5)>>2)];
 var $_pre37=HEAP32[(($3)>>2)];
 var $_pre38=HEAP32[(($40)>>2)];
 var $_pre39=HEAP32[(($30)>>2)];
 var $61=$_pre_i;var $60=$55;var $59=$_pre37;var $58=$_pre38;var $57=$_pre39;label=16;break;
 case 16: 
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 HEAP32[(($5)>>2)]=$60;
 HEAP32[(($41)>>2)]=$61;
 HEAP32[(($3)>>2)]=$58;
 HEAP32[(($40)>>2)]=$59;
 var $62=(($this+8)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($62)>>2)]=$57;
 HEAP32[(($30)>>2)]=$63;
 HEAP32[(($38)>>2)]=$61;
 __ZNSt3__114__split_bufferINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEERNS4_IS8_EEED1Ev($__v);
 STACKTOP=sp;return;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__114__split_bufferINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEERNS4_IS8_EEED1Ev($__v);
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEERNS4_IS8_EEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=12;break;}else{var $6=$4;label=2;break;}
 case 2: 
 var $6;
 var $7=((($6)-(12))|0);
 HEAP32[(($3)>>2)]=$7;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){var $31=$7;label=11;break;}else{label=3;break;}
 case 3: 
 var $11=((($6)-(12)+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)==($12|0);
 if($13){var $29=$9;label=10;break;}else{var $14=$12;label=4;break;}
 case 4: 
 var $14;
 var $15=((($14)-(12))|0);
 HEAP32[(($11)>>2)]=$15;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17;
 var $19=($17|0)==0;
 if($19){var $20=$15;label=5;break;}else{label=6;break;}
 case 5: 
 var $20;
 var $21=($9|0)==($20|0);
 if($21){label=9;break;}else{var $14=$20;label=4;break;}
 case 6: 
 var $22=((($14)-(12)+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($17|0)==($23|0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i_i_i_i_i=((($23)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $25=(((-$18))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$25)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $26=$uglygep29_i_i_i_i_i_i>>>4;
 var $27=$26^-1;
 var $scevgep30_i_i_i_i_i_i=(($23+($27<<4))|0);
 HEAP32[(($22)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=8;break;
 case 8: 
 var $28=$17;
 __ZdlPv($28);
 var $_pre29_i_i_i=HEAP32[(($11)>>2)];
 var $20=$_pre29_i_i_i;label=5;break;
 case 9: 
 var $_pre_i_i_i=HEAP32[(($8)>>2)];
 var $29=$_pre_i_i_i;label=10;break;
 case 10: 
 var $29;
 var $30=$29;
 __ZdlPv($30);
 var $_pre=HEAP32[(($3)>>2)];
 var $31=$_pre;label=11;break;
 case 11: 
 var $31;
 var $32=($2|0)==($31|0);
 if($32){label=12;break;}else{var $6=$31;label=2;break;}
 case 12: 
 var $33=(($this)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $37=$34;
 __ZdlPv($37);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI10SliceLayerNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>357913941;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(12))&-1);
 var $21=($20>>>0)>178956969;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(12))&-1);
 var $_064=357913941;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(12))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_065=0;var $40=$28;var $39=$31;label=7;break;}else{var $_064=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_064;
 var $36=((($_064)*(12))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_065=$_064;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_065;
 var $41;
 var $42=(($41+((($39)*(12))&-1))|0);
 var $43=(($41+((($_065)*(12))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $50=$14;var $49=$40;label=11;break;}else{label=8;break;}
 case 8: 
 var $46=(($42)|0);
 var $47=(($__x)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEEC2ERKS4_($46,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre62=HEAP32[(($3)>>2)];
 var $_pre63=HEAP32[(($1)>>2)];
 var $50=$_pre62;var $49=$_pre63;label=11;break;
 case 10: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1); var $48$1 = tempRet0;
 var $101$1=$48$1;var $101$0=$48$0;label=35;break;
 case 11: 
 var $49;
 var $50;
 var $_sum=((($39)+(1))|0);
 var $51=(($41+((($_sum)*(12))&-1))|0);
 var $52=($49|0)==($50|0);
 if($52){label=12;break;}else{var $_049_i=$49;var $__v_sroa_1_4_load4957=$42;label=13;break;}
 case 12: 
 HEAP32[(($3)>>2)]=$42;
 HEAP32[(($1)>>2)]=$51;
 HEAP32[(($15)>>2)]=$43;
 var $78=$49;label=24;break;
 case 13: 
 var $__v_sroa_1_4_load4957;
 var $_049_i;
 var $53=((($__v_sroa_1_4_load4957)-(12))|0);
 var $54=((($_049_i)-(12))|0);
 var $55=($53|0)==0;
 if($55){label=15;break;}else{label=14;break;}
 case 14: 
 var $57=(($53)|0);
 var $58=(($54)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEEC2ERKS4_($57,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=27;break; }
 case 15: 
 var $59=($54|0)==($50|0);
 if($59){label=16;break;}else{var $_049_i=$54;var $__v_sroa_1_4_load4957=$53;label=13;break;}
 case 16: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre61=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$53;
 HEAP32[(($1)>>2)]=$51;
 HEAP32[(($15)>>2)]=$43;
 var $61=($_pre_i|0)==($_pre61|0);
 if($61){var $78=$_pre_i;label=24;break;}else{var $62=$_pre61;label=17;break;}
 case 17: 
 var $62;
 var $63=((($62)-(12))|0);
 var $64=(($63)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==0;
 if($66){label=18;break;}else{label=19;break;}
 case 18: 
 var $67=($_pre_i|0)==($63|0);
 if($67){var $78=$_pre_i;label=24;break;}else{var $62=$63;label=17;break;}
 case 19: 
 var $68=((($62)-(12)+4)|0);
 label=20;break;
 case 20: 
 var $69=HEAP32[(($68)>>2)];
 var $70=($65|0)==($69|0);
 if($70){label=23;break;}else{label=21;break;}
 case 21: 
 var $72=((($69)-(96))|0);
 HEAP32[(($68)>>2)]=$72;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 22: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $75=$74$0;
 ___cxa_call_unexpected($75);
 throw "Reached an unreachable!";
 case 23: 
 var $76=HEAP32[(($64)>>2)];
 var $77=$76;
 __ZdlPv($77);
 label=18;break;
 case 24: 
 var $78;
 var $79=($78|0)==0;
 if($79){label=26;break;}else{label=25;break;}
 case 25: 
 var $81=$78;
 __ZdlPv($81);
 label=26;break;
 case 26: 
 return;
 case 27: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 var $84=($__v_sroa_1_4_load4957|0)==($51|0);
 if($84){var $101$1=$83$1;var $101$0=$83$0;label=35;break;}else{var $85=$51;label=28;break;}
 case 28: 
 var $85;
 var $86=((($85)-(12))|0);
 var $87=(($86)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==0;
 if($89){label=29;break;}else{label=30;break;}
 case 29: 
 var $90=($__v_sroa_1_4_load4957|0)==($86|0);
 if($90){var $101$1=$83$1;var $101$0=$83$0;label=35;break;}else{var $85=$86;label=28;break;}
 case 30: 
 var $91=((($85)-(12)+4)|0);
 label=31;break;
 case 31: 
 var $92=HEAP32[(($91)>>2)];
 var $93=($88|0)==($92|0);
 if($93){label=34;break;}else{label=32;break;}
 case 32: 
 var $95=((($92)-(96))|0);
 HEAP32[(($91)>>2)]=$95;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($95) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=33;break; }
 case 33: 
 var $97$0 = ___cxa_find_matching_catch(-1, -1); var $97$1 = tempRet0;
 var $98=$97$0;
 ___cxa_call_unexpected($98);
 throw "Reached an unreachable!";
 case 34: 
 var $99=HEAP32[(($87)>>2)];
 var $100=$99;
 __ZdlPv($100);
 label=29;break;
 case 35: 
 var $101$0;
 var $101$1;
 var $102=($41|0)==0;
 if($102){label=37;break;}else{label=36;break;}
 case 36: 
 var $104=$41;
 __ZdlPv($104);
 label=37;break;
 case 37: 
 ___resumeException($101$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI14SliceLayerPartNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(96))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>44739242;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(96))&-1);
 var $21=($20>>>0)>22369620;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(96))&-1);
 var $_059=44739242;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(96))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_060=0;var $40=$28;var $39=$31;label=7;break;}else{var $_059=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_059;
 var $36=((($_059)*(96))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_060=$_059;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_060;
 var $41;
 var $42=(($41+((($39)*(96))&-1))|0);
 var $43=(($41+((($_060)*(96))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $47=$14;var $46=$40;label=10;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartC2ERKS_($42,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $_pre57=HEAP32[(($3)>>2)];
 var $_pre58=HEAP32[(($1)>>2)];
 var $47=$_pre57;var $46=$_pre58;label=10;break;
 case 10: 
 var $46;
 var $47;
 var $_sum=((($39)+(1))|0);
 var $48=(($41+((($_sum)*(96))&-1))|0);
 var $49=($46|0)==($47|0);
 if($49){var $58=$46;var $57=$42;var $56=$46;label=15;break;}else{var $_049_i=$46;var $__v_sroa_1_4_load4450=$42;label=11;break;}
 case 11: 
 var $__v_sroa_1_4_load4450;
 var $_049_i;
 var $50=((($__v_sroa_1_4_load4450)-(96))|0);
 var $51=((($_049_i)-(96))|0);
 var $52=($50|0)==0;
 if($52){label=13;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartC2ERKS_($50,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $54=($51|0)==($47|0);
 if($54){label=14;break;}else{var $_049_i=$51;var $__v_sroa_1_4_load4450=$50;label=11;break;}
 case 14: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre56=HEAP32[(($1)>>2)];
 var $58=$_pre_i;var $57=$50;var $56=$_pre56;label=15;break;
 case 15: 
 var $56;
 var $57;
 var $58;
 HEAP32[(($3)>>2)]=$57;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $__v_sroa_2_8_load4853=$56;label=16;break;
 case 16: 
 var $__v_sroa_2_8_load4853;
 var $59=($58|0)==($__v_sroa_2_8_load4853|0);
 if($59){label=19;break;}else{label=17;break;}
 case 17: 
 var $61=((($__v_sroa_2_8_load4853)-(96))|0);
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load4853=$61;label=16;break; } else { label=18;break; }
 case 18: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 ___cxa_call_unexpected($64);
 throw "Reached an unreachable!";
 case 19: 
 var $65=($58|0)==0;
 if($65){label=21;break;}else{label=20;break;}
 case 20: 
 var $67=$58;
 __ZdlPv($67);
 label=21;break;
 case 21: 
 return;
 case 22: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $__v_sroa_1_4_load4449=$__v_sroa_1_4_load4450;var $__v_sroa_2_8_load4852=$48;label=24;break;
 case 23: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $__v_sroa_1_4_load4449=$42;var $__v_sroa_2_8_load4852=$42;label=24;break;
 case 24: 
 var $__v_sroa_2_8_load4852;
 var $__v_sroa_1_4_load4449;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $__v_sroa_2_8_load4851=$__v_sroa_2_8_load4852;label=25;break;
 case 25: 
 var $__v_sroa_2_8_load4851;
 var $69=($__v_sroa_1_4_load4449|0)==($__v_sroa_2_8_load4851|0);
 if($69){label=28;break;}else{label=26;break;}
 case 26: 
 var $71=((($__v_sroa_2_8_load4851)-(96))|0);
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load4851=$71;label=25;break; } else { label=27;break; }
 case 27: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=$73$0;
 ___cxa_call_unexpected($74);
 throw "Reached an unreachable!";
 case 28: 
 var $75=($41|0)==0;
 if($75){label=30;break;}else{label=29;break;}
 case 29: 
 var $77=$41;
 __ZdlPv($77);
 label=30;break;
 case 30: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>357913941;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(12))&-1);
 var $21=($20>>>0)>178956969;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(12))&-1);
 var $_095=357913941;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(12))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $39=0;var $_096=0;var $38=$31;label=7;break;}else{var $_095=$_sroa_speculated;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $_095;
 var $35=((($_095)*(12))&-1);
 var $36=__Znwj($35);
 var $37=$36;
 var $39=$37;var $_096=$_095;var $38=$34;label=7;break;
 case 7: 
 var $38;
 var $_096;
 var $39;
 var $40=(($39+((($38)*(12))&-1))|0);
 var $41=(($39+((($_096)*(12))&-1))|0);
 var $42=($40|0)==0;
 if($42){label=20;break;}else{label=8;break;}
 case 8: 
 var $44=(($40)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=(($39+((($38)*(12))&-1)+4)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=(($39+((($38)*(12))&-1)+8)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($__x+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($__x)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$48;
 var $52=$50;
 var $53=((($51)-($52))|0);
 var $54=$53>>4;
 var $55=($54|0)==0;
 if($55){label=20;break;}else{label=9;break;}
 case 9: 
 var $57=($54>>>0)>268435455;
 if($57){label=10;break;}else{label=11;break;}
 case 10: 
 var $59=$40;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=16;break; }
 case 11: 
 var $60=(function() { try { __THREW__ = 0; return __Znwj($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $62=$60;
 HEAP32[(($45)>>2)]=$62;
 HEAP32[(($44)>>2)]=$62;
 var $63=(($62+($54<<4))|0);
 HEAP32[(($46)>>2)]=$63;
 var $64=HEAP32[(($49)>>2)];
 var $65=HEAP32[(($47)>>2)];
 var $66=($64|0)==($65|0);
 if($66){label=20;break;}else{var $_011_i_i_i=$64;var $67=$62;label=13;break;}
 case 13: 
 var $67;
 var $_011_i_i_i;
 var $68=($67|0)==0;
 if($68){var $72=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $70=$67;
 var $71=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];HEAP32[((($70)+(8))>>2)]=HEAP32[((($71)+(8))>>2)];HEAP32[((($70)+(12))>>2)]=HEAP32[((($71)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($45)>>2)];
 var $72=$_pre12_i_i_i;label=15;break;
 case 15: 
 var $72;
 var $73=(($72+16)|0);
 HEAP32[(($45)>>2)]=$73;
 var $74=(($_011_i_i_i+16)|0);
 var $75=($74|0)==($65|0);
 if($75){label=20;break;}else{var $_011_i_i_i=$74;var $67=$73;label=13;break;}
 case 16: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($44)>>2)];
 var $79=$78;
 var $80=($78|0)==0;
 if($80){var $eh_lpad_body8797$1=$77$1;var $eh_lpad_body8797$0=$77$0;label=52;break;}else{label=17;break;}
 case 17: 
 var $81=HEAP32[(($45)>>2)];
 var $82=($78|0)==($81|0);
 if($82){label=19;break;}else{label=18;break;}
 case 18: 
 var $scevgep_i_i_i=((($81)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $83=(((-$79))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$83)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $84=$uglygep29_i_i_i>>>4;
 var $85=$84^-1;
 var $scevgep30_i_i_i=(($81+($85<<4))|0);
 HEAP32[(($45)>>2)]=$scevgep30_i_i_i;
 label=19;break;
 case 19: 
 var $86=$78;
 __ZdlPv($86);
 var $eh_lpad_body87$1=$77$1;var $eh_lpad_body87$0=$77$0;label=51;break;
 case 20: 
 var $_sum=((($38)+(1))|0);
 var $87=(($39+((($_sum)*(12))&-1))|0);
 var $88=HEAP32[(($3)>>2)];
 var $89=HEAP32[(($1)>>2)];
 var $90=($89|0)==($88|0);
 if($90){label=21;break;}else{var $_049_i=$89;var $__v_sroa_1_4_load7182=$40;label=22;break;}
 case 21: 
 HEAP32[(($3)>>2)]=$40;
 HEAP32[(($1)>>2)]=$87;
 HEAP32[(($15)>>2)]=$41;
 var $155=$88;label=42;break;
 case 22: 
 var $__v_sroa_1_4_load7182;
 var $_049_i;
 var $91=((($__v_sroa_1_4_load7182)-(12))|0);
 var $92=((($_049_i)-(12))|0);
 var $93=($91|0)==0;
 if($93){label=35;break;}else{label=23;break;}
 case 23: 
 var $95=(($91)|0);
 HEAP32[(($95)>>2)]=0;
 var $96=((($__v_sroa_1_4_load7182)-(12)+4)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=((($__v_sroa_1_4_load7182)-(12)+8)|0);
 HEAP32[(($97)>>2)]=0;
 var $98=((($_049_i)-(12)+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($92)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=$99;
 var $103=$101;
 var $104=((($102)-($103))|0);
 var $105=$104>>4;
 var $106=($105|0)==0;
 if($106){label=35;break;}else{label=24;break;}
 case 24: 
 var $108=($105>>>0)>268435455;
 if($108){label=25;break;}else{label=26;break;}
 case 25: 
 var $110=$91;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=31;break; }
 case 26: 
 var $111=(function() { try { __THREW__ = 0; return __Znwj($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 var $113=$111;
 HEAP32[(($96)>>2)]=$113;
 HEAP32[(($95)>>2)]=$113;
 var $114=(($113+($105<<4))|0);
 HEAP32[(($97)>>2)]=$114;
 var $115=HEAP32[(($100)>>2)];
 var $116=HEAP32[(($98)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=35;break;}else{var $_011_i_i_i38=$115;var $118=$113;label=28;break;}
 case 28: 
 var $118;
 var $_011_i_i_i38;
 var $119=($118|0)==0;
 if($119){var $123=0;label=30;break;}else{label=29;break;}
 case 29: 
 var $121=$118;
 var $122=$_011_i_i_i38;
 assert(16 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];HEAP32[((($121)+(12))>>2)]=HEAP32[((($122)+(12))>>2)];
 var $_pre12_i_i_i40=HEAP32[(($96)>>2)];
 var $123=$_pre12_i_i_i40;label=30;break;
 case 30: 
 var $123;
 var $124=(($123+16)|0);
 HEAP32[(($96)>>2)]=$124;
 var $125=(($_011_i_i_i38+16)|0);
 var $126=($125|0)==($116|0);
 if($126){label=35;break;}else{var $_011_i_i_i38=$125;var $118=$124;label=28;break;}
 case 31: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=HEAP32[(($95)>>2)];
 var $130=$129;
 var $131=($129|0)==0;
 if($131){label=45;break;}else{label=32;break;}
 case 32: 
 var $132=HEAP32[(($96)>>2)];
 var $133=($129|0)==($132|0);
 if($133){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i43=((($132)-(16))|0);
 var $scevgep28_i_i_i44=$scevgep_i_i_i43;
 var $134=(((-$130))|0);
 var $uglygep_i_i_i45=(($scevgep28_i_i_i44+$134)|0);
 var $uglygep29_i_i_i46=$uglygep_i_i_i45;
 var $135=$uglygep29_i_i_i46>>>4;
 var $136=$135^-1;
 var $scevgep30_i_i_i47=(($132+($136<<4))|0);
 HEAP32[(($96)>>2)]=$scevgep30_i_i_i47;
 label=34;break;
 case 34: 
 var $137=$129;
 __ZdlPv($137);
 label=45;break;
 case 35: 
 var $138=($92|0)==($88|0);
 if($138){label=36;break;}else{var $_049_i=$92;var $__v_sroa_1_4_load7182=$91;label=22;break;}
 case 36: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre94=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$91;
 HEAP32[(($1)>>2)]=$87;
 HEAP32[(($15)>>2)]=$41;
 var $140=($_pre_i|0)==($_pre94|0);
 if($140){var $155=$_pre_i;label=42;break;}else{var $141=$_pre94;label=37;break;}
 case 37: 
 var $141;
 var $142=((($141)-(12))|0);
 var $143=(($142)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$144;
 var $146=($144|0)==0;
 if($146){label=38;break;}else{label=39;break;}
 case 38: 
 var $147=($_pre_i|0)==($142|0);
 if($147){var $155=$_pre_i;label=42;break;}else{var $141=$142;label=37;break;}
 case 39: 
 var $148=((($141)-(12)+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($144|0)==($149|0);
 if($150){label=41;break;}else{label=40;break;}
 case 40: 
 var $scevgep_i_i_i_i_i57=((($149)-(16))|0);
 var $scevgep28_i_i_i_i_i58=$scevgep_i_i_i_i_i57;
 var $151=(((-$145))|0);
 var $uglygep_i_i_i_i_i59=(($scevgep28_i_i_i_i_i58+$151)|0);
 var $uglygep29_i_i_i_i_i60=$uglygep_i_i_i_i_i59;
 var $152=$uglygep29_i_i_i_i_i60>>>4;
 var $153=$152^-1;
 var $scevgep30_i_i_i_i_i61=(($149+($153<<4))|0);
 HEAP32[(($148)>>2)]=$scevgep30_i_i_i_i_i61;
 label=41;break;
 case 41: 
 var $154=$144;
 __ZdlPv($154);
 label=38;break;
 case 42: 
 var $155;
 var $156=($155|0)==0;
 if($156){label=44;break;}else{label=43;break;}
 case 43: 
 var $158=$155;
 __ZdlPv($158);
 label=44;break;
 case 44: 
 return;
 case 45: 
 var $159=($__v_sroa_1_4_load7182|0)==($87|0);
 if($159){var $eh_lpad_body87$1=$128$1;var $eh_lpad_body87$0=$128$0;label=51;break;}else{var $160=$87;label=46;break;}
 case 46: 
 var $160;
 var $161=((($160)-(12))|0);
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=($163|0)==0;
 if($165){label=47;break;}else{label=48;break;}
 case 47: 
 var $166=($__v_sroa_1_4_load7182|0)==($161|0);
 if($166){var $eh_lpad_body87$1=$128$1;var $eh_lpad_body87$0=$128$0;label=51;break;}else{var $160=$161;label=46;break;}
 case 48: 
 var $167=((($160)-(12)+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($163|0)==($168|0);
 if($169){label=50;break;}else{label=49;break;}
 case 49: 
 var $scevgep_i_i_i_i_i=((($168)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $170=(((-$164))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$170)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $171=$uglygep29_i_i_i_i_i>>>4;
 var $172=$171^-1;
 var $scevgep30_i_i_i_i_i=(($168+($172<<4))|0);
 HEAP32[(($167)>>2)]=$scevgep30_i_i_i_i_i;
 label=50;break;
 case 50: 
 var $173=$163;
 __ZdlPv($173);
 label=47;break;
 case 51: 
 var $eh_lpad_body87$0;
 var $eh_lpad_body87$1;
 var $174=($39|0)==0;
 if($174){var $eh_lpad_body8798$1=$eh_lpad_body87$1;var $eh_lpad_body8798$0=$eh_lpad_body87$0;label=53;break;}else{var $eh_lpad_body8797$1=$eh_lpad_body87$1;var $eh_lpad_body8797$0=$eh_lpad_body87$0;label=52;break;}
 case 52: 
 var $eh_lpad_body8797$0;
 var $eh_lpad_body8797$1;
 var $175=$39;
 __ZdlPv($175);
 var $eh_lpad_body8798$1=$eh_lpad_body8797$1;var $eh_lpad_body8798$0=$eh_lpad_body8797$0;label=53;break;
 case 53: 
 var $eh_lpad_body8798$0;
 var $eh_lpad_body8798$1;
 ___resumeException($eh_lpad_body8798$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>4;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>268435455;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>4;
 var $21=($20>>>0)>134217726;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>4;
 var $_044=268435455;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>3;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>4;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<4;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<4))|0);
 var $43=(($41+($_045<<4))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=$42;
 var $47=$__x;
 assert(16 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];HEAP32[((($46)+(12))>>2)]=HEAP32[((($47)+(12))>>2)];
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $48=(($41+($_sum<<4))|0);
 var $49=$41;
 var $50=$14;
 assert($40 % 1 === 0);(_memcpy($49, $50, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $51=($14|0)==0;
 if($51){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($50);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($5|0)==($7|0);
 if($8){label=31;break;}else{label=2;break;}
 case 2: 
 var $10=$7;
 var $11=$5;
 var $12=((($11)-($10))|0);
 var $13=(((($12|0))/(12))&-1);
 var $14=($13>>>0)>357913941;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=21;break; }
 case 4: 
 var $17=(function() { try { __THREW__ = 0; return __Znwj($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=21;break; }
 case 5: 
 var $19=$17;
 HEAP32[(($2)>>2)]=$19;
 HEAP32[(($1)>>2)]=$19;
 var $20=(($19+((($13)*(12))&-1))|0);
 HEAP32[(($3)>>2)]=$20;
 var $21=HEAP32[(($6)>>2)];
 var $22=HEAP32[(($4)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=31;break;}else{var $_011_i=$21;var $24=$19;label=6;break;}
 case 6: 
 var $24;
 var $_011_i;
 var $25=($24|0)==0;
 if($25){var $70=0;label=20;break;}else{label=7;break;}
 case 7: 
 var $27=(($24)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($24+4)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=(($24+8)|0);
 HEAP32[(($29)>>2)]=0;
 var $30=(($_011_i+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($_011_i)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$31;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=$36>>4;
 var $38=($37|0)==0;
 if($38){label=19;break;}else{label=8;break;}
 case 8: 
 var $40=($37>>>0)>268435455;
 if($40){label=9;break;}else{label=10;break;}
 case 9: 
 var $42=$24;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=15;break; }
 case 10: 
 var $43=(function() { try { __THREW__ = 0; return __Znwj($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $45=$43;
 HEAP32[(($28)>>2)]=$45;
 HEAP32[(($27)>>2)]=$45;
 var $46=(($45+($37<<4))|0);
 HEAP32[(($29)>>2)]=$46;
 var $47=HEAP32[(($32)>>2)];
 var $48=HEAP32[(($30)>>2)];
 var $49=($47|0)==($48|0);
 if($49){label=19;break;}else{var $_011_i_i_i=$47;var $50=$45;label=12;break;}
 case 12: 
 var $50;
 var $_011_i_i_i;
 var $51=($50|0)==0;
 if($51){var $55=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $53=$50;
 var $54=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];HEAP32[((($53)+(12))>>2)]=HEAP32[((($54)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($28)>>2)];
 var $55=$_pre12_i_i_i;label=14;break;
 case 14: 
 var $55;
 var $56=(($55+16)|0);
 HEAP32[(($28)>>2)]=$56;
 var $57=(($_011_i_i_i+16)|0);
 var $58=($57|0)==($48|0);
 if($58){label=19;break;}else{var $_011_i_i_i=$57;var $50=$56;label=12;break;}
 case 15: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=HEAP32[(($27)>>2)];
 var $62=$61;
 var $63=($61|0)==0;
 if($63){var $eh_lpad_body$1=$60$1;var $eh_lpad_body$0=$60$0;label=22;break;}else{label=16;break;}
 case 16: 
 var $64=HEAP32[(($28)>>2)];
 var $65=($61|0)==($64|0);
 if($65){label=18;break;}else{label=17;break;}
 case 17: 
 var $scevgep_i_i_i=((($64)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $66=(((-$62))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$66)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $67=$uglygep29_i_i_i>>>4;
 var $68=$67^-1;
 var $scevgep30_i_i_i=(($64+($68<<4))|0);
 HEAP32[(($28)>>2)]=$scevgep30_i_i_i;
 label=18;break;
 case 18: 
 var $69=$61;
 __ZdlPv($69);
 var $eh_lpad_body$1=$60$1;var $eh_lpad_body$0=$60$0;label=22;break;
 case 19: 
 var $_pre12_i=HEAP32[(($2)>>2)];
 var $70=$_pre12_i;label=20;break;
 case 20: 
 var $70;
 var $71=(($70+12)|0);
 HEAP32[(($2)>>2)]=$71;
 var $72=(($_011_i+12)|0);
 var $73=($72|0)==($22|0);
 if($73){label=31;break;}else{var $_011_i=$72;var $24=$71;label=6;break;}
 case 21: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 var $eh_lpad_body$1=$75$1;var $eh_lpad_body$0=$75$0;label=22;break;
 case 22: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $76=HEAP32[(($1)>>2)];
 var $77=($76|0)==0;
 if($77){label=32;break;}else{label=23;break;}
 case 23: 
 var $78=HEAP32[(($2)>>2)];
 var $79=($76|0)==($78|0);
 if($79){var $95=$76;label=30;break;}else{var $80=$78;label=24;break;}
 case 24: 
 var $80;
 var $81=((($80)-(12))|0);
 HEAP32[(($2)>>2)]=$81;
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=$83;
 var $85=($83|0)==0;
 if($85){var $86=$81;label=25;break;}else{label=26;break;}
 case 25: 
 var $86;
 var $87=($76|0)==($86|0);
 if($87){label=29;break;}else{var $80=$86;label=24;break;}
 case 26: 
 var $88=((($80)-(12)+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($83|0)==($89|0);
 if($90){label=28;break;}else{label=27;break;}
 case 27: 
 var $scevgep_i_i_i_i=((($89)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $91=(((-$84))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$91)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $92=$uglygep29_i_i_i_i>>>4;
 var $93=$92^-1;
 var $scevgep30_i_i_i_i=(($89+($93<<4))|0);
 HEAP32[(($88)>>2)]=$scevgep30_i_i_i_i;
 label=28;break;
 case 28: 
 var $94=$83;
 __ZdlPv($94);
 var $_pre29_i=HEAP32[(($2)>>2)];
 var $86=$_pre29_i;label=25;break;
 case 29: 
 var $_pre_i48=HEAP32[(($1)>>2)];
 var $95=$_pre_i48;label=30;break;
 case 30: 
 var $95;
 var $96=$95;
 __ZdlPv($96);
 label=32;break;
 case 31: 
 return;
 case 32: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN16SliceDataStorageD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+60)|0);
 __ZNSt3__16vectorI18SliceVolumeStorageNS_9allocatorIS1_EEED1Ev($1);
 var $2=(($this+48)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=10;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+52)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($3|0)==($6|0);
 if($7){var $23=$3;label=9;break;}else{var $8=$6;label=3;break;}
 case 3: 
 var $8;
 var $9=((($8)-(12))|0);
 HEAP32[(($5)>>2)]=$9;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 var $13=($11|0)==0;
 if($13){var $14=$9;label=4;break;}else{label=5;break;}
 case 4: 
 var $14;
 var $15=($3|0)==($14|0);
 if($15){label=8;break;}else{var $8=$14;label=3;break;}
 case 5: 
 var $16=((($8)-(12)+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($11|0)==($17|0);
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i_i_i_i=((($17)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $19=(((-$12))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$19)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $20=$uglygep29_i_i_i_i_i_i>>>4;
 var $21=$20^-1;
 var $scevgep30_i_i_i_i_i_i=(($17+($21<<4))|0);
 HEAP32[(($16)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=7;break;
 case 7: 
 var $22=$11;
 __ZdlPv($22);
 var $_pre29_i_i_i=HEAP32[(($5)>>2)];
 var $14=$_pre29_i_i_i;label=4;break;
 case 8: 
 var $_pre_i_i_i=HEAP32[(($2)>>2)];
 var $23=$_pre_i_i_i;label=9;break;
 case 9: 
 var $23;
 var $24=$23;
 __ZdlPv($24);
 label=10;break;
 case 10: 
 var $25=(($this+36)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=19;break;}else{label=11;break;}
 case 11: 
 var $28=(($this+40)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($26|0)==($29|0);
 if($30){var $46=$26;label=18;break;}else{var $31=$29;label=12;break;}
 case 12: 
 var $31;
 var $32=((($31)-(12))|0);
 HEAP32[(($28)>>2)]=$32;
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$34;
 var $36=($34|0)==0;
 if($36){var $37=$32;label=13;break;}else{label=14;break;}
 case 13: 
 var $37;
 var $38=($26|0)==($37|0);
 if($38){label=17;break;}else{var $31=$37;label=12;break;}
 case 14: 
 var $39=((($31)-(12)+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($34|0)==($40|0);
 if($41){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i_i8=((($40)-(16))|0);
 var $scevgep28_i_i_i_i_i_i9=$scevgep_i_i_i_i_i_i8;
 var $42=(((-$35))|0);
 var $uglygep_i_i_i_i_i_i10=(($scevgep28_i_i_i_i_i_i9+$42)|0);
 var $uglygep29_i_i_i_i_i_i11=$uglygep_i_i_i_i_i_i10;
 var $43=$uglygep29_i_i_i_i_i_i11>>>4;
 var $44=$43^-1;
 var $scevgep30_i_i_i_i_i_i12=(($40+($44<<4))|0);
 HEAP32[(($39)>>2)]=$scevgep30_i_i_i_i_i_i12;
 label=16;break;
 case 16: 
 var $45=$34;
 __ZdlPv($45);
 var $_pre29_i_i_i14=HEAP32[(($28)>>2)];
 var $37=$_pre29_i_i_i14;label=13;break;
 case 17: 
 var $_pre_i_i_i16=HEAP32[(($25)>>2)];
 var $46=$_pre_i_i_i16;label=18;break;
 case 18: 
 var $46;
 var $47=$46;
 __ZdlPv($47);
 label=19;break;
 case 19: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI18SliceVolumeStorageNS_9allocatorIS1_EEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=17;break;}else{label=2;break;}
 case 2: 
 var $4=(($this+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($2|0)==($5|0);
 if($6){var $36=$2;label=16;break;}else{var $7=$5;label=3;break;}
 case 3: 
 var $7;
 var $8=((($7)-(12))|0);
 HEAP32[(($4)>>2)]=$8;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $34=$8;label=14;break;}else{label=4;break;}
 case 4: 
 var $12=((($7)-(12)+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($10|0)==($13|0);
 if($14){var $32=$10;label=13;break;}else{var $15=$13;label=5;break;}
 case 5: 
 var $15;
 var $16=((($15)-(12))|0);
 HEAP32[(($12)>>2)]=$16;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){var $20=$16;label=6;break;}else{label=7;break;}
 case 6: 
 var $20;
 var $21=($10|0)==($20|0);
 if($21){label=12;break;}else{var $15=$20;label=5;break;}
 case 7: 
 var $22=((($15)-(12)+4)|0);
 label=8;break;
 case 8: 
 var $23=HEAP32[(($22)>>2)];
 var $24=($18|0)==($23|0);
 if($24){label=11;break;}else{label=9;break;}
 case 9: 
 var $26=((($23)-(96))|0);
 HEAP32[(($22)>>2)]=$26;
 (function() { try { __THREW__ = 0; return __ZN14SliceLayerPartD2Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 10: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 ___cxa_call_unexpected($29);
 throw "Reached an unreachable!";
 case 11: 
 var $30=HEAP32[(($17)>>2)];
 var $31=$30;
 __ZdlPv($31);
 var $_pre29_i_i_i_i_i=HEAP32[(($12)>>2)];
 var $20=$_pre29_i_i_i_i_i;label=6;break;
 case 12: 
 var $_pre_i_i_i_i_i=HEAP32[(($9)>>2)];
 var $32=$_pre_i_i_i_i_i;label=13;break;
 case 13: 
 var $32;
 var $33=$32;
 __ZdlPv($33);
 var $_pre=HEAP32[(($4)>>2)];
 var $34=$_pre;label=14;break;
 case 14: 
 var $34;
 var $35=($2|0)==($34|0);
 if($35){label=15;break;}else{var $7=$34;label=3;break;}
 case 15: 
 var $_pre_i_i=HEAP32[(($1)>>2)];
 var $36=$_pre_i_i;label=16;break;
 case 16: 
 var $36;
 var $37=$36;
 __ZdlPv($37);
 label=17;break;
 case 17: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4Comb10moveInsideERN10ClipperLib8IntPointE($this,$p){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ret_sroa_0_0__idx109=(($p)|0);
 var $ld$0$0=(($ret_sroa_0_0__idx109)|0);
 var $ret_sroa_0_0_copyload110$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($ret_sroa_0_0__idx109+4)|0);
 var $ret_sroa_0_0_copyload110$1=HEAP32[(($ld$1$1)>>2)];
 var $ret_sroa_1_8__idx112=(($p+8)|0);
 var $ld$2$0=(($ret_sroa_1_8__idx112)|0);
 var $ret_sroa_1_8_copyload113$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($ret_sroa_1_8__idx112+4)|0);
 var $ret_sroa_1_8_copyload113$1=HEAP32[(($ld$3$1)>>2)];
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){var $_0=0;label=14;break;}else{label=2;break;}
 case 2: 
 var $8=$4;
 var $9=$6;
 var $10=((($8)-($9))|0);
 var $11=(((($10|0))/(12))&-1);
 var $ret_sroa_1_8_copyload113125134$1=$ret_sroa_1_8_copyload113$1;var $ret_sroa_1_8_copyload113125134$0=$ret_sroa_1_8_copyload113$0;var $ret_sroa_0_0_copyload110121135$1=$ret_sroa_0_0_copyload110$1;var $ret_sroa_0_0_copyload110121135$0=$ret_sroa_0_0_copyload110$0;var $n_0136=0;var $bestDist_0137$1=0;var $bestDist_0137$0=100000000;label=3;break;
 case 3: 
 var $bestDist_0137$0;
 var $bestDist_0137$1;
 var $n_0136;
 var $ret_sroa_0_0_copyload110121135$0;
 var $ret_sroa_0_0_copyload110121135$1;
 var $ret_sroa_1_8_copyload113125134$0;
 var $ret_sroa_1_8_copyload113125134$1;
 var $13=(($6+((($n_0136)*(12))&-1)+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($6+((($n_0136)*(12))&-1))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>4;
 var $21=($20|0)==0;
 if($21){var $bestDist_3$1=$bestDist_0137$1;var $bestDist_3$0=$bestDist_0137$0;var $ret_sroa_0_0_copyload110120$1=$ret_sroa_0_0_copyload110121135$1;var $ret_sroa_0_0_copyload110120$0=$ret_sroa_0_0_copyload110121135$0;var $ret_sroa_1_8_copyload113124$1=$ret_sroa_1_8_copyload113125134$1;var $ret_sroa_1_8_copyload113124$0=$ret_sroa_1_8_copyload113125134$0;label=11;break;}else{label=4;break;}
 case 4: 
 var $23=((($20)-(1))|0);
 var $24=($14|0)==($16|0);
 if($24){var $bestDist_3$1=$bestDist_0137$1;var $bestDist_3$0=$bestDist_0137$0;var $ret_sroa_0_0_copyload110120$1=$ret_sroa_0_0_copyload110121135$1;var $ret_sroa_0_0_copyload110120$0=$ret_sroa_0_0_copyload110121135$0;var $ret_sroa_1_8_copyload113124$1=$ret_sroa_1_8_copyload113125134$1;var $ret_sroa_1_8_copyload113124$0=$ret_sroa_1_8_copyload113125134$0;label=11;break;}else{label=5;break;}
 case 5: 
 var $p0_sroa_1_8__idx108=(($16+($23<<4)+8)|0);
 var $p0_sroa_0_0__idx=(($16+($23<<4))|0);
 var $ld$4$0=(($p0_sroa_1_8__idx108)|0);
 var $p0_sroa_1_8_copyload$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p0_sroa_1_8__idx108+4)|0);
 var $p0_sroa_1_8_copyload$1=HEAP32[(($ld$5$1)>>2)];
 var $ld$6$0=(($p0_sroa_0_0__idx)|0);
 var $p0_sroa_0_0_copyload$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p0_sroa_0_0__idx+4)|0);
 var $p0_sroa_0_0_copyload$1=HEAP32[(($ld$7$1)>>2)];
 var $ret_sroa_1_8_copyload113123126$1=$ret_sroa_1_8_copyload113125134$1;var $ret_sroa_1_8_copyload113123126$0=$ret_sroa_1_8_copyload113125134$0;var $ret_sroa_0_0_copyload110119127$1=$ret_sroa_0_0_copyload110121135$1;var $ret_sroa_0_0_copyload110119127$0=$ret_sroa_0_0_copyload110121135$0;var $p0_sroa_1_8_copyload117128$1=$p0_sroa_1_8_copyload$1;var $p0_sroa_1_8_copyload117128$0=$p0_sroa_1_8_copyload$0;var $p0_sroa_0_0_copyload116129$1=$p0_sroa_0_0_copyload$1;var $p0_sroa_0_0_copyload116129$0=$p0_sroa_0_0_copyload$0;var $i_0130=0;var $bestDist_1131$1=$bestDist_0137$1;var $bestDist_1131$0=$bestDist_0137$0;label=6;break;
 case 6: 
 var $bestDist_1131$0;
 var $bestDist_1131$1;
 var $i_0130;
 var $p0_sroa_0_0_copyload116129$0;
 var $p0_sroa_0_0_copyload116129$1;
 var $p0_sroa_1_8_copyload117128$0;
 var $p0_sroa_1_8_copyload117128$1;
 var $ret_sroa_0_0_copyload110119127$0;
 var $ret_sroa_0_0_copyload110119127$1;
 var $ret_sroa_1_8_copyload113123126$0;
 var $ret_sroa_1_8_copyload113123126$1;
 var $p1_sroa_0_0__idx96=(($16+($i_0130<<4))|0);
 var $ld$8$0=(($p1_sroa_0_0__idx96)|0);
 var $p1_sroa_0_0_copyload97$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($p1_sroa_0_0__idx96+4)|0);
 var $p1_sroa_0_0_copyload97$1=HEAP32[(($ld$9$1)>>2)];
 var $p1_sroa_1_8__idx100=(($16+($i_0130<<4)+8)|0);
 var $ld$10$0=(($p1_sroa_1_8__idx100)|0);
 var $p1_sroa_1_8_copyload101$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($p1_sroa_1_8__idx100+4)|0);
 var $p1_sroa_1_8_copyload101$1=HEAP32[(($ld$11$1)>>2)];
 var $26$0=_i64Subtract($p1_sroa_0_0_copyload97$0,$p1_sroa_0_0_copyload97$1,$p0_sroa_0_0_copyload116129$0,$p0_sroa_0_0_copyload116129$1);var $26$1=tempRet0;
 var $27$0=_i64Subtract($p1_sroa_1_8_copyload101$0,$p1_sroa_1_8_copyload101$1,$p0_sroa_1_8_copyload117128$0,$p0_sroa_1_8_copyload117128$1);var $27$1=tempRet0;
 var $28$0=___muldi3($26$0,$26$1,$26$0,$26$1);var $28$1=tempRet0;
 var $29$0=___muldi3($27$0,$27$1,$27$0,$27$1);var $29$1=tempRet0;
 var $30$0=_i64Add($29$0,$29$1,$28$0,$28$1);var $30$1=tempRet0;
 var $31=(($30$0>>>0)+(($30$1|0)*4294967296));
 var $32=Math_sqrt($31);
 var $33=(($32)&-1);
 var $34$0=$33;
 var $34$1=(((($33|0)<0))|0)?-1:0;
 var $35$0=_i64Subtract($ret_sroa_0_0_copyload110$0,$ret_sroa_0_0_copyload110$1,$p0_sroa_0_0_copyload116129$0,$p0_sroa_0_0_copyload116129$1);var $35$1=tempRet0;
 var $36$0=_i64Subtract($ret_sroa_1_8_copyload113$0,$ret_sroa_1_8_copyload113$1,$p0_sroa_1_8_copyload117128$0,$p0_sroa_1_8_copyload117128$1);var $36$1=tempRet0;
 var $37$0=___muldi3($35$0,$35$1,$26$0,$26$1);var $37$1=tempRet0;
 var $38$0=___muldi3($36$0,$36$1,$27$0,$27$1);var $38$1=tempRet0;
 var $39$0=_i64Add($38$0,$38$1,$37$0,$37$1);var $39$1=tempRet0;
 var $40$0=___divdi3($39$0,$39$1,$34$0,$34$1);var $40$1=tempRet0;
 var $$etemp$12$0=10;
 var $$etemp$12$1=0;
 var $41=(($40$1|0) < ($$etemp$12$1|0)) | (((($40$1|0) == ($$etemp$12$1|0) & ($40$0>>>0) <  ($$etemp$12$0>>>0))));
 var $$etemp$13$0=10;
 var $$etemp$13$1=0;
 var $_$0=$41?$$etemp$13$0:$40$0;
 var $_$1=$41?$$etemp$13$1:$40$1;
 var $$etemp$14$0=-10;
 var $$etemp$14$1=-1;
 var $42$0=_i64Add($34$0,$34$1,$$etemp$14$0,$$etemp$14$1);var $42$1=tempRet0;
 var $43=(($_$1|0) > ($42$1|0)) | (((($_$1|0) == ($42$1|0) & ($_$0>>>0) >  ($42$0>>>0))));
 var $distOnLine_1_off0_v$0=$43?$42$0:$_$0;
 var $distOnLine_1_off0_v$1=$43?$42$1:$_$1;
 var $sext$0=0;
 var $sext$1=$distOnLine_1_off0_v$0;
 var $44$0=$sext$1;
 var $44$1=(((($sext$1|0)<0))|0)?-1:0;
 var $45$0=___muldi3($44$0,$44$1,$26$0,$26$1);var $45$1=tempRet0;
 var $46$0=___muldi3($44$0,$44$1,$27$0,$27$1);var $46$1=tempRet0;
 var $47$0=___divdi3($45$0,$45$1,$34$0,$34$1);var $47$1=tempRet0;
 var $48$0=___divdi3($46$0,$46$1,$34$0,$34$1);var $48$1=tempRet0;
 var $49$0=_i64Add($47$0,$47$1,$p0_sroa_0_0_copyload116129$0,$p0_sroa_0_0_copyload116129$1);var $49$1=tempRet0;
 var $50$0=_i64Add($48$0,$48$1,$p0_sroa_1_8_copyload117128$0,$p0_sroa_1_8_copyload117128$1);var $50$1=tempRet0;
 var $51$0=_i64Subtract($49$0,$49$1,$ret_sroa_0_0_copyload110$0,$ret_sroa_0_0_copyload110$1);var $51$1=tempRet0;
 var $52$0=_i64Subtract($50$0,$50$1,$ret_sroa_1_8_copyload113$0,$ret_sroa_1_8_copyload113$1);var $52$1=tempRet0;
 var $53$0=___muldi3($51$0,$51$1,$51$0,$51$1);var $53$1=tempRet0;
 var $54$0=___muldi3($52$0,$52$1,$52$0,$52$1);var $54$1=tempRet0;
 var $55$0=_i64Add($54$0,$54$1,$53$0,$53$1);var $55$1=tempRet0;
 var $56=(($55$1|0) < ($bestDist_1131$1|0)) | (((($55$1|0) == ($bestDist_1131$1|0) & ($55$0>>>0) <  ($bestDist_1131$0>>>0))));
 if($56){label=7;break;}else{var $bestDist_2$1=$bestDist_1131$1;var $bestDist_2$0=$bestDist_1131$0;var $ret_sroa_0_0_copyload110118$1=$ret_sroa_0_0_copyload110119127$1;var $ret_sroa_0_0_copyload110118$0=$ret_sroa_0_0_copyload110119127$0;var $ret_sroa_1_8_copyload113122$1=$ret_sroa_1_8_copyload113123126$1;var $ret_sroa_1_8_copyload113122$0=$ret_sroa_1_8_copyload113123126$0;label=10;break;}
 case 7: 
 var $58=($33|0)<1;
 if($58){var $_sroa_074_0_load114$1=0;var $_sroa_074_0_load114$0=100;var $_sroa_175_8_load115$1=0;var $_sroa_175_8_load115$0=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $$etemp$15$0=100;
 var $$etemp$15$1=0;
 var $60$0=___muldi3($26$0,$26$1,$$etemp$15$0,$$etemp$15$1);var $60$1=tempRet0;
 var $$etemp$16$0=100;
 var $$etemp$16$1=0;
 var $61$0=___muldi3($27$0,$27$1,$$etemp$16$0,$$etemp$16$1);var $61$1=tempRet0;
 var $62$0=___divdi3($60$0,$60$1,$34$0,$34$1);var $62$1=tempRet0;
 var $63$0=___divdi3($61$0,$61$1,$34$0,$34$1);var $63$1=tempRet0;
 var $_sroa_074_0_load114$1=$62$1;var $_sroa_074_0_load114$0=$62$0;var $_sroa_175_8_load115$1=$63$1;var $_sroa_175_8_load115$0=$63$0;label=9;break;
 case 9: 
 var $_sroa_175_8_load115$0;
 var $_sroa_175_8_load115$1;
 var $_sroa_074_0_load114$0;
 var $_sroa_074_0_load114$1;
 var $64$0=_i64Subtract($49$0,$49$1,$_sroa_175_8_load115$0,$_sroa_175_8_load115$1);var $64$1=tempRet0;
 var $65$0=_i64Add($_sroa_074_0_load114$0,$_sroa_074_0_load114$1,$50$0,$50$1);var $65$1=tempRet0;
 var $bestDist_2$1=$55$1;var $bestDist_2$0=$55$0;var $ret_sroa_0_0_copyload110118$1=$64$1;var $ret_sroa_0_0_copyload110118$0=$64$0;var $ret_sroa_1_8_copyload113122$1=$65$1;var $ret_sroa_1_8_copyload113122$0=$65$0;label=10;break;
 case 10: 
 var $ret_sroa_1_8_copyload113122$0;
 var $ret_sroa_1_8_copyload113122$1;
 var $ret_sroa_0_0_copyload110118$0;
 var $ret_sroa_0_0_copyload110118$1;
 var $bestDist_2$0;
 var $bestDist_2$1;
 var $67=((($i_0130)+(1))|0);
 var $68=($67>>>0)<($20>>>0);
 if($68){var $ret_sroa_1_8_copyload113123126$1=$ret_sroa_1_8_copyload113122$1;var $ret_sroa_1_8_copyload113123126$0=$ret_sroa_1_8_copyload113122$0;var $ret_sroa_0_0_copyload110119127$1=$ret_sroa_0_0_copyload110118$1;var $ret_sroa_0_0_copyload110119127$0=$ret_sroa_0_0_copyload110118$0;var $p0_sroa_1_8_copyload117128$1=$p1_sroa_1_8_copyload101$1;var $p0_sroa_1_8_copyload117128$0=$p1_sroa_1_8_copyload101$0;var $p0_sroa_0_0_copyload116129$1=$p1_sroa_0_0_copyload97$1;var $p0_sroa_0_0_copyload116129$0=$p1_sroa_0_0_copyload97$0;var $i_0130=$67;var $bestDist_1131$1=$bestDist_2$1;var $bestDist_1131$0=$bestDist_2$0;label=6;break;}else{var $bestDist_3$1=$bestDist_2$1;var $bestDist_3$0=$bestDist_2$0;var $ret_sroa_0_0_copyload110120$1=$ret_sroa_0_0_copyload110118$1;var $ret_sroa_0_0_copyload110120$0=$ret_sroa_0_0_copyload110118$0;var $ret_sroa_1_8_copyload113124$1=$ret_sroa_1_8_copyload113122$1;var $ret_sroa_1_8_copyload113124$0=$ret_sroa_1_8_copyload113122$0;label=11;break;}
 case 11: 
 var $ret_sroa_1_8_copyload113124$0;
 var $ret_sroa_1_8_copyload113124$1;
 var $ret_sroa_0_0_copyload110120$0;
 var $ret_sroa_0_0_copyload110120$1;
 var $bestDist_3$0;
 var $bestDist_3$1;
 var $69=((($n_0136)+(1))|0);
 var $70=($69>>>0)<($11>>>0);
 if($70){var $ret_sroa_1_8_copyload113125134$1=$ret_sroa_1_8_copyload113124$1;var $ret_sroa_1_8_copyload113125134$0=$ret_sroa_1_8_copyload113124$0;var $ret_sroa_0_0_copyload110121135$1=$ret_sroa_0_0_copyload110120$1;var $ret_sroa_0_0_copyload110121135$0=$ret_sroa_0_0_copyload110120$0;var $n_0136=$69;var $bestDist_0137$1=$bestDist_3$1;var $bestDist_0137$0=$bestDist_3$0;label=3;break;}else{label=12;break;}
 case 12: 
 var $$etemp$17$0=100000000;
 var $$etemp$17$1=0;
 var $71=(($bestDist_3$1|0) < ($$etemp$17$1|0)) | (((($bestDist_3$1|0) == ($$etemp$17$1|0) & ($bestDist_3$0>>>0) <  ($$etemp$17$0>>>0))));
 if($71){label=13;break;}else{var $_0=0;label=14;break;}
 case 13: 
 var $st$18$0=(($ret_sroa_0_0__idx109)|0);
 HEAP32[(($st$18$0)>>2)]=$ret_sroa_0_0_copyload110120$0;
 var $st$19$1=(($ret_sroa_0_0__idx109+4)|0);
 HEAP32[(($st$19$1)>>2)]=$ret_sroa_0_0_copyload110120$1;
 var $st$20$0=(($ret_sroa_1_8__idx112)|0);
 HEAP32[(($st$20$0)>>2)]=$ret_sroa_1_8_copyload113124$0;
 var $st$21$1=(($ret_sroa_1_8__idx112+4)|0);
 HEAP32[(($st$21$1)>>2)]=$ret_sroa_1_8_copyload113124$1;
 var $_0=1;label=14;break;
 case 14: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner9addTravelEN10ClipperLib8IntPointE($this,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $p; $p=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($p)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($p)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($p)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($p)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $pointList=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(32);
 var $3=(($this+40)|0);
 var $4=__ZN12GCodePlanner23getLatestPathWithConfigEP15GCodePathConfig($this,$3);
 var $5=(($this+68)|0);
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=7;break;}else{label=2;break;}
 case 2: 
 var $_idx68=(($this+8)|0);
 var $ld$0$0=(($_idx68)|0);
 var $_idx68_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_idx68+4)|0);
 var $_idx68_val$1=HEAP32[(($ld$1$1)>>2)];
 var $_idx69=(($this+16)|0);
 var $ld$2$0=(($_idx69)|0);
 var $_idx69_val$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($_idx69+4)|0);
 var $_idx69_val$1=HEAP32[(($ld$3$1)>>2)];
 var $p_idx70=(($p)|0);
 var $ld$4$0=(($p_idx70)|0);
 var $p_idx70_val$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p_idx70+4)|0);
 var $p_idx70_val$1=HEAP32[(($ld$5$1)>>2)];
 var $p_idx71=(($p+8)|0);
 var $ld$6$0=(($p_idx71)|0);
 var $p_idx71_val$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p_idx71+4)|0);
 var $p_idx71_val$1=HEAP32[(($ld$7$1)>>2)];
 var $10$0=_i64Subtract($_idx68_val$0,$_idx68_val$1,$p_idx70_val$0,$p_idx70_val$1);var $10$1=tempRet0;
 var $11$0=_i64Subtract($_idx69_val$0,$_idx69_val$1,$p_idx71_val$0,$p_idx71_val$1);var $11$1=tempRet0;
 var $$etemp$8$0=1500;
 var $$etemp$8$1=0;
 var $_off$0=_i64Add($10$0,$10$1,$$etemp$8$0,$$etemp$8$1);var $_off$1=tempRet0;
 var $$etemp$9$0=3000;
 var $$etemp$9$1=0;
 var $12=(($_off$1>>>0) > ($$etemp$9$1>>>0)) | (((($_off$1>>>0) == ($$etemp$9$1>>>0) & ($_off$0>>>0) >  ($$etemp$9$0>>>0))));
 if($12){label=5;break;}else{label=3;break;}
 case 3: 
 var $$etemp$10$0=1500;
 var $$etemp$10$1=0;
 var $_off97$0=_i64Add($11$0,$11$1,$$etemp$10$0,$$etemp$10$1);var $_off97$1=tempRet0;
 var $$etemp$11$0=3000;
 var $$etemp$11$1=0;
 var $14=(($_off97$1>>>0) > ($$etemp$11$1>>>0)) | (((($_off97$1>>>0) == ($$etemp$11$1>>>0) & ($_off97$0>>>0) >  ($$etemp$11$0>>>0))));
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $15$0=___muldi3($10$0,$10$1,$10$0,$10$1);var $15$1=tempRet0;
 var $16$0=___muldi3($11$0,$11$1,$11$0,$11$1);var $16$1=tempRet0;
 var $17$0=_i64Add($16$0,$16$1,$15$0,$15$1);var $17$1=tempRet0;
 var $$etemp$12$0=2250001;
 var $$etemp$12$1=0;
 var $18=(($17$1|0) < ($$etemp$12$1|0)) | (((($17$1|0) == ($$etemp$12$1|0) & ($17$0>>>0) <  ($$etemp$12$0>>>0))));
 if($18){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($4+4)|0);
 HEAP8[($19)]=1;
 label=6;break;
 case 6: 
 HEAP8[($5)]=0;
 label=40;break;
 case 7: 
 var $22=(($this+36)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=34;break;}else{label=8;break;}
 case 8: 
 var $26=(($pointList)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($pointList+4)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($pointList+8)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=(($this+8)|0);
 var $30=$1;
 var $31=$29;
 assert(16 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];
 var $32=$2;
 var $33=$p;
 assert(16 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];HEAP32[((($32)+(12))>>2)]=HEAP32[((($33)+(12))>>2)];
 var $34=(function() { try { __THREW__ = 0; return __ZN4Comb4calcEN10ClipperLib8IntPointES1_RNSt3__16vectorIS1_NS2_9allocatorIS1_EEEE($23,$1,$2,$pointList) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=19;break; }
 case 9: 
 if($34){label=10;break;}else{label=24;break;}
 case 10: 
 var $36=HEAP32[(($27)>>2)];
 var $37=HEAP32[(($26)>>2)];
 var $38=($36|0)==($37|0);
 if($38){var $94=$37;label=30;break;}else{label=11;break;}
 case 11: 
 var $39=(($4+16)|0);
 var $40=(($4+20)|0);
 var $41=(($4+12)|0);
 var $n_099=0;var $42=$37;label=12;break;
 case 12: 
 var $42;
 var $n_099;
 var $43=(($42+($n_099<<4))|0);
 var $44=HEAP32[(($39)>>2)];
 var $45=HEAP32[(($40)>>2)];
 var $46=($44|0)==($45|0);
 if($46){label=16;break;}else{label=13;break;}
 case 13: 
 var $48=($44|0)==0;
 if($48){var $52=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $50=$44;
 var $51=$43;
 assert(16 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];HEAP32[((($50)+(12))>>2)]=HEAP32[((($51)+(12))>>2)];
 var $_pre=HEAP32[(($39)>>2)];
 var $52=$_pre;label=15;break;
 case 15: 
 var $52;
 var $53=(($52+16)|0);
 HEAP32[(($39)>>2)]=$53;
 label=17;break;
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($41,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $55=((($n_099)+(1))|0);
 var $56=HEAP32[(($27)>>2)];
 var $57=HEAP32[(($26)>>2)];
 var $58=$56;
 var $59=$57;
 var $60=((($58)-($59))|0);
 var $61=$60>>4;
 var $62=($55>>>0)<($61>>>0);
 if($62){var $n_099=$55;var $42=$57;label=12;break;}else{label=29;break;}
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=20;break;
 case 19: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=20;break;
 case 20: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $64=HEAP32[(($26)>>2)];
 var $65=$64;
 var $66=($64|0)==0;
 if($66){label=46;break;}else{label=21;break;}
 case 21: 
 var $67=HEAP32[(($27)>>2)];
 var $68=($64|0)==($67|0);
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $scevgep_i_i_i82=((($67)-(16))|0);
 var $scevgep28_i_i_i83=$scevgep_i_i_i82;
 var $69=(((-$65))|0);
 var $uglygep_i_i_i84=(($scevgep28_i_i_i83+$69)|0);
 var $uglygep29_i_i_i85=$uglygep_i_i_i84;
 var $70=$uglygep29_i_i_i85>>>4;
 var $71=$70^-1;
 var $scevgep30_i_i_i86=(($67+($71<<4))|0);
 HEAP32[(($27)>>2)]=$scevgep30_i_i_i86;
 label=23;break;
 case 23: 
 var $72=$64;
 __ZdlPv($72);
 label=46;break;
 case 24: 
 var $_idx64=(($29)|0);
 var $ld$13$0=(($_idx64)|0);
 var $_idx64_val$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($_idx64+4)|0);
 var $_idx64_val$1=HEAP32[(($ld$14$1)>>2)];
 var $_idx65=(($this+16)|0);
 var $ld$15$0=(($_idx65)|0);
 var $_idx65_val$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($_idx65+4)|0);
 var $_idx65_val$1=HEAP32[(($ld$16$1)>>2)];
 var $p_idx66=(($p)|0);
 var $ld$17$0=(($p_idx66)|0);
 var $p_idx66_val$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($p_idx66+4)|0);
 var $p_idx66_val$1=HEAP32[(($ld$18$1)>>2)];
 var $p_idx67=(($p+8)|0);
 var $ld$19$0=(($p_idx67)|0);
 var $p_idx67_val$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($p_idx67+4)|0);
 var $p_idx67_val$1=HEAP32[(($ld$20$1)>>2)];
 var $74$0=_i64Subtract($_idx64_val$0,$_idx64_val$1,$p_idx66_val$0,$p_idx66_val$1);var $74$1=tempRet0;
 var $75$0=_i64Subtract($_idx65_val$0,$_idx65_val$1,$p_idx67_val$0,$p_idx67_val$1);var $75$1=tempRet0;
 var $76=(($this+64)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78$0=$77;
 var $78$1=(((($77|0)<0))|0)?-1:0;
 var $79=(($78$1|0) < ($74$1|0)) | (((($78$1|0) == ($74$1|0) & ($78$0>>>0) <  ($74$0>>>0))));
 if($79){label=28;break;}else{label=25;break;}
 case 25: 
 var $81=(((-$77))|0);
 var $82$0=$81;
 var $82$1=(((($81|0)<0))|0)?-1:0;
 var $83=(($82$1|0) > ($74$1|0)) | (((($82$1|0) == ($74$1|0) & ($82$0>>>0) >  ($74$0>>>0))));
 if($83){label=28;break;}else{label=26;break;}
 case 26: 
 var $85=(($78$1|0) < ($75$1|0)) | (((($78$1|0) == ($75$1|0) & ($78$0>>>0) <  ($75$0>>>0))));
 var $86=(($82$1|0) > ($75$1|0)) | (((($82$1|0) == ($75$1|0) & ($82$0>>>0) >  ($75$0>>>0))));
 var $or_cond_i90=$85|$86;
 if($or_cond_i90){label=28;break;}else{label=27;break;}
 case 27: 
 var $87$0=___muldi3($74$0,$74$1,$74$0,$74$1);var $87$1=tempRet0;
 var $88$0=___muldi3($75$0,$75$1,$75$0,$75$1);var $88$1=tempRet0;
 var $89$0=_i64Add($88$0,$88$1,$87$0,$87$1);var $89$1=tempRet0;
 var $90=(Math_imul($77,$77)|0);
 var $91$0=$90;
 var $91$1=0;
 var $92=(($89$1|0) > ($91$1|0)) | (((($89$1|0) == ($91$1|0) & ($89$0>>>0) >  ($91$0>>>0))));
 if($92){label=28;break;}else{label=29;break;}
 case 28: 
 var $93=(($4+4)|0);
 HEAP8[($93)]=1;
 label=29;break;
 case 29: 
 var $_pr=HEAP32[(($26)>>2)];
 var $94=$_pr;label=30;break;
 case 30: 
 var $94;
 var $95=$94;
 var $96=($94|0)==0;
 if($96){label=40;break;}else{label=31;break;}
 case 31: 
 var $97=HEAP32[(($27)>>2)];
 var $98=($94|0)==($97|0);
 if($98){label=33;break;}else{label=32;break;}
 case 32: 
 var $scevgep_i_i_i=((($97)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $99=(((-$95))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$99)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $100=$uglygep29_i_i_i>>>4;
 var $101=$100^-1;
 var $scevgep30_i_i_i=(($97+($101<<4))|0);
 HEAP32[(($27)>>2)]=$scevgep30_i_i_i;
 label=33;break;
 case 33: 
 var $102=$94;
 __ZdlPv($102);
 label=40;break;
 case 34: 
 var $104=(($this+69)|0);
 var $105=HEAP8[($104)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=35;break;}
 case 35: 
 var $_idx=(($this+8)|0);
 var $ld$21$0=(($_idx)|0);
 var $_idx_val$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($_idx+4)|0);
 var $_idx_val$1=HEAP32[(($ld$22$1)>>2)];
 var $_idx62=(($this+16)|0);
 var $ld$23$0=(($_idx62)|0);
 var $_idx62_val$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($_idx62+4)|0);
 var $_idx62_val$1=HEAP32[(($ld$24$1)>>2)];
 var $p_idx=(($p)|0);
 var $ld$25$0=(($p_idx)|0);
 var $p_idx_val$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($p_idx+4)|0);
 var $p_idx_val$1=HEAP32[(($ld$26$1)>>2)];
 var $p_idx63=(($p+8)|0);
 var $ld$27$0=(($p_idx63)|0);
 var $p_idx63_val$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($p_idx63+4)|0);
 var $p_idx63_val$1=HEAP32[(($ld$28$1)>>2)];
 var $109$0=_i64Subtract($_idx_val$0,$_idx_val$1,$p_idx_val$0,$p_idx_val$1);var $109$1=tempRet0;
 var $110$0=_i64Subtract($_idx62_val$0,$_idx62_val$1,$p_idx63_val$0,$p_idx63_val$1);var $110$1=tempRet0;
 var $111=(($this+64)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113$0=$112;
 var $113$1=(((($112|0)<0))|0)?-1:0;
 var $114=(($113$1|0) < ($109$1|0)) | (((($113$1|0) == ($109$1|0) & ($113$0>>>0) <  ($109$0>>>0))));
 if($114){label=39;break;}else{label=36;break;}
 case 36: 
 var $116=(((-$112))|0);
 var $117$0=$116;
 var $117$1=(((($116|0)<0))|0)?-1:0;
 var $118=(($117$1|0) > ($109$1|0)) | (((($117$1|0) == ($109$1|0) & ($117$0>>>0) >  ($109$0>>>0))));
 if($118){label=39;break;}else{label=37;break;}
 case 37: 
 var $120=(($113$1|0) < ($110$1|0)) | (((($113$1|0) == ($110$1|0) & ($113$0>>>0) <  ($110$0>>>0))));
 var $121=(($117$1|0) > ($110$1|0)) | (((($117$1|0) == ($110$1|0) & ($117$0>>>0) >  ($110$0>>>0))));
 var $or_cond_i78=$120|$121;
 if($or_cond_i78){label=39;break;}else{label=38;break;}
 case 38: 
 var $122$0=___muldi3($109$0,$109$1,$109$0,$109$1);var $122$1=tempRet0;
 var $123$0=___muldi3($110$0,$110$1,$110$0,$110$1);var $123$1=tempRet0;
 var $124$0=_i64Add($123$0,$123$1,$122$0,$122$1);var $124$1=tempRet0;
 var $125=(Math_imul($112,$112)|0);
 var $126$0=$125;
 var $126$1=0;
 var $127=(($124$1|0) > ($126$1|0)) | (((($124$1|0) == ($126$1|0) & ($124$0>>>0) >  ($126$0>>>0))));
 if($127){label=39;break;}else{label=40;break;}
 case 39: 
 var $128=(($4+4)|0);
 HEAP8[($128)]=1;
 label=40;break;
 case 40: 
 var $129=(($4+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($4+20)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($130|0)==($132|0);
 if($133){label=44;break;}else{label=41;break;}
 case 41: 
 var $135=($130|0)==0;
 if($135){var $139=0;label=43;break;}else{label=42;break;}
 case 42: 
 var $137=$130;
 var $138=$p;
 assert(16 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];HEAP32[((($137)+(8))>>2)]=HEAP32[((($138)+(8))>>2)];HEAP32[((($137)+(12))>>2)]=HEAP32[((($138)+(12))>>2)];
 var $_pre100=HEAP32[(($129)>>2)];
 var $139=$_pre100;label=43;break;
 case 43: 
 var $139;
 var $140=(($139+16)|0);
 HEAP32[(($129)>>2)]=$140;
 label=45;break;
 case 44: 
 var $142=(($4+12)|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($142,$p);
 label=45;break;
 case 45: 
 var $143=(($this+8)|0);
 var $144=$143;
 var $145=$p;
 assert(16 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];HEAP32[((($144)+(8))>>2)]=HEAP32[((($145)+(8))>>2)];HEAP32[((($144)+(12))>>2)]=HEAP32[((($145)+(12))>>2)];
 STACKTOP=sp;return;
 case 46: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner17forceNewPathStartEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=(($1+12)|0);
 var $4=(($1+16)|0);
 var $5=(($this+28)|0);
 var $6=$1;
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0; HEAP32[((($6)+(12))>>2)]=0; HEAP32[((($6)+(16))>>2)]=0; HEAP32[((($6)+(20))>>2)]=0;
 var $7=HEAP32[(($5)>>2)];
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=5;break;}else{label=2;break;}
 case 2: 
 var $12=($7|0)==0;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($7)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=(($7+4)|0);
 HEAP8[($14)]=0;
 var $15=(($7+8)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0; HEAP32[((($16)+(12))>>2)]=0;
 label=4;break;
 case 4: 
 var $17=HEAP32[(($5)>>2)];
 var $18=(($17+24)|0);
 HEAP32[(($5)>>2)]=$18;
 label=10;break;
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI9GCodePathNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($2,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $_pre38=HEAP32[(($3)>>2)];
 var $20=$_pre38;
 var $21=($_pre38|0)==0;
 if($21){label=10;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($4)>>2)];
 var $23=($_pre38|0)==($22|0);
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 var $scevgep_i_i_i_i_i29=((($22)-(16))|0);
 var $scevgep28_i_i_i_i_i30=$scevgep_i_i_i_i_i29;
 var $24=(((-$20))|0);
 var $uglygep_i_i_i_i_i31=(($scevgep28_i_i_i_i_i30+$24)|0);
 var $uglygep29_i_i_i_i_i32=$uglygep_i_i_i_i_i31;
 var $25=$uglygep29_i_i_i_i_i32>>>4;
 var $26=$25^-1;
 var $scevgep30_i_i_i_i_i33=(($22+($26<<4))|0);
 HEAP32[(($4)>>2)]=$scevgep30_i_i_i_i_i33;
 label=9;break;
 case 9: 
 var $27=$_pre38;
 __ZdlPv($27);
 label=10;break;
 case 10: 
 var $28=HEAP32[(($5)>>2)];
 var $29=(($2)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$28;
 var $32=$30;
 var $33=((($31)-($32))|0);
 var $34=(((($33|0))/(24))&-1);
 var $35=((($34)-(1))|0);
 var $36=(($30+((($35)*(24))&-1)+4)|0);
 HEAP8[($36)]=0;
 var $37=(($this+40)|0);
 var $38=(($30+((($35)*(24))&-1))|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($this+60)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($30+((($35)*(24))&-1)+8)|0);
 HEAP32[(($41)>>2)]=$40;
 STACKTOP=sp;return;
 case 11: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1); var $42$1 = tempRet0;
 var $_pre=HEAP32[(($3)>>2)];
 var $43=$_pre;
 var $44=($_pre|0)==0;
 if($44){label=15;break;}else{label=12;break;}
 case 12: 
 var $45=HEAP32[(($4)>>2)];
 var $46=($_pre|0)==($45|0);
 if($46){label=14;break;}else{label=13;break;}
 case 13: 
 var $scevgep_i_i_i_i_i=((($45)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $47=(((-$43))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$47)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $48=$uglygep29_i_i_i_i_i>>>4;
 var $49=$48^-1;
 var $scevgep30_i_i_i_i_i=(($45+($49<<4))|0);
 HEAP32[(($4)>>2)]=$scevgep30_i_i_i_i_i;
 label=14;break;
 case 14: 
 var $50=$_pre;
 __ZdlPv($50);
 label=15;break;
 case 15: 
 ___resumeException($42$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI9GCodePathNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>178956970;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(24))&-1);
 var $21=($20>>>0)>89478484;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(24))&-1);
 var $_095=178956970;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(24))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $39=0;var $_096=0;var $38=$31;label=7;break;}else{var $_095=$_sroa_speculated;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $_095;
 var $35=((($_095)*(24))&-1);
 var $36=__Znwj($35);
 var $37=$36;
 var $39=$37;var $_096=$_095;var $38=$34;label=7;break;
 case 7: 
 var $38;
 var $_096;
 var $39;
 var $40=(($39+((($38)*(24))&-1))|0);
 var $41=(($39+((($_096)*(24))&-1))|0);
 var $42=($40|0)==0;
 if($42){label=20;break;}else{label=8;break;}
 case 8: 
 var $44=(($40)|0);
 var $45=(($__x)|0);
 var $46=HEAP32[(($45)>>2)];
 HEAP32[(($44)>>2)]=$46;
 var $47=(($39+((($38)*(24))&-1)+4)|0);
 var $48=(($__x+4)|0);
 var $49=HEAP8[($48)];
 var $50=$49&1;
 HEAP8[($47)]=$50;
 var $51=(($39+((($38)*(24))&-1)+8)|0);
 var $52=(($__x+8)|0);
 var $53=HEAP32[(($52)>>2)];
 HEAP32[(($51)>>2)]=$53;
 var $54=(($39+((($38)*(24))&-1)+12)|0);
 var $55=(($54)|0);
 HEAP32[(($55)>>2)]=0;
 var $56=(($39+((($38)*(24))&-1)+16)|0);
 HEAP32[(($56)>>2)]=0;
 var $57=(($39+((($38)*(24))&-1)+20)|0);
 HEAP32[(($57)>>2)]=0;
 var $58=(($__x+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($__x+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$59;
 var $63=$61;
 var $64=((($62)-($63))|0);
 var $65=$64>>4;
 var $66=($65|0)==0;
 if($66){label=20;break;}else{label=9;break;}
 case 9: 
 var $68=($65>>>0)>268435455;
 if($68){label=10;break;}else{label=11;break;}
 case 10: 
 var $70=$54;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=16;break; }
 case 11: 
 var $71=(function() { try { __THREW__ = 0; return __Znwj($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $73=$71;
 HEAP32[(($56)>>2)]=$73;
 HEAP32[(($55)>>2)]=$73;
 var $74=(($73+($65<<4))|0);
 HEAP32[(($57)>>2)]=$74;
 var $75=HEAP32[(($60)>>2)];
 var $76=HEAP32[(($58)>>2)];
 var $77=($75|0)==($76|0);
 if($77){label=20;break;}else{var $_011_i_i_i_i_i=$75;var $78=$73;label=13;break;}
 case 13: 
 var $78;
 var $_011_i_i_i_i_i;
 var $79=($78|0)==0;
 if($79){var $83=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $81=$78;
 var $82=$_011_i_i_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];HEAP32[((($81)+(12))>>2)]=HEAP32[((($82)+(12))>>2)];
 var $_pre12_i_i_i_i_i=HEAP32[(($56)>>2)];
 var $83=$_pre12_i_i_i_i_i;label=15;break;
 case 15: 
 var $83;
 var $84=(($83+16)|0);
 HEAP32[(($56)>>2)]=$84;
 var $85=(($_011_i_i_i_i_i+16)|0);
 var $86=($85|0)==($76|0);
 if($86){label=20;break;}else{var $_011_i_i_i_i_i=$85;var $78=$84;label=13;break;}
 case 16: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1); var $88$1 = tempRet0;
 var $89=HEAP32[(($55)>>2)];
 var $90=$89;
 var $91=($89|0)==0;
 if($91){var $eh_lpad_body8797$1=$88$1;var $eh_lpad_body8797$0=$88$0;label=52;break;}else{label=17;break;}
 case 17: 
 var $92=HEAP32[(($56)>>2)];
 var $93=($89|0)==($92|0);
 if($93){label=19;break;}else{label=18;break;}
 case 18: 
 var $scevgep_i_i_i_i_i=((($92)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $94=(((-$90))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$94)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $95=$uglygep29_i_i_i_i_i>>>4;
 var $96=$95^-1;
 var $scevgep30_i_i_i_i_i=(($92+($96<<4))|0);
 HEAP32[(($56)>>2)]=$scevgep30_i_i_i_i_i;
 label=19;break;
 case 19: 
 var $97=$89;
 __ZdlPv($97);
 var $eh_lpad_body87$1=$88$1;var $eh_lpad_body87$0=$88$0;label=51;break;
 case 20: 
 var $_sum=((($38)+(1))|0);
 var $98=(($39+((($_sum)*(24))&-1))|0);
 var $99=HEAP32[(($3)>>2)];
 var $100=HEAP32[(($1)>>2)];
 var $101=($100|0)==($99|0);
 if($101){label=21;break;}else{var $_049_i=$100;var $__v_sroa_1_4_load7182=$40;label=22;break;}
 case 21: 
 HEAP32[(($3)>>2)]=$40;
 HEAP32[(($1)>>2)]=$98;
 HEAP32[(($15)>>2)]=$41;
 var $177=$99;label=42;break;
 case 22: 
 var $__v_sroa_1_4_load7182;
 var $_049_i;
 var $102=((($__v_sroa_1_4_load7182)-(24))|0);
 var $103=((($_049_i)-(24))|0);
 var $104=($102|0)==0;
 if($104){label=35;break;}else{label=23;break;}
 case 23: 
 var $106=(($102)|0);
 var $107=(($103)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP32[(($106)>>2)]=$108;
 var $109=((($__v_sroa_1_4_load7182)-(24)+4)|0);
 var $110=((($_049_i)-(24)+4)|0);
 var $111=HEAP8[($110)];
 var $112=$111&1;
 HEAP8[($109)]=$112;
 var $113=((($__v_sroa_1_4_load7182)-(24)+8)|0);
 var $114=((($_049_i)-(24)+8)|0);
 var $115=HEAP32[(($114)>>2)];
 HEAP32[(($113)>>2)]=$115;
 var $116=((($__v_sroa_1_4_load7182)-(24)+12)|0);
 var $117=(($116)|0);
 HEAP32[(($117)>>2)]=0;
 var $118=((($__v_sroa_1_4_load7182)-(24)+16)|0);
 HEAP32[(($118)>>2)]=0;
 var $119=((($__v_sroa_1_4_load7182)-(24)+20)|0);
 HEAP32[(($119)>>2)]=0;
 var $120=((($_049_i)-(24)+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=((($_049_i)-(24)+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$121;
 var $125=$123;
 var $126=((($124)-($125))|0);
 var $127=$126>>4;
 var $128=($127|0)==0;
 if($128){label=35;break;}else{label=24;break;}
 case 24: 
 var $130=($127>>>0)>268435455;
 if($130){label=25;break;}else{label=26;break;}
 case 25: 
 var $132=$116;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=31;break; }
 case 26: 
 var $133=(function() { try { __THREW__ = 0; return __Znwj($126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 var $135=$133;
 HEAP32[(($118)>>2)]=$135;
 HEAP32[(($117)>>2)]=$135;
 var $136=(($135+($127<<4))|0);
 HEAP32[(($119)>>2)]=$136;
 var $137=HEAP32[(($122)>>2)];
 var $138=HEAP32[(($120)>>2)];
 var $139=($137|0)==($138|0);
 if($139){label=35;break;}else{var $_011_i_i_i_i_i38=$137;var $140=$135;label=28;break;}
 case 28: 
 var $140;
 var $_011_i_i_i_i_i38;
 var $141=($140|0)==0;
 if($141){var $145=0;label=30;break;}else{label=29;break;}
 case 29: 
 var $143=$140;
 var $144=$_011_i_i_i_i_i38;
 assert(16 % 1 === 0);HEAP32[(($143)>>2)]=HEAP32[(($144)>>2)];HEAP32[((($143)+(4))>>2)]=HEAP32[((($144)+(4))>>2)];HEAP32[((($143)+(8))>>2)]=HEAP32[((($144)+(8))>>2)];HEAP32[((($143)+(12))>>2)]=HEAP32[((($144)+(12))>>2)];
 var $_pre12_i_i_i_i_i40=HEAP32[(($118)>>2)];
 var $145=$_pre12_i_i_i_i_i40;label=30;break;
 case 30: 
 var $145;
 var $146=(($145+16)|0);
 HEAP32[(($118)>>2)]=$146;
 var $147=(($_011_i_i_i_i_i38+16)|0);
 var $148=($147|0)==($138|0);
 if($148){label=35;break;}else{var $_011_i_i_i_i_i38=$147;var $140=$146;label=28;break;}
 case 31: 
 var $150$0 = ___cxa_find_matching_catch(-1, -1); var $150$1 = tempRet0;
 var $151=HEAP32[(($117)>>2)];
 var $152=$151;
 var $153=($151|0)==0;
 if($153){label=45;break;}else{label=32;break;}
 case 32: 
 var $154=HEAP32[(($118)>>2)];
 var $155=($151|0)==($154|0);
 if($155){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i_i_i43=((($154)-(16))|0);
 var $scevgep28_i_i_i_i_i44=$scevgep_i_i_i_i_i43;
 var $156=(((-$152))|0);
 var $uglygep_i_i_i_i_i45=(($scevgep28_i_i_i_i_i44+$156)|0);
 var $uglygep29_i_i_i_i_i46=$uglygep_i_i_i_i_i45;
 var $157=$uglygep29_i_i_i_i_i46>>>4;
 var $158=$157^-1;
 var $scevgep30_i_i_i_i_i47=(($154+($158<<4))|0);
 HEAP32[(($118)>>2)]=$scevgep30_i_i_i_i_i47;
 label=34;break;
 case 34: 
 var $159=$151;
 __ZdlPv($159);
 label=45;break;
 case 35: 
 var $160=($103|0)==($99|0);
 if($160){label=36;break;}else{var $_049_i=$103;var $__v_sroa_1_4_load7182=$102;label=22;break;}
 case 36: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre94=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$102;
 HEAP32[(($1)>>2)]=$98;
 HEAP32[(($15)>>2)]=$41;
 var $162=($_pre_i|0)==($_pre94|0);
 if($162){var $177=$_pre_i;label=42;break;}else{var $163=$_pre94;label=37;break;}
 case 37: 
 var $163;
 var $164=((($163)-(24))|0);
 var $165=((($163)-(24)+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=$166;
 var $168=($166|0)==0;
 if($168){label=38;break;}else{label=39;break;}
 case 38: 
 var $169=($_pre_i|0)==($164|0);
 if($169){var $177=$_pre_i;label=42;break;}else{var $163=$164;label=37;break;}
 case 39: 
 var $170=((($163)-(24)+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($166|0)==($171|0);
 if($172){label=41;break;}else{label=40;break;}
 case 40: 
 var $scevgep_i_i_i_i_i_i_i57=((($171)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i58=$scevgep_i_i_i_i_i_i_i57;
 var $173=(((-$167))|0);
 var $uglygep_i_i_i_i_i_i_i59=(($scevgep28_i_i_i_i_i_i_i58+$173)|0);
 var $uglygep29_i_i_i_i_i_i_i60=$uglygep_i_i_i_i_i_i_i59;
 var $174=$uglygep29_i_i_i_i_i_i_i60>>>4;
 var $175=$174^-1;
 var $scevgep30_i_i_i_i_i_i_i61=(($171+($175<<4))|0);
 HEAP32[(($170)>>2)]=$scevgep30_i_i_i_i_i_i_i61;
 label=41;break;
 case 41: 
 var $176=$166;
 __ZdlPv($176);
 label=38;break;
 case 42: 
 var $177;
 var $178=($177|0)==0;
 if($178){label=44;break;}else{label=43;break;}
 case 43: 
 var $180=$177;
 __ZdlPv($180);
 label=44;break;
 case 44: 
 return;
 case 45: 
 var $181=($__v_sroa_1_4_load7182|0)==($98|0);
 if($181){var $eh_lpad_body87$1=$150$1;var $eh_lpad_body87$0=$150$0;label=51;break;}else{var $182=$98;label=46;break;}
 case 46: 
 var $182;
 var $183=((($182)-(24))|0);
 var $184=((($182)-(24)+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=$185;
 var $187=($185|0)==0;
 if($187){label=47;break;}else{label=48;break;}
 case 47: 
 var $188=($__v_sroa_1_4_load7182|0)==($183|0);
 if($188){var $eh_lpad_body87$1=$150$1;var $eh_lpad_body87$0=$150$0;label=51;break;}else{var $182=$183;label=46;break;}
 case 48: 
 var $189=((($182)-(24)+16)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($185|0)==($190|0);
 if($191){label=50;break;}else{label=49;break;}
 case 49: 
 var $scevgep_i_i_i_i_i_i_i=((($190)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $192=(((-$186))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$192)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $193=$uglygep29_i_i_i_i_i_i_i>>>4;
 var $194=$193^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($190+($194<<4))|0);
 HEAP32[(($189)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=50;break;
 case 50: 
 var $195=$185;
 __ZdlPv($195);
 label=47;break;
 case 51: 
 var $eh_lpad_body87$0;
 var $eh_lpad_body87$1;
 var $196=($39|0)==0;
 if($196){var $eh_lpad_body8798$1=$eh_lpad_body87$1;var $eh_lpad_body8798$0=$eh_lpad_body87$0;label=53;break;}else{var $eh_lpad_body8797$1=$eh_lpad_body87$1;var $eh_lpad_body8797$0=$eh_lpad_body87$0;label=52;break;}
 case 52: 
 var $eh_lpad_body8797$0;
 var $eh_lpad_body8797$1;
 var $197=$39;
 __ZdlPv($197);
 var $eh_lpad_body8798$1=$eh_lpad_body8797$1;var $eh_lpad_body8798$0=$eh_lpad_body8797$0;label=53;break;
 case 53: 
 var $eh_lpad_body8798$0;
 var $eh_lpad_body8798$1;
 ___resumeException($eh_lpad_body8798$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner23getLatestPathWithConfigEP15GCodePathConfig($this,$config){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=(($this+28)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$6;
 var $10=$4;
 var $11=((($10)-($9))|0);
 var $12=(((($11|0))/(24))&-1);
 var $13=((($12)-(1))|0);
 var $14=(($6+((($13)*(24))&-1))|0);
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==($config|0);
 if($17){var $_0=$14;label=17;break;}else{label=3;break;}
 case 3: 
 var $19=(($1+12)|0);
 var $20=(($1+16)|0);
 var $21=(($this+32)|0);
 var $22=$1;
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0; HEAP32[((($22)+(12))>>2)]=0; HEAP32[((($22)+(16))>>2)]=0; HEAP32[((($22)+(20))>>2)]=0;
 var $23=HEAP32[(($21)>>2)];
 var $24=($4|0)==($23|0);
 if($24){label=7;break;}else{label=4;break;}
 case 4: 
 var $26=($4|0)==0;
 if($26){label=6;break;}else{label=5;break;}
 case 5: 
 var $27=(($4)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=(($4+4)|0);
 HEAP8[($28)]=0;
 var $29=(($4+8)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=0; HEAP32[((($30)+(4))>>2)]=0; HEAP32[((($30)+(8))>>2)]=0; HEAP32[((($30)+(12))>>2)]=0;
 label=6;break;
 case 6: 
 var $31=HEAP32[(($3)>>2)];
 var $32=(($31+24)|0);
 HEAP32[(($3)>>2)]=$32;
 label=12;break;
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI9GCodePathNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($2,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=13;break; }
 case 8: 
 var $_pre49=HEAP32[(($19)>>2)];
 var $34=$_pre49;
 var $35=($_pre49|0)==0;
 if($35){label=12;break;}else{label=9;break;}
 case 9: 
 var $36=HEAP32[(($20)>>2)];
 var $37=($_pre49|0)==($36|0);
 if($37){label=11;break;}else{label=10;break;}
 case 10: 
 var $scevgep_i_i_i_i_i40=((($36)-(16))|0);
 var $scevgep28_i_i_i_i_i41=$scevgep_i_i_i_i_i40;
 var $38=(((-$34))|0);
 var $uglygep_i_i_i_i_i42=(($scevgep28_i_i_i_i_i41+$38)|0);
 var $uglygep29_i_i_i_i_i43=$uglygep_i_i_i_i_i42;
 var $39=$uglygep29_i_i_i_i_i43>>>4;
 var $40=$39^-1;
 var $scevgep30_i_i_i_i_i44=(($36+($40<<4))|0);
 HEAP32[(($20)>>2)]=$scevgep30_i_i_i_i_i44;
 label=11;break;
 case 11: 
 var $41=$_pre49;
 __ZdlPv($41);
 label=12;break;
 case 12: 
 var $42=HEAP32[(($3)>>2)];
 var $43=HEAP32[(($5)>>2)];
 var $44=$42;
 var $45=$43;
 var $46=((($44)-($45))|0);
 var $47=(((($46|0))/(24))&-1);
 var $48=((($47)-(1))|0);
 var $49=(($43+((($48)*(24))&-1))|0);
 var $50=(($43+((($48)*(24))&-1)+4)|0);
 HEAP8[($50)]=0;
 var $51=(($49)|0);
 HEAP32[(($51)>>2)]=$config;
 var $52=(($this+60)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($43+((($48)*(24))&-1)+8)|0);
 HEAP32[(($54)>>2)]=$53;
 var $_0=$49;label=17;break;
 case 13: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $_pre=HEAP32[(($19)>>2)];
 var $56=$_pre;
 var $57=($_pre|0)==0;
 if($57){label=18;break;}else{label=14;break;}
 case 14: 
 var $58=HEAP32[(($20)>>2)];
 var $59=($_pre|0)==($58|0);
 if($59){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i=((($58)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $60=(((-$56))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$60)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $61=$uglygep29_i_i_i_i_i>>>4;
 var $62=$61^-1;
 var $scevgep30_i_i_i_i_i=(($58+($62<<4))|0);
 HEAP32[(($20)>>2)]=$scevgep30_i_i_i_i_i;
 label=16;break;
 case 16: 
 var $63=$_pre;
 __ZdlPv($63);
 label=18;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
 case 18: 
 ___resumeException($55$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4Comb4calcEN10ClipperLib8IntPointES1_RNSt3__16vectorIS1_NS2_9allocatorIS1_EEEE($this,$startPoint,$endPoint,$combPoints){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $startPoint; $startPoint=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($startPoint)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($startPoint)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($startPoint)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($startPoint)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var tempParam = $endPoint; $endPoint=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($endPoint)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($endPoint)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($endPoint)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($endPoint)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $pointList=(sp)+(32);
 var $3=(sp)+(48);
 var $4=(sp)+(64);
 var $5=(sp)+(80);
 var $6=(sp)+(96);
 var $p0=(sp)+(112);
 var $7=(sp)+(128);
 var $8=(sp)+(144);
 var $9=(sp)+(160);
 var $10=(sp)+(176);
 var $endPoint_idx=(($endPoint)|0);
 var $ld$0$0=(($endPoint_idx)|0);
 var $endPoint_idx_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($endPoint_idx+4)|0);
 var $endPoint_idx_val$1=HEAP32[(($ld$1$1)>>2)];
 var $endPoint_idx199=(($endPoint+8)|0);
 var $ld$2$0=(($endPoint_idx199)|0);
 var $endPoint_idx199_val$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($endPoint_idx199+4)|0);
 var $endPoint_idx199_val$1=HEAP32[(($ld$3$1)>>2)];
 var $startPoint_idx=(($startPoint)|0);
 var $ld$4$0=(($startPoint_idx)|0);
 var $startPoint_idx_val$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($startPoint_idx+4)|0);
 var $startPoint_idx_val$1=HEAP32[(($ld$5$1)>>2)];
 var $startPoint_idx200=(($startPoint+8)|0);
 var $ld$6$0=(($startPoint_idx200)|0);
 var $startPoint_idx200_val$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($startPoint_idx200+4)|0);
 var $startPoint_idx200_val$1=HEAP32[(($ld$7$1)>>2)];
 var $11$0=_i64Subtract($endPoint_idx_val$0,$endPoint_idx_val$1,$startPoint_idx_val$0,$startPoint_idx_val$1);var $11$1=tempRet0;
 var $12$0=_i64Subtract($endPoint_idx199_val$0,$endPoint_idx199_val$1,$startPoint_idx200_val$0,$startPoint_idx200_val$1);var $12$1=tempRet0;
 var $$etemp$8$0=1500;
 var $$etemp$8$1=0;
 var $_off$0=_i64Add($11$0,$11$1,$$etemp$8$0,$$etemp$8$1);var $_off$1=tempRet0;
 var $$etemp$9$0=3000;
 var $$etemp$9$1=0;
 var $13=(($_off$1>>>0) > ($$etemp$9$1>>>0)) | (((($_off$1>>>0) == ($$etemp$9$1>>>0) & ($_off$0>>>0) >  ($$etemp$9$0>>>0))));
 if($13){label=4;break;}else{label=2;break;}
 case 2: 
 var $$etemp$10$0=1500;
 var $$etemp$10$1=0;
 var $_off266$0=_i64Add($12$0,$12$1,$$etemp$10$0,$$etemp$10$1);var $_off266$1=tempRet0;
 var $$etemp$11$0=3000;
 var $$etemp$11$1=0;
 var $15=(($_off266$1>>>0) > ($$etemp$11$1>>>0)) | (((($_off266$1>>>0) == ($$etemp$11$1>>>0) & ($_off266$0>>>0) >  ($$etemp$11$0>>>0))));
 if($15){label=4;break;}else{label=3;break;}
 case 3: 
 var $16$0=___muldi3($11$0,$11$1,$11$0,$11$1);var $16$1=tempRet0;
 var $17$0=___muldi3($12$0,$12$1,$12$0,$12$1);var $17$1=tempRet0;
 var $18$0=_i64Add($17$0,$17$1,$16$0,$16$1);var $18$1=tempRet0;
 var $$etemp$12$0=2250001;
 var $$etemp$12$1=0;
 var $19=(($18$1|0) < ($$etemp$12$1|0)) | (((($18$1|0) == ($$etemp$12$1|0) & ($18$0>>>0) <  ($$etemp$12$0>>>0))));
 if($19){var $_1=1;label=108;break;}else{label=4;break;}
 case 4: 
 var $20=$startPoint;
 var $21=(($this)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($22)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=15;break;}else{label=5;break;}
 case 5: 
 var $28=$24;
 var $29=$26;
 var $30=((($28)-($29))|0);
 var $31=(((($30|0))/(12))&-1);
 var $n_047_i=0;var $crossings_048_i=0;label=6;break;
 case 6: 
 var $crossings_048_i;
 var $n_047_i;
 var $33=(($26+((($n_047_i)*(12))&-1)+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($26+((($n_047_i)*(12))&-1))|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$34;
 var $38=$36;
 var $39=((($37)-($38))|0);
 var $40=$39>>4;
 var $41=($40|0)==0;
 if($41){var $crossings_3_i=$crossings_048_i;label=13;break;}else{label=7;break;}
 case 7: 
 var $43=((($40)-(1))|0);
 var $44=($34|0)==($36|0);
 if($44){var $crossings_3_i=$crossings_048_i;label=13;break;}else{label=8;break;}
 case 8: 
 var $p0_sroa_1_8__idx14_i=(($36+($43<<4)+8)|0);
 var $p0_sroa_0_0__idx_i=(($36+($43<<4))|0);
 var $ld$13$0=(($p0_sroa_1_8__idx14_i)|0);
 var $p0_sroa_1_8_copyload_i$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($p0_sroa_1_8__idx14_i+4)|0);
 var $p0_sroa_1_8_copyload_i$1=HEAP32[(($ld$14$1)>>2)];
 var $ld$15$0=(($p0_sroa_0_0__idx_i)|0);
 var $p0_sroa_0_0_copyload_i$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($p0_sroa_0_0__idx_i+4)|0);
 var $p0_sroa_0_0_copyload_i$1=HEAP32[(($ld$16$1)>>2)];
 var $p0_sroa_1_043_i$1=$p0_sroa_1_8_copyload_i$1;var $p0_sroa_1_043_i$0=$p0_sroa_1_8_copyload_i$0;var $p0_sroa_0_044_i$1=$p0_sroa_0_0_copyload_i$1;var $p0_sroa_0_044_i$0=$p0_sroa_0_0_copyload_i$0;var $i_045_i=0;var $crossings_146_i=$crossings_048_i;label=9;break;
 case 9: 
 var $crossings_146_i;
 var $i_045_i;
 var $p0_sroa_0_044_i$0;
 var $p0_sroa_0_044_i$1;
 var $p0_sroa_1_043_i$0;
 var $p0_sroa_1_043_i$1;
 var $p1_sroa_0_0__idx1_i=(($36+($i_045_i<<4))|0);
 var $ld$17$0=(($p1_sroa_0_0__idx1_i)|0);
 var $p1_sroa_0_0_copyload2_i$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($p1_sroa_0_0__idx1_i+4)|0);
 var $p1_sroa_0_0_copyload2_i$1=HEAP32[(($ld$18$1)>>2)];
 var $p1_sroa_1_8__idx6_i=(($36+($i_045_i<<4)+8)|0);
 var $ld$19$0=(($p1_sroa_1_8__idx6_i)|0);
 var $p1_sroa_1_8_copyload7_i$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($p1_sroa_1_8__idx6_i+4)|0);
 var $p1_sroa_1_8_copyload7_i$1=HEAP32[(($ld$20$1)>>2)];
 var $46=(($p0_sroa_1_043_i$1|0) >= ($startPoint_idx200_val$1|0)) & (((($p0_sroa_1_043_i$1|0) >  ($startPoint_idx200_val$1|0)) | ($p0_sroa_1_043_i$0>>>0) >= ($startPoint_idx200_val$0>>>0)));
 var $47=(($p1_sroa_1_8_copyload7_i$1|0) < ($startPoint_idx200_val$1|0)) | (((($p1_sroa_1_8_copyload7_i$1|0) == ($startPoint_idx200_val$1|0) & ($p1_sroa_1_8_copyload7_i$0>>>0) <  ($startPoint_idx200_val$0>>>0))));
 var $or_cond_i202=$46&$47;
 if($or_cond_i202){label=11;break;}else{label=10;break;}
 case 10: 
 var $49=(($p1_sroa_1_8_copyload7_i$1|0) <= ($startPoint_idx200_val$1|0)) & (((($p1_sroa_1_8_copyload7_i$1|0) <  ($startPoint_idx200_val$1|0)) | ($p1_sroa_1_8_copyload7_i$0>>>0) <= ($startPoint_idx200_val$0>>>0)));
 var $50=(($p0_sroa_1_043_i$1|0) > ($startPoint_idx200_val$1|0)) | (((($p0_sroa_1_043_i$1|0) == ($startPoint_idx200_val$1|0) & ($p0_sroa_1_043_i$0>>>0) >  ($startPoint_idx200_val$0>>>0))));
 var $or_cond41_i=$49|$50;
 if($or_cond41_i){var $crossings_2_i=$crossings_146_i;label=12;break;}else{label=11;break;}
 case 11: 
 var $52$0=_i64Subtract($p1_sroa_0_0_copyload2_i$0,$p1_sroa_0_0_copyload2_i$1,$p0_sroa_0_044_i$0,$p0_sroa_0_044_i$1);var $52$1=tempRet0;
 var $53$0=_i64Subtract($startPoint_idx200_val$0,$startPoint_idx200_val$1,$p0_sroa_1_043_i$0,$p0_sroa_1_043_i$1);var $53$1=tempRet0;
 var $54$0=___muldi3($52$0,$52$1,$53$0,$53$1);var $54$1=tempRet0;
 var $55$0=_i64Subtract($p1_sroa_1_8_copyload7_i$0,$p1_sroa_1_8_copyload7_i$1,$p0_sroa_1_043_i$0,$p0_sroa_1_043_i$1);var $55$1=tempRet0;
 var $56$0=___divdi3($54$0,$54$1,$55$0,$55$1);var $56$1=tempRet0;
 var $57$0=_i64Add($56$0,$56$1,$p0_sroa_0_044_i$0,$p0_sroa_0_044_i$1);var $57$1=tempRet0;
 var $not_42_i=(($57$1|0) >= ($startPoint_idx_val$1|0)) & (((($57$1|0) >  ($startPoint_idx_val$1|0)) | ($57$0>>>0) >= ($startPoint_idx_val$0>>>0)));
 var $58=($not_42_i&1);
 var $crossings_1__i=((($58)+($crossings_146_i))|0);
 var $crossings_2_i=$crossings_1__i;label=12;break;
 case 12: 
 var $crossings_2_i;
 var $60=((($i_045_i)+(1))|0);
 var $61=($60>>>0)<($40>>>0);
 if($61){var $p0_sroa_1_043_i$1=$p1_sroa_1_8_copyload7_i$1;var $p0_sroa_1_043_i$0=$p1_sroa_1_8_copyload7_i$0;var $p0_sroa_0_044_i$1=$p1_sroa_0_0_copyload2_i$1;var $p0_sroa_0_044_i$0=$p1_sroa_0_0_copyload2_i$0;var $i_045_i=$60;var $crossings_146_i=$crossings_2_i;label=9;break;}else{var $crossings_3_i=$crossings_2_i;label=13;break;}
 case 13: 
 var $crossings_3_i;
 var $62=((($n_047_i)+(1))|0);
 var $63=($62>>>0)<($31>>>0);
 if($63){var $n_047_i=$62;var $crossings_048_i=$crossings_3_i;label=6;break;}else{label=14;break;}
 case 14: 
 var $64=$crossings_3_i&1;
 var $not__i=($64|0)==0;
 if($not__i){label=15;break;}else{label=21;break;}
 case 15: 
 var $65=__ZN4Comb10moveInsideERN10ClipperLib8IntPointE($this,$startPoint);
 if($65){label=16;break;}else{var $_1=0;label=108;break;}
 case 16: 
 var $67=(($combPoints+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($combPoints+8)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($68|0)==($70|0);
 if($71){label=20;break;}else{label=17;break;}
 case 17: 
 var $73=($68|0)==0;
 if($73){var $76=0;label=19;break;}else{label=18;break;}
 case 18: 
 var $75=$68;
 assert(16 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];HEAP32[((($75)+(12))>>2)]=HEAP32[((($20)+(12))>>2)];
 var $_pre=HEAP32[(($67)>>2)];
 var $76=$_pre;label=19;break;
 case 19: 
 var $76;
 var $77=(($76+16)|0);
 HEAP32[(($67)>>2)]=$77;
 label=21;break;
 case 20: 
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($combPoints,$startPoint);
 label=21;break;
 case 21: 
 var $79=$endPoint;
 var $80=HEAP32[(($21)>>2)];
 var $81=(($80+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($80)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($82|0)==($84|0);
 if($85){label=32;break;}else{label=22;break;}
 case 22: 
 var $86=$82;
 var $87=$84;
 var $88=((($86)-($87))|0);
 var $89=(((($88|0))/(12))&-1);
 var $n_047_i205=0;var $crossings_048_i204=0;label=23;break;
 case 23: 
 var $crossings_048_i204;
 var $n_047_i205;
 var $91=(($84+((($n_047_i205)*(12))&-1)+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($84+((($n_047_i205)*(12))&-1))|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$92;
 var $96=$94;
 var $97=((($95)-($96))|0);
 var $98=$97>>4;
 var $99=($98|0)==0;
 if($99){var $crossings_3_i224=$crossings_048_i204;label=30;break;}else{label=24;break;}
 case 24: 
 var $101=((($98)-(1))|0);
 var $102=($92|0)==($94|0);
 if($102){var $crossings_3_i224=$crossings_048_i204;label=30;break;}else{label=25;break;}
 case 25: 
 var $p0_sroa_1_8__idx14_i206=(($94+($101<<4)+8)|0);
 var $p0_sroa_0_0__idx_i207=(($94+($101<<4))|0);
 var $ld$21$0=(($p0_sroa_1_8__idx14_i206)|0);
 var $p0_sroa_1_8_copyload_i208$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($p0_sroa_1_8__idx14_i206+4)|0);
 var $p0_sroa_1_8_copyload_i208$1=HEAP32[(($ld$22$1)>>2)];
 var $ld$23$0=(($p0_sroa_0_0__idx_i207)|0);
 var $p0_sroa_0_0_copyload_i209$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($p0_sroa_0_0__idx_i207+4)|0);
 var $p0_sroa_0_0_copyload_i209$1=HEAP32[(($ld$24$1)>>2)];
 var $p0_sroa_1_043_i214$1=$p0_sroa_1_8_copyload_i208$1;var $p0_sroa_1_043_i214$0=$p0_sroa_1_8_copyload_i208$0;var $p0_sroa_0_044_i213$1=$p0_sroa_0_0_copyload_i209$1;var $p0_sroa_0_044_i213$0=$p0_sroa_0_0_copyload_i209$0;var $i_045_i212=0;var $crossings_146_i211=$crossings_048_i204;label=26;break;
 case 26: 
 var $crossings_146_i211;
 var $i_045_i212;
 var $p0_sroa_0_044_i213$0;
 var $p0_sroa_0_044_i213$1;
 var $p0_sroa_1_043_i214$0;
 var $p0_sroa_1_043_i214$1;
 var $p1_sroa_0_0__idx1_i215=(($94+($i_045_i212<<4))|0);
 var $ld$25$0=(($p1_sroa_0_0__idx1_i215)|0);
 var $p1_sroa_0_0_copyload2_i216$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($p1_sroa_0_0__idx1_i215+4)|0);
 var $p1_sroa_0_0_copyload2_i216$1=HEAP32[(($ld$26$1)>>2)];
 var $p1_sroa_1_8__idx6_i217=(($94+($i_045_i212<<4)+8)|0);
 var $ld$27$0=(($p1_sroa_1_8__idx6_i217)|0);
 var $p1_sroa_1_8_copyload7_i218$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($p1_sroa_1_8__idx6_i217+4)|0);
 var $p1_sroa_1_8_copyload7_i218$1=HEAP32[(($ld$28$1)>>2)];
 var $104=(($p0_sroa_1_043_i214$1|0) >= ($endPoint_idx199_val$1|0)) & (((($p0_sroa_1_043_i214$1|0) >  ($endPoint_idx199_val$1|0)) | ($p0_sroa_1_043_i214$0>>>0) >= ($endPoint_idx199_val$0>>>0)));
 var $105=(($p1_sroa_1_8_copyload7_i218$1|0) < ($endPoint_idx199_val$1|0)) | (((($p1_sroa_1_8_copyload7_i218$1|0) == ($endPoint_idx199_val$1|0) & ($p1_sroa_1_8_copyload7_i218$0>>>0) <  ($endPoint_idx199_val$0>>>0))));
 var $or_cond_i219=$104&$105;
 if($or_cond_i219){label=28;break;}else{label=27;break;}
 case 27: 
 var $107=(($p1_sroa_1_8_copyload7_i218$1|0) <= ($endPoint_idx199_val$1|0)) & (((($p1_sroa_1_8_copyload7_i218$1|0) <  ($endPoint_idx199_val$1|0)) | ($p1_sroa_1_8_copyload7_i218$0>>>0) <= ($endPoint_idx199_val$0>>>0)));
 var $108=(($p0_sroa_1_043_i214$1|0) > ($endPoint_idx199_val$1|0)) | (((($p0_sroa_1_043_i214$1|0) == ($endPoint_idx199_val$1|0) & ($p0_sroa_1_043_i214$0>>>0) >  ($endPoint_idx199_val$0>>>0))));
 var $or_cond41_i220=$107|$108;
 if($or_cond41_i220){var $crossings_2_i223=$crossings_146_i211;label=29;break;}else{label=28;break;}
 case 28: 
 var $110$0=_i64Subtract($p1_sroa_0_0_copyload2_i216$0,$p1_sroa_0_0_copyload2_i216$1,$p0_sroa_0_044_i213$0,$p0_sroa_0_044_i213$1);var $110$1=tempRet0;
 var $111$0=_i64Subtract($endPoint_idx199_val$0,$endPoint_idx199_val$1,$p0_sroa_1_043_i214$0,$p0_sroa_1_043_i214$1);var $111$1=tempRet0;
 var $112$0=___muldi3($110$0,$110$1,$111$0,$111$1);var $112$1=tempRet0;
 var $113$0=_i64Subtract($p1_sroa_1_8_copyload7_i218$0,$p1_sroa_1_8_copyload7_i218$1,$p0_sroa_1_043_i214$0,$p0_sroa_1_043_i214$1);var $113$1=tempRet0;
 var $114$0=___divdi3($112$0,$112$1,$113$0,$113$1);var $114$1=tempRet0;
 var $115$0=_i64Add($114$0,$114$1,$p0_sroa_0_044_i213$0,$p0_sroa_0_044_i213$1);var $115$1=tempRet0;
 var $not_42_i221=(($115$1|0) >= ($endPoint_idx_val$1|0)) & (((($115$1|0) >  ($endPoint_idx_val$1|0)) | ($115$0>>>0) >= ($endPoint_idx_val$0>>>0)));
 var $116=($not_42_i221&1);
 var $crossings_1__i222=((($116)+($crossings_146_i211))|0);
 var $crossings_2_i223=$crossings_1__i222;label=29;break;
 case 29: 
 var $crossings_2_i223;
 var $118=((($i_045_i212)+(1))|0);
 var $119=($118>>>0)<($98>>>0);
 if($119){var $p0_sroa_1_043_i214$1=$p1_sroa_1_8_copyload7_i218$1;var $p0_sroa_1_043_i214$0=$p1_sroa_1_8_copyload7_i218$0;var $p0_sroa_0_044_i213$1=$p1_sroa_0_0_copyload2_i216$1;var $p0_sroa_0_044_i213$0=$p1_sroa_0_0_copyload2_i216$0;var $i_045_i212=$118;var $crossings_146_i211=$crossings_2_i223;label=26;break;}else{var $crossings_3_i224=$crossings_2_i223;label=30;break;}
 case 30: 
 var $crossings_3_i224;
 var $120=((($n_047_i205)+(1))|0);
 var $121=($120>>>0)<($89>>>0);
 if($121){var $n_047_i205=$120;var $crossings_048_i204=$crossings_3_i224;label=23;break;}else{label=31;break;}
 case 31: 
 var $122=$crossings_3_i224&1;
 var $not__i227=($122|0)==0;
 if($not__i227){label=32;break;}else{var $addEndpoint_0_off0=0;label=33;break;}
 case 32: 
 var $123=__ZN4Comb10moveInsideERN10ClipperLib8IntPointE($this,$endPoint);
 if($123){var $addEndpoint_0_off0=1;label=33;break;}else{var $_1=0;label=108;break;}
 case 33: 
 var $addEndpoint_0_off0;
 var $125=$1;
 var $126=$2;
 assert(16 % 1 === 0);HEAP32[(($125)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($125)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($125)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];HEAP32[((($125)+(12))>>2)]=HEAP32[((($20)+(12))>>2)];
 assert(16 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($126)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
 var $127=__ZN4Comb13collisionTestEN10ClipperLib8IntPointES1_($this,$1,$2);
 var $brmerge=$127|$addEndpoint_0_off0;
 if($brmerge){label=35;break;}else{label=34;break;}
 case 34: 
 var $129=(($combPoints+4)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($combPoints)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($130|0)==($132|0);
 if($133){var $_1=1;label=108;break;}else{label=35;break;}
 case 35: 
 __ZN4Comb10calcMinMaxEv($this);
 var $135=(($this+56)|0);
 var $ld$29$0=(($135)|0);
 var $136$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($135+4)|0);
 var $136$1=HEAP32[(($ld$30$1)>>2)];
 var $137=(($pointList)|0);
 HEAP32[(($137)>>2)]=0;
 var $138=(($pointList+4)|0);
 HEAP32[(($138)>>2)]=0;
 var $139=(($pointList+8)|0);
 HEAP32[(($139)>>2)]=0;
 var $140=HEAP32[(($21)>>2)];
 var $141=(($140+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($140)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=82;break;}else{label=36;break;}
 case 36: 
 var $146=(($this+4)|0);
 var $147=(($this+64)|0);
 var $148=(($this+24)|0);
 var $149=(($this+40)|0);
 var $150=(($this+32)|0);
 var $151=(($this+48)|0);
 var $152=(($3)|0);
 var $153=(($3+8)|0);
 var $154=(($this+12)|0);
 var $155=(($this+16)|0);
 var $156=(($this+8)|0);
 var $157=(($6)|0);
 var $158=(($6+8)|0);
 var $159=$6;
 var $160=$5;
 var $161=$4;
 var $162=$3;
 var $x_0284$1=$136$1;var $x_0284$0=$136$0;var $164=$142;var $163=$144;label=37;break;
 case 37: 
 var $163;
 var $164;
 var $x_0284$0;
 var $x_0284$1;
 var $165=HEAP32[(($146)>>2)];
 var $166=$164;
 var $167=$163;
 var $168=((($166)-($167))|0);
 var $169=(((($168|0))/(12))&-1);
 var $min_08_i$1=2147483647;var $min_08_i$0=-1;var $ret_09_i=-1;var $n_010_i=0;label=38;break;
 case 38: 
 var $n_010_i;
 var $ret_09_i;
 var $min_08_i$0;
 var $min_08_i$1;
 var $171=(($165+($n_010_i<<3))|0);
 var $ld$31$0=(($171)|0);
 var $172$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($171+4)|0);
 var $172$1=HEAP32[(($ld$32$1)>>2)];
 var $173=(($172$1|0) > ($x_0284$1|0)) | (((($172$1|0) == ($x_0284$1|0) & ($172$0>>>0) >  ($x_0284$0>>>0))));
 var $174=(($172$1|0) < ($min_08_i$1|0)) | (((($172$1|0) == ($min_08_i$1|0) & ($172$0>>>0) <  ($min_08_i$0>>>0))));
 var $or_cond_i233=$173&$174;
 var $min_1_i$0=$or_cond_i233?$172$0:$min_08_i$0;
 var $min_1_i$1=$or_cond_i233?$172$1:$min_08_i$1;
 var $ret_1_i=$or_cond_i233?$n_010_i:$ret_09_i;
 var $175=((($n_010_i)+(1))|0);
 var $176=($175>>>0)<($169>>>0);
 if($176){var $min_08_i$1=$min_1_i$1;var $min_08_i$0=$min_1_i$0;var $ret_09_i=$ret_1_i;var $n_010_i=$175;label=38;break;}else{label=39;break;}
 case 39: 
 var $177=($ret_1_i|0)==-1;
 if($177){label=82;break;}else{label=49;break;}
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=45;break;
 case 41: 
 var $lpad_loopexit270$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit270$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit270$1;var $lpad_phi$0=$lpad_loopexit270$0;label=45;break;
 case 42: 
 var $lpad_loopexit277$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit277$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit277$1;var $lpad_phi$0=$lpad_loopexit277$0;label=45;break;
 case 43: 
 var $lpad_loopexit281$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit281$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit281$1;var $lpad_phi$0=$lpad_loopexit281$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit282$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit282$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit282$1;var $lpad_phi$0=$lpad_nonloopexit282$0;label=45;break;
 case 45: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $178=HEAP32[(($137)>>2)];
 var $179=$178;
 var $180=($178|0)==0;
 if($180){label=109;break;}else{label=46;break;}
 case 46: 
 var $181=HEAP32[(($138)>>2)];
 var $182=($178|0)==($181|0);
 if($182){label=48;break;}else{label=47;break;}
 case 47: 
 var $scevgep_i_i_i235=((($181)-(16))|0);
 var $scevgep28_i_i_i236=$scevgep_i_i_i235;
 var $183=(((-$179))|0);
 var $uglygep_i_i_i237=(($scevgep28_i_i_i236+$183)|0);
 var $uglygep29_i_i_i238=$uglygep_i_i_i237;
 var $184=$uglygep29_i_i_i238>>>4;
 var $185=$184^-1;
 var $scevgep30_i_i_i239=(($181+($185<<4))|0);
 HEAP32[(($138)>>2)]=$scevgep30_i_i_i239;
 label=48;break;
 case 48: 
 var $186=$178;
 __ZdlPv($186);
 label=109;break;
 case 49: 
 var $188=(($165+($ret_1_i<<3))|0);
 var $ld$33$0=(($188)|0);
 var $189$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($188+4)|0);
 var $189$1=HEAP32[(($ld$34$1)>>2)];
 var $$etemp$35$0=-200;
 var $$etemp$35$1=-1;
 var $190$0=_i64Add($189$0,$189$1,$$etemp$35$0,$$etemp$35$1);var $190$1=tempRet0;
 var $ld$36$0=(($147)|0);
 var $191$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($147+4)|0);
 var $191$1=HEAP32[(($ld$37$1)>>2)];
 var $192=(($190$0>>>0)+(($190$1|0)*4294967296));
 var $193=HEAPF64[(($148)>>3)];
 var $194=($192)*($193);
 var $195=(($191$0>>>0)+(($191$1|0)*4294967296));
 var $196=HEAPF64[(($149)>>3)];
 var $197=($195)*($196);
 var $198=($194)+($197);
 var $199$0=$198>>>0;var $199$1=(Math_abs($198) >= 1 ? ($198 > 0 ? Math_min(Math_floor(($198)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($198 - +(((~~($198)))>>>0))/4294967296)))>>>0) : 0);
 var $200=HEAPF64[(($150)>>3)];
 var $201=($192)*($200);
 var $202=HEAPF64[(($151)>>3)];
 var $203=($195)*($202);
 var $204=($201)+($203);
 var $205$0=$204>>>0;var $205$1=(Math_abs($204) >= 1 ? ($204 > 0 ? Math_min(Math_floor(($204)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($204 - +(((~~($204)))>>>0))/4294967296)))>>>0) : 0);
 var $st$38$0=(($152)|0);
 HEAP32[(($st$38$0)>>2)]=$199$0;
 var $st$39$1=(($152+4)|0);
 HEAP32[(($st$39$1)>>2)]=$199$1;
 var $st$40$0=(($153)|0);
 HEAP32[(($st$40$0)>>2)]=$205$0;
 var $st$41$1=(($153+4)|0);
 HEAP32[(($st$41$1)>>2)]=$205$1;
 var $206=HEAP32[(($138)>>2)];
 var $207=HEAP32[(($139)>>2)];
 var $208=($206|0)==($207|0);
 if($208){label=53;break;}else{label=50;break;}
 case 50: 
 var $210=($206|0)==0;
 if($210){label=52;break;}else{label=51;break;}
 case 51: 
 var $212=$206;
 assert(16 % 1 === 0);HEAP32[(($212)>>2)]=HEAP32[(($162)>>2)];HEAP32[((($212)+(4))>>2)]=HEAP32[((($162)+(4))>>2)];HEAP32[((($212)+(8))>>2)]=HEAP32[((($162)+(8))>>2)];HEAP32[((($212)+(12))>>2)]=HEAP32[((($162)+(12))>>2)];
 label=52;break;
 case 52: 
 var $213=(($206+16)|0);
 HEAP32[(($138)>>2)]=$213;
 label=54;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($pointList,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=43;break; }
 case 54: 
 var $215=HEAP32[(($154)>>2)];
 var $216=(($215+($ret_1_i<<2))|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=HEAP32[(($155)>>2)];
 var $219=(($218+($ret_1_i<<2))|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=((($217)-($220))|0);
 var $222=HEAP32[(($21)>>2)];
 var $223=(($222)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+((($ret_1_i)*(12))&-1)+4)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($224+((($ret_1_i)*(12))&-1))|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=$226;
 var $230=$228;
 var $231=((($229)-($230))|0);
 var $232=$231>>4;
 var $233=((($221)+($232))|0);
 var $234=(((($233>>>0))%(($232>>>0)))&-1);
 var $235=((($220)-($217))|0);
 var $236=((($235)+($232))|0);
 var $237=(((($236>>>0))%(($232>>>0)))&-1);
 var $238=($234>>>0)>($237>>>0);
 if($238){label=55;break;}else{label=62;break;}
 case 55: 
 var $239=($217|0)==($220|0);
 if($239){label=75;break;}else{var $i_0279=$217;label=56;break;}
 case 56: 
 var $i_0279;
 __ZN4Comb26getBounderyPointWithOffsetEjj($4,$this,$ret_1_i,$i_0279);
 var $240=HEAP32[(($138)>>2)];
 var $241=HEAP32[(($139)>>2)];
 var $242=($240|0)==($241|0);
 if($242){label=60;break;}else{label=57;break;}
 case 57: 
 var $244=($240|0)==0;
 if($244){label=59;break;}else{label=58;break;}
 case 58: 
 var $246=$240;
 assert(16 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($161)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($161)+(4))>>2)];HEAP32[((($246)+(8))>>2)]=HEAP32[((($161)+(8))>>2)];HEAP32[((($246)+(12))>>2)]=HEAP32[((($161)+(12))>>2)];
 label=59;break;
 case 59: 
 var $247=(($240+16)|0);
 HEAP32[(($138)>>2)]=$247;
 label=61;break;
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($pointList,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=42;break; }
 case 61: 
 var $249=HEAP32[(($21)>>2)];
 var $250=(($249)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(($251+((($ret_1_i)*(12))&-1)+4)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($251+((($ret_1_i)*(12))&-1))|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=$253;
 var $257=$255;
 var $258=((($256)-($257))|0);
 var $259=$258>>4;
 var $260=((($259)-(1))|0);
 var $261=($i_0279>>>0)<($260>>>0);
 var $262=((($i_0279)+(1))|0);
 var $_=$261?$262:0;
 var $263=HEAP32[(($155)>>2)];
 var $264=(($263+($ret_1_i<<2))|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($_|0)==($265|0);
 if($266){label=75;break;}else{var $i_0279=$_;label=56;break;}
 case 62: 
 var $268=((($217)-(1))|0);
 HEAP32[(($216)>>2)]=$268;
 var $269=HEAP32[(($154)>>2)];
 var $270=(($269+($ret_1_i<<2))|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==-1;
 if($272){label=63;break;}else{label=64;break;}
 case 63: 
 var $274=HEAP32[(($21)>>2)];
 var $275=(($274)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($276+((($ret_1_i)*(12))&-1)+4)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($276+((($ret_1_i)*(12))&-1))|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=$278;
 var $282=$280;
 var $283=((($281)-($282))|0);
 var $284=$283>>4;
 var $285=((($284)-(1))|0);
 HEAP32[(($270)>>2)]=$285;
 label=64;break;
 case 64: 
 var $287=HEAP32[(($155)>>2)];
 var $288=(($287+($ret_1_i<<2))|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=((($289)-(1))|0);
 HEAP32[(($288)>>2)]=$290;
 var $291=HEAP32[(($155)>>2)];
 var $292=(($291+($ret_1_i<<2))|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=($293|0)==-1;
 if($294){label=65;break;}else{var $309=$293;label=66;break;}
 case 65: 
 var $296=HEAP32[(($21)>>2)];
 var $297=(($296)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=(($298+((($ret_1_i)*(12))&-1)+4)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($298+((($ret_1_i)*(12))&-1))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=$300;
 var $304=$302;
 var $305=((($303)-($304))|0);
 var $306=$305>>4;
 var $307=((($306)-(1))|0);
 HEAP32[(($292)>>2)]=$307;
 var $_pre287=HEAP32[(($155)>>2)];
 var $_phi_trans_insert=(($_pre287+($ret_1_i<<2))|0);
 var $_pre288=HEAP32[(($_phi_trans_insert)>>2)];
 var $309=$_pre288;label=66;break;
 case 66: 
 var $309;
 var $310=HEAP32[(($154)>>2)];
 var $311=(($310+($ret_1_i<<2))|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=($312|0)==($309|0);
 if($313){label=75;break;}else{var $i1_0273=$312;label=67;break;}
 case 67: 
 var $i1_0273;
 __ZN4Comb26getBounderyPointWithOffsetEjj($5,$this,$ret_1_i,$i1_0273);
 var $314=HEAP32[(($138)>>2)];
 var $315=HEAP32[(($139)>>2)];
 var $316=($314|0)==($315|0);
 if($316){label=71;break;}else{label=68;break;}
 case 68: 
 var $318=($314|0)==0;
 if($318){label=70;break;}else{label=69;break;}
 case 69: 
 var $320=$314;
 assert(16 % 1 === 0);HEAP32[(($320)>>2)]=HEAP32[(($160)>>2)];HEAP32[((($320)+(4))>>2)]=HEAP32[((($160)+(4))>>2)];HEAP32[((($320)+(8))>>2)]=HEAP32[((($160)+(8))>>2)];HEAP32[((($320)+(12))>>2)]=HEAP32[((($160)+(12))>>2)];
 label=70;break;
 case 70: 
 var $321=(($314+16)|0);
 HEAP32[(($138)>>2)]=$321;
 label=72;break;
 case 71: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($pointList,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=41;break; }
 case 72: 
 var $323=($i1_0273|0)==0;
 if($323){label=73;break;}else{var $_sink=$i1_0273;label=74;break;}
 case 73: 
 var $325=HEAP32[(($21)>>2)];
 var $326=(($325)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($327+((($ret_1_i)*(12))&-1)+4)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($327+((($ret_1_i)*(12))&-1))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$329;
 var $333=$331;
 var $334=((($332)-($333))|0);
 var $335=$334>>4;
 var $_sink=$335;label=74;break;
 case 74: 
 var $_sink;
 var $337=((($_sink)-(1))|0);
 var $338=HEAP32[(($155)>>2)];
 var $339=(($338+($ret_1_i<<2))|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=($337|0)==($340|0);
 if($341){label=75;break;}else{var $i1_0273=$337;label=67;break;}
 case 75: 
 var $342=HEAP32[(($156)>>2)];
 var $343=(($342+($ret_1_i<<3))|0);
 var $ld$42$0=(($343)|0);
 var $344$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($343+4)|0);
 var $344$1=HEAP32[(($ld$43$1)>>2)];
 var $$etemp$44$0=200;
 var $$etemp$44$1=0;
 var $345$0=_i64Add($344$0,$344$1,$$etemp$44$0,$$etemp$44$1);var $345$1=tempRet0;
 var $ld$45$0=(($147)|0);
 var $346$0=HEAP32[(($ld$45$0)>>2)];
 var $ld$46$1=(($147+4)|0);
 var $346$1=HEAP32[(($ld$46$1)>>2)];
 var $347=(($345$0>>>0)+(($345$1|0)*4294967296));
 var $348=HEAPF64[(($148)>>3)];
 var $349=($347)*($348);
 var $350=(($346$0>>>0)+(($346$1|0)*4294967296));
 var $351=HEAPF64[(($149)>>3)];
 var $352=($350)*($351);
 var $353=($349)+($352);
 var $354$0=$353>>>0;var $354$1=(Math_abs($353) >= 1 ? ($353 > 0 ? Math_min(Math_floor(($353)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($353 - +(((~~($353)))>>>0))/4294967296)))>>>0) : 0);
 var $355=HEAPF64[(($150)>>3)];
 var $356=($347)*($355);
 var $357=HEAPF64[(($151)>>3)];
 var $358=($350)*($357);
 var $359=($356)+($358);
 var $360$0=$359>>>0;var $360$1=(Math_abs($359) >= 1 ? ($359 > 0 ? Math_min(Math_floor(($359)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($359 - +(((~~($359)))>>>0))/4294967296)))>>>0) : 0);
 var $st$47$0=(($157)|0);
 HEAP32[(($st$47$0)>>2)]=$354$0;
 var $st$48$1=(($157+4)|0);
 HEAP32[(($st$48$1)>>2)]=$354$1;
 var $st$49$0=(($158)|0);
 HEAP32[(($st$49$0)>>2)]=$360$0;
 var $st$50$1=(($158+4)|0);
 HEAP32[(($st$50$1)>>2)]=$360$1;
 var $361=HEAP32[(($138)>>2)];
 var $362=HEAP32[(($139)>>2)];
 var $363=($361|0)==($362|0);
 if($363){label=79;break;}else{label=76;break;}
 case 76: 
 var $365=($361|0)==0;
 if($365){label=78;break;}else{label=77;break;}
 case 77: 
 var $367=$361;
 assert(16 % 1 === 0);HEAP32[(($367)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($367)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];HEAP32[((($367)+(8))>>2)]=HEAP32[((($159)+(8))>>2)];HEAP32[((($367)+(12))>>2)]=HEAP32[((($159)+(12))>>2)];
 label=78;break;
 case 78: 
 var $368=(($361+16)|0);
 HEAP32[(($138)>>2)]=$368;
 label=80;break;
 case 79: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($pointList,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=43;break; }
 case 80: 
 var $370=HEAP32[(($21)>>2)];
 var $371=(($370+4)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($370)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=($372|0)==($374|0);
 if($375){label=82;break;}else{label=81;break;}
 case 81: 
 var $376=HEAP32[(($156)>>2)];
 var $377=(($376+($ret_1_i<<3))|0);
 var $ld$51$0=(($377)|0);
 var $378$0=HEAP32[(($ld$51$0)>>2)];
 var $ld$52$1=(($377+4)|0);
 var $378$1=HEAP32[(($ld$52$1)>>2)];
 var $x_0284$1=$378$1;var $x_0284$0=$378$0;var $164=$372;var $163=$374;label=37;break;
 case 82: 
 var $379=HEAP32[(($138)>>2)];
 var $380=HEAP32[(($139)>>2)];
 var $381=($379|0)==($380|0);
 if($381){label=86;break;}else{label=83;break;}
 case 83: 
 var $383=($379|0)==0;
 if($383){label=85;break;}else{label=84;break;}
 case 84: 
 var $385=$379;
 assert(16 % 1 === 0);HEAP32[(($385)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($385)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($385)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($385)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
 label=85;break;
 case 85: 
 var $386=(($379+16)|0);
 HEAP32[(($138)>>2)]=$386;
 var $388=$386;label=88;break;
 case 86: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($pointList,$endPoint) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=44;break; }
 case 87: 
 var $_pre290=HEAP32[(($138)>>2)];
 var $388=$_pre290;label=88;break;
 case 88: 
 var $388;
 var $389=$p0;
 assert(16 % 1 === 0);HEAP32[(($389)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($389)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($389)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];HEAP32[((($389)+(12))>>2)]=HEAP32[((($20)+(12))>>2)];
 var $390=HEAP32[(($137)>>2)];
 var $391=$388;
 var $392=$390;
 var $393=((($391)-($392))|0);
 var $394=$393>>4;
 var $395=($394>>>0)>1;
 if($395){label=89;break;}else{label=98;break;}
 case 89: 
 var $396=$7;
 var $397=$8;
 var $398=$9;
 var $399=$10;
 var $400=(($combPoints+4)|0);
 var $401=(($combPoints+8)|0);
 var $n2_0268=1;var $403=$390;label=90;break;
 case 90: 
 var $403;
 var $n2_0268;
 assert(16 % 1 === 0);HEAP32[(($396)>>2)]=HEAP32[(($389)>>2)];HEAP32[((($396)+(4))>>2)]=HEAP32[((($389)+(4))>>2)];HEAP32[((($396)+(8))>>2)]=HEAP32[((($389)+(8))>>2)];HEAP32[((($396)+(12))>>2)]=HEAP32[((($389)+(12))>>2)];
 var $404=(($403+($n2_0268<<4))|0);
 var $405=$404;
 assert(16 % 1 === 0);HEAP32[(($397)>>2)]=HEAP32[(($405)>>2)];HEAP32[((($397)+(4))>>2)]=HEAP32[((($405)+(4))>>2)];HEAP32[((($397)+(8))>>2)]=HEAP32[((($405)+(8))>>2)];HEAP32[((($397)+(12))>>2)]=HEAP32[((($405)+(12))>>2)];
 var $406=__ZN4Comb13collisionTestEN10ClipperLib8IntPointES1_($this,$7,$8);
 if($406){label=91;break;}else{label=97;break;}
 case 91: 
 assert(16 % 1 === 0);HEAP32[(($398)>>2)]=HEAP32[(($389)>>2)];HEAP32[((($398)+(4))>>2)]=HEAP32[((($389)+(4))>>2)];HEAP32[((($398)+(8))>>2)]=HEAP32[((($389)+(8))>>2)];HEAP32[((($398)+(12))>>2)]=HEAP32[((($389)+(12))>>2)];
 var $408=((($n2_0268)-(1))|0);
 var $409=HEAP32[(($137)>>2)];
 var $410=(($409+($408<<4))|0);
 var $411=$410;
 assert(16 % 1 === 0);HEAP32[(($399)>>2)]=HEAP32[(($411)>>2)];HEAP32[((($399)+(4))>>2)]=HEAP32[((($411)+(4))>>2)];HEAP32[((($399)+(8))>>2)]=HEAP32[((($411)+(8))>>2)];HEAP32[((($399)+(12))>>2)]=HEAP32[((($411)+(12))>>2)];
 var $412=__ZN4Comb13collisionTestEN10ClipperLib8IntPointES1_($this,$9,$10);
 if($412){var $_0=0;label=104;break;}else{label=92;break;}
 case 92: 
 var $414=HEAP32[(($137)>>2)];
 var $415=(($414+($408<<4))|0);
 var $416=$415;
 assert(16 % 1 === 0);HEAP32[(($389)>>2)]=HEAP32[(($416)>>2)];HEAP32[((($389)+(4))>>2)]=HEAP32[((($416)+(4))>>2)];HEAP32[((($389)+(8))>>2)]=HEAP32[((($416)+(8))>>2)];HEAP32[((($389)+(12))>>2)]=HEAP32[((($416)+(12))>>2)];
 var $417=HEAP32[(($400)>>2)];
 var $418=HEAP32[(($401)>>2)];
 var $419=($417|0)==($418|0);
 if($419){label=96;break;}else{label=93;break;}
 case 93: 
 var $421=($417|0)==0;
 if($421){var $424=0;label=95;break;}else{label=94;break;}
 case 94: 
 var $423=$417;
 assert(16 % 1 === 0);HEAP32[(($423)>>2)]=HEAP32[(($389)>>2)];HEAP32[((($423)+(4))>>2)]=HEAP32[((($389)+(4))>>2)];HEAP32[((($423)+(8))>>2)]=HEAP32[((($389)+(8))>>2)];HEAP32[((($423)+(12))>>2)]=HEAP32[((($389)+(12))>>2)];
 var $_pre286=HEAP32[(($400)>>2)];
 var $424=$_pre286;label=95;break;
 case 95: 
 var $424;
 var $425=(($424+16)|0);
 HEAP32[(($400)>>2)]=$425;
 label=97;break;
 case 96: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($combPoints,$p0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=40;break; }
 case 97: 
 var $427=((($n2_0268)+(1))|0);
 var $428=HEAP32[(($138)>>2)];
 var $429=HEAP32[(($137)>>2)];
 var $430=$428;
 var $431=$429;
 var $432=((($430)-($431))|0);
 var $433=$432>>4;
 var $434=($427>>>0)<($433>>>0);
 if($434){var $n2_0268=$427;var $403=$429;label=90;break;}else{label=98;break;}
 case 98: 
 if($addEndpoint_0_off0){label=99;break;}else{var $_0=1;label=104;break;}
 case 99: 
 var $436=(($combPoints+4)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=(($combPoints+8)|0);
 var $439=HEAP32[(($438)>>2)];
 var $440=($437|0)==($439|0);
 if($440){label=103;break;}else{label=100;break;}
 case 100: 
 var $442=($437|0)==0;
 if($442){var $445=0;label=102;break;}else{label=101;break;}
 case 101: 
 var $444=$437;
 assert(16 % 1 === 0);HEAP32[(($444)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($444)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($444)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($444)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
 var $_pre285=HEAP32[(($436)>>2)];
 var $445=$_pre285;label=102;break;
 case 102: 
 var $445;
 var $446=(($445+16)|0);
 HEAP32[(($436)>>2)]=$446;
 var $_0=1;label=104;break;
 case 103: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($combPoints,$endPoint) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=1;label=104;break; } else { label=44;break; }
 case 104: 
 var $_0;
 var $448=HEAP32[(($137)>>2)];
 var $449=$448;
 var $450=($448|0)==0;
 if($450){var $_1=$_0;label=108;break;}else{label=105;break;}
 case 105: 
 var $451=HEAP32[(($138)>>2)];
 var $452=($448|0)==($451|0);
 if($452){label=107;break;}else{label=106;break;}
 case 106: 
 var $scevgep_i_i_i=((($451)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $453=(((-$449))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$453)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $454=$uglygep29_i_i_i>>>4;
 var $455=$454^-1;
 var $scevgep30_i_i_i=(($451+($455<<4))|0);
 HEAP32[(($138)>>2)]=$scevgep30_i_i_i;
 label=107;break;
 case 107: 
 var $456=$448;
 __ZdlPv($456);
 var $_1=$_0;label=108;break;
 case 108: 
 var $_1;
 STACKTOP=sp;return $_1;
 case 109: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4Comb10calcMinMaxEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){label=16;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=(($this+8)|0);
 var $10=(($this+24)|0);
 var $11=(($this+32)|0);
 var $12=(($this+40)|0);
 var $13=(($this+48)|0);
 var $14=(($this+64)|0);
 var $15=(($this+56)|0);
 var $16=(($this+72)|0);
 var $17=(($this+12)|0);
 var $18=(($this+16)|0);
 var $n_065=0;label=3;break;
 case 3: 
 var $n_065;
 var $19=HEAP32[(($8)>>2)];
 var $20=(($19+($n_065<<3))|0);
 var $$etemp$0$0=-1;
 var $$etemp$0$1=2147483647;
 var $st$1$0=(($20)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($20+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $21=HEAP32[(($9)>>2)];
 var $22=(($21+($n_065<<3))|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=-2147483648;
 var $st$4$0=(($22)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($22+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $23=HEAP32[(($1)>>2)];
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+((($n_065)*(12))&-1)+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($25+((($n_065)*(12))&-1))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$27;
 var $31=$29;
 var $32=((($30)-($31))|0);
 var $33=$32>>4;
 var $34=((($33)-(1))|0);
 var $_sroa_047_0__idx=(($29+($34<<4))|0);
 var $ld$6$0=(($_sroa_047_0__idx)|0);
 var $_sroa_047_0_copyload$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($_sroa_047_0__idx+4)|0);
 var $_sroa_047_0_copyload$1=HEAP32[(($ld$7$1)>>2)];
 var $_sroa_148_8__idx49=(($29+($34<<4)+8)|0);
 var $ld$8$0=(($_sroa_148_8__idx49)|0);
 var $_sroa_148_8_copyload$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($_sroa_148_8__idx49+4)|0);
 var $_sroa_148_8_copyload$1=HEAP32[(($ld$9$1)>>2)];
 var $35=(($_sroa_047_0_copyload$0>>>0)+(($_sroa_047_0_copyload$1|0)*4294967296));
 var $36=(($_sroa_148_8_copyload$0>>>0)+(($_sroa_148_8_copyload$1|0)*4294967296));
 var $37=($27|0)==($29|0);
 if($37){var $112=$23;var $111=$25;label=15;break;}else{label=4;break;}
 case 4: 
 var $38=HEAPF64[(($13)>>3)];
 var $39=HEAPF64[(($12)>>3)];
 var $40=HEAPF64[(($11)>>3)];
 var $41=HEAPF64[(($10)>>3)];
 var $42=($36)*($38);
 var $43=($35)*($39);
 var $44=($36)*($40);
 var $45=($35)*($41);
 var $46=($43)+($42);
 var $47=($45)+($44);
 var $48$0=$46>>>0;var $48$1=(Math_abs($46) >= 1 ? ($46 > 0 ? Math_min(Math_floor(($46)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($46 - +(((~~($46)))>>>0))/4294967296)))>>>0) : 0);
 var $49$0=$47>>>0;var $49$1=(Math_abs($47) >= 1 ? ($47 > 0 ? Math_min(Math_floor(($47)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($47 - +(((~~($47)))>>>0))/4294967296)))>>>0) : 0);
 var $p0_sroa_1_8_load456062$1=$48$1;var $p0_sroa_1_8_load456062$0=$48$0;var $p0_sroa_0_0_load5963$1=$49$1;var $p0_sroa_0_0_load5963$0=$49$0;var $i_064=0;var $55=$29;var $54=$41;var $53=$40;var $52=$39;var $51=$38;label=5;break;
 case 5: 
 var $51;
 var $52;
 var $53;
 var $54;
 var $55;
 var $i_064;
 var $p0_sroa_0_0_load5963$0;
 var $p0_sroa_0_0_load5963$1;
 var $p0_sroa_1_8_load456062$0;
 var $p0_sroa_1_8_load456062$1;
 var $_sroa_053_0__idx=(($55+($i_064<<4))|0);
 var $ld$10$0=(($_sroa_053_0__idx)|0);
 var $_sroa_053_0_copyload$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($_sroa_053_0__idx+4)|0);
 var $_sroa_053_0_copyload$1=HEAP32[(($ld$11$1)>>2)];
 var $_sroa_154_8__idx55=(($55+($i_064<<4)+8)|0);
 var $ld$12$0=(($_sroa_154_8__idx55)|0);
 var $_sroa_154_8_copyload$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($_sroa_154_8__idx55+4)|0);
 var $_sroa_154_8_copyload$1=HEAP32[(($ld$13$1)>>2)];
 var $56=(($_sroa_053_0_copyload$0>>>0)+(($_sroa_053_0_copyload$1|0)*4294967296));
 var $57=($56)*($54);
 var $58=(($_sroa_154_8_copyload$0>>>0)+(($_sroa_154_8_copyload$1|0)*4294967296));
 var $59=($58)*($53);
 var $60=($57)+($59);
 var $61$0=$60>>>0;var $61$1=(Math_abs($60) >= 1 ? ($60 > 0 ? Math_min(Math_floor(($60)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($60 - +(((~~($60)))>>>0))/4294967296)))>>>0) : 0);
 var $62=($56)*($52);
 var $63=($58)*($51);
 var $64=($62)+($63);
 var $65$0=$64>>>0;var $65$1=(Math_abs($64) >= 1 ? ($64 > 0 ? Math_min(Math_floor(($64)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($64 - +(((~~($64)))>>>0))/4294967296)))>>>0) : 0);
 var $ld$14$0=(($14)|0);
 var $66$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($14+4)|0);
 var $66$1=HEAP32[(($ld$15$1)>>2)];
 var $67=(($p0_sroa_1_8_load456062$1|0) > ($66$1|0)) | (((($p0_sroa_1_8_load456062$1|0) == ($66$1|0) & ($p0_sroa_1_8_load456062$0>>>0) >  ($66$0>>>0))));
 var $68=(($65$1|0) < ($66$1|0)) | (((($65$1|0) == ($66$1|0) & ($65$0>>>0) <  ($66$0>>>0))));
 var $or_cond=$67&$68;
 if($or_cond){label=7;break;}else{label=6;break;}
 case 6: 
 var $70=(($65$1|0) > ($66$1|0)) | (((($65$1|0) == ($66$1|0) & ($65$0>>>0) >  ($66$0>>>0))));
 var $71=(($p0_sroa_1_8_load456062$1|0) < ($66$1|0)) | (((($p0_sroa_1_8_load456062$1|0) == ($66$1|0) & ($p0_sroa_1_8_load456062$0>>>0) <  ($66$0>>>0))));
 var $or_cond61=$70&$71;
 if($or_cond61){label=7;break;}else{label=13;break;}
 case 7: 
 var $72$0=_i64Subtract($61$0,$61$1,$p0_sroa_0_0_load5963$0,$p0_sroa_0_0_load5963$1);var $72$1=tempRet0;
 var $73$0=_i64Subtract($66$0,$66$1,$p0_sroa_1_8_load456062$0,$p0_sroa_1_8_load456062$1);var $73$1=tempRet0;
 var $74$0=___muldi3($73$0,$73$1,$72$0,$72$1);var $74$1=tempRet0;
 var $75$0=_i64Subtract($65$0,$65$1,$p0_sroa_1_8_load456062$0,$p0_sroa_1_8_load456062$1);var $75$1=tempRet0;
 var $76$0=___divdi3($74$0,$74$1,$75$0,$75$1);var $76$1=tempRet0;
 var $77$0=_i64Add($76$0,$76$1,$p0_sroa_0_0_load5963$0,$p0_sroa_0_0_load5963$1);var $77$1=tempRet0;
 var $ld$16$0=(($15)|0);
 var $78$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($15+4)|0);
 var $78$1=HEAP32[(($ld$17$1)>>2)];
 var $79=(($77$1|0) < ($78$1|0)) | (((($77$1|0) == ($78$1|0) & ($77$0>>>0) <  ($78$0>>>0))));
 if($79){label=13;break;}else{label=8;break;}
 case 8: 
 var $ld$18$0=(($16)|0);
 var $81$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($16+4)|0);
 var $81$1=HEAP32[(($ld$19$1)>>2)];
 var $82=(($77$1|0) > ($81$1|0)) | (((($77$1|0) == ($81$1|0) & ($77$0>>>0) >  ($81$0>>>0))));
 if($82){label=13;break;}else{label=9;break;}
 case 9: 
 var $84=HEAP32[(($8)>>2)];
 var $85=(($84+($n_065<<3))|0);
 var $ld$20$0=(($85)|0);
 var $86$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($85+4)|0);
 var $86$1=HEAP32[(($ld$21$1)>>2)];
 var $87=(($77$1|0) < ($86$1|0)) | (((($77$1|0) == ($86$1|0) & ($77$0>>>0) <  ($86$0>>>0))));
 if($87){label=10;break;}else{label=11;break;}
 case 10: 
 var $st$22$0=(($85)|0);
 HEAP32[(($st$22$0)>>2)]=$77$0;
 var $st$23$1=(($85+4)|0);
 HEAP32[(($st$23$1)>>2)]=$77$1;
 var $89=HEAP32[(($17)>>2)];
 var $90=(($89+($n_065<<2))|0);
 HEAP32[(($90)>>2)]=$i_064;
 label=11;break;
 case 11: 
 var $91=HEAP32[(($9)>>2)];
 var $92=(($91+($n_065<<3))|0);
 var $ld$24$0=(($92)|0);
 var $93$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($92+4)|0);
 var $93$1=HEAP32[(($ld$25$1)>>2)];
 var $94=(($77$1|0) > ($93$1|0)) | (((($77$1|0) == ($93$1|0) & ($77$0>>>0) >  ($93$0>>>0))));
 if($94){label=12;break;}else{label=13;break;}
 case 12: 
 var $st$26$0=(($92)|0);
 HEAP32[(($st$26$0)>>2)]=$77$0;
 var $st$27$1=(($92+4)|0);
 HEAP32[(($st$27$1)>>2)]=$77$1;
 var $96=HEAP32[(($18)>>2)];
 var $97=(($96+($n_065<<2))|0);
 HEAP32[(($97)>>2)]=$i_064;
 label=13;break;
 case 13: 
 var $98=((($i_064)+(1))|0);
 var $99=HEAP32[(($1)>>2)];
 var $100=(($99)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+((($n_065)*(12))&-1)+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($101+((($n_065)*(12))&-1))|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$103;
 var $107=$105;
 var $108=((($106)-($107))|0);
 var $109=$108>>4;
 var $110=($98>>>0)<($109>>>0);
 if($110){label=14;break;}else{var $112=$99;var $111=$101;label=15;break;}
 case 14: 
 var $_pre=HEAPF64[(($10)>>3)];
 var $_pre76=HEAPF64[(($11)>>3)];
 var $_pre77=HEAPF64[(($12)>>3)];
 var $_pre78=HEAPF64[(($13)>>3)];
 var $p0_sroa_1_8_load456062$1=$65$1;var $p0_sroa_1_8_load456062$0=$65$0;var $p0_sroa_0_0_load5963$1=$61$1;var $p0_sroa_0_0_load5963$0=$61$0;var $i_064=$98;var $55=$105;var $54=$_pre;var $53=$_pre76;var $52=$_pre77;var $51=$_pre78;label=5;break;
 case 15: 
 var $111;
 var $112;
 var $113=((($n_065)+(1))|0);
 var $114=(($112+4)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=$115;
 var $117=$111;
 var $118=((($116)-($117))|0);
 var $119=(((($118|0))/(12))&-1);
 var $120=($113>>>0)<($119>>>0);
 if($120){var $n_065=$113;label=3;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4Comb26getBounderyPointWithOffsetEjj($agg_result,$this,$polygonNr,$idx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+((($polygonNr)*(12))&-1))|0);
 var $6=($idx|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $_phi_trans_insert=(($5)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert71=(($4+((($polygonNr)*(12))&-1)+4)|0);
 var $_pre72=HEAP32[(($_phi_trans_insert71)>>2)];
 var $_sink=$idx;var $18=$_pre;var $17=$_pre72;label=4;break;
 case 3: 
 var $8=(($4+((($polygonNr)*(12))&-1)+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($5)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$9;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=$14>>4;
 var $_sink=$15;var $18=$11;var $17=$9;label=4;break;
 case 4: 
 var $17;
 var $18;
 var $_sink;
 var $19=((($_sink)-(1))|0);
 var $p0_sroa_0_0__idx=(($18+($19<<4))|0);
 var $ld$0$0=(($p0_sroa_0_0__idx)|0);
 var $p0_sroa_0_0_copyload$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($p0_sroa_0_0__idx+4)|0);
 var $p0_sroa_0_0_copyload$1=HEAP32[(($ld$1$1)>>2)];
 var $p0_sroa_1_8__idx64=(($18+($19<<4)+8)|0);
 var $ld$2$0=(($p0_sroa_1_8__idx64)|0);
 var $p0_sroa_1_8_copyload$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($p0_sroa_1_8__idx64+4)|0);
 var $p0_sroa_1_8_copyload$1=HEAP32[(($ld$3$1)>>2)];
 var $p1_sroa_0_0__idx=(($18+($idx<<4))|0);
 var $ld$4$0=(($p1_sroa_0_0__idx)|0);
 var $p1_sroa_0_0_copyload$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p1_sroa_0_0__idx+4)|0);
 var $p1_sroa_0_0_copyload$1=HEAP32[(($ld$5$1)>>2)];
 var $p1_sroa_1_8__idx63=(($18+($idx<<4)+8)|0);
 var $ld$6$0=(($p1_sroa_1_8__idx63)|0);
 var $p1_sroa_1_8_copyload$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p1_sroa_1_8__idx63+4)|0);
 var $p1_sroa_1_8_copyload$1=HEAP32[(($ld$7$1)>>2)];
 var $20=$17;
 var $21=$18;
 var $22=((($20)-($21))|0);
 var $23=$22>>4;
 var $24=((($23)-(1))|0);
 var $25=($24>>>0)>($idx>>>0);
 var $26=((($idx)+(1))|0);
 var $_=$25?$26:0;
 var $p2_sroa_0_0__idx=(($18+($_<<4))|0);
 var $ld$8$0=(($p2_sroa_0_0__idx)|0);
 var $p2_sroa_0_0_copyload$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($p2_sroa_0_0__idx+4)|0);
 var $p2_sroa_0_0_copyload$1=HEAP32[(($ld$9$1)>>2)];
 var $p2_sroa_1_8__idx58=(($18+($_<<4)+8)|0);
 var $ld$10$0=(($p2_sroa_1_8__idx58)|0);
 var $p2_sroa_1_8_copyload$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($p2_sroa_1_8__idx58+4)|0);
 var $p2_sroa_1_8_copyload$1=HEAP32[(($ld$11$1)>>2)];
 var $27$0=_i64Subtract($p1_sroa_0_0_copyload$0,$p1_sroa_0_0_copyload$1,$p0_sroa_0_0_copyload$0,$p0_sroa_0_0_copyload$1);var $27$1=tempRet0;
 var $28$0=_i64Subtract($p1_sroa_1_8_copyload$0,$p1_sroa_1_8_copyload$1,$p0_sroa_1_8_copyload$0,$p0_sroa_1_8_copyload$1);var $28$1=tempRet0;
 var $29$0=___muldi3($27$0,$27$1,$27$0,$27$1);var $29$1=tempRet0;
 var $30$0=___muldi3($28$0,$28$1,$28$0,$28$1);var $30$1=tempRet0;
 var $31$0=_i64Add($30$0,$30$1,$29$0,$29$1);var $31$1=tempRet0;
 var $32=(($31$0>>>0)+(($31$1|0)*4294967296));
 var $33=Math_sqrt($32);
 var $34=(($33)&-1);
 var $35=($34|0)<1;
 if($35){var $_sroa_056_0_load69$1=0;var $_sroa_056_0_load69$0=1000;var $_sroa_157_8_load70$1=0;var $_sroa_157_8_load70$0=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $$etemp$12$0=1000;
 var $$etemp$12$1=0;
 var $37$0=___muldi3($27$0,$27$1,$$etemp$12$0,$$etemp$12$1);var $37$1=tempRet0;
 var $$etemp$13$0=1000;
 var $$etemp$13$1=0;
 var $38$0=___muldi3($28$0,$28$1,$$etemp$13$0,$$etemp$13$1);var $38$1=tempRet0;
 var $39$0=$34;
 var $39$1=(((($34|0)<0))|0)?-1:0;
 var $40$0=___divdi3($37$0,$37$1,$39$0,$39$1);var $40$1=tempRet0;
 var $41$0=___divdi3($38$0,$38$1,$39$0,$39$1);var $41$1=tempRet0;
 var $_sroa_056_0_load69$1=$40$1;var $_sroa_056_0_load69$0=$40$0;var $_sroa_157_8_load70$1=$41$1;var $_sroa_157_8_load70$0=$41$0;label=6;break;
 case 6: 
 var $_sroa_157_8_load70$0;
 var $_sroa_157_8_load70$1;
 var $_sroa_056_0_load69$0;
 var $_sroa_056_0_load69$1;
 var $42$0=_i64Subtract($p2_sroa_0_0_copyload$0,$p2_sroa_0_0_copyload$1,$p1_sroa_0_0_copyload$0,$p1_sroa_0_0_copyload$1);var $42$1=tempRet0;
 var $43$0=_i64Subtract($p2_sroa_1_8_copyload$0,$p2_sroa_1_8_copyload$1,$p1_sroa_1_8_copyload$0,$p1_sroa_1_8_copyload$1);var $43$1=tempRet0;
 var $44$0=___muldi3($42$0,$42$1,$42$0,$42$1);var $44$1=tempRet0;
 var $45$0=___muldi3($43$0,$43$1,$43$0,$43$1);var $45$1=tempRet0;
 var $46$0=_i64Add($45$0,$45$1,$44$0,$44$1);var $46$1=tempRet0;
 var $47=(($46$0>>>0)+(($46$1|0)*4294967296));
 var $48=Math_sqrt($47);
 var $49=(($48)&-1);
 var $50=($49|0)<1;
 if($50){var $_sroa_052_0_load67$1=0;var $_sroa_052_0_load67$0=1000;var $_sroa_153_8_load68$1=0;var $_sroa_153_8_load68$0=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $$etemp$14$0=1000;
 var $$etemp$14$1=0;
 var $52$0=___muldi3($42$0,$42$1,$$etemp$14$0,$$etemp$14$1);var $52$1=tempRet0;
 var $$etemp$15$0=1000;
 var $$etemp$15$1=0;
 var $53$0=___muldi3($43$0,$43$1,$$etemp$15$0,$$etemp$15$1);var $53$1=tempRet0;
 var $54$0=$49;
 var $54$1=(((($49|0)<0))|0)?-1:0;
 var $55$0=___divdi3($52$0,$52$1,$54$0,$54$1);var $55$1=tempRet0;
 var $56$0=___divdi3($53$0,$53$1,$54$0,$54$1);var $56$1=tempRet0;
 var $_sroa_052_0_load67$1=$55$1;var $_sroa_052_0_load67$0=$55$0;var $_sroa_153_8_load68$1=$56$1;var $_sroa_153_8_load68$0=$56$0;label=8;break;
 case 8: 
 var $_sroa_153_8_load68$0;
 var $_sroa_153_8_load68$1;
 var $_sroa_052_0_load67$0;
 var $_sroa_052_0_load67$1;
 var $sum$0=_i64Add($_sroa_153_8_load68$0,$_sroa_153_8_load68$1,$_sroa_157_8_load70$0,$_sroa_157_8_load70$1);var $sum$1=tempRet0;
 var $57$0=_i64Add($_sroa_052_0_load67$0,$_sroa_052_0_load67$1,$_sroa_056_0_load69$0,$_sroa_056_0_load69$1);var $57$1=tempRet0;
 var $58$0=___muldi3($sum$0,$sum$1,$sum$0,$sum$1);var $58$1=tempRet0;
 var $59$0=___muldi3($57$0,$57$1,$57$0,$57$1);var $59$1=tempRet0;
 var $60$0=_i64Add($59$0,$59$1,$58$0,$58$1);var $60$1=tempRet0;
 var $61=(($60$0>>>0)+(($60$1|0)*4294967296));
 var $62=Math_sqrt($61);
 var $63=(($62)&-1);
 var $64=($63|0)<1;
 if($64){var $n_sroa_0_0_load65$1=0;var $n_sroa_0_0_load65$0=200;var $n_sroa_1_8_load66$1=0;var $n_sroa_1_8_load66$0=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $$etemp$16$0=-200;
 var $$etemp$16$1=-1;
 var $66$0=___muldi3($sum$0,$sum$1,$$etemp$16$0,$$etemp$16$1);var $66$1=tempRet0;
 var $$etemp$17$0=200;
 var $$etemp$17$1=0;
 var $67$0=___muldi3($57$0,$57$1,$$etemp$17$0,$$etemp$17$1);var $67$1=tempRet0;
 var $68$0=$63;
 var $68$1=(((($63|0)<0))|0)?-1:0;
 var $69$0=___divdi3($66$0,$66$1,$68$0,$68$1);var $69$1=tempRet0;
 var $70$0=___divdi3($67$0,$67$1,$68$0,$68$1);var $70$1=tempRet0;
 var $n_sroa_0_0_load65$1=$69$1;var $n_sroa_0_0_load65$0=$69$0;var $n_sroa_1_8_load66$1=$70$1;var $n_sroa_1_8_load66$0=$70$0;label=10;break;
 case 10: 
 var $n_sroa_1_8_load66$0;
 var $n_sroa_1_8_load66$1;
 var $n_sroa_0_0_load65$0;
 var $n_sroa_0_0_load65$1;
 var $71$0=_i64Add($n_sroa_0_0_load65$0,$n_sroa_0_0_load65$1,$p1_sroa_0_0_copyload$0,$p1_sroa_0_0_copyload$1);var $71$1=tempRet0;
 var $72$0=_i64Add($n_sroa_1_8_load66$0,$n_sroa_1_8_load66$1,$p1_sroa_1_8_copyload$0,$p1_sroa_1_8_copyload$1);var $72$1=tempRet0;
 var $73=(($agg_result)|0);
 var $st$18$0=(($73)|0);
 HEAP32[(($st$18$0)>>2)]=$71$0;
 var $st$19$1=(($73+4)|0);
 HEAP32[(($st$19$1)>>2)]=$71$1;
 var $74=(($agg_result+8)|0);
 var $st$20$0=(($74)|0);
 HEAP32[(($st$20$0)>>2)]=$72$0;
 var $st$21$1=(($74+4)|0);
 HEAP32[(($st$21$1)>>2)]=$72$1;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4Comb13collisionTestEN10ClipperLib8IntPointES1_($this,$startPoint,$endPoint){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $startPoint; $startPoint=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($startPoint)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($startPoint)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($startPoint)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($startPoint)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var tempParam = $endPoint; $endPoint=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($endPoint)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($endPoint)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($endPoint)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($endPoint)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $endPoint_idx=(($endPoint)|0);
 var $ld$0$0=(($endPoint_idx)|0);
 var $endPoint_idx_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($endPoint_idx+4)|0);
 var $endPoint_idx_val$1=HEAP32[(($ld$1$1)>>2)];
 var $endPoint_idx29=(($endPoint+8)|0);
 var $ld$2$0=(($endPoint_idx29)|0);
 var $endPoint_idx29_val$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($endPoint_idx29+4)|0);
 var $endPoint_idx29_val$1=HEAP32[(($ld$3$1)>>2)];
 var $startPoint_idx=(($startPoint)|0);
 var $ld$4$0=(($startPoint_idx)|0);
 var $startPoint_idx_val$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($startPoint_idx+4)|0);
 var $startPoint_idx_val$1=HEAP32[(($ld$5$1)>>2)];
 var $startPoint_idx30=(($startPoint+8)|0);
 var $ld$6$0=(($startPoint_idx30)|0);
 var $startPoint_idx30_val$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($startPoint_idx30+4)|0);
 var $startPoint_idx30_val$1=HEAP32[(($ld$7$1)>>2)];
 var $1$0=_i64Subtract($endPoint_idx_val$0,$endPoint_idx_val$1,$startPoint_idx_val$0,$startPoint_idx_val$1);var $1$1=tempRet0;
 var $2$0=_i64Subtract($endPoint_idx29_val$0,$endPoint_idx29_val$1,$startPoint_idx30_val$0,$startPoint_idx30_val$1);var $2$1=tempRet0;
 var $3=(($1$0>>>0)+(($1$1|0)*4294967296));
 var $4=(($2$0>>>0)+(($2$1|0)*4294967296));
 var $5=($3)*($3);
 var $6=($4)*($4);
 var $7=($5)+($6);
 var $8=Math_sqrt($7);
 var $9=($3)/($8);
 var $10=($4)/($8);
 var $11=((-.0))-($10);
 var $_sroa_049_0__idx=(($this+24)|0);
 HEAPF64[(($_sroa_049_0__idx)>>3)]=$9;
 var $_sroa_150_8__idx51=(($this+32)|0);
 HEAPF64[(($_sroa_150_8__idx51)>>3)]=$10;
 var $_sroa_2_16__idx52=(($this+40)|0);
 HEAPF64[(($_sroa_2_16__idx52)>>3)]=$11;
 var $_sroa_3_24__idx53=(($this+48)|0);
 HEAPF64[(($_sroa_3_24__idx53)>>3)]=$9;
 var $12=(($startPoint_idx_val$0>>>0)+(($startPoint_idx_val$1|0)*4294967296));
 var $13=($12)*($9);
 var $14=(($startPoint_idx30_val$0>>>0)+(($startPoint_idx30_val$1|0)*4294967296));
 var $15=($14)*($10);
 var $16=($13)+($15);
 var $17$0=$16>>>0;var $17$1=(Math_abs($16) >= 1 ? ($16 > 0 ? Math_min(Math_floor(($16)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($16 - +(((~~($16)))>>>0))/4294967296)))>>>0) : 0);
 var $18=($12)*($11);
 var $19=($14)*($9);
 var $20=($18)+($19);
 var $21$0=$20>>>0;var $21$1=(Math_abs($20) >= 1 ? ($20 > 0 ? Math_min(Math_floor(($20)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($20 - +(((~~($20)))>>>0))/4294967296)))>>>0) : 0);
 var $_sroa_046_0__idx=(($this+56)|0);
 var $st$8$0=(($_sroa_046_0__idx)|0);
 HEAP32[(($st$8$0)>>2)]=$17$0;
 var $st$9$1=(($_sroa_046_0__idx+4)|0);
 HEAP32[(($st$9$1)>>2)]=$17$1;
 var $_sroa_147_8__idx48=(($this+64)|0);
 var $st$10$0=(($_sroa_147_8__idx48)|0);
 HEAP32[(($st$10$0)>>2)]=$21$0;
 var $st$11$1=(($_sroa_147_8__idx48+4)|0);
 HEAP32[(($st$11$1)>>2)]=$21$1;
 var $22=(($endPoint_idx_val$0>>>0)+(($endPoint_idx_val$1|0)*4294967296));
 var $23=($22)*($9);
 var $24=(($endPoint_idx29_val$0>>>0)+(($endPoint_idx29_val$1|0)*4294967296));
 var $25=($24)*($10);
 var $26=($23)+($25);
 var $27$0=$26>>>0;var $27$1=(Math_abs($26) >= 1 ? ($26 > 0 ? Math_min(Math_floor(($26)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($26 - +(((~~($26)))>>>0))/4294967296)))>>>0) : 0);
 var $28=($22)*($11);
 var $29=($24)*($9);
 var $30=($28)+($29);
 var $31$0=$30>>>0;var $31$1=(Math_abs($30) >= 1 ? ($30 > 0 ? Math_min(Math_floor(($30)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($30 - +(((~~($30)))>>>0))/4294967296)))>>>0) : 0);
 var $_sroa_0_0__idx=(($this+72)|0);
 var $st$12$0=(($_sroa_0_0__idx)|0);
 HEAP32[(($st$12$0)>>2)]=$27$0;
 var $st$13$1=(($_sroa_0_0__idx+4)|0);
 HEAP32[(($st$13$1)>>2)]=$27$1;
 var $_sroa_1_8__idx45=(($this+80)|0);
 var $st$14$0=(($_sroa_1_8__idx45)|0);
 HEAP32[(($st$14$0)>>2)]=$31$0;
 var $st$15$1=(($_sroa_1_8__idx45+4)|0);
 HEAP32[(($st$15$1)>>2)]=$31$1;
 var $32=(($this)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($33)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){var $_0=0;label=10;break;}else{var $n_095=0;label=2;break;}
 case 2: 
 var $n_095;
 var $39=(($37+((($n_095)*(12))&-1)+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($37+((($n_095)*(12))&-1))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$40;
 var $44=$42;
 var $45=((($43)-($44))|0);
 var $46=$45>>4;
 var $47=($46|0)==0;
 if($47){label=9;break;}else{label=3;break;}
 case 3: 
 var $49=((($46)-(1))|0);
 var $_sroa_067_0__idx=(($42+($49<<4))|0);
 var $ld$16$0=(($_sroa_067_0__idx)|0);
 var $_sroa_067_0_copyload$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($_sroa_067_0__idx+4)|0);
 var $_sroa_067_0_copyload$1=HEAP32[(($ld$17$1)>>2)];
 var $_sroa_168_8__idx69=(($42+($49<<4)+8)|0);
 var $ld$18$0=(($_sroa_168_8__idx69)|0);
 var $_sroa_168_8_copyload$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($_sroa_168_8__idx69+4)|0);
 var $_sroa_168_8_copyload$1=HEAP32[(($ld$19$1)>>2)];
 var $50=(($_sroa_067_0_copyload$0>>>0)+(($_sroa_067_0_copyload$1|0)*4294967296));
 var $51=(($_sroa_168_8_copyload$0>>>0)+(($_sroa_168_8_copyload$1|0)*4294967296));
 var $52=($40|0)==($42|0);
 if($52){label=9;break;}else{label=4;break;}
 case 4: 
 var $53=($51)*($9);
 var $54=($50)*($11);
 var $55=($51)*($10);
 var $56=($50)*($9);
 var $57=($54)+($53);
 var $58=($56)+($55);
 var $59$0=$57>>>0;var $59$1=(Math_abs($57) >= 1 ? ($57 > 0 ? Math_min(Math_floor(($57)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($57 - +(((~~($57)))>>>0))/4294967296)))>>>0) : 0);
 var $60$0=$58>>>0;var $60$1=(Math_abs($58) >= 1 ? ($58 > 0 ? Math_min(Math_floor(($58)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($58 - +(((~~($58)))>>>0))/4294967296)))>>>0) : 0);
 var $p0_sroa_1_8_load448891$1=$59$1;var $p0_sroa_1_8_load448891$0=$59$0;var $p0_sroa_0_0_load8792$1=$60$1;var $p0_sroa_0_0_load8792$0=$60$0;var $i_093=0;label=5;break;
 case 5: 
 var $i_093;
 var $p0_sroa_0_0_load8792$0;
 var $p0_sroa_0_0_load8792$1;
 var $p0_sroa_1_8_load448891$0;
 var $p0_sroa_1_8_load448891$1;
 var $_sroa_061_0__idx=(($42+($i_093<<4))|0);
 var $ld$20$0=(($_sroa_061_0__idx)|0);
 var $_sroa_061_0_copyload$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($_sroa_061_0__idx+4)|0);
 var $_sroa_061_0_copyload$1=HEAP32[(($ld$21$1)>>2)];
 var $_sroa_162_8__idx63=(($42+($i_093<<4)+8)|0);
 var $ld$22$0=(($_sroa_162_8__idx63)|0);
 var $_sroa_162_8_copyload$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($_sroa_162_8__idx63+4)|0);
 var $_sroa_162_8_copyload$1=HEAP32[(($ld$23$1)>>2)];
 var $62=(($_sroa_061_0_copyload$0>>>0)+(($_sroa_061_0_copyload$1|0)*4294967296));
 var $63=($62)*($9);
 var $64=(($_sroa_162_8_copyload$0>>>0)+(($_sroa_162_8_copyload$1|0)*4294967296));
 var $65=($64)*($10);
 var $66=($63)+($65);
 var $67$0=$66>>>0;var $67$1=(Math_abs($66) >= 1 ? ($66 > 0 ? Math_min(Math_floor(($66)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($66 - +(((~~($66)))>>>0))/4294967296)))>>>0) : 0);
 var $68=($62)*($11);
 var $69=($64)*($9);
 var $70=($68)+($69);
 var $71$0=$70>>>0;var $71$1=(Math_abs($70) >= 1 ? ($70 > 0 ? Math_min(Math_floor(($70)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($70 - +(((~~($70)))>>>0))/4294967296)))>>>0) : 0);
 var $72=(($p0_sroa_1_8_load448891$1|0) > ($21$1|0)) | (((($p0_sroa_1_8_load448891$1|0) == ($21$1|0) & ($p0_sroa_1_8_load448891$0>>>0) >  ($21$0>>>0))));
 var $73=(($71$1|0) < ($21$1|0)) | (((($71$1|0) == ($21$1|0) & ($71$0>>>0) <  ($21$0>>>0))));
 var $or_cond=$72&$73;
 if($or_cond){label=7;break;}else{label=6;break;}
 case 6: 
 var $75=(($71$1|0) > ($21$1|0)) | (((($71$1|0) == ($21$1|0) & ($71$0>>>0) >  ($21$0>>>0))));
 var $76=(($p0_sroa_1_8_load448891$1|0) < ($21$1|0)) | (((($p0_sroa_1_8_load448891$1|0) == ($21$1|0) & ($p0_sroa_1_8_load448891$0>>>0) <  ($21$0>>>0))));
 var $or_cond89=$75&$76;
 if($or_cond89){label=7;break;}else{label=8;break;}
 case 7: 
 var $78$0=_i64Subtract($67$0,$67$1,$p0_sroa_0_0_load8792$0,$p0_sroa_0_0_load8792$1);var $78$1=tempRet0;
 var $79$0=_i64Subtract($21$0,$21$1,$p0_sroa_1_8_load448891$0,$p0_sroa_1_8_load448891$1);var $79$1=tempRet0;
 var $80$0=___muldi3($79$0,$79$1,$78$0,$78$1);var $80$1=tempRet0;
 var $81$0=_i64Subtract($71$0,$71$1,$p0_sroa_1_8_load448891$0,$p0_sroa_1_8_load448891$1);var $81$1=tempRet0;
 var $82$0=___divdi3($80$0,$80$1,$81$0,$81$1);var $82$1=tempRet0;
 var $83$0=_i64Add($82$0,$82$1,$p0_sroa_0_0_load8792$0,$p0_sroa_0_0_load8792$1);var $83$1=tempRet0;
 var $84=(($83$1|0) > ($17$1|0)) | (((($83$1|0) == ($17$1|0) & ($83$0>>>0) >  ($17$0>>>0))));
 var $85=(($83$1|0) < ($27$1|0)) | (((($83$1|0) == ($27$1|0) & ($83$0>>>0) <  ($27$0>>>0))));
 var $or_cond99=$84&$85;
 if($or_cond99){var $_0=1;label=10;break;}else{label=8;break;}
 case 8: 
 var $87=((($i_093)+(1))|0);
 var $88=($87>>>0)<($46>>>0);
 if($88){var $p0_sroa_1_8_load448891$1=$71$1;var $p0_sroa_1_8_load448891$0=$71$0;var $p0_sroa_0_0_load8792$1=$67$1;var $p0_sroa_0_0_load8792$0=$67$0;var $i_093=$87;label=5;break;}else{label=9;break;}
 case 9: 
 var $89=((($n_095)+(1))|0);
 var $90=$35;
 var $91=$37;
 var $92=((($90)-($91))|0);
 var $93=(((($92|0))/(12))&-1);
 var $94=($89>>>0)<($93>>>0);
 if($94){var $n_095=$89;label=2;break;}else{var $_0=0;label=10;break;}
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEj($this,$__n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(24);
 var $__v=(sp)+(32);
 var $5=(($this+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6<<5;
 var $8=($7>>>0)<($__n>>>0);
 if($8){label=2;break;}else{label=9;break;}
 case 2: 
 var $10=(($__v)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($__v+4)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($__v+8)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=($__n|0)<0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$__v;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $16=((($__n)-(1))|0);
 var $17=$16>>>5;
 var $18=((($17)+(1))|0);
 var $19=$18<<2;
 var $20=(function() { try { __THREW__ = 0; return __Znwj($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $22=$20;
 HEAP32[(($10)>>2)]=$22;
 HEAP32[(($12)>>2)]=$18;
 var $23=(($this)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($this+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$26>>>5;
 var $28=$26&31;
 var $29=$1;
 var $30=$2;
 var $31=$3;
 var $32=$4;
 var $_idx=$27<<5;
 var $33=$_idx|$28;
 HEAP32[(($11)>>2)]=$33;
 var $34=(($24+($27<<2))|0);
 var $35=(($1)|0);
 HEAP32[(($35)>>2)]=$24;
 var $36=(($1+4)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=(($2)|0);
 HEAP32[(($37)>>2)]=$34;
 var $38=(($2+4)|0);
 HEAP32[(($38)>>2)]=$28;
 var $39=(($3)|0);
 HEAP32[(($39)>>2)]=$22;
 var $40=(($3+4)|0);
 HEAP32[(($40)>>2)]=0;
 __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($4,$1,$2,$3);
 var $41=HEAP32[(($23)>>2)];
 var $42=HEAP32[(($10)>>2)];
 HEAP32[(($23)>>2)]=$42;
 HEAP32[(($10)>>2)]=$41;
 var $43=HEAP32[(($25)>>2)];
 var $44=HEAP32[(($11)>>2)];
 HEAP32[(($25)>>2)]=$44;
 HEAP32[(($11)>>2)]=$43;
 var $45=HEAP32[(($5)>>2)];
 var $46=HEAP32[(($12)>>2)];
 HEAP32[(($5)>>2)]=$46;
 HEAP32[(($12)>>2)]=$45;
 var $47=($41|0)==0;
 if($47){label=9;break;}else{label=6;break;}
 case 6: 
 var $49=$41;
 __ZdlPv($49);
 label=9;break;
 case 7: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP32[(($10)>>2)];
 var $53=($52|0)==0;
 if($53){label=10;break;}else{label=8;break;}
 case 8: 
 var $55=$52;
 __ZdlPv($55);
 label=10;break;
 case 9: 
 STACKTOP=sp;return;
 case 10: 
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg_result,$__first,$__last,$__result){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__last)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__first)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7<<3;
 var $9=(($__last+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__first+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($10)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($14|0)>0;
 if($15){label=3;break;}else{label=2;break;}
 case 2: 
 var $_pre=(($__result)|0);
 var $_pre_phi=$_pre;label=8;break;
 case 3: 
 var $17=($12|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pre40=(($__result)|0);
 var $__n_0=$14;var $45=$4;var $_pre_phi41=$_pre40;label=6;break;
 case 5: 
 var $18=(((32)-($12))|0);
 var $19=($14|0)<($18|0);
 var $_sroa_speculated=$19?$14:$18;
 var $20=((($14)-($_sroa_speculated))|0);
 var $21=-1<<$12;
 var $22=((($18)-($_sroa_speculated))|0);
 var $23=-1>>>($22>>>0);
 var $24=$23&$21;
 var $25=HEAP32[(($4)>>2)];
 var $26=$25&$24;
 var $27=$24^-1;
 var $28=(($__result)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=HEAP32[(($29)>>2)];
 var $31=$30&$27;
 HEAP32[(($29)>>2)]=$31;
 var $32=HEAP32[(($28)>>2)];
 var $33=HEAP32[(($32)>>2)];
 var $34=$33|$26;
 HEAP32[(($32)>>2)]=$34;
 var $35=(($__result+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($36)+($_sroa_speculated))|0);
 var $38=$37>>>5;
 var $39=HEAP32[(($28)>>2)];
 var $40=(($39+($38<<2))|0);
 HEAP32[(($28)>>2)]=$40;
 var $41=$37&31;
 HEAP32[(($35)>>2)]=$41;
 var $42=HEAP32[(($3)>>2)];
 var $43=(($42+4)|0);
 HEAP32[(($3)>>2)]=$43;
 var $__n_0=$20;var $45=$43;var $_pre_phi41=$28;label=6;break;
 case 6: 
 var $_pre_phi41;
 var $45;
 var $__n_0;
 var $46=$__n_0>>>5;
 var $47=HEAP32[(($_pre_phi41)>>2)];
 var $48=$47;
 var $49=$45;
 var $50=$46<<2;
 _memmove($48,$49,$50,4,0);
 var $51=$46<<5;
 var $52=((($__n_0)-($51))|0);
 var $53=HEAP32[(($_pre_phi41)>>2)];
 var $54=(($53+($46<<2))|0);
 HEAP32[(($_pre_phi41)>>2)]=$54;
 var $55=($52|0)>0;
 if($55){label=7;break;}else{var $_pre_phi=$_pre_phi41;label=8;break;}
 case 7: 
 var $57=HEAP32[(($3)>>2)];
 var $58=(($57+($46<<2))|0);
 HEAP32[(($3)>>2)]=$58;
 var $59=(((32)-($52))|0);
 var $60=-1>>>($59>>>0);
 var $61=HEAP32[(($58)>>2)];
 var $62=$61&$60;
 var $63=$60^-1;
 var $64=HEAP32[(($_pre_phi41)>>2)];
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&$63;
 HEAP32[(($64)>>2)]=$66;
 var $67=HEAP32[(($_pre_phi41)>>2)];
 var $68=HEAP32[(($67)>>2)];
 var $69=$68|$62;
 HEAP32[(($67)>>2)]=$69;
 var $70=(($__result+4)|0);
 HEAP32[(($70)>>2)]=$52;
 var $_pre_phi=$_pre_phi41;label=8;break;
 case 8: 
 var $_pre_phi;
 var $71=(($agg_result)|0);
 var $72=HEAP32[(($_pre_phi)>>2)];
 HEAP32[(($71)>>2)]=$72;
 var $73=(($agg_result+4)|0);
 var $74=(($__result+4)|0);
 var $75=HEAP32[(($74)>>2)];
 HEAP32[(($73)>>2)]=$75;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12GCodePlanner10addPolygonERNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEEiP15GCodePathConfig($this,$polygon,$startIdx,$config){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(($polygon)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+($startIdx<<4))|0);
 var $7=$6;
 var $8=$3;
 assert(16 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];HEAP32[((($8)+(12))>>2)]=HEAP32[((($7)+(12))>>2)];
 __ZN12GCodePlanner9addTravelEN10ClipperLib8IntPointE($this,$3);
 var $9=(($polygon+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($4)>>2)];
 var $12=$10;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=$14>>4;
 var $16=($15>>>0)>1;
 if($16){label=2;break;}else{label=16;break;}
 case 2: 
 var $tmp=$2;
 var $17=(($this+8)|0);
 var $18=$17;
 var $i_029=1;var $21=$11;var $20=$15;label=3;break;
 case 3: 
 var $20;
 var $21;
 var $i_029;
 var $22=((($i_029)+($startIdx))|0);
 var $23=(((($22>>>0))%(($20>>>0)))&-1);
 var $24=(($21+($23<<4))|0);
 var $25=$24;
 var $26=$2;
 assert(16 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];HEAP32[((($26)+(12))>>2)]=HEAP32[((($25)+(12))>>2)];
 var $27=__ZN12GCodePlanner23getLatestPathWithConfigEP15GCodePathConfig($this,$config);
 var $28=(($27+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($27+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=7;break;}else{label=4;break;}
 case 4: 
 var $34=($29|0)==0;
 if($34){var $37=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $36=$29;
 assert(16 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($tmp)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)];HEAP32[((($36)+(12))>>2)]=HEAP32[((($tmp)+(12))>>2)];
 var $_pre_i=HEAP32[(($28)>>2)];
 var $37=$_pre_i;label=6;break;
 case 6: 
 var $37;
 var $38=(($37+16)|0);
 HEAP32[(($28)>>2)]=$38;
 label=8;break;
 case 7: 
 var $40=(($27+12)|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($40,$2);
 label=8;break;
 case 8: 
 assert(16 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($tmp)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)];HEAP32[((($18)+(12))>>2)]=HEAP32[((($tmp)+(12))>>2)];
 var $41=((($i_029)+(1))|0);
 var $42=HEAP32[(($9)>>2)];
 var $43=HEAP32[(($4)>>2)];
 var $44=$42;
 var $45=$43;
 var $46=((($44)-($45))|0);
 var $47=$46>>4;
 var $48=($41>>>0)<($47>>>0);
 if($48){var $i_029=$41;var $21=$43;var $20=$47;label=3;break;}else{label=9;break;}
 case 9: 
 var $49=($47>>>0)>2;
 if($49){label=10;break;}else{label=16;break;}
 case 10: 
 var $51=(($43+($startIdx<<4))|0);
 var $52=$51;
 var $53=$1;
 assert(16 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];HEAP32[((($53)+(12))>>2)]=HEAP32[((($52)+(12))>>2)];
 var $tmp23=$1;
 var $54=__ZN12GCodePlanner23getLatestPathWithConfigEP15GCodePathConfig($this,$config);
 var $55=(($54+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($54+20)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($56|0)==($58|0);
 if($59){label=14;break;}else{label=11;break;}
 case 11: 
 var $61=($56|0)==0;
 if($61){var $64=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $63=$56;
 assert(16 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($tmp23)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($tmp23)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($tmp23)+(8))>>2)];HEAP32[((($63)+(12))>>2)]=HEAP32[((($tmp23)+(12))>>2)];
 var $_pre_i25=HEAP32[(($55)>>2)];
 var $64=$_pre_i25;label=13;break;
 case 13: 
 var $64;
 var $65=(($64+16)|0);
 HEAP32[(($55)>>2)]=$65;
 label=15;break;
 case 14: 
 var $67=(($54+12)|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($67,$1);
 label=15;break;
 case 15: 
 var $68=(($this+8)|0);
 var $69=$68;
 assert(16 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($tmp23)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($tmp23)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($tmp23)+(8))>>2)];HEAP32[((($69)+(12))>>2)]=HEAP32[((($tmp23)+(12))>>2)];
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11SlicerLayerD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+36)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=10;break;}else{label=2;break;}
 case 2: 
 var $4=(($this+40)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($2|0)==($5|0);
 if($6){var $22=$2;label=9;break;}else{var $7=$5;label=3;break;}
 case 3: 
 var $7;
 var $8=((($7)-(12))|0);
 HEAP32[(($4)>>2)]=$8;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=($10|0)==0;
 if($12){var $13=$8;label=4;break;}else{label=5;break;}
 case 4: 
 var $13;
 var $14=($2|0)==($13|0);
 if($14){label=8;break;}else{var $7=$13;label=3;break;}
 case 5: 
 var $15=((($7)-(12)+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($10|0)==($16|0);
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i_i_i_i=((($16)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $18=(((-$11))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$18)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $19=$uglygep29_i_i_i_i_i_i>>>4;
 var $20=$19^-1;
 var $scevgep30_i_i_i_i_i_i=(($16+($20<<4))|0);
 HEAP32[(($15)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=7;break;
 case 7: 
 var $21=$10;
 __ZdlPv($21);
 var $_pre29_i_i_i=HEAP32[(($4)>>2)];
 var $13=$_pre29_i_i_i;label=4;break;
 case 8: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $22=$_pre_i_i_i;label=9;break;
 case 9: 
 var $22;
 var $23=$22;
 __ZdlPv($23);
 label=10;break;
 case 10: 
 var $24=(($this+24)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=19;break;}else{label=11;break;}
 case 11: 
 var $27=(($this+28)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($25|0)==($28|0);
 if($29){var $45=$25;label=18;break;}else{var $30=$28;label=12;break;}
 case 12: 
 var $30;
 var $31=((($30)-(12))|0);
 HEAP32[(($27)>>2)]=$31;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 var $35=($33|0)==0;
 if($35){var $36=$31;label=13;break;}else{label=14;break;}
 case 13: 
 var $36;
 var $37=($25|0)==($36|0);
 if($37){label=17;break;}else{var $30=$36;label=12;break;}
 case 14: 
 var $38=((($30)-(12)+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($33|0)==($39|0);
 if($40){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i_i9=((($39)-(16))|0);
 var $scevgep28_i_i_i_i_i_i10=$scevgep_i_i_i_i_i_i9;
 var $41=(((-$34))|0);
 var $uglygep_i_i_i_i_i_i11=(($scevgep28_i_i_i_i_i_i10+$41)|0);
 var $uglygep29_i_i_i_i_i_i12=$uglygep_i_i_i_i_i_i11;
 var $42=$uglygep29_i_i_i_i_i_i12>>>4;
 var $43=$42^-1;
 var $scevgep30_i_i_i_i_i_i13=(($39+($43<<4))|0);
 HEAP32[(($38)>>2)]=$scevgep30_i_i_i_i_i_i13;
 label=16;break;
 case 16: 
 var $44=$33;
 __ZdlPv($44);
 var $_pre29_i_i_i15=HEAP32[(($27)>>2)];
 var $36=$_pre29_i_i_i15;label=13;break;
 case 17: 
 var $_pre_i_i_i17=HEAP32[(($24)>>2)];
 var $45=$_pre_i_i_i17;label=18;break;
 case 18: 
 var $45;
 var $46=$45;
 __ZdlPv($46);
 label=19;break;
 case 19: 
 var $48=(($this+12)|0);
 var $49=(($this+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$50;
 __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($48,$51);
 var $52=(($this)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$53;
 var $55=($53|0)==0;
 if($55){label=23;break;}else{label=20;break;}
 case 20: 
 var $56=(($this+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($53|0)==($57|0);
 if($58){label=22;break;}else{label=21;break;}
 case 21: 
 var $scevgep_i_i_i=((($57)-(40))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $59=(((-$54))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$59)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $60=(((($uglygep29_i_i_i>>>0))/(40))&-1);
 var $61=$60^-1;
 var $scevgep30_i_i_i=(($57+((($61)*(40))&-1))|0);
 HEAP32[(($56)>>2)]=$scevgep30_i_i_i;
 label=22;break;
 case 22: 
 var $62=$53;
 __ZdlPv($62);
 label=23;break;
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this,$__nd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__nd|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($__nd)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this,$5);
 var $6=(($__nd+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this,$8);
 var $9=$__nd;
 __ZdlPv($9);
 return;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15OptimizedVolumeD1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=($2|0)==0;
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($2|0)==($6|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $scevgep_i_i_i_i=((($6)-(24))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $8=(((-$3))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$8)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $9=(((($uglygep29_i_i_i_i>>>0))/(24))&-1);
 var $10=$9^-1;
 var $scevgep30_i_i_i_i=(($6+((($10)*(24))&-1))|0);
 HEAP32[(($5)>>2)]=$scevgep30_i_i_i_i;
 label=4;break;
 case 4: 
 var $11=$2;
 __ZdlPv($11);
 label=5;break;
 case 5: 
 var $12=(($this+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=14;break;}else{label=6;break;}
 case 6: 
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($13|0)==($16|0);
 if($17){var $33=$13;label=13;break;}else{var $18=$16;label=7;break;}
 case 7: 
 var $18;
 var $19=((($18)-(24))|0);
 HEAP32[(($15)>>2)]=$19;
 var $20=((($18)-(24)+12)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$21;
 var $23=($21|0)==0;
 if($23){var $24=$19;label=8;break;}else{label=9;break;}
 case 8: 
 var $24;
 var $25=($13|0)==($24|0);
 if($25){label=12;break;}else{var $18=$24;label=7;break;}
 case 9: 
 var $26=((($18)-(24)+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($21|0)==($27|0);
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 var $scevgep_i_i_i_i_i_i_i_i=((($27)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i;
 var $29=(((-$22))|0);
 var $uglygep_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i+$29)|0);
 var $uglygep29_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i;
 var $30=$uglygep29_i_i_i_i_i_i_i_i>>>2;
 var $31=$30^-1;
 var $scevgep30_i_i_i_i_i_i_i_i=(($27+($31<<2))|0);
 HEAP32[(($26)>>2)]=$scevgep30_i_i_i_i_i_i_i_i;
 label=11;break;
 case 11: 
 var $32=$21;
 __ZdlPv($32);
 var $_pre29_i_i_i=HEAP32[(($15)>>2)];
 var $24=$_pre29_i_i_i;label=8;break;
 case 12: 
 var $_pre_i_i_i=HEAP32[(($12)>>2)];
 var $33=$_pre_i_i_i;label=13;break;
 case 13: 
 var $33;
 var $34=$33;
 __ZdlPv($34);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN6SlicerC2EP15OptimizedVolumeiibb($this,$ov,$initial,$thickness,$keepNoneClosed,$extensiveStitching){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tv_i=sp;
 var $tv_i4_i=(sp)+(8);
 var $tv_i_i=(sp)+(16);
 var $s=(sp)+(24);
 var $_sroa_4174=(sp)+(64);
 var $_sroa_4166=(sp)+(72);
 var $_sroa_4158=(sp)+(80);
 var $_sroa_4150=(sp)+(88);
 var $_sroa_4142=(sp)+(96);
 var $_sroa_4=(sp)+(104);
 var $1=(sp)+(112);
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+12)|0);
 var $6=(($this+24)|0);
 var $7=(($ov)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+12)|0);
 var $10=$5;
 var $11=$9;
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
 var $12=HEAP32[(($7)>>2)];
 var $13=(($12+24)|0);
 var $14=$6;
 var $15=$13;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 var $16=(($this+20)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=((($17)-($initial))|0);
 var $19=(((($18|0))/(($thickness|0)))&-1);
 var $20=((($19)+(1))|0);
 var $21=HEAP32[((_stderr)>>2)];
 var $22=_fprintf($21,480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=HEAP32[(($3)>>2)];
 var $24=HEAP32[(($2)>>2)];
 var $25=$23;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=(((($27|0))/(48))&-1);
 var $29=($28>>>0)<($20>>>0);
 if($29){label=2;break;}else{label=3;break;}
 case 2: 
 var $31=(($this)|0);
 var $32=((($20)-($28))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI11SlicerLayerNS_9allocatorIS1_EEE8__appendEj($31,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=14;break; }
 case 3: 
 var $34=($28>>>0)>($20>>>0);
 if($34){label=4;break;}else{label=5;break;}
 case 4: 
 var $36=(($24+((($20)*(48))&-1))|0);
 var $37=($36|0)==($23|0);
 if($37){label=5;break;}else{var $46=$23;label=7;break;}
 case 5: 
 var $38=(($ov+20)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($ov+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=42;break;}else{label=6;break;}
 case 6: 
 var $43=(($ov+4)|0);
 var $44=$s;
 var $_sroa_0159_0__idx=(($s)|0);
 var $_sroa_1160_8__idx161=(($s+8)|0);
 var $_sroa_2162_16__idx163=(($s+16)|0);
 var $_sroa_3164_24__idx165=(($s+24)|0);
 var $_sroa_4166_32__idx=(($s+32)|0);
 var $_sroa_4166_32__cast=$_sroa_4166_32__idx;
 var $_sroa_4166_32_idx=(($_sroa_4166)|0);
 var $_sroa_4150_32_idx=(($_sroa_4150)|0);
 var $_sroa_4_32_idx=(($_sroa_4)|0);
 var $_sroa_4142_32_idx=(($_sroa_4142)|0);
 var $_sroa_4158_32_idx=(($_sroa_4158)|0);
 var $45=(($s+36)|0);
 var $_sroa_4174_32_idx=(($_sroa_4174)|0);
 var $i_0276=0;var $53=$41;var $52=$39;label=10;break;
 case 7: 
 var $46;
 var $47=((($46)-(48))|0);
 HEAP32[(($3)>>2)]=$47;
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayerD2Ev($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $48=($36|0)==($_pre_i|0);
 if($48){label=5;break;}else{var $46=$_pre_i;label=7;break;}
 case 9: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1); var $50$1 = tempRet0;
 var $51=$50$0;
 ___cxa_call_unexpected($51);
 throw "Reached an unreachable!";
 case 10: 
 var $52;
 var $53;
 var $i_0276;
 var $54=(($53+((($i_0276)*(24))&-1))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=HEAP32[(($43)>>2)];
 var $p0_sroa_0_0__idx=(($56+((($55)*(24))&-1))|0);
 var $p0_sroa_0_0_copyload=HEAP32[(($p0_sroa_0_0__idx)>>2)];
 var $p0_sroa_1_4__idx235=(($56+((($55)*(24))&-1)+4)|0);
 var $p0_sroa_1_4_copyload=HEAP32[(($p0_sroa_1_4__idx235)>>2)];
 var $p0_sroa_2_8__idx248=(($56+((($55)*(24))&-1)+8)|0);
 var $p0_sroa_2_8_copyload=HEAP32[(($p0_sroa_2_8__idx248)>>2)];
 var $57=(($53+((($i_0276)*(24))&-1)+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $p1_sroa_0_0__idx=(($56+((($58)*(24))&-1))|0);
 var $p1_sroa_0_0_copyload=HEAP32[(($p1_sroa_0_0__idx)>>2)];
 var $p1_sroa_1_4__idx210=(($56+((($58)*(24))&-1)+4)|0);
 var $p1_sroa_1_4_copyload=HEAP32[(($p1_sroa_1_4__idx210)>>2)];
 var $p1_sroa_2_8__idx224=(($56+((($58)*(24))&-1)+8)|0);
 var $p1_sroa_2_8_copyload=HEAP32[(($p1_sroa_2_8__idx224)>>2)];
 var $59=(($53+((($i_0276)*(24))&-1)+8)|0);
 var $60=HEAP32[(($59)>>2)];
 var $p2_sroa_0_0__idx=(($56+((($60)*(24))&-1))|0);
 var $p2_sroa_0_0_copyload=HEAP32[(($p2_sroa_0_0__idx)>>2)];
 var $p2_sroa_1_4__idx185=(($56+((($60)*(24))&-1)+4)|0);
 var $p2_sroa_1_4_copyload=HEAP32[(($p2_sroa_1_4__idx185)>>2)];
 var $p2_sroa_2_8__idx199=(($56+((($60)*(24))&-1)+8)|0);
 var $p2_sroa_2_8_copyload=HEAP32[(($p2_sroa_2_8__idx199)>>2)];
 var $61=($p1_sroa_2_8_copyload|0)<($p0_sroa_2_8_copyload|0);
 var $_=$61?$p1_sroa_2_8_copyload:$p0_sroa_2_8_copyload;
 var $62=($p2_sroa_2_8_copyload|0)<($_|0);
 var $minZ_1=$62?$p2_sroa_2_8_copyload:$_;
 var $63=($p1_sroa_2_8_copyload|0)>($p0_sroa_2_8_copyload|0);
 var $_128=$63?$p1_sroa_2_8_copyload:$p0_sroa_2_8_copyload;
 var $64=($p2_sroa_2_8_copyload|0)>($_128|0);
 var $maxZ_1=$64?$p2_sroa_2_8_copyload:$_128;
 var $65=((($minZ_1)-($initial))|0);
 var $66=(((($65|0))/(($thickness|0)))&-1);
 var $67=((($maxZ_1)-($initial))|0);
 var $68=(((($67|0))/(($thickness|0)))&-1);
 var $69=($66|0)>($68|0);
 if($69){var $258=$52;var $257=$53;label=41;break;}else{label=11;break;}
 case 11: 
 var $70$0=$p0_sroa_0_0_copyload;
 var $70$1=(((($p0_sroa_0_0_copyload|0)<0))|0)?-1:0;
 var $71=((($p1_sroa_0_0_copyload)-($p0_sroa_0_0_copyload))|0);
 var $72$0=$71;
 var $72$1=(((($71|0)<0))|0)?-1:0;
 var $73=((($p1_sroa_2_8_copyload)-($p0_sroa_2_8_copyload))|0);
 var $74$0=$73;
 var $74$1=(((($73|0)<0))|0)?-1:0;
 var $75$0=$p0_sroa_1_4_copyload;
 var $75$1=(((($p0_sroa_1_4_copyload|0)<0))|0)?-1:0;
 var $76=((($p1_sroa_1_4_copyload)-($p0_sroa_1_4_copyload))|0);
 var $77$0=$76;
 var $77$1=(((($76|0)<0))|0)?-1:0;
 var $78=((($p2_sroa_0_0_copyload)-($p0_sroa_0_0_copyload))|0);
 var $79$0=$78;
 var $79$1=(((($78|0)<0))|0)?-1:0;
 var $80=((($p2_sroa_2_8_copyload)-($p0_sroa_2_8_copyload))|0);
 var $81$0=$80;
 var $81$1=(((($80|0)<0))|0)?-1:0;
 var $82=((($p2_sroa_1_4_copyload)-($p0_sroa_1_4_copyload))|0);
 var $83$0=$82;
 var $83$1=(((($82|0)<0))|0)?-1:0;
 var $84$0=$p1_sroa_0_0_copyload;
 var $84$1=(((($p1_sroa_0_0_copyload|0)<0))|0)?-1:0;
 var $85=((($p2_sroa_0_0_copyload)-($p1_sroa_0_0_copyload))|0);
 var $86$0=$85;
 var $86$1=(((($85|0)<0))|0)?-1:0;
 var $87=((($p2_sroa_2_8_copyload)-($p1_sroa_2_8_copyload))|0);
 var $88$0=$87;
 var $88$1=(((($87|0)<0))|0)?-1:0;
 var $89$0=$p1_sroa_1_4_copyload;
 var $89$1=(((($p1_sroa_1_4_copyload|0)<0))|0)?-1:0;
 var $90=((($p2_sroa_1_4_copyload)-($p1_sroa_1_4_copyload))|0);
 var $91$0=$90;
 var $91$1=(((($90|0)<0))|0)?-1:0;
 var $92=((($p0_sroa_0_0_copyload)-($p1_sroa_0_0_copyload))|0);
 var $93$0=$92;
 var $93$1=(((($92|0)<0))|0)?-1:0;
 var $94=((($p0_sroa_2_8_copyload)-($p1_sroa_2_8_copyload))|0);
 var $95$0=$94;
 var $95$1=(((($94|0)<0))|0)?-1:0;
 var $96=((($p0_sroa_1_4_copyload)-($p1_sroa_1_4_copyload))|0);
 var $97$0=$96;
 var $97$1=(((($96|0)<0))|0)?-1:0;
 var $98$0=$p2_sroa_0_0_copyload;
 var $98$1=(((($p2_sroa_0_0_copyload|0)<0))|0)?-1:0;
 var $99=((($p0_sroa_0_0_copyload)-($p2_sroa_0_0_copyload))|0);
 var $100$0=$99;
 var $100$1=(((($99|0)<0))|0)?-1:0;
 var $101=((($p0_sroa_2_8_copyload)-($p2_sroa_2_8_copyload))|0);
 var $102$0=$101;
 var $102$1=(((($101|0)<0))|0)?-1:0;
 var $103$0=$p2_sroa_1_4_copyload;
 var $103$1=(((($p2_sroa_1_4_copyload|0)<0))|0)?-1:0;
 var $104=((($p0_sroa_1_4_copyload)-($p2_sroa_1_4_copyload))|0);
 var $105$0=$104;
 var $105$1=(((($104|0)<0))|0)?-1:0;
 var $106=((($p1_sroa_0_0_copyload)-($p2_sroa_0_0_copyload))|0);
 var $107$0=$106;
 var $107$1=(((($106|0)<0))|0)?-1:0;
 var $108=((($p1_sroa_2_8_copyload)-($p2_sroa_2_8_copyload))|0);
 var $109$0=$108;
 var $109$1=(((($108|0)<0))|0)?-1:0;
 var $110=((($p1_sroa_1_4_copyload)-($p2_sroa_1_4_copyload))|0);
 var $111$0=$110;
 var $111$1=(((($110|0)<0))|0)?-1:0;
 var $layerNr_0271=$66;label=20;break;
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=15;break;
 case 13: 
 var $lpad_loopexit268$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit268$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit268$1;var $lpad_phi$0=$lpad_loopexit268$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit269$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit269$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit269$1;var $lpad_phi$0=$lpad_nonloopexit269$0;label=15;break;
 case 15: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $112=HEAP32[(($2)>>2)];
 var $113=($112|0)==0;
 if($113){label=49;break;}else{label=16;break;}
 case 16: 
 var $114=HEAP32[(($3)>>2)];
 var $115=($112|0)==($114|0);
 if($115){label=19;break;}else{label=17;break;}
 case 17: 
 var $117=((($114)-(48))|0);
 HEAP32[(($3)>>2)]=$117;
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayerD2Ev($117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 18: 
 var $119$0 = ___cxa_find_matching_catch(-1, -1); var $119$1 = tempRet0;
 var $120=$119$0;
 ___cxa_call_unexpected($120);
 throw "Reached an unreachable!";
 case 19: 
 var $121=HEAP32[(($2)>>2)];
 var $122=$121;
 __ZdlPv($122);
 label=49;break;
 case 20: 
 var $layerNr_0271;
 var $124=(Math_imul($layerNr_0271,$thickness)|0);
 var $125=((($124)+($initial))|0);
 var $126=($125|0)<($minZ_1|0);
 var $127=($layerNr_0271|0)<0;
 var $or_cond=$126|$127;
 if($or_cond){label=39;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($44)>>2)]=0; HEAP32[((($44)+(4))>>2)]=0; HEAP32[((($44)+(8))>>2)]=0; HEAP32[((($44)+(12))>>2)]=0; HEAP32[((($44)+(16))>>2)]=0; HEAP32[((($44)+(20))>>2)]=0; HEAP32[((($44)+(24))>>2)]=0; HEAP32[((($44)+(28))>>2)]=0;
 var $129=($p0_sroa_2_8_copyload|0)<($125|0);
 var $_not=$129^1;
 var $130=($p1_sroa_2_8_copyload|0)<($125|0);
 var $or_cond249=$130|$_not;
 var $131=($p2_sroa_2_8_copyload|0)<($125|0);
 var $or_cond250=$or_cond249|$131;
 if($or_cond250){label=23;break;}else{label=22;break;}
 case 22: 
 var $133=((($125)-($p0_sroa_2_8_copyload))|0);
 var $134$0=$133;
 var $134$1=(((($133|0)<0))|0)?-1:0;
 var $135$0=___muldi3($134$0,$134$1,$79$0,$79$1);var $135$1=tempRet0;
 var $136$0=___divdi3($135$0,$135$1,$81$0,$81$1);var $136$1=tempRet0;
 var $137$0=_i64Add($136$0,$136$1,$70$0,$70$1);var $137$1=tempRet0;
 var $138$0=___muldi3($134$0,$134$1,$83$0,$83$1);var $138$1=tempRet0;
 var $139$0=___divdi3($138$0,$138$1,$81$0,$81$1);var $139$1=tempRet0;
 var $140$0=_i64Add($139$0,$139$1,$75$0,$75$1);var $140$1=tempRet0;
 var $141$0=___muldi3($134$0,$134$1,$72$0,$72$1);var $141$1=tempRet0;
 var $142$0=___divdi3($141$0,$141$1,$74$0,$74$1);var $142$1=tempRet0;
 var $143$0=_i64Add($142$0,$142$1,$70$0,$70$1);var $143$1=tempRet0;
 var $144$0=___muldi3($134$0,$134$1,$77$0,$77$1);var $144$1=tempRet0;
 var $145$0=___divdi3($144$0,$144$1,$74$0,$74$1);var $145$1=tempRet0;
 var $146$0=_i64Add($145$0,$145$1,$75$0,$75$1);var $146$1=tempRet0;
 var $st$0$0=(($_sroa_0159_0__idx)|0);
 HEAP32[(($st$0$0)>>2)]=$137$0;
 var $st$1$1=(($_sroa_0159_0__idx+4)|0);
 HEAP32[(($st$1$1)>>2)]=$137$1;
 var $st$2$0=(($_sroa_1160_8__idx161)|0);
 HEAP32[(($st$2$0)>>2)]=$140$0;
 var $st$3$1=(($_sroa_1160_8__idx161+4)|0);
 HEAP32[(($st$3$1)>>2)]=$140$1;
 var $st$4$0=(($_sroa_2162_16__idx163)|0);
 HEAP32[(($st$4$0)>>2)]=$143$0;
 var $st$5$1=(($_sroa_2162_16__idx163+4)|0);
 HEAP32[(($st$5$1)>>2)]=$143$1;
 var $st$6$0=(($_sroa_3164_24__idx165)|0);
 HEAP32[(($st$6$0)>>2)]=$146$0;
 var $st$7$1=(($_sroa_3164_24__idx165+4)|0);
 HEAP32[(($st$7$1)>>2)]=$146$1;
 assert(5 % 1 === 0);HEAP32[(($_sroa_4166_32__cast)>>2)]=HEAP32[(($_sroa_4174_32_idx)>>2)];;HEAP8[((($_sroa_4166_32__cast)+(4))|0)]=HEAP8[((($_sroa_4174_32_idx)+(4))|0)];
 label=33;break;
 case 23: 
 var $148=($p0_sroa_2_8_copyload|0)>($125|0);
 var $or_cond251=$148&$130;
 var $or_cond252=$or_cond251&$131;
 if($or_cond252){label=24;break;}else{label=25;break;}
 case 24: 
 var $150=((($125)-($p0_sroa_2_8_copyload))|0);
 var $151$0=$150;
 var $151$1=(((($150|0)<0))|0)?-1:0;
 var $152$0=___muldi3($151$0,$151$1,$72$0,$72$1);var $152$1=tempRet0;
 var $153$0=___divdi3($152$0,$152$1,$74$0,$74$1);var $153$1=tempRet0;
 var $154$0=_i64Add($153$0,$153$1,$70$0,$70$1);var $154$1=tempRet0;
 var $155$0=___muldi3($151$0,$151$1,$77$0,$77$1);var $155$1=tempRet0;
 var $156$0=___divdi3($155$0,$155$1,$74$0,$74$1);var $156$1=tempRet0;
 var $157$0=_i64Add($156$0,$156$1,$75$0,$75$1);var $157$1=tempRet0;
 var $158$0=___muldi3($151$0,$151$1,$79$0,$79$1);var $158$1=tempRet0;
 var $159$0=___divdi3($158$0,$158$1,$81$0,$81$1);var $159$1=tempRet0;
 var $160$0=_i64Add($159$0,$159$1,$70$0,$70$1);var $160$1=tempRet0;
 var $161$0=___muldi3($151$0,$151$1,$83$0,$83$1);var $161$1=tempRet0;
 var $162$0=___divdi3($161$0,$161$1,$81$0,$81$1);var $162$1=tempRet0;
 var $163$0=_i64Add($162$0,$162$1,$75$0,$75$1);var $163$1=tempRet0;
 var $st$8$0=(($_sroa_0159_0__idx)|0);
 HEAP32[(($st$8$0)>>2)]=$154$0;
 var $st$9$1=(($_sroa_0159_0__idx+4)|0);
 HEAP32[(($st$9$1)>>2)]=$154$1;
 var $st$10$0=(($_sroa_1160_8__idx161)|0);
 HEAP32[(($st$10$0)>>2)]=$157$0;
 var $st$11$1=(($_sroa_1160_8__idx161+4)|0);
 HEAP32[(($st$11$1)>>2)]=$157$1;
 var $st$12$0=(($_sroa_2162_16__idx163)|0);
 HEAP32[(($st$12$0)>>2)]=$160$0;
 var $st$13$1=(($_sroa_2162_16__idx163+4)|0);
 HEAP32[(($st$13$1)>>2)]=$160$1;
 var $st$14$0=(($_sroa_3164_24__idx165)|0);
 HEAP32[(($st$14$0)>>2)]=$163$0;
 var $st$15$1=(($_sroa_3164_24__idx165+4)|0);
 HEAP32[(($st$15$1)>>2)]=$163$1;
 assert(5 % 1 === 0);HEAP32[(($_sroa_4166_32__cast)>>2)]=HEAP32[(($_sroa_4166_32_idx)>>2)];;HEAP8[((($_sroa_4166_32__cast)+(4))|0)]=HEAP8[((($_sroa_4166_32_idx)+(4))|0)];
 label=33;break;
 case 25: 
 var $_not253=$130^1;
 var $brmerge=$129|$_not253;
 var $or_cond254=$brmerge|$131;
 if($or_cond254){label=27;break;}else{label=26;break;}
 case 26: 
 var $166=((($125)-($p1_sroa_2_8_copyload))|0);
 var $167$0=$166;
 var $167$1=(((($166|0)<0))|0)?-1:0;
 var $168$0=___muldi3($167$0,$167$1,$93$0,$93$1);var $168$1=tempRet0;
 var $169$0=___divdi3($168$0,$168$1,$95$0,$95$1);var $169$1=tempRet0;
 var $170$0=_i64Add($169$0,$169$1,$84$0,$84$1);var $170$1=tempRet0;
 var $171$0=___muldi3($167$0,$167$1,$97$0,$97$1);var $171$1=tempRet0;
 var $172$0=___divdi3($171$0,$171$1,$95$0,$95$1);var $172$1=tempRet0;
 var $173$0=_i64Add($172$0,$172$1,$89$0,$89$1);var $173$1=tempRet0;
 var $174$0=___muldi3($167$0,$167$1,$86$0,$86$1);var $174$1=tempRet0;
 var $175$0=___divdi3($174$0,$174$1,$88$0,$88$1);var $175$1=tempRet0;
 var $176$0=_i64Add($175$0,$175$1,$84$0,$84$1);var $176$1=tempRet0;
 var $177$0=___muldi3($167$0,$167$1,$91$0,$91$1);var $177$1=tempRet0;
 var $178$0=___divdi3($177$0,$177$1,$88$0,$88$1);var $178$1=tempRet0;
 var $179$0=_i64Add($178$0,$178$1,$89$0,$89$1);var $179$1=tempRet0;
 var $st$16$0=(($_sroa_0159_0__idx)|0);
 HEAP32[(($st$16$0)>>2)]=$170$0;
 var $st$17$1=(($_sroa_0159_0__idx+4)|0);
 HEAP32[(($st$17$1)>>2)]=$170$1;
 var $st$18$0=(($_sroa_1160_8__idx161)|0);
 HEAP32[(($st$18$0)>>2)]=$173$0;
 var $st$19$1=(($_sroa_1160_8__idx161+4)|0);
 HEAP32[(($st$19$1)>>2)]=$173$1;
 var $st$20$0=(($_sroa_2162_16__idx163)|0);
 HEAP32[(($st$20$0)>>2)]=$176$0;
 var $st$21$1=(($_sroa_2162_16__idx163+4)|0);
 HEAP32[(($st$21$1)>>2)]=$176$1;
 var $st$22$0=(($_sroa_3164_24__idx165)|0);
 HEAP32[(($st$22$0)>>2)]=$179$0;
 var $st$23$1=(($_sroa_3164_24__idx165+4)|0);
 HEAP32[(($st$23$1)>>2)]=$179$1;
 assert(5 % 1 === 0);HEAP32[(($_sroa_4166_32__cast)>>2)]=HEAP32[(($_sroa_4158_32_idx)>>2)];;HEAP8[((($_sroa_4166_32__cast)+(4))|0)]=HEAP8[((($_sroa_4158_32_idx)+(4))|0)];
 label=33;break;
 case 27: 
 var $_not255_not=($p1_sroa_2_8_copyload|0)>($125|0);
 var $brmerge257_not=$129&$_not255_not;
 var $or_cond258=$brmerge257_not&$131;
 if($or_cond258){label=28;break;}else{label=29;break;}
 case 28: 
 var $182=((($125)-($p1_sroa_2_8_copyload))|0);
 var $183$0=$182;
 var $183$1=(((($182|0)<0))|0)?-1:0;
 var $184$0=___muldi3($183$0,$183$1,$86$0,$86$1);var $184$1=tempRet0;
 var $185$0=___divdi3($184$0,$184$1,$88$0,$88$1);var $185$1=tempRet0;
 var $186$0=_i64Add($185$0,$185$1,$84$0,$84$1);var $186$1=tempRet0;
 var $187$0=___muldi3($183$0,$183$1,$91$0,$91$1);var $187$1=tempRet0;
 var $188$0=___divdi3($187$0,$187$1,$88$0,$88$1);var $188$1=tempRet0;
 var $189$0=_i64Add($188$0,$188$1,$89$0,$89$1);var $189$1=tempRet0;
 var $190$0=___muldi3($183$0,$183$1,$93$0,$93$1);var $190$1=tempRet0;
 var $191$0=___divdi3($190$0,$190$1,$95$0,$95$1);var $191$1=tempRet0;
 var $192$0=_i64Add($191$0,$191$1,$84$0,$84$1);var $192$1=tempRet0;
 var $193$0=___muldi3($183$0,$183$1,$97$0,$97$1);var $193$1=tempRet0;
 var $194$0=___divdi3($193$0,$193$1,$95$0,$95$1);var $194$1=tempRet0;
 var $195$0=_i64Add($194$0,$194$1,$89$0,$89$1);var $195$1=tempRet0;
 var $st$24$0=(($_sroa_0159_0__idx)|0);
 HEAP32[(($st$24$0)>>2)]=$186$0;
 var $st$25$1=(($_sroa_0159_0__idx+4)|0);
 HEAP32[(($st$25$1)>>2)]=$186$1;
 var $st$26$0=(($_sroa_1160_8__idx161)|0);
 HEAP32[(($st$26$0)>>2)]=$189$0;
 var $st$27$1=(($_sroa_1160_8__idx161+4)|0);
 HEAP32[(($st$27$1)>>2)]=$189$1;
 var $st$28$0=(($_sroa_2162_16__idx163)|0);
 HEAP32[(($st$28$0)>>2)]=$192$0;
 var $st$29$1=(($_sroa_2162_16__idx163+4)|0);
 HEAP32[(($st$29$1)>>2)]=$192$1;
 var $st$30$0=(($_sroa_3164_24__idx165)|0);
 HEAP32[(($st$30$0)>>2)]=$195$0;
 var $st$31$1=(($_sroa_3164_24__idx165+4)|0);
 HEAP32[(($st$31$1)>>2)]=$195$1;
 assert(5 % 1 === 0);HEAP32[(($_sroa_4166_32__cast)>>2)]=HEAP32[(($_sroa_4150_32_idx)>>2)];;HEAP8[((($_sroa_4166_32__cast)+(4))|0)]=HEAP8[((($_sroa_4150_32_idx)+(4))|0)];
 label=33;break;
 case 29: 
 var $_not259=($p2_sroa_2_8_copyload|0)>=($125|0);
 var $brmerge260=$_not259|$130;
 var $brmerge261=$brmerge260|$129;
 if($brmerge261){label=31;break;}else{label=30;break;}
 case 30: 
 var $198=((($125)-($p2_sroa_2_8_copyload))|0);
 var $199$0=$198;
 var $199$1=(((($198|0)<0))|0)?-1:0;
 var $200$0=___muldi3($199$0,$199$1,$107$0,$107$1);var $200$1=tempRet0;
 var $201$0=___divdi3($200$0,$200$1,$109$0,$109$1);var $201$1=tempRet0;
 var $202$0=_i64Add($201$0,$201$1,$98$0,$98$1);var $202$1=tempRet0;
 var $203$0=___muldi3($199$0,$199$1,$111$0,$111$1);var $203$1=tempRet0;
 var $204$0=___divdi3($203$0,$203$1,$109$0,$109$1);var $204$1=tempRet0;
 var $205$0=_i64Add($204$0,$204$1,$103$0,$103$1);var $205$1=tempRet0;
 var $206$0=___muldi3($199$0,$199$1,$100$0,$100$1);var $206$1=tempRet0;
 var $207$0=___divdi3($206$0,$206$1,$102$0,$102$1);var $207$1=tempRet0;
 var $208$0=_i64Add($207$0,$207$1,$98$0,$98$1);var $208$1=tempRet0;
 var $209$0=___muldi3($199$0,$199$1,$105$0,$105$1);var $209$1=tempRet0;
 var $210$0=___divdi3($209$0,$209$1,$102$0,$102$1);var $210$1=tempRet0;
 var $211$0=_i64Add($210$0,$210$1,$103$0,$103$1);var $211$1=tempRet0;
 var $st$32$0=(($_sroa_0159_0__idx)|0);
 HEAP32[(($st$32$0)>>2)]=$202$0;
 var $st$33$1=(($_sroa_0159_0__idx+4)|0);
 HEAP32[(($st$33$1)>>2)]=$202$1;
 var $st$34$0=(($_sroa_1160_8__idx161)|0);
 HEAP32[(($st$34$0)>>2)]=$205$0;
 var $st$35$1=(($_sroa_1160_8__idx161+4)|0);
 HEAP32[(($st$35$1)>>2)]=$205$1;
 var $st$36$0=(($_sroa_2162_16__idx163)|0);
 HEAP32[(($st$36$0)>>2)]=$208$0;
 var $st$37$1=(($_sroa_2162_16__idx163+4)|0);
 HEAP32[(($st$37$1)>>2)]=$208$1;
 var $st$38$0=(($_sroa_3164_24__idx165)|0);
 HEAP32[(($st$38$0)>>2)]=$211$0;
 var $st$39$1=(($_sroa_3164_24__idx165+4)|0);
 HEAP32[(($st$39$1)>>2)]=$211$1;
 assert(5 % 1 === 0);HEAP32[(($_sroa_4166_32__cast)>>2)]=HEAP32[(($_sroa_4142_32_idx)>>2)];;HEAP8[((($_sroa_4166_32__cast)+(4))|0)]=HEAP8[((($_sroa_4142_32_idx)+(4))|0)];
 label=33;break;
 case 31: 
 var $_not262=($p2_sroa_2_8_copyload|0)<=($125|0);
 var $brmerge264=$_not262|$_not253;
 var $brmerge266=$brmerge264|$_not;
 if($brmerge266){label=39;break;}else{label=32;break;}
 case 32: 
 var $214=((($125)-($p2_sroa_2_8_copyload))|0);
 var $215$0=$214;
 var $215$1=(((($214|0)<0))|0)?-1:0;
 var $216$0=___muldi3($215$0,$215$1,$100$0,$100$1);var $216$1=tempRet0;
 var $217$0=___divdi3($216$0,$216$1,$102$0,$102$1);var $217$1=tempRet0;
 var $218$0=_i64Add($217$0,$217$1,$98$0,$98$1);var $218$1=tempRet0;
 var $219$0=___muldi3($215$0,$215$1,$105$0,$105$1);var $219$1=tempRet0;
 var $220$0=___divdi3($219$0,$219$1,$102$0,$102$1);var $220$1=tempRet0;
 var $221$0=_i64Add($220$0,$220$1,$103$0,$103$1);var $221$1=tempRet0;
 var $222$0=___muldi3($215$0,$215$1,$107$0,$107$1);var $222$1=tempRet0;
 var $223$0=___divdi3($222$0,$222$1,$109$0,$109$1);var $223$1=tempRet0;
 var $224$0=_i64Add($223$0,$223$1,$98$0,$98$1);var $224$1=tempRet0;
 var $225$0=___muldi3($215$0,$215$1,$111$0,$111$1);var $225$1=tempRet0;
 var $226$0=___divdi3($225$0,$225$1,$109$0,$109$1);var $226$1=tempRet0;
 var $227$0=_i64Add($226$0,$226$1,$103$0,$103$1);var $227$1=tempRet0;
 var $st$40$0=(($_sroa_0159_0__idx)|0);
 HEAP32[(($st$40$0)>>2)]=$218$0;
 var $st$41$1=(($_sroa_0159_0__idx+4)|0);
 HEAP32[(($st$41$1)>>2)]=$218$1;
 var $st$42$0=(($_sroa_1160_8__idx161)|0);
 HEAP32[(($st$42$0)>>2)]=$221$0;
 var $st$43$1=(($_sroa_1160_8__idx161+4)|0);
 HEAP32[(($st$43$1)>>2)]=$221$1;
 var $st$44$0=(($_sroa_2162_16__idx163)|0);
 HEAP32[(($st$44$0)>>2)]=$224$0;
 var $st$45$1=(($_sroa_2162_16__idx163+4)|0);
 HEAP32[(($st$45$1)>>2)]=$224$1;
 var $st$46$0=(($_sroa_3164_24__idx165)|0);
 HEAP32[(($st$46$0)>>2)]=$227$0;
 var $st$47$1=(($_sroa_3164_24__idx165+4)|0);
 HEAP32[(($st$47$1)>>2)]=$227$1;
 assert(5 % 1 === 0);HEAP32[(($_sroa_4166_32__cast)>>2)]=HEAP32[(($_sroa_4_32_idx)>>2)];;HEAP8[((($_sroa_4166_32__cast)+(4))|0)]=HEAP8[((($_sroa_4_32_idx)+(4))|0)];
 label=33;break;
 case 33: 
 var $229=HEAP32[(($2)>>2)];
 var $230=(($229+((($layerNr_0271)*(48))&-1)+4)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($229+((($layerNr_0271)*(48))&-1))|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($229+((($layerNr_0271)*(48))&-1)+12)|0);
 HEAP32[(($1)>>2)]=$i_0276;
 var $235=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEEixERS5_($234,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=13;break; }
 case 34: 
 var $237=$233;
 var $238=$231;
 var $239=((($238)-($237))|0);
 var $240=(((($239|0))/(40))&-1);
 HEAP32[(($235)>>2)]=$240;
 HEAP32[(($_sroa_4166_32__idx)>>2)]=$i_0276;
 HEAP8[($45)]=0;
 var $241=HEAP32[(($2)>>2)];
 var $242=(($241+((($layerNr_0271)*(48))&-1)+4)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($241+((($layerNr_0271)*(48))&-1)+8)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=38;break;}else{label=35;break;}
 case 35: 
 var $248=($243|0)==0;
 if($248){var $251=0;label=37;break;}else{label=36;break;}
 case 36: 
 var $250=$243;
 assert(40 % 1 === 0);HEAP32[(($250)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($250)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($250)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];HEAP32[((($250)+(12))>>2)]=HEAP32[((($44)+(12))>>2)];HEAP32[((($250)+(16))>>2)]=HEAP32[((($44)+(16))>>2)];HEAP32[((($250)+(20))>>2)]=HEAP32[((($44)+(20))>>2)];HEAP32[((($250)+(24))>>2)]=HEAP32[((($44)+(24))>>2)];HEAP32[((($250)+(28))>>2)]=HEAP32[((($44)+(28))>>2)];HEAP32[((($250)+(32))>>2)]=HEAP32[((($44)+(32))>>2)];HEAP32[((($250)+(36))>>2)]=HEAP32[((($44)+(36))>>2)];
 var $_pre=HEAP32[(($242)>>2)];
 var $251=$_pre;label=37;break;
 case 37: 
 var $251;
 var $252=(($251+40)|0);
 HEAP32[(($242)>>2)]=$252;
 label=39;break;
 case 38: 
 var $254=(($241+((($layerNr_0271)*(48))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI13SlicerSegmentNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($254,$s) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=13;break; }
 case 39: 
 var $255=((($layerNr_0271)+(1))|0);
 var $256=($255|0)>($68|0);
 if($256){label=40;break;}else{var $layerNr_0271=$255;label=20;break;}
 case 40: 
 var $_pre281=HEAP32[(($38)>>2)];
 var $_pre282=HEAP32[(($40)>>2)];
 var $258=$_pre281;var $257=$_pre282;label=41;break;
 case 41: 
 var $257;
 var $258;
 var $259=((($i_0276)+(1))|0);
 var $260=$258;
 var $261=$257;
 var $262=((($260)-($261))|0);
 var $263=(((($262|0))/(24))&-1);
 var $264=($259>>>0)<($263>>>0);
 if($264){var $i_0276=$259;var $53=$257;var $52=$258;label=10;break;}else{label=42;break;}
 case 42: 
 var $265=$tv_i;
 var $266=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=14;break; }
 case 43: 
 var $268=(($tv_i)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($269|0);
 var $271=(($tv_i+4)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=($272|0);
 var $274=($273)/(1000000);
 var $275=($270)+($274);
 var $276=HEAP32[(($3)>>2)];
 var $277=HEAP32[(($2)>>2)];
 var $278=($276|0)==($277|0);
 if($278){label=46;break;}else{var $layerNr1_0267=0;var $279=$277;label=44;break;}
 case 44: 
 var $279;
 var $layerNr1_0267;
 var $280=(($279+((($layerNr1_0267)*(48))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayer12makePolygonsEP15OptimizedVolumebb($280,$ov,$keepNoneClosed,$extensiveStitching) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=12;break; }
 case 45: 
 var $282=((($layerNr1_0267)+(1))|0);
 var $283=HEAP32[(($3)>>2)];
 var $284=HEAP32[(($2)>>2)];
 var $285=$283;
 var $286=$284;
 var $287=((($285)-($286))|0);
 var $288=(((($287|0))/(48))&-1);
 var $289=($282>>>0)<($288>>>0);
 if($289){var $layerNr1_0267=$282;var $279=$284;label=44;break;}else{label=46;break;}
 case 46: 
 var $290=$tv_i_i;
 var $291=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=14;break; }
 case 47: 
 var $292=(($tv_i_i)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(($tv_i_i+4)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=$tv_i4_i;
 var $297=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i4_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=14;break; }
 case 48: 
 var $299=($295|0);
 var $300=($299)/(1000000);
 var $301=($293|0);
 var $302=($301)+($300);
 var $303=($302)-($275);
 var $304=_fprintf($21,440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$303,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
 case 49: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__13mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEEixERS5_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__parent=sp;
 var $1=(($this+4)|0);
 var $2=(($1)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=10;break;}else{label=2;break;}
 case 2: 
 var $5=HEAP32[(($__k)>>2)];
 var $__nd_0_in_i=$3;label=3;break;
 case 3: 
 var $__nd_0_in_i;
 var $6=(($__nd_0_in_i+16)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=($5|0)<($8|0);
 if($9){label=4;break;}else{label=6;break;}
 case 4: 
 var $11=(($__nd_0_in_i)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=5;break;}else{var $__nd_0_in_i=$12;label=3;break;}
 case 5: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0_i=$11;var $__parent_0_load=$__nd_0_in_i;label=11;break;
 case 6: 
 var $16=($8|0)<($5|0);
 if($16){label=7;break;}else{label=9;break;}
 case 7: 
 var $18=(($__nd_0_in_i+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=8;break;}else{var $__nd_0_in_i=$19;label=3;break;}
 case 8: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0_i=$18;var $__parent_0_load=$__nd_0_in_i;label=11;break;
 case 9: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0_i=$__parent;var $__parent_0_load=$__nd_0_in_i;label=11;break;
 case 10: 
 var $24=$1;
 HEAP32[(($__parent)>>2)]=$24;
 var $_0_i=$2;var $__parent_0_load=$24;label=11;break;
 case 11: 
 var $__parent_0_load;
 var $_0_i;
 var $25=HEAP32[(($_0_i)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=12;break;}else{var $__r_0=$26;label=19;break;}
 case 12: 
 var $28=__Znwj(24);
 var $29=$28;
 var $30=(($28+16)|0);
 var $31=($30|0)==0;
 if($31){label=14;break;}else{label=13;break;}
 case 13: 
 var $33=$30;
 var $34=HEAP32[(($__k)>>2)];
 HEAP32[(($33)>>2)]=$34;
 label=14;break;
 case 14: 
 var $35=(($28+20)|0);
 var $36=($35|0)==0;
 if($36){label=16;break;}else{label=15;break;}
 case 15: 
 var $38=$35;
 HEAP32[(($38)>>2)]=0;
 label=16;break;
 case 16: 
 var $39=$28;
 var $40=$28;
 HEAP32[(($40)>>2)]=0;
 var $41=(($28+4)|0);
 var $42=$41;
 HEAP32[(($42)>>2)]=0;
 var $43=(($28+8)|0);
 var $44=$43;
 HEAP32[(($44)>>2)]=$__parent_0_load;
 HEAP32[(($_0_i)>>2)]=$39;
 var $45=(($this)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){var $52=$39;label=18;break;}else{label=17;break;}
 case 17: 
 var $51=$48;
 HEAP32[(($45)>>2)]=$51;
 var $_pre_i=HEAP32[(($_0_i)>>2)];
 var $52=$_pre_i;label=18;break;
 case 18: 
 var $52;
 var $53=(($this+4)|0);
 var $54=HEAP32[(($53)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($54,$52);
 var $55=(($this+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=((($56)+(1))|0);
 HEAP32[(($55)>>2)]=$57;
 var $__r_0=$29;label=19;break;
 case 19: 
 var $__r_0;
 var $58=(($__r_0+20)|0);
 STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11SlicerLayer12makePolygonsEP15OptimizedVolumebb($this,$ov,$keepNoneClosed,$extensiveStitching){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $poly=sp;
 var $p0=(sp)+(16);
 var $res=(sp)+(32);
 var $1=(sp)+(56);
 var $2=(sp)+(72);
 var $res15=(sp)+(88);
 var $3=(sp)+(112);
 var $4=(sp)+(128);
 var $5=(sp)+(144);
 var $poly22=(sp)+(160);
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=77;break;}else{label=2;break;}
 case 2: 
 var $11=(($poly)|0);
 var $12=(($poly+4)|0);
 var $13=(($poly+8)|0);
 var $14=$p0;
 var $15=(($ov+16)|0);
 var $16=(($this+12)|0);
 var $17=(($this+16)|0);
 var $18=$17;
 var $19=(($17)|0);
 var $p0_idx=(($p0)|0);
 var $p0_idx1220=(($p0+8)|0);
 var $20=(($this+28)|0);
 var $21=(($this+32)|0);
 var $22=(($this+24)|0);
 var $23=(($this+40)|0);
 var $24=(($this+44)|0);
 var $25=(($this+36)|0);
 var $startSegment_01655=0;var $31=$9;label=5;break;
 case 3: 
 var $26=($239|0)==($238|0);
 if($26){label=77;break;}else{label=4;break;}
 case 4: 
 var $_lcssa16351779=$239;
 var $scevgep1777=((($238)-(40))|0);
 var $scevgep17771778=$scevgep1777;
 var $27=(((-$_lcssa16351779))|0);
 var $uglygep1780=(($scevgep17771778+$27)|0);
 var $uglygep17801781=$uglygep1780;
 var $28=(((($uglygep17801781>>>0))/(40))&-1);
 var $29=$28^-1;
 var $scevgep1782=(($238+((($29)*(40))&-1))|0);
 HEAP32[(($6)>>2)]=$scevgep1782;
 label=77;break;
 case 5: 
 var $31;
 var $startSegment_01655;
 var $32=(($31+((($startSegment_01655)*(40))&-1)+36)|0);
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=6;break;}else{label=76;break;}
 case 6: 
 HEAP32[(($11)>>2)]=0;
 HEAP32[(($12)>>2)]=0;
 HEAP32[(($13)>>2)]=0;
 var $37=(($31+((($startSegment_01655)*(40))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($poly,$37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $segmentIndex_0=$startSegment_01655;label=7;break; } else { label=29;break; }
 case 7: 
 var $segmentIndex_0;
 var $38=HEAP32[(($8)>>2)];
 var $39=(($38+((($segmentIndex_0)*(40))&-1)+36)|0);
 HEAP8[($39)]=1;
 var $40=HEAP32[(($8)>>2)];
 var $41=(($40+((($segmentIndex_0)*(40))&-1)+16)|0);
 var $42=$41;
 assert(16 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];HEAP32[((($14)+(12))>>2)]=HEAP32[((($42)+(12))>>2)];
 var $43=HEAP32[(($12)>>2)];
 var $44=HEAP32[(($13)>>2)];
 var $45=($43|0)==($44|0);
 if($45){label=11;break;}else{label=8;break;}
 case 8: 
 var $47=($43|0)==0;
 if($47){label=10;break;}else{label=9;break;}
 case 9: 
 var $49=$43;
 assert(16 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];HEAP32[((($49)+(12))>>2)]=HEAP32[((($14)+(12))>>2)];
 label=10;break;
 case 10: 
 var $50=(($43+16)|0);
 HEAP32[(($12)>>2)]=$50;
 label=12;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($poly,$p0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=28;break; }
 case 12: 
 var $52=HEAP32[(($8)>>2)];
 var $53=(($52+((($segmentIndex_0)*(40))&-1)+32)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=HEAP32[(($15)>>2)];
 var $canClose_0_off01623=0;var $nextIndex_01624=-1;var $i_01625=0;label=13;break;
 case 13: 
 var $i_01625;
 var $nextIndex_01624;
 var $canClose_0_off01623;
 var $57=(($55+((($54)*(24))&-1)+12+($i_01625<<2))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)>-1;
 if($59){label=14;break;}else{var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}
 case 14: 
 var $61=HEAP32[(($19)>>2)];
 var $62=($61|0)==0;
 if($62){var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}else{var $_024_ph29_i_in_i=$61;var $_0_ph30_i_i=$18;label=15;break;}
 case 15: 
 var $_0_ph30_i_i;
 var $_024_ph29_i_in_i;
 var $_02426_i_in_i=$_024_ph29_i_in_i;label=16;break;
 case 16: 
 var $_02426_i_in_i;
 var $_02426_i_i=$_02426_i_in_i;
 var $64=(($_02426_i_in_i+16)|0);
 var $65=$64;
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)<($58|0);
 if($67){label=18;break;}else{label=17;break;}
 case 17: 
 var $68=(($_02426_i_in_i)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){var $_0_ph28_i_i=$_02426_i_i;label=19;break;}else{var $_024_ph29_i_in_i=$69;var $_0_ph30_i_i=$_02426_i_i;label=15;break;}
 case 18: 
 var $72=(($_02426_i_in_i+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)==0;
 if($74){var $_0_ph28_i_i=$_0_ph30_i_i;label=19;break;}else{var $_02426_i_in_i=$73;label=16;break;}
 case 19: 
 var $_0_ph28_i_i;
 var $75=($_0_ph28_i_i|0)==($18|0);
 if($75){var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}else{label=20;break;}
 case 20: 
 var $77=(($_0_ph28_i_i+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($58|0)<($78|0);
 if($79){var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}else{label=21;break;}
 case 21: 
 var $80=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEEixERS5_($16,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $82=HEAP32[(($80)>>2)];
 var $83=HEAP32[(($8)>>2)];
 var $p1_sroa_0_0__idx=(($83+((($82)*(40))&-1))|0);
 var $ld$0$0=(($p1_sroa_0_0__idx)|0);
 var $p1_sroa_0_0_copyload$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($p1_sroa_0_0__idx+4)|0);
 var $p1_sroa_0_0_copyload$1=HEAP32[(($ld$1$1)>>2)];
 var $p1_sroa_1_8__idx1417=(($83+((($82)*(40))&-1)+8)|0);
 var $ld$2$0=(($p1_sroa_1_8__idx1417)|0);
 var $p1_sroa_1_8_copyload$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($p1_sroa_1_8__idx1417+4)|0);
 var $p1_sroa_1_8_copyload$1=HEAP32[(($ld$3$1)>>2)];
 var $ld$4$0=(($p0_idx)|0);
 var $p0_idx_val$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p0_idx+4)|0);
 var $p0_idx_val$1=HEAP32[(($ld$5$1)>>2)];
 var $ld$6$0=(($p0_idx1220)|0);
 var $p0_idx1220_val$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p0_idx1220+4)|0);
 var $p0_idx1220_val$1=HEAP32[(($ld$7$1)>>2)];
 var $84$0=_i64Subtract($p0_idx_val$0,$p0_idx_val$1,$p1_sroa_0_0_copyload$0,$p1_sroa_0_0_copyload$1);var $84$1=tempRet0;
 var $85$0=_i64Subtract($p0_idx1220_val$0,$p0_idx1220_val$1,$p1_sroa_1_8_copyload$0,$p1_sroa_1_8_copyload$1);var $85$1=tempRet0;
 var $$etemp$8$0=10;
 var $$etemp$8$1=0;
 var $_off$0=_i64Add($84$0,$84$1,$$etemp$8$0,$$etemp$8$1);var $_off$1=tempRet0;
 var $$etemp$9$0=20;
 var $$etemp$9$1=0;
 var $86=(($_off$1>>>0) > ($$etemp$9$1>>>0)) | (((($_off$1>>>0) == ($$etemp$9$1>>>0) & ($_off$0>>>0) >  ($$etemp$9$0>>>0))));
 if($86){var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}else{label=23;break;}
 case 23: 
 var $$etemp$10$0=10;
 var $$etemp$10$1=0;
 var $_off1421$0=_i64Add($85$0,$85$1,$$etemp$10$0,$$etemp$10$1);var $_off1421$1=tempRet0;
 var $$etemp$11$0=20;
 var $$etemp$11$1=0;
 var $88=(($_off1421$1>>>0) > ($$etemp$11$1>>>0)) | (((($_off1421$1>>>0) == ($$etemp$11$1>>>0) & ($_off1421$0>>>0) >  ($$etemp$11$0>>>0))));
 if($88){var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}else{label=24;break;}
 case 24: 
 var $89$0=___muldi3($84$0,$84$1,$84$0,$84$1);var $89$1=tempRet0;
 var $90$0=___muldi3($85$0,$85$1,$85$0,$85$1);var $90$1=tempRet0;
 var $91$0=_i64Add($90$0,$90$1,$89$0,$89$1);var $91$1=tempRet0;
 var $$etemp$12$0=101;
 var $$etemp$12$1=0;
 var $92=(($91$1|0) < ($$etemp$12$1|0)) | (((($91$1|0) == ($$etemp$12$1|0) & ($91$0>>>0) <  ($$etemp$12$0>>>0))));
 if($92){label=25;break;}else{var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$canClose_0_off01623;label=37;break;}
 case 25: 
 var $94=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEEixERS5_($16,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=27;break; }
 case 26: 
 var $96=HEAP32[(($94)>>2)];
 var $97=($96|0)==($startSegment_01655|0);
 var $_canClose_0_off0=$97|$canClose_0_off01623;
 var $98=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEEixERS5_($16,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=27;break; }
 case 27: 
 var $lpad_loopexit1619$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1619$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit1619$1;var $eh_lpad_body$0=$lpad_loopexit1619$0;label=30;break;
 case 28: 
 var $lpad_loopexit1626$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1626$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit1626$1;var $eh_lpad_body$0=$lpad_loopexit1626$0;label=30;break;
 case 29: 
 var $lpad_nonloopexit1627$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit1627$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit1627$1;var $eh_lpad_body$0=$lpad_nonloopexit1627$0;label=30;break;
 case 30: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $99=$eh_lpad_body$0;
 var $100=$eh_lpad_body$1;
 var $101=HEAP32[(($11)>>2)];
 var $102=$101;
 var $103=($101|0)==0;
 if($103){var $_01139=$99;var $_01140=$100;label=378;break;}else{label=31;break;}
 case 31: 
 var $104=HEAP32[(($12)>>2)];
 var $105=($101|0)==($104|0);
 if($105){label=33;break;}else{label=32;break;}
 case 32: 
 var $scevgep_i_i_i1229=((($104)-(16))|0);
 var $scevgep28_i_i_i1230=$scevgep_i_i_i1229;
 var $106=(((-$102))|0);
 var $uglygep_i_i_i1231=(($scevgep28_i_i_i1230+$106)|0);
 var $uglygep29_i_i_i1232=$uglygep_i_i_i1231;
 var $107=$uglygep29_i_i_i1232>>>4;
 var $108=$107^-1;
 var $scevgep30_i_i_i1233=(($104+($108<<4))|0);
 HEAP32[(($12)>>2)]=$scevgep30_i_i_i1233;
 label=33;break;
 case 33: 
 var $109=$101;
 __ZdlPv($109);
 var $_01139=$99;var $_01140=$100;label=378;break;
 case 34: 
 var $111=HEAP32[(($98)>>2)];
 var $112=HEAP32[(($8)>>2)];
 var $113=(($112+((($111)*(40))&-1)+36)|0);
 var $114=HEAP8[($113)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=35;break;}else{var $nextIndex_1=$nextIndex_01624;var $canClose_2_off0=$_canClose_0_off0;label=37;break;}
 case 35: 
 var $118=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEEixERS5_($16,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=27;break; }
 case 36: 
 var $120=HEAP32[(($118)>>2)];
 var $nextIndex_1=$120;var $canClose_2_off0=$_canClose_0_off0;label=37;break;
 case 37: 
 var $canClose_2_off0;
 var $nextIndex_1;
 var $121=((($i_01625)+(1))|0);
 var $122=($121>>>0)<3;
 if($122){var $canClose_0_off01623=$canClose_2_off0;var $nextIndex_01624=$nextIndex_1;var $i_01625=$121;label=13;break;}else{label=38;break;}
 case 38: 
 var $124=($nextIndex_1|0)==-1;
 if($124){label=39;break;}else{var $segmentIndex_0=$nextIndex_1;label=7;break;}
 case 39: 
 if($canClose_2_off0){label=40;break;}else{label=56;break;}
 case 40: 
 var $127=HEAP32[(($20)>>2)];
 var $128=HEAP32[(($21)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=55;break;}else{label=41;break;}
 case 41: 
 var $131=($127|0)==0;
 if($131){label=54;break;}else{label=42;break;}
 case 42: 
 var $133=(($127)|0);
 HEAP32[(($133)>>2)]=0;
 var $134=(($127+4)|0);
 HEAP32[(($134)>>2)]=0;
 var $135=(($127+8)|0);
 HEAP32[(($135)>>2)]=0;
 var $136=HEAP32[(($12)>>2)];
 var $137=HEAP32[(($11)>>2)];
 var $138=$136;
 var $139=$137;
 var $140=((($138)-($139))|0);
 var $141=$140>>4;
 var $142=($141|0)==0;
 if($142){label=54;break;}else{label=43;break;}
 case 43: 
 var $144=($141>>>0)>268435455;
 if($144){label=44;break;}else{label=45;break;}
 case 44: 
 var $146=$127;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=50;break; }
 case 45: 
 var $147=(function() { try { __THREW__ = 0; return __Znwj($140) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=50;break; }
 case 46: 
 var $149=$147;
 HEAP32[(($134)>>2)]=$149;
 HEAP32[(($133)>>2)]=$149;
 var $150=(($149+($141<<4))|0);
 HEAP32[(($135)>>2)]=$150;
 var $151=HEAP32[(($11)>>2)];
 var $152=HEAP32[(($12)>>2)];
 var $153=($151|0)==($152|0);
 if($153){label=54;break;}else{var $_011_i_i_i=$151;var $154=$149;label=47;break;}
 case 47: 
 var $154;
 var $_011_i_i_i;
 var $155=($154|0)==0;
 if($155){var $159=0;label=49;break;}else{label=48;break;}
 case 48: 
 var $157=$154;
 var $158=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($157)>>2)]=HEAP32[(($158)>>2)];HEAP32[((($157)+(4))>>2)]=HEAP32[((($158)+(4))>>2)];HEAP32[((($157)+(8))>>2)]=HEAP32[((($158)+(8))>>2)];HEAP32[((($157)+(12))>>2)]=HEAP32[((($158)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($134)>>2)];
 var $159=$_pre12_i_i_i;label=49;break;
 case 49: 
 var $159;
 var $160=(($159+16)|0);
 HEAP32[(($134)>>2)]=$160;
 var $161=(($_011_i_i_i+16)|0);
 var $162=($161|0)==($152|0);
 if($162){label=54;break;}else{var $_011_i_i_i=$161;var $154=$160;label=47;break;}
 case 50: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1); var $164$1 = tempRet0;
 var $165=HEAP32[(($133)>>2)];
 var $166=$165;
 var $167=($165|0)==0;
 if($167){var $eh_lpad_body$1=$164$1;var $eh_lpad_body$0=$164$0;label=30;break;}else{label=51;break;}
 case 51: 
 var $168=HEAP32[(($134)>>2)];
 var $169=($165|0)==($168|0);
 if($169){label=53;break;}else{label=52;break;}
 case 52: 
 var $scevgep_i_i_i1239=((($168)-(16))|0);
 var $scevgep28_i_i_i1240=$scevgep_i_i_i1239;
 var $170=(((-$166))|0);
 var $uglygep_i_i_i1241=(($scevgep28_i_i_i1240+$170)|0);
 var $uglygep29_i_i_i1242=$uglygep_i_i_i1241;
 var $171=$uglygep29_i_i_i1242>>>4;
 var $172=$171^-1;
 var $scevgep30_i_i_i1243=(($168+($172<<4))|0);
 HEAP32[(($134)>>2)]=$scevgep30_i_i_i1243;
 label=53;break;
 case 53: 
 var $173=$165;
 __ZdlPv($173);
 var $eh_lpad_body$1=$164$1;var $eh_lpad_body$0=$164$0;label=30;break;
 case 54: 
 var $174=HEAP32[(($20)>>2)];
 var $175=(($174+12)|0);
 HEAP32[(($20)>>2)]=$175;
 label=72;break;
 case 55: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($22,$poly) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=29;break; }
 case 56: 
 var $178=HEAP32[(($23)>>2)];
 var $179=HEAP32[(($24)>>2)];
 var $180=($178|0)==($179|0);
 if($180){label=71;break;}else{label=57;break;}
 case 57: 
 var $182=($178|0)==0;
 if($182){label=70;break;}else{label=58;break;}
 case 58: 
 var $184=(($178)|0);
 HEAP32[(($184)>>2)]=0;
 var $185=(($178+4)|0);
 HEAP32[(($185)>>2)]=0;
 var $186=(($178+8)|0);
 HEAP32[(($186)>>2)]=0;
 var $187=HEAP32[(($12)>>2)];
 var $188=HEAP32[(($11)>>2)];
 var $189=$187;
 var $190=$188;
 var $191=((($189)-($190))|0);
 var $192=$191>>4;
 var $193=($192|0)==0;
 if($193){label=70;break;}else{label=59;break;}
 case 59: 
 var $195=($192>>>0)>268435455;
 if($195){label=60;break;}else{label=61;break;}
 case 60: 
 var $197=$178;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=66;break; }
 case 61: 
 var $198=(function() { try { __THREW__ = 0; return __Znwj($191) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=66;break; }
 case 62: 
 var $200=$198;
 HEAP32[(($185)>>2)]=$200;
 HEAP32[(($184)>>2)]=$200;
 var $201=(($200+($192<<4))|0);
 HEAP32[(($186)>>2)]=$201;
 var $202=HEAP32[(($11)>>2)];
 var $203=HEAP32[(($12)>>2)];
 var $204=($202|0)==($203|0);
 if($204){label=70;break;}else{var $_011_i_i_i1246=$202;var $205=$200;label=63;break;}
 case 63: 
 var $205;
 var $_011_i_i_i1246;
 var $206=($205|0)==0;
 if($206){var $210=0;label=65;break;}else{label=64;break;}
 case 64: 
 var $208=$205;
 var $209=$_011_i_i_i1246;
 assert(16 % 1 === 0);HEAP32[(($208)>>2)]=HEAP32[(($209)>>2)];HEAP32[((($208)+(4))>>2)]=HEAP32[((($209)+(4))>>2)];HEAP32[((($208)+(8))>>2)]=HEAP32[((($209)+(8))>>2)];HEAP32[((($208)+(12))>>2)]=HEAP32[((($209)+(12))>>2)];
 var $_pre12_i_i_i1248=HEAP32[(($185)>>2)];
 var $210=$_pre12_i_i_i1248;label=65;break;
 case 65: 
 var $210;
 var $211=(($210+16)|0);
 HEAP32[(($185)>>2)]=$211;
 var $212=(($_011_i_i_i1246+16)|0);
 var $213=($212|0)==($203|0);
 if($213){label=70;break;}else{var $_011_i_i_i1246=$212;var $205=$211;label=63;break;}
 case 66: 
 var $215$0 = ___cxa_find_matching_catch(-1, -1); var $215$1 = tempRet0;
 var $216=HEAP32[(($184)>>2)];
 var $217=$216;
 var $218=($216|0)==0;
 if($218){var $eh_lpad_body$1=$215$1;var $eh_lpad_body$0=$215$0;label=30;break;}else{label=67;break;}
 case 67: 
 var $219=HEAP32[(($185)>>2)];
 var $220=($216|0)==($219|0);
 if($220){label=69;break;}else{label=68;break;}
 case 68: 
 var $scevgep_i_i_i1251=((($219)-(16))|0);
 var $scevgep28_i_i_i1252=$scevgep_i_i_i1251;
 var $221=(((-$217))|0);
 var $uglygep_i_i_i1253=(($scevgep28_i_i_i1252+$221)|0);
 var $uglygep29_i_i_i1254=$uglygep_i_i_i1253;
 var $222=$uglygep29_i_i_i1254>>>4;
 var $223=$222^-1;
 var $scevgep30_i_i_i1255=(($219+($223<<4))|0);
 HEAP32[(($185)>>2)]=$scevgep30_i_i_i1255;
 label=69;break;
 case 69: 
 var $224=$216;
 __ZdlPv($224);
 var $eh_lpad_body$1=$215$1;var $eh_lpad_body$0=$215$0;label=30;break;
 case 70: 
 var $225=HEAP32[(($23)>>2)];
 var $226=(($225+12)|0);
 HEAP32[(($23)>>2)]=$226;
 label=72;break;
 case 71: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($25,$poly) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=29;break; }
 case 72: 
 var $228=HEAP32[(($11)>>2)];
 var $229=$228;
 var $230=($228|0)==0;
 if($230){label=76;break;}else{label=73;break;}
 case 73: 
 var $231=HEAP32[(($12)>>2)];
 var $232=($228|0)==($231|0);
 if($232){label=75;break;}else{label=74;break;}
 case 74: 
 var $scevgep_i_i_i1263=((($231)-(16))|0);
 var $scevgep28_i_i_i1264=$scevgep_i_i_i1263;
 var $233=(((-$229))|0);
 var $uglygep_i_i_i1265=(($scevgep28_i_i_i1264+$233)|0);
 var $uglygep29_i_i_i1266=$uglygep_i_i_i1265;
 var $234=$uglygep29_i_i_i1266>>>4;
 var $235=$234^-1;
 var $scevgep30_i_i_i1267=(($231+($235<<4))|0);
 HEAP32[(($12)>>2)]=$scevgep30_i_i_i1267;
 label=75;break;
 case 75: 
 var $236=$228;
 __ZdlPv($236);
 label=76;break;
 case 76: 
 var $237=((($startSegment_01655)+(1))|0);
 var $238=HEAP32[(($6)>>2)];
 var $239=HEAP32[(($8)>>2)];
 var $240=$238;
 var $241=$239;
 var $242=((($240)-($241))|0);
 var $243=(((($242|0))/(40))&-1);
 var $244=($237>>>0)<($243>>>0);
 if($244){var $startSegment_01655=$237;var $31=$239;label=5;break;}else{label=3;break;}
 case 77: 
 var $245=(($this+40)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($this+36)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($246|0)==($248|0);
 var $_pre1868=(($this+28)|0);
 var $_pre1869=(($this+32)|0);
 var $_pre1871=(($this+24)|0);
 if($249){var $250=$246;var $_pre18321864=$246;label=78;break;}else{var $i1_01604=0;var $253=$248;var $252=$246;var $251=$246;label=79;break;}
 case 78: 
 var $_pre18321864;
 var $250;
 var $i3_0=0;var $reversed_0_off0=0;var $bestB_0=-1;var $bestA_0=-1;var $bestScore_0$1=0;var $bestScore_0$0=100000000;var $395=$250;var $_pre18321863=$_pre18321864;label=116;break;
 case 79: 
 var $251;
 var $252;
 var $253;
 var $i1_01604;
 var $254=(($253+((($i1_01604)*(12))&-1)+4)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(($253+((($i1_01604)*(12))&-1))|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($255|0)==($257|0);
 if($258){var $388=$252;var $387=$253;var $386=$251;label=115;break;}else{label=80;break;}
 case 80: 
 var $259=($252|0)==($253|0);
 if($259){var $388=$252;var $387=$252;var $386=$251;label=115;break;}else{var $j_01591=0;var $261=$253;var $260=$251;label=81;break;}
 case 81: 
 var $260;
 var $261;
 var $j_01591;
 var $262=(($261+((($j_01591)*(12))&-1)+4)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($261+((($j_01591)*(12))&-1))|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){var $379=$260;var $378=$261;label=113;break;}else{label=82;break;}
 case 82: 
 var $268=(($261+((($i1_01604)*(12))&-1)+4)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($261+((($i1_01604)*(12))&-1))|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=$269;
 var $273=$271;
 var $274=((($272)-($273))|0);
 var $275=$274>>4;
 var $276=((($275)-(1))|0);
 var $_idx1216=(($271+($276<<4))|0);
 var $ld$13$0=(($_idx1216)|0);
 var $_idx1216_val$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($_idx1216+4)|0);
 var $_idx1216_val$1=HEAP32[(($ld$14$1)>>2)];
 var $_idx1217=(($271+($276<<4)+8)|0);
 var $ld$15$0=(($_idx1217)|0);
 var $_idx1217_val$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($_idx1217+4)|0);
 var $_idx1217_val$1=HEAP32[(($ld$16$1)>>2)];
 var $_idx1218=(($265)|0);
 var $ld$17$0=(($_idx1218)|0);
 var $_idx1218_val$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($_idx1218+4)|0);
 var $_idx1218_val$1=HEAP32[(($ld$18$1)>>2)];
 var $_idx1219=(($265+8)|0);
 var $ld$19$0=(($_idx1219)|0);
 var $_idx1219_val$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($_idx1219+4)|0);
 var $_idx1219_val$1=HEAP32[(($ld$20$1)>>2)];
 var $277$0=_i64Subtract($_idx1216_val$0,$_idx1216_val$1,$_idx1218_val$0,$_idx1218_val$1);var $277$1=tempRet0;
 var $278$0=_i64Subtract($_idx1217_val$0,$_idx1217_val$1,$_idx1219_val$0,$_idx1219_val$1);var $278$1=tempRet0;
 var $279$0=___muldi3($277$0,$277$1,$277$0,$277$1);var $279$1=tempRet0;
 var $280$0=___muldi3($278$0,$278$1,$278$0,$278$1);var $280$1=tempRet0;
 var $281$0=_i64Add($280$0,$280$1,$279$0,$279$1);var $281$1=tempRet0;
 var $$etemp$21$0=4;
 var $$etemp$21$1=0;
 var $282=(($281$1|0) < ($$etemp$21$1|0)) | (((($281$1|0) == ($$etemp$21$1|0) & ($281$0>>>0) <  ($$etemp$21$0>>>0))));
 if($282){label=83;break;}else{var $379=$260;var $378=$261;label=113;break;}
 case 83: 
 var $284=($i1_01604|0)==($j_01591|0);
 if($284){label=84;break;}else{var $n_01582=0;var $349=$261;var $348=$265;var $347=$269;label=103;break;}
 case 84: 
 var $286=(($261+((($i1_01604)*(12))&-1))|0);
 var $287=HEAP32[(($_pre1868)>>2)];
 var $288=HEAP32[(($_pre1869)>>2)];
 var $289=($287|0)==($288|0);
 if($289){label=100;break;}else{label=85;break;}
 case 85: 
 var $291=($287|0)==0;
 if($291){label=99;break;}else{label=86;break;}
 case 86: 
 var $293=(($287)|0);
 HEAP32[(($293)>>2)]=0;
 var $294=(($287+4)|0);
 HEAP32[(($294)>>2)]=0;
 var $295=(($287+8)|0);
 HEAP32[(($295)>>2)]=0;
 var $296=HEAP32[(($268)>>2)];
 var $297=(($286)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=$296;
 var $300=$298;
 var $301=((($299)-($300))|0);
 var $302=$301>>4;
 var $303=($302|0)==0;
 if($303){label=99;break;}else{label=87;break;}
 case 87: 
 var $305=($302>>>0)>268435455;
 if($305){label=88;break;}else{label=89;break;}
 case 88: 
 var $307=$287;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($307) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=94;break; }
 case 89: 
 var $308=(function() { try { __THREW__ = 0; return __Znwj($301) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=94;break; }
 case 90: 
 var $310=$308;
 HEAP32[(($294)>>2)]=$310;
 HEAP32[(($293)>>2)]=$310;
 var $311=(($310+($302<<4))|0);
 HEAP32[(($295)>>2)]=$311;
 var $312=HEAP32[(($297)>>2)];
 var $313=HEAP32[(($268)>>2)];
 var $314=($312|0)==($313|0);
 if($314){label=99;break;}else{var $_011_i_i_i1272=$312;var $315=$310;label=91;break;}
 case 91: 
 var $315;
 var $_011_i_i_i1272;
 var $316=($315|0)==0;
 if($316){var $320=0;label=93;break;}else{label=92;break;}
 case 92: 
 var $318=$315;
 var $319=$_011_i_i_i1272;
 assert(16 % 1 === 0);HEAP32[(($318)>>2)]=HEAP32[(($319)>>2)];HEAP32[((($318)+(4))>>2)]=HEAP32[((($319)+(4))>>2)];HEAP32[((($318)+(8))>>2)]=HEAP32[((($319)+(8))>>2)];HEAP32[((($318)+(12))>>2)]=HEAP32[((($319)+(12))>>2)];
 var $_pre12_i_i_i1274=HEAP32[(($294)>>2)];
 var $320=$_pre12_i_i_i1274;label=93;break;
 case 93: 
 var $320;
 var $321=(($320+16)|0);
 HEAP32[(($294)>>2)]=$321;
 var $322=(($_011_i_i_i1272+16)|0);
 var $323=($322|0)==($313|0);
 if($323){label=99;break;}else{var $_011_i_i_i1272=$322;var $315=$321;label=91;break;}
 case 94: 
 var $325$0 = ___cxa_find_matching_catch(-1, -1); var $325$1 = tempRet0;
 var $326=HEAP32[(($293)>>2)];
 var $327=$326;
 var $328=($326|0)==0;
 if($328){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=HEAP32[(($294)>>2)];
 var $330=($326|0)==($329|0);
 if($330){label=97;break;}else{label=96;break;}
 case 96: 
 var $scevgep_i_i_i1277=((($329)-(16))|0);
 var $scevgep28_i_i_i1278=$scevgep_i_i_i1277;
 var $331=(((-$327))|0);
 var $uglygep_i_i_i1279=(($scevgep28_i_i_i1278+$331)|0);
 var $uglygep29_i_i_i1280=$uglygep_i_i_i1279;
 var $332=$uglygep29_i_i_i1280>>>4;
 var $333=$332^-1;
 var $scevgep30_i_i_i1281=(($329+($333<<4))|0);
 HEAP32[(($294)>>2)]=$scevgep30_i_i_i1281;
 label=97;break;
 case 97: 
 var $334=$326;
 __ZdlPv($334);
 label=98;break;
 case 98: 
 ___resumeException($325$0)
 case 99: 
 var $335=HEAP32[(($_pre1868)>>2)];
 var $336=(($335+12)|0);
 HEAP32[(($_pre1868)>>2)]=$336;
 label=101;break;
 case 100: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($_pre1871,$286);
 label=101;break;
 case 101: 
 var $338=HEAP32[(($247)>>2)];
 var $339=(($338+((($i1_01604)*(12))&-1))|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=(($338+((($i1_01604)*(12))&-1)+4)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=($340|0)==($342|0);
 if($343){var $_pre1835=$338;label=114;break;}else{label=102;break;}
 case 102: 
 var $344=$340;
 var $scevgep1769=((($342)-(16))|0);
 var $scevgep17691770=$scevgep1769;
 var $345=(((-$344))|0);
 var $uglygep1771=(($scevgep17691770+$345)|0);
 var $uglygep17711772=$uglygep1771;
 var $346=$uglygep17711772>>>4;
 var $scevgep1769_sum=$346^-1;
 var $scevgep1773=(($342+($scevgep1769_sum<<4))|0);
 HEAP32[(($341)>>2)]=$scevgep1773;
 var $_pre1835_pre=HEAP32[(($247)>>2)];
 var $_pre1835=$_pre1835_pre;label=114;break;
 case 103: 
 var $347;
 var $348;
 var $349;
 var $n_01582;
 var $350=(($348+($n_01582<<4))|0);
 var $351=(($349+((($i1_01604)*(12))&-1)+4)|0);
 var $352=(($349+((($i1_01604)*(12))&-1)+8)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=($347|0)==($353|0);
 if($354){label=107;break;}else{label=104;break;}
 case 104: 
 var $356=($347|0)==0;
 if($356){var $360=0;label=106;break;}else{label=105;break;}
 case 105: 
 var $358=$347;
 var $359=$350;
 assert(16 % 1 === 0);HEAP32[(($358)>>2)]=HEAP32[(($359)>>2)];HEAP32[((($358)+(4))>>2)]=HEAP32[((($359)+(4))>>2)];HEAP32[((($358)+(8))>>2)]=HEAP32[((($359)+(8))>>2)];HEAP32[((($358)+(12))>>2)]=HEAP32[((($359)+(12))>>2)];
 var $_pre1841=HEAP32[(($351)>>2)];
 var $360=$_pre1841;label=106;break;
 case 106: 
 var $360;
 var $361=(($360+16)|0);
 HEAP32[(($351)>>2)]=$361;
 label=108;break;
 case 107: 
 var $363=(($349+((($i1_01604)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($363,$350);
 label=108;break;
 case 108: 
 var $364=((($n_01582)+(1))|0);
 var $365=HEAP32[(($247)>>2)];
 var $366=(($365+((($j_01591)*(12))&-1)+4)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($365+((($j_01591)*(12))&-1))|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=$367;
 var $371=$369;
 var $372=((($370)-($371))|0);
 var $373=$372>>4;
 var $374=($364>>>0)<($373>>>0);
 if($374){label=109;break;}else{label=110;break;}
 case 109: 
 var $_phi_trans_insert1866=(($365+((($i1_01604)*(12))&-1)+4)|0);
 var $_pre1867=HEAP32[(($_phi_trans_insert1866)>>2)];
 var $n_01582=$364;var $349=$365;var $348=$369;var $347=$_pre1867;label=103;break;
 case 110: 
 var $375=($369|0)==($367|0);
 if($375){var $_pre1837=$365;label=112;break;}else{label=111;break;}
 case 111: 
 var $_lcssa15811761=$369;
 var $scevgep1759=((($367)-(16))|0);
 var $scevgep17591760=$scevgep1759;
 var $376=(((-$_lcssa15811761))|0);
 var $uglygep1762=(($scevgep17591760+$376)|0);
 var $uglygep17621763=$uglygep1762;
 var $377=$uglygep17621763>>>4;
 var $scevgep1759_sum=$377^-1;
 var $scevgep1764=(($367+($scevgep1759_sum<<4))|0);
 HEAP32[(($366)>>2)]=$scevgep1764;
 var $_pre1837_pre=HEAP32[(($247)>>2)];
 var $_pre1837=$_pre1837_pre;label=112;break;
 case 112: 
 var $_pre1837;
 var $_pre1836=HEAP32[(($245)>>2)];
 var $379=$_pre1836;var $378=$_pre1837;label=113;break;
 case 113: 
 var $378;
 var $379;
 var $380=((($j_01591)+(1))|0);
 var $381=$379;
 var $382=$378;
 var $383=((($381)-($382))|0);
 var $384=(((($383|0))/(12))&-1);
 var $385=($380>>>0)<($384>>>0);
 if($385){var $j_01591=$380;var $261=$378;var $260=$379;label=81;break;}else{var $388=$379;var $387=$378;var $386=$379;label=115;break;}
 case 114: 
 var $_pre1835;
 var $_pre1834=HEAP32[(($245)>>2)];
 var $388=$_pre1834;var $387=$_pre1835;var $386=$_pre1834;label=115;break;
 case 115: 
 var $386;
 var $387;
 var $388;
 var $389=((($i1_01604)+(1))|0);
 var $390=$388;
 var $391=$387;
 var $392=((($390)-($391))|0);
 var $393=(((($392|0))/(12))&-1);
 var $394=($389>>>0)<($393>>>0);
 if($394){var $i1_01604=$389;var $253=$387;var $252=$388;var $251=$386;label=79;break;}else{var $250=$388;var $_pre18321864=$387;label=78;break;}
 case 116: 
 var $_pre18321863;
 var $395;
 var $bestScore_0$0;
 var $bestScore_0$1;
 var $bestA_0;
 var $bestB_0;
 var $reversed_0_off0;
 var $i3_0;
 var $396=$395;
 var $397=$_pre18321863;
 var $398=((($396)-($397))|0);
 var $399=(((($398|0))/(12))&-1);
 var $400=($i3_0>>>0)<($399>>>0);
 if($400){label=117;break;}else{label=124;break;}
 case 117: 
 var $402=(($_pre18321863+((($i3_0)*(12))&-1)+4)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($_pre18321863+((($i3_0)*(12))&-1))|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=($403|0)==($405|0);
 var $407=($395|0)==($_pre18321863|0);
 var $or_cond1874=$406|$407;
 if($or_cond1874){var $reversed_4_off0=$reversed_0_off0;var $bestB_4=$bestB_0;var $bestA_4=$bestA_0;var $bestScore_4$1=$bestScore_0$1;var $bestScore_4$0=$bestScore_0$0;label=122;break;}else{var $bestScore_11566$1=$bestScore_0$1;var $bestScore_11566$0=$bestScore_0$0;var $bestA_11567=$bestA_0;var $bestB_11568=$bestB_0;var $reversed_1_off01569=$reversed_0_off0;var $j4_01570=0;label=118;break;}
 case 118: 
 var $j4_01570;
 var $reversed_1_off01569;
 var $bestB_11568;
 var $bestA_11567;
 var $bestScore_11566$0;
 var $bestScore_11566$1;
 var $408=(($_pre18321863+((($j4_01570)*(12))&-1)+4)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($_pre18321863+((($j4_01570)*(12))&-1))|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=($409|0)==($411|0);
 if($412){var $reversed_3_off0=$reversed_1_off01569;var $bestB_3=$bestB_11568;var $bestA_3=$bestA_11567;var $bestScore_3$1=$bestScore_11566$1;var $bestScore_3$0=$bestScore_11566$0;label=121;break;}else{label=119;break;}
 case 119: 
 var $414=$403;
 var $415=$405;
 var $416=((($414)-($415))|0);
 var $417=$416>>4;
 var $418=((($417)-(1))|0);
 var $_idx1212=(($405+($418<<4))|0);
 var $ld$22$0=(($_idx1212)|0);
 var $_idx1212_val$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($_idx1212+4)|0);
 var $_idx1212_val$1=HEAP32[(($ld$23$1)>>2)];
 var $_idx1213=(($405+($418<<4)+8)|0);
 var $ld$24$0=(($_idx1213)|0);
 var $_idx1213_val$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($_idx1213+4)|0);
 var $_idx1213_val$1=HEAP32[(($ld$25$1)>>2)];
 var $_idx1214=(($411)|0);
 var $ld$26$0=(($_idx1214)|0);
 var $_idx1214_val$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($_idx1214+4)|0);
 var $_idx1214_val$1=HEAP32[(($ld$27$1)>>2)];
 var $_idx1215=(($411+8)|0);
 var $ld$28$0=(($_idx1215)|0);
 var $_idx1215_val$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($_idx1215+4)|0);
 var $_idx1215_val$1=HEAP32[(($ld$29$1)>>2)];
 var $419$0=_i64Subtract($_idx1212_val$0,$_idx1212_val$1,$_idx1214_val$0,$_idx1214_val$1);var $419$1=tempRet0;
 var $420$0=_i64Subtract($_idx1213_val$0,$_idx1213_val$1,$_idx1215_val$0,$_idx1215_val$1);var $420$1=tempRet0;
 var $421$0=___muldi3($419$0,$419$1,$419$0,$419$1);var $421$1=tempRet0;
 var $422$0=___muldi3($420$0,$420$1,$420$0,$420$1);var $422$1=tempRet0;
 var $423$0=_i64Add($422$0,$422$1,$421$0,$421$1);var $423$1=tempRet0;
 var $424=(($423$1|0) < ($bestScore_11566$1|0)) | (((($423$1|0) == ($bestScore_11566$1|0) & ($423$0>>>0) <  ($bestScore_11566$0>>>0))));
 var $_bestScore_1$0=$424?$423$0:$bestScore_11566$0;
 var $_bestScore_1$1=$424?$423$1:$bestScore_11566$1;
 var $i3_0_bestA_1=$424?$i3_0:$bestA_11567;
 var $j4_0_bestB_1=$424?$j4_01570:$bestB_11568;
 var $not_=$424^1;
 var $_reversed_1_off0=$reversed_1_off01569&$not_;
 var $425=($i3_0|0)==($j4_01570|0);
 if($425){var $reversed_3_off0=$_reversed_1_off0;var $bestB_3=$j4_0_bestB_1;var $bestA_3=$i3_0_bestA_1;var $bestScore_3$1=$_bestScore_1$1;var $bestScore_3$0=$_bestScore_1$0;label=121;break;}else{label=120;break;}
 case 120: 
 var $427=$409;
 var $428=$411;
 var $429=((($427)-($428))|0);
 var $430=$429>>4;
 var $431=((($430)-(1))|0);
 var $_idx1210=(($411+($431<<4))|0);
 var $ld$30$0=(($_idx1210)|0);
 var $_idx1210_val$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($_idx1210+4)|0);
 var $_idx1210_val$1=HEAP32[(($ld$31$1)>>2)];
 var $_idx1211=(($411+($431<<4)+8)|0);
 var $ld$32$0=(($_idx1211)|0);
 var $_idx1211_val$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($_idx1211+4)|0);
 var $_idx1211_val$1=HEAP32[(($ld$33$1)>>2)];
 var $432$0=_i64Subtract($_idx1212_val$0,$_idx1212_val$1,$_idx1210_val$0,$_idx1210_val$1);var $432$1=tempRet0;
 var $433$0=_i64Subtract($_idx1213_val$0,$_idx1213_val$1,$_idx1211_val$0,$_idx1211_val$1);var $433$1=tempRet0;
 var $434$0=___muldi3($432$0,$432$1,$432$0,$432$1);var $434$1=tempRet0;
 var $435$0=___muldi3($433$0,$433$1,$433$0,$433$1);var $435$1=tempRet0;
 var $436$0=_i64Add($435$0,$435$1,$434$0,$434$1);var $436$1=tempRet0;
 var $437=(($436$1|0) < ($_bestScore_1$1|0)) | (((($436$1|0) == ($_bestScore_1$1|0) & ($436$0>>>0) <  ($_bestScore_1$0>>>0))));
 var $__bestScore_1$0=$437?$436$0:$_bestScore_1$0;
 var $__bestScore_1$1=$437?$436$1:$_bestScore_1$1;
 var $i3_0_i3_0_bestA_1=$437?$i3_0:$i3_0_bestA_1;
 var $j4_0_j4_0_bestB_1=$437?$j4_01570:$j4_0_bestB_1;
 var $__reversed_1_off0=$437|$_reversed_1_off0;
 var $reversed_3_off0=$__reversed_1_off0;var $bestB_3=$j4_0_j4_0_bestB_1;var $bestA_3=$i3_0_i3_0_bestA_1;var $bestScore_3$1=$__bestScore_1$1;var $bestScore_3$0=$__bestScore_1$0;label=121;break;
 case 121: 
 var $bestScore_3$0;
 var $bestScore_3$1;
 var $bestA_3;
 var $bestB_3;
 var $reversed_3_off0;
 var $439=((($j4_01570)+(1))|0);
 var $440=($439>>>0)<($399>>>0);
 if($440){var $bestScore_11566$1=$bestScore_3$1;var $bestScore_11566$0=$bestScore_3$0;var $bestA_11567=$bestA_3;var $bestB_11568=$bestB_3;var $reversed_1_off01569=$reversed_3_off0;var $j4_01570=$439;label=118;break;}else{var $reversed_4_off0=$reversed_3_off0;var $bestB_4=$bestB_3;var $bestA_4=$bestA_3;var $bestScore_4$1=$bestScore_3$1;var $bestScore_4$0=$bestScore_3$0;label=122;break;}
 case 122: 
 var $bestScore_4$0;
 var $bestScore_4$1;
 var $bestA_4;
 var $bestB_4;
 var $reversed_4_off0;
 var $441=((($i3_0)+(1))|0);
 var $i3_0_be=$441;var $reversed_0_off0_be=$reversed_4_off0;var $bestB_0_be=$bestB_4;var $bestA_0_be=$bestA_4;var $bestScore_0_be$1=$bestScore_4$1;var $bestScore_0_be$0=$bestScore_4$0;label=123;break;
 case 123: 
 var $bestScore_0_be$0;
 var $bestScore_0_be$1;
 var $bestA_0_be;
 var $bestB_0_be;
 var $reversed_0_off0_be;
 var $i3_0_be;
 var $_pre=HEAP32[(($245)>>2)];
 var $_pre1791=HEAP32[(($247)>>2)];
 var $i3_0=$i3_0_be;var $reversed_0_off0=$reversed_0_off0_be;var $bestB_0=$bestB_0_be;var $bestA_0=$bestA_0_be;var $bestScore_0$1=$bestScore_0_be$1;var $bestScore_0$0=$bestScore_0_be$0;var $395=$_pre;var $_pre18321863=$_pre1791;label=116;break;
 case 124: 
 var $$etemp$34$0=99999999;
 var $$etemp$34$1=0;
 var $443=(($bestScore_0$1|0) > ($$etemp$34$1|0)) | (((($bestScore_0$1|0) == ($$etemp$34$1|0) & ($bestScore_0$0>>>0) >  ($$etemp$34$0>>>0))));
 if($443){label=162;break;}else{label=125;break;}
 case 125: 
 var $445=($bestA_0|0)==($bestB_0|0);
 if($445){label=126;break;}else{label=145;break;}
 case 126: 
 var $447=(($_pre18321863+((($bestA_0)*(12))&-1))|0);
 var $448=HEAP32[(($_pre1868)>>2)];
 var $449=HEAP32[(($_pre1869)>>2)];
 var $450=($448|0)==($449|0);
 if($450){label=142;break;}else{label=127;break;}
 case 127: 
 var $452=($448|0)==0;
 if($452){label=141;break;}else{label=128;break;}
 case 128: 
 var $454=(($448)|0);
 HEAP32[(($454)>>2)]=0;
 var $455=(($448+4)|0);
 HEAP32[(($455)>>2)]=0;
 var $456=(($448+8)|0);
 HEAP32[(($456)>>2)]=0;
 var $457=(($_pre18321863+((($bestA_0)*(12))&-1)+4)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=(($447)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=$458;
 var $462=$460;
 var $463=((($461)-($462))|0);
 var $464=$463>>4;
 var $465=($464|0)==0;
 if($465){label=141;break;}else{label=129;break;}
 case 129: 
 var $467=($464>>>0)>268435455;
 if($467){label=130;break;}else{label=131;break;}
 case 130: 
 var $469=$448;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($469) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=131;break; } else { label=136;break; }
 case 131: 
 var $470=(function() { try { __THREW__ = 0; return __Znwj($463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=136;break; }
 case 132: 
 var $472=$470;
 HEAP32[(($455)>>2)]=$472;
 HEAP32[(($454)>>2)]=$472;
 var $473=(($472+($464<<4))|0);
 HEAP32[(($456)>>2)]=$473;
 var $474=HEAP32[(($459)>>2)];
 var $475=HEAP32[(($457)>>2)];
 var $476=($474|0)==($475|0);
 if($476){label=141;break;}else{var $_011_i_i_i1287=$474;var $477=$472;label=133;break;}
 case 133: 
 var $477;
 var $_011_i_i_i1287;
 var $478=($477|0)==0;
 if($478){var $482=0;label=135;break;}else{label=134;break;}
 case 134: 
 var $480=$477;
 var $481=$_011_i_i_i1287;
 assert(16 % 1 === 0);HEAP32[(($480)>>2)]=HEAP32[(($481)>>2)];HEAP32[((($480)+(4))>>2)]=HEAP32[((($481)+(4))>>2)];HEAP32[((($480)+(8))>>2)]=HEAP32[((($481)+(8))>>2)];HEAP32[((($480)+(12))>>2)]=HEAP32[((($481)+(12))>>2)];
 var $_pre12_i_i_i1289=HEAP32[(($455)>>2)];
 var $482=$_pre12_i_i_i1289;label=135;break;
 case 135: 
 var $482;
 var $483=(($482+16)|0);
 HEAP32[(($455)>>2)]=$483;
 var $484=(($_011_i_i_i1287+16)|0);
 var $485=($484|0)==($475|0);
 if($485){label=141;break;}else{var $_011_i_i_i1287=$484;var $477=$483;label=133;break;}
 case 136: 
 var $487$0 = ___cxa_find_matching_catch(-1, -1); var $487$1 = tempRet0;
 var $488=HEAP32[(($454)>>2)];
 var $489=$488;
 var $490=($488|0)==0;
 if($490){label=140;break;}else{label=137;break;}
 case 137: 
 var $491=HEAP32[(($455)>>2)];
 var $492=($488|0)==($491|0);
 if($492){label=139;break;}else{label=138;break;}
 case 138: 
 var $scevgep_i_i_i1292=((($491)-(16))|0);
 var $scevgep28_i_i_i1293=$scevgep_i_i_i1292;
 var $493=(((-$489))|0);
 var $uglygep_i_i_i1294=(($scevgep28_i_i_i1293+$493)|0);
 var $uglygep29_i_i_i1295=$uglygep_i_i_i1294;
 var $494=$uglygep29_i_i_i1295>>>4;
 var $495=$494^-1;
 var $scevgep30_i_i_i1296=(($491+($495<<4))|0);
 HEAP32[(($455)>>2)]=$scevgep30_i_i_i1296;
 label=139;break;
 case 139: 
 var $496=$488;
 __ZdlPv($496);
 label=140;break;
 case 140: 
 ___resumeException($487$0)
 case 141: 
 var $497=HEAP32[(($_pre1868)>>2)];
 var $498=(($497+12)|0);
 HEAP32[(($_pre1868)>>2)]=$498;
 label=143;break;
 case 142: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($_pre1871,$447);
 label=143;break;
 case 143: 
 var $500=HEAP32[(($247)>>2)];
 var $501=(($500+((($bestA_0)*(12))&-1))|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=(($500+((($bestA_0)*(12))&-1)+4)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=($502|0)==($504|0);
 if($505){var $i3_0_be=0;var $reversed_0_off0_be=0;var $bestB_0_be=-1;var $bestA_0_be=-1;var $bestScore_0_be$1=0;var $bestScore_0_be$0=100000000;label=123;break;}else{label=144;break;}
 case 144: 
 var $506=$502;
 var $scevgep1748=((($504)-(16))|0);
 var $scevgep17481749=$scevgep1748;
 var $507=(((-$506))|0);
 var $uglygep1750=(($scevgep17481749+$507)|0);
 var $uglygep17501751=$uglygep1750;
 var $508=$uglygep17501751>>>4;
 var $scevgep1748_sum=$508^-1;
 var $scevgep1752=(($504+($scevgep1748_sum<<4))|0);
 HEAP32[(($503)>>2)]=$scevgep1752;
 var $i3_0_be=0;var $reversed_0_off0_be=0;var $bestB_0_be=-1;var $bestA_0_be=-1;var $bestScore_0_be$1=0;var $bestScore_0_be$0=100000000;label=123;break;
 case 145: 
 var $510=(($_pre18321863+((($bestB_0)*(12))&-1)+4)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(($_pre18321863+((($bestB_0)*(12))&-1))|0);
 var $513=HEAP32[(($512)>>2)];
 if($reversed_0_off0){label=147;break;}else{label=146;break;}
 case 146: 
 var $514=($511|0)==($513|0);
 if($514){var $568=$_pre18321863;label=160;break;}else{var $n10_01551=0;var $541=$_pre18321863;var $540=$513;label=154;break;}
 case 147: 
 var $516=$511;
 var $517=$513;
 var $518=((($516)-($517))|0);
 var $519=$518>>4;
 var $n9_01554=((($519)-(1))|0);
 var $520=($n9_01554|0)>-1;
 if($520){var $n9_01555=$n9_01554;var $521=$_pre18321863;label=148;break;}else{var $568=$_pre18321863;label=160;break;}
 case 148: 
 var $521;
 var $n9_01555;
 var $522=(($521+((($bestB_0)*(12))&-1))|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=(($523+($n9_01555<<4))|0);
 var $525=(($521+((($bestA_0)*(12))&-1)+4)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=(($521+((($bestA_0)*(12))&-1)+8)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=($526|0)==($528|0);
 if($529){label=153;break;}else{label=149;break;}
 case 149: 
 var $531=($526|0)==0;
 if($531){var $535=0;label=151;break;}else{label=150;break;}
 case 150: 
 var $533=$526;
 var $534=$524;
 assert(16 % 1 === 0);HEAP32[(($533)>>2)]=HEAP32[(($534)>>2)];HEAP32[((($533)+(4))>>2)]=HEAP32[((($534)+(4))>>2)];HEAP32[((($533)+(8))>>2)]=HEAP32[((($534)+(8))>>2)];HEAP32[((($533)+(12))>>2)]=HEAP32[((($534)+(12))>>2)];
 var $_pre1831=HEAP32[(($525)>>2)];
 var $535=$_pre1831;label=151;break;
 case 151: 
 var $535;
 var $536=(($535+16)|0);
 HEAP32[(($525)>>2)]=$536;
 label=152;break;
 case 152: 
 var $n9_0=((($n9_01555)-(1))|0);
 var $537=($n9_0|0)>-1;
 var $_pre1865=HEAP32[(($247)>>2)];
 if($537){var $n9_01555=$n9_0;var $521=$_pre1865;label=148;break;}else{var $568=$_pre1865;label=160;break;}
 case 153: 
 var $539=(($521+((($bestA_0)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($539,$524);
 label=152;break;
 case 154: 
 var $540;
 var $541;
 var $n10_01551;
 var $542=(($540+($n10_01551<<4))|0);
 var $543=(($541+((($bestA_0)*(12))&-1)+4)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=(($541+((($bestA_0)*(12))&-1)+8)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=($544|0)==($546|0);
 if($547){label=158;break;}else{label=155;break;}
 case 155: 
 var $549=($544|0)==0;
 if($549){var $553=0;label=157;break;}else{label=156;break;}
 case 156: 
 var $551=$544;
 var $552=$542;
 assert(16 % 1 === 0);HEAP32[(($551)>>2)]=HEAP32[(($552)>>2)];HEAP32[((($551)+(4))>>2)]=HEAP32[((($552)+(4))>>2)];HEAP32[((($551)+(8))>>2)]=HEAP32[((($552)+(8))>>2)];HEAP32[((($551)+(12))>>2)]=HEAP32[((($552)+(12))>>2)];
 var $_pre1833=HEAP32[(($543)>>2)];
 var $553=$_pre1833;label=157;break;
 case 157: 
 var $553;
 var $554=(($553+16)|0);
 HEAP32[(($543)>>2)]=$554;
 label=159;break;
 case 158: 
 var $556=(($541+((($bestA_0)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($556,$542);
 label=159;break;
 case 159: 
 var $557=((($n10_01551)+(1))|0);
 var $558=HEAP32[(($247)>>2)];
 var $559=(($558+((($bestB_0)*(12))&-1)+4)|0);
 var $560=HEAP32[(($559)>>2)];
 var $561=(($558+((($bestB_0)*(12))&-1))|0);
 var $562=HEAP32[(($561)>>2)];
 var $563=$560;
 var $564=$562;
 var $565=((($563)-($564))|0);
 var $566=$565>>4;
 var $567=($557>>>0)<($566>>>0);
 if($567){var $n10_01551=$557;var $541=$558;var $540=$562;label=154;break;}else{var $568=$558;label=160;break;}
 case 160: 
 var $568;
 var $569=(($568+((($bestB_0)*(12))&-1))|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=(($568+((($bestB_0)*(12))&-1)+4)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=($570|0)==($572|0);
 if($573){var $i3_0_be=0;var $reversed_0_off0_be=0;var $bestB_0_be=-1;var $bestA_0_be=-1;var $bestScore_0_be$1=0;var $bestScore_0_be$0=100000000;label=123;break;}else{label=161;break;}
 case 161: 
 var $574=$570;
 var $scevgep1741=((($572)-(16))|0);
 var $scevgep17411742=$scevgep1741;
 var $575=(((-$574))|0);
 var $uglygep1743=(($scevgep17411742+$575)|0);
 var $uglygep17431744=$uglygep1743;
 var $576=$uglygep17431744>>>4;
 var $scevgep1741_sum=$576^-1;
 var $scevgep1745=(($572+($scevgep1741_sum<<4))|0);
 HEAP32[(($571)>>2)]=$scevgep1745;
 var $i3_0_be=0;var $reversed_0_off0_be=0;var $bestB_0_be=-1;var $bestA_0_be=-1;var $bestScore_0_be$1=0;var $bestScore_0_be$0=100000000;label=123;break;
 case 162: 
 if($extensiveStitching){label=163;break;}else{var $593=$395;var $592=$_pre18321863;label=164;break;}
 case 163: 
 var $578=$1;
 var $579=$2;
 var $580=(($res)|0);
 var $bestResult_sroa_1_8__idx68=(($res+8)|0);
 var $bestResult_sroa_2_12__idx75=(($res+12)|0);
 var $bestResult_sroa_3_16__idx82=(($res+16)|0);
 var $bestResult_sroa_4_20__idx85=(($res+20)|0);
 var $581=$3;
 var $582=$4;
 var $583=(($res15)|0);
 var $bestResult_sroa_1_8__idx67=(($res15+8)|0);
 var $bestResult_sroa_2_12__idx74=(($res15+12)|0);
 var $bestResult_sroa_3_16__idx81=(($res15+16)|0);
 var $bestResult_sroa_4_20__idx=(($res15+20)|0);
 var $584=(($_pre1871)|0);
 var $585=(($5)|0);
 var $586=(($5+4)|0);
 var $587=(($5+8)|0);
 var $588=(($poly22)|0);
 var $589=(($poly22+4)|0);
 var $590=(($poly22+8)|0);
 var $591=(($this+24)|0);
 var $i13_0=0;var $bestResult_sroa_0_0$1=2147483647;var $bestResult_sroa_0_0$0=-1;var $bestResult_sroa_1_0=-1;var $bestResult_sroa_2_0=-1;var $bestResult_sroa_3_0=-1;var $bestResult_sroa_4_1_off0=0;var $bestB12_0=-1;var $bestA11_0=-1;var $596=$395;var $595=$_pre18321863;label=165;break;
 case 164: 
 var $592;
 var $593;
 var $594=($593|0)==($592|0);
 if($594){var $1187=$592;var $1186=$592;label=323;break;}else{var $q_01440=0;var $i28_01441=0;var $1134=$592;var $1133=$593;label=318;break;}
 case 165: 
 var $595;
 var $596;
 var $bestA11_0;
 var $bestB12_0;
 var $bestResult_sroa_4_1_off0;
 var $bestResult_sroa_3_0;
 var $bestResult_sroa_2_0;
 var $bestResult_sroa_1_0;
 var $bestResult_sroa_0_0$0;
 var $bestResult_sroa_0_0$1;
 var $i13_0;
 var $597=$596;
 var $598=$595;
 var $599=((($597)-($598))|0);
 var $600=(((($599|0))/(12))&-1);
 var $601=($i13_0>>>0)<($600>>>0);
 if($601){label=166;break;}else{label=176;break;}
 case 166: 
 var $603=(($595+((($i13_0)*(12))&-1)+4)|0);
 var $604=HEAP32[(($603)>>2)];
 var $605=(($595+((($i13_0)*(12))&-1))|0);
 var $606=HEAP32[(($605)>>2)];
 var $607=($604|0)==($606|0);
 if($607){var $bestResult_sroa_0_4$1=$bestResult_sroa_0_0$1;var $bestResult_sroa_0_4$0=$bestResult_sroa_0_0$0;var $bestResult_sroa_1_4=$bestResult_sroa_1_0;var $bestResult_sroa_2_4=$bestResult_sroa_2_0;var $bestResult_sroa_3_4=$bestResult_sroa_3_0;var $bestResult_sroa_4_5_off0=$bestResult_sroa_4_1_off0;var $bestB12_4=$bestB12_0;var $bestA11_4=$bestA11_0;label=174;break;}else{label=167;break;}
 case 167: 
 var $609=$606;
 assert(16 % 1 === 0);HEAP32[(($578)>>2)]=HEAP32[(($609)>>2)];HEAP32[((($578)+(4))>>2)]=HEAP32[((($609)+(4))>>2)];HEAP32[((($578)+(8))>>2)]=HEAP32[((($609)+(8))>>2)];HEAP32[((($578)+(12))>>2)]=HEAP32[((($609)+(12))>>2)];
 var $610=HEAP32[(($603)>>2)];
 var $611=HEAP32[(($605)>>2)];
 var $612=$610;
 var $613=$611;
 var $614=((($612)-($613))|0);
 var $615=$614>>4;
 var $616=((($615)-(1))|0);
 var $617=(($611+($616<<4))|0);
 var $618=$617;
 assert(16 % 1 === 0);HEAP32[(($579)>>2)]=HEAP32[(($618)>>2)];HEAP32[((($579)+(4))>>2)]=HEAP32[((($618)+(4))>>2)];HEAP32[((($579)+(8))>>2)]=HEAP32[((($618)+(8))>>2)];HEAP32[((($579)+(12))>>2)]=HEAP32[((($618)+(12))>>2)];
 __ZN11SlicerLayer20findPolygonGapCloserEN10ClipperLib8IntPointES1_($res,$this,$1,$2);
 var $ld$35$0=(($580)|0);
 var $619$0=HEAP32[(($ld$35$0)>>2)];
 var $ld$36$1=(($580+4)|0);
 var $619$1=HEAP32[(($ld$36$1)>>2)];
 var $$etemp$37$0=0;
 var $$etemp$37$1=0;
 var $620=(($619$1|0) > ($$etemp$37$1|0)) | (((($619$1|0) == ($$etemp$37$1|0) & ($619$0>>>0) >  ($$etemp$37$0>>>0))));
 var $621=(($619$1|0) < ($bestResult_sroa_0_0$1|0)) | (((($619$1|0) == ($bestResult_sroa_0_0$1|0) & ($619$0>>>0) <  ($bestResult_sroa_0_0$0>>>0))));
 var $or_cond=$620&$621;
 if($or_cond){label=168;break;}else{var $bestResult_sroa_0_2_ph$1=$bestResult_sroa_0_0$1;var $bestResult_sroa_0_2_ph$0=$bestResult_sroa_0_0$0;var $bestResult_sroa_1_2_ph=$bestResult_sroa_1_0;var $bestResult_sroa_2_2_ph=$bestResult_sroa_2_0;var $bestResult_sroa_3_2_ph=$bestResult_sroa_3_0;var $bestResult_sroa_4_3_off0_ph=$bestResult_sroa_4_1_off0;var $bestB12_2_ph=$bestB12_0;var $bestA11_2_ph=$bestA11_0;label=169;break;}
 case 168: 
 var $bestResult_sroa_1_8_copyload69=HEAP32[(($bestResult_sroa_1_8__idx68)>>2)];
 var $bestResult_sroa_2_12_copyload76=HEAP32[(($bestResult_sroa_2_12__idx75)>>2)];
 var $bestResult_sroa_3_16_copyload83=HEAP32[(($bestResult_sroa_3_16__idx82)>>2)];
 var $bestResult_sroa_4_20_copyload86=HEAP8[($bestResult_sroa_4_20__idx85)];
 var $623=$bestResult_sroa_4_20_copyload86&1;
 var $extract_t1188=(($623<<24)>>24)!=0;
 var $bestResult_sroa_0_2_ph$1=$619$1;var $bestResult_sroa_0_2_ph$0=$619$0;var $bestResult_sroa_1_2_ph=$bestResult_sroa_1_8_copyload69;var $bestResult_sroa_2_2_ph=$bestResult_sroa_2_12_copyload76;var $bestResult_sroa_3_2_ph=$bestResult_sroa_3_16_copyload83;var $bestResult_sroa_4_3_off0_ph=$extract_t1188;var $bestB12_2_ph=$i13_0;var $bestA11_2_ph=$i13_0;label=169;break;
 case 169: 
 var $bestA11_2_ph;
 var $bestB12_2_ph;
 var $bestResult_sroa_4_3_off0_ph;
 var $bestResult_sroa_3_2_ph;
 var $bestResult_sroa_2_2_ph;
 var $bestResult_sroa_1_2_ph;
 var $bestResult_sroa_0_2_ph$0;
 var $bestResult_sroa_0_2_ph$1;
 var $624=HEAP32[(($245)>>2)];
 var $625=HEAP32[(($247)>>2)];
 var $626=($624|0)==($625|0);
 if($626){var $bestResult_sroa_0_4$1=$bestResult_sroa_0_2_ph$1;var $bestResult_sroa_0_4$0=$bestResult_sroa_0_2_ph$0;var $bestResult_sroa_1_4=$bestResult_sroa_1_2_ph;var $bestResult_sroa_2_4=$bestResult_sroa_2_2_ph;var $bestResult_sroa_3_4=$bestResult_sroa_3_2_ph;var $bestResult_sroa_4_5_off0=$bestResult_sroa_4_3_off0_ph;var $bestB12_4=$bestB12_2_ph;var $bestA11_4=$bestA11_2_ph;label=174;break;}else{var $bestA11_21517=$bestA11_2_ph;var $bestB12_21518=$bestB12_2_ph;var $bestResult_sroa_4_3_off01519=$bestResult_sroa_4_3_off0_ph;var $bestResult_sroa_3_21520=$bestResult_sroa_3_2_ph;var $bestResult_sroa_2_21521=$bestResult_sroa_2_2_ph;var $bestResult_sroa_1_21522=$bestResult_sroa_1_2_ph;var $bestResult_sroa_0_21523$1=$bestResult_sroa_0_2_ph$1;var $bestResult_sroa_0_21523$0=$bestResult_sroa_0_2_ph$0;var $j14_01524=0;var $627=$625;label=170;break;}
 case 170: 
 var $627;
 var $j14_01524;
 var $bestResult_sroa_0_21523$0;
 var $bestResult_sroa_0_21523$1;
 var $bestResult_sroa_1_21522;
 var $bestResult_sroa_2_21521;
 var $bestResult_sroa_3_21520;
 var $bestResult_sroa_4_3_off01519;
 var $bestB12_21518;
 var $bestA11_21517;
 var $628=(($627+((($j14_01524)*(12))&-1)+4)|0);
 var $629=HEAP32[(($628)>>2)];
 var $630=(($627+((($j14_01524)*(12))&-1))|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=($629|0)==($631|0);
 var $633=($i13_0|0)==($j14_01524|0);
 var $or_cond1202=$632|$633;
 if($or_cond1202){var $bestResult_sroa_0_3$1=$bestResult_sroa_0_21523$1;var $bestResult_sroa_0_3$0=$bestResult_sroa_0_21523$0;var $bestResult_sroa_1_3=$bestResult_sroa_1_21522;var $bestResult_sroa_2_3=$bestResult_sroa_2_21521;var $bestResult_sroa_3_3=$bestResult_sroa_3_21520;var $bestResult_sroa_4_4_off0=$bestResult_sroa_4_3_off01519;var $bestB12_3=$bestB12_21518;var $bestA11_3=$bestA11_21517;label=173;break;}else{label=171;break;}
 case 171: 
 var $635=(($627+((($i13_0)*(12))&-1))|0);
 var $636=HEAP32[(($635)>>2)];
 var $637=$636;
 assert(16 % 1 === 0);HEAP32[(($581)>>2)]=HEAP32[(($637)>>2)];HEAP32[((($581)+(4))>>2)]=HEAP32[((($637)+(4))>>2)];HEAP32[((($581)+(8))>>2)]=HEAP32[((($637)+(8))>>2)];HEAP32[((($581)+(12))>>2)]=HEAP32[((($637)+(12))>>2)];
 var $638=$629;
 var $639=$631;
 var $640=((($638)-($639))|0);
 var $641=$640>>4;
 var $642=((($641)-(1))|0);
 var $643=(($631+($642<<4))|0);
 var $644=$643;
 assert(16 % 1 === 0);HEAP32[(($582)>>2)]=HEAP32[(($644)>>2)];HEAP32[((($582)+(4))>>2)]=HEAP32[((($644)+(4))>>2)];HEAP32[((($582)+(8))>>2)]=HEAP32[((($644)+(8))>>2)];HEAP32[((($582)+(12))>>2)]=HEAP32[((($644)+(12))>>2)];
 __ZN11SlicerLayer20findPolygonGapCloserEN10ClipperLib8IntPointES1_($res15,$this,$3,$4);
 var $ld$38$0=(($583)|0);
 var $645$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($583+4)|0);
 var $645$1=HEAP32[(($ld$39$1)>>2)];
 var $$etemp$40$0=0;
 var $$etemp$40$1=0;
 var $646=(($645$1|0) > ($$etemp$40$1|0)) | (((($645$1|0) == ($$etemp$40$1|0) & ($645$0>>>0) >  ($$etemp$40$0>>>0))));
 var $647=(($645$1|0) < ($bestResult_sroa_0_21523$1|0)) | (((($645$1|0) == ($bestResult_sroa_0_21523$1|0) & ($645$0>>>0) <  ($bestResult_sroa_0_21523$0>>>0))));
 var $or_cond1203=$646&$647;
 if($or_cond1203){label=172;break;}else{var $bestResult_sroa_0_3$1=$bestResult_sroa_0_21523$1;var $bestResult_sroa_0_3$0=$bestResult_sroa_0_21523$0;var $bestResult_sroa_1_3=$bestResult_sroa_1_21522;var $bestResult_sroa_2_3=$bestResult_sroa_2_21521;var $bestResult_sroa_3_3=$bestResult_sroa_3_21520;var $bestResult_sroa_4_4_off0=$bestResult_sroa_4_3_off01519;var $bestB12_3=$bestB12_21518;var $bestA11_3=$bestA11_21517;label=173;break;}
 case 172: 
 var $bestResult_sroa_1_8_copyload=HEAP32[(($bestResult_sroa_1_8__idx67)>>2)];
 var $bestResult_sroa_2_12_copyload=HEAP32[(($bestResult_sroa_2_12__idx74)>>2)];
 var $bestResult_sroa_3_16_copyload=HEAP32[(($bestResult_sroa_3_16__idx81)>>2)];
 var $bestResult_sroa_4_20_copyload=HEAP8[($bestResult_sroa_4_20__idx)];
 var $649=$bestResult_sroa_4_20_copyload&1;
 var $extract_t1193=(($649<<24)>>24)!=0;
 var $bestResult_sroa_0_3$1=$645$1;var $bestResult_sroa_0_3$0=$645$0;var $bestResult_sroa_1_3=$bestResult_sroa_1_8_copyload;var $bestResult_sroa_2_3=$bestResult_sroa_2_12_copyload;var $bestResult_sroa_3_3=$bestResult_sroa_3_16_copyload;var $bestResult_sroa_4_4_off0=$extract_t1193;var $bestB12_3=$j14_01524;var $bestA11_3=$i13_0;label=173;break;
 case 173: 
 var $bestA11_3;
 var $bestB12_3;
 var $bestResult_sroa_4_4_off0;
 var $bestResult_sroa_3_3;
 var $bestResult_sroa_2_3;
 var $bestResult_sroa_1_3;
 var $bestResult_sroa_0_3$0;
 var $bestResult_sroa_0_3$1;
 var $650=((($j14_01524)+(1))|0);
 var $651=HEAP32[(($245)>>2)];
 var $652=HEAP32[(($247)>>2)];
 var $653=$651;
 var $654=$652;
 var $655=((($653)-($654))|0);
 var $656=(((($655|0))/(12))&-1);
 var $657=($650>>>0)<($656>>>0);
 if($657){var $bestA11_21517=$bestA11_3;var $bestB12_21518=$bestB12_3;var $bestResult_sroa_4_3_off01519=$bestResult_sroa_4_4_off0;var $bestResult_sroa_3_21520=$bestResult_sroa_3_3;var $bestResult_sroa_2_21521=$bestResult_sroa_2_3;var $bestResult_sroa_1_21522=$bestResult_sroa_1_3;var $bestResult_sroa_0_21523$1=$bestResult_sroa_0_3$1;var $bestResult_sroa_0_21523$0=$bestResult_sroa_0_3$0;var $j14_01524=$650;var $627=$652;label=170;break;}else{var $bestResult_sroa_0_4$1=$bestResult_sroa_0_3$1;var $bestResult_sroa_0_4$0=$bestResult_sroa_0_3$0;var $bestResult_sroa_1_4=$bestResult_sroa_1_3;var $bestResult_sroa_2_4=$bestResult_sroa_2_3;var $bestResult_sroa_3_4=$bestResult_sroa_3_3;var $bestResult_sroa_4_5_off0=$bestResult_sroa_4_4_off0;var $bestB12_4=$bestB12_3;var $bestA11_4=$bestA11_3;label=174;break;}
 case 174: 
 var $bestA11_4;
 var $bestB12_4;
 var $bestResult_sroa_4_5_off0;
 var $bestResult_sroa_3_4;
 var $bestResult_sroa_2_4;
 var $bestResult_sroa_1_4;
 var $bestResult_sroa_0_4$0;
 var $bestResult_sroa_0_4$1;
 var $658=((($i13_0)+(1))|0);
 var $i13_0_be=$658;var $bestResult_sroa_0_0_be$1=$bestResult_sroa_0_4$1;var $bestResult_sroa_0_0_be$0=$bestResult_sroa_0_4$0;var $bestResult_sroa_1_0_be=$bestResult_sroa_1_4;var $bestResult_sroa_2_0_be=$bestResult_sroa_2_4;var $bestResult_sroa_3_0_be=$bestResult_sroa_3_4;var $bestResult_sroa_4_1_off0_be=$bestResult_sroa_4_5_off0;var $bestB12_0_be=$bestB12_4;var $bestA11_0_be=$bestA11_4;label=175;break;
 case 175: 
 var $bestA11_0_be;
 var $bestB12_0_be;
 var $bestResult_sroa_4_1_off0_be;
 var $bestResult_sroa_3_0_be;
 var $bestResult_sroa_2_0_be;
 var $bestResult_sroa_1_0_be;
 var $bestResult_sroa_0_0_be$0;
 var $bestResult_sroa_0_0_be$1;
 var $i13_0_be;
 var $_pre1801=HEAP32[(($245)>>2)];
 var $_pre1802=HEAP32[(($247)>>2)];
 var $i13_0=$i13_0_be;var $bestResult_sroa_0_0$1=$bestResult_sroa_0_0_be$1;var $bestResult_sroa_0_0$0=$bestResult_sroa_0_0_be$0;var $bestResult_sroa_1_0=$bestResult_sroa_1_0_be;var $bestResult_sroa_2_0=$bestResult_sroa_2_0_be;var $bestResult_sroa_3_0=$bestResult_sroa_3_0_be;var $bestResult_sroa_4_1_off0=$bestResult_sroa_4_1_off0_be;var $bestB12_0=$bestB12_0_be;var $bestA11_0=$bestA11_0_be;var $596=$_pre1801;var $595=$_pre1802;label=165;break;
 case 176: 
 var $$etemp$41$0=-1;
 var $$etemp$41$1=2147483647;
 var $660=(($bestResult_sroa_0_0$0|0) == ($$etemp$41$0|0)) & (($bestResult_sroa_0_0$1|0) == ($$etemp$41$1|0));
 if($660){var $593=$596;var $592=$595;label=164;break;}else{label=177;break;}
 case 177: 
 var $662=($bestA11_0|0)==($bestB12_0|0);
 var $663=($bestResult_sroa_2_0|0)==($bestResult_sroa_3_0|0);
 if($662){label=178;break;}else{label=255;break;}
 case 178: 
 if($663){label=179;break;}else{label=198;break;}
 case 179: 
 var $666=(($595+((($bestA11_0)*(12))&-1))|0);
 var $667=HEAP32[(($_pre1868)>>2)];
 var $668=HEAP32[(($_pre1869)>>2)];
 var $669=($667|0)==($668|0);
 if($669){label=195;break;}else{label=180;break;}
 case 180: 
 var $671=($667|0)==0;
 if($671){label=194;break;}else{label=181;break;}
 case 181: 
 var $673=(($667)|0);
 HEAP32[(($673)>>2)]=0;
 var $674=(($667+4)|0);
 HEAP32[(($674)>>2)]=0;
 var $675=(($667+8)|0);
 HEAP32[(($675)>>2)]=0;
 var $676=(($595+((($bestA11_0)*(12))&-1)+4)|0);
 var $677=HEAP32[(($676)>>2)];
 var $678=(($666)|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=$677;
 var $681=$679;
 var $682=((($680)-($681))|0);
 var $683=$682>>4;
 var $684=($683|0)==0;
 if($684){label=194;break;}else{label=182;break;}
 case 182: 
 var $686=($683>>>0)>268435455;
 if($686){label=183;break;}else{label=184;break;}
 case 183: 
 var $688=$667;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=184;break; } else { label=189;break; }
 case 184: 
 var $689=(function() { try { __THREW__ = 0; return __Znwj($682) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=185;break; } else { label=189;break; }
 case 185: 
 var $691=$689;
 HEAP32[(($674)>>2)]=$691;
 HEAP32[(($673)>>2)]=$691;
 var $692=(($691+($683<<4))|0);
 HEAP32[(($675)>>2)]=$692;
 var $693=HEAP32[(($678)>>2)];
 var $694=HEAP32[(($676)>>2)];
 var $695=($693|0)==($694|0);
 if($695){label=194;break;}else{var $_011_i_i_i1302=$693;var $696=$691;label=186;break;}
 case 186: 
 var $696;
 var $_011_i_i_i1302;
 var $697=($696|0)==0;
 if($697){var $701=0;label=188;break;}else{label=187;break;}
 case 187: 
 var $699=$696;
 var $700=$_011_i_i_i1302;
 assert(16 % 1 === 0);HEAP32[(($699)>>2)]=HEAP32[(($700)>>2)];HEAP32[((($699)+(4))>>2)]=HEAP32[((($700)+(4))>>2)];HEAP32[((($699)+(8))>>2)]=HEAP32[((($700)+(8))>>2)];HEAP32[((($699)+(12))>>2)]=HEAP32[((($700)+(12))>>2)];
 var $_pre12_i_i_i1304=HEAP32[(($674)>>2)];
 var $701=$_pre12_i_i_i1304;label=188;break;
 case 188: 
 var $701;
 var $702=(($701+16)|0);
 HEAP32[(($674)>>2)]=$702;
 var $703=(($_011_i_i_i1302+16)|0);
 var $704=($703|0)==($694|0);
 if($704){label=194;break;}else{var $_011_i_i_i1302=$703;var $696=$702;label=186;break;}
 case 189: 
 var $706$0 = ___cxa_find_matching_catch(-1, -1); var $706$1 = tempRet0;
 var $707=HEAP32[(($673)>>2)];
 var $708=$707;
 var $709=($707|0)==0;
 if($709){label=193;break;}else{label=190;break;}
 case 190: 
 var $710=HEAP32[(($674)>>2)];
 var $711=($707|0)==($710|0);
 if($711){label=192;break;}else{label=191;break;}
 case 191: 
 var $scevgep_i_i_i1307=((($710)-(16))|0);
 var $scevgep28_i_i_i1308=$scevgep_i_i_i1307;
 var $712=(((-$708))|0);
 var $uglygep_i_i_i1309=(($scevgep28_i_i_i1308+$712)|0);
 var $uglygep29_i_i_i1310=$uglygep_i_i_i1309;
 var $713=$uglygep29_i_i_i1310>>>4;
 var $714=$713^-1;
 var $scevgep30_i_i_i1311=(($710+($714<<4))|0);
 HEAP32[(($674)>>2)]=$scevgep30_i_i_i1311;
 label=192;break;
 case 192: 
 var $715=$707;
 __ZdlPv($715);
 label=193;break;
 case 193: 
 ___resumeException($706$0)
 case 194: 
 var $716=HEAP32[(($_pre1868)>>2)];
 var $717=(($716+12)|0);
 HEAP32[(($_pre1868)>>2)]=$717;
 label=196;break;
 case 195: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($_pre1871,$666);
 label=196;break;
 case 196: 
 var $719=HEAP32[(($247)>>2)];
 var $720=(($719+((($bestA11_0)*(12))&-1))|0);
 var $721=HEAP32[(($720)>>2)];
 var $722=(($719+((($bestA11_0)*(12))&-1)+4)|0);
 var $723=HEAP32[(($722)>>2)];
 var $724=($721|0)==($723|0);
 if($724){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=$bestResult_sroa_4_1_off0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{label=197;break;}
 case 197: 
 var $725=$721;
 var $scevgep1728=((($723)-(16))|0);
 var $scevgep17281729=$scevgep1728;
 var $726=(((-$725))|0);
 var $uglygep1730=(($scevgep17281729+$726)|0);
 var $uglygep17301731=$uglygep1730;
 var $727=$uglygep17301731>>>4;
 var $scevgep1728_sum=$727^-1;
 var $scevgep1732=(($723+($scevgep1728_sum<<4))|0);
 HEAP32[(($722)>>2)]=$scevgep1732;
 var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=$bestResult_sroa_4_1_off0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;
 case 198: 
 var $729=HEAP32[(($_pre1868)>>2)];
 var $730=HEAP32[(($584)>>2)];
 var $731=$729;
 var $732=$730;
 var $733=((($731)-($732))|0);
 var $734=(((($733|0))/(12))&-1);
 if($bestResult_sroa_4_1_off0){label=199;break;}else{label=229;break;}
 case 199: 
 HEAP32[(($585)>>2)]=0;
 HEAP32[(($586)>>2)]=0;
 HEAP32[(($587)>>2)]=0;
 var $736=HEAP32[(($_pre1869)>>2)];
 var $737=($729|0)==($736|0);
 if($737){label=203;break;}else{label=200;break;}
 case 200: 
 var $739=($729|0)==0;
 if($739){label=202;break;}else{label=201;break;}
 case 201: 
 var $740=(($729)|0);
 HEAP32[(($740)>>2)]=0;
 var $741=(($729+4)|0);
 HEAP32[(($741)>>2)]=0;
 var $742=(($729+8)|0);
 HEAP32[(($742)>>2)]=0;
 label=202;break;
 case 202: 
 var $743=HEAP32[(($_pre1868)>>2)];
 var $744=(($743+12)|0);
 HEAP32[(($_pre1868)>>2)]=$744;
 label=208;break;
 case 203: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($_pre1871,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=204;break; } else { label=215;break; }
 case 204: 
 var $_pre1855=HEAP32[(($585)>>2)];
 var $746=$_pre1855;
 var $747=($_pre1855|0)==0;
 if($747){label=208;break;}else{label=205;break;}
 case 205: 
 var $748=HEAP32[(($586)>>2)];
 var $749=($_pre1855|0)==($748|0);
 if($749){label=207;break;}else{label=206;break;}
 case 206: 
 var $scevgep_i_i_i1334=((($748)-(16))|0);
 var $scevgep28_i_i_i1335=$scevgep_i_i_i1334;
 var $750=(((-$746))|0);
 var $uglygep_i_i_i1336=(($scevgep28_i_i_i1335+$750)|0);
 var $uglygep29_i_i_i1337=$uglygep_i_i_i1336;
 var $751=$uglygep29_i_i_i1337>>>4;
 var $752=$751^-1;
 var $scevgep30_i_i_i1338=(($748+($752<<4))|0);
 HEAP32[(($586)>>2)]=$scevgep30_i_i_i1338;
 label=207;break;
 case 207: 
 var $753=$_pre1855;
 __ZdlPv($753);
 label=208;break;
 case 208: 
 var $_pre1809=HEAP32[(($584)>>2)];
 var $_phi_trans_insert1810=(($_pre1809+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $_pre1811=HEAP32[(($_phi_trans_insert1810)>>2)];
 var $j17_01502=$bestResult_sroa_2_0;var $756=$_pre1809;var $755=$_pre1811;label=209;break;
 case 209: 
 var $755;
 var $756;
 var $j17_01502;
 var $757=(($755+($j17_01502<<4))|0);
 var $758=(($756+((($734)*(12))&-1)+4)|0);
 var $759=HEAP32[(($758)>>2)];
 var $760=(($756+((($734)*(12))&-1)+8)|0);
 var $761=HEAP32[(($760)>>2)];
 var $762=($759|0)==($761|0);
 if($762){label=213;break;}else{label=210;break;}
 case 210: 
 var $764=($759|0)==0;
 if($764){var $768=0;label=212;break;}else{label=211;break;}
 case 211: 
 var $766=$759;
 var $767=$757;
 assert(16 % 1 === 0);HEAP32[(($766)>>2)]=HEAP32[(($767)>>2)];HEAP32[((($766)+(4))>>2)]=HEAP32[((($767)+(4))>>2)];HEAP32[((($766)+(8))>>2)]=HEAP32[((($767)+(8))>>2)];HEAP32[((($766)+(12))>>2)]=HEAP32[((($767)+(12))>>2)];
 var $_pre1812=HEAP32[(($758)>>2)];
 var $768=$_pre1812;label=212;break;
 case 212: 
 var $768;
 var $769=(($768+16)|0);
 HEAP32[(($758)>>2)]=$769;
 label=214;break;
 case 213: 
 var $771=(($756+((($734)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($771,$757);
 label=214;break;
 case 214: 
 var $772=((($j17_01502)+(1))|0);
 var $773=HEAP32[(($584)>>2)];
 var $774=(($773+((($bestResult_sroa_1_0)*(12))&-1)+4)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=(($773+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $777=HEAP32[(($776)>>2)];
 var $778=$775;
 var $779=$777;
 var $780=((($778)-($779))|0);
 var $781=$780>>4;
 var $782=(((($772>>>0))%(($781>>>0)))&-1);
 var $783=($782|0)==($bestResult_sroa_3_0|0);
 if($783){label=219;break;}else{var $j17_01502=$782;var $756=$773;var $755=$777;label=209;break;}
 case 215: 
 var $784$0 = ___cxa_find_matching_catch(-1, -1); var $784$1 = tempRet0;
 var $_pre1813=HEAP32[(($585)>>2)];
 var $785=$784$0;
 var $786=$784$1;
 var $787=$_pre1813;
 var $788=($_pre1813|0)==0;
 if($788){var $_01139=$785;var $_01140=$786;label=378;break;}else{label=216;break;}
 case 216: 
 var $789=HEAP32[(($586)>>2)];
 var $790=($_pre1813|0)==($789|0);
 if($790){label=218;break;}else{label=217;break;}
 case 217: 
 var $scevgep_i_i_i1343=((($789)-(16))|0);
 var $scevgep28_i_i_i1344=$scevgep_i_i_i1343;
 var $791=(((-$787))|0);
 var $uglygep_i_i_i1345=(($scevgep28_i_i_i1344+$791)|0);
 var $uglygep29_i_i_i1346=$uglygep_i_i_i1345;
 var $792=$uglygep29_i_i_i1346>>>4;
 var $793=$792^-1;
 var $scevgep30_i_i_i1347=(($789+($793<<4))|0);
 HEAP32[(($586)>>2)]=$scevgep30_i_i_i1347;
 label=218;break;
 case 218: 
 var $794=$_pre1813;
 __ZdlPv($794);
 var $_01139=$785;var $_01140=$786;label=378;break;
 case 219: 
 var $795=HEAP32[(($247)>>2)];
 var $796=(($795+((($bestA11_0)*(12))&-1)+4)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=(($795+((($bestA11_0)*(12))&-1))|0);
 var $799=HEAP32[(($798)>>2)];
 var $800=$797;
 var $801=$799;
 var $802=((($800)-($801))|0);
 var $803=$802>>4;
 var $j18_01504=((($803)-(1))|0);
 var $804=($j18_01504|0)>-1;
 if($804){var $j18_01505=$j18_01504;var $805=$799;label=220;break;}else{var $826=$795;var $825=$799;var $824=$797;label=227;break;}
 case 220: 
 var $805;
 var $j18_01505;
 var $806=HEAP32[(($584)>>2)];
 var $807=(($805+($j18_01505<<4))|0);
 var $808=(($806+((($734)*(12))&-1)+4)|0);
 var $809=HEAP32[(($808)>>2)];
 var $810=(($806+((($734)*(12))&-1)+8)|0);
 var $811=HEAP32[(($810)>>2)];
 var $812=($809|0)==($811|0);
 if($812){label=225;break;}else{label=221;break;}
 case 221: 
 var $814=($809|0)==0;
 if($814){var $818=0;label=223;break;}else{label=222;break;}
 case 222: 
 var $816=$809;
 var $817=$807;
 assert(16 % 1 === 0);HEAP32[(($816)>>2)]=HEAP32[(($817)>>2)];HEAP32[((($816)+(4))>>2)]=HEAP32[((($817)+(4))>>2)];HEAP32[((($816)+(8))>>2)]=HEAP32[((($817)+(8))>>2)];HEAP32[((($816)+(12))>>2)]=HEAP32[((($817)+(12))>>2)];
 var $_pre1808=HEAP32[(($808)>>2)];
 var $818=$_pre1808;label=223;break;
 case 223: 
 var $818;
 var $819=(($818+16)|0);
 HEAP32[(($808)>>2)]=$819;
 label=224;break;
 case 224: 
 var $j18_0=((($j18_01505)-(1))|0);
 var $820=($j18_0|0)>-1;
 var $_pre1856=HEAP32[(($247)>>2)];
 var $_phi_trans_insert1857=(($_pre1856+((($bestA11_0)*(12))&-1))|0);
 var $_pre1858=HEAP32[(($_phi_trans_insert1857)>>2)];
 if($820){var $j18_01505=$j18_0;var $805=$_pre1858;label=220;break;}else{label=226;break;}
 case 225: 
 var $822=(($806+((($734)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($822,$807);
 label=224;break;
 case 226: 
 var $_phi_trans_insert1806=(($_pre1856+((($bestA11_0)*(12))&-1)+4)|0);
 var $_pre1807=HEAP32[(($_phi_trans_insert1806)>>2)];
 var $826=$_pre1856;var $825=$_pre1858;var $824=$_pre1807;label=227;break;
 case 227: 
 var $824;
 var $825;
 var $826;
 var $827=($825|0)==($824|0);
 if($827){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=1;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{label=228;break;}
 case 228: 
 var $828=(($826+((($bestA11_0)*(12))&-1)+4)|0);
 var $829=$825;
 var $scevgep1721=((($824)-(16))|0);
 var $scevgep17211722=$scevgep1721;
 var $830=(((-$829))|0);
 var $uglygep1723=(($scevgep17211722+$830)|0);
 var $uglygep17231724=$uglygep1723;
 var $831=$uglygep17231724>>>4;
 var $scevgep1721_sum=$831^-1;
 var $scevgep1725=(($824+($scevgep1721_sum<<4))|0);
 HEAP32[(($828)>>2)]=$scevgep1725;
 var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=1;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;
 case 229: 
 var $833=(($595+((($bestA11_0)*(12))&-1))|0);
 var $834=HEAP32[(($_pre1869)>>2)];
 var $835=($729|0)==($834|0);
 if($835){label=245;break;}else{label=230;break;}
 case 230: 
 var $837=($729|0)==0;
 if($837){label=244;break;}else{label=231;break;}
 case 231: 
 var $839=(($729)|0);
 HEAP32[(($839)>>2)]=0;
 var $840=(($729+4)|0);
 HEAP32[(($840)>>2)]=0;
 var $841=(($729+8)|0);
 HEAP32[(($841)>>2)]=0;
 var $842=(($595+((($bestA11_0)*(12))&-1)+4)|0);
 var $843=HEAP32[(($842)>>2)];
 var $844=(($833)|0);
 var $845=HEAP32[(($844)>>2)];
 var $846=$843;
 var $847=$845;
 var $848=((($846)-($847))|0);
 var $849=$848>>4;
 var $850=($849|0)==0;
 if($850){label=244;break;}else{label=232;break;}
 case 232: 
 var $852=($849>>>0)>268435455;
 if($852){label=233;break;}else{label=234;break;}
 case 233: 
 var $854=$729;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($854) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=239;break; }
 case 234: 
 var $855=(function() { try { __THREW__ = 0; return __Znwj($848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=235;break; } else { label=239;break; }
 case 235: 
 var $857=$855;
 HEAP32[(($840)>>2)]=$857;
 HEAP32[(($839)>>2)]=$857;
 var $858=(($857+($849<<4))|0);
 HEAP32[(($841)>>2)]=$858;
 var $859=HEAP32[(($844)>>2)];
 var $860=HEAP32[(($842)>>2)];
 var $861=($859|0)==($860|0);
 if($861){label=244;break;}else{var $_011_i_i_i1352=$859;var $862=$857;label=236;break;}
 case 236: 
 var $862;
 var $_011_i_i_i1352;
 var $863=($862|0)==0;
 if($863){var $867=0;label=238;break;}else{label=237;break;}
 case 237: 
 var $865=$862;
 var $866=$_011_i_i_i1352;
 assert(16 % 1 === 0);HEAP32[(($865)>>2)]=HEAP32[(($866)>>2)];HEAP32[((($865)+(4))>>2)]=HEAP32[((($866)+(4))>>2)];HEAP32[((($865)+(8))>>2)]=HEAP32[((($866)+(8))>>2)];HEAP32[((($865)+(12))>>2)]=HEAP32[((($866)+(12))>>2)];
 var $_pre12_i_i_i1354=HEAP32[(($840)>>2)];
 var $867=$_pre12_i_i_i1354;label=238;break;
 case 238: 
 var $867;
 var $868=(($867+16)|0);
 HEAP32[(($840)>>2)]=$868;
 var $869=(($_011_i_i_i1352+16)|0);
 var $870=($869|0)==($860|0);
 if($870){label=244;break;}else{var $_011_i_i_i1352=$869;var $862=$868;label=236;break;}
 case 239: 
 var $872$0 = ___cxa_find_matching_catch(-1, -1); var $872$1 = tempRet0;
 var $873=HEAP32[(($839)>>2)];
 var $874=$873;
 var $875=($873|0)==0;
 if($875){label=243;break;}else{label=240;break;}
 case 240: 
 var $876=HEAP32[(($840)>>2)];
 var $877=($873|0)==($876|0);
 if($877){label=242;break;}else{label=241;break;}
 case 241: 
 var $scevgep_i_i_i1357=((($876)-(16))|0);
 var $scevgep28_i_i_i1358=$scevgep_i_i_i1357;
 var $878=(((-$874))|0);
 var $uglygep_i_i_i1359=(($scevgep28_i_i_i1358+$878)|0);
 var $uglygep29_i_i_i1360=$uglygep_i_i_i1359;
 var $879=$uglygep29_i_i_i1360>>>4;
 var $880=$879^-1;
 var $scevgep30_i_i_i1361=(($876+($880<<4))|0);
 HEAP32[(($840)>>2)]=$scevgep30_i_i_i1361;
 label=242;break;
 case 242: 
 var $881=$873;
 __ZdlPv($881);
 label=243;break;
 case 243: 
 ___resumeException($872$0)
 case 244: 
 var $882=HEAP32[(($_pre1868)>>2)];
 var $883=(($882+12)|0);
 HEAP32[(($_pre1868)>>2)]=$883;
 label=246;break;
 case 245: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($_pre1871,$833);
 label=246;break;
 case 246: 
 var $_pre1814=HEAP32[(($584)>>2)];
 var $_phi_trans_insert1815=(($_pre1814+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $_pre1816=HEAP32[(($_phi_trans_insert1815)>>2)];
 var $j20_01496=$bestResult_sroa_3_0;var $887=$_pre1814;var $886=$_pre1816;label=247;break;
 case 247: 
 var $886;
 var $887;
 var $j20_01496;
 var $888=(($886+($j20_01496<<4))|0);
 var $889=(($887+((($734)*(12))&-1)+4)|0);
 var $890=HEAP32[(($889)>>2)];
 var $891=(($887+((($734)*(12))&-1)+8)|0);
 var $892=HEAP32[(($891)>>2)];
 var $893=($890|0)==($892|0);
 if($893){label=251;break;}else{label=248;break;}
 case 248: 
 var $895=($890|0)==0;
 if($895){var $899=0;label=250;break;}else{label=249;break;}
 case 249: 
 var $897=$890;
 var $898=$888;
 assert(16 % 1 === 0);HEAP32[(($897)>>2)]=HEAP32[(($898)>>2)];HEAP32[((($897)+(4))>>2)]=HEAP32[((($898)+(4))>>2)];HEAP32[((($897)+(8))>>2)]=HEAP32[((($898)+(8))>>2)];HEAP32[((($897)+(12))>>2)]=HEAP32[((($898)+(12))>>2)];
 var $_pre1817=HEAP32[(($889)>>2)];
 var $899=$_pre1817;label=250;break;
 case 250: 
 var $899;
 var $900=(($899+16)|0);
 HEAP32[(($889)>>2)]=$900;
 label=252;break;
 case 251: 
 var $902=(($887+((($734)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($902,$888);
 label=252;break;
 case 252: 
 var $903=((($j20_01496)+(1))|0);
 var $904=HEAP32[(($584)>>2)];
 var $905=(($904+((($bestResult_sroa_1_0)*(12))&-1)+4)|0);
 var $906=HEAP32[(($905)>>2)];
 var $907=(($904+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $908=HEAP32[(($907)>>2)];
 var $909=$906;
 var $910=$908;
 var $911=((($909)-($910))|0);
 var $912=$911>>4;
 var $913=(((($903>>>0))%(($912>>>0)))&-1);
 var $914=($913|0)==($bestResult_sroa_2_0|0);
 if($914){label=253;break;}else{var $j20_01496=$913;var $887=$904;var $886=$908;label=247;break;}
 case 253: 
 var $915=HEAP32[(($247)>>2)];
 var $916=(($915+((($bestA11_0)*(12))&-1))|0);
 var $917=HEAP32[(($916)>>2)];
 var $918=(($915+((($bestA11_0)*(12))&-1)+4)|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=($917|0)==($919|0);
 if($920){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{label=254;break;}
 case 254: 
 var $921=$917;
 var $scevgep1714=((($919)-(16))|0);
 var $scevgep17141715=$scevgep1714;
 var $922=(((-$921))|0);
 var $uglygep1716=(($scevgep17141715+$922)|0);
 var $uglygep17161717=$uglygep1716;
 var $923=$uglygep17161717>>>4;
 var $scevgep1714_sum=$923^-1;
 var $scevgep1718=(($919+($scevgep1714_sum<<4))|0);
 HEAP32[(($918)>>2)]=$scevgep1718;
 var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;
 case 255: 
 if($663){label=256;break;}else{label=265;break;}
 case 256: 
 var $925=(($595+((($bestA11_0)*(12))&-1)+4)|0);
 var $926=HEAP32[(($925)>>2)];
 var $927=(($595+((($bestA11_0)*(12))&-1))|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=($926|0)==($928|0);
 if($929){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=$bestResult_sroa_4_1_off0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{var $n21_01489=0;var $931=$595;var $930=$928;label=257;break;}
 case 257: 
 var $930;
 var $931;
 var $n21_01489;
 var $932=(($930+($n21_01489<<4))|0);
 var $933=(($931+((($bestB12_0)*(12))&-1)+4)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=(($931+((($bestB12_0)*(12))&-1)+8)|0);
 var $936=HEAP32[(($935)>>2)];
 var $937=($934|0)==($936|0);
 if($937){label=261;break;}else{label=258;break;}
 case 258: 
 var $939=($934|0)==0;
 if($939){var $943=0;label=260;break;}else{label=259;break;}
 case 259: 
 var $941=$934;
 var $942=$932;
 assert(16 % 1 === 0);HEAP32[(($941)>>2)]=HEAP32[(($942)>>2)];HEAP32[((($941)+(4))>>2)]=HEAP32[((($942)+(4))>>2)];HEAP32[((($941)+(8))>>2)]=HEAP32[((($942)+(8))>>2)];HEAP32[((($941)+(12))>>2)]=HEAP32[((($942)+(12))>>2)];
 var $_pre1830=HEAP32[(($933)>>2)];
 var $943=$_pre1830;label=260;break;
 case 260: 
 var $943;
 var $944=(($943+16)|0);
 HEAP32[(($933)>>2)]=$944;
 label=262;break;
 case 261: 
 var $946=(($931+((($bestB12_0)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($946,$932);
 label=262;break;
 case 262: 
 var $947=((($n21_01489)+(1))|0);
 var $948=HEAP32[(($247)>>2)];
 var $949=(($948+((($bestA11_0)*(12))&-1)+4)|0);
 var $950=HEAP32[(($949)>>2)];
 var $951=(($948+((($bestA11_0)*(12))&-1))|0);
 var $952=HEAP32[(($951)>>2)];
 var $953=$950;
 var $954=$952;
 var $955=((($953)-($954))|0);
 var $956=$955>>4;
 var $957=($947>>>0)<($956>>>0);
 if($957){var $n21_01489=$947;var $931=$948;var $930=$952;label=257;break;}else{label=263;break;}
 case 263: 
 var $958=($952|0)==($950|0);
 if($958){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=$bestResult_sroa_4_1_off0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{label=264;break;}
 case 264: 
 var $_lcssa14881708=$952;
 var $scevgep1706=((($950)-(16))|0);
 var $scevgep17061707=$scevgep1706;
 var $959=(((-$_lcssa14881708))|0);
 var $uglygep1709=(($scevgep17061707+$959)|0);
 var $uglygep17091710=$uglygep1709;
 var $960=$uglygep17091710>>>4;
 var $scevgep1706_sum=$960^-1;
 var $scevgep1711=(($950+($scevgep1706_sum<<4))|0);
 HEAP32[(($949)>>2)]=$scevgep1711;
 var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=$bestResult_sroa_4_1_off0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;
 case 265: 
 if($bestResult_sroa_4_1_off0){label=267;break;}else{label=266;break;}
 case 266: 
 var $_pre1826=HEAP32[(($591)>>2)];
 var $_phi_trans_insert1827=(($_pre1826+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $_pre1828=HEAP32[(($_phi_trans_insert1827)>>2)];
 var $n26_01446=$bestResult_sroa_3_0;var $1069=$595;var $1068=$_pre1828;label=303;break;
 case 267: 
 HEAP32[(($588)>>2)]=0;
 HEAP32[(($589)>>2)]=0;
 HEAP32[(($590)>>2)]=0;
 var $_pre1822=HEAP32[(($591)>>2)];
 var $_phi_trans_insert1823=(($_pre1822+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $_pre1824=HEAP32[(($_phi_trans_insert1823)>>2)];
 var $n23_01462=$bestResult_sroa_2_0;var $965=$_pre1824;var $964=0;var $963=0;label=268;break;
 case 268: 
 var $963;
 var $964;
 var $965;
 var $n23_01462;
 var $966=(($965+($n23_01462<<4))|0);
 var $967=($964|0)==($963|0);
 if($967){label=272;break;}else{label=269;break;}
 case 269: 
 var $969=($964|0)==0;
 if($969){label=271;break;}else{label=270;break;}
 case 270: 
 var $971=$964;
 var $972=$966;
 assert(16 % 1 === 0);HEAP32[(($971)>>2)]=HEAP32[(($972)>>2)];HEAP32[((($971)+(4))>>2)]=HEAP32[((($972)+(4))>>2)];HEAP32[((($971)+(8))>>2)]=HEAP32[((($972)+(8))>>2)];HEAP32[((($971)+(12))>>2)]=HEAP32[((($972)+(12))>>2)];
 label=271;break;
 case 271: 
 var $973=(($964+16)|0);
 HEAP32[(($589)>>2)]=$973;
 label=273;break;
 case 272: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($poly22,$966) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=273;break; } else { label=275;break; }
 case 273: 
 var $975=((($n23_01462)+(1))|0);
 var $976=HEAP32[(($591)>>2)];
 var $977=(($976+((($bestResult_sroa_1_0)*(12))&-1)+4)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=(($976+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=$978;
 var $982=$980;
 var $983=((($981)-($982))|0);
 var $984=$983>>4;
 var $985=(((($975>>>0))%(($984>>>0)))&-1);
 var $986=($985|0)==($bestResult_sroa_3_0|0);
 var $_pre1818=HEAP32[(($589)>>2)];
 if($986){label=282;break;}else{label=274;break;}
 case 274: 
 var $_pre1861=HEAP32[(($590)>>2)];
 var $n23_01462=$985;var $965=$980;var $964=$_pre1818;var $963=$_pre1861;label=268;break;
 case 275: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=278;break;
 case 276: 
 var $lpad_loopexit1467$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1467$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1467$1;var $lpad_phi$0=$lpad_loopexit1467$0;label=278;break;
 case 277: 
 var $lpad_nonloopexit1468$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit1468$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit1468$1;var $lpad_phi$0=$lpad_nonloopexit1468$0;label=278;break;
 case 278: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $987=$lpad_phi$0;
 var $988=$lpad_phi$1;
 var $989=HEAP32[(($588)>>2)];
 var $990=$989;
 var $991=($989|0)==0;
 if($991){var $_01139=$987;var $_01140=$988;label=378;break;}else{label=279;break;}
 case 279: 
 var $992=HEAP32[(($589)>>2)];
 var $993=($989|0)==($992|0);
 if($993){label=281;break;}else{label=280;break;}
 case 280: 
 var $scevgep_i_i_i1367=((($992)-(16))|0);
 var $scevgep28_i_i_i1368=$scevgep_i_i_i1367;
 var $994=(((-$990))|0);
 var $uglygep_i_i_i1369=(($scevgep28_i_i_i1368+$994)|0);
 var $uglygep29_i_i_i1370=$uglygep_i_i_i1369;
 var $995=$uglygep29_i_i_i1370>>>4;
 var $996=$995^-1;
 var $scevgep30_i_i_i1371=(($992+($996<<4))|0);
 HEAP32[(($589)>>2)]=$scevgep30_i_i_i1371;
 label=281;break;
 case 281: 
 var $997=$989;
 __ZdlPv($997);
 var $_01139=$987;var $_01140=$988;label=378;break;
 case 282: 
 var $_pre1819=HEAP32[(($588)>>2)];
 var $phitmp=$_pre1818;
 var $999=$_pre1819;
 var $1000=((($phitmp)-($999))|0);
 var $1001=$1000>>4;
 var $n24_01470=((($1001)-(1))|0);
 var $1002=($n24_01470|0)>-1;
 if($1002){var $n24_01471=$n24_01470;var $1003=$_pre1819;label=283;break;}else{label=290;break;}
 case 283: 
 var $1003;
 var $n24_01471;
 var $1004=HEAP32[(($247)>>2)];
 var $1005=(($1003+($n24_01471<<4))|0);
 var $1006=(($1004+((($bestB12_0)*(12))&-1)+4)|0);
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=(($1004+((($bestB12_0)*(12))&-1)+8)|0);
 var $1009=HEAP32[(($1008)>>2)];
 var $1010=($1007|0)==($1009|0);
 if($1010){label=287;break;}else{label=284;break;}
 case 284: 
 var $1012=($1007|0)==0;
 if($1012){var $1016=0;label=286;break;}else{label=285;break;}
 case 285: 
 var $1014=$1007;
 var $1015=$1005;
 assert(16 % 1 === 0);HEAP32[(($1014)>>2)]=HEAP32[(($1015)>>2)];HEAP32[((($1014)+(4))>>2)]=HEAP32[((($1015)+(4))>>2)];HEAP32[((($1014)+(8))>>2)]=HEAP32[((($1015)+(8))>>2)];HEAP32[((($1014)+(12))>>2)]=HEAP32[((($1015)+(12))>>2)];
 var $_pre1821=HEAP32[(($1006)>>2)];
 var $1016=$_pre1821;label=286;break;
 case 286: 
 var $1016;
 var $1017=(($1016+16)|0);
 HEAP32[(($1006)>>2)]=$1017;
 label=288;break;
 case 287: 
 var $1019=(($1004+((($bestB12_0)*(12))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($1019,$1005) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=288;break; } else { label=276;break; }
 case 288: 
 var $n24_0=((($n24_01471)-(1))|0);
 var $1020=($n24_0|0)>-1;
 if($1020){label=289;break;}else{label=290;break;}
 case 289: 
 var $_pre1859=HEAP32[(($588)>>2)];
 var $n24_01471=$n24_0;var $1003=$_pre1859;label=283;break;
 case 290: 
 var $1021=HEAP32[(($247)>>2)];
 var $1022=(($1021+((($bestA11_0)*(12))&-1)+4)|0);
 var $1023=HEAP32[(($1022)>>2)];
 var $1024=(($1021+((($bestA11_0)*(12))&-1))|0);
 var $1025=HEAP32[(($1024)>>2)];
 var $1026=($1023|0)==($1025|0);
 if($1026){label=299;break;}else{var $n25_01479=0;var $1028=$1021;var $1027=$1025;label=291;break;}
 case 291: 
 var $1027;
 var $1028;
 var $n25_01479;
 var $1029=(($1027+($n25_01479<<4))|0);
 var $1030=(($1028+((($bestB12_0)*(12))&-1)+4)|0);
 var $1031=HEAP32[(($1030)>>2)];
 var $1032=(($1028+((($bestB12_0)*(12))&-1)+8)|0);
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=($1031|0)==($1033|0);
 if($1034){label=295;break;}else{label=292;break;}
 case 292: 
 var $1036=($1031|0)==0;
 if($1036){var $1040=0;label=294;break;}else{label=293;break;}
 case 293: 
 var $1038=$1031;
 var $1039=$1029;
 assert(16 % 1 === 0);HEAP32[(($1038)>>2)]=HEAP32[(($1039)>>2)];HEAP32[((($1038)+(4))>>2)]=HEAP32[((($1039)+(4))>>2)];HEAP32[((($1038)+(8))>>2)]=HEAP32[((($1039)+(8))>>2)];HEAP32[((($1038)+(12))>>2)]=HEAP32[((($1039)+(12))>>2)];
 var $_pre1820=HEAP32[(($1030)>>2)];
 var $1040=$_pre1820;label=294;break;
 case 294: 
 var $1040;
 var $1041=(($1040+16)|0);
 HEAP32[(($1030)>>2)]=$1041;
 label=296;break;
 case 295: 
 var $1043=(($1028+((($bestB12_0)*(12))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($1043,$1029) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=277;break; }
 case 296: 
 var $1044=((($n25_01479)+(1))|0);
 var $1045=HEAP32[(($247)>>2)];
 var $1046=(($1045+((($bestA11_0)*(12))&-1)+4)|0);
 var $1047=HEAP32[(($1046)>>2)];
 var $1048=(($1045+((($bestA11_0)*(12))&-1))|0);
 var $1049=HEAP32[(($1048)>>2)];
 var $1050=$1047;
 var $1051=$1049;
 var $1052=((($1050)-($1051))|0);
 var $1053=$1052>>4;
 var $1054=($1044>>>0)<($1053>>>0);
 if($1054){var $n25_01479=$1044;var $1028=$1045;var $1027=$1049;label=291;break;}else{label=297;break;}
 case 297: 
 var $1055=($1049|0)==($1047|0);
 if($1055){label=299;break;}else{label=298;break;}
 case 298: 
 var $_lcssa14771698=$1049;
 var $scevgep1696=((($1047)-(16))|0);
 var $scevgep16961697=$scevgep1696;
 var $1056=(((-$_lcssa14771698))|0);
 var $uglygep1699=(($scevgep16961697+$1056)|0);
 var $uglygep16991700=$uglygep1699;
 var $1057=$uglygep16991700>>>4;
 var $scevgep1696_sum=$1057^-1;
 var $scevgep1701=(($1047+($scevgep1696_sum<<4))|0);
 HEAP32[(($1046)>>2)]=$scevgep1701;
 label=299;break;
 case 299: 
 var $1058=HEAP32[(($588)>>2)];
 var $1059=$1058;
 var $1060=($1058|0)==0;
 if($1060){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=1;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{label=300;break;}
 case 300: 
 var $1061=HEAP32[(($589)>>2)];
 var $1062=($1058|0)==($1061|0);
 if($1062){label=302;break;}else{label=301;break;}
 case 301: 
 var $scevgep_i_i_i1376=((($1061)-(16))|0);
 var $scevgep28_i_i_i1377=$scevgep_i_i_i1376;
 var $1063=(((-$1059))|0);
 var $uglygep_i_i_i1378=(($scevgep28_i_i_i1377+$1063)|0);
 var $uglygep29_i_i_i1379=$uglygep_i_i_i1378;
 var $1064=$uglygep29_i_i_i1379>>>4;
 var $1065=$1064^-1;
 var $scevgep30_i_i_i1380=(($1061+($1065<<4))|0);
 HEAP32[(($589)>>2)]=$scevgep30_i_i_i1380;
 label=302;break;
 case 302: 
 var $1066=$1058;
 __ZdlPv($1066);
 var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=1;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;
 case 303: 
 var $1068;
 var $1069;
 var $n26_01446;
 var $1070=(($1068+($n26_01446<<4))|0);
 var $1071=(($1069+((($bestB12_0)*(12))&-1)+4)|0);
 var $1072=HEAP32[(($1071)>>2)];
 var $1073=(($1069+((($bestB12_0)*(12))&-1)+8)|0);
 var $1074=HEAP32[(($1073)>>2)];
 var $1075=($1072|0)==($1074|0);
 if($1075){label=307;break;}else{label=304;break;}
 case 304: 
 var $1077=($1072|0)==0;
 if($1077){var $1081=0;label=306;break;}else{label=305;break;}
 case 305: 
 var $1079=$1072;
 var $1080=$1070;
 assert(16 % 1 === 0);HEAP32[(($1079)>>2)]=HEAP32[(($1080)>>2)];HEAP32[((($1079)+(4))>>2)]=HEAP32[((($1080)+(4))>>2)];HEAP32[((($1079)+(8))>>2)]=HEAP32[((($1080)+(8))>>2)];HEAP32[((($1079)+(12))>>2)]=HEAP32[((($1080)+(12))>>2)];
 var $_pre1829=HEAP32[(($1071)>>2)];
 var $1081=$_pre1829;label=306;break;
 case 306: 
 var $1081;
 var $1082=(($1081+16)|0);
 HEAP32[(($1071)>>2)]=$1082;
 label=308;break;
 case 307: 
 var $1084=(($1069+((($bestB12_0)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($1084,$1070);
 label=308;break;
 case 308: 
 var $1085=((($n26_01446)+(1))|0);
 var $1086=HEAP32[(($591)>>2)];
 var $1087=(($1086+((($bestResult_sroa_1_0)*(12))&-1)+4)|0);
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=(($1086+((($bestResult_sroa_1_0)*(12))&-1))|0);
 var $1090=HEAP32[(($1089)>>2)];
 var $1091=$1088;
 var $1092=$1090;
 var $1093=((($1091)-($1092))|0);
 var $1094=$1093>>4;
 var $1095=(((($1085>>>0))%(($1094>>>0)))&-1);
 var $1096=($1095|0)==($bestResult_sroa_2_0|0);
 var $1097=HEAP32[(($247)>>2)];
 if($1096){label=309;break;}else{var $n26_01446=$1095;var $1069=$1097;var $1068=$1090;label=303;break;}
 case 309: 
 var $1098=(($1097+((($bestA11_0)*(12))&-1)+4)|0);
 var $1099=HEAP32[(($1098)>>2)];
 var $1100=(($1097+((($bestA11_0)*(12))&-1))|0);
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=$1099;
 var $1103=$1101;
 var $1104=((($1102)-($1103))|0);
 var $1105=$1104>>4;
 var $n27_01453=((($1105)-(1))|0);
 var $1106=($n27_01453|0)>-1;
 if($1106){var $n27_01454=$n27_01453;var $1108=$1097;var $1107=$1101;label=310;break;}else{var $_lcssa1451=$1097;var $_lcssa1452=$1101;label=316;break;}
 case 310: 
 var $1107;
 var $1108;
 var $n27_01454;
 var $1109=(($1107+($n27_01454<<4))|0);
 var $1110=(($1108+((($bestB12_0)*(12))&-1)+4)|0);
 var $1111=HEAP32[(($1110)>>2)];
 var $1112=(($1108+((($bestB12_0)*(12))&-1)+8)|0);
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1111|0)==($1113|0);
 if($1114){label=315;break;}else{label=311;break;}
 case 311: 
 var $1116=($1111|0)==0;
 if($1116){var $1120=0;label=313;break;}else{label=312;break;}
 case 312: 
 var $1118=$1111;
 var $1119=$1109;
 assert(16 % 1 === 0);HEAP32[(($1118)>>2)]=HEAP32[(($1119)>>2)];HEAP32[((($1118)+(4))>>2)]=HEAP32[((($1119)+(4))>>2)];HEAP32[((($1118)+(8))>>2)]=HEAP32[((($1119)+(8))>>2)];HEAP32[((($1118)+(12))>>2)]=HEAP32[((($1119)+(12))>>2)];
 var $_pre1825=HEAP32[(($1110)>>2)];
 var $1120=$_pre1825;label=313;break;
 case 313: 
 var $1120;
 var $1121=(($1120+16)|0);
 HEAP32[(($1110)>>2)]=$1121;
 label=314;break;
 case 314: 
 var $n27_0=((($n27_01454)-(1))|0);
 var $1122=($n27_0|0)>-1;
 var $1123=HEAP32[(($247)>>2)];
 var $1124=(($1123+((($bestA11_0)*(12))&-1))|0);
 var $1125=HEAP32[(($1124)>>2)];
 if($1122){var $n27_01454=$n27_0;var $1108=$1123;var $1107=$1125;label=310;break;}else{var $_lcssa1451=$1123;var $_lcssa1452=$1125;label=316;break;}
 case 315: 
 var $1127=(($1108+((($bestB12_0)*(12))&-1))|0);
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($1127,$1109);
 label=314;break;
 case 316: 
 var $_lcssa1452;
 var $_lcssa1451;
 var $1128=(($_lcssa1451+((($bestA11_0)*(12))&-1)+4)|0);
 var $1129=HEAP32[(($1128)>>2)];
 var $1130=($_lcssa1452|0)==($1129|0);
 if($1130){var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;}else{label=317;break;}
 case 317: 
 var $_lcssa14521688=$_lcssa1452;
 var $scevgep1686=((($1129)-(16))|0);
 var $scevgep16861687=$scevgep1686;
 var $1131=(((-$_lcssa14521688))|0);
 var $uglygep1689=(($scevgep16861687+$1131)|0);
 var $uglygep16891690=$uglygep1689;
 var $1132=$uglygep16891690>>>4;
 var $scevgep1686_sum=$1132^-1;
 var $scevgep1691=(($1129+($scevgep1686_sum<<4))|0);
 HEAP32[(($1128)>>2)]=$scevgep1691;
 var $i13_0_be=0;var $bestResult_sroa_0_0_be$1=2147483647;var $bestResult_sroa_0_0_be$0=-1;var $bestResult_sroa_1_0_be=-1;var $bestResult_sroa_2_0_be=-1;var $bestResult_sroa_3_0_be=-1;var $bestResult_sroa_4_1_off0_be=0;var $bestB12_0_be=-1;var $bestA11_0_be=-1;label=175;break;
 case 318: 
 var $1133;
 var $1134;
 var $i28_01441;
 var $q_01440;
 var $1135=(($1134+((($i28_01441)*(12))&-1)+4)|0);
 var $1136=HEAP32[(($1135)>>2)];
 var $1137=(($1134+((($i28_01441)*(12))&-1))|0);
 var $1138=HEAP32[(($1137)>>2)];
 var $1139=$1136;
 var $1140=$1138;
 var $1141=((($1139)-($1140))|0);
 var $1142=$1141>>4;
 var $1143=($1142>>>0)<2;
 if($1143){var $q_1=$q_01440;var $1179=$1133;var $1178=$1134;label=322;break;}else{label=319;break;}
 case 319: 
 var $1145=($q_01440|0)==0;
 if($1145){label=320;break;}else{var $1148=$1138;label=321;break;}
 case 320: 
 var $puts=_puts(144);
 var $_pre1799=HEAP32[(($247)>>2)];
 var $_phi_trans_insert=(($_pre1799+((($i28_01441)*(12))&-1))|0);
 var $_pre1800=HEAP32[(($_phi_trans_insert)>>2)];
 var $1148=$_pre1800;label=321;break;
 case 321: 
 var $1148;
 var $1149=(($1148)|0);
 var $ld$42$0=(($1149)|0);
 var $1150$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($1149+4)|0);
 var $1150$1=HEAP32[(($ld$43$1)>>2)];
 var $1151=(($1150$0>>>0)+(($1150$1|0)*4294967296));
 var $1152=$1151;
 var $1153=(($1148+8)|0);
 var $ld$44$0=(($1153)|0);
 var $1154$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($1153+4)|0);
 var $1154$1=HEAP32[(($ld$45$1)>>2)];
 var $1155=(($1154$0>>>0)+(($1154$1|0)*4294967296));
 var $1156=$1155;
 var $1157=_printf(400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1152,HEAPF64[(((tempVarArgs)+(8))>>3)]=$1156,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1158=HEAP32[(($247)>>2)];
 var $1159=(($1158+((($i28_01441)*(12))&-1)+4)|0);
 var $1160=HEAP32[(($1159)>>2)];
 var $1161=(($1158+((($i28_01441)*(12))&-1))|0);
 var $1162=HEAP32[(($1161)>>2)];
 var $1163=$1160;
 var $1164=$1162;
 var $1165=((($1163)-($1164))|0);
 var $1166=$1165>>4;
 var $1167=((($1166)-(1))|0);
 var $1168=(($1162+($1167<<4))|0);
 var $ld$46$0=(($1168)|0);
 var $1169$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($1168+4)|0);
 var $1169$1=HEAP32[(($ld$47$1)>>2)];
 var $1170=(($1169$0>>>0)+(($1169$1|0)*4294967296));
 var $1171=$1170;
 var $1172=(($1162+($1167<<4)+8)|0);
 var $ld$48$0=(($1172)|0);
 var $1173$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($1172+4)|0);
 var $1173$1=HEAP32[(($ld$49$1)>>2)];
 var $1174=(($1173$0>>>0)+(($1173$1|0)*4294967296));
 var $1175=$1174;
 var $1176=_printf(336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1171,HEAPF64[(((tempVarArgs)+(8))>>3)]=$1175,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_pre1797=HEAP32[(($245)>>2)];
 var $_pre1798=HEAP32[(($247)>>2)];
 var $q_1=1;var $1179=$_pre1797;var $1178=$_pre1798;label=322;break;
 case 322: 
 var $1178;
 var $1179;
 var $q_1;
 var $1180=((($i28_01441)+(1))|0);
 var $1181=$1179;
 var $1182=$1178;
 var $1183=((($1181)-($1182))|0);
 var $1184=(((($1183|0))/(12))&-1);
 var $1185=($1180>>>0)<($1184>>>0);
 if($1185){var $q_01440=$q_1;var $i28_01441=$1180;var $1134=$1178;var $1133=$1179;label=318;break;}else{var $1187=$1178;var $1186=$1179;label=323;break;}
 case 323: 
 var $1186;
 var $1187;
 if($keepNoneClosed){label=324;break;}else{label=354;break;}
 case 324: 
 var $1188=($1186|0)==($1187|0);
 if($1188){label=355;break;}else{var $1192=$1187;label=326;break;}
 case 325: 
 var $1189;
 var $1190=HEAP32[(($247)>>2)];
 var $1191=($1189|0)==($1190|0);
 if($1191){label=355;break;}else{var $1192=$1190;label=326;break;}
 case 326: 
 var $1192;
 var $1193=(($1192+4)|0);
 var $1194=HEAP32[(($1193)>>2)];
 var $1195=(($1192)|0);
 var $1196=HEAP32[(($1195)>>2)];
 var $1197=($1194|0)==($1196|0);
 if($1197){label=344;break;}else{label=327;break;}
 case 327: 
 var $1199=HEAP32[(($_pre1868)>>2)];
 var $1200=HEAP32[(($_pre1869)>>2)];
 var $1201=($1199|0)==($1200|0);
 if($1201){label=343;break;}else{label=328;break;}
 case 328: 
 var $1203=($1199|0)==0;
 if($1203){label=342;break;}else{label=329;break;}
 case 329: 
 var $1205=(($1199)|0);
 HEAP32[(($1205)>>2)]=0;
 var $1206=(($1199+4)|0);
 HEAP32[(($1206)>>2)]=0;
 var $1207=(($1199+8)|0);
 HEAP32[(($1207)>>2)]=0;
 var $1208=HEAP32[(($1193)>>2)];
 var $1209=HEAP32[(($1195)>>2)];
 var $1210=$1208;
 var $1211=$1209;
 var $1212=((($1210)-($1211))|0);
 var $1213=$1212>>4;
 var $1214=($1213|0)==0;
 if($1214){label=342;break;}else{label=330;break;}
 case 330: 
 var $1216=($1213>>>0)>268435455;
 if($1216){label=331;break;}else{label=332;break;}
 case 331: 
 var $1218=$1199;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=332;break; } else { label=337;break; }
 case 332: 
 var $1219=(function() { try { __THREW__ = 0; return __Znwj($1212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=333;break; } else { label=337;break; }
 case 333: 
 var $1221=$1219;
 HEAP32[(($1206)>>2)]=$1221;
 HEAP32[(($1205)>>2)]=$1221;
 var $1222=(($1221+($1213<<4))|0);
 HEAP32[(($1207)>>2)]=$1222;
 var $1223=HEAP32[(($1195)>>2)];
 var $1224=HEAP32[(($1193)>>2)];
 var $1225=($1223|0)==($1224|0);
 if($1225){label=342;break;}else{var $_011_i_i_i1385=$1223;var $1226=$1221;label=334;break;}
 case 334: 
 var $1226;
 var $_011_i_i_i1385;
 var $1227=($1226|0)==0;
 if($1227){var $1231=0;label=336;break;}else{label=335;break;}
 case 335: 
 var $1229=$1226;
 var $1230=$_011_i_i_i1385;
 assert(16 % 1 === 0);HEAP32[(($1229)>>2)]=HEAP32[(($1230)>>2)];HEAP32[((($1229)+(4))>>2)]=HEAP32[((($1230)+(4))>>2)];HEAP32[((($1229)+(8))>>2)]=HEAP32[((($1230)+(8))>>2)];HEAP32[((($1229)+(12))>>2)]=HEAP32[((($1230)+(12))>>2)];
 var $_pre12_i_i_i1387=HEAP32[(($1206)>>2)];
 var $1231=$_pre12_i_i_i1387;label=336;break;
 case 336: 
 var $1231;
 var $1232=(($1231+16)|0);
 HEAP32[(($1206)>>2)]=$1232;
 var $1233=(($_011_i_i_i1385+16)|0);
 var $1234=($1233|0)==($1224|0);
 if($1234){label=342;break;}else{var $_011_i_i_i1385=$1233;var $1226=$1232;label=334;break;}
 case 337: 
 var $1236$0 = ___cxa_find_matching_catch(-1, -1); var $1236$1 = tempRet0;
 var $1237=HEAP32[(($1205)>>2)];
 var $1238=$1237;
 var $1239=($1237|0)==0;
 if($1239){label=341;break;}else{label=338;break;}
 case 338: 
 var $1240=HEAP32[(($1206)>>2)];
 var $1241=($1237|0)==($1240|0);
 if($1241){label=340;break;}else{label=339;break;}
 case 339: 
 var $scevgep_i_i_i1390=((($1240)-(16))|0);
 var $scevgep28_i_i_i1391=$scevgep_i_i_i1390;
 var $1242=(((-$1238))|0);
 var $uglygep_i_i_i1392=(($scevgep28_i_i_i1391+$1242)|0);
 var $uglygep29_i_i_i1393=$uglygep_i_i_i1392;
 var $1243=$uglygep29_i_i_i1393>>>4;
 var $1244=$1243^-1;
 var $scevgep30_i_i_i1394=(($1240+($1244<<4))|0);
 HEAP32[(($1206)>>2)]=$scevgep30_i_i_i1394;
 label=340;break;
 case 340: 
 var $1245=$1237;
 __ZdlPv($1245);
 label=341;break;
 case 341: 
 ___resumeException($1236$0)
 case 342: 
 var $1246=HEAP32[(($_pre1868)>>2)];
 var $1247=(($1246+12)|0);
 HEAP32[(($_pre1868)>>2)]=$1247;
 label=344;break;
 case 343: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($_pre1871,$1192);
 label=344;break;
 case 344: 
 var $1249=HEAP32[(($247)>>2)];
 var $1250=HEAP32[(($245)>>2)];
 var $_01429=(($1249+12)|0);
 var $1251=($_01429|0)==($1250|0);
 if($1251){var $_01136_lcssa=$1249;var $1261=$1250;label=348;break;}else{label=345;break;}
 case 345: 
 var $1252=$1249;
 var $scevgep1675=((($1250)-(24))|0);
 var $scevgep16751676=$scevgep1675;
 var $1253=(((-$1252))|0);
 var $uglygep1677=(($scevgep16751676+$1253)|0);
 var $uglygep16771678=$uglygep1677;
 var $1254=(((($uglygep16771678>>>0))/(12))&-1);
 var $_011361430=$1249;var $_01432=$_01429;label=346;break;
 case 346: 
 var $_01432;
 var $_011361430;
 var $1255=(($_01432)|0);
 var $1256=HEAP32[(($1255)>>2)];
 var $1257=(($_011361430+16)|0);
 var $1258=HEAP32[(($1257)>>2)];
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_011361430,$1256,$1258);
 var $1259=(($_011361430+12)|0);
 var $_0=(($_01432+12)|0);
 var $1260=($_0|0)==($1250|0);
 if($1260){label=347;break;}else{var $_011361430=$1259;var $_01432=$_0;label=346;break;}
 case 347: 
 var $_01429_sum=((($1254)+(1))|0);
 var $scevgep1679=(($1249+((($_01429_sum)*(12))&-1))|0);
 var $_pre1795=HEAP32[(($245)>>2)];
 var $_01136_lcssa=$scevgep1679;var $1261=$_pre1795;label=348;break;
 case 348: 
 var $1261;
 var $_01136_lcssa;
 var $1262=($_01136_lcssa|0)==($1261|0);
 if($1262){var $1189=$1261;label=325;break;}else{var $1263=$1261;label=349;break;}
 case 349: 
 var $1263;
 var $1264=((($1263)-(12))|0);
 HEAP32[(($245)>>2)]=$1264;
 var $1265=(($1264)|0);
 var $1266=HEAP32[(($1265)>>2)];
 var $1267=$1266;
 var $1268=($1266|0)==0;
 if($1268){var $1269=$1264;label=350;break;}else{label=351;break;}
 case 350: 
 var $1269;
 var $1270=($_01136_lcssa|0)==($1269|0);
 if($1270){var $1189=$_01136_lcssa;label=325;break;}else{var $1263=$1269;label=349;break;}
 case 351: 
 var $1271=((($1263)-(12)+4)|0);
 var $1272=HEAP32[(($1271)>>2)];
 var $1273=($1266|0)==($1272|0);
 if($1273){label=353;break;}else{label=352;break;}
 case 352: 
 var $scevgep_i_i_i1400=((($1272)-(16))|0);
 var $scevgep28_i_i_i1401=$scevgep_i_i_i1400;
 var $1274=(((-$1267))|0);
 var $uglygep_i_i_i1402=(($scevgep28_i_i_i1401+$1274)|0);
 var $uglygep29_i_i_i1403=$uglygep_i_i_i1402;
 var $1275=$uglygep29_i_i_i1403>>>4;
 var $1276=$1275^-1;
 var $scevgep30_i_i_i1404=(($1272+($1276<<4))|0);
 HEAP32[(($1271)>>2)]=$scevgep30_i_i_i1404;
 label=353;break;
 case 353: 
 var $1277=$1266;
 __ZdlPv($1277);
 var $_pre1796=HEAP32[(($245)>>2)];
 var $1269=$_pre1796;label=350;break;
 case 354: 
 var $1278=($1187|0)==($1186|0);
 if($1278){label=355;break;}else{var $1283=$1186;label=356;break;}
 case 355: 
 var $1279=HEAP32[(($_pre1868)>>2)];
 var $1280=(($_pre1871)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=($1279|0)==($1281|0);
 if($1282){label=377;break;}else{var $i29_01426=0;var $1300=$1281;var $1299=$1279;var $1298=$1279;label=361;break;}
 case 356: 
 var $1283;
 var $1284=((($1283)-(12))|0);
 HEAP32[(($245)>>2)]=$1284;
 var $1285=(($1284)|0);
 var $1286=HEAP32[(($1285)>>2)];
 var $1287=$1286;
 var $1288=($1286|0)==0;
 if($1288){var $1289=$1284;label=357;break;}else{label=358;break;}
 case 357: 
 var $1289;
 var $1290=($1187|0)==($1289|0);
 if($1290){label=355;break;}else{var $1283=$1289;label=356;break;}
 case 358: 
 var $1291=((($1283)-(12)+4)|0);
 var $1292=HEAP32[(($1291)>>2)];
 var $1293=($1286|0)==($1292|0);
 if($1293){label=360;break;}else{label=359;break;}
 case 359: 
 var $scevgep_i_i_i1409=((($1292)-(16))|0);
 var $scevgep28_i_i_i1410=$scevgep_i_i_i1409;
 var $1294=(((-$1287))|0);
 var $uglygep_i_i_i1411=(($scevgep28_i_i_i1410+$1294)|0);
 var $uglygep29_i_i_i1412=$uglygep_i_i_i1411;
 var $1295=$uglygep29_i_i_i1412>>>4;
 var $1296=$1295^-1;
 var $scevgep30_i_i_i1413=(($1292+($1296<<4))|0);
 HEAP32[(($1291)>>2)]=$scevgep30_i_i_i1413;
 label=360;break;
 case 360: 
 var $1297=$1286;
 __ZdlPv($1297);
 var $_pre1794=HEAP32[(($245)>>2)];
 var $1289=$_pre1794;label=357;break;
 case 361: 
 var $1298;
 var $1299;
 var $1300;
 var $i29_01426;
 var $1301=(($1300+((($i29_01426)*(12))&-1)+4)|0);
 var $1302=HEAP32[(($1301)>>2)];
 var $1303=(($1300+((($i29_01426)*(12))&-1))|0);
 var $1304=HEAP32[(($1303)>>2)];
 var $1305=$1302;
 var $1306=$1304;
 var $1307=((($1305)-($1306))|0);
 var $1308=$1307>>4;
 var $n30_0=1;var $length_0=0;label=362;break;
 case 362: 
 var $length_0;
 var $n30_0;
 var $1310=($n30_0>>>0)<($1308>>>0);
 if($1310){label=363;break;}else{label=364;break;}
 case 363: 
 var $1312=((($n30_0)-(1))|0);
 var $_idx1204=(($1304+($n30_0<<4))|0);
 var $ld$50$0=(($_idx1204)|0);
 var $_idx1204_val$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($_idx1204+4)|0);
 var $_idx1204_val$1=HEAP32[(($ld$51$1)>>2)];
 var $_idx1205=(($1304+($n30_0<<4)+8)|0);
 var $ld$52$0=(($_idx1205)|0);
 var $_idx1205_val$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($_idx1205+4)|0);
 var $_idx1205_val$1=HEAP32[(($ld$53$1)>>2)];
 var $_idx1206=(($1304+($1312<<4))|0);
 var $ld$54$0=(($_idx1206)|0);
 var $_idx1206_val$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($_idx1206+4)|0);
 var $_idx1206_val$1=HEAP32[(($ld$55$1)>>2)];
 var $_idx1207=(($1304+($1312<<4)+8)|0);
 var $ld$56$0=(($_idx1207)|0);
 var $_idx1207_val$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($_idx1207+4)|0);
 var $_idx1207_val$1=HEAP32[(($ld$57$1)>>2)];
 var $1313$0=_i64Subtract($_idx1204_val$0,$_idx1204_val$1,$_idx1206_val$0,$_idx1206_val$1);var $1313$1=tempRet0;
 var $1314$0=_i64Subtract($_idx1205_val$0,$_idx1205_val$1,$_idx1207_val$0,$_idx1207_val$1);var $1314$1=tempRet0;
 var $1315$0=___muldi3($1313$0,$1313$1,$1313$0,$1313$1);var $1315$1=tempRet0;
 var $1316$0=___muldi3($1314$0,$1314$1,$1314$0,$1314$1);var $1316$1=tempRet0;
 var $1317$0=_i64Add($1316$0,$1316$1,$1315$0,$1315$1);var $1317$1=tempRet0;
 var $1318=(($1317$0>>>0)+(($1317$1|0)*4294967296));
 var $1319=Math_sqrt($1318);
 var $1320=(($1319)&-1);
 var $1321=((($1320)+($length_0))|0);
 var $1322=($1321|0)>1000;
 var $1323=((($n30_0)+(1))|0);
 if($1322){var $i29_1=$i29_01426;var $1363=$1299;var $1362=$1300;var $1361=$1298;label=376;break;}else{var $n30_0=$1323;var $length_0=$1321;label=362;break;}
 case 364: 
 var $1325=($length_0|0)<1000;
 if($1325){label=365;break;}else{var $i29_1=$i29_01426;var $1363=$1299;var $1362=$1300;var $1361=$1298;label=376;break;}
 case 365: 
 var $_idx=((($i29_01426)*(12))&-1);
 var $1327=(((($_idx|0))/(12))&-1);
 var $1328=(($1300+((($1327)*(12))&-1))|0);
 var $_sum=((($1327)+(1))|0);
 var $1329=(($1300+((($_sum)*(12))&-1))|0);
 var $1330=($1329|0)==($1299|0);
 if($1330){var $_01138_lcssa=$1328;var $1342=$1298;label=369;break;}else{label=366;break;}
 case 366: 
 var $1331=$1300;
 var $scevgep1669_sum=(((-2)-($1327))|0);
 var $scevgep1670=(($1299+((($scevgep1669_sum)*(12))&-1))|0);
 var $scevgep16701671=$scevgep1670;
 var $1332=(((-$1331))|0);
 var $uglygep=(($scevgep16701671+$1332)|0);
 var $uglygep1672=$uglygep;
 var $1333=(((($uglygep1672>>>0))/(12))&-1);
 var $1334=((($1327)+($1333))|0);
 var $_011381423=$1328;var $_011371424=$1329;label=367;break;
 case 367: 
 var $_011371424;
 var $_011381423;
 var $1335=(($_011371424)|0);
 var $1336=HEAP32[(($1335)>>2)];
 var $1337=(($_011371424+4)|0);
 var $1338=HEAP32[(($1337)>>2)];
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_011381423,$1336,$1338);
 var $1339=(($_011371424+12)|0);
 var $1340=(($_011381423+12)|0);
 var $1341=($1339|0)==($1299|0);
 if($1341){label=368;break;}else{var $_011381423=$1340;var $_011371424=$1339;label=367;break;}
 case 368: 
 var $scevgep_sum=((($1334)+(1))|0);
 var $scevgep1673=(($1300+((($scevgep_sum)*(12))&-1))|0);
 var $_pre1854=HEAP32[(($_pre1868)>>2)];
 var $_01138_lcssa=$scevgep1673;var $1342=$_pre1854;label=369;break;
 case 369: 
 var $1342;
 var $_01138_lcssa;
 var $1343=($_01138_lcssa|0)==($1342|0);
 if($1343){var $1359=$1342;label=375;break;}else{var $1344=$1342;label=370;break;}
 case 370: 
 var $1344;
 var $1345=((($1344)-(12))|0);
 HEAP32[(($_pre1868)>>2)]=$1345;
 var $1346=(($1345)|0);
 var $1347=HEAP32[(($1346)>>2)];
 var $1348=$1347;
 var $1349=($1347|0)==0;
 if($1349){var $1350=$1345;label=371;break;}else{label=372;break;}
 case 371: 
 var $1350;
 var $1351=($_01138_lcssa|0)==($1350|0);
 if($1351){var $1359=$_01138_lcssa;label=375;break;}else{var $1344=$1350;label=370;break;}
 case 372: 
 var $1352=((($1344)-(12)+4)|0);
 var $1353=HEAP32[(($1352)>>2)];
 var $1354=($1347|0)==($1353|0);
 if($1354){label=374;break;}else{label=373;break;}
 case 373: 
 var $scevgep_i_i_i=((($1353)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $1355=(((-$1348))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$1355)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $1356=$uglygep29_i_i_i>>>4;
 var $1357=$1356^-1;
 var $scevgep30_i_i_i=(($1353+($1357<<4))|0);
 HEAP32[(($1352)>>2)]=$scevgep30_i_i_i;
 label=374;break;
 case 374: 
 var $1358=$1347;
 __ZdlPv($1358);
 var $_pre1793=HEAP32[(($_pre1868)>>2)];
 var $1350=$_pre1793;label=371;break;
 case 375: 
 var $1359;
 var $1360=((($i29_01426)-(1))|0);
 var $_pre1792=HEAP32[(($1280)>>2)];
 var $i29_1=$1360;var $1363=$_01138_lcssa;var $1362=$_pre1792;var $1361=$1359;label=376;break;
 case 376: 
 var $1361;
 var $1362;
 var $1363;
 var $i29_1;
 var $1364=((($i29_1)+(1))|0);
 var $1365=$1363;
 var $1366=$1362;
 var $1367=((($1365)-($1366))|0);
 var $1368=(((($1367|0))/(12))&-1);
 var $1369=($1364>>>0)<($1368>>>0);
 if($1369){var $i29_01426=$1364;var $1300=$1362;var $1299=$1363;var $1298=$1361;label=361;break;}else{label=377;break;}
 case 377: 
 __Z16optimizePolygonsRNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEE($_pre1871);
 STACKTOP=sp;return;
 case 378: 
 var $_01140;
 var $_01139;
 var $1370$0=$_01139;
 var $1370$1=0;
 var $1371$0=$1370$0;
 var $1371$1=$_01140;
 ___resumeException($1371$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11SlicerLayer20findPolygonGapCloserEN10ClipperLib8IntPointES1_($agg_result,$this,$ip0,$ip1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip0; $ip0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var tempParam = $ip1; $ip1=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip1)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c1=sp;
 var $1=(sp)+(24);
 var $c2=(sp)+(40);
 var $2=(sp)+(64);
 var $3=$1;
 var $4=$ip0;
 assert(16 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];HEAP32[((($3)+(12))>>2)]=HEAP32[((($4)+(12))>>2)];
 __ZN11SlicerLayer25findPolygonPointClosestToEN10ClipperLib8IntPointE($c1,$this,$1);
 var $5=$2;
 var $6=$ip1;
 assert(16 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];HEAP32[((($5)+(12))>>2)]=HEAP32[((($6)+(12))>>2)];
 __ZN11SlicerLayer25findPolygonPointClosestToEN10ClipperLib8IntPointE($c2,$this,$2);
 var $7=(($c1+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)<0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($c2+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($8|0)==($12|0);
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($agg_result)|0);
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $st$1$0=(($15)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($15+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 label=15;break;
 case 4: 
 var $17=(($agg_result+8)|0);
 HEAP32[(($17)>>2)]=$8;
 var $18=(($c1+20)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($agg_result+12)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($c2+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($agg_result+16)|0);
 HEAP32[(($23)>>2)]=$22;
 var $24=(($agg_result+20)|0);
 HEAP8[($24)]=1;
 var $25=($19|0)==($22|0);
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $ip0_idx52=(($ip0)|0);
 var $ld$3$0=(($ip0_idx52)|0);
 var $ip0_idx52_val$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($ip0_idx52+4)|0);
 var $ip0_idx52_val$1=HEAP32[(($ld$4$1)>>2)];
 var $ip0_idx53=(($ip0+8)|0);
 var $ld$5$0=(($ip0_idx53)|0);
 var $ip0_idx53_val$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($ip0_idx53+4)|0);
 var $ip0_idx53_val$1=HEAP32[(($ld$6$1)>>2)];
 var $ip1_idx54=(($ip1)|0);
 var $ld$7$0=(($ip1_idx54)|0);
 var $ip1_idx54_val$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($ip1_idx54+4)|0);
 var $ip1_idx54_val$1=HEAP32[(($ld$8$1)>>2)];
 var $ip1_idx55=(($ip1+8)|0);
 var $ld$9$0=(($ip1_idx55)|0);
 var $ip1_idx55_val$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($ip1_idx55+4)|0);
 var $ip1_idx55_val$1=HEAP32[(($ld$10$1)>>2)];
 var $27$0=_i64Subtract($ip0_idx52_val$0,$ip0_idx52_val$1,$ip1_idx54_val$0,$ip1_idx54_val$1);var $27$1=tempRet0;
 var $28$0=_i64Subtract($ip0_idx53_val$0,$ip0_idx53_val$1,$ip1_idx55_val$0,$ip1_idx55_val$1);var $28$1=tempRet0;
 var $29$0=___muldi3($27$0,$27$1,$27$0,$27$1);var $29$1=tempRet0;
 var $30$0=___muldi3($28$0,$28$1,$28$0,$28$1);var $30$1=tempRet0;
 var $31$0=_i64Add($30$0,$30$1,$29$0,$29$1);var $31$1=tempRet0;
 var $32=(($31$0>>>0)+(($31$1|0)*4294967296));
 var $33=Math_sqrt($32);
 var $34=(($33)&-1);
 var $35$0=$34;
 var $35$1=(((($34|0)<0))|0)?-1:0;
 var $36=(($agg_result)|0);
 var $st$11$0=(($36)|0);
 HEAP32[(($st$11$0)>>2)]=$35$0;
 var $st$12$1=(($36+4)|0);
 HEAP32[(($st$12$1)>>2)]=$35$1;
 label=15;break;
 case 6: 
 var $37=(($this+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+((($8)*(12))&-1))|0);
 var $40=HEAP32[(($39)>>2)];
 var $p0_sroa_0_0__idx94=(($40+($19<<4))|0);
 var $ld$13$0=(($p0_sroa_0_0__idx94)|0);
 var $p0_sroa_0_0_copyload95$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($p0_sroa_0_0__idx94+4)|0);
 var $p0_sroa_0_0_copyload95$1=HEAP32[(($ld$14$1)>>2)];
 var $p0_sroa_1_8__idx102=(($40+($19<<4)+8)|0);
 var $ld$15$0=(($p0_sroa_1_8__idx102)|0);
 var $p0_sroa_1_8_copyload103$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($p0_sroa_1_8__idx102+4)|0);
 var $p0_sroa_1_8_copyload103$1=HEAP32[(($ld$16$1)>>2)];
 var $ip0_idx50=(($ip0)|0);
 var $ld$17$0=(($ip0_idx50)|0);
 var $ip0_idx50_val$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($ip0_idx50+4)|0);
 var $ip0_idx50_val$1=HEAP32[(($ld$18$1)>>2)];
 var $ip0_idx51=(($ip0+8)|0);
 var $ld$19$0=(($ip0_idx51)|0);
 var $ip0_idx51_val$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($ip0_idx51+4)|0);
 var $ip0_idx51_val$1=HEAP32[(($ld$20$1)>>2)];
 var $41$0=_i64Subtract($p0_sroa_0_0_copyload95$0,$p0_sroa_0_0_copyload95$1,$ip0_idx50_val$0,$ip0_idx50_val$1);var $41$1=tempRet0;
 var $42$0=_i64Subtract($p0_sroa_1_8_copyload103$0,$p0_sroa_1_8_copyload103$1,$ip0_idx51_val$0,$ip0_idx51_val$1);var $42$1=tempRet0;
 var $43$0=___muldi3($41$0,$41$1,$41$0,$41$1);var $43$1=tempRet0;
 var $44$0=___muldi3($42$0,$42$1,$42$0,$42$1);var $44$1=tempRet0;
 var $45$0=_i64Add($44$0,$44$1,$43$0,$43$1);var $45$1=tempRet0;
 var $46=(($45$0>>>0)+(($45$1|0)*4294967296));
 var $47=Math_sqrt($46);
 var $48=(($47)&-1);
 var $49$0=$48;
 var $49$1=(((($48|0)<0))|0)?-1:0;
 var $50=(($38+((($8)*(12))&-1)+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51;
 var $53=$40;
 var $54=((($52)-($53))|0);
 var $55=$54>>4;
 var $p0_sroa_1_8_copyload103108116$1=$p0_sroa_1_8_copyload103$1;var $p0_sroa_1_8_copyload103108116$0=$p0_sroa_1_8_copyload103$0;var $p0_sroa_0_0_copyload95106117$1=$p0_sroa_0_0_copyload95$1;var $p0_sroa_0_0_copyload95106117$0=$p0_sroa_0_0_copyload95$0;var $lenA_0118$1=$49$1;var $lenA_0118$0=$49$0;var $i_0119=$19;var $p1_sroa_0_0_copyload83$1=$p0_sroa_0_0_copyload95$1;var $p1_sroa_0_0_copyload83$0=$p0_sroa_0_0_copyload95$0;var $p1_sroa_1_8_copyload86$1=$p0_sroa_1_8_copyload103$1;var $p1_sroa_1_8_copyload86$0=$p0_sroa_1_8_copyload103$0;label=7;break;
 case 7: 
 var $p1_sroa_1_8_copyload86$0;
 var $p1_sroa_1_8_copyload86$1;
 var $p1_sroa_0_0_copyload83$0;
 var $p1_sroa_0_0_copyload83$1;
 var $i_0119;
 var $lenA_0118$0;
 var $lenA_0118$1;
 var $p0_sroa_0_0_copyload95106117$0;
 var $p0_sroa_0_0_copyload95106117$1;
 var $p0_sroa_1_8_copyload103108116$0;
 var $p0_sroa_1_8_copyload103108116$1;
 var $57$0=_i64Subtract($p0_sroa_0_0_copyload95106117$0,$p0_sroa_0_0_copyload95106117$1,$p1_sroa_0_0_copyload83$0,$p1_sroa_0_0_copyload83$1);var $57$1=tempRet0;
 var $58$0=_i64Subtract($p0_sroa_1_8_copyload103108116$0,$p0_sroa_1_8_copyload103108116$1,$p1_sroa_1_8_copyload86$0,$p1_sroa_1_8_copyload86$1);var $58$1=tempRet0;
 var $59$0=___muldi3($57$0,$57$1,$57$0,$57$1);var $59$1=tempRet0;
 var $60$0=___muldi3($58$0,$58$1,$58$0,$58$1);var $60$1=tempRet0;
 var $61$0=_i64Add($60$0,$60$1,$59$0,$59$1);var $61$1=tempRet0;
 var $62=(($61$0>>>0)+(($61$1|0)*4294967296));
 var $63=Math_sqrt($62);
 var $64=(($63)&-1);
 var $65$0=$64;
 var $65$1=(((($64|0)<0))|0)?-1:0;
 var $66$0=_i64Add($65$0,$65$1,$lenA_0118$0,$lenA_0118$1);var $66$1=tempRet0;
 var $67=((($i_0119)+(1))|0);
 var $68=(((($67>>>0))%(($55>>>0)))&-1);
 var $69=($68|0)==($22|0);
 if($69){label=9;break;}else{label=8;break;}
 case 8: 
 var $p1_sroa_0_0__idx82_phi_trans_insert=(($40+($68<<4))|0);
 var $ld$21$0=(($p1_sroa_0_0__idx82_phi_trans_insert)|0);
 var $p1_sroa_0_0_copyload83_pre$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($p1_sroa_0_0__idx82_phi_trans_insert+4)|0);
 var $p1_sroa_0_0_copyload83_pre$1=HEAP32[(($ld$22$1)>>2)];
 var $p1_sroa_1_8__idx85_phi_trans_insert=(($40+($68<<4)+8)|0);
 var $ld$23$0=(($p1_sroa_1_8__idx85_phi_trans_insert)|0);
 var $p1_sroa_1_8_copyload86_pre$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($p1_sroa_1_8__idx85_phi_trans_insert+4)|0);
 var $p1_sroa_1_8_copyload86_pre$1=HEAP32[(($ld$24$1)>>2)];
 var $p0_sroa_1_8_copyload103108116$1=$p1_sroa_1_8_copyload86$1;var $p0_sroa_1_8_copyload103108116$0=$p1_sroa_1_8_copyload86$0;var $p0_sroa_0_0_copyload95106117$1=$p1_sroa_0_0_copyload83$1;var $p0_sroa_0_0_copyload95106117$0=$p1_sroa_0_0_copyload83$0;var $lenA_0118$1=$66$1;var $lenA_0118$0=$66$0;var $i_0119=$68;var $p1_sroa_0_0_copyload83$1=$p1_sroa_0_0_copyload83_pre$1;var $p1_sroa_0_0_copyload83$0=$p1_sroa_0_0_copyload83_pre$0;var $p1_sroa_1_8_copyload86$1=$p1_sroa_1_8_copyload86_pre$1;var $p1_sroa_1_8_copyload86$0=$p1_sroa_1_8_copyload86_pre$0;label=7;break;
 case 9: 
 var $ip1_idx43=(($ip1)|0);
 var $ld$25$0=(($ip1_idx43)|0);
 var $ip1_idx43_val$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($ip1_idx43+4)|0);
 var $ip1_idx43_val$1=HEAP32[(($ld$26$1)>>2)];
 var $ip1_idx44=(($ip1+8)|0);
 var $ld$27$0=(($ip1_idx44)|0);
 var $ip1_idx44_val$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($ip1_idx44+4)|0);
 var $ip1_idx44_val$1=HEAP32[(($ld$28$1)>>2)];
 var $70$0=_i64Subtract($p1_sroa_0_0_copyload83$0,$p1_sroa_0_0_copyload83$1,$ip1_idx43_val$0,$ip1_idx43_val$1);var $70$1=tempRet0;
 var $71$0=_i64Subtract($p1_sroa_1_8_copyload86$0,$p1_sroa_1_8_copyload86$1,$ip1_idx44_val$0,$ip1_idx44_val$1);var $71$1=tempRet0;
 var $72$0=___muldi3($70$0,$70$1,$70$0,$70$1);var $72$1=tempRet0;
 var $73$0=___muldi3($71$0,$71$1,$71$0,$71$1);var $73$1=tempRet0;
 var $74$0=_i64Add($73$0,$73$1,$72$0,$72$1);var $74$1=tempRet0;
 var $75=(($74$0>>>0)+(($74$1|0)*4294967296));
 var $76=Math_sqrt($75);
 var $77=(($76)&-1);
 var $78$0=$77;
 var $78$1=(((($77|0)<0))|0)?-1:0;
 var $79$0=_i64Add($78$0,$78$1,$66$0,$66$1);var $79$1=tempRet0;
 var $p0_sroa_0_0__idx=(($40+($22<<4))|0);
 var $ld$29$0=(($p0_sroa_0_0__idx)|0);
 var $p0_sroa_0_0_copyload$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($p0_sroa_0_0__idx+4)|0);
 var $p0_sroa_0_0_copyload$1=HEAP32[(($ld$30$1)>>2)];
 var $p0_sroa_1_8__idx101=(($40+($22<<4)+8)|0);
 var $ld$31$0=(($p0_sroa_1_8__idx101)|0);
 var $p0_sroa_1_8_copyload$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($p0_sroa_1_8__idx101+4)|0);
 var $p0_sroa_1_8_copyload$1=HEAP32[(($ld$32$1)>>2)];
 var $80$0=_i64Subtract($p0_sroa_0_0_copyload$0,$p0_sroa_0_0_copyload$1,$ip1_idx43_val$0,$ip1_idx43_val$1);var $80$1=tempRet0;
 var $81$0=_i64Subtract($p0_sroa_1_8_copyload$0,$p0_sroa_1_8_copyload$1,$ip1_idx44_val$0,$ip1_idx44_val$1);var $81$1=tempRet0;
 var $82$0=___muldi3($80$0,$80$1,$80$0,$80$1);var $82$1=tempRet0;
 var $83$0=___muldi3($81$0,$81$1,$81$0,$81$1);var $83$1=tempRet0;
 var $84$0=_i64Add($83$0,$83$1,$82$0,$82$1);var $84$1=tempRet0;
 var $85=(($84$0>>>0)+(($84$1|0)*4294967296));
 var $86=Math_sqrt($85);
 var $87=(($86)&-1);
 var $88$0=$87;
 var $88$1=(((($87|0)<0))|0)?-1:0;
 var $89=(($38+((($8)*(12))&-1)+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$90;
 var $92=$40;
 var $93=((($91)-($92))|0);
 var $94=$93>>4;
 var $p0_sroa_1_8_copyload103109110$1=$p0_sroa_1_8_copyload$1;var $p0_sroa_1_8_copyload103109110$0=$p0_sroa_1_8_copyload$0;var $p0_sroa_0_0_copyload95107111$1=$p0_sroa_0_0_copyload$1;var $p0_sroa_0_0_copyload95107111$0=$p0_sroa_0_0_copyload$0;var $lenB_0112$1=$88$1;var $lenB_0112$0=$88$0;var $i1_0113=$22;var $p12_sroa_0_0_copyload72$1=$p0_sroa_0_0_copyload$1;var $p12_sroa_0_0_copyload72$0=$p0_sroa_0_0_copyload$0;var $p12_sroa_1_8_copyload75$1=$p0_sroa_1_8_copyload$1;var $p12_sroa_1_8_copyload75$0=$p0_sroa_1_8_copyload$0;label=10;break;
 case 10: 
 var $p12_sroa_1_8_copyload75$0;
 var $p12_sroa_1_8_copyload75$1;
 var $p12_sroa_0_0_copyload72$0;
 var $p12_sroa_0_0_copyload72$1;
 var $i1_0113;
 var $lenB_0112$0;
 var $lenB_0112$1;
 var $p0_sroa_0_0_copyload95107111$0;
 var $p0_sroa_0_0_copyload95107111$1;
 var $p0_sroa_1_8_copyload103109110$0;
 var $p0_sroa_1_8_copyload103109110$1;
 var $96$0=_i64Subtract($p0_sroa_0_0_copyload95107111$0,$p0_sroa_0_0_copyload95107111$1,$p12_sroa_0_0_copyload72$0,$p12_sroa_0_0_copyload72$1);var $96$1=tempRet0;
 var $97$0=_i64Subtract($p0_sroa_1_8_copyload103109110$0,$p0_sroa_1_8_copyload103109110$1,$p12_sroa_1_8_copyload75$0,$p12_sroa_1_8_copyload75$1);var $97$1=tempRet0;
 var $98$0=___muldi3($96$0,$96$1,$96$0,$96$1);var $98$1=tempRet0;
 var $99$0=___muldi3($97$0,$97$1,$97$0,$97$1);var $99$1=tempRet0;
 var $100$0=_i64Add($99$0,$99$1,$98$0,$98$1);var $100$1=tempRet0;
 var $101=(($100$0>>>0)+(($100$1|0)*4294967296));
 var $102=Math_sqrt($101);
 var $103=(($102)&-1);
 var $104$0=$103;
 var $104$1=(((($103|0)<0))|0)?-1:0;
 var $105$0=_i64Add($104$0,$104$1,$lenB_0112$0,$lenB_0112$1);var $105$1=tempRet0;
 var $106=((($i1_0113)+(1))|0);
 var $107=(((($106>>>0))%(($94>>>0)))&-1);
 var $108=($107|0)==($19|0);
 if($108){label=12;break;}else{label=11;break;}
 case 11: 
 var $p12_sroa_0_0__idx71_phi_trans_insert=(($40+($107<<4))|0);
 var $ld$33$0=(($p12_sroa_0_0__idx71_phi_trans_insert)|0);
 var $p12_sroa_0_0_copyload72_pre$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($p12_sroa_0_0__idx71_phi_trans_insert+4)|0);
 var $p12_sroa_0_0_copyload72_pre$1=HEAP32[(($ld$34$1)>>2)];
 var $p12_sroa_1_8__idx74_phi_trans_insert=(($40+($107<<4)+8)|0);
 var $ld$35$0=(($p12_sroa_1_8__idx74_phi_trans_insert)|0);
 var $p12_sroa_1_8_copyload75_pre$0=HEAP32[(($ld$35$0)>>2)];
 var $ld$36$1=(($p12_sroa_1_8__idx74_phi_trans_insert+4)|0);
 var $p12_sroa_1_8_copyload75_pre$1=HEAP32[(($ld$36$1)>>2)];
 var $p0_sroa_1_8_copyload103109110$1=$p12_sroa_1_8_copyload75$1;var $p0_sroa_1_8_copyload103109110$0=$p12_sroa_1_8_copyload75$0;var $p0_sroa_0_0_copyload95107111$1=$p12_sroa_0_0_copyload72$1;var $p0_sroa_0_0_copyload95107111$0=$p12_sroa_0_0_copyload72$0;var $lenB_0112$1=$105$1;var $lenB_0112$0=$105$0;var $i1_0113=$107;var $p12_sroa_0_0_copyload72$1=$p12_sroa_0_0_copyload72_pre$1;var $p12_sroa_0_0_copyload72$0=$p12_sroa_0_0_copyload72_pre$0;var $p12_sroa_1_8_copyload75$1=$p12_sroa_1_8_copyload75_pre$1;var $p12_sroa_1_8_copyload75$0=$p12_sroa_1_8_copyload75_pre$0;label=10;break;
 case 12: 
 var $109$0=_i64Subtract($p12_sroa_0_0_copyload72$0,$p12_sroa_0_0_copyload72$1,$ip0_idx50_val$0,$ip0_idx50_val$1);var $109$1=tempRet0;
 var $110$0=_i64Subtract($p12_sroa_1_8_copyload75$0,$p12_sroa_1_8_copyload75$1,$ip0_idx51_val$0,$ip0_idx51_val$1);var $110$1=tempRet0;
 var $111$0=___muldi3($109$0,$109$1,$109$0,$109$1);var $111$1=tempRet0;
 var $112$0=___muldi3($110$0,$110$1,$110$0,$110$1);var $112$1=tempRet0;
 var $113$0=_i64Add($112$0,$112$1,$111$0,$111$1);var $113$1=tempRet0;
 var $114=(($113$0>>>0)+(($113$1|0)*4294967296));
 var $115=Math_sqrt($114);
 var $116=(($115)&-1);
 var $117$0=$116;
 var $117$1=(((($116|0)<0))|0)?-1:0;
 var $118$0=_i64Add($117$0,$117$1,$105$0,$105$1);var $118$1=tempRet0;
 var $119=(($79$1|0) < ($118$1|0)) | (((($79$1|0) == ($118$1|0) & ($79$0>>>0) <  ($118$0>>>0))));
 if($119){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP8[($24)]=1;
 var $121=(($agg_result)|0);
 var $st$37$0=(($121)|0);
 HEAP32[(($st$37$0)>>2)]=$79$0;
 var $st$38$1=(($121+4)|0);
 HEAP32[(($st$38$1)>>2)]=$79$1;
 label=15;break;
 case 14: 
 HEAP8[($24)]=0;
 var $123=(($agg_result)|0);
 var $st$39$0=(($123)|0);
 HEAP32[(($st$39$0)>>2)]=$118$0;
 var $st$40$1=(($123+4)|0);
 HEAP32[(($st$40$1)>>2)]=$118$1;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11SlicerLayer25findPolygonPointClosestToEN10ClipperLib8IntPointE($agg_result,$this,$input){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $input; $input=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($input)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($input)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($input)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($input)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0;
 var $2=(($this+28)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+24)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=13;break;}else{label=2;break;}
 case 2: 
 var $input_idx32=(($input)|0);
 var $ld$0$0=(($input_idx32)|0);
 var $input_idx32_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($input_idx32+4)|0);
 var $input_idx32_val$1=HEAP32[(($ld$1$1)>>2)];
 var $input_idx33=(($input+8)|0);
 var $ld$2$0=(($input_idx33)|0);
 var $input_idx33_val$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($input_idx33+4)|0);
 var $input_idx33_val$1=HEAP32[(($ld$3$1)>>2)];
 var $n_083=0;label=3;break;
 case 3: 
 var $n_083;
 var $8=(($5+((($n_083)*(12))&-1)+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($5+((($n_083)*(12))&-1))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$9;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=$14>>4;
 var $16=((($15)-(1))|0);
 var $17=HEAP32[(($8)>>2)];
 var $18=HEAP32[(($10)>>2)];
 var $19=($17|0)==($18|0);
 if($19){label=12;break;}else{label=4;break;}
 case 4: 
 var $p0_sroa_1_8__idx72=(($11+($16<<4)+8)|0);
 var $p0_sroa_0_0__idx=(($11+($16<<4))|0);
 var $ld$4$0=(($p0_sroa_1_8__idx72)|0);
 var $p0_sroa_1_8_copyload$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($p0_sroa_1_8__idx72+4)|0);
 var $p0_sroa_1_8_copyload$1=HEAP32[(($ld$5$1)>>2)];
 var $ld$6$0=(($p0_sroa_0_0__idx)|0);
 var $p0_sroa_0_0_copyload$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($p0_sroa_0_0__idx+4)|0);
 var $p0_sroa_0_0_copyload$1=HEAP32[(($ld$7$1)>>2)];
 var $p0_sroa_1_8_copyload7479$1=$p0_sroa_1_8_copyload$1;var $p0_sroa_1_8_copyload7479$0=$p0_sroa_1_8_copyload$0;var $p0_sroa_0_0_copyload7380$1=$p0_sroa_0_0_copyload$1;var $p0_sroa_0_0_copyload7380$0=$p0_sroa_0_0_copyload$0;var $i_081=0;var $21=$18;label=5;break;
 case 5: 
 var $21;
 var $i_081;
 var $p0_sroa_0_0_copyload7380$0;
 var $p0_sroa_0_0_copyload7380$1;
 var $p0_sroa_1_8_copyload7479$0;
 var $p0_sroa_1_8_copyload7479$1;
 var $p1_sroa_0_0__idx63=(($21+($i_081<<4))|0);
 var $ld$8$0=(($p1_sroa_0_0__idx63)|0);
 var $p1_sroa_0_0_copyload64$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($p1_sroa_0_0__idx63+4)|0);
 var $p1_sroa_0_0_copyload64$1=HEAP32[(($ld$9$1)>>2)];
 var $p1_sroa_1_8__idx66=(($21+($i_081<<4)+8)|0);
 var $ld$10$0=(($p1_sroa_1_8__idx66)|0);
 var $p1_sroa_1_8_copyload67$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($p1_sroa_1_8__idx66+4)|0);
 var $p1_sroa_1_8_copyload67$1=HEAP32[(($ld$11$1)>>2)];
 var $22$0=_i64Subtract($p1_sroa_0_0_copyload64$0,$p1_sroa_0_0_copyload64$1,$p0_sroa_0_0_copyload7380$0,$p0_sroa_0_0_copyload7380$1);var $22$1=tempRet0;
 var $23$0=_i64Subtract($p1_sroa_1_8_copyload67$0,$p1_sroa_1_8_copyload67$1,$p0_sroa_1_8_copyload7479$0,$p0_sroa_1_8_copyload7479$1);var $23$1=tempRet0;
 var $24$0=___muldi3($22$0,$22$1,$22$0,$22$1);var $24$1=tempRet0;
 var $25$0=___muldi3($23$0,$23$1,$23$0,$23$1);var $25$1=tempRet0;
 var $26$0=_i64Add($25$0,$25$1,$24$0,$24$1);var $26$1=tempRet0;
 var $27=(($26$0>>>0)+(($26$1|0)*4294967296));
 var $28=Math_sqrt($27);
 var $29=(($28)&-1);
 var $30$0=$29;
 var $30$1=(((($29|0)<0))|0)?-1:0;
 var $31=($29|0)>1;
 if($31){label=6;break;}else{label=11;break;}
 case 6: 
 var $33$0=_i64Subtract($input_idx32_val$0,$input_idx32_val$1,$p0_sroa_0_0_copyload7380$0,$p0_sroa_0_0_copyload7380$1);var $33$1=tempRet0;
 var $34$0=_i64Subtract($input_idx33_val$0,$input_idx33_val$1,$p0_sroa_1_8_copyload7479$0,$p0_sroa_1_8_copyload7479$1);var $34$1=tempRet0;
 var $35$0=___muldi3($33$0,$33$1,$22$0,$22$1);var $35$1=tempRet0;
 var $36$0=___muldi3($34$0,$34$1,$23$0,$23$1);var $36$1=tempRet0;
 var $37$0=_i64Add($36$0,$36$1,$35$0,$35$1);var $37$1=tempRet0;
 var $38$0=___divdi3($37$0,$37$1,$30$0,$30$1);var $38$1=tempRet0;
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $39=(($38$1|0) < ($$etemp$12$1|0)) | (((($38$1|0) == ($$etemp$12$1|0) & ($38$0>>>0) <  ($$etemp$12$0>>>0))));
 var $40=(($38$1|0) > ($30$1|0)) | (((($38$1|0) == ($30$1|0) & ($38$0>>>0) >  ($30$0>>>0))));
 var $or_cond=$39|$40;
 if($or_cond){label=11;break;}else{label=7;break;}
 case 7: 
 var $sext$0=0;
 var $sext$1=$38$0;
 var $42$0=$sext$1;
 var $42$1=(((($sext$1|0)<0))|0)?-1:0;
 var $43$0=___muldi3($42$0,$42$1,$22$0,$22$1);var $43$1=tempRet0;
 var $44$0=___muldi3($42$0,$42$1,$23$0,$23$1);var $44$1=tempRet0;
 var $45$0=___divdi3($43$0,$43$1,$30$0,$30$1);var $45$1=tempRet0;
 var $46$0=___divdi3($44$0,$44$1,$30$0,$30$1);var $46$1=tempRet0;
 var $47$0=_i64Add($45$0,$45$1,$p0_sroa_0_0_copyload7380$0,$p0_sroa_0_0_copyload7380$1);var $47$1=tempRet0;
 var $48$0=_i64Add($46$0,$46$1,$p0_sroa_1_8_copyload7479$0,$p0_sroa_1_8_copyload7479$1);var $48$1=tempRet0;
 var $49$0=_i64Subtract($47$0,$47$1,$input_idx32_val$0,$input_idx32_val$1);var $49$1=tempRet0;
 var $50$0=_i64Subtract($48$0,$48$1,$input_idx33_val$0,$input_idx33_val$1);var $50$1=tempRet0;
 var $$etemp$13$0=100;
 var $$etemp$13$1=0;
 var $_off$0=_i64Add($49$0,$49$1,$$etemp$13$0,$$etemp$13$1);var $_off$1=tempRet0;
 var $$etemp$14$0=200;
 var $$etemp$14$1=0;
 var $51=(($_off$1>>>0) > ($$etemp$14$1>>>0)) | (((($_off$1>>>0) == ($$etemp$14$1>>>0) & ($_off$0>>>0) >  ($$etemp$14$0>>>0))));
 if($51){label=11;break;}else{label=8;break;}
 case 8: 
 var $$etemp$15$0=100;
 var $$etemp$15$1=0;
 var $_off76$0=_i64Add($50$0,$50$1,$$etemp$15$0,$$etemp$15$1);var $_off76$1=tempRet0;
 var $$etemp$16$0=200;
 var $$etemp$16$1=0;
 var $53=(($_off76$1>>>0) > ($$etemp$16$1>>>0)) | (((($_off76$1>>>0) == ($$etemp$16$1>>>0) & ($_off76$0>>>0) >  ($$etemp$16$0>>>0))));
 if($53){label=11;break;}else{label=9;break;}
 case 9: 
 var $54$0=___muldi3($49$0,$49$1,$49$0,$49$1);var $54$1=tempRet0;
 var $55$0=___muldi3($50$0,$50$1,$50$0,$50$1);var $55$1=tempRet0;
 var $56$0=_i64Add($55$0,$55$1,$54$0,$54$1);var $56$1=tempRet0;
 var $$etemp$17$0=10001;
 var $$etemp$17$1=0;
 var $57=(($56$1|0) < ($$etemp$17$1|0)) | (((($56$1|0) == ($$etemp$17$1|0) & ($56$0>>>0) <  ($$etemp$17$0>>>0))));
 if($57){label=10;break;}else{label=11;break;}
 case 10: 
 var $q_sroa_0_0__idx=(($agg_result)|0);
 var $st$18$0=(($q_sroa_0_0__idx)|0);
 HEAP32[(($st$18$0)>>2)]=$47$0;
 var $st$19$1=(($q_sroa_0_0__idx+4)|0);
 HEAP32[(($st$19$1)>>2)]=$47$1;
 var $q_sroa_1_8__idx56=(($agg_result+8)|0);
 var $st$20$0=(($q_sroa_1_8__idx56)|0);
 HEAP32[(($st$20$0)>>2)]=$48$0;
 var $st$21$1=(($q_sroa_1_8__idx56+4)|0);
 HEAP32[(($st$21$1)>>2)]=$48$1;
 var $59=(($agg_result+16)|0);
 HEAP32[(($59)>>2)]=$n_083;
 var $60=(($agg_result+20)|0);
 HEAP32[(($60)>>2)]=$i_081;
 label=14;break;
 case 11: 
 var $61=((($i_081)+(1))|0);
 var $62=($61>>>0)<($15>>>0);
 if($62){var $p0_sroa_1_8_copyload7479$1=$p1_sroa_1_8_copyload67$1;var $p0_sroa_1_8_copyload7479$0=$p1_sroa_1_8_copyload67$0;var $p0_sroa_0_0_copyload7380$1=$p1_sroa_0_0_copyload64$1;var $p0_sroa_0_0_copyload7380$0=$p1_sroa_0_0_copyload64$0;var $i_081=$61;var $21=$11;label=5;break;}else{label=12;break;}
 case 12: 
 var $63=((($n_083)+(1))|0);
 var $64=$3;
 var $65=$5;
 var $66=((($64)-($65))|0);
 var $67=(((($66|0))/(12))&-1);
 var $68=($63>>>0)<($67>>>0);
 if($68){var $n_083=$63;label=3;break;}else{label=13;break;}
 case 13: 
 var $69=(($agg_result+16)|0);
 HEAP32[(($69)>>2)]=-1;
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI13SlicerSegmentNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(40))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>107374182;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(40))&-1);
 var $21=($20>>>0)>53687090;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(40))&-1);
 var $_044=107374182;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(40))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=((($_044)*(40))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+((($39)*(40))&-1))|0);
 var $43=(($41+((($_045)*(40))&-1))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=$42;
 var $47=$__x;
 assert(40 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];HEAP32[((($46)+(12))>>2)]=HEAP32[((($47)+(12))>>2)];HEAP32[((($46)+(16))>>2)]=HEAP32[((($47)+(16))>>2)];HEAP32[((($46)+(20))>>2)]=HEAP32[((($47)+(20))>>2)];HEAP32[((($46)+(24))>>2)]=HEAP32[((($47)+(24))>>2)];HEAP32[((($46)+(28))>>2)]=HEAP32[((($47)+(28))>>2)];HEAP32[((($46)+(32))>>2)]=HEAP32[((($47)+(32))>>2)];HEAP32[((($46)+(36))>>2)]=HEAP32[((($47)+(36))>>2)];
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $48=(($41+((($_sum)*(40))&-1))|0);
 var $49=(((($40|0))/(-40))&-1);
 var $_sum43=((($49)+($39))|0);
 var $50=(($41+((($_sum43)*(40))&-1))|0);
 var $51=$50;
 var $52=$14;
 assert($40 % 1 === 0);(_memcpy($51, $52, $40)|0);
 HEAP32[(($3)>>2)]=$50;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $53=($14|0)==0;
 if($53){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($52);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__x|0)==($__root|0);
 var $2=(($__x+12)|0);
 var $3=($1&1);
 HEAP8[($2)]=$3;
 if($1){label=37;break;}else{var $_060=$__x;label=2;break;}
 case 2: 
 var $_060;
 var $4=(($_060+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=37;break;}
 case 3: 
 var $11=(($5+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($5|0)==($14|0);
 if($15){label=4;break;}else{label=20;break;}
 case 4: 
 var $17=(($12+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=5;break;}
 case 5: 
 var $21=(($18+12)|0);
 var $22=HEAP8[($21)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP8[($6)]=1;
 var $26=($12|0)==($__root|0);
 var $27=(($12+12)|0);
 var $28=($26&1);
 HEAP8[($27)]=$28;
 HEAP8[($21)]=1;
 label=23;break;
 case 7: 
 var $30=(($5)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($_060|0)==($31|0);
 if($32){var $53=$5;var $52=$12;label=14;break;}else{label=8;break;}
 case 8: 
 var $34=(($5+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 HEAP32[(($34)>>2)]=$37;
 var $38=($37|0)==0;
 if($38){var $42=$12;label=10;break;}else{label=9;break;}
 case 9: 
 var $40=(($37+8)|0);
 HEAP32[(($40)>>2)]=$5;
 var $_pre67=HEAP32[(($11)>>2)];
 var $42=$_pre67;label=10;break;
 case 10: 
 var $42;
 var $43=(($35+8)|0);
 HEAP32[(($43)>>2)]=$42;
 var $44=HEAP32[(($11)>>2)];
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==($5|0);
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($45)>>2)]=$35;
 label=13;break;
 case 12: 
 var $50=(($44+4)|0);
 HEAP32[(($50)>>2)]=$35;
 label=13;break;
 case 13: 
 HEAP32[(($36)>>2)]=$5;
 HEAP32[(($11)>>2)]=$35;
 var $_pre=HEAP32[(($43)>>2)];
 var $53=$35;var $52=$_pre;label=14;break;
 case 14: 
 var $52;
 var $53;
 var $54=(($53+12)|0);
 HEAP8[($54)]=1;
 var $55=(($52+12)|0);
 HEAP8[($55)]=0;
 var $56=(($52)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+4)|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP32[(($56)>>2)]=$59;
 var $60=($59|0)==0;
 if($60){label=16;break;}else{label=15;break;}
 case 15: 
 var $62=(($59+8)|0);
 HEAP32[(($62)>>2)]=$52;
 label=16;break;
 case 16: 
 var $64=(($52+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($57+8)|0);
 HEAP32[(($66)>>2)]=$65;
 var $67=HEAP32[(($64)>>2)];
 var $68=(($67)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==($52|0);
 if($70){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($68)>>2)]=$57;
 label=19;break;
 case 18: 
 var $73=(($67+4)|0);
 HEAP32[(($73)>>2)]=$57;
 label=19;break;
 case 19: 
 HEAP32[(($58)>>2)]=$52;
 HEAP32[(($64)>>2)]=$57;
 label=37;break;
 case 20: 
 var $75=($14|0)==0;
 if($75){label=24;break;}else{label=21;break;}
 case 21: 
 var $77=(($14+12)|0);
 var $78=HEAP8[($77)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP8[($6)]=1;
 var $82=($12|0)==($__root|0);
 var $83=(($12+12)|0);
 var $84=($82&1);
 HEAP8[($83)]=$84;
 HEAP8[($77)]=1;
 label=23;break;
 case 23: 
 var $85=($12|0)==($__root|0);
 if($85){label=37;break;}else{var $_060=$12;label=2;break;}
 case 24: 
 var $87=(($5)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($_060|0)==($88|0);
 if($89){label=25;break;}else{var $107=$5;var $106=$12;label=31;break;}
 case 25: 
 var $91=(($_060+4)|0);
 var $92=HEAP32[(($91)>>2)];
 HEAP32[(($87)>>2)]=$92;
 var $93=($92|0)==0;
 if($93){var $97=$12;label=27;break;}else{label=26;break;}
 case 26: 
 var $95=(($92+8)|0);
 HEAP32[(($95)>>2)]=$5;
 var $_pre68=HEAP32[(($11)>>2)];
 var $97=$_pre68;label=27;break;
 case 27: 
 var $97;
 HEAP32[(($4)>>2)]=$97;
 var $98=HEAP32[(($11)>>2)];
 var $99=(($98)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==($5|0);
 if($101){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($99)>>2)]=$_060;
 label=30;break;
 case 29: 
 var $104=(($98+4)|0);
 HEAP32[(($104)>>2)]=$_060;
 label=30;break;
 case 30: 
 HEAP32[(($91)>>2)]=$5;
 HEAP32[(($11)>>2)]=$_060;
 var $_pre69=HEAP32[(($4)>>2)];
 var $107=$_060;var $106=$_pre69;label=31;break;
 case 31: 
 var $106;
 var $107;
 var $108=(($107+12)|0);
 HEAP8[($108)]=1;
 var $109=(($106+12)|0);
 HEAP8[($109)]=0;
 var $110=(($106+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111)|0);
 var $113=HEAP32[(($112)>>2)];
 HEAP32[(($110)>>2)]=$113;
 var $114=($113|0)==0;
 if($114){label=33;break;}else{label=32;break;}
 case 32: 
 var $116=(($113+8)|0);
 HEAP32[(($116)>>2)]=$106;
 label=33;break;
 case 33: 
 var $118=(($106+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($111+8)|0);
 HEAP32[(($120)>>2)]=$119;
 var $121=HEAP32[(($118)>>2)];
 var $122=(($121)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($123|0)==($106|0);
 if($124){label=34;break;}else{label=35;break;}
 case 34: 
 HEAP32[(($122)>>2)]=$111;
 label=36;break;
 case 35: 
 var $127=(($121+4)|0);
 HEAP32[(($127)>>2)]=$111;
 label=36;break;
 case 36: 
 HEAP32[(($112)>>2)]=$106;
 HEAP32[(($118)>>2)]=$111;
 label=37;break;
 case 37: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI11SlicerLayerNS_9allocatorIS1_EEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(48))&-1);
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $24=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$10;
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0; HEAP32[((($13)+(12))>>2)]=0; HEAP32[((($13)+(16))>>2)]=0;
 var $14=(($10)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=(($10+4)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($10+8)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($10+16)|0);
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=(($10+20)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=$17;
 var $21=(($10+12)|0);
 HEAP32[(($21)>>2)]=$20;
 var $22=(($10+24)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0; HEAP32[((($23)+(12))>>2)]=0; HEAP32[((($23)+(16))>>2)]=0; HEAP32[((($23)+(20))>>2)]=0;
 var $_pre8_i=HEAP32[(($3)>>2)];
 var $24=$_pre8_i;label=4;break;
 case 4: 
 var $24;
 var $25=(($24+48)|0);
 HEAP32[(($3)>>2)]=$25;
 var $26=((($_0_i)-(1))|0);
 var $27=($26|0)==0;
 if($27){label=32;break;}else{var $_0_i=$26;var $10=$25;label=2;break;}
 case 5: 
 var $29=(($this)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$30;
 var $32=((($6)-($31))|0);
 var $33=(((($32|0))/(48))&-1);
 var $34=((($33)+($__n))|0);
 var $35=($34>>>0)>89478485;
 if($35){label=6;break;}else{var $40=$2;var $39=$30;label=7;break;}
 case 6: 
 var $37=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($37);
 var $_pre=HEAP32[(($1)>>2)];
 var $_pre62=HEAP32[(($29)>>2)];
 var $40=$_pre;var $39=$_pre62;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $41=$40;
 var $42=$39;
 var $43=((($41)-($42))|0);
 var $44=(((($43|0))/(48))&-1);
 var $45=($44>>>0)>44739241;
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=HEAP32[(($3)>>2)];
 var $47=$46;
 var $48=((($47)-($42))|0);
 var $49=(((($48|0))/(48))&-1);
 var $_064=89478485;var $58=$49;label=10;break;
 case 9: 
 var $50=$44<<1;
 var $51=($50>>>0)<($34>>>0);
 var $_sroa_speculated=$51?$34:$50;
 var $52=HEAP32[(($3)>>2)];
 var $53=$52;
 var $54=((($53)-($42))|0);
 var $55=(((($54|0))/(48))&-1);
 var $56=($_sroa_speculated|0)==0;
 if($56){var $63=0;var $_065=0;var $62=$55;label=11;break;}else{var $_064=$_sroa_speculated;var $58=$55;label=10;break;}
 case 10: 
 var $58;
 var $_064;
 var $59=((($_064)*(48))&-1);
 var $60=__Znwj($59);
 var $61=$60;
 var $63=$61;var $_065=$_064;var $62=$58;label=11;break;
 case 11: 
 var $62;
 var $_065;
 var $63;
 var $64=(($63+((($62)*(48))&-1))|0);
 var $_0_i39=$__n;var $66=$64;label=12;break;
 case 12: 
 var $66;
 var $_0_i39;
 var $67=($66|0)==0;
 if($67){var $80=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $69=$66;
 HEAP32[(($69)>>2)]=0; HEAP32[((($69)+(4))>>2)]=0; HEAP32[((($69)+(8))>>2)]=0; HEAP32[((($69)+(12))>>2)]=0; HEAP32[((($69)+(16))>>2)]=0;
 var $70=(($66)|0);
 HEAP32[(($70)>>2)]=0;
 var $71=(($66+4)|0);
 HEAP32[(($71)>>2)]=0;
 var $72=(($66+8)|0);
 HEAP32[(($72)>>2)]=0;
 var $73=(($66+16)|0);
 var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 var $75=(($66+20)|0);
 HEAP32[(($75)>>2)]=0;
 var $76=$73;
 var $77=(($66+12)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($66+24)|0);
 var $79=$78;
 HEAP32[(($79)>>2)]=0; HEAP32[((($79)+(4))>>2)]=0; HEAP32[((($79)+(8))>>2)]=0; HEAP32[((($79)+(12))>>2)]=0; HEAP32[((($79)+(16))>>2)]=0; HEAP32[((($79)+(20))>>2)]=0;
 var $80=$66;label=14;break;
 case 14: 
 var $80;
 var $81=(($80+48)|0);
 var $82=((($_0_i39)-(1))|0);
 var $83=($82|0)==0;
 if($83){label=15;break;}else{var $_0_i39=$82;var $66=$81;label=12;break;}
 case 15: 
 var $84=(($63+((($_065)*(48))&-1))|0);
 var $85=HEAP32[(($29)>>2)];
 var $86=HEAP32[(($3)>>2)];
 var $87=($86|0)==($85|0);
 if($87){var $96=$85;var $95=$64;var $94=$85;label=20;break;}else{var $_049_i=$86;var $__v_sroa_1_4_load5055=$64;label=16;break;}
 case 16: 
 var $__v_sroa_1_4_load5055;
 var $_049_i;
 var $88=((($__v_sroa_1_4_load5055)-(48))|0);
 var $89=((($_049_i)-(48))|0);
 var $90=($88|0)==0;
 if($90){label=18;break;}else{label=17;break;}
 case 17: 
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayerC2ERKS_($88,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=26;break; }
 case 18: 
 var $92=($89|0)==($85|0);
 if($92){label=19;break;}else{var $_049_i=$89;var $__v_sroa_1_4_load5055=$88;label=16;break;}
 case 19: 
 var $_pre_i42=HEAP32[(($29)>>2)];
 var $_pre63=HEAP32[(($3)>>2)];
 var $96=$_pre_i42;var $95=$88;var $94=$_pre63;label=20;break;
 case 20: 
 var $94;
 var $95;
 var $96;
 HEAP32[(($29)>>2)]=$95;
 HEAP32[(($3)>>2)]=$81;
 HEAP32[(($1)>>2)]=$84;
 var $__v_sroa_2_8_load5457=$94;label=21;break;
 case 21: 
 var $__v_sroa_2_8_load5457;
 var $97=($96|0)==($__v_sroa_2_8_load5457|0);
 if($97){label=24;break;}else{label=22;break;}
 case 22: 
 var $99=((($__v_sroa_2_8_load5457)-(48))|0);
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayerD2Ev($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load5457=$99;label=21;break; } else { label=23;break; }
 case 23: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 var $102=$101$0;
 ___cxa_call_unexpected($102);
 throw "Reached an unreachable!";
 case 24: 
 var $103=($96|0)==0;
 if($103){label=32;break;}else{label=25;break;}
 case 25: 
 var $105=$96;
 __ZdlPv($105);
 label=32;break;
 case 26: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 var $__v_sroa_2_8_load5456=$81;label=27;break;
 case 27: 
 var $__v_sroa_2_8_load5456;
 var $108=($__v_sroa_1_4_load5055|0)==($__v_sroa_2_8_load5456|0);
 if($108){label=30;break;}else{label=28;break;}
 case 28: 
 var $110=((($__v_sroa_2_8_load5456)-(48))|0);
 (function() { try { __THREW__ = 0; return __ZN11SlicerLayerD2Ev($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load5456=$110;label=27;break; } else { label=29;break; }
 case 29: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $113=$112$0;
 ___cxa_call_unexpected($113);
 throw "Reached an unreachable!";
 case 30: 
 var $114=($63|0)==0;
 if($114){label=33;break;}else{label=31;break;}
 case 31: 
 var $116=$63;
 __ZdlPv($116);
 label=33;break;
 case 32: 
 return;
 case 33: 
 ___resumeException($107$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11SlicerLayerC2ERKS_($this,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__parent_i=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(($this)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($this+8)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($0+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($0)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=14;break;}else{label=2;break;}
 case 2: 
 var $13=$10;
 var $14=$8;
 var $15=((($14)-($13))|0);
 var $16=(((($15|0))/(40))&-1);
 var $17=($16>>>0)>107374182;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $19=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $20=(function() { try { __THREW__ = 0; return __Znwj($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $22=$20;
 HEAP32[(($5)>>2)]=$22;
 HEAP32[(($4)>>2)]=$22;
 var $23=(($22+((($16)*(40))&-1))|0);
 HEAP32[(($6)>>2)]=$23;
 var $24=HEAP32[(($9)>>2)];
 var $25=HEAP32[(($7)>>2)];
 var $26=($24|0)==($25|0);
 if($26){label=14;break;}else{var $_011_i_i_i=$24;var $27=$22;label=6;break;}
 case 6: 
 var $27;
 var $_011_i_i_i;
 var $28=($27|0)==0;
 if($28){var $32=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $30=$27;
 var $31=$_011_i_i_i;
 assert(40 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];HEAP32[((($30)+(16))>>2)]=HEAP32[((($31)+(16))>>2)];HEAP32[((($30)+(20))>>2)]=HEAP32[((($31)+(20))>>2)];HEAP32[((($30)+(24))>>2)]=HEAP32[((($31)+(24))>>2)];HEAP32[((($30)+(28))>>2)]=HEAP32[((($31)+(28))>>2)];HEAP32[((($30)+(32))>>2)]=HEAP32[((($31)+(32))>>2)];HEAP32[((($30)+(36))>>2)]=HEAP32[((($31)+(36))>>2)];
 var $_pre12_i_i_i=HEAP32[(($5)>>2)];
 var $32=$_pre12_i_i_i;label=8;break;
 case 8: 
 var $32;
 var $33=(($32+40)|0);
 HEAP32[(($5)>>2)]=$33;
 var $34=(($_011_i_i_i+40)|0);
 var $35=($34|0)==($25|0);
 if($35){label=14;break;}else{var $_011_i_i_i=$34;var $27=$33;label=6;break;}
 case 9: 
 var $37$0 = ___cxa_find_matching_catch(-1, -1); var $37$1 = tempRet0;
 var $38=HEAP32[(($4)>>2)];
 var $39=$38;
 var $40=($38|0)==0;
 if($40){label=13;break;}else{label=10;break;}
 case 10: 
 var $41=HEAP32[(($5)>>2)];
 var $42=($38|0)==($41|0);
 if($42){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i_i_i=((($41)-(40))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $43=(((-$39))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$43)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $44=(((($uglygep29_i_i_i>>>0))/(40))&-1);
 var $45=$44^-1;
 var $scevgep30_i_i_i=(($41+((($45)*(40))&-1))|0);
 HEAP32[(($5)>>2)]=$scevgep30_i_i_i;
 label=12;break;
 case 12: 
 var $46=$38;
 __ZdlPv($46);
 label=13;break;
 case 13: 
 ___resumeException($37$0)
 case 14: 
 var $47=(($this+12)|0);
 var $48=(($47)|0);
 var $49=(($47)|0);
 var $50=(($this+16)|0);
 var $51=(($50)|0);
 HEAP32[(($51)>>2)]=0;
 var $52=(($this+20)|0);
 HEAP32[(($52)>>2)]=0;
 var $53=$50;
 HEAP32[(($49)>>2)]=$53;
 var $54=(($0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($0+16)|0);
 var $57=$56;
 var $58=($55|0)==($57|0);
 if($58){label=28;break;}else{label=15;break;}
 case 15: 
 var $59=(($3)|0);
 var $60=(($3+4)|0);
 var $61=$__parent_i;
 var $62=$2;
 var $63=(($2)|0);
 var $64=(($this+16)|0);
 var $_sroa_086_0112=$55;label=16;break;
 case 16: 
 var $_sroa_086_0112;
 var $65=(($_sroa_086_0112+16)|0);
 var $66=HEAP32[(($65)>>2)];
 HEAP32[(($59)>>2)]=$66;
 var $67=(($_sroa_086_0112+20)|0);
 var $68=HEAP32[(($67)>>2)];
 HEAP32[(($60)>>2)]=$68;
 HEAP32[(($63)>>2)]=$53;
 var $69=__ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SH_EEiEESK_RKT_($48,$2,$__parent_i,$3);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=17;break;}else{label=23;break;}
 case 17: 
 var $72=(function() { try { __THREW__ = 0; return __Znwj(24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=31;break; }
 case 18: 
 var $73=(($72+16)|0);
 var $74=($73|0)==0;
 if($74){label=20;break;}else{label=19;break;}
 case 19: 
 var $76=$73;
 var $77=HEAP32[(($59)>>2)];
 HEAP32[(($76)>>2)]=$77;
 var $78=(($72+20)|0);
 var $79=$78;
 var $80=HEAP32[(($60)>>2)];
 HEAP32[(($79)>>2)]=$80;
 label=20;break;
 case 20: 
 var $81=HEAP32[(($__parent_i)>>2)];
 var $82=$72;
 var $83=$72;
 HEAP32[(($83)>>2)]=0;
 var $84=(($72+4)|0);
 var $85=$84;
 HEAP32[(($85)>>2)]=0;
 var $86=(($72+8)|0);
 var $87=$86;
 HEAP32[(($87)>>2)]=$81;
 HEAP32[(($69)>>2)]=$82;
 var $88=HEAP32[(($49)>>2)];
 var $89=(($88)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)==0;
 if($91){var $94=$82;label=22;break;}else{label=21;break;}
 case 21: 
 var $93=$90;
 HEAP32[(($49)>>2)]=$93;
 var $_pre_i_i=HEAP32[(($69)>>2)];
 var $94=$_pre_i_i;label=22;break;
 case 22: 
 var $94;
 var $95=HEAP32[(($64)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($95,$94);
 var $96=HEAP32[(($52)>>2)];
 var $97=((($96)+(1))|0);
 HEAP32[(($52)>>2)]=$97;
 label=23;break;
 case 23: 
 var $98=(($_sroa_086_0112+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=24;break;}else{var $_018_i=$99;label=25;break;}
 case 24: 
 var $101=(($_sroa_086_0112)|0);
 var $_0_i=$101;label=26;break;
 case 25: 
 var $_018_i;
 var $102=(($_018_i)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){var $_017_i=$_018_i;label=27;break;}else{var $_018_i=$103;label=25;break;}
 case 26: 
 var $_0_i;
 var $105=(($_0_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($_0_i|0)==($108|0);
 if($109){var $_017_i=$106;label=27;break;}else{var $_0_i=$106;label=26;break;}
 case 27: 
 var $_017_i;
 var $110=$_017_i;
 var $111=$56;
 var $112=($_017_i|0)==($111|0);
 if($112){label=28;break;}else{var $_sroa_086_0112=$110;label=16;break;}
 case 28: 
 var $113=(($this+24)|0);
 var $114=(($0+24)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($113,$114) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $115=(($this+36)|0);
 var $116=(($0+36)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($115,$116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 30: 
 STACKTOP=sp;return;
 case 31: 
 var $117$0 = ___cxa_find_matching_catch(-1, -1); var $117$1 = tempRet0;
 var $118=HEAP32[(($64)>>2)];
 var $119=$118;
 __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($48,$119);
 var $120=$117$0;
 var $121=$117$1;
 var $_1=$121;var $_183=$120;label=43;break;
 case 32: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1); var $123$1 = tempRet0;
 var $124=$123$0;
 var $125=$123$1;
 var $_0=$125;var $_082=$124;label=42;break;
 case 33: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $130=(($113)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($131|0)==0;
 if($132){var $_0=$129;var $_082=$128;label=42;break;}else{label=34;break;}
 case 34: 
 var $133=(($this+28)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($131|0)==($134|0);
 if($135){var $151=$131;label=41;break;}else{var $136=$134;label=35;break;}
 case 35: 
 var $136;
 var $137=((($136)-(12))|0);
 HEAP32[(($133)>>2)]=$137;
 var $138=(($137)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=$139;
 var $141=($139|0)==0;
 if($141){var $142=$137;label=36;break;}else{label=37;break;}
 case 36: 
 var $142;
 var $143=($131|0)==($142|0);
 if($143){label=40;break;}else{var $136=$142;label=35;break;}
 case 37: 
 var $144=((($136)-(12)+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($139|0)==($145|0);
 if($146){label=39;break;}else{label=38;break;}
 case 38: 
 var $scevgep_i_i_i_i_i_i=((($145)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $147=(((-$140))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$147)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $148=$uglygep29_i_i_i_i_i_i>>>4;
 var $149=$148^-1;
 var $scevgep30_i_i_i_i_i_i=(($145+($149<<4))|0);
 HEAP32[(($144)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=39;break;
 case 39: 
 var $150=$139;
 __ZdlPv($150);
 var $_pre29_i_i_i=HEAP32[(($133)>>2)];
 var $142=$_pre29_i_i_i;label=36;break;
 case 40: 
 var $_pre_i_i_i=HEAP32[(($130)>>2)];
 var $151=$_pre_i_i_i;label=41;break;
 case 41: 
 var $151;
 var $152=$151;
 __ZdlPv($152);
 var $_0=$129;var $_082=$128;label=42;break;
 case 42: 
 var $_082;
 var $_0;
 var $153=(($this+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$154;
 __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($48,$155);
 var $_1=$_0;var $_183=$_082;label=43;break;
 case 43: 
 var $_183;
 var $_1;
 var $157=HEAP32[(($4)>>2)];
 var $158=$157;
 var $159=($157|0)==0;
 if($159){label=47;break;}else{label=44;break;}
 case 44: 
 var $160=HEAP32[(($5)>>2)];
 var $161=($157|0)==($160|0);
 if($161){label=46;break;}else{label=45;break;}
 case 45: 
 var $scevgep_i_i_i102=((($160)-(40))|0);
 var $scevgep28_i_i_i103=$scevgep_i_i_i102;
 var $162=(((-$158))|0);
 var $uglygep_i_i_i104=(($scevgep28_i_i_i103+$162)|0);
 var $uglygep29_i_i_i105=$uglygep_i_i_i104;
 var $163=(((($uglygep29_i_i_i105>>>0))/(40))&-1);
 var $164=$163^-1;
 var $scevgep30_i_i_i106=(($160+((($164)*(40))&-1))|0);
 HEAP32[(($5)>>2)]=$scevgep30_i_i_i106;
 label=46;break;
 case 46: 
 var $165=$157;
 __ZdlPv($165);
 label=47;break;
 case 47: 
 var $166$0=$_183;
 var $166$1=0;
 var $167$0=$166$0;
 var $167$1=$_1;
 ___resumeException($167$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_3mapIiiNS_4lessIiEENS_9allocatorINS_4pairIKiiEEEEE12__value_typeENS_19__map_value_compareIiSA_S3_Lb1EEENS4_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SH_EEiEESK_RKT_($this,$__hint,$__parent,$__v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__hint; $__hint=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__hint)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=$1;
 var $3=(($__hint)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==($2|0);
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__v)|0);
 var $8=(($4+16)|0);
 var $9=HEAP32[(($7)>>2)];
 var $10=HEAP32[(($8)>>2)];
 var $11=($9|0)<($10|0);
 if($11){label=3;break;}else{label=21;break;}
 case 3: 
 var $13=(($this)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($4|0)==($14|0);
 var $_phi_trans_insert=(($4)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($15){var $__prior_sroa_0_0=$4;label=9;break;}else{label=4;break;}
 case 4: 
 var $17=($_pre|0)==0;
 if($17){label=5;break;}else{var $_018_i=$_pre;label=6;break;}
 case 5: 
 var $18=(($4)|0);
 var $_0_i=$18;label=7;break;
 case 6: 
 var $_018_i;
 var $19=(($_018_i+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){var $_017_i=$_018_i;label=8;break;}else{var $_018_i=$20;label=6;break;}
 case 7: 
 var $_0_i;
 var $22=(($_0_i+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($_0_i|0)==($25|0);
 if($26){var $_0_i=$23;label=7;break;}else{var $_017_i=$23;label=8;break;}
 case 8: 
 var $_017_i;
 var $27=$_017_i;
 var $28=(($_017_i+16)|0);
 var $29=$28;
 var $30=(($__v)|0);
 var $31=HEAP32[(($29)>>2)];
 var $32=HEAP32[(($30)>>2)];
 var $33=($31|0)<($32|0);
 if($33){var $__prior_sroa_0_0=$27;label=9;break;}else{label=12;break;}
 case 9: 
 var $__prior_sroa_0_0;
 var $34=($_pre|0)==0;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 var $36=(($4)|0);
 var $37=(($4)|0);
 HEAP32[(($__parent)>>2)]=$37;
 var $_0128=$36;label=41;break;
 case 11: 
 var $39=(($__prior_sroa_0_0)|0);
 HEAP32[(($__parent)>>2)]=$39;
 var $40=(($__prior_sroa_0_0+4)|0);
 var $_0128=$40;label=41;break;
 case 12: 
 var $42=(($1)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=20;break;}else{var $__nd_0_in_i151=$43;label=13;break;}
 case 13: 
 var $__nd_0_in_i151;
 var $45=(($__nd_0_in_i151+16)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=($32|0)<($47|0);
 if($48){label=14;break;}else{label=16;break;}
 case 14: 
 var $50=(($__nd_0_in_i151)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=15;break;}else{var $__nd_0_in_i151=$51;label=13;break;}
 case 15: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i151;
 var $_0128=$50;label=41;break;
 case 16: 
 var $55=($47|0)<($32|0);
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 var $57=(($__nd_0_in_i151+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==0;
 if($59){label=18;break;}else{var $__nd_0_in_i151=$58;label=13;break;}
 case 18: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i151;
 var $_0128=$57;label=41;break;
 case 19: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i151;
 var $_0128=$__parent;label=41;break;
 case 20: 
 var $63=$1;
 HEAP32[(($__parent)>>2)]=$63;
 var $_0128=$42;label=41;break;
 case 21: 
 var $65=($10|0)<($9|0);
 if($65){label=22;break;}else{label=40;break;}
 case 22: 
 var $66=(($4+4)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==0;
 if($68){label=23;break;}else{var $_018_i145=$67;label=24;break;}
 case 23: 
 var $69=(($4)|0);
 var $_0_i147=$69;label=25;break;
 case 24: 
 var $_018_i145;
 var $70=(($_018_i145)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)==0;
 if($72){var $_017_i149=$_018_i145;label=26;break;}else{var $_018_i145=$71;label=24;break;}
 case 25: 
 var $_0_i147;
 var $73=(($_0_i147+8)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($_0_i147|0)==($76|0);
 if($77){var $_017_i149=$74;label=26;break;}else{var $_0_i147=$74;label=25;break;}
 case 26: 
 var $_017_i149;
 var $78=$1;
 var $79=($_017_i149|0)==($78|0);
 if($79){label=28;break;}else{label=27;break;}
 case 27: 
 var $81=(($_017_i149+16)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=($9|0)<($83|0);
 if($84){label=28;break;}else{label=31;break;}
 case 28: 
 if($68){label=29;break;}else{label=30;break;}
 case 29: 
 var $87=(($4)|0);
 HEAP32[(($__parent)>>2)]=$87;
 var $_0128=$66;label=41;break;
 case 30: 
 HEAP32[(($__parent)>>2)]=$_017_i149;
 var $89=(($_017_i149)|0);
 var $_0128=$89;label=41;break;
 case 31: 
 var $91=(($1)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=39;break;}else{var $__nd_0_in_i=$92;label=32;break;}
 case 32: 
 var $__nd_0_in_i;
 var $94=(($__nd_0_in_i+16)|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=($9|0)<($96|0);
 if($97){label=33;break;}else{label=35;break;}
 case 33: 
 var $99=(($__nd_0_in_i)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){label=34;break;}else{var $__nd_0_in_i=$100;label=32;break;}
 case 34: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0128=$99;label=41;break;
 case 35: 
 var $104=($96|0)<($9|0);
 if($104){label=36;break;}else{label=38;break;}
 case 36: 
 var $106=(($__nd_0_in_i+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=37;break;}else{var $__nd_0_in_i=$107;label=32;break;}
 case 37: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0128=$106;label=41;break;
 case 38: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0128=$__parent;label=41;break;
 case 39: 
 HEAP32[(($__parent)>>2)]=$78;
 var $_0128=$91;label=41;break;
 case 40: 
 var $113=(($4)|0);
 HEAP32[(($__parent)>>2)]=$113;
 var $_0128=$__parent;label=41;break;
 case 41: 
 var $_0128;
 STACKTOP=sp;return $_0128;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14OptimizedModelC2EP11SimpleModel6Point3($this,$model,$center){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $center; $center=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($center)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($center)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($center)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $v_i89=sp;
 var $v_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(64);
 var $3=(sp)+(80);
 var $4=(($this)|0);
 var $5=(($this)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($this+4)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($this+24)|0);
 var $9=(($this+36)|0);
 var $10=(($model+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($model)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($11|0)==($13|0);
 if($14){var $107=$11;label=38;break;}else{label=2;break;}
 case 2: 
 var $15=(($1+16)|0);
 var $16=(($1+4)|0);
 var $17=(($1+8)|0);
 var $18=(($1+20)|0);
 var $i_0113=0;var $20=$13;label=3;break;
 case 3: 
 var $20;
 var $i_0113;
 var $21=(($20+((($i_0113)*(12))&-1))|0);
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeC2EP12SimpleVolumeP14OptimizedModel($1,$21,$this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=24;break; }
 case 4: 
 var $22=HEAP32[(($6)>>2)];
 var $23=HEAP32[(($7)>>2)];
 var $24=($22|0)==($23|0);
 if($24){label=9;break;}else{label=5;break;}
 case 5: 
 var $26=($22|0)==0;
 if($26){var $28=0;label=8;break;}else{label=6;break;}
 case 6: 
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeC2ERKS_($22,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=25;break; }
 case 7: 
 var $_pre123=HEAP32[(($6)>>2)];
 var $28=$_pre123;label=8;break;
 case 8: 
 var $28;
 var $29=(($28+28)|0);
 HEAP32[(($6)>>2)]=$29;
 label=10;break;
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI15OptimizedVolumeNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($4,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=25;break; }
 case 10: 
 var $31=HEAP32[(($15)>>2)];
 var $32=$31;
 var $33=($31|0)==0;
 if($33){label=14;break;}else{label=11;break;}
 case 11: 
 var $34=HEAP32[(($18)>>2)];
 var $35=($31|0)==($34|0);
 if($35){label=13;break;}else{label=12;break;}
 case 12: 
 var $scevgep_i_i_i_i_i=((($34)-(24))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $36=(((-$32))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$36)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $37=(((($uglygep29_i_i_i_i_i>>>0))/(24))&-1);
 var $38=$37^-1;
 var $scevgep30_i_i_i_i_i=(($34+((($38)*(24))&-1))|0);
 HEAP32[(($18)>>2)]=$scevgep30_i_i_i_i_i;
 label=13;break;
 case 13: 
 var $39=$31;
 __ZdlPv($39);
 label=14;break;
 case 14: 
 var $40=HEAP32[(($16)>>2)];
 var $41=($40|0)==0;
 if($41){label=23;break;}else{label=15;break;}
 case 15: 
 var $42=HEAP32[(($17)>>2)];
 var $43=($40|0)==($42|0);
 if($43){var $59=$40;label=22;break;}else{var $44=$42;label=16;break;}
 case 16: 
 var $44;
 var $45=((($44)-(24))|0);
 HEAP32[(($17)>>2)]=$45;
 var $46=((($44)-(24)+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=($47|0)==0;
 if($49){var $50=$45;label=17;break;}else{label=18;break;}
 case 17: 
 var $50;
 var $51=($40|0)==($50|0);
 if($51){label=21;break;}else{var $44=$50;label=16;break;}
 case 18: 
 var $52=((($44)-(24)+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($47|0)==($53|0);
 if($54){label=20;break;}else{label=19;break;}
 case 19: 
 var $scevgep_i_i_i_i_i_i_i_i_i=((($53)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i_i;
 var $55=(((-$48))|0);
 var $uglygep_i_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i_i+$55)|0);
 var $uglygep29_i_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i_i;
 var $56=$uglygep29_i_i_i_i_i_i_i_i_i>>>2;
 var $57=$56^-1;
 var $scevgep30_i_i_i_i_i_i_i_i_i=(($53+($57<<2))|0);
 HEAP32[(($52)>>2)]=$scevgep30_i_i_i_i_i_i_i_i_i;
 label=20;break;
 case 20: 
 var $58=$47;
 __ZdlPv($58);
 var $_pre29_i_i_i_i=HEAP32[(($17)>>2)];
 var $50=$_pre29_i_i_i_i;label=17;break;
 case 21: 
 var $_pre_i_i_i_i=HEAP32[(($16)>>2)];
 var $59=$_pre_i_i_i_i;label=22;break;
 case 22: 
 var $59;
 var $60=$59;
 __ZdlPv($60);
 label=23;break;
 case 23: 
 var $61=((($i_0113)+(1))|0);
 var $62=HEAP32[(($10)>>2)];
 var $63=HEAP32[(($12)>>2)];
 var $64=$62;
 var $65=$63;
 var $66=((($64)-($65))|0);
 var $67=(((($66|0))/(12))&-1);
 var $68=($61>>>0)<($67>>>0);
 if($68){var $i_0113=$61;var $20=$63;label=3;break;}else{var $107=$63;label=38;break;}
 case 24: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 var $71=$70$0;
 var $72=$70$1;
 var $_0=$72;var $_060=$71;label=63;break;
 case 25: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $75=$74$0;
 var $76=$74$1;
 var $77=HEAP32[(($15)>>2)];
 var $78=$77;
 var $79=($77|0)==0;
 if($79){label=29;break;}else{label=26;break;}
 case 26: 
 var $80=HEAP32[(($18)>>2)];
 var $81=($77|0)==($80|0);
 if($81){label=28;break;}else{label=27;break;}
 case 27: 
 var $scevgep_i_i_i_i_i65=((($80)-(24))|0);
 var $scevgep28_i_i_i_i_i66=$scevgep_i_i_i_i_i65;
 var $82=(((-$78))|0);
 var $uglygep_i_i_i_i_i67=(($scevgep28_i_i_i_i_i66+$82)|0);
 var $uglygep29_i_i_i_i_i68=$uglygep_i_i_i_i_i67;
 var $83=(((($uglygep29_i_i_i_i_i68>>>0))/(24))&-1);
 var $84=$83^-1;
 var $scevgep30_i_i_i_i_i69=(($80+((($84)*(24))&-1))|0);
 HEAP32[(($18)>>2)]=$scevgep30_i_i_i_i_i69;
 label=28;break;
 case 28: 
 var $85=$77;
 __ZdlPv($85);
 label=29;break;
 case 29: 
 var $86=HEAP32[(($16)>>2)];
 var $87=($86|0)==0;
 if($87){var $_0=$76;var $_060=$75;label=63;break;}else{label=30;break;}
 case 30: 
 var $88=HEAP32[(($17)>>2)];
 var $89=($86|0)==($88|0);
 if($89){var $105=$86;label=37;break;}else{var $90=$88;label=31;break;}
 case 31: 
 var $90;
 var $91=((($90)-(24))|0);
 HEAP32[(($17)>>2)]=$91;
 var $92=((($90)-(24)+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$93;
 var $95=($93|0)==0;
 if($95){var $96=$91;label=32;break;}else{label=33;break;}
 case 32: 
 var $96;
 var $97=($86|0)==($96|0);
 if($97){label=36;break;}else{var $90=$96;label=31;break;}
 case 33: 
 var $98=((($90)-(24)+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($93|0)==($99|0);
 if($100){label=35;break;}else{label=34;break;}
 case 34: 
 var $scevgep_i_i_i_i_i_i_i_i_i77=((($99)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i_i_i78=$scevgep_i_i_i_i_i_i_i_i_i77;
 var $101=(((-$94))|0);
 var $uglygep_i_i_i_i_i_i_i_i_i79=(($scevgep28_i_i_i_i_i_i_i_i_i78+$101)|0);
 var $uglygep29_i_i_i_i_i_i_i_i_i80=$uglygep_i_i_i_i_i_i_i_i_i79;
 var $102=$uglygep29_i_i_i_i_i_i_i_i_i80>>>2;
 var $103=$102^-1;
 var $scevgep30_i_i_i_i_i_i_i_i_i81=(($99+($103<<2))|0);
 HEAP32[(($98)>>2)]=$scevgep30_i_i_i_i_i_i_i_i_i81;
 label=35;break;
 case 35: 
 var $104=$93;
 __ZdlPv($104);
 var $_pre29_i_i_i_i83=HEAP32[(($17)>>2)];
 var $96=$_pre29_i_i_i_i83;label=32;break;
 case 36: 
 var $_pre_i_i_i_i85=HEAP32[(($16)>>2)];
 var $105=$_pre_i_i_i_i85;label=37;break;
 case 37: 
 var $105;
 var $106=$105;
 __ZdlPv($106);
 var $_0=$76;var $_060=$75;label=63;break;
 case 38: 
 var $107;
 var $108=$v_i;
 __ZN12SimpleVolume3minEv($2,$107);
 var $109=HEAP32[(($10)>>2)];
 var $110=HEAP32[(($12)>>2)];
 var $111=($109|0)==($110|0);
 if($111){label=47;break;}else{label=39;break;}
 case 39: 
 var $112=(($v_i)|0);
 var $113=(($2)|0);
 var $114=(($v_i+4)|0);
 var $115=(($2+4)|0);
 var $116=(($v_i+8)|0);
 var $117=(($2+8)|0);
 var $i_08_i=0;var $119=$110;label=40;break;
 case 40: 
 var $119;
 var $i_08_i;
 var $120=(($119+((($i_08_i)*(12))&-1))|0);
 __ZN12SimpleVolume3minEv($v_i,$120);
 var $121=HEAP32[(($112)>>2)];
 var $122=HEAP32[(($113)>>2)];
 var $123=($121|0)<($122|0);
 if($123){label=41;break;}else{label=42;break;}
 case 41: 
 HEAP32[(($113)>>2)]=$121;
 label=42;break;
 case 42: 
 var $126=HEAP32[(($114)>>2)];
 var $127=HEAP32[(($115)>>2)];
 var $128=($126|0)<($127|0);
 if($128){label=43;break;}else{label=44;break;}
 case 43: 
 HEAP32[(($115)>>2)]=$126;
 label=44;break;
 case 44: 
 var $131=HEAP32[(($116)>>2)];
 var $132=HEAP32[(($117)>>2)];
 var $133=($131|0)<($132|0);
 if($133){label=45;break;}else{label=46;break;}
 case 45: 
 HEAP32[(($117)>>2)]=$131;
 label=46;break;
 case 46: 
 var $136=((($i_08_i)+(1))|0);
 var $137=HEAP32[(($10)>>2)];
 var $138=HEAP32[(($12)>>2)];
 var $139=$137;
 var $140=$138;
 var $141=((($139)-($140))|0);
 var $142=(((($141|0))/(12))&-1);
 var $143=($136>>>0)<($142>>>0);
 if($143){var $i_08_i=$136;var $119=$138;label=40;break;}else{label=47;break;}
 case 47: 
 var $144=$8;
 var $145=$2;
 assert(12 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];HEAP32[((($144)+(8))>>2)]=HEAP32[((($145)+(8))>>2)];
 var $146=$v_i89;
 var $147=HEAP32[(($12)>>2)];
 __ZN12SimpleVolume3maxEv($3,$147);
 var $148=HEAP32[(($10)>>2)];
 var $149=HEAP32[(($12)>>2)];
 var $150=($148|0)==($149|0);
 if($150){label=56;break;}else{label=48;break;}
 case 48: 
 var $151=(($v_i89)|0);
 var $152=(($3)|0);
 var $153=(($v_i89+4)|0);
 var $154=(($3+4)|0);
 var $155=(($v_i89+8)|0);
 var $156=(($3+8)|0);
 var $i_08_i91=0;var $158=$149;label=49;break;
 case 49: 
 var $158;
 var $i_08_i91;
 var $159=(($158+((($i_08_i91)*(12))&-1))|0);
 __ZN12SimpleVolume3maxEv($v_i89,$159);
 var $160=HEAP32[(($151)>>2)];
 var $161=HEAP32[(($152)>>2)];
 var $162=($160|0)>($161|0);
 if($162){label=50;break;}else{label=51;break;}
 case 50: 
 HEAP32[(($152)>>2)]=$160;
 label=51;break;
 case 51: 
 var $165=HEAP32[(($153)>>2)];
 var $166=HEAP32[(($154)>>2)];
 var $167=($165|0)>($166|0);
 if($167){label=52;break;}else{label=53;break;}
 case 52: 
 HEAP32[(($154)>>2)]=$165;
 label=53;break;
 case 53: 
 var $170=HEAP32[(($155)>>2)];
 var $171=HEAP32[(($156)>>2)];
 var $172=($170|0)>($171|0);
 if($172){label=54;break;}else{label=55;break;}
 case 54: 
 HEAP32[(($156)>>2)]=$170;
 label=55;break;
 case 55: 
 var $175=((($i_08_i91)+(1))|0);
 var $176=HEAP32[(($10)>>2)];
 var $177=HEAP32[(($12)>>2)];
 var $178=$176;
 var $179=$177;
 var $180=((($178)-($179))|0);
 var $181=(((($180|0))/(12))&-1);
 var $182=($175>>>0)<($181>>>0);
 if($182){var $i_08_i91=$175;var $158=$177;label=49;break;}else{label=56;break;}
 case 56: 
 var $183=$9;
 var $184=$3;
 assert(12 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];HEAP32[((($183)+(8))>>2)]=HEAP32[((($184)+(8))>>2)];
 var $185=(($8)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($9)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=((($188)+($186))|0);
 var $190=(((($189|0))/(2))&-1);
 var $191=(($this+28)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($this+40)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=((($194)+($192))|0);
 var $196=(((($195|0))/(2))&-1);
 var $197=(($this+32)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($center)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=((($190)-($200))|0);
 var $202=(($center+4)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=((($196)-($203))|0);
 var $205=(($center+8)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=((($198)-($206))|0);
 var $208=HEAP32[(($6)>>2)];
 var $209=HEAP32[(($5)>>2)];
 var $210=($208|0)==($209|0);
 if($210){var $253=$188;var $252=$186;var $251=$194;var $250=$192;var $249=$198;label=62;break;}else{var $i1_0104=0;var $212=$209;var $211=$208;label=57;break;}
 case 57: 
 var $211;
 var $212;
 var $i1_0104;
 var $213=(($212+((($i1_0104)*(28))&-1)+8)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(($212+((($i1_0104)*(28))&-1)+4)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($214|0)==($216|0);
 if($217){var $241=$211;var $240=$212;label=60;break;}else{var $n_0103=0;var $218=$216;label=58;break;}
 case 58: 
 var $218;
 var $n_0103;
 var $219=(($218+((($n_0103)*(24))&-1))|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=((($220)-($201))|0);
 HEAP32[(($219)>>2)]=$221;
 var $222=(($218+((($n_0103)*(24))&-1)+4)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=((($223)-($204))|0);
 HEAP32[(($222)>>2)]=$224;
 var $225=(($218+((($n_0103)*(24))&-1)+8)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=((($226)-($207))|0);
 HEAP32[(($225)>>2)]=$227;
 var $228=((($n_0103)+(1))|0);
 var $229=HEAP32[(($5)>>2)];
 var $230=(($229+((($i1_0104)*(28))&-1)+8)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($229+((($i1_0104)*(28))&-1)+4)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=$231;
 var $235=$233;
 var $236=((($234)-($235))|0);
 var $237=(((($236|0))/(24))&-1);
 var $238=($228>>>0)<($237>>>0);
 if($238){var $n_0103=$228;var $218=$233;label=58;break;}else{label=59;break;}
 case 59: 
 var $_pre122=HEAP32[(($6)>>2)];
 var $241=$_pre122;var $240=$229;label=60;break;
 case 60: 
 var $240;
 var $241;
 var $242=((($i1_0104)+(1))|0);
 var $243=$241;
 var $244=$240;
 var $245=((($243)-($244))|0);
 var $246=(((($245|0))/(28))&-1);
 var $247=($242>>>0)<($246>>>0);
 if($247){var $i1_0104=$242;var $212=$240;var $211=$241;label=57;break;}else{label=61;break;}
 case 61: 
 var $_pre=HEAP32[(($187)>>2)];
 var $_pre118=HEAP32[(($185)>>2)];
 var $_pre119=HEAP32[(($193)>>2)];
 var $_pre120=HEAP32[(($191)>>2)];
 var $_pre121=HEAP32[(($197)>>2)];
 var $253=$_pre;var $252=$_pre118;var $251=$_pre119;var $250=$_pre120;var $249=$_pre121;label=62;break;
 case 62: 
 var $249;
 var $250;
 var $251;
 var $252;
 var $253;
 var $254=((($253)-($252))|0);
 var $255=((($251)-($250))|0);
 var $256=(($this+44)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=((($257)-($249))|0);
 var $_sroa_0_0__idx=(($this+12)|0);
 HEAP32[(($_sroa_0_0__idx)>>2)]=$254;
 var $_sroa_1_4__idx92=(($this+16)|0);
 HEAP32[(($_sroa_1_4__idx92)>>2)]=$255;
 var $_sroa_2_8__idx93=(($this+20)|0);
 HEAP32[(($_sroa_2_8__idx93)>>2)]=$258;
 var $259=((($252)-($201))|0);
 HEAP32[(($185)>>2)]=$259;
 var $260=((($250)-($204))|0);
 HEAP32[(($191)>>2)]=$260;
 var $261=((($249)-($207))|0);
 HEAP32[(($197)>>2)]=$261;
 var $262=((($253)-($201))|0);
 HEAP32[(($187)>>2)]=$262;
 var $263=((($251)-($204))|0);
 HEAP32[(($193)>>2)]=$263;
 var $264=((($257)-($207))|0);
 HEAP32[(($256)>>2)]=$264;
 STACKTOP=sp;return;
 case 63: 
 var $_060;
 var $_0;
 var $265=HEAP32[(($5)>>2)];
 var $266=($265|0)==0;
 if($266){label=68;break;}else{label=64;break;}
 case 64: 
 var $267=HEAP32[(($6)>>2)];
 var $268=($265|0)==($267|0);
 if($268){label=67;break;}else{label=65;break;}
 case 65: 
 var $270=((($267)-(28))|0);
 HEAP32[(($6)>>2)]=$270;
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeD1Ev($270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=66;break; }
 case 66: 
 var $272$0 = ___cxa_find_matching_catch(-1, -1); var $272$1 = tempRet0;
 var $273=$272$0;
 ___cxa_call_unexpected($273);
 throw "Reached an unreachable!";
 case 67: 
 var $274=HEAP32[(($5)>>2)];
 var $275=$274;
 __ZdlPv($275);
 label=68;break;
 case 68: 
 var $276$0=$_060;
 var $276$1=0;
 var $277$0=$276$0;
 var $277$1=$_0;
 ___resumeException($277$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12SimpleVolume3maxEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$agg_result;
 var $4=$2;
 assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 var $5=(($this+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($2|0);
 if($7){label=22;break;}else{label=2;break;}
 case 2: 
 var $8=(($agg_result)|0);
 var $9=(($agg_result+4)|0);
 var $10=(($agg_result+8)|0);
 var $11=$6;
 var $12=$2;
 var $13=((($11)-($12))|0);
 var $14=(((($13|0))/(36))&-1);
 var $_pre=HEAP32[(($8)>>2)];
 var $i_059=0;var $16=$_pre;label=3;break;
 case 3: 
 var $16;
 var $i_059;
 var $17=(($2+((($i_059)*(36))&-1))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)>($16|0);
 if($19){label=4;break;}else{var $21=$16;label=5;break;}
 case 4: 
 HEAP32[(($8)>>2)]=$18;
 var $21=$18;label=5;break;
 case 5: 
 var $21;
 var $22=(($2+((($i_059)*(36))&-1)+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($9)>>2)];
 var $25=($23|0)>($24|0);
 if($25){label=6;break;}else{var $27=$24;label=7;break;}
 case 6: 
 HEAP32[(($9)>>2)]=$23;
 var $27=$23;label=7;break;
 case 7: 
 var $27;
 var $28=(($2+((($i_059)*(36))&-1)+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=HEAP32[(($10)>>2)];
 var $31=($29|0)>($30|0);
 if($31){label=8;break;}else{var $34=$30;label=9;break;}
 case 8: 
 HEAP32[(($10)>>2)]=$29;
 var $34=$29;label=9;break;
 case 9: 
 var $34;
 var $35=(($2+((($i_059)*(36))&-1)+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)>($21|0);
 if($37){label=10;break;}else{var $40=$21;label=11;break;}
 case 10: 
 HEAP32[(($8)>>2)]=$36;
 var $40=$36;label=11;break;
 case 11: 
 var $40;
 var $41=(($2+((($i_059)*(36))&-1)+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)>($27|0);
 if($43){label=12;break;}else{var $46=$27;label=13;break;}
 case 12: 
 HEAP32[(($9)>>2)]=$42;
 var $46=$42;label=13;break;
 case 13: 
 var $46;
 var $47=(($2+((($i_059)*(36))&-1)+20)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)>($34|0);
 if($49){label=14;break;}else{var $52=$34;label=15;break;}
 case 14: 
 HEAP32[(($10)>>2)]=$48;
 var $52=$48;label=15;break;
 case 15: 
 var $52;
 var $53=(($2+((($i_059)*(36))&-1)+24)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)>($40|0);
 if($55){label=16;break;}else{var $58=$40;label=17;break;}
 case 16: 
 HEAP32[(($8)>>2)]=$54;
 var $58=$54;label=17;break;
 case 17: 
 var $58;
 var $59=(($2+((($i_059)*(36))&-1)+28)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)>($46|0);
 if($61){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($9)>>2)]=$60;
 label=19;break;
 case 19: 
 var $64=(($2+((($i_059)*(36))&-1)+32)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)>($52|0);
 if($66){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP32[(($10)>>2)]=$65;
 label=21;break;
 case 21: 
 var $69=((($i_059)+(1))|0);
 var $70=($69>>>0)<($14>>>0);
 if($70){var $i_059=$69;var $16=$58;label=3;break;}else{label=22;break;}
 case 22: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12SimpleVolume3minEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$agg_result;
 var $4=$2;
 assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 var $5=(($this+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($2|0);
 if($7){label=22;break;}else{label=2;break;}
 case 2: 
 var $8=(($agg_result)|0);
 var $9=(($agg_result+4)|0);
 var $10=(($agg_result+8)|0);
 var $11=$6;
 var $12=$2;
 var $13=((($11)-($12))|0);
 var $14=(((($13|0))/(36))&-1);
 var $_pre=HEAP32[(($8)>>2)];
 var $i_059=0;var $16=$_pre;label=3;break;
 case 3: 
 var $16;
 var $i_059;
 var $17=(($2+((($i_059)*(36))&-1))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)<($16|0);
 if($19){label=4;break;}else{var $21=$16;label=5;break;}
 case 4: 
 HEAP32[(($8)>>2)]=$18;
 var $21=$18;label=5;break;
 case 5: 
 var $21;
 var $22=(($2+((($i_059)*(36))&-1)+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($9)>>2)];
 var $25=($23|0)<($24|0);
 if($25){label=6;break;}else{var $27=$24;label=7;break;}
 case 6: 
 HEAP32[(($9)>>2)]=$23;
 var $27=$23;label=7;break;
 case 7: 
 var $27;
 var $28=(($2+((($i_059)*(36))&-1)+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=HEAP32[(($10)>>2)];
 var $31=($29|0)<($30|0);
 if($31){label=8;break;}else{var $34=$30;label=9;break;}
 case 8: 
 HEAP32[(($10)>>2)]=$29;
 var $34=$29;label=9;break;
 case 9: 
 var $34;
 var $35=(($2+((($i_059)*(36))&-1)+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)<($21|0);
 if($37){label=10;break;}else{var $40=$21;label=11;break;}
 case 10: 
 HEAP32[(($8)>>2)]=$36;
 var $40=$36;label=11;break;
 case 11: 
 var $40;
 var $41=(($2+((($i_059)*(36))&-1)+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)<($27|0);
 if($43){label=12;break;}else{var $46=$27;label=13;break;}
 case 12: 
 HEAP32[(($9)>>2)]=$42;
 var $46=$42;label=13;break;
 case 13: 
 var $46;
 var $47=(($2+((($i_059)*(36))&-1)+20)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)<($34|0);
 if($49){label=14;break;}else{var $52=$34;label=15;break;}
 case 14: 
 HEAP32[(($10)>>2)]=$48;
 var $52=$48;label=15;break;
 case 15: 
 var $52;
 var $53=(($2+((($i_059)*(36))&-1)+24)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)<($40|0);
 if($55){label=16;break;}else{var $58=$40;label=17;break;}
 case 16: 
 HEAP32[(($8)>>2)]=$54;
 var $58=$54;label=17;break;
 case 17: 
 var $58;
 var $59=(($2+((($i_059)*(36))&-1)+28)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)<($46|0);
 if($61){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($9)>>2)]=$60;
 label=19;break;
 case 19: 
 var $64=(($2+((($i_059)*(36))&-1)+32)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)<($52|0);
 if($66){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP32[(($10)>>2)]=$65;
 label=21;break;
 case 21: 
 var $69=((($i_059)+(1))|0);
 var $70=($69>>>0)<($14>>>0);
 if($70){var $i_059=$69;var $16=$58;label=3;break;}else{label=22;break;}
 case 22: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15OptimizedVolumeC2EP12SimpleVolumeP14OptimizedModel($this,$volume,$model){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tv_i241=sp;
 var $tv_i=(sp)+(8);
 var $indexMap=(sp)+(16);
 var $f=(sp)+(32);
 var $1=(sp)+(56);
 var $2=(sp)+(64);
 var $3=(sp)+(72);
 var $4=(sp)+(80);
 var $5=(sp)+(88);
 var $6=(sp)+(96);
 var $7=(sp)+(120);
 var $8=(sp)+(128);
 var $9=(sp)+(136);
 var $10=(($this)|0);
 HEAP32[(($10)>>2)]=$model;
 var $11=(($this+4)|0);
 var $12=(($11)|0);
 var $13=(($this+8)|0);
 var $14=(($this+12)|0);
 var $15=(($this+16)|0);
 var $16=(($15)|0);
 var $17=(($this+20)|0);
 var $18=(($this+24)|0);
 var $19=(($volume+4)|0);
 var $20=$11;
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0; HEAP32[((($20)+(12))>>2)]=0; HEAP32[((($20)+(16))>>2)]=0; HEAP32[((($20)+(20))>>2)]=0;
 var $21=HEAP32[(($19)>>2)];
 var $22=(($volume)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$21;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=(((($26|0))/(36))&-1);
 var $28=((($27)*(3))&-1);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI15OptimizedPoint3NS_9allocatorIS1_EEE7reserveEj($11,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=17;break; }
 case 2: 
 var $30=HEAP32[(($19)>>2)];
 var $31=HEAP32[(($22)>>2)];
 var $32=$30;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=(((($34|0))/(36))&-1);
 var $36=HEAP32[(($18)>>2)];
 var $37=HEAP32[(($16)>>2)];
 var $38=$36;
 var $39=$37;
 var $40=((($38)-($39))|0);
 var $41=(((($40|0))/(24))&-1);
 var $42=($41>>>0)<($35>>>0);
 if($42){label=3;break;}else{label=8;break;}
 case 3: 
 var $44=HEAP32[(($17)>>2)];
 var $45=$44;
 var $46=((($45)-($39))|0);
 var $47=(((($46|0))/(24))&-1);
 var $48=($30|0)==($31|0);
 if($48){var $53=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $50=((($35)*(24))&-1);
 var $51=(function() { try { __THREW__ = 0; return __Znwj($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=17;break; }
 case 5: 
 var $52=$51;
 var $53=$52;label=6;break;
 case 6: 
 var $53;
 var $54=(($53+((($47)*(24))&-1))|0);
 var $55=(($53+((($35)*(24))&-1))|0);
 var $56=(((($46|0))/(-24))&-1);
 var $_sum_i=((($56)+($47))|0);
 var $57=(($53+((($_sum_i)*(24))&-1))|0);
 var $58=$57;
 var $59=$37;
 assert($46 % 1 === 0);(_memcpy($58, $59, $46)|0);
 HEAP32[(($16)>>2)]=$57;
 HEAP32[(($17)>>2)]=$54;
 HEAP32[(($18)>>2)]=$55;
 var $60=($37|0)==0;
 if($60){label=8;break;}else{label=7;break;}
 case 7: 
 __ZdlPv($59);
 label=8;break;
 case 8: 
 var $62=(($indexMap)|0);
 var $63=(($indexMap+4)|0);
 var $64=(($63)|0);
 HEAP32[(($64)>>2)]=0;
 var $65=(($indexMap+8)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=$63;
 var $67=(($indexMap)|0);
 HEAP32[(($67)>>2)]=$66;
 var $68=$tv_i;
 var $69=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=21;break; }
 case 9: 
 var $70=(($tv_i)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0);
 var $73=(($tv_i+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($74|0);
 var $76=($75)/(1000000);
 var $77=($72)+($76);
 var $78=HEAP32[(($19)>>2)];
 var $79=HEAP32[(($22)>>2)];
 var $80=($78|0)==($79|0);
 if($80){label=11;break;}else{label=10;break;}
 case 10: 
 var $81=$tv_i241;
 var $82=(($tv_i241)|0);
 var $83=(($tv_i241+4)|0);
 var $84=HEAP32[((_stdout)>>2)];
 var $_sroa_0290_0__idx=(($6)|0);
 var $_sroa_1291_4__idx292=(($6+4)|0);
 var $_sroa_2293_8__idx294=(($6+8)|0);
 var $85=(($6+12)|0);
 var $86=(($6+16)|0);
 var $87=(($6+20)|0);
 var $88=$6;
 var $89=(($f)|0);
 var $90=(($f+4)|0);
 var $91=(($f+8)|0);
 var $92=$f;
 var $i_0351=0;label=13;break;
 case 11: 
 var $93=HEAP32[(($17)>>2)];
 var $94=HEAP32[(($16)>>2)];
 var $95=($93|0)==($94|0);
 if($95){label=110;break;}else{label=12;break;}
 case 12: 
 var $96=(($this+4)|0);
 var $i1_0310=0;var $372=$94;label=88;break;
 case 13: 
 var $i_0351;
 var $98=(((($i_0351>>>0))%(1000))&-1);
 var $99=($98|0)==0;
 if($99){label=14;break;}else{var $j_0323=0;label=23;break;}
 case 14: 
 var $101=(function() { try { __THREW__ = 0; return _gettimeofday($tv_i241,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $103=HEAP32[(($82)>>2)];
 var $104=($103|0);
 var $105=HEAP32[(($83)>>2)];
 var $106=($105|0);
 var $107=($106)/(1000000);
 var $108=($104)+($107);
 var $109=($108)-($77);
 var $110=$109<=2;
 var $111=HEAP32[((14448)>>2)];
 var $112=($111|0)<2;
 var $or_cond300=$110|$112;
 if($or_cond300){var $j_0323=0;label=23;break;}else{label=16;break;}
 case 16: 
 var $114=HEAP32[(($22)>>2)];
 var $115=HEAP32[(($19)>>2)];
 var $116=$114;
 var $117=$115;
 var $118=((($117)-($116))|0);
 var $119=(((($118|0))/(36))&-1);
 var $120=((($i_0351)+(1))|0);
 var $121=_fprintf($84,6080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=304,HEAP32[(((tempVarArgs)+(8))>>2)]=$120,HEAP32[(((tempVarArgs)+(16))>>2)]=$119,tempVarArgs)); STACKTOP=tempVarArgs;
 var $122=_fflush($84);
 var $j_0323=0;label=23;break;
 case 17: 
 var $124$0 = ___cxa_find_matching_catch(-1, -1); var $124$1 = tempRet0;
 var $125=$124$0;
 var $126=$124$1;
 var $_1=$125;var $_1225=$126;label=112;break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=22;break;
 case 19: 
 var $lpad_loopexit314$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit314$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit314$1;var $lpad_phi$0=$lpad_loopexit314$0;label=22;break;
 case 20: 
 var $lpad_loopexit349$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit349$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit349$1;var $lpad_phi$0=$lpad_loopexit349$0;label=22;break;
 case 21: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=22;break;
 case 22: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $127=$lpad_phi$0;
 var $128=$lpad_phi$1;
 var $_0=$127;var $_0224=$128;label=111;break;
 case 23: 
 var $j_0323;
 var $129=HEAP32[(($22)>>2)];
 var $p_sroa_0_0__idx275=(($129+((($i_0351)*(36))&-1)+((($j_0323)*(12))&-1))|0);
 var $p_sroa_0_0_copyload276=HEAP32[(($p_sroa_0_0__idx275)>>2)];
 var $p_sroa_1_4__idx279=(($129+((($i_0351)*(36))&-1)+((($j_0323)*(12))&-1)+4)|0);
 var $p_sroa_1_4_copyload280=HEAP32[(($p_sroa_1_4__idx279)>>2)];
 var $p_sroa_2_8__idx283=(($129+((($i_0351)*(36))&-1)+((($j_0323)*(12))&-1)+8)|0);
 var $p_sroa_2_8_copyload284=HEAP32[(($p_sroa_2_8__idx283)>>2)];
 var $130=((($p_sroa_0_0_copyload276)+(15))|0);
 var $131=(((($130|0))/(30))&-1);
 var $132=((($p_sroa_1_4_copyload280)+(15))|0);
 var $133=(((($132|0))/(30))&-1);
 var $134=$133<<10;
 var $135=$134^$131;
 var $136=((($p_sroa_2_8_copyload284)+(15))|0);
 var $137=(((($136|0))/(30))&-1);
 var $138=$137<<20;
 var $139=$135^$138;
 var $n_0=0;label=24;break;
 case 24: 
 var $n_0;
 HEAP32[(($1)>>2)]=$139;
 var $141=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS2_INS_4pairIKjS4_EEEEEixERS8_($indexMap,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $143=(($141+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($141)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$144;
 var $148=$146;
 var $149=((($147)-($148))|0);
 var $150=$149>>2;
 var $151=($n_0>>>0)<($150>>>0);
 if($151){label=26;break;}else{label=34;break;}
 case 26: 
 HEAP32[(($2)>>2)]=$139;
 var $153=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS2_INS_4pairIKjS4_EEEEEixERS8_($indexMap,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $155=(($153)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+($n_0<<2))|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=HEAP32[(($12)>>2)];
 var $160=(($159+((($158)*(24))&-1))|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=((($161)-($p_sroa_0_0_copyload276))|0);
 var $163=(($159+((($158)*(24))&-1)+4)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=((($164)-($p_sroa_1_4_copyload280))|0);
 var $166=(($159+((($158)*(24))&-1)+8)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=((($167)-($p_sroa_2_8_copyload284))|0);
 var $_off=((($162)+(30))|0);
 var $169=($_off>>>0)>60;
 if($169){label=32;break;}else{label=28;break;}
 case 28: 
 var $_off296=((($165)+(30))|0);
 var $171=($_off296>>>0)>60;
 if($171){label=32;break;}else{label=29;break;}
 case 29: 
 var $_off297=((($168)+(30))|0);
 var $173=($_off297>>>0)>60;
 if($173){label=32;break;}else{label=30;break;}
 case 30: 
 var $174$0=$162;
 var $174$1=(((($162|0)<0))|0)?-1:0;
 var $175$0=___muldi3($174$0,$174$1,$174$0,$174$1);var $175$1=tempRet0;
 var $176$0=$165;
 var $176$1=(((($165|0)<0))|0)?-1:0;
 var $177$0=___muldi3($176$0,$176$1,$176$0,$176$1);var $177$1=tempRet0;
 var $178$0=_i64Add($177$0,$177$1,$175$0,$175$1);var $178$1=tempRet0;
 var $179$0=$168;
 var $179$1=(((($168|0)<0))|0)?-1:0;
 var $180$0=___muldi3($179$0,$179$1,$179$0,$179$1);var $180$1=tempRet0;
 var $181$0=_i64Add($178$0,$178$1,$180$0,$180$1);var $181$1=tempRet0;
 var $$etemp$0$0=901;
 var $$etemp$0$1=0;
 var $182=(($181$1|0) < ($$etemp$0$1|0)) | (((($181$1|0) == ($$etemp$0$1|0) & ($181$0>>>0) <  ($$etemp$0$0>>>0))));
 if($182){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($3)>>2)]=$139;
 var $184=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS2_INS_4pairIKjS4_EEEEEixERS8_($indexMap,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=19;break; }
 case 32: 
 var $185=((($n_0)+(1))|0);
 var $n_0=$185;label=24;break;
 case 33: 
 var $187=(($184)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+($n_0<<2))|0);
 var $190=HEAP32[(($189)>>2)];
 var $idx_3=$190;label=53;break;
 case 34: 
 HEAP32[(($4)>>2)]=$139;
 var $192=(function() { try { __THREW__ = 0; return __ZNSt3__13mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS2_INS_4pairIKjS4_EEEEEixERS8_($indexMap,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=19;break; }
 case 35: 
 var $194=HEAP32[(($13)>>2)];
 var $195=HEAP32[(($12)>>2)];
 var $196=$194;
 var $197=$195;
 var $198=((($196)-($197))|0);
 var $199=(((($198|0))/(24))&-1);
 HEAP32[(($5)>>2)]=$199;
 var $200=(($192+4)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($192+8)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($201|0)==($203|0);
 if($204){label=39;break;}else{label=36;break;}
 case 36: 
 var $206=($201|0)==0;
 if($206){var $208=0;label=38;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($201)>>2)]=$199;
 var $_pre368=HEAP32[(($200)>>2)];
 var $208=$_pre368;label=38;break;
 case 38: 
 var $208;
 var $209=(($208+4)|0);
 HEAP32[(($200)>>2)]=$209;
 label=40;break;
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($192,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=19;break; }
 case 40: 
 var $212=HEAP32[(($13)>>2)];
 var $213=HEAP32[(($12)>>2)];
 var $214=$212;
 var $215=$213;
 var $216=((($214)-($215))|0);
 var $217=(((($216|0))/(24))&-1);
 HEAP32[(($_sroa_0290_0__idx)>>2)]=$p_sroa_0_0_copyload276;
 HEAP32[(($_sroa_1291_4__idx292)>>2)]=$p_sroa_1_4_copyload280;
 HEAP32[(($_sroa_2293_8__idx294)>>2)]=$p_sroa_2_8_copyload284;
 HEAP32[(($85)>>2)]=0;
 HEAP32[(($86)>>2)]=0;
 HEAP32[(($87)>>2)]=0;
 var $218=HEAP32[(($14)>>2)];
 var $219=($212|0)==($218|0);
 if($219){label=44;break;}else{label=41;break;}
 case 41: 
 var $221=($212|0)==0;
 if($221){label=43;break;}else{label=42;break;}
 case 42: 
 var $222=$212;
 assert(12 % 1 === 0);HEAP32[(($222)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($222)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];HEAP32[((($222)+(8))>>2)]=HEAP32[((($88)+(8))>>2)];
 var $223=(($212+12)|0);
 HEAP32[(($223)>>2)]=0;
 var $224=(($212+16)|0);
 HEAP32[(($224)>>2)]=0;
 var $225=(($212+20)|0);
 HEAP32[(($225)>>2)]=0;
 label=43;break;
 case 43: 
 var $226=HEAP32[(($13)>>2)];
 var $227=(($226+24)|0);
 HEAP32[(($13)>>2)]=$227;
 var $idx_3=$217;label=53;break;
 case 44: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI15OptimizedPoint3NS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($11,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=49;break; }
 case 45: 
 var $_pre376=HEAP32[(($85)>>2)];
 var $229=$_pre376;
 var $230=($_pre376|0)==0;
 if($230){var $idx_3=$217;label=53;break;}else{label=46;break;}
 case 46: 
 var $231=HEAP32[(($86)>>2)];
 var $232=($_pre376|0)==($231|0);
 if($232){label=48;break;}else{label=47;break;}
 case 47: 
 var $scevgep_i_i_i_i_i=((($231)-(4))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $233=(((-$229))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$233)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $234=$uglygep29_i_i_i_i_i>>>2;
 var $235=$234^-1;
 var $scevgep30_i_i_i_i_i=(($231+($235<<2))|0);
 HEAP32[(($86)>>2)]=$scevgep30_i_i_i_i_i;
 label=48;break;
 case 48: 
 var $236=$_pre376;
 __ZdlPv($236);
 var $idx_3=$217;label=53;break;
 case 49: 
 var $237$0 = ___cxa_find_matching_catch(-1, -1); var $237$1 = tempRet0;
 var $_pre367=HEAP32[(($85)>>2)];
 var $238=$237$0;
 var $239=$237$1;
 var $240=$_pre367;
 var $241=($_pre367|0)==0;
 if($241){var $_0=$238;var $_0224=$239;label=111;break;}else{label=50;break;}
 case 50: 
 var $242=HEAP32[(($86)>>2)];
 var $243=($_pre367|0)==($242|0);
 if($243){label=52;break;}else{label=51;break;}
 case 51: 
 var $scevgep_i_i_i_i_i247=((($242)-(4))|0);
 var $scevgep28_i_i_i_i_i248=$scevgep_i_i_i_i_i247;
 var $244=(((-$240))|0);
 var $uglygep_i_i_i_i_i249=(($scevgep28_i_i_i_i_i248+$244)|0);
 var $uglygep29_i_i_i_i_i250=$uglygep_i_i_i_i_i249;
 var $245=$uglygep29_i_i_i_i_i250>>>2;
 var $246=$245^-1;
 var $scevgep30_i_i_i_i_i251=(($242+($246<<2))|0);
 HEAP32[(($86)>>2)]=$scevgep30_i_i_i_i_i251;
 label=52;break;
 case 52: 
 var $247=$_pre367;
 __ZdlPv($247);
 var $_0=$238;var $_0224=$239;label=111;break;
 case 53: 
 var $idx_3;
 var $248=(($f+($j_0323<<2))|0);
 HEAP32[(($248)>>2)]=$idx_3;
 var $249=((($j_0323)+(1))|0);
 var $250=($249>>>0)<3;
 if($250){var $j_0323=$249;label=23;break;}else{label=54;break;}
 case 54: 
 var $252=HEAP32[(($89)>>2)];
 var $253=HEAP32[(($90)>>2)];
 var $254=($252|0)==($253|0);
 if($254){label=87;break;}else{label=55;break;}
 case 55: 
 var $256=HEAP32[(($91)>>2)];
 var $257=($252|0)==($256|0);
 var $258=($253|0)==($256|0);
 var $or_cond=$257|$258;
 if($or_cond){label=87;break;}else{label=56;break;}
 case 56: 
 var $259=HEAP32[(($12)>>2)];
 var $260=(($259+((($252)*(24))&-1)+12)|0);
 var $261=(($259+((($252)*(24))&-1)+16)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($260)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=($262|0)==($264|0);
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $266=(($259+((($253)*(24))&-1)+16)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($259+((($253)*(24))&-1)+12)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($267|0)==($269|0);
 var $271=$262;
 var $272=$264;
 var $273=((($271)-($272))|0);
 var $274=$273>>2;
 var $duplicate_0_off0339=0;var $_idx0_0340=0;label=58;break;
 case 58: 
 var $_idx0_0340;
 var $duplicate_0_off0339;
 if($270){var $duplicate_1_off0_lcssa=$duplicate_0_off0339;label=65;break;}else{label=59;break;}
 case 59: 
 var $275=(($259+((($256)*(24))&-1)+16)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($259+((($256)*(24))&-1)+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=($276|0)==($278|0);
 var $280=$267;
 var $281=$269;
 var $282=((($280)-($281))|0);
 var $283=$282>>2;
 if($279){var $duplicate_1_off0_lcssa=$duplicate_0_off0339;label=65;break;}else{var $duplicate_1_off0330_us=$duplicate_0_off0339;var $_idx1_0331_us=0;label=64;break;}
 case 60: 
 var $285=((($_idx1_0331_us)+(1))|0);
 var $286=($285>>>0)<($283>>>0);
 if($286){var $duplicate_1_off0330_us=$duplicate_3_off0_us;var $_idx1_0331_us=$285;label=64;break;}else{var $duplicate_1_off0_lcssa=$duplicate_3_off0_us;label=65;break;}
 case 61: 
 var $_idx2_0326_us;
 var $duplicate_2_off0325_us;
 var $287=($_pre373|0)==($_pre375|0);
 if($287){label=62;break;}else{var $duplicate_3_off0_us=$duplicate_2_off0325_us;label=63;break;}
 case 62: 
 var $289=(($278+($_idx2_0326_us<<2))|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=($_pre373|0)==($290|0);
 var $_duplicate_2_off0_us=$291|$duplicate_2_off0325_us;
 var $duplicate_3_off0_us=$_duplicate_2_off0_us;label=63;break;
 case 63: 
 var $duplicate_3_off0_us;
 var $293=((($_idx2_0326_us)+(1))|0);
 var $294=($293>>>0)<($298>>>0);
 if($294){var $duplicate_2_off0325_us=$duplicate_3_off0_us;var $_idx2_0326_us=$293;label=61;break;}else{label=60;break;}
 case 64: 
 var $_idx1_0331_us;
 var $duplicate_1_off0330_us;
 var $295=$276;
 var $296=$278;
 var $297=((($295)-($296))|0);
 var $298=$297>>2;
 var $_phi_trans_insert372=(($264+($_idx0_0340<<2))|0);
 var $_pre373=HEAP32[(($_phi_trans_insert372)>>2)];
 var $_phi_trans_insert374=(($269+($_idx1_0331_us<<2))|0);
 var $_pre375=HEAP32[(($_phi_trans_insert374)>>2)];
 var $duplicate_2_off0325_us=$duplicate_1_off0330_us;var $_idx2_0326_us=0;label=61;break;
 case 65: 
 var $duplicate_1_off0_lcssa;
 var $299=((($_idx0_0340)+(1))|0);
 var $300=($299>>>0)<($274>>>0);
 if($300){var $duplicate_0_off0339=$duplicate_1_off0_lcssa;var $_idx0_0340=$299;label=58;break;}else{label=66;break;}
 case 66: 
 if($duplicate_1_off0_lcssa){label=87;break;}else{label=67;break;}
 case 67: 
 var $301=HEAP32[(($17)>>2)];
 var $302=HEAP32[(($16)>>2)];
 var $303=$301;
 var $304=$302;
 var $305=((($303)-($304))|0);
 var $306=(((($305|0))/(24))&-1);
 HEAP32[(($7)>>2)]=$306;
 var $307=(($259+((($252)*(24))&-1)+20)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=($262|0)==($308|0);
 if($309){label=71;break;}else{label=68;break;}
 case 68: 
 var $311=($262|0)==0;
 if($311){var $313=0;label=70;break;}else{label=69;break;}
 case 69: 
 HEAP32[(($262)>>2)]=$306;
 var $_pre366=HEAP32[(($261)>>2)];
 var $313=$_pre366;label=70;break;
 case 70: 
 var $313;
 var $314=(($313+4)|0);
 HEAP32[(($261)>>2)]=$314;
 label=72;break;
 case 71: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($260,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=20;break; }
 case 72: 
 var $316=HEAP32[(($12)>>2)];
 var $317=HEAP32[(($17)>>2)];
 var $318=HEAP32[(($16)>>2)];
 var $319=$317;
 var $320=$318;
 var $321=((($319)-($320))|0);
 var $322=(((($321|0))/(24))&-1);
 HEAP32[(($8)>>2)]=$322;
 var $323=(($316+((($253)*(24))&-1)+16)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($316+((($253)*(24))&-1)+20)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=($324|0)==($326|0);
 if($327){label=76;break;}else{label=73;break;}
 case 73: 
 var $329=($324|0)==0;
 if($329){var $331=0;label=75;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($324)>>2)]=$322;
 var $_pre365=HEAP32[(($323)>>2)];
 var $331=$_pre365;label=75;break;
 case 75: 
 var $331;
 var $332=(($331+4)|0);
 HEAP32[(($323)>>2)]=$332;
 label=77;break;
 case 76: 
 var $334=(($316+((($253)*(24))&-1)+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($334,$8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=20;break; }
 case 77: 
 var $335=HEAP32[(($12)>>2)];
 var $336=HEAP32[(($17)>>2)];
 var $337=HEAP32[(($16)>>2)];
 var $338=$336;
 var $339=$337;
 var $340=((($338)-($339))|0);
 var $341=(((($340|0))/(24))&-1);
 HEAP32[(($9)>>2)]=$341;
 var $342=(($335+((($256)*(24))&-1)+16)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($335+((($256)*(24))&-1)+20)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=($343|0)==($345|0);
 if($346){label=81;break;}else{label=78;break;}
 case 78: 
 var $348=($343|0)==0;
 if($348){var $350=0;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP32[(($343)>>2)]=$341;
 var $_pre364=HEAP32[(($342)>>2)];
 var $350=$_pre364;label=80;break;
 case 80: 
 var $350;
 var $351=(($350+4)|0);
 HEAP32[(($342)>>2)]=$351;
 label=82;break;
 case 81: 
 var $353=(($335+((($256)*(24))&-1)+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($353,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=20;break; }
 case 82: 
 var $354=HEAP32[(($17)>>2)];
 var $355=HEAP32[(($18)>>2)];
 var $356=($354|0)==($355|0);
 if($356){label=86;break;}else{label=83;break;}
 case 83: 
 var $358=($354|0)==0;
 if($358){var $361=0;label=85;break;}else{label=84;break;}
 case 84: 
 var $360=$354;
 assert(24 % 1 === 0);HEAP32[(($360)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($360)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($360)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];HEAP32[((($360)+(12))>>2)]=HEAP32[((($92)+(12))>>2)];HEAP32[((($360)+(16))>>2)]=HEAP32[((($92)+(16))>>2)];HEAP32[((($360)+(20))>>2)]=HEAP32[((($92)+(20))>>2)];
 var $_pre=HEAP32[(($17)>>2)];
 var $361=$_pre;label=85;break;
 case 85: 
 var $361;
 var $362=(($361+24)|0);
 HEAP32[(($17)>>2)]=$362;
 label=87;break;
 case 86: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI13OptimizedFaceNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($15,$f) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=20;break; }
 case 87: 
 var $364=((($i_0351)+(1))|0);
 var $365=HEAP32[(($19)>>2)];
 var $366=HEAP32[(($22)>>2)];
 var $367=$365;
 var $368=$366;
 var $369=((($367)-($368))|0);
 var $370=(((($369|0))/(36))&-1);
 var $371=($364>>>0)<($370>>>0);
 if($371){var $i_0351=$364;label=13;break;}else{label=11;break;}
 case 88: 
 var $372;
 var $i1_0310;
 var $373=(($372+((($i1_0310)*(24))&-1))|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($372+((($i1_0310)*(24))&-1)+4)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=HEAP32[(($96)>>2)];
 var $378=(($377+((($374)*(24))&-1)+16)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=(($377+((($374)*(24))&-1)+12)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($379|0)==($381|0);
 if($382){var $_0_i256=-1;label=95;break;}else{label=89;break;}
 case 89: 
 var $383=$379;
 var $384=$381;
 var $385=((($383)-($384))|0);
 var $386=$385>>2;
 var $387=(($377+((($376)*(24))&-1)+16)|0);
 var $388=(($377+((($376)*(24))&-1)+12)|0);
 var $i_031_i=0;label=90;break;
 case 90: 
 var $i_031_i;
 var $389=(($381+($i_031_i<<2))|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=($390|0)==($i1_0310|0);
 if($391){label=94;break;}else{label=91;break;}
 case 91: 
 var $392=HEAP32[(($387)>>2)];
 var $393=HEAP32[(($388)>>2)];
 var $394=$392;
 var $395=$393;
 var $396=((($394)-($395))|0);
 var $397=$396>>2;
 var $j_0_i=0;label=92;break;
 case 92: 
 var $j_0_i;
 var $399=($j_0_i>>>0)<($397>>>0);
 if($399){label=93;break;}else{label=94;break;}
 case 93: 
 var $401=(($393+($j_0_i<<2))|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=($402|0)!=($i1_0310|0);
 var $404=($390|0)==($402|0);
 var $or_cond_i255=$403&$404;
 var $405=((($j_0_i)+(1))|0);
 if($or_cond_i255){var $_0_i256=$390;label=95;break;}else{var $j_0_i=$405;label=92;break;}
 case 94: 
 var $406=((($i_031_i)+(1))|0);
 var $407=($406>>>0)<($386>>>0);
 if($407){var $i_031_i=$406;label=90;break;}else{var $_0_i256=-1;label=95;break;}
 case 95: 
 var $_0_i256;
 var $408=(($372+((($i1_0310)*(24))&-1)+12)|0);
 HEAP32[(($408)>>2)]=$_0_i256;
 var $409=(($372+((($i1_0310)*(24))&-1)+8)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=HEAP32[(($96)>>2)];
 var $412=(($411+((($376)*(24))&-1)+16)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(($411+((($376)*(24))&-1)+12)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=($413|0)==($415|0);
 if($416){var $_0_i263=-1;label=102;break;}else{label=96;break;}
 case 96: 
 var $417=$413;
 var $418=$415;
 var $419=((($417)-($418))|0);
 var $420=$419>>2;
 var $421=(($411+((($410)*(24))&-1)+16)|0);
 var $422=(($411+((($410)*(24))&-1)+12)|0);
 var $i_031_i257=0;label=97;break;
 case 97: 
 var $i_031_i257;
 var $423=(($415+($i_031_i257<<2))|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=($424|0)==($i1_0310|0);
 if($425){label=101;break;}else{label=98;break;}
 case 98: 
 var $426=HEAP32[(($421)>>2)];
 var $427=HEAP32[(($422)>>2)];
 var $428=$426;
 var $429=$427;
 var $430=((($428)-($429))|0);
 var $431=$430>>2;
 var $j_0_i260=0;label=99;break;
 case 99: 
 var $j_0_i260;
 var $433=($j_0_i260>>>0)<($431>>>0);
 if($433){label=100;break;}else{label=101;break;}
 case 100: 
 var $435=(($427+($j_0_i260<<2))|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=($436|0)!=($i1_0310|0);
 var $438=($424|0)==($436|0);
 var $or_cond_i261=$437&$438;
 var $439=((($j_0_i260)+(1))|0);
 if($or_cond_i261){var $_0_i263=$424;label=102;break;}else{var $j_0_i260=$439;label=99;break;}
 case 101: 
 var $440=((($i_031_i257)+(1))|0);
 var $441=($440>>>0)<($420>>>0);
 if($441){var $i_031_i257=$440;label=97;break;}else{var $_0_i263=-1;label=102;break;}
 case 102: 
 var $_0_i263;
 var $442=(($372+((($i1_0310)*(24))&-1)+16)|0);
 HEAP32[(($442)>>2)]=$_0_i263;
 var $443=HEAP32[(($96)>>2)];
 var $444=(($443+((($410)*(24))&-1)+16)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(($443+((($410)*(24))&-1)+12)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=($445|0)==($447|0);
 if($448){var $_0_i271=-1;label=109;break;}else{label=103;break;}
 case 103: 
 var $449=$445;
 var $450=$447;
 var $451=((($449)-($450))|0);
 var $452=$451>>2;
 var $453=(($443+((($374)*(24))&-1)+16)|0);
 var $454=(($443+((($374)*(24))&-1)+12)|0);
 var $i_031_i265=0;label=104;break;
 case 104: 
 var $i_031_i265;
 var $455=(($447+($i_031_i265<<2))|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=($456|0)==($i1_0310|0);
 if($457){label=108;break;}else{label=105;break;}
 case 105: 
 var $458=HEAP32[(($453)>>2)];
 var $459=HEAP32[(($454)>>2)];
 var $460=$458;
 var $461=$459;
 var $462=((($460)-($461))|0);
 var $463=$462>>2;
 var $j_0_i268=0;label=106;break;
 case 106: 
 var $j_0_i268;
 var $465=($j_0_i268>>>0)<($463>>>0);
 if($465){label=107;break;}else{label=108;break;}
 case 107: 
 var $467=(($459+($j_0_i268<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)!=($i1_0310|0);
 var $470=($456|0)==($468|0);
 var $or_cond_i269=$469&$470;
 var $471=((($j_0_i268)+(1))|0);
 if($or_cond_i269){var $_0_i271=$456;label=109;break;}else{var $j_0_i268=$471;label=106;break;}
 case 108: 
 var $472=((($i_031_i265)+(1))|0);
 var $473=($472>>>0)<($452>>>0);
 if($473){var $i_031_i265=$472;label=104;break;}else{var $_0_i271=-1;label=109;break;}
 case 109: 
 var $_0_i271;
 var $474=(($372+((($i1_0310)*(24))&-1)+20)|0);
 HEAP32[(($474)>>2)]=$_0_i271;
 var $475=((($i1_0310)+(1))|0);
 var $476=HEAP32[(($17)>>2)];
 var $477=HEAP32[(($16)>>2)];
 var $478=$476;
 var $479=$477;
 var $480=((($478)-($479))|0);
 var $481=(((($480|0))/(24))&-1);
 var $482=($475>>>0)<($481>>>0);
 if($482){var $i1_0310=$475;var $372=$477;label=88;break;}else{label=110;break;}
 case 110: 
 var $483=(($indexMap+4)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=$484;
 __ZNSt3__16__treeINS_3mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS3_INS_4pairIKjS5_EEEEE12__value_typeENS_19__map_value_compareIjSD_S7_Lb1EEENS3_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($62,$485);
 STACKTOP=sp;return;
 case 111: 
 var $_0224;
 var $_0;
 var $486=(($indexMap+4)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=$487;
 __ZNSt3__16__treeINS_3mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS3_INS_4pairIKjS5_EEEEE12__value_typeENS_19__map_value_compareIjSD_S7_Lb1EEENS3_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($62,$488);
 var $_1=$_0;var $_1225=$_0224;label=112;break;
 case 112: 
 var $_1225;
 var $_1;
 var $490=HEAP32[(($16)>>2)];
 var $491=$490;
 var $492=($490|0)==0;
 if($492){label=116;break;}else{label=113;break;}
 case 113: 
 var $493=HEAP32[(($17)>>2)];
 var $494=($490|0)==($493|0);
 if($494){label=115;break;}else{label=114;break;}
 case 114: 
 var $scevgep_i_i_i=((($493)-(24))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $495=(((-$491))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$495)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $496=(((($uglygep29_i_i_i>>>0))/(24))&-1);
 var $497=$496^-1;
 var $scevgep30_i_i_i=(($493+((($497)*(24))&-1))|0);
 HEAP32[(($17)>>2)]=$scevgep30_i_i_i;
 label=115;break;
 case 115: 
 var $498=$490;
 __ZdlPv($498);
 label=116;break;
 case 116: 
 var $499=HEAP32[(($12)>>2)];
 var $500=($499|0)==0;
 if($500){label=125;break;}else{label=117;break;}
 case 117: 
 var $501=HEAP32[(($13)>>2)];
 var $502=($499|0)==($501|0);
 if($502){var $518=$499;label=124;break;}else{var $503=$501;label=118;break;}
 case 118: 
 var $503;
 var $504=((($503)-(24))|0);
 HEAP32[(($13)>>2)]=$504;
 var $505=((($503)-(24)+12)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=$506;
 var $508=($506|0)==0;
 if($508){var $509=$504;label=119;break;}else{label=120;break;}
 case 119: 
 var $509;
 var $510=($499|0)==($509|0);
 if($510){label=123;break;}else{var $503=$509;label=118;break;}
 case 120: 
 var $511=((($503)-(24)+16)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=($506|0)==($512|0);
 if($513){label=122;break;}else{label=121;break;}
 case 121: 
 var $scevgep_i_i_i_i_i_i_i_i=((($512)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i;
 var $514=(((-$507))|0);
 var $uglygep_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i+$514)|0);
 var $uglygep29_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i;
 var $515=$uglygep29_i_i_i_i_i_i_i_i>>>2;
 var $516=$515^-1;
 var $scevgep30_i_i_i_i_i_i_i_i=(($512+($516<<2))|0);
 HEAP32[(($511)>>2)]=$scevgep30_i_i_i_i_i_i_i_i;
 label=122;break;
 case 122: 
 var $517=$506;
 __ZdlPv($517);
 var $_pre29_i_i_i=HEAP32[(($13)>>2)];
 var $509=$_pre29_i_i_i;label=119;break;
 case 123: 
 var $_pre_i_i_i=HEAP32[(($12)>>2)];
 var $518=$_pre_i_i_i;label=124;break;
 case 124: 
 var $518;
 var $519=$518;
 __ZdlPv($519);
 label=125;break;
 case 125: 
 var $520$0=$_1;
 var $520$1=0;
 var $521$0=$520$0;
 var $521$1=$_1225;
 ___resumeException($521$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI15OptimizedPoint3NS_9allocatorIS1_EEE7reserveEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=2;break;}else{label=25;break;}
 case 2: 
 var $11=(($this+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=((($13)-($6))|0);
 var $15=(((($14|0))/(24))&-1);
 var $16=($__n|0)==0;
 if($16){var $21=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $18=((($__n)*(24))&-1);
 var $19=__Znwj($18);
 var $20=$19;
 var $21=$20;label=4;break;
 case 4: 
 var $21;
 var $22=(($21+((($15)*(24))&-1))|0);
 var $23=(($21+((($__n)*(24))&-1))|0);
 var $24=($12|0)==($4|0);
 if($24){label=5;break;}else{var $_049_i=$12;var $25=$22;label=6;break;}
 case 5: 
 HEAP32[(($3)>>2)]=$22;
 HEAP32[(($11)>>2)]=$22;
 HEAP32[(($1)>>2)]=$23;
 var $51=$4;label=15;break;
 case 6: 
 var $25;
 var $_049_i;
 var $26=((($25)-(24))|0);
 var $27=((($_049_i)-(24))|0);
 var $28=($26|0)==0;
 if($28){label=8;break;}else{label=7;break;}
 case 7: 
 var $30=$26;
 var $31=$27;
 assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
 var $32=((($25)-(24)+12)|0);
 var $33=((($_049_i)-(24)+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEEC2ERKS3_($32,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $34=($27|0)==($4|0);
 if($34){label=9;break;}else{var $_049_i=$27;var $25=$26;label=6;break;}
 case 9: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre=HEAP32[(($11)>>2)];
 HEAP32[(($3)>>2)]=$26;
 HEAP32[(($11)>>2)]=$22;
 HEAP32[(($1)>>2)]=$23;
 var $36=($_pre_i|0)==($_pre|0);
 if($36){var $51=$_pre_i;label=15;break;}else{var $37=$_pre;label=10;break;}
 case 10: 
 var $37;
 var $38=((($37)-(24))|0);
 var $39=((($37)-(24)+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=($40|0)==0;
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 var $43=($_pre_i|0)==($38|0);
 if($43){var $51=$_pre_i;label=15;break;}else{var $37=$38;label=10;break;}
 case 12: 
 var $44=((($37)-(24)+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($40|0)==($45|0);
 if($46){label=14;break;}else{label=13;break;}
 case 13: 
 var $scevgep_i_i_i_i_i_i_i=((($45)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $47=(((-$41))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$47)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $48=$uglygep29_i_i_i_i_i_i_i>>>2;
 var $49=$48^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($45+($49<<2))|0);
 HEAP32[(($44)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=14;break;
 case 14: 
 var $50=$40;
 __ZdlPv($50);
 label=11;break;
 case 15: 
 var $51;
 var $52=($51|0)==0;
 if($52){label=25;break;}else{label=16;break;}
 case 16: 
 var $54=$51;
 __ZdlPv($54);
 label=25;break;
 case 17: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=($25|0)==($22|0);
 if($57){label=23;break;}else{var $58=$22;label=18;break;}
 case 18: 
 var $58;
 var $59=((($58)-(24))|0);
 var $60=((($58)-(24)+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=($61|0)==0;
 if($63){label=19;break;}else{label=20;break;}
 case 19: 
 var $64=($25|0)==($59|0);
 if($64){label=23;break;}else{var $58=$59;label=18;break;}
 case 20: 
 var $65=((($58)-(24)+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($61|0)==($66|0);
 if($67){label=22;break;}else{label=21;break;}
 case 21: 
 var $scevgep_i_i_i_i_i_i_i17=((($66)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i18=$scevgep_i_i_i_i_i_i_i17;
 var $68=(((-$62))|0);
 var $uglygep_i_i_i_i_i_i_i19=(($scevgep28_i_i_i_i_i_i_i18+$68)|0);
 var $uglygep29_i_i_i_i_i_i_i20=$uglygep_i_i_i_i_i_i_i19;
 var $69=$uglygep29_i_i_i_i_i_i_i20>>>2;
 var $70=$69^-1;
 var $scevgep30_i_i_i_i_i_i_i21=(($66+($70<<2))|0);
 HEAP32[(($65)>>2)]=$scevgep30_i_i_i_i_i_i_i21;
 label=22;break;
 case 22: 
 var $71=$61;
 __ZdlPv($71);
 label=19;break;
 case 23: 
 var $72=($21|0)==0;
 if($72){label=26;break;}else{label=24;break;}
 case 24: 
 var $74=$21;
 __ZdlPv($74);
 label=26;break;
 case 25: 
 return;
 case 26: 
 ___resumeException($56$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__13mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS2_INS_4pairIKjS4_EEEEEixERS8_($this,$__k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__parent=sp;
 var $1=(($this+4)|0);
 var $2=(($1)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=10;break;}else{label=2;break;}
 case 2: 
 var $5=HEAP32[(($__k)>>2)];
 var $__nd_0_in_i=$3;label=3;break;
 case 3: 
 var $__nd_0_in_i;
 var $6=(($__nd_0_in_i+16)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=($5>>>0)<($8>>>0);
 if($9){label=4;break;}else{label=6;break;}
 case 4: 
 var $11=(($__nd_0_in_i)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=5;break;}else{var $__nd_0_in_i=$12;label=3;break;}
 case 5: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0_i=$11;var $__parent_0_load=$__nd_0_in_i;label=11;break;
 case 6: 
 var $16=($8>>>0)<($5>>>0);
 if($16){label=7;break;}else{label=9;break;}
 case 7: 
 var $18=(($__nd_0_in_i+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=8;break;}else{var $__nd_0_in_i=$19;label=3;break;}
 case 8: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0_i=$18;var $__parent_0_load=$__nd_0_in_i;label=11;break;
 case 9: 
 HEAP32[(($__parent)>>2)]=$__nd_0_in_i;
 var $_0_i=$__parent;var $__parent_0_load=$__nd_0_in_i;label=11;break;
 case 10: 
 var $24=$1;
 HEAP32[(($__parent)>>2)]=$24;
 var $_0_i=$2;var $__parent_0_load=$24;label=11;break;
 case 11: 
 var $__parent_0_load;
 var $_0_i;
 var $25=HEAP32[(($_0_i)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=12;break;}else{var $__r_0=$26;label=19;break;}
 case 12: 
 var $28=__Znwj(32);
 var $29=$28;
 var $30=(($28+16)|0);
 var $31=($30|0)==0;
 if($31){label=14;break;}else{label=13;break;}
 case 13: 
 var $33=$30;
 var $34=HEAP32[(($__k)>>2)];
 HEAP32[(($33)>>2)]=$34;
 label=14;break;
 case 14: 
 var $35=(($28+20)|0);
 var $36=($35|0)==0;
 if($36){label=16;break;}else{label=15;break;}
 case 15: 
 var $38=$35;
 HEAP32[(($38)>>2)]=0;
 var $39=(($28+24)|0);
 var $40=$39;
 HEAP32[(($40)>>2)]=0;
 var $41=(($28+28)|0);
 var $42=$41;
 HEAP32[(($42)>>2)]=0;
 label=16;break;
 case 16: 
 var $43=$28;
 var $44=$28;
 HEAP32[(($44)>>2)]=0;
 var $45=(($28+4)|0);
 var $46=$45;
 HEAP32[(($46)>>2)]=0;
 var $47=(($28+8)|0);
 var $48=$47;
 HEAP32[(($48)>>2)]=$__parent_0_load;
 HEAP32[(($_0_i)>>2)]=$43;
 var $49=(($this)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){var $56=$43;label=18;break;}else{label=17;break;}
 case 17: 
 var $55=$52;
 HEAP32[(($49)>>2)]=$55;
 var $_pre_i=HEAP32[(($_0_i)>>2)];
 var $56=$_pre_i;label=18;break;
 case 18: 
 var $56;
 var $57=(($this+4)|0);
 var $58=HEAP32[(($57)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($58,$56);
 var $59=(($this+8)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=((($60)+(1))|0);
 HEAP32[(($59)>>2)]=$61;
 var $__r_0=$29;label=19;break;
 case 19: 
 var $__r_0;
 var $62=(($__r_0+20)|0);
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_3mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS3_INS_4pairIKjS5_EEEEE12__value_typeENS_19__map_value_compareIjSD_S7_Lb1EEENS3_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($this,$__nd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__nd|0)==0;
 if($1){label=7;break;}else{label=2;break;}
 case 2: 
 var $3=(($__nd)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 __ZNSt3__16__treeINS_3mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS3_INS_4pairIKjS5_EEEEE12__value_typeENS_19__map_value_compareIjSD_S7_Lb1EEENS3_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($this,$5);
 var $6=(($__nd+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZNSt3__16__treeINS_3mapIjNS_6vectorIjNS_9allocatorIjEEEENS_4lessIjEENS3_INS_4pairIKjS5_EEEEE12__value_typeENS_19__map_value_compareIjSD_S7_Lb1EEENS3_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($this,$8);
 var $9=(($__nd+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=($10|0)==0;
 if($12){label=6;break;}else{label=3;break;}
 case 3: 
 var $13=(($__nd+24)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($10|0)==($14|0);
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $scevgep_i_i_i_i_i_i_i=((($14)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $16=(((-$11))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$16)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $17=$uglygep29_i_i_i_i_i_i_i>>>2;
 var $18=$17^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($14+($18<<2))|0);
 HEAP32[(($13)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=5;break;
 case 5: 
 var $19=$10;
 __ZdlPv($19);
 label=6;break;
 case 6: 
 var $20=$__nd;
 __ZdlPv($20);
 label=7;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI13OptimizedFaceNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>178956970;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(24))&-1);
 var $21=($20>>>0)>89478484;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(24))&-1);
 var $_044=178956970;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(24))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=((($_044)*(24))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+((($39)*(24))&-1))|0);
 var $43=(($41+((($_045)*(24))&-1))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=$42;
 var $47=$__x;
 assert(24 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];HEAP32[((($46)+(12))>>2)]=HEAP32[((($47)+(12))>>2)];HEAP32[((($46)+(16))>>2)]=HEAP32[((($47)+(16))>>2)];HEAP32[((($46)+(20))>>2)]=HEAP32[((($47)+(20))>>2)];
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $48=(($41+((($_sum)*(24))&-1))|0);
 var $49=(((($40|0))/(-24))&-1);
 var $_sum43=((($49)+($39))|0);
 var $50=(($41+((($_sum43)*(24))&-1))|0);
 var $51=$50;
 var $52=$14;
 assert($40 % 1 === 0);(_memcpy($51, $52, $40)|0);
 HEAP32[(($3)>>2)]=$50;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $53=($14|0)==0;
 if($53){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($52);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI15OptimizedPoint3NS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>178956970;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(24))&-1);
 var $21=($20>>>0)>89478484;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(24))&-1);
 var $_069=178956970;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(24))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_070=0;var $40=$28;var $39=$31;label=7;break;}else{var $_069=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_069;
 var $36=((($_069)*(24))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_070=$_069;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_070;
 var $41;
 var $42=(($41+((($39)*(24))&-1))|0);
 var $43=(($41+((($_070)*(24))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $52=$14;var $51=$40;label=11;break;}else{label=8;break;}
 case 8: 
 var $46=$42;
 var $47=$__x;
 assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
 var $48=(($41+((($39)*(24))&-1)+12)|0);
 var $49=(($__x+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEEC2ERKS3_($48,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre67=HEAP32[(($3)>>2)];
 var $_pre68=HEAP32[(($1)>>2)];
 var $52=$_pre67;var $51=$_pre68;label=11;break;
 case 10: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1); var $50$1 = tempRet0;
 var $103$1=$50$1;var $103$0=$50$0;label=32;break;
 case 11: 
 var $51;
 var $52;
 var $_sum=((($39)+(1))|0);
 var $53=(($41+((($_sum)*(24))&-1))|0);
 var $54=($51|0)==($52|0);
 if($54){label=12;break;}else{var $_049_i=$51;var $__v_sroa_1_4_load5462=$42;label=13;break;}
 case 12: 
 HEAP32[(($3)>>2)]=$42;
 HEAP32[(($1)>>2)]=$53;
 HEAP32[(($15)>>2)]=$43;
 var $80=$51;label=22;break;
 case 13: 
 var $__v_sroa_1_4_load5462;
 var $_049_i;
 var $55=((($__v_sroa_1_4_load5462)-(24))|0);
 var $56=((($_049_i)-(24))|0);
 var $57=($55|0)==0;
 if($57){label=15;break;}else{label=14;break;}
 case 14: 
 var $59=$55;
 var $60=$56;
 assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
 var $61=((($__v_sroa_1_4_load5462)-(24)+12)|0);
 var $62=((($_049_i)-(24)+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEEC2ERKS3_($61,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=25;break; }
 case 15: 
 var $63=($56|0)==($52|0);
 if($63){label=16;break;}else{var $_049_i=$56;var $__v_sroa_1_4_load5462=$55;label=13;break;}
 case 16: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre66=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$55;
 HEAP32[(($1)>>2)]=$53;
 HEAP32[(($15)>>2)]=$43;
 var $65=($_pre_i|0)==($_pre66|0);
 if($65){var $80=$_pre_i;label=22;break;}else{var $66=$_pre66;label=17;break;}
 case 17: 
 var $66;
 var $67=((($66)-(24))|0);
 var $68=((($66)-(24)+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69;
 var $71=($69|0)==0;
 if($71){label=18;break;}else{label=19;break;}
 case 18: 
 var $72=($_pre_i|0)==($67|0);
 if($72){var $80=$_pre_i;label=22;break;}else{var $66=$67;label=17;break;}
 case 19: 
 var $73=((($66)-(24)+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($69|0)==($74|0);
 if($75){label=21;break;}else{label=20;break;}
 case 20: 
 var $scevgep_i_i_i_i_i_i_i40=((($74)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i41=$scevgep_i_i_i_i_i_i_i40;
 var $76=(((-$70))|0);
 var $uglygep_i_i_i_i_i_i_i42=(($scevgep28_i_i_i_i_i_i_i41+$76)|0);
 var $uglygep29_i_i_i_i_i_i_i43=$uglygep_i_i_i_i_i_i_i42;
 var $77=$uglygep29_i_i_i_i_i_i_i43>>>2;
 var $78=$77^-1;
 var $scevgep30_i_i_i_i_i_i_i44=(($74+($78<<2))|0);
 HEAP32[(($73)>>2)]=$scevgep30_i_i_i_i_i_i_i44;
 label=21;break;
 case 21: 
 var $79=$69;
 __ZdlPv($79);
 label=18;break;
 case 22: 
 var $80;
 var $81=($80|0)==0;
 if($81){label=24;break;}else{label=23;break;}
 case 23: 
 var $83=$80;
 __ZdlPv($83);
 label=24;break;
 case 24: 
 return;
 case 25: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $86=($__v_sroa_1_4_load5462|0)==($53|0);
 if($86){label=31;break;}else{var $87=$53;label=26;break;}
 case 26: 
 var $87;
 var $88=((($87)-(24))|0);
 var $89=((($87)-(24)+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=$90;
 var $92=($90|0)==0;
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 var $93=($__v_sroa_1_4_load5462|0)==($88|0);
 if($93){label=31;break;}else{var $87=$88;label=26;break;}
 case 28: 
 var $94=((($87)-(24)+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($90|0)==($95|0);
 if($96){label=30;break;}else{label=29;break;}
 case 29: 
 var $scevgep_i_i_i_i_i_i_i=((($95)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $97=(((-$91))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$97)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $98=$uglygep29_i_i_i_i_i_i_i>>>2;
 var $99=$98^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($95+($99<<2))|0);
 HEAP32[(($94)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=30;break;
 case 30: 
 var $100=$90;
 __ZdlPv($100);
 label=27;break;
 case 31: 
 var $101=($41|0)==0;
 if($101){var $105$1=$85$1;var $105$0=$85$0;label=33;break;}else{var $103$1=$85$1;var $103$0=$85$0;label=32;break;}
 case 32: 
 var $103$0;
 var $103$1;
 var $104=$41;
 __ZdlPv($104);
 var $105$1=$103$1;var $105$0=$103$0;label=33;break;
 case 33: 
 var $105$0;
 var $105$1;
 ___resumeException($105$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEEC2ERKS3_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>2;
 var $12=($11|0)==0;
 if($12){label=13;break;}else{label=2;break;}
 case 2: 
 var $14=($11>>>0)>1073741823;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $17=(function() { try { __THREW__ = 0; return __Znwj($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $19=$17;
 HEAP32[(($2)>>2)]=$19;
 HEAP32[(($1)>>2)]=$19;
 var $20=(($19+($11<<2))|0);
 HEAP32[(($3)>>2)]=$20;
 var $21=HEAP32[(($6)>>2)];
 var $22=HEAP32[(($4)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=13;break;}else{var $_011_i=$21;var $24=$19;label=6;break;}
 case 6: 
 var $24;
 var $_011_i;
 var $25=($24|0)==0;
 if($25){var $28=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $27=HEAP32[(($_011_i)>>2)];
 HEAP32[(($24)>>2)]=$27;
 var $_pre12_i=HEAP32[(($2)>>2)];
 var $28=$_pre12_i;label=8;break;
 case 8: 
 var $28;
 var $29=(($28+4)|0);
 HEAP32[(($2)>>2)]=$29;
 var $30=(($_011_i+4)|0);
 var $31=($30|0)==($22|0);
 if($31){label=13;break;}else{var $_011_i=$30;var $24=$29;label=6;break;}
 case 9: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=HEAP32[(($1)>>2)];
 var $35=$34;
 var $36=($34|0)==0;
 if($36){label=14;break;}else{label=10;break;}
 case 10: 
 var $37=HEAP32[(($2)>>2)];
 var $38=($34|0)==($37|0);
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i=((($37)-(4))|0);
 var $scevgep28_i=$scevgep_i;
 var $39=(((-$35))|0);
 var $uglygep_i=(($scevgep28_i+$39)|0);
 var $uglygep29_i=$uglygep_i;
 var $40=$uglygep29_i>>>2;
 var $41=$40^-1;
 var $scevgep30_i=(($37+($41<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep30_i;
 label=12;break;
 case 12: 
 var $42=$34;
 __ZdlPv($42);
 label=14;break;
 case 13: 
 return;
 case 14: 
 ___resumeException($33$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI15OptimizedVolumeNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(28))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>153391689;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(28))&-1);
 var $21=($20>>>0)>76695843;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(28))&-1);
 var $_059=153391689;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(28))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_060=0;var $40=$28;var $39=$31;label=7;break;}else{var $_059=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_059;
 var $36=((($_059)*(28))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_060=$_059;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_060;
 var $41;
 var $42=(($41+((($39)*(28))&-1))|0);
 var $43=(($41+((($_060)*(28))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $47=$14;var $46=$40;label=10;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeC2ERKS_($42,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $_pre57=HEAP32[(($3)>>2)];
 var $_pre58=HEAP32[(($1)>>2)];
 var $47=$_pre57;var $46=$_pre58;label=10;break;
 case 10: 
 var $46;
 var $47;
 var $_sum=((($39)+(1))|0);
 var $48=(($41+((($_sum)*(28))&-1))|0);
 var $49=($46|0)==($47|0);
 if($49){var $58=$46;var $57=$42;var $56=$46;label=15;break;}else{var $_049_i=$46;var $__v_sroa_1_4_load4450=$42;label=11;break;}
 case 11: 
 var $__v_sroa_1_4_load4450;
 var $_049_i;
 var $50=((($__v_sroa_1_4_load4450)-(28))|0);
 var $51=((($_049_i)-(28))|0);
 var $52=($50|0)==0;
 if($52){label=13;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeC2ERKS_($50,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $54=($51|0)==($47|0);
 if($54){label=14;break;}else{var $_049_i=$51;var $__v_sroa_1_4_load4450=$50;label=11;break;}
 case 14: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre56=HEAP32[(($1)>>2)];
 var $58=$_pre_i;var $57=$50;var $56=$_pre56;label=15;break;
 case 15: 
 var $56;
 var $57;
 var $58;
 HEAP32[(($3)>>2)]=$57;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $__v_sroa_2_8_load4853=$56;label=16;break;
 case 16: 
 var $__v_sroa_2_8_load4853;
 var $59=($58|0)==($__v_sroa_2_8_load4853|0);
 if($59){label=19;break;}else{label=17;break;}
 case 17: 
 var $61=((($__v_sroa_2_8_load4853)-(28))|0);
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeD1Ev($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load4853=$61;label=16;break; } else { label=18;break; }
 case 18: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 ___cxa_call_unexpected($64);
 throw "Reached an unreachable!";
 case 19: 
 var $65=($58|0)==0;
 if($65){label=21;break;}else{label=20;break;}
 case 20: 
 var $67=$58;
 __ZdlPv($67);
 label=21;break;
 case 21: 
 return;
 case 22: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $__v_sroa_1_4_load4449=$__v_sroa_1_4_load4450;var $__v_sroa_2_8_load4852=$48;label=24;break;
 case 23: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $__v_sroa_1_4_load4449=$42;var $__v_sroa_2_8_load4852=$42;label=24;break;
 case 24: 
 var $__v_sroa_2_8_load4852;
 var $__v_sroa_1_4_load4449;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $__v_sroa_2_8_load4851=$__v_sroa_2_8_load4852;label=25;break;
 case 25: 
 var $__v_sroa_2_8_load4851;
 var $69=($__v_sroa_1_4_load4449|0)==($__v_sroa_2_8_load4851|0);
 if($69){label=28;break;}else{label=26;break;}
 case 26: 
 var $71=((($__v_sroa_2_8_load4851)-(28))|0);
 (function() { try { __THREW__ = 0; return __ZN15OptimizedVolumeD1Ev($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load4851=$71;label=25;break; } else { label=27;break; }
 case 27: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=$73$0;
 ___cxa_call_unexpected($74);
 throw "Reached an unreachable!";
 case 28: 
 var $75=($41|0)==0;
 if($75){label=30;break;}else{label=29;break;}
 case 29: 
 var $77=$41;
 __ZdlPv($77);
 label=30;break;
 case 30: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15OptimizedVolumeC2ERKS_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$4;
 var $5=(($this+4)|0);
 var $6=(($0+4)|0);
 __ZNSt3__16vectorI15OptimizedPoint3NS_9allocatorIS1_EEEC2ERKS4_($5,$6);
 var $7=(($this+16)|0);
 var $8=(($7)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($this+20)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=(($this+24)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($0+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($0+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($12|0)==($14|0);
 if($15){label=13;break;}else{label=2;break;}
 case 2: 
 var $17=$14;
 var $18=$12;
 var $19=((($18)-($17))|0);
 var $20=(((($19|0))/(24))&-1);
 var $21=($20>>>0)>178956970;
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 var $23=$7;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __Znwj($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $26=$24;
 HEAP32[(($9)>>2)]=$26;
 HEAP32[(($8)>>2)]=$26;
 var $27=(($26+((($20)*(24))&-1))|0);
 HEAP32[(($10)>>2)]=$27;
 var $28=HEAP32[(($13)>>2)];
 var $29=HEAP32[(($11)>>2)];
 var $30=($28|0)==($29|0);
 if($30){label=13;break;}else{var $_011_i_i_i=$28;var $31=$26;label=6;break;}
 case 6: 
 var $31;
 var $_011_i_i_i;
 var $32=($31|0)==0;
 if($32){var $36=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $34=$31;
 var $35=$_011_i_i_i;
 assert(24 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];HEAP32[((($34)+(12))>>2)]=HEAP32[((($35)+(12))>>2)];HEAP32[((($34)+(16))>>2)]=HEAP32[((($35)+(16))>>2)];HEAP32[((($34)+(20))>>2)]=HEAP32[((($35)+(20))>>2)];
 var $_pre12_i_i_i=HEAP32[(($9)>>2)];
 var $36=$_pre12_i_i_i;label=8;break;
 case 8: 
 var $36;
 var $37=(($36+24)|0);
 HEAP32[(($9)>>2)]=$37;
 var $38=(($_011_i_i_i+24)|0);
 var $39=($38|0)==($29|0);
 if($39){label=13;break;}else{var $_011_i_i_i=$38;var $31=$37;label=6;break;}
 case 9: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 var $42=HEAP32[(($8)>>2)];
 var $43=$42;
 var $44=($42|0)==0;
 if($44){label=14;break;}else{label=10;break;}
 case 10: 
 var $45=HEAP32[(($9)>>2)];
 var $46=($42|0)==($45|0);
 if($46){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i_i_i=((($45)-(24))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $47=(((-$43))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$47)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $48=(((($uglygep29_i_i_i>>>0))/(24))&-1);
 var $49=$48^-1;
 var $scevgep30_i_i_i=(($45+((($49)*(24))&-1))|0);
 HEAP32[(($9)>>2)]=$scevgep30_i_i_i;
 label=12;break;
 case 12: 
 var $50=$42;
 __ZdlPv($50);
 label=14;break;
 case 13: 
 return;
 case 14: 
 var $51=(($5)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=23;break;}else{label=15;break;}
 case 15: 
 var $54=(($this+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($52|0)==($55|0);
 if($56){var $72=$52;label=22;break;}else{var $57=$55;label=16;break;}
 case 16: 
 var $57;
 var $58=((($57)-(24))|0);
 HEAP32[(($54)>>2)]=$58;
 var $59=((($57)-(24)+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 var $62=($60|0)==0;
 if($62){var $63=$58;label=17;break;}else{label=18;break;}
 case 17: 
 var $63;
 var $64=($52|0)==($63|0);
 if($64){label=21;break;}else{var $57=$63;label=16;break;}
 case 18: 
 var $65=((($57)-(24)+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($60|0)==($66|0);
 if($67){label=20;break;}else{label=19;break;}
 case 19: 
 var $scevgep_i_i_i_i_i_i_i_i=((($66)-(4))|0);
 var $scevgep28_i_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i_i;
 var $68=(((-$61))|0);
 var $uglygep_i_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i_i+$68)|0);
 var $uglygep29_i_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i_i;
 var $69=$uglygep29_i_i_i_i_i_i_i_i>>>2;
 var $70=$69^-1;
 var $scevgep30_i_i_i_i_i_i_i_i=(($66+($70<<2))|0);
 HEAP32[(($65)>>2)]=$scevgep30_i_i_i_i_i_i_i_i;
 label=20;break;
 case 20: 
 var $71=$60;
 __ZdlPv($71);
 var $_pre29_i_i_i=HEAP32[(($54)>>2)];
 var $63=$_pre29_i_i_i;label=17;break;
 case 21: 
 var $_pre_i_i_i=HEAP32[(($51)>>2)];
 var $72=$_pre_i_i_i;label=22;break;
 case 22: 
 var $72;
 var $73=$72;
 __ZdlPv($73);
 label=23;break;
 case 23: 
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI15OptimizedPoint3NS_9allocatorIS1_EEEC2ERKS4_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($5|0)==($7|0);
 if($8){label=21;break;}else{label=2;break;}
 case 2: 
 var $10=$7;
 var $11=$5;
 var $12=((($11)-($10))|0);
 var $13=(((($12|0))/(24))&-1);
 var $14=($13>>>0)>178956970;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $17=(function() { try { __THREW__ = 0; return __Znwj($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $19=$17;
 HEAP32[(($2)>>2)]=$19;
 HEAP32[(($1)>>2)]=$19;
 var $20=(($19+((($13)*(24))&-1))|0);
 HEAP32[(($3)>>2)]=$20;
 var $21=HEAP32[(($6)>>2)];
 var $22=HEAP32[(($4)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=21;break;}else{var $_011_i=$21;var $24=$19;label=6;break;}
 case 6: 
 var $24;
 var $_011_i;
 var $25=($24|0)==0;
 if($25){var $31=0;label=9;break;}else{label=7;break;}
 case 7: 
 var $27=$24;
 var $28=$_011_i;
 assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
 var $29=(($24+12)|0);
 var $30=(($_011_i+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIjNS_9allocatorIjEEEC2ERKS3_($29,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 var $_pre12_i=HEAP32[(($2)>>2)];
 var $31=$_pre12_i;label=9;break;
 case 9: 
 var $31;
 var $32=(($31+24)|0);
 HEAP32[(($2)>>2)]=$32;
 var $33=(($_011_i+24)|0);
 var $34=($33|0)==($22|0);
 if($34){label=21;break;}else{var $_011_i=$33;var $24=$32;label=6;break;}
 case 10: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=12;break;
 case 12: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $36=HEAP32[(($1)>>2)];
 var $37=($36|0)==0;
 if($37){label=22;break;}else{label=13;break;}
 case 13: 
 var $38=HEAP32[(($2)>>2)];
 var $39=($36|0)==($38|0);
 if($39){var $55=$36;label=20;break;}else{var $40=$38;label=14;break;}
 case 14: 
 var $40;
 var $41=((($40)-(24))|0);
 HEAP32[(($2)>>2)]=$41;
 var $42=((($40)-(24)+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$43;
 var $45=($43|0)==0;
 if($45){var $46=$41;label=15;break;}else{label=16;break;}
 case 15: 
 var $46;
 var $47=($36|0)==($46|0);
 if($47){label=19;break;}else{var $40=$46;label=14;break;}
 case 16: 
 var $48=((($40)-(24)+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($43|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 var $scevgep_i_i_i_i_i_i=((($49)-(4))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $51=(((-$44))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$51)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $52=$uglygep29_i_i_i_i_i_i>>>2;
 var $53=$52^-1;
 var $scevgep30_i_i_i_i_i_i=(($49+($53<<2))|0);
 HEAP32[(($48)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=18;break;
 case 18: 
 var $54=$43;
 __ZdlPv($54);
 var $_pre29_i=HEAP32[(($2)>>2)];
 var $46=$_pre29_i;label=15;break;
 case 19: 
 var $_pre_i48=HEAP32[(($1)>>2)];
 var $55=$_pre_i48;label=20;break;
 case 20: 
 var $55;
 var $56=$55;
 __ZdlPv($56);
 label=22;break;
 case 21: 
 return;
 case 22: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20SupportPolyGeneratorC2ER14SupportStorageiibii($this,$storage,$z,$angle,$everywhere,$supportDistance,$supportZDistance){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(($this)|0);
 var $4=(($this)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($this+8)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+12)|0);
 HEAP32[(($7)>>2)]=$storage;
 var $8=(($this+24)|0);
 HEAP32[(($8)>>2)]=$z;
 var $9=(($this+32)|0);
 var $10=($everywhere&1);
 HEAP8[($9)]=$10;
 var $11=(((90)-($angle))|0);
 var $12=($11|0);
 var $13=($12)/(180);
 var $14=($13)*((3.141592653589793));
 var $15=Math_cos($14);
 var $16=($15)+((-0.01));
 var $17=(($this+16)|0);
 HEAPF64[(($17)>>3)]=$16;
 var $18=(($this+28)|0);
 HEAP32[(($18)>>2)]=$supportZDistance;
 var $19=(($storage+20)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($storage+24)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(Math_imul($22,$20)|0);
 var $24$0=_llvm_umul_with_overflow_i32($23,4);
 var $24$1=tempRet0;
 var $25=$24$1;
 var $26=$24$0;
 var $27=$25?-1:$26;
 var $28=(function() { try { __THREW__ = 0; return __Znaj($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=9;break; }
 case 2: 
 var $30=$28;
 var $31=(($this+36)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=HEAP32[(($19)>>2)];
 var $33=$32<<2;
 var $34=HEAP32[(($21)>>2)];
 var $35=(Math_imul($33,$34)|0);
 _memset($28, 0, $35);
 var $36=($34|0)>1;
 if($36){label=3;break;}else{var $88=$30;label=25;break;}
 case 3: 
 var $37=(($1)|0);
 var $38=(($1+8)|0);
 var $39=(($2)|0);
 var $40=(($2+8)|0);
 var $y_051=1;var $42=$32;var $41=$34;label=4;break;
 case 4: 
 var $41;
 var $42;
 var $y_051;
 var $43=($42|0)>1;
 if($43){label=5;break;}else{var $84=$42;var $83=$41;label=23;break;}
 case 5: 
 var $44$0=$y_051;
 var $44$1=(((($y_051|0)<0))|0)?-1:0;
 var $x_050=1;var $46=$42;label=6;break;
 case 6: 
 var $46;
 var $x_050;
 var $47$0=$x_050;
 var $47$1=(((($x_050|0)<0))|0)?-1:0;
 var $st$0$0=(($37)|0);
 HEAP32[(($st$0$0)>>2)]=$47$0;
 var $st$1$1=(($37+4)|0);
 HEAP32[(($st$1$1)>>2)]=$47$1;
 var $st$2$0=(($38)|0);
 HEAP32[(($st$2$0)>>2)]=$44$0;
 var $st$3$1=(($38+4)|0);
 HEAP32[(($st$3$1)>>2)]=$44$1;
 var $48=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$1);
 if($48){label=7;break;}else{var $80=$46;label=21;break;}
 case 7: 
 var $50=(Math_imul($46,$y_051)|0);
 var $51=((($50)+($x_050))|0);
 var $52=HEAP32[(($31)>>2)];
 var $53=(($52+($51<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==0;
 if($55){label=19;break;}else{var $80=$46;label=21;break;}
 case 8: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=10;break;
 case 10: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $57=HEAP32[(($4)>>2)];
 var $58=($57|0)==0;
 if($58){label=29;break;}else{label=11;break;}
 case 11: 
 var $59=HEAP32[(($5)>>2)];
 var $60=($57|0)==($59|0);
 if($60){var $76=$57;label=18;break;}else{var $61=$59;label=12;break;}
 case 12: 
 var $61;
 var $62=((($61)-(12))|0);
 HEAP32[(($5)>>2)]=$62;
 var $63=(($62)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$64;
 var $66=($64|0)==0;
 if($66){var $67=$62;label=13;break;}else{label=14;break;}
 case 13: 
 var $67;
 var $68=($57|0)==($67|0);
 if($68){label=17;break;}else{var $61=$67;label=12;break;}
 case 14: 
 var $69=((($61)-(12)+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($64|0)==($70|0);
 if($71){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i_i=((($70)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $72=(((-$65))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$72)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $73=$uglygep29_i_i_i_i_i_i>>>4;
 var $74=$73^-1;
 var $scevgep30_i_i_i_i_i_i=(($70+($74<<4))|0);
 HEAP32[(($69)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=16;break;
 case 16: 
 var $75=$64;
 __ZdlPv($75);
 var $_pre29_i_i_i=HEAP32[(($5)>>2)];
 var $67=$_pre29_i_i_i;label=13;break;
 case 17: 
 var $_pre_i_i_i=HEAP32[(($4)>>2)];
 var $76=$_pre_i_i_i;label=18;break;
 case 18: 
 var $76;
 var $77=$76;
 __ZdlPv($77);
 label=29;break;
 case 19: 
 var $st$4$0=(($39)|0);
 HEAP32[(($st$4$0)>>2)]=$47$0;
 var $st$5$1=(($39+4)|0);
 HEAP32[(($st$5$1)>>2)]=$47$1;
 var $st$6$0=(($40)|0);
 HEAP32[(($st$6$0)>>2)]=$44$0;
 var $st$7$1=(($40+4)|0);
 HEAP32[(($st$7$1)>>2)]=$44$1;
 (function() { try { __THREW__ = 0; return __ZN20SupportPolyGenerator8lazyFillEN10ClipperLib8IntPointE($this,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=8;break; }
 case 20: 
 var $_pre56=HEAP32[(($19)>>2)];
 var $80=$_pre56;label=21;break;
 case 21: 
 var $80;
 var $81=((($x_050)+(1))|0);
 var $82=($81|0)<($80|0);
 if($82){var $x_050=$81;var $46=$80;label=6;break;}else{label=22;break;}
 case 22: 
 var $_pre55=HEAP32[(($21)>>2)];
 var $84=$80;var $83=$_pre55;label=23;break;
 case 23: 
 var $83;
 var $84;
 var $85=((($y_051)+(1))|0);
 var $86=($85|0)<($83|0);
 if($86){var $y_051=$85;var $42=$84;var $41=$83;label=4;break;}else{label=24;break;}
 case 24: 
 var $_pre=HEAP32[(($31)>>2)];
 var $88=$_pre;label=25;break;
 case 25: 
 var $88;
 var $89=($88|0)==0;
 if($89){label=27;break;}else{label=26;break;}
 case 26: 
 var $91=$88;
 __ZdlPv($91);
 label=27;break;
 case 27: 
 var $93=($supportDistance|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($3,$3,$93,0,2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=9;break; }
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $p; $p=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($p)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($p)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($p)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($p)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p)|0);
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $3=(($2$1|0) < ($$etemp$2$1|0)) | (((($2$1|0) == ($$etemp$2$1|0) & ($2$0>>>0) <  ($$etemp$2$0>>>0))));
 if($3){var $_0=0;label=18;break;}else{label=2;break;}
 case 2: 
 var $5=(($p+8)|0);
 var $ld$3$0=(($5)|0);
 var $6$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$4$1)>>2)];
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $7=(($6$1|0) < ($$etemp$5$1|0)) | (((($6$1|0) == ($$etemp$5$1|0) & ($6$0>>>0) <  ($$etemp$5$0>>>0))));
 if($7){var $_0=0;label=18;break;}else{label=3;break;}
 case 3: 
 var $9=(($this+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)-(1))|0);
 var $14$0=$13;
 var $14$1=(((($13|0)<0))|0)?-1:0;
 var $15=(($2$1|0) < ($14$1|0)) | (((($2$1|0) == ($14$1|0) & ($2$0>>>0) <  ($14$0>>>0))));
 if($15){label=4;break;}else{var $_0=0;label=18;break;}
 case 4: 
 var $17=(($10+24)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=((($18)-(1))|0);
 var $20$0=$19;
 var $20$1=(((($19|0)<0))|0)?-1:0;
 var $21=(($6$1|0) < ($20$1|0)) | (((($6$1|0) == ($20$1|0) & ($6$0>>>0) <  ($20$0>>>0))));
 if($21){label=5;break;}else{var $_0=0;label=18;break;}
 case 5: 
 var $23$0=$12;
 var $23$1=(((($12|0)<0))|0)?-1:0;
 var $24$0=___muldi3($23$0,$23$1,$6$0,$6$1);var $24$1=tempRet0;
 var $25$0=_i64Add($24$0,$24$1,$2$0,$2$1);var $25$1=tempRet0;
 var $26$0=$25$0;
 var $26=$26$0;
 var $27=(($this+36)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+($26<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=6;break;}else{var $_0=0;label=18;break;}
 case 6: 
 var $33=(($this+32)|0);
 var $34=HEAP8[($33)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 var $37=(($10+28)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+((($26)*(12))&-1)+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($38+((($26)*(12))&-1))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($36){label=14;break;}else{label=7;break;}
 case 7: 
 if($43){var $_0=0;label=18;break;}else{label=8;break;}
 case 8: 
 var $44=(($this+16)|0);
 var $45=HEAPF64[(($44)>>3)];
 var $46=(($this+28)|0);
 var $47=(($this+24)|0);
 var $i_025=0;label=9;break;
 case 9: 
 var $i_025;
 var $49=(($42+($i_025<<4)+8)|0);
 var $50=HEAPF64[(($49)>>3)];
 var $51=$50<$45;
 if($51){label=13;break;}else{label=10;break;}
 case 10: 
 var $53=(($42+($i_025<<4))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=HEAP32[(($46)>>2)];
 var $56=((($55)+($54))|0);
 var $57=HEAP32[(($47)>>2)];
 var $58=($56|0)<($57|0);
 if($58){label=13;break;}else{label=11;break;}
 case 11: 
 var $60=($i_025|0)==0;
 if($60){label=17;break;}else{label=12;break;}
 case 12: 
 var $62=((($i_025)-(1))|0);
 var $63=(($42+($62<<4))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)-($55))|0);
 var $66=($65|0)<($57|0);
 if($66){label=17;break;}else{label=13;break;}
 case 13: 
 var $68=((($i_025)+(2))|0);
 var $69=$40;
 var $70=$42;
 var $71=((($69)-($70))|0);
 var $72=$71>>4;
 var $73=($68>>>0)<($72>>>0);
 if($73){var $i_025=$68;label=9;break;}else{var $_0=0;label=18;break;}
 case 14: 
 if($43){var $_0=0;label=18;break;}else{label=15;break;}
 case 15: 
 var $76=(($42+8)|0);
 var $77=HEAPF64[(($76)>>3)];
 var $78=(($this+16)|0);
 var $79=HEAPF64[(($78)>>3)];
 var $80=$77<$79;
 if($80){var $_0=0;label=18;break;}else{label=16;break;}
 case 16: 
 var $82=(($42)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($this+28)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=((($83)-($85))|0);
 var $87=(($this+24)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)<($88|0);
 if($89){var $_0=0;label=18;break;}else{label=17;break;}
 case 17: 
 var $_0=1;label=18;break;
 case 18: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20SupportPolyGenerator8lazyFillEN10ClipperLib8IntPointE($this,$startPoint){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $startPoint; $startPoint=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($startPoint)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($startPoint)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($startPoint)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($startPoint)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $poly=sp;
 var $tmpPoly=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(48);
 var $3=(sp)+(64);
 var $4=(sp)+(80);
 var $5=(sp)+(96);
 var $6=HEAP32[((17056)>>2)];
 var $7=((($6)+(1))|0);
 HEAP32[((17056)>>2)]=$7;
 var $8=(($poly)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($poly+4)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=(($poly+8)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($tmpPoly)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($tmpPoly+4)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($tmpPoly+8)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=$startPoint;
 var $p_sroa_0_0__idx=(($startPoint)|0);
 var $p_sroa_1_8__idx186=(($startPoint+8)|0);
 var $15=(($this+12)|0);
 var $16=(($this+36)|0);
 var $17=(($1)|0);
 var $18=(($1+8)|0);
 var $19=(($2)|0);
 var $20=(($2+8)|0);
 var $21=(($3)|0);
 var $22=(($3+8)|0);
 var $23=$4;
 var $24=(($5)|0);
 var $25=(($5+8)|0);
 var $26=$3;
 var $27=$2;
 var $ld$0$0=(($p_sroa_0_0__idx)|0);
 var $p_sroa_0_0_copyload_pre$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($p_sroa_0_0__idx+4)|0);
 var $p_sroa_0_0_copyload_pre$1=HEAP32[(($ld$1$1)>>2)];
 var $ld$2$0=(($p_sroa_1_8__idx186)|0);
 var $p_sroa_1_8_copyload_pre$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($p_sroa_1_8__idx186+4)|0);
 var $p_sroa_1_8_copyload_pre$1=HEAP32[(($ld$3$1)>>2)];
 var $30$1=$p_sroa_0_0_copyload_pre$1;var $30$0=$p_sroa_0_0_copyload_pre$0;var $29$1=$p_sroa_1_8_copyload_pre$1;var $29$0=$p_sroa_1_8_copyload_pre$0;var $28=$7;label=3;break;
 case 2: 
 var $p_sroa_0_0_copyload204$0;
 var $p_sroa_0_0_copyload204$1;
 var $_pre=HEAP32[((17056)>>2)];
 var $30$1=$p_sroa_0_0_copyload204$1;var $30$0=$p_sroa_0_0_copyload204$0;var $29$1=$101$1;var $29$0=$101$0;var $28=$_pre;label=3;break;
 case 3: 
 var $28;
 var $29$0;
 var $29$1;
 var $30$0;
 var $30$1;
 var $31=HEAP32[(($15)>>2)];
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34$0=$33;
 var $34$1=(((($33|0)<0))|0)?-1:0;
 var $35$0=___muldi3($34$0,$34$1,$29$0,$29$1);var $35$1=tempRet0;
 var $36$0=_i64Add($35$0,$35$1,$30$0,$30$1);var $36$1=tempRet0;
 var $37$0=$36$0;
 var $37=$37$0;
 var $38=HEAP32[(($16)>>2)];
 var $39=(($38+($37<<2))|0);
 HEAP32[(($39)>>2)]=$28;
 var $$etemp$4$0=1;
 var $$etemp$4$1=0;
 var $40$0=_i64Add($30$0,$30$1,$$etemp$4$0,$$etemp$4$1);var $40$1=tempRet0;
 var $st$5$0=(($17)|0);
 HEAP32[(($st$5$0)>>2)]=$40$0;
 var $st$6$1=(($17+4)|0);
 HEAP32[(($st$6$1)>>2)]=$40$1;
 var $st$7$0=(($18)|0);
 HEAP32[(($st$7$0)>>2)]=$29$0;
 var $st$8$1=(($18+4)|0);
 HEAP32[(($st$8$1)>>2)]=$29$1;
 var $41=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$1);
 if($41){var $42$1=$40$1;var $42$0=$40$0;label=4;break;}else{var $p_sroa_0_0_copyload187_lcssa$1=$30$1;var $p_sroa_0_0_copyload187_lcssa$0=$30$0;label=12;break;}
 case 4: 
 var $42$0;
 var $42$1;
 var $43=HEAP32[((17056)>>2)];
 var $44=HEAP32[(($15)>>2)];
 var $45=(($44+20)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47$0=$46;
 var $47$1=(((($46|0)<0))|0)?-1:0;
 var $48$0=___muldi3($47$0,$47$1,$29$0,$29$1);var $48$1=tempRet0;
 var $49$0=_i64Add($48$0,$48$1,$42$0,$42$1);var $49$1=tempRet0;
 var $50$0=$49$0;
 var $50=$50$0;
 var $51=HEAP32[(($16)>>2)];
 var $52=(($51+($50<<2))|0);
 HEAP32[(($52)>>2)]=$43;
 var $$etemp$9$0=1;
 var $$etemp$9$1=0;
 var $53$0=_i64Add($42$0,$42$1,$$etemp$9$0,$$etemp$9$1);var $53$1=tempRet0;
 var $st$10$0=(($17)|0);
 HEAP32[(($st$10$0)>>2)]=$53$0;
 var $st$11$1=(($17+4)|0);
 HEAP32[(($st$11$1)>>2)]=$53$1;
 var $st$12$0=(($18)|0);
 HEAP32[(($st$12$0)>>2)]=$29$0;
 var $st$13$1=(($18+4)|0);
 HEAP32[(($st$13$1)>>2)]=$29$1;
 var $54=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$1);
 if($54){var $42$1=$53$1;var $42$0=$53$0;label=4;break;}else{var $p_sroa_0_0_copyload187_lcssa$1=$42$1;var $p_sroa_0_0_copyload187_lcssa$0=$42$0;label=12;break;}
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=8;break;
 case 6: 
 var $lpad_loopexit197$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit197$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit197$1;var $eh_lpad_body$0=$lpad_loopexit197$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit198$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit198$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit198$1;var $eh_lpad_body$0=$lpad_nonloopexit198$0;label=8;break;
 case 8: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $55=HEAP32[(($11)>>2)];
 var $56=$55;
 var $57=($55|0)==0;
 if($57){label=62;break;}else{label=9;break;}
 case 9: 
 var $58=HEAP32[(($12)>>2)];
 var $59=($55|0)==($58|0);
 if($59){label=11;break;}else{label=10;break;}
 case 10: 
 var $scevgep_i_i_i143=((($58)-(16))|0);
 var $scevgep28_i_i_i144=$scevgep_i_i_i143;
 var $60=(((-$56))|0);
 var $uglygep_i_i_i145=(($scevgep28_i_i_i144+$60)|0);
 var $uglygep29_i_i_i146=$uglygep_i_i_i145;
 var $61=$uglygep29_i_i_i146>>>4;
 var $62=$61^-1;
 var $scevgep30_i_i_i147=(($58+($62<<4))|0);
 HEAP32[(($12)>>2)]=$scevgep30_i_i_i147;
 label=11;break;
 case 11: 
 var $63=$55;
 __ZdlPv($63);
 label=62;break;
 case 12: 
 var $p_sroa_0_0_copyload187_lcssa$0;
 var $p_sroa_0_0_copyload187_lcssa$1;
 var $64=HEAP32[(($15)>>2)];
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67$0=$66;
 var $67$1=(((($66|0)<0))|0)?-1:0;
 var $68$0=___muldi3($67$0,$67$1,$30$0,$30$1);var $68$1=tempRet0;
 var $69$0=___muldi3($29$0,$29$1,$67$0,$67$1);var $69$1=tempRet0;
 var $_idx127=(($64)|0);
 var $ld$14$0=(($_idx127)|0);
 var $_idx127_val$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($_idx127+4)|0);
 var $_idx127_val$1=HEAP32[(($ld$15$1)>>2)];
 var $_idx128=(($64+8)|0);
 var $ld$16$0=(($_idx128)|0);
 var $_idx128_val$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($_idx128+4)|0);
 var $_idx128_val$1=HEAP32[(($ld$17$1)>>2)];
 var $70$0=_i64Add($_idx127_val$0,$_idx127_val$1,$68$0,$68$1);var $70$1=tempRet0;
 var $71$0=_i64Add($_idx128_val$0,$_idx128_val$1,$69$0,$69$1);var $71$1=tempRet0;
 var $72=(((($66|0))/(2))&-1);
 var $73$0=$72;
 var $73$1=(((($72|0)<0))|0)?-1:0;
 var $74$0=_i64Subtract($70$0,$70$1,$73$0,$73$1);var $74$1=tempRet0;
 var $st$18$0=(($19)|0);
 HEAP32[(($st$18$0)>>2)]=$74$0;
 var $st$19$1=(($19+4)|0);
 HEAP32[(($st$19$1)>>2)]=$74$1;
 var $st$20$0=(($20)|0);
 HEAP32[(($st$20$0)>>2)]=$71$0;
 var $st$21$1=(($20+4)|0);
 HEAP32[(($st$21$1)>>2)]=$71$1;
 var $75=HEAP32[(($12)>>2)];
 var $76=HEAP32[(($13)>>2)];
 var $77=($75|0)==($76|0);
 if($77){label=16;break;}else{label=13;break;}
 case 13: 
 var $79=($75|0)==0;
 if($79){label=15;break;}else{label=14;break;}
 case 14: 
 var $81=$75;
 assert(16 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];HEAP32[((($81)+(12))>>2)]=HEAP32[((($27)+(12))>>2)];
 label=15;break;
 case 15: 
 var $82=(($75+16)|0);
 HEAP32[(($12)>>2)]=$82;
 label=17;break;
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($tmpPoly,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=6;break; }
 case 17: 
 var $84=HEAP32[(($15)>>2)];
 var $85=(($84+16)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87$0=$86;
 var $87$1=(((($86|0)<0))|0)?-1:0;
 var $88$0=___muldi3($87$0,$87$1,$p_sroa_0_0_copyload187_lcssa$0,$p_sroa_0_0_copyload187_lcssa$1);var $88$1=tempRet0;
 var $89$0=___muldi3($87$0,$87$1,$29$0,$29$1);var $89$1=tempRet0;
 var $_idx123=(($84)|0);
 var $ld$22$0=(($_idx123)|0);
 var $_idx123_val$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($_idx123+4)|0);
 var $_idx123_val$1=HEAP32[(($ld$23$1)>>2)];
 var $_idx124=(($84+8)|0);
 var $ld$24$0=(($_idx124)|0);
 var $_idx124_val$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($_idx124+4)|0);
 var $_idx124_val$1=HEAP32[(($ld$25$1)>>2)];
 var $90$0=_i64Add($88$0,$88$1,$_idx123_val$0,$_idx123_val$1);var $90$1=tempRet0;
 var $91$0=_i64Add($_idx124_val$0,$_idx124_val$1,$89$0,$89$1);var $91$1=tempRet0;
 var $st$26$0=(($21)|0);
 HEAP32[(($st$26$0)>>2)]=$90$0;
 var $st$27$1=(($21+4)|0);
 HEAP32[(($st$27$1)>>2)]=$90$1;
 var $st$28$0=(($22)|0);
 HEAP32[(($st$28$0)>>2)]=$91$0;
 var $st$29$1=(($22+4)|0);
 HEAP32[(($st$29$1)>>2)]=$91$1;
 var $92=HEAP32[(($9)>>2)];
 var $93=HEAP32[(($10)>>2)];
 var $94=($92|0)==($93|0);
 if($94){label=21;break;}else{label=18;break;}
 case 18: 
 var $96=($92|0)==0;
 if($96){label=20;break;}else{label=19;break;}
 case 19: 
 var $98=$92;
 assert(16 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];HEAP32[((($98)+(12))>>2)]=HEAP32[((($26)+(12))>>2)];
 label=20;break;
 case 20: 
 var $99=(($92+16)|0);
 HEAP32[(($9)>>2)]=$99;
 label=22;break;
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($poly,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=6;break; }
 case 22: 
 var $$etemp$30$0=1;
 var $$etemp$30$1=0;
 var $101$0=_i64Add($29$0,$29$1,$$etemp$30$0,$$etemp$30$1);var $101$1=tempRet0;
 var $st$31$0=(($p_sroa_1_8__idx186)|0);
 HEAP32[(($st$31$0)>>2)]=$101$0;
 var $st$32$1=(($p_sroa_1_8__idx186+4)|0);
 HEAP32[(($st$32$1)>>2)]=$101$1;
 assert(16 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];HEAP32[((($23)+(12))>>2)]=HEAP32[((($14)+(12))>>2)];
 var $102=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$4);
 if($102){var $startPoint_idx_val194$1=$30$1;var $startPoint_idx_val194$0=$30$0;label=25;break;}else{var $103$1=$30$1;var $103$0=$30$0;label=23;break;}
 case 23: 
 var $103$0;
 var $103$1;
 var $104=(($103$1|0) > ($p_sroa_0_0_copyload187_lcssa$1|0)) | (((($103$1|0) == ($p_sroa_0_0_copyload187_lcssa$1|0) & ($103$0>>>0) >  ($p_sroa_0_0_copyload187_lcssa$0>>>0))));
 if($104){var $startPoint_idx_val194$1=$103$1;var $startPoint_idx_val194$0=$103$0;label=25;break;}else{label=24;break;}
 case 24: 
 var $$etemp$33$0=1;
 var $$etemp$33$1=0;
 var $106$0=_i64Add($103$0,$103$1,$$etemp$33$0,$$etemp$33$1);var $106$1=tempRet0;
 var $st$34$0=(($p_sroa_0_0__idx)|0);
 HEAP32[(($st$34$0)>>2)]=$106$0;
 var $st$35$1=(($p_sroa_0_0__idx+4)|0);
 HEAP32[(($st$35$1)>>2)]=$106$1;
 assert(16 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];HEAP32[((($23)+(12))>>2)]=HEAP32[((($14)+(12))>>2)];
 var $107=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$4);
 if($107){var $startPoint_idx_val194$1=$106$1;var $startPoint_idx_val194$0=$106$0;label=25;break;}else{var $103$1=$106$1;var $103$0=$106$0;label=23;break;}
 case 25: 
 var $startPoint_idx_val194$0;
 var $startPoint_idx_val194$1;
 var $108=(($startPoint_idx_val194$1|0) > ($p_sroa_0_0_copyload187_lcssa$1|0)) | (((($startPoint_idx_val194$1|0) == ($p_sroa_0_0_copyload187_lcssa$1|0) & ($startPoint_idx_val194$0>>>0) >  ($p_sroa_0_0_copyload187_lcssa$0>>>0))));
 if($108){label=27;break;}else{label=26;break;}
 case 26: 
 var $$etemp$36$0=-1;
 var $$etemp$36$1=-1;
 var $109$0=_i64Add($startPoint_idx_val194$0,$startPoint_idx_val194$1,$$etemp$36$0,$$etemp$36$1);var $109$1=tempRet0;
 var $st$37$0=(($24)|0);
 HEAP32[(($st$37$0)>>2)]=$109$0;
 var $st$38$1=(($24+4)|0);
 HEAP32[(($st$38$1)>>2)]=$109$1;
 var $st$39$0=(($25)|0);
 HEAP32[(($st$39$0)>>2)]=$101$0;
 var $st$40$1=(($25+4)|0);
 HEAP32[(($st$40$1)>>2)]=$101$1;
 var $110=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$5);
 if($110){var $204$1=$startPoint_idx_val194$1;var $204$0=$startPoint_idx_val194$0;label=55;break;}else{var $p_sroa_0_0_copyload204$1=$startPoint_idx_val194$1;var $p_sroa_0_0_copyload204$0=$startPoint_idx_val194$0;label=2;break;}
 case 27: 
 var $111=HEAP32[(($12)>>2)];
 var $112=HEAP32[(($11)>>2)];
 var $113=$111;
 var $114=$112;
 var $115=((($113)-($114))|0);
 var $116=$115>>4;
 var $117=($116|0)==0;
 if($117){label=35;break;}else{var $n_0188=0;var $120=$112;var $119=$116;var $118=$111;label=28;break;}
 case 28: 
 var $118;
 var $119;
 var $120;
 var $n_0188;
 var $121=$n_0188^-1;
 var $122=((($119)+($121))|0);
 var $123=(($120+($122<<4))|0);
 var $124=HEAP32[(($9)>>2)];
 var $125=HEAP32[(($10)>>2)];
 var $126=($124|0)==($125|0);
 if($126){label=32;break;}else{label=29;break;}
 case 29: 
 var $128=($124|0)==0;
 if($128){label=31;break;}else{label=30;break;}
 case 30: 
 var $130=$124;
 var $131=$123;
 assert(16 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[((($130)+(4))>>2)]=HEAP32[((($131)+(4))>>2)];HEAP32[((($130)+(8))>>2)]=HEAP32[((($131)+(8))>>2)];HEAP32[((($130)+(12))>>2)]=HEAP32[((($131)+(12))>>2)];
 label=31;break;
 case 31: 
 var $132=(($124+16)|0);
 HEAP32[(($9)>>2)]=$132;
 var $135=$118;var $134=$120;label=34;break;
 case 32: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($poly,$123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=5;break; }
 case 33: 
 var $_pre210=HEAP32[(($12)>>2)];
 var $_pre211=HEAP32[(($11)>>2)];
 var $135=$_pre210;var $134=$_pre211;label=34;break;
 case 34: 
 var $134;
 var $135;
 var $136=((($n_0188)+(1))|0);
 var $137=$135;
 var $138=$134;
 var $139=((($137)-($138))|0);
 var $140=$139>>4;
 var $141=($136>>>0)<($140>>>0);
 if($141){var $n_0188=$136;var $120=$134;var $119=$140;var $118=$135;label=28;break;}else{label=35;break;}
 case 35: 
 var $142=(($this+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($this+8)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($143|0)==($145|0);
 if($146){label=50;break;}else{label=36;break;}
 case 36: 
 var $148=($143|0)==0;
 if($148){label=49;break;}else{label=37;break;}
 case 37: 
 var $150=(($143)|0);
 HEAP32[(($150)>>2)]=0;
 var $151=(($143+4)|0);
 HEAP32[(($151)>>2)]=0;
 var $152=(($143+8)|0);
 HEAP32[(($152)>>2)]=0;
 var $153=HEAP32[(($9)>>2)];
 var $154=HEAP32[(($8)>>2)];
 var $155=$153;
 var $156=$154;
 var $157=((($155)-($156))|0);
 var $158=$157>>4;
 var $159=($158|0)==0;
 if($159){label=49;break;}else{label=38;break;}
 case 38: 
 var $161=($158>>>0)>268435455;
 if($161){label=39;break;}else{label=40;break;}
 case 39: 
 var $163=$143;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=45;break; }
 case 40: 
 var $164=(function() { try { __THREW__ = 0; return __Znwj($157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=45;break; }
 case 41: 
 var $166=$164;
 HEAP32[(($151)>>2)]=$166;
 HEAP32[(($150)>>2)]=$166;
 var $167=(($166+($158<<4))|0);
 HEAP32[(($152)>>2)]=$167;
 var $168=HEAP32[(($8)>>2)];
 var $169=HEAP32[(($9)>>2)];
 var $170=($168|0)==($169|0);
 if($170){label=49;break;}else{var $_011_i_i_i=$168;var $171=$166;label=42;break;}
 case 42: 
 var $171;
 var $_011_i_i_i;
 var $172=($171|0)==0;
 if($172){var $176=0;label=44;break;}else{label=43;break;}
 case 43: 
 var $174=$171;
 var $175=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($175)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($175)+(4))>>2)];HEAP32[((($174)+(8))>>2)]=HEAP32[((($175)+(8))>>2)];HEAP32[((($174)+(12))>>2)]=HEAP32[((($175)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($151)>>2)];
 var $176=$_pre12_i_i_i;label=44;break;
 case 44: 
 var $176;
 var $177=(($176+16)|0);
 HEAP32[(($151)>>2)]=$177;
 var $178=(($_011_i_i_i+16)|0);
 var $179=($178|0)==($169|0);
 if($179){label=49;break;}else{var $_011_i_i_i=$178;var $171=$177;label=42;break;}
 case 45: 
 var $181$0 = ___cxa_find_matching_catch(-1, -1); var $181$1 = tempRet0;
 var $182=HEAP32[(($150)>>2)];
 var $183=$182;
 var $184=($182|0)==0;
 if($184){var $eh_lpad_body$1=$181$1;var $eh_lpad_body$0=$181$0;label=8;break;}else{label=46;break;}
 case 46: 
 var $185=HEAP32[(($151)>>2)];
 var $186=($182|0)==($185|0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 var $scevgep_i_i_i162=((($185)-(16))|0);
 var $scevgep28_i_i_i163=$scevgep_i_i_i162;
 var $187=(((-$183))|0);
 var $uglygep_i_i_i164=(($scevgep28_i_i_i163+$187)|0);
 var $uglygep29_i_i_i165=$uglygep_i_i_i164;
 var $188=$uglygep29_i_i_i165>>>4;
 var $189=$188^-1;
 var $scevgep30_i_i_i166=(($185+($189<<4))|0);
 HEAP32[(($151)>>2)]=$scevgep30_i_i_i166;
 label=48;break;
 case 48: 
 var $190=$182;
 __ZdlPv($190);
 var $eh_lpad_body$1=$181$1;var $eh_lpad_body$0=$181$0;label=8;break;
 case 49: 
 var $191=HEAP32[(($142)>>2)];
 var $192=(($191+12)|0);
 HEAP32[(($142)>>2)]=$192;
 label=51;break;
 case 50: 
 var $194=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($194,$poly) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=7;break; }
 case 51: 
 var $195=HEAP32[(($11)>>2)];
 var $196=$195;
 var $197=($195|0)==0;
 if($197){label=57;break;}else{label=52;break;}
 case 52: 
 var $198=HEAP32[(($12)>>2)];
 var $199=($195|0)==($198|0);
 if($199){label=54;break;}else{label=53;break;}
 case 53: 
 var $scevgep_i_i_i152=((($198)-(16))|0);
 var $scevgep28_i_i_i153=$scevgep_i_i_i152;
 var $200=(((-$196))|0);
 var $uglygep_i_i_i154=(($scevgep28_i_i_i153+$200)|0);
 var $uglygep29_i_i_i155=$uglygep_i_i_i154;
 var $201=$uglygep29_i_i_i155>>>4;
 var $202=$201^-1;
 var $scevgep30_i_i_i156=(($198+($202<<4))|0);
 HEAP32[(($12)>>2)]=$scevgep30_i_i_i156;
 label=54;break;
 case 54: 
 var $203=$195;
 __ZdlPv($203);
 label=57;break;
 case 55: 
 var $204$0;
 var $204$1;
 var $$etemp$41$0=1;
 var $$etemp$41$1=0;
 var $205=(($204$1|0) > ($$etemp$41$1|0)) | (((($204$1|0) == ($$etemp$41$1|0) & ($204$0>>>0) >  ($$etemp$41$0>>>0))));
 if($205){label=56;break;}else{var $p_sroa_0_0_copyload204$1=$204$1;var $p_sroa_0_0_copyload204$0=$204$0;label=2;break;}
 case 56: 
 var $$etemp$42$0=-1;
 var $$etemp$42$1=-1;
 var $207$0=_i64Add($204$0,$204$1,$$etemp$42$0,$$etemp$42$1);var $207$1=tempRet0;
 var $st$43$0=(($p_sroa_0_0__idx)|0);
 HEAP32[(($st$43$0)>>2)]=$207$0;
 var $st$44$1=(($p_sroa_0_0__idx+4)|0);
 HEAP32[(($st$44$1)>>2)]=$207$1;
 var $$etemp$45$0=-2;
 var $$etemp$45$1=-1;
 var $208$0=_i64Add($204$0,$204$1,$$etemp$45$0,$$etemp$45$1);var $208$1=tempRet0;
 var $st$46$0=(($24)|0);
 HEAP32[(($st$46$0)>>2)]=$208$0;
 var $st$47$1=(($24+4)|0);
 HEAP32[(($st$47$1)>>2)]=$208$1;
 var $st$48$0=(($25)|0);
 HEAP32[(($st$48$0)>>2)]=$101$0;
 var $st$49$1=(($25+4)|0);
 HEAP32[(($st$49$1)>>2)]=$101$1;
 var $209=__ZN20SupportPolyGenerator13needSupportAtEN10ClipperLib8IntPointE($this,$5);
 if($209){var $204$1=$207$1;var $204$0=$207$0;label=55;break;}else{var $p_sroa_0_0_copyload204$1=$207$1;var $p_sroa_0_0_copyload204$0=$207$0;label=2;break;}
 case 57: 
 var $210=HEAP32[(($8)>>2)];
 var $211=$210;
 var $212=($210|0)==0;
 if($212){label=61;break;}else{label=58;break;}
 case 58: 
 var $213=HEAP32[(($9)>>2)];
 var $214=($210|0)==($213|0);
 if($214){label=60;break;}else{label=59;break;}
 case 59: 
 var $scevgep_i_i_i134=((($213)-(16))|0);
 var $scevgep28_i_i_i135=$scevgep_i_i_i134;
 var $215=(((-$211))|0);
 var $uglygep_i_i_i136=(($scevgep28_i_i_i135+$215)|0);
 var $uglygep29_i_i_i137=$uglygep_i_i_i136;
 var $216=$uglygep29_i_i_i137>>>4;
 var $217=$216^-1;
 var $scevgep30_i_i_i138=(($213+($217<<4))|0);
 HEAP32[(($9)>>2)]=$scevgep30_i_i_i138;
 label=60;break;
 case 60: 
 var $218=$210;
 __ZdlPv($218);
 label=61;break;
 case 61: 
 STACKTOP=sp;return;
 case 62: 
 var $219=HEAP32[(($8)>>2)];
 var $220=$219;
 var $221=($219|0)==0;
 if($221){label=66;break;}else{label=63;break;}
 case 63: 
 var $222=HEAP32[(($9)>>2)];
 var $223=($219|0)==($222|0);
 if($223){label=65;break;}else{label=64;break;}
 case 64: 
 var $scevgep_i_i_i=((($222)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $224=(((-$220))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$224)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $225=$uglygep29_i_i_i>>>4;
 var $226=$225^-1;
 var $scevgep30_i_i_i=(($222+($226<<4))|0);
 HEAP32[(($9)>>2)]=$scevgep30_i_i_i;
 label=65;break;
 case 65: 
 var $227=$219;
 __ZdlPv($227);
 label=66;break;
 case 66: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4AABBC2ENSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($this,$polys){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=-2147483648;
 var $st$1$0=(($2)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($2+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=(($this+8)|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=-2147483648;
 var $st$4$0=(($3)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($3+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $4=(($this+16)|0);
 var $$etemp$6$0=0;
 var $$etemp$6$1=-2147483648;
 var $st$7$0=(($4)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($4+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 var $5=(($this+24)|0);
 var $$etemp$9$0=0;
 var $$etemp$9$1=-2147483648;
 var $st$10$0=(($5)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9$0;
 var $st$11$1=(($5+4)|0);
 HEAP32[(($st$11$1)>>2)]=$$etemp$9$1;
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($1,$polys);
 __ZN4AABB9calculateENSt3__16vectorINS1_IN10ClipperLib8IntPointENS0_9allocatorIS3_EEEENS4_IS6_EEEE($this,$1);
 var $6=(($1)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=10;break;}else{label=2;break;}
 case 2: 
 var $9=(($1+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($7|0)==($10|0);
 if($11){var $27=$7;label=9;break;}else{var $12=$10;label=3;break;}
 case 3: 
 var $12;
 var $13=((($12)-(12))|0);
 HEAP32[(($9)>>2)]=$13;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15;
 var $17=($15|0)==0;
 if($17){var $18=$13;label=4;break;}else{label=5;break;}
 case 4: 
 var $18;
 var $19=($7|0)==($18|0);
 if($19){label=8;break;}else{var $12=$18;label=3;break;}
 case 5: 
 var $20=((($12)-(12)+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($15|0)==($21|0);
 if($22){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i_i_i_i=((($21)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $23=(((-$16))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$23)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $24=$uglygep29_i_i_i_i_i_i>>>4;
 var $25=$24^-1;
 var $scevgep30_i_i_i_i_i_i=(($21+($25<<4))|0);
 HEAP32[(($20)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=7;break;
 case 7: 
 var $26=$15;
 __ZdlPv($26);
 var $_pre29_i_i_i=HEAP32[(($9)>>2)];
 var $18=$_pre29_i_i_i;label=4;break;
 case 8: 
 var $_pre_i_i_i=HEAP32[(($6)>>2)];
 var $27=$_pre_i_i_i;label=9;break;
 case 9: 
 var $27;
 var $28=$27;
 __ZdlPv($28);
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib9ExPolygonD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=10;break;}else{label=2;break;}
 case 2: 
 var $4=(($this+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($2|0)==($5|0);
 if($6){var $22=$2;label=9;break;}else{var $7=$5;label=3;break;}
 case 3: 
 var $7;
 var $8=((($7)-(12))|0);
 HEAP32[(($4)>>2)]=$8;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=($10|0)==0;
 if($12){var $13=$8;label=4;break;}else{label=5;break;}
 case 4: 
 var $13;
 var $14=($2|0)==($13|0);
 if($14){label=8;break;}else{var $7=$13;label=3;break;}
 case 5: 
 var $15=((($7)-(12)+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($10|0)==($16|0);
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i_i_i_i=((($16)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $18=(((-$11))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$18)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $19=$uglygep29_i_i_i_i_i_i>>>4;
 var $20=$19^-1;
 var $scevgep30_i_i_i_i_i_i=(($16+($20<<4))|0);
 HEAP32[(($15)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=7;break;
 case 7: 
 var $21=$10;
 __ZdlPv($21);
 var $_pre29_i_i_i=HEAP32[(($4)>>2)];
 var $13=$_pre29_i_i_i;label=4;break;
 case 8: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $22=$_pre_i_i_i;label=9;break;
 case 9: 
 var $22;
 var $23=$22;
 __ZdlPv($23);
 label=10;break;
 case 10: 
 var $24=(($this)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=14;break;}else{label=11;break;}
 case 11: 
 var $28=(($this+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=13;break;}else{label=12;break;}
 case 12: 
 var $scevgep_i_i_i=((($29)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $31=(((-$26))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$31)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $32=$uglygep29_i_i_i>>>4;
 var $33=$32^-1;
 var $scevgep30_i_i_i=(($29+($33<<4))|0);
 HEAP32[(($28)>>2)]=$scevgep30_i_i_i;
 label=13;break;
 case 13: 
 var $34=$25;
 __ZdlPv($34);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14SliceLayerPartD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+80)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=10;break;}else{label=2;break;}
 case 2: 
 var $4=(($this+84)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($2|0)==($5|0);
 if($6){var $22=$2;label=9;break;}else{var $7=$5;label=3;break;}
 case 3: 
 var $7;
 var $8=((($7)-(12))|0);
 HEAP32[(($4)>>2)]=$8;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=($10|0)==0;
 if($12){var $13=$8;label=4;break;}else{label=5;break;}
 case 4: 
 var $13;
 var $14=($2|0)==($13|0);
 if($14){label=8;break;}else{var $7=$13;label=3;break;}
 case 5: 
 var $15=((($7)-(12)+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($10|0)==($16|0);
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i_i_i_i=((($16)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $18=(((-$11))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$18)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $19=$uglygep29_i_i_i_i_i_i>>>4;
 var $20=$19^-1;
 var $scevgep30_i_i_i_i_i_i=(($16+($20<<4))|0);
 HEAP32[(($15)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=7;break;
 case 7: 
 var $21=$10;
 __ZdlPv($21);
 var $_pre29_i_i_i=HEAP32[(($4)>>2)];
 var $13=$_pre29_i_i_i;label=4;break;
 case 8: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $22=$_pre_i_i_i;label=9;break;
 case 9: 
 var $22;
 var $23=$22;
 __ZdlPv($23);
 label=10;break;
 case 10: 
 var $24=(($this+68)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=19;break;}else{label=11;break;}
 case 11: 
 var $27=(($this+72)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($25|0)==($28|0);
 if($29){var $45=$25;label=18;break;}else{var $30=$28;label=12;break;}
 case 12: 
 var $30;
 var $31=((($30)-(12))|0);
 HEAP32[(($27)>>2)]=$31;
 var $32=(($31)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 var $35=($33|0)==0;
 if($35){var $36=$31;label=13;break;}else{label=14;break;}
 case 13: 
 var $36;
 var $37=($25|0)==($36|0);
 if($37){label=17;break;}else{var $30=$36;label=12;break;}
 case 14: 
 var $38=((($30)-(12)+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($33|0)==($39|0);
 if($40){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i_i10=((($39)-(16))|0);
 var $scevgep28_i_i_i_i_i_i11=$scevgep_i_i_i_i_i_i10;
 var $41=(((-$34))|0);
 var $uglygep_i_i_i_i_i_i12=(($scevgep28_i_i_i_i_i_i11+$41)|0);
 var $uglygep29_i_i_i_i_i_i13=$uglygep_i_i_i_i_i_i12;
 var $42=$uglygep29_i_i_i_i_i_i13>>>4;
 var $43=$42^-1;
 var $scevgep30_i_i_i_i_i_i14=(($39+($43<<4))|0);
 HEAP32[(($38)>>2)]=$scevgep30_i_i_i_i_i_i14;
 label=16;break;
 case 16: 
 var $44=$33;
 __ZdlPv($44);
 var $_pre29_i_i_i16=HEAP32[(($27)>>2)];
 var $36=$_pre29_i_i_i16;label=13;break;
 case 17: 
 var $_pre_i_i_i18=HEAP32[(($24)>>2)];
 var $45=$_pre_i_i_i18;label=18;break;
 case 18: 
 var $45;
 var $46=$45;
 __ZdlPv($46);
 label=19;break;
 case 19: 
 var $48=(($this+56)|0);
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10ClipperLib8IntPointENS_9allocatorIS3_EEEENS4_IS6_EEEENS4_IS8_EEED2Ev($48);
 var $49=(($this+44)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==0;
 if($51){label=28;break;}else{label=20;break;}
 case 20: 
 var $52=(($this+48)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($50|0)==($53|0);
 if($54){var $70=$50;label=27;break;}else{var $55=$53;label=21;break;}
 case 21: 
 var $55;
 var $56=((($55)-(12))|0);
 HEAP32[(($52)>>2)]=$56;
 var $57=(($56)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$58;
 var $60=($58|0)==0;
 if($60){var $61=$56;label=22;break;}else{label=23;break;}
 case 22: 
 var $61;
 var $62=($50|0)==($61|0);
 if($62){label=26;break;}else{var $55=$61;label=21;break;}
 case 23: 
 var $63=((($55)-(12)+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($58|0)==($64|0);
 if($65){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i_i_i_i26=((($64)-(16))|0);
 var $scevgep28_i_i_i_i_i_i27=$scevgep_i_i_i_i_i_i26;
 var $66=(((-$59))|0);
 var $uglygep_i_i_i_i_i_i28=(($scevgep28_i_i_i_i_i_i27+$66)|0);
 var $uglygep29_i_i_i_i_i_i29=$uglygep_i_i_i_i_i_i28;
 var $67=$uglygep29_i_i_i_i_i_i29>>>4;
 var $68=$67^-1;
 var $scevgep30_i_i_i_i_i_i30=(($64+($68<<4))|0);
 HEAP32[(($63)>>2)]=$scevgep30_i_i_i_i_i_i30;
 label=25;break;
 case 25: 
 var $69=$58;
 __ZdlPv($69);
 var $_pre29_i_i_i32=HEAP32[(($52)>>2)];
 var $61=$_pre29_i_i_i32;label=22;break;
 case 26: 
 var $_pre_i_i_i34=HEAP32[(($49)>>2)];
 var $70=$_pre_i_i_i34;label=27;break;
 case 27: 
 var $70;
 var $71=$70;
 __ZdlPv($71);
 label=28;break;
 case 28: 
 var $72=(($this+32)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)==0;
 if($74){label=37;break;}else{label=29;break;}
 case 29: 
 var $75=(($this+36)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($73|0)==($76|0);
 if($77){var $93=$73;label=36;break;}else{var $78=$76;label=30;break;}
 case 30: 
 var $78;
 var $79=((($78)-(12))|0);
 HEAP32[(($75)>>2)]=$79;
 var $80=(($79)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$81;
 var $83=($81|0)==0;
 if($83){var $84=$79;label=31;break;}else{label=32;break;}
 case 31: 
 var $84;
 var $85=($73|0)==($84|0);
 if($85){label=35;break;}else{var $78=$84;label=30;break;}
 case 32: 
 var $86=((($78)-(12)+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($81|0)==($87|0);
 if($88){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i_i_i_i42=((($87)-(16))|0);
 var $scevgep28_i_i_i_i_i_i43=$scevgep_i_i_i_i_i_i42;
 var $89=(((-$82))|0);
 var $uglygep_i_i_i_i_i_i44=(($scevgep28_i_i_i_i_i_i43+$89)|0);
 var $uglygep29_i_i_i_i_i_i45=$uglygep_i_i_i_i_i_i44;
 var $90=$uglygep29_i_i_i_i_i_i45>>>4;
 var $91=$90^-1;
 var $scevgep30_i_i_i_i_i_i46=(($87+($91<<4))|0);
 HEAP32[(($86)>>2)]=$scevgep30_i_i_i_i_i_i46;
 label=34;break;
 case 34: 
 var $92=$81;
 __ZdlPv($92);
 var $_pre29_i_i_i48=HEAP32[(($75)>>2)];
 var $84=$_pre29_i_i_i48;label=31;break;
 case 35: 
 var $_pre_i_i_i50=HEAP32[(($72)>>2)];
 var $93=$_pre_i_i_i50;label=36;break;
 case 36: 
 var $93;
 var $94=$93;
 __ZdlPv($94);
 label=37;break;
 case 37: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tv_i_i=sp;
 var $1=$tv_i_i;
 var $2=_gettimeofday($tv_i_i,0);
 var $3=(($tv_i_i)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0);
 var $6=(($tv_i_i+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0);
 var $9=($8)/(1000000);
 var $10=($5)+($9);
 HEAPF64[((8)>>3)]=$10;
 STACKTOP=sp;return;
}
function __ZN14ConfigSettingsC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $tmpcast755=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast754=$2;
 var $3=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast753=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast752=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast751=$5;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast750=$6;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast749=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast748=$8;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast747=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast746=$10;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast745=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast744=$12;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast743=$13;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast742=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast741=$15;
 var $16=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast740=$16;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast739=$17;
 var $18=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast738=$18;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast737=$19;
 var $20=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast736=$20;
 var $21=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast735=$21;
 var $22=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast734=$22;
 var $23=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast733=$23;
 var $24=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast732=$24;
 var $25=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast731=$25;
 var $26=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast730=$26;
 var $27=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast729=$27;
 var $28=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast728=$28;
 var $29=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast727=$29;
 var $30=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast726=$30;
 var $31=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast725=$31;
 var $32=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast724=$32;
 var $33=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast723=$33;
 var $34=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast722=$34;
 var $35=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast721=$35;
 var $36=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast720=$36;
 var $37=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast719=$37;
 var $38=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast718=$38;
 var $39=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast717=$39;
 var $40=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast716=$40;
 var $41=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast715=$41;
 var $42=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast714=$42;
 var $43=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast713=$43;
 var $44=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast712=$44;
 var $45=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast711=$45;
 var $46=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast710=$46;
 var $47=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast709=$47;
 var $48=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast708=$48;
 var $49=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast707=$49;
 var $50=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast706=$50;
 var $51=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast705=$51;
 var $52=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast704=$52;
 var $53=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast703=$53;
 var $54=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast702=$54;
 var $55=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast701=$55;
 var $56=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$56;
 var $57=(($this)|0);
 var $58=(($this)|0);
 HEAP32[(($58)>>2)]=0;
 var $59=(($this+4)|0);
 HEAP32[(($59)>>2)]=0;
 var $60=(($this+8)|0);
 HEAP32[(($60)>>2)]=0;
 var $61=(($this+184)|0);
 HEAPF64[(($61)>>3)]=1;
 var $62=(($this+208)|0);
 HEAPF64[(($62)>>3)]=0;
 var $63=(($this+232)|0);
 HEAPF64[(($63)>>3)]=0;
 var $64=(($this+192)|0);
 HEAPF64[(($64)>>3)]=0;
 var $65=(($this+216)|0);
 HEAPF64[(($65)>>3)]=1;
 var $66=(($this+240)|0);
 HEAPF64[(($66)>>3)]=0;
 var $67=(($this+200)|0);
 HEAPF64[(($67)>>3)]=0;
 var $68=(($this+224)|0);
 HEAPF64[(($68)>>3)]=0;
 var $69=(($this+248)|0);
 HEAPF64[(($69)>>3)]=1;
 var $70=(($this+12)|0);
 var $71=$1;
 HEAP32[(($71)>>2)]=3184;
 var $72=(($tmpcast755+4)|0);
 HEAP32[(($72)>>2)]=$70;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast755) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=332;break; }
 case 2: 
 var $_pre864=HEAP32[(($59)>>2)];
 var $_pre865=HEAP32[(($60)>>2)];
 var $74=(($this+16)|0);
 var $75=$2;
 HEAP32[(($75)>>2)]=5024;
 var $76=(($tmpcast754+4)|0);
 HEAP32[(($76)>>2)]=$74;
 var $77=($_pre864|0)==($_pre865|0);
 if($77){label=6;break;}else{label=3;break;}
 case 3: 
 var $79=($_pre864|0)==0;
 if($79){var $83=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $81=$_pre864;
 var $ld$0$0=(($2)|0);
 var $82$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($2+4)|0);
 var $82$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($81)|0);
 HEAP32[(($st$2$0)>>2)]=$82$0;
 var $st$3$1=(($81+4)|0);
 HEAP32[(($st$3$1)>>2)]=$82$1;
 var $_pre809=HEAP32[(($59)>>2)];
 var $83=$_pre809;label=5;break;
 case 5: 
 var $83;
 var $84=(($83+8)|0);
 HEAP32[(($59)>>2)]=$84;
 var $87=$84;label=8;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast754) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=332;break; }
 case 7: 
 var $_pre866=HEAP32[(($59)>>2)];
 var $87=$_pre866;label=8;break;
 case 8: 
 var $87;
 var $88=(($this+20)|0);
 var $89=$3;
 HEAP32[(($89)>>2)]=4440;
 var $90=(($tmpcast753+4)|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=HEAP32[(($60)>>2)];
 var $92=($87|0)==($91|0);
 if($92){label=12;break;}else{label=9;break;}
 case 9: 
 var $94=($87|0)==0;
 if($94){var $98=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $96=$87;
 var $ld$4$0=(($3)|0);
 var $97$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($3+4)|0);
 var $97$1=HEAP32[(($ld$5$1)>>2)];
 var $st$6$0=(($96)|0);
 HEAP32[(($st$6$0)>>2)]=$97$0;
 var $st$7$1=(($96+4)|0);
 HEAP32[(($st$7$1)>>2)]=$97$1;
 var $_pre808=HEAP32[(($59)>>2)];
 var $98=$_pre808;label=11;break;
 case 11: 
 var $98;
 var $99=(($98+8)|0);
 HEAP32[(($59)>>2)]=$99;
 var $102=$99;label=14;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast753) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=332;break; }
 case 13: 
 var $_pre867=HEAP32[(($59)>>2)];
 var $102=$_pre867;label=14;break;
 case 14: 
 var $102;
 var $103=(($this+24)|0);
 var $104=$4;
 HEAP32[(($104)>>2)]=3760;
 var $105=(($tmpcast752+4)|0);
 HEAP32[(($105)>>2)]=$103;
 var $106=HEAP32[(($60)>>2)];
 var $107=($102|0)==($106|0);
 if($107){label=18;break;}else{label=15;break;}
 case 15: 
 var $109=($102|0)==0;
 if($109){var $113=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $111=$102;
 var $ld$8$0=(($4)|0);
 var $112$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($4+4)|0);
 var $112$1=HEAP32[(($ld$9$1)>>2)];
 var $st$10$0=(($111)|0);
 HEAP32[(($st$10$0)>>2)]=$112$0;
 var $st$11$1=(($111+4)|0);
 HEAP32[(($st$11$1)>>2)]=$112$1;
 var $_pre807=HEAP32[(($59)>>2)];
 var $113=$_pre807;label=17;break;
 case 17: 
 var $113;
 var $114=(($113+8)|0);
 HEAP32[(($59)>>2)]=$114;
 var $117=$114;label=20;break;
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=332;break; }
 case 19: 
 var $_pre868=HEAP32[(($59)>>2)];
 var $117=$_pre868;label=20;break;
 case 20: 
 var $117;
 var $118=(($this+28)|0);
 var $119=$5;
 HEAP32[(($119)>>2)]=3128;
 var $120=(($tmpcast751+4)|0);
 HEAP32[(($120)>>2)]=$118;
 var $121=HEAP32[(($60)>>2)];
 var $122=($117|0)==($121|0);
 if($122){label=24;break;}else{label=21;break;}
 case 21: 
 var $124=($117|0)==0;
 if($124){var $128=0;label=23;break;}else{label=22;break;}
 case 22: 
 var $126=$117;
 var $ld$12$0=(($5)|0);
 var $127$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($5+4)|0);
 var $127$1=HEAP32[(($ld$13$1)>>2)];
 var $st$14$0=(($126)|0);
 HEAP32[(($st$14$0)>>2)]=$127$0;
 var $st$15$1=(($126+4)|0);
 HEAP32[(($st$15$1)>>2)]=$127$1;
 var $_pre806=HEAP32[(($59)>>2)];
 var $128=$_pre806;label=23;break;
 case 23: 
 var $128;
 var $129=(($128+8)|0);
 HEAP32[(($59)>>2)]=$129;
 var $132=$129;label=26;break;
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast751) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=332;break; }
 case 25: 
 var $_pre869=HEAP32[(($59)>>2)];
 var $132=$_pre869;label=26;break;
 case 26: 
 var $132;
 var $133=(($this+32)|0);
 var $134=$6;
 HEAP32[(($134)>>2)]=1824;
 var $135=(($tmpcast750+4)|0);
 HEAP32[(($135)>>2)]=$133;
 var $136=HEAP32[(($60)>>2)];
 var $137=($132|0)==($136|0);
 if($137){label=30;break;}else{label=27;break;}
 case 27: 
 var $139=($132|0)==0;
 if($139){var $143=0;label=29;break;}else{label=28;break;}
 case 28: 
 var $141=$132;
 var $ld$16$0=(($6)|0);
 var $142$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($6+4)|0);
 var $142$1=HEAP32[(($ld$17$1)>>2)];
 var $st$18$0=(($141)|0);
 HEAP32[(($st$18$0)>>2)]=$142$0;
 var $st$19$1=(($141+4)|0);
 HEAP32[(($st$19$1)>>2)]=$142$1;
 var $_pre805=HEAP32[(($59)>>2)];
 var $143=$_pre805;label=29;break;
 case 29: 
 var $143;
 var $144=(($143+8)|0);
 HEAP32[(($59)>>2)]=$144;
 var $147=$144;label=32;break;
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast750) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=332;break; }
 case 31: 
 var $_pre870=HEAP32[(($59)>>2)];
 var $147=$_pre870;label=32;break;
 case 32: 
 var $147;
 var $148=(($this+36)|0);
 var $149=$7;
 HEAP32[(($149)>>2)]=1272;
 var $150=(($tmpcast749+4)|0);
 HEAP32[(($150)>>2)]=$148;
 var $151=HEAP32[(($60)>>2)];
 var $152=($147|0)==($151|0);
 if($152){label=36;break;}else{label=33;break;}
 case 33: 
 var $154=($147|0)==0;
 if($154){var $158=0;label=35;break;}else{label=34;break;}
 case 34: 
 var $156=$147;
 var $ld$20$0=(($7)|0);
 var $157$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($7+4)|0);
 var $157$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($156)|0);
 HEAP32[(($st$22$0)>>2)]=$157$0;
 var $st$23$1=(($156+4)|0);
 HEAP32[(($st$23$1)>>2)]=$157$1;
 var $_pre804=HEAP32[(($59)>>2)];
 var $158=$_pre804;label=35;break;
 case 35: 
 var $158;
 var $159=(($158+8)|0);
 HEAP32[(($59)>>2)]=$159;
 var $162=$159;label=38;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast749) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=332;break; }
 case 37: 
 var $_pre871=HEAP32[(($59)>>2)];
 var $162=$_pre871;label=38;break;
 case 38: 
 var $162;
 var $163=(($this+40)|0);
 var $164=$8;
 HEAP32[(($164)>>2)]=864;
 var $165=(($tmpcast748+4)|0);
 HEAP32[(($165)>>2)]=$163;
 var $166=HEAP32[(($60)>>2)];
 var $167=($162|0)==($166|0);
 if($167){label=42;break;}else{label=39;break;}
 case 39: 
 var $169=($162|0)==0;
 if($169){var $173=0;label=41;break;}else{label=40;break;}
 case 40: 
 var $171=$162;
 var $ld$24$0=(($8)|0);
 var $172$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($8+4)|0);
 var $172$1=HEAP32[(($ld$25$1)>>2)];
 var $st$26$0=(($171)|0);
 HEAP32[(($st$26$0)>>2)]=$172$0;
 var $st$27$1=(($171+4)|0);
 HEAP32[(($st$27$1)>>2)]=$172$1;
 var $_pre803=HEAP32[(($59)>>2)];
 var $173=$_pre803;label=41;break;
 case 41: 
 var $173;
 var $174=(($173+8)|0);
 HEAP32[(($59)>>2)]=$174;
 var $177=$174;label=44;break;
 case 42: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast748) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=332;break; }
 case 43: 
 var $_pre872=HEAP32[(($59)>>2)];
 var $177=$_pre872;label=44;break;
 case 44: 
 var $177;
 var $178=(($this+44)|0);
 var $179=$9;
 HEAP32[(($179)>>2)]=544;
 var $180=(($tmpcast747+4)|0);
 HEAP32[(($180)>>2)]=$178;
 var $181=HEAP32[(($60)>>2)];
 var $182=($177|0)==($181|0);
 if($182){label=48;break;}else{label=45;break;}
 case 45: 
 var $184=($177|0)==0;
 if($184){var $188=0;label=47;break;}else{label=46;break;}
 case 46: 
 var $186=$177;
 var $ld$28$0=(($9)|0);
 var $187$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($9+4)|0);
 var $187$1=HEAP32[(($ld$29$1)>>2)];
 var $st$30$0=(($186)|0);
 HEAP32[(($st$30$0)>>2)]=$187$0;
 var $st$31$1=(($186+4)|0);
 HEAP32[(($st$31$1)>>2)]=$187$1;
 var $_pre802=HEAP32[(($59)>>2)];
 var $188=$_pre802;label=47;break;
 case 47: 
 var $188;
 var $189=(($188+8)|0);
 HEAP32[(($59)>>2)]=$189;
 var $192=$189;label=50;break;
 case 48: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast747) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=332;break; }
 case 49: 
 var $_pre873=HEAP32[(($59)>>2)];
 var $192=$_pre873;label=50;break;
 case 50: 
 var $192;
 var $193=(($this+48)|0);
 var $194=$10;
 HEAP32[(($194)>>2)]=256;
 var $195=(($tmpcast746+4)|0);
 HEAP32[(($195)>>2)]=$193;
 var $196=HEAP32[(($60)>>2)];
 var $197=($192|0)==($196|0);
 if($197){label=54;break;}else{label=51;break;}
 case 51: 
 var $199=($192|0)==0;
 if($199){var $203=0;label=53;break;}else{label=52;break;}
 case 52: 
 var $201=$192;
 var $ld$32$0=(($10)|0);
 var $202$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($10+4)|0);
 var $202$1=HEAP32[(($ld$33$1)>>2)];
 var $st$34$0=(($201)|0);
 HEAP32[(($st$34$0)>>2)]=$202$0;
 var $st$35$1=(($201+4)|0);
 HEAP32[(($st$35$1)>>2)]=$202$1;
 var $_pre801=HEAP32[(($59)>>2)];
 var $203=$_pre801;label=53;break;
 case 53: 
 var $203;
 var $204=(($203+8)|0);
 HEAP32[(($59)>>2)]=$204;
 var $207=$204;label=56;break;
 case 54: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast746) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=332;break; }
 case 55: 
 var $_pre874=HEAP32[(($59)>>2)];
 var $207=$_pre874;label=56;break;
 case 56: 
 var $207;
 var $208=(($this+52)|0);
 var $209=$11;
 HEAP32[(($209)>>2)]=5992;
 var $210=(($tmpcast745+4)|0);
 HEAP32[(($210)>>2)]=$208;
 var $211=HEAP32[(($60)>>2)];
 var $212=($207|0)==($211|0);
 if($212){label=60;break;}else{label=57;break;}
 case 57: 
 var $214=($207|0)==0;
 if($214){var $218=0;label=59;break;}else{label=58;break;}
 case 58: 
 var $216=$207;
 var $ld$36$0=(($11)|0);
 var $217$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($11+4)|0);
 var $217$1=HEAP32[(($ld$37$1)>>2)];
 var $st$38$0=(($216)|0);
 HEAP32[(($st$38$0)>>2)]=$217$0;
 var $st$39$1=(($216+4)|0);
 HEAP32[(($st$39$1)>>2)]=$217$1;
 var $_pre800=HEAP32[(($59)>>2)];
 var $218=$_pre800;label=59;break;
 case 59: 
 var $218;
 var $219=(($218+8)|0);
 HEAP32[(($59)>>2)]=$219;
 var $222=$219;label=62;break;
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast745) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=332;break; }
 case 61: 
 var $_pre875=HEAP32[(($59)>>2)];
 var $222=$_pre875;label=62;break;
 case 62: 
 var $222;
 var $223=(($this+56)|0);
 var $224=$12;
 HEAP32[(($224)>>2)]=5480;
 var $225=(($tmpcast744+4)|0);
 HEAP32[(($225)>>2)]=$223;
 var $226=HEAP32[(($60)>>2)];
 var $227=($222|0)==($226|0);
 if($227){label=66;break;}else{label=63;break;}
 case 63: 
 var $229=($222|0)==0;
 if($229){var $233=0;label=65;break;}else{label=64;break;}
 case 64: 
 var $231=$222;
 var $ld$40$0=(($12)|0);
 var $232$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($12+4)|0);
 var $232$1=HEAP32[(($ld$41$1)>>2)];
 var $st$42$0=(($231)|0);
 HEAP32[(($st$42$0)>>2)]=$232$0;
 var $st$43$1=(($231+4)|0);
 HEAP32[(($st$43$1)>>2)]=$232$1;
 var $_pre799=HEAP32[(($59)>>2)];
 var $233=$_pre799;label=65;break;
 case 65: 
 var $233;
 var $234=(($233+8)|0);
 HEAP32[(($59)>>2)]=$234;
 var $237=$234;label=68;break;
 case 66: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=332;break; }
 case 67: 
 var $_pre876=HEAP32[(($59)>>2)];
 var $237=$_pre876;label=68;break;
 case 68: 
 var $237;
 var $238=(($this+60)|0);
 var $239=$13;
 HEAP32[(($239)>>2)]=5272;
 var $240=(($tmpcast743+4)|0);
 HEAP32[(($240)>>2)]=$238;
 var $241=HEAP32[(($60)>>2)];
 var $242=($237|0)==($241|0);
 if($242){label=72;break;}else{label=69;break;}
 case 69: 
 var $244=($237|0)==0;
 if($244){var $248=0;label=71;break;}else{label=70;break;}
 case 70: 
 var $246=$237;
 var $ld$44$0=(($13)|0);
 var $247$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($13+4)|0);
 var $247$1=HEAP32[(($ld$45$1)>>2)];
 var $st$46$0=(($246)|0);
 HEAP32[(($st$46$0)>>2)]=$247$0;
 var $st$47$1=(($246+4)|0);
 HEAP32[(($st$47$1)>>2)]=$247$1;
 var $_pre798=HEAP32[(($59)>>2)];
 var $248=$_pre798;label=71;break;
 case 71: 
 var $248;
 var $249=(($248+8)|0);
 HEAP32[(($59)>>2)]=$249;
 var $252=$249;label=74;break;
 case 72: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast743) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=332;break; }
 case 73: 
 var $_pre877=HEAP32[(($59)>>2)];
 var $252=$_pre877;label=74;break;
 case 74: 
 var $252;
 var $253=(($this+92)|0);
 var $254=$14;
 HEAP32[(($254)>>2)]=5104;
 var $255=(($tmpcast742+4)|0);
 HEAP32[(($255)>>2)]=$253;
 var $256=HEAP32[(($60)>>2)];
 var $257=($252|0)==($256|0);
 if($257){label=78;break;}else{label=75;break;}
 case 75: 
 var $259=($252|0)==0;
 if($259){var $263=0;label=77;break;}else{label=76;break;}
 case 76: 
 var $261=$252;
 var $ld$48$0=(($14)|0);
 var $262$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($14+4)|0);
 var $262$1=HEAP32[(($ld$49$1)>>2)];
 var $st$50$0=(($261)|0);
 HEAP32[(($st$50$0)>>2)]=$262$0;
 var $st$51$1=(($261+4)|0);
 HEAP32[(($st$51$1)>>2)]=$262$1;
 var $_pre797=HEAP32[(($59)>>2)];
 var $263=$_pre797;label=77;break;
 case 77: 
 var $263;
 var $264=(($263+8)|0);
 HEAP32[(($59)>>2)]=$264;
 var $267=$264;label=80;break;
 case 78: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast742) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=332;break; }
 case 79: 
 var $_pre878=HEAP32[(($59)>>2)];
 var $267=$_pre878;label=80;break;
 case 80: 
 var $267;
 var $268=(($this+96)|0);
 var $269=$15;
 HEAP32[(($269)>>2)]=5000;
 var $270=(($tmpcast741+4)|0);
 HEAP32[(($270)>>2)]=$268;
 var $271=HEAP32[(($60)>>2)];
 var $272=($267|0)==($271|0);
 if($272){label=84;break;}else{label=81;break;}
 case 81: 
 var $274=($267|0)==0;
 if($274){var $278=0;label=83;break;}else{label=82;break;}
 case 82: 
 var $276=$267;
 var $ld$52$0=(($15)|0);
 var $277$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($15+4)|0);
 var $277$1=HEAP32[(($ld$53$1)>>2)];
 var $st$54$0=(($276)|0);
 HEAP32[(($st$54$0)>>2)]=$277$0;
 var $st$55$1=(($276+4)|0);
 HEAP32[(($st$55$1)>>2)]=$277$1;
 var $_pre796=HEAP32[(($59)>>2)];
 var $278=$_pre796;label=83;break;
 case 83: 
 var $278;
 var $279=(($278+8)|0);
 HEAP32[(($59)>>2)]=$279;
 var $282=$279;label=86;break;
 case 84: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast741) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=332;break; }
 case 85: 
 var $_pre879=HEAP32[(($59)>>2)];
 var $282=$_pre879;label=86;break;
 case 86: 
 var $282;
 var $283=(($this+100)|0);
 var $284=$16;
 HEAP32[(($284)>>2)]=4936;
 var $285=(($tmpcast740+4)|0);
 HEAP32[(($285)>>2)]=$283;
 var $286=HEAP32[(($60)>>2)];
 var $287=($282|0)==($286|0);
 if($287){label=90;break;}else{label=87;break;}
 case 87: 
 var $289=($282|0)==0;
 if($289){var $293=0;label=89;break;}else{label=88;break;}
 case 88: 
 var $291=$282;
 var $ld$56$0=(($16)|0);
 var $292$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($16+4)|0);
 var $292$1=HEAP32[(($ld$57$1)>>2)];
 var $st$58$0=(($291)|0);
 HEAP32[(($st$58$0)>>2)]=$292$0;
 var $st$59$1=(($291+4)|0);
 HEAP32[(($st$59$1)>>2)]=$292$1;
 var $_pre795=HEAP32[(($59)>>2)];
 var $293=$_pre795;label=89;break;
 case 89: 
 var $293;
 var $294=(($293+8)|0);
 HEAP32[(($59)>>2)]=$294;
 var $297=$294;label=92;break;
 case 90: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast740) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=332;break; }
 case 91: 
 var $_pre880=HEAP32[(($59)>>2)];
 var $297=$_pre880;label=92;break;
 case 92: 
 var $297;
 var $298=(($this+104)|0);
 var $299=$17;
 HEAP32[(($299)>>2)]=4888;
 var $300=(($tmpcast739+4)|0);
 HEAP32[(($300)>>2)]=$298;
 var $301=HEAP32[(($60)>>2)];
 var $302=($297|0)==($301|0);
 if($302){label=96;break;}else{label=93;break;}
 case 93: 
 var $304=($297|0)==0;
 if($304){var $308=0;label=95;break;}else{label=94;break;}
 case 94: 
 var $306=$297;
 var $ld$60$0=(($17)|0);
 var $307$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($17+4)|0);
 var $307$1=HEAP32[(($ld$61$1)>>2)];
 var $st$62$0=(($306)|0);
 HEAP32[(($st$62$0)>>2)]=$307$0;
 var $st$63$1=(($306+4)|0);
 HEAP32[(($st$63$1)>>2)]=$307$1;
 var $_pre794=HEAP32[(($59)>>2)];
 var $308=$_pre794;label=95;break;
 case 95: 
 var $308;
 var $309=(($308+8)|0);
 HEAP32[(($59)>>2)]=$309;
 var $312=$309;label=98;break;
 case 96: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast739) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=332;break; }
 case 97: 
 var $_pre881=HEAP32[(($59)>>2)];
 var $312=$_pre881;label=98;break;
 case 98: 
 var $312;
 var $313=(($this+108)|0);
 var $314=$18;
 HEAP32[(($314)>>2)]=4840;
 var $315=(($tmpcast738+4)|0);
 HEAP32[(($315)>>2)]=$313;
 var $316=HEAP32[(($60)>>2)];
 var $317=($312|0)==($316|0);
 if($317){label=102;break;}else{label=99;break;}
 case 99: 
 var $319=($312|0)==0;
 if($319){var $323=0;label=101;break;}else{label=100;break;}
 case 100: 
 var $321=$312;
 var $ld$64$0=(($18)|0);
 var $322$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($18+4)|0);
 var $322$1=HEAP32[(($ld$65$1)>>2)];
 var $st$66$0=(($321)|0);
 HEAP32[(($st$66$0)>>2)]=$322$0;
 var $st$67$1=(($321+4)|0);
 HEAP32[(($st$67$1)>>2)]=$322$1;
 var $_pre793=HEAP32[(($59)>>2)];
 var $323=$_pre793;label=101;break;
 case 101: 
 var $323;
 var $324=(($323+8)|0);
 HEAP32[(($59)>>2)]=$324;
 var $327=$324;label=104;break;
 case 102: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast738) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=332;break; }
 case 103: 
 var $_pre882=HEAP32[(($59)>>2)];
 var $327=$_pre882;label=104;break;
 case 104: 
 var $327;
 var $328=(($this+112)|0);
 var $329=$19;
 HEAP32[(($329)>>2)]=4800;
 var $330=(($tmpcast737+4)|0);
 HEAP32[(($330)>>2)]=$328;
 var $331=HEAP32[(($60)>>2)];
 var $332=($327|0)==($331|0);
 if($332){label=108;break;}else{label=105;break;}
 case 105: 
 var $334=($327|0)==0;
 if($334){var $338=0;label=107;break;}else{label=106;break;}
 case 106: 
 var $336=$327;
 var $ld$68$0=(($19)|0);
 var $337$0=HEAP32[(($ld$68$0)>>2)];
 var $ld$69$1=(($19+4)|0);
 var $337$1=HEAP32[(($ld$69$1)>>2)];
 var $st$70$0=(($336)|0);
 HEAP32[(($st$70$0)>>2)]=$337$0;
 var $st$71$1=(($336+4)|0);
 HEAP32[(($st$71$1)>>2)]=$337$1;
 var $_pre792=HEAP32[(($59)>>2)];
 var $338=$_pre792;label=107;break;
 case 107: 
 var $338;
 var $339=(($338+8)|0);
 HEAP32[(($59)>>2)]=$339;
 var $342=$339;label=110;break;
 case 108: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast737) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=332;break; }
 case 109: 
 var $_pre883=HEAP32[(($59)>>2)];
 var $342=$_pre883;label=110;break;
 case 110: 
 var $342;
 var $343=(($this+116)|0);
 var $344=$20;
 HEAP32[(($344)>>2)]=4752;
 var $345=(($tmpcast736+4)|0);
 HEAP32[(($345)>>2)]=$343;
 var $346=HEAP32[(($60)>>2)];
 var $347=($342|0)==($346|0);
 if($347){label=114;break;}else{label=111;break;}
 case 111: 
 var $349=($342|0)==0;
 if($349){var $353=0;label=113;break;}else{label=112;break;}
 case 112: 
 var $351=$342;
 var $ld$72$0=(($20)|0);
 var $352$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($20+4)|0);
 var $352$1=HEAP32[(($ld$73$1)>>2)];
 var $st$74$0=(($351)|0);
 HEAP32[(($st$74$0)>>2)]=$352$0;
 var $st$75$1=(($351+4)|0);
 HEAP32[(($st$75$1)>>2)]=$352$1;
 var $_pre791=HEAP32[(($59)>>2)];
 var $353=$_pre791;label=113;break;
 case 113: 
 var $353;
 var $354=(($353+8)|0);
 HEAP32[(($59)>>2)]=$354;
 var $357=$354;label=116;break;
 case 114: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=332;break; }
 case 115: 
 var $_pre884=HEAP32[(($59)>>2)];
 var $357=$_pre884;label=116;break;
 case 116: 
 var $357;
 var $358=(($this+120)|0);
 var $359=$21;
 HEAP32[(($359)>>2)]=4688;
 var $360=(($tmpcast735+4)|0);
 HEAP32[(($360)>>2)]=$358;
 var $361=HEAP32[(($60)>>2)];
 var $362=($357|0)==($361|0);
 if($362){label=120;break;}else{label=117;break;}
 case 117: 
 var $364=($357|0)==0;
 if($364){var $368=0;label=119;break;}else{label=118;break;}
 case 118: 
 var $366=$357;
 var $ld$76$0=(($21)|0);
 var $367$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($21+4)|0);
 var $367$1=HEAP32[(($ld$77$1)>>2)];
 var $st$78$0=(($366)|0);
 HEAP32[(($st$78$0)>>2)]=$367$0;
 var $st$79$1=(($366+4)|0);
 HEAP32[(($st$79$1)>>2)]=$367$1;
 var $_pre790=HEAP32[(($59)>>2)];
 var $368=$_pre790;label=119;break;
 case 119: 
 var $368;
 var $369=(($368+8)|0);
 HEAP32[(($59)>>2)]=$369;
 var $372=$369;label=122;break;
 case 120: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast735) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=332;break; }
 case 121: 
 var $_pre885=HEAP32[(($59)>>2)];
 var $372=$_pre885;label=122;break;
 case 122: 
 var $372;
 var $373=(($this+124)|0);
 var $374=$22;
 HEAP32[(($374)>>2)]=4568;
 var $375=(($tmpcast734+4)|0);
 HEAP32[(($375)>>2)]=$373;
 var $376=HEAP32[(($60)>>2)];
 var $377=($372|0)==($376|0);
 if($377){label=126;break;}else{label=123;break;}
 case 123: 
 var $379=($372|0)==0;
 if($379){var $383=0;label=125;break;}else{label=124;break;}
 case 124: 
 var $381=$372;
 var $ld$80$0=(($22)|0);
 var $382$0=HEAP32[(($ld$80$0)>>2)];
 var $ld$81$1=(($22+4)|0);
 var $382$1=HEAP32[(($ld$81$1)>>2)];
 var $st$82$0=(($381)|0);
 HEAP32[(($st$82$0)>>2)]=$382$0;
 var $st$83$1=(($381+4)|0);
 HEAP32[(($st$83$1)>>2)]=$382$1;
 var $_pre789=HEAP32[(($59)>>2)];
 var $383=$_pre789;label=125;break;
 case 125: 
 var $383;
 var $384=(($383+8)|0);
 HEAP32[(($59)>>2)]=$384;
 var $387=$384;label=128;break;
 case 126: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast734) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=332;break; }
 case 127: 
 var $_pre886=HEAP32[(($59)>>2)];
 var $387=$_pre886;label=128;break;
 case 128: 
 var $387;
 var $388=(($this+128)|0);
 var $389=$23;
 HEAP32[(($389)>>2)]=4536;
 var $390=(($tmpcast733+4)|0);
 HEAP32[(($390)>>2)]=$388;
 var $391=HEAP32[(($60)>>2)];
 var $392=($387|0)==($391|0);
 if($392){label=132;break;}else{label=129;break;}
 case 129: 
 var $394=($387|0)==0;
 if($394){var $398=0;label=131;break;}else{label=130;break;}
 case 130: 
 var $396=$387;
 var $ld$84$0=(($23)|0);
 var $397$0=HEAP32[(($ld$84$0)>>2)];
 var $ld$85$1=(($23+4)|0);
 var $397$1=HEAP32[(($ld$85$1)>>2)];
 var $st$86$0=(($396)|0);
 HEAP32[(($st$86$0)>>2)]=$397$0;
 var $st$87$1=(($396+4)|0);
 HEAP32[(($st$87$1)>>2)]=$397$1;
 var $_pre788=HEAP32[(($59)>>2)];
 var $398=$_pre788;label=131;break;
 case 131: 
 var $398;
 var $399=(($398+8)|0);
 HEAP32[(($59)>>2)]=$399;
 var $402=$399;label=134;break;
 case 132: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast733) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=332;break; }
 case 133: 
 var $_pre887=HEAP32[(($59)>>2)];
 var $402=$_pre887;label=134;break;
 case 134: 
 var $402;
 var $403=(($this+132)|0);
 var $404=$24;
 HEAP32[(($404)>>2)]=4472;
 var $405=(($tmpcast732+4)|0);
 HEAP32[(($405)>>2)]=$403;
 var $406=HEAP32[(($60)>>2)];
 var $407=($402|0)==($406|0);
 if($407){label=138;break;}else{label=135;break;}
 case 135: 
 var $409=($402|0)==0;
 if($409){var $413=0;label=137;break;}else{label=136;break;}
 case 136: 
 var $411=$402;
 var $ld$88$0=(($24)|0);
 var $412$0=HEAP32[(($ld$88$0)>>2)];
 var $ld$89$1=(($24+4)|0);
 var $412$1=HEAP32[(($ld$89$1)>>2)];
 var $st$90$0=(($411)|0);
 HEAP32[(($st$90$0)>>2)]=$412$0;
 var $st$91$1=(($411+4)|0);
 HEAP32[(($st$91$1)>>2)]=$412$1;
 var $_pre787=HEAP32[(($59)>>2)];
 var $413=$_pre787;label=137;break;
 case 137: 
 var $413;
 var $414=(($413+8)|0);
 HEAP32[(($59)>>2)]=$414;
 var $417=$414;label=140;break;
 case 138: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast732) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=332;break; }
 case 139: 
 var $_pre888=HEAP32[(($59)>>2)];
 var $417=$_pre888;label=140;break;
 case 140: 
 var $417;
 var $418=(($this+136)|0);
 var $419=$25;
 HEAP32[(($419)>>2)]=4424;
 var $420=(($tmpcast731+4)|0);
 HEAP32[(($420)>>2)]=$418;
 var $421=HEAP32[(($60)>>2)];
 var $422=($417|0)==($421|0);
 if($422){label=144;break;}else{label=141;break;}
 case 141: 
 var $424=($417|0)==0;
 if($424){var $428=0;label=143;break;}else{label=142;break;}
 case 142: 
 var $426=$417;
 var $ld$92$0=(($25)|0);
 var $427$0=HEAP32[(($ld$92$0)>>2)];
 var $ld$93$1=(($25+4)|0);
 var $427$1=HEAP32[(($ld$93$1)>>2)];
 var $st$94$0=(($426)|0);
 HEAP32[(($st$94$0)>>2)]=$427$0;
 var $st$95$1=(($426+4)|0);
 HEAP32[(($st$95$1)>>2)]=$427$1;
 var $_pre786=HEAP32[(($59)>>2)];
 var $428=$_pre786;label=143;break;
 case 143: 
 var $428;
 var $429=(($428+8)|0);
 HEAP32[(($59)>>2)]=$429;
 var $432=$429;label=146;break;
 case 144: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast731) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=332;break; }
 case 145: 
 var $_pre889=HEAP32[(($59)>>2)];
 var $432=$_pre889;label=146;break;
 case 146: 
 var $432;
 var $433=(($this+64)|0);
 var $434=$26;
 HEAP32[(($434)>>2)]=4352;
 var $435=(($tmpcast730+4)|0);
 HEAP32[(($435)>>2)]=$433;
 var $436=HEAP32[(($60)>>2)];
 var $437=($432|0)==($436|0);
 if($437){label=150;break;}else{label=147;break;}
 case 147: 
 var $439=($432|0)==0;
 if($439){var $443=0;label=149;break;}else{label=148;break;}
 case 148: 
 var $441=$432;
 var $ld$96$0=(($26)|0);
 var $442$0=HEAP32[(($ld$96$0)>>2)];
 var $ld$97$1=(($26+4)|0);
 var $442$1=HEAP32[(($ld$97$1)>>2)];
 var $st$98$0=(($441)|0);
 HEAP32[(($st$98$0)>>2)]=$442$0;
 var $st$99$1=(($441+4)|0);
 HEAP32[(($st$99$1)>>2)]=$442$1;
 var $_pre785=HEAP32[(($59)>>2)];
 var $443=$_pre785;label=149;break;
 case 149: 
 var $443;
 var $444=(($443+8)|0);
 HEAP32[(($59)>>2)]=$444;
 var $447=$444;label=152;break;
 case 150: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast730) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=332;break; }
 case 151: 
 var $_pre890=HEAP32[(($59)>>2)];
 var $447=$_pre890;label=152;break;
 case 152: 
 var $447;
 var $448=(($this+72)|0);
 var $449=$27;
 HEAP32[(($449)>>2)]=4288;
 var $450=(($tmpcast729+4)|0);
 HEAP32[(($450)>>2)]=$448;
 var $451=HEAP32[(($60)>>2)];
 var $452=($447|0)==($451|0);
 if($452){label=156;break;}else{label=153;break;}
 case 153: 
 var $454=($447|0)==0;
 if($454){var $458=0;label=155;break;}else{label=154;break;}
 case 154: 
 var $456=$447;
 var $ld$100$0=(($27)|0);
 var $457$0=HEAP32[(($ld$100$0)>>2)];
 var $ld$101$1=(($27+4)|0);
 var $457$1=HEAP32[(($ld$101$1)>>2)];
 var $st$102$0=(($456)|0);
 HEAP32[(($st$102$0)>>2)]=$457$0;
 var $st$103$1=(($456+4)|0);
 HEAP32[(($st$103$1)>>2)]=$457$1;
 var $_pre784=HEAP32[(($59)>>2)];
 var $458=$_pre784;label=155;break;
 case 155: 
 var $458;
 var $459=(($458+8)|0);
 HEAP32[(($59)>>2)]=$459;
 var $462=$459;label=158;break;
 case 156: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast729) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=157;break; } else { label=332;break; }
 case 157: 
 var $_pre891=HEAP32[(($59)>>2)];
 var $462=$_pre891;label=158;break;
 case 158: 
 var $462;
 var $463=(($this+68)|0);
 var $464=$28;
 HEAP32[(($464)>>2)]=4224;
 var $465=(($tmpcast728+4)|0);
 HEAP32[(($465)>>2)]=$463;
 var $466=HEAP32[(($60)>>2)];
 var $467=($462|0)==($466|0);
 if($467){label=162;break;}else{label=159;break;}
 case 159: 
 var $469=($462|0)==0;
 if($469){var $473=0;label=161;break;}else{label=160;break;}
 case 160: 
 var $471=$462;
 var $ld$104$0=(($28)|0);
 var $472$0=HEAP32[(($ld$104$0)>>2)];
 var $ld$105$1=(($28+4)|0);
 var $472$1=HEAP32[(($ld$105$1)>>2)];
 var $st$106$0=(($471)|0);
 HEAP32[(($st$106$0)>>2)]=$472$0;
 var $st$107$1=(($471+4)|0);
 HEAP32[(($st$107$1)>>2)]=$472$1;
 var $_pre783=HEAP32[(($59)>>2)];
 var $473=$_pre783;label=161;break;
 case 161: 
 var $473;
 var $474=(($473+8)|0);
 HEAP32[(($59)>>2)]=$474;
 var $477=$474;label=164;break;
 case 162: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=332;break; }
 case 163: 
 var $_pre892=HEAP32[(($59)>>2)];
 var $477=$_pre892;label=164;break;
 case 164: 
 var $477;
 var $478=(($this+76)|0);
 var $479=$29;
 HEAP32[(($479)>>2)]=4144;
 var $480=(($tmpcast727+4)|0);
 HEAP32[(($480)>>2)]=$478;
 var $481=HEAP32[(($60)>>2)];
 var $482=($477|0)==($481|0);
 if($482){label=168;break;}else{label=165;break;}
 case 165: 
 var $484=($477|0)==0;
 if($484){var $488=0;label=167;break;}else{label=166;break;}
 case 166: 
 var $486=$477;
 var $ld$108$0=(($29)|0);
 var $487$0=HEAP32[(($ld$108$0)>>2)];
 var $ld$109$1=(($29+4)|0);
 var $487$1=HEAP32[(($ld$109$1)>>2)];
 var $st$110$0=(($486)|0);
 HEAP32[(($st$110$0)>>2)]=$487$0;
 var $st$111$1=(($486+4)|0);
 HEAP32[(($st$111$1)>>2)]=$487$1;
 var $_pre782=HEAP32[(($59)>>2)];
 var $488=$_pre782;label=167;break;
 case 167: 
 var $488;
 var $489=(($488+8)|0);
 HEAP32[(($59)>>2)]=$489;
 var $492=$489;label=170;break;
 case 168: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast727) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=169;break; } else { label=332;break; }
 case 169: 
 var $_pre893=HEAP32[(($59)>>2)];
 var $492=$_pre893;label=170;break;
 case 170: 
 var $492;
 var $493=(($this+80)|0);
 var $494=$30;
 HEAP32[(($494)>>2)]=4088;
 var $495=(($tmpcast726+4)|0);
 HEAP32[(($495)>>2)]=$493;
 var $496=HEAP32[(($60)>>2)];
 var $497=($492|0)==($496|0);
 if($497){label=174;break;}else{label=171;break;}
 case 171: 
 var $499=($492|0)==0;
 if($499){var $503=0;label=173;break;}else{label=172;break;}
 case 172: 
 var $501=$492;
 var $ld$112$0=(($30)|0);
 var $502$0=HEAP32[(($ld$112$0)>>2)];
 var $ld$113$1=(($30+4)|0);
 var $502$1=HEAP32[(($ld$113$1)>>2)];
 var $st$114$0=(($501)|0);
 HEAP32[(($st$114$0)>>2)]=$502$0;
 var $st$115$1=(($501+4)|0);
 HEAP32[(($st$115$1)>>2)]=$502$1;
 var $_pre781=HEAP32[(($59)>>2)];
 var $503=$_pre781;label=173;break;
 case 173: 
 var $503;
 var $504=(($503+8)|0);
 HEAP32[(($59)>>2)]=$504;
 var $507=$504;label=176;break;
 case 174: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast726) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=175;break; } else { label=332;break; }
 case 175: 
 var $_pre894=HEAP32[(($59)>>2)];
 var $507=$_pre894;label=176;break;
 case 176: 
 var $507;
 var $508=(($this+84)|0);
 var $509=$31;
 HEAP32[(($509)>>2)]=4048;
 var $510=(($tmpcast725+4)|0);
 HEAP32[(($510)>>2)]=$508;
 var $511=HEAP32[(($60)>>2)];
 var $512=($507|0)==($511|0);
 if($512){label=180;break;}else{label=177;break;}
 case 177: 
 var $514=($507|0)==0;
 if($514){var $518=0;label=179;break;}else{label=178;break;}
 case 178: 
 var $516=$507;
 var $ld$116$0=(($31)|0);
 var $517$0=HEAP32[(($ld$116$0)>>2)];
 var $ld$117$1=(($31+4)|0);
 var $517$1=HEAP32[(($ld$117$1)>>2)];
 var $st$118$0=(($516)|0);
 HEAP32[(($st$118$0)>>2)]=$517$0;
 var $st$119$1=(($516+4)|0);
 HEAP32[(($st$119$1)>>2)]=$517$1;
 var $_pre780=HEAP32[(($59)>>2)];
 var $518=$_pre780;label=179;break;
 case 179: 
 var $518;
 var $519=(($518+8)|0);
 HEAP32[(($59)>>2)]=$519;
 var $522=$519;label=182;break;
 case 180: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast725) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=181;break; } else { label=332;break; }
 case 181: 
 var $_pre895=HEAP32[(($59)>>2)];
 var $522=$_pre895;label=182;break;
 case 182: 
 var $522;
 var $523=(($this+88)|0);
 var $524=$32;
 HEAP32[(($524)>>2)]=3936;
 var $525=(($tmpcast724+4)|0);
 HEAP32[(($525)>>2)]=$523;
 var $526=HEAP32[(($60)>>2)];
 var $527=($522|0)==($526|0);
 if($527){label=186;break;}else{label=183;break;}
 case 183: 
 var $529=($522|0)==0;
 if($529){var $533=0;label=185;break;}else{label=184;break;}
 case 184: 
 var $531=$522;
 var $ld$120$0=(($32)|0);
 var $532$0=HEAP32[(($ld$120$0)>>2)];
 var $ld$121$1=(($32+4)|0);
 var $532$1=HEAP32[(($ld$121$1)>>2)];
 var $st$122$0=(($531)|0);
 HEAP32[(($st$122$0)>>2)]=$532$0;
 var $st$123$1=(($531+4)|0);
 HEAP32[(($st$123$1)>>2)]=$532$1;
 var $_pre779=HEAP32[(($59)>>2)];
 var $533=$_pre779;label=185;break;
 case 185: 
 var $533;
 var $534=(($533+8)|0);
 HEAP32[(($59)>>2)]=$534;
 var $537=$534;label=188;break;
 case 186: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast724) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=332;break; }
 case 187: 
 var $_pre896=HEAP32[(($59)>>2)];
 var $537=$_pre896;label=188;break;
 case 188: 
 var $537;
 var $538=(($this+256)|0);
 var $539=$33;
 HEAP32[(($539)>>2)]=3880;
 var $540=(($tmpcast723+4)|0);
 HEAP32[(($540)>>2)]=$538;
 var $541=HEAP32[(($60)>>2)];
 var $542=($537|0)==($541|0);
 if($542){label=192;break;}else{label=189;break;}
 case 189: 
 var $544=($537|0)==0;
 if($544){var $548=0;label=191;break;}else{label=190;break;}
 case 190: 
 var $546=$537;
 var $ld$124$0=(($33)|0);
 var $547$0=HEAP32[(($ld$124$0)>>2)];
 var $ld$125$1=(($33+4)|0);
 var $547$1=HEAP32[(($ld$125$1)>>2)];
 var $st$126$0=(($546)|0);
 HEAP32[(($st$126$0)>>2)]=$547$0;
 var $st$127$1=(($546+4)|0);
 HEAP32[(($st$127$1)>>2)]=$547$1;
 var $_pre778=HEAP32[(($59)>>2)];
 var $548=$_pre778;label=191;break;
 case 191: 
 var $548;
 var $549=(($548+8)|0);
 HEAP32[(($59)>>2)]=$549;
 var $552=$549;label=194;break;
 case 192: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast723) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { label=332;break; }
 case 193: 
 var $_pre897=HEAP32[(($59)>>2)];
 var $552=$_pre897;label=194;break;
 case 194: 
 var $552;
 var $553=$34;
 HEAP32[(($553)>>2)]=3808;
 var $554=(($tmpcast722+4)|0);
 HEAP32[(($554)>>2)]=$538;
 var $555=HEAP32[(($60)>>2)];
 var $556=($552|0)==($555|0);
 if($556){label=198;break;}else{label=195;break;}
 case 195: 
 var $558=($552|0)==0;
 if($558){var $562=0;label=197;break;}else{label=196;break;}
 case 196: 
 var $560=$552;
 var $ld$128$0=(($34)|0);
 var $561$0=HEAP32[(($ld$128$0)>>2)];
 var $ld$129$1=(($34+4)|0);
 var $561$1=HEAP32[(($ld$129$1)>>2)];
 var $st$130$0=(($560)|0);
 HEAP32[(($st$130$0)>>2)]=$561$0;
 var $st$131$1=(($560+4)|0);
 HEAP32[(($st$131$1)>>2)]=$561$1;
 var $_pre777=HEAP32[(($59)>>2)];
 var $562=$_pre777;label=197;break;
 case 197: 
 var $562;
 var $563=(($562+8)|0);
 HEAP32[(($59)>>2)]=$563;
 var $566=$563;label=200;break;
 case 198: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast722) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=199;break; } else { label=332;break; }
 case 199: 
 var $_pre898=HEAP32[(($59)>>2)];
 var $566=$_pre898;label=200;break;
 case 200: 
 var $566;
 var $567=(($this+260)|0);
 var $568=$35;
 HEAP32[(($568)>>2)]=3736;
 var $569=(($tmpcast721+4)|0);
 HEAP32[(($569)>>2)]=$567;
 var $570=HEAP32[(($60)>>2)];
 var $571=($566|0)==($570|0);
 if($571){label=204;break;}else{label=201;break;}
 case 201: 
 var $573=($566|0)==0;
 if($573){var $577=0;label=203;break;}else{label=202;break;}
 case 202: 
 var $575=$566;
 var $ld$132$0=(($35)|0);
 var $576$0=HEAP32[(($ld$132$0)>>2)];
 var $ld$133$1=(($35+4)|0);
 var $576$1=HEAP32[(($ld$133$1)>>2)];
 var $st$134$0=(($575)|0);
 HEAP32[(($st$134$0)>>2)]=$576$0;
 var $st$135$1=(($575+4)|0);
 HEAP32[(($st$135$1)>>2)]=$576$1;
 var $_pre776=HEAP32[(($59)>>2)];
 var $577=$_pre776;label=203;break;
 case 203: 
 var $577;
 var $578=(($577+8)|0);
 HEAP32[(($59)>>2)]=$578;
 var $581=$578;label=206;break;
 case 204: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast721) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { label=332;break; }
 case 205: 
 var $_pre899=HEAP32[(($59)>>2)];
 var $581=$_pre899;label=206;break;
 case 206: 
 var $581;
 var $582=$36;
 HEAP32[(($582)>>2)]=3608;
 var $583=(($tmpcast720+4)|0);
 HEAP32[(($583)>>2)]=$567;
 var $584=HEAP32[(($60)>>2)];
 var $585=($581|0)==($584|0);
 if($585){label=210;break;}else{label=207;break;}
 case 207: 
 var $587=($581|0)==0;
 if($587){var $591=0;label=209;break;}else{label=208;break;}
 case 208: 
 var $589=$581;
 var $ld$136$0=(($36)|0);
 var $590$0=HEAP32[(($ld$136$0)>>2)];
 var $ld$137$1=(($36+4)|0);
 var $590$1=HEAP32[(($ld$137$1)>>2)];
 var $st$138$0=(($589)|0);
 HEAP32[(($st$138$0)>>2)]=$590$0;
 var $st$139$1=(($589+4)|0);
 HEAP32[(($st$139$1)>>2)]=$590$1;
 var $_pre775=HEAP32[(($59)>>2)];
 var $591=$_pre775;label=209;break;
 case 209: 
 var $591;
 var $592=(($591+8)|0);
 HEAP32[(($59)>>2)]=$592;
 var $595=$592;label=212;break;
 case 210: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { label=332;break; }
 case 211: 
 var $_pre900=HEAP32[(($59)>>2)];
 var $595=$_pre900;label=212;break;
 case 212: 
 var $595;
 var $596=(($this+264)|0);
 var $597=$37;
 HEAP32[(($597)>>2)]=3568;
 var $598=(($tmpcast719+4)|0);
 HEAP32[(($598)>>2)]=$596;
 var $599=HEAP32[(($60)>>2)];
 var $600=($595|0)==($599|0);
 if($600){label=216;break;}else{label=213;break;}
 case 213: 
 var $602=($595|0)==0;
 if($602){var $606=0;label=215;break;}else{label=214;break;}
 case 214: 
 var $604=$595;
 var $ld$140$0=(($37)|0);
 var $605$0=HEAP32[(($ld$140$0)>>2)];
 var $ld$141$1=(($37+4)|0);
 var $605$1=HEAP32[(($ld$141$1)>>2)];
 var $st$142$0=(($604)|0);
 HEAP32[(($st$142$0)>>2)]=$605$0;
 var $st$143$1=(($604+4)|0);
 HEAP32[(($st$143$1)>>2)]=$605$1;
 var $_pre774=HEAP32[(($59)>>2)];
 var $606=$_pre774;label=215;break;
 case 215: 
 var $606;
 var $607=(($606+8)|0);
 HEAP32[(($59)>>2)]=$607;
 var $610=$607;label=218;break;
 case 216: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast719) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=217;break; } else { label=332;break; }
 case 217: 
 var $_pre901=HEAP32[(($59)>>2)];
 var $610=$_pre901;label=218;break;
 case 218: 
 var $610;
 var $611=(($this+160)|0);
 var $612=$38;
 HEAP32[(($612)>>2)]=3488;
 var $613=(($tmpcast718+4)|0);
 HEAP32[(($613)>>2)]=$611;
 var $614=HEAP32[(($60)>>2)];
 var $615=($610|0)==($614|0);
 if($615){label=222;break;}else{label=219;break;}
 case 219: 
 var $617=($610|0)==0;
 if($617){var $621=0;label=221;break;}else{label=220;break;}
 case 220: 
 var $619=$610;
 var $ld$144$0=(($38)|0);
 var $620$0=HEAP32[(($ld$144$0)>>2)];
 var $ld$145$1=(($38+4)|0);
 var $620$1=HEAP32[(($ld$145$1)>>2)];
 var $st$146$0=(($619)|0);
 HEAP32[(($st$146$0)>>2)]=$620$0;
 var $st$147$1=(($619+4)|0);
 HEAP32[(($st$147$1)>>2)]=$620$1;
 var $_pre773=HEAP32[(($59)>>2)];
 var $621=$_pre773;label=221;break;
 case 221: 
 var $621;
 var $622=(($621+8)|0);
 HEAP32[(($59)>>2)]=$622;
 var $625=$622;label=224;break;
 case 222: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast718) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=223;break; } else { label=332;break; }
 case 223: 
 var $_pre902=HEAP32[(($59)>>2)];
 var $625=$_pre902;label=224;break;
 case 224: 
 var $625;
 var $626=(($this+164)|0);
 var $627=$39;
 HEAP32[(($627)>>2)]=3464;
 var $628=(($tmpcast717+4)|0);
 HEAP32[(($628)>>2)]=$626;
 var $629=HEAP32[(($60)>>2)];
 var $630=($625|0)==($629|0);
 if($630){label=228;break;}else{label=225;break;}
 case 225: 
 var $632=($625|0)==0;
 if($632){var $636=0;label=227;break;}else{label=226;break;}
 case 226: 
 var $634=$625;
 var $ld$148$0=(($39)|0);
 var $635$0=HEAP32[(($ld$148$0)>>2)];
 var $ld$149$1=(($39+4)|0);
 var $635$1=HEAP32[(($ld$149$1)>>2)];
 var $st$150$0=(($634)|0);
 HEAP32[(($st$150$0)>>2)]=$635$0;
 var $st$151$1=(($634+4)|0);
 HEAP32[(($st$151$1)>>2)]=$635$1;
 var $_pre772=HEAP32[(($59)>>2)];
 var $636=$_pre772;label=227;break;
 case 227: 
 var $636;
 var $637=(($636+8)|0);
 HEAP32[(($59)>>2)]=$637;
 var $640=$637;label=230;break;
 case 228: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast717) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=229;break; } else { label=332;break; }
 case 229: 
 var $_pre903=HEAP32[(($59)>>2)];
 var $640=$_pre903;label=230;break;
 case 230: 
 var $640;
 var $641=(($this+168)|0);
 var $642=$40;
 HEAP32[(($642)>>2)]=3400;
 var $643=(($tmpcast716+4)|0);
 HEAP32[(($643)>>2)]=$641;
 var $644=HEAP32[(($60)>>2)];
 var $645=($640|0)==($644|0);
 if($645){label=234;break;}else{label=231;break;}
 case 231: 
 var $647=($640|0)==0;
 if($647){var $651=0;label=233;break;}else{label=232;break;}
 case 232: 
 var $649=$640;
 var $ld$152$0=(($40)|0);
 var $650$0=HEAP32[(($ld$152$0)>>2)];
 var $ld$153$1=(($40+4)|0);
 var $650$1=HEAP32[(($ld$153$1)>>2)];
 var $st$154$0=(($649)|0);
 HEAP32[(($st$154$0)>>2)]=$650$0;
 var $st$155$1=(($649+4)|0);
 HEAP32[(($st$155$1)>>2)]=$650$1;
 var $_pre771=HEAP32[(($59)>>2)];
 var $651=$_pre771;label=233;break;
 case 233: 
 var $651;
 var $652=(($651+8)|0);
 HEAP32[(($59)>>2)]=$652;
 var $655=$652;label=236;break;
 case 234: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast716) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=235;break; } else { label=332;break; }
 case 235: 
 var $_pre904=HEAP32[(($59)>>2)];
 var $655=$_pre904;label=236;break;
 case 236: 
 var $655;
 var $656=(($this+172)|0);
 var $657=$41;
 HEAP32[(($657)>>2)]=3344;
 var $658=(($tmpcast715+4)|0);
 HEAP32[(($658)>>2)]=$656;
 var $659=HEAP32[(($60)>>2)];
 var $660=($655|0)==($659|0);
 if($660){label=240;break;}else{label=237;break;}
 case 237: 
 var $662=($655|0)==0;
 if($662){var $666=0;label=239;break;}else{label=238;break;}
 case 238: 
 var $664=$655;
 var $ld$156$0=(($41)|0);
 var $665$0=HEAP32[(($ld$156$0)>>2)];
 var $ld$157$1=(($41+4)|0);
 var $665$1=HEAP32[(($ld$157$1)>>2)];
 var $st$158$0=(($664)|0);
 HEAP32[(($st$158$0)>>2)]=$665$0;
 var $st$159$1=(($664+4)|0);
 HEAP32[(($st$159$1)>>2)]=$665$1;
 var $_pre770=HEAP32[(($59)>>2)];
 var $666=$_pre770;label=239;break;
 case 239: 
 var $666;
 var $667=(($666+8)|0);
 HEAP32[(($59)>>2)]=$667;
 var $670=$667;label=242;break;
 case 240: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast715) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=332;break; }
 case 241: 
 var $_pre905=HEAP32[(($59)>>2)];
 var $670=$_pre905;label=242;break;
 case 242: 
 var $670;
 var $671=(($this+176)|0);
 var $672=$42;
 HEAP32[(($672)>>2)]=3256;
 var $673=(($tmpcast714+4)|0);
 HEAP32[(($673)>>2)]=$671;
 var $674=HEAP32[(($60)>>2)];
 var $675=($670|0)==($674|0);
 if($675){label=246;break;}else{label=243;break;}
 case 243: 
 var $677=($670|0)==0;
 if($677){var $681=0;label=245;break;}else{label=244;break;}
 case 244: 
 var $679=$670;
 var $ld$160$0=(($42)|0);
 var $680$0=HEAP32[(($ld$160$0)>>2)];
 var $ld$161$1=(($42+4)|0);
 var $680$1=HEAP32[(($ld$161$1)>>2)];
 var $st$162$0=(($679)|0);
 HEAP32[(($st$162$0)>>2)]=$680$0;
 var $st$163$1=(($679+4)|0);
 HEAP32[(($st$163$1)>>2)]=$680$1;
 var $_pre769=HEAP32[(($59)>>2)];
 var $681=$_pre769;label=245;break;
 case 245: 
 var $681;
 var $682=(($681+8)|0);
 HEAP32[(($59)>>2)]=$682;
 var $685=$682;label=248;break;
 case 246: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast714) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=332;break; }
 case 247: 
 var $_pre906=HEAP32[(($59)>>2)];
 var $685=$_pre906;label=248;break;
 case 248: 
 var $685;
 var $686=(($this+180)|0);
 var $687=$43;
 HEAP32[(($687)>>2)]=3200;
 var $688=(($tmpcast713+4)|0);
 HEAP32[(($688)>>2)]=$686;
 var $689=HEAP32[(($60)>>2)];
 var $690=($685|0)==($689|0);
 if($690){label=252;break;}else{label=249;break;}
 case 249: 
 var $692=($685|0)==0;
 if($692){var $696=0;label=251;break;}else{label=250;break;}
 case 250: 
 var $694=$685;
 var $ld$164$0=(($43)|0);
 var $695$0=HEAP32[(($ld$164$0)>>2)];
 var $ld$165$1=(($43+4)|0);
 var $695$1=HEAP32[(($ld$165$1)>>2)];
 var $st$166$0=(($694)|0);
 HEAP32[(($st$166$0)>>2)]=$695$0;
 var $st$167$1=(($694+4)|0);
 HEAP32[(($st$167$1)>>2)]=$695$1;
 var $_pre768=HEAP32[(($59)>>2)];
 var $696=$_pre768;label=251;break;
 case 251: 
 var $696;
 var $697=(($696+8)|0);
 HEAP32[(($59)>>2)]=$697;
 var $700=$697;label=254;break;
 case 252: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast713) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=253;break; } else { label=332;break; }
 case 253: 
 var $_pre907=HEAP32[(($59)>>2)];
 var $700=$_pre907;label=254;break;
 case 254: 
 var $700;
 var $701=(($this+140)|0);
 var $702=$44;
 HEAP32[(($702)>>2)]=3160;
 var $703=(($tmpcast712+4)|0);
 HEAP32[(($703)>>2)]=$701;
 var $704=HEAP32[(($60)>>2)];
 var $705=($700|0)==($704|0);
 if($705){label=258;break;}else{label=255;break;}
 case 255: 
 var $707=($700|0)==0;
 if($707){var $711=0;label=257;break;}else{label=256;break;}
 case 256: 
 var $709=$700;
 var $ld$168$0=(($44)|0);
 var $710$0=HEAP32[(($ld$168$0)>>2)];
 var $ld$169$1=(($44+4)|0);
 var $710$1=HEAP32[(($ld$169$1)>>2)];
 var $st$170$0=(($709)|0);
 HEAP32[(($st$170$0)>>2)]=$710$0;
 var $st$171$1=(($709+4)|0);
 HEAP32[(($st$171$1)>>2)]=$710$1;
 var $_pre767=HEAP32[(($59)>>2)];
 var $711=$_pre767;label=257;break;
 case 257: 
 var $711;
 var $712=(($711+8)|0);
 HEAP32[(($59)>>2)]=$712;
 var $715=$712;label=260;break;
 case 258: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=259;break; } else { label=332;break; }
 case 259: 
 var $_pre908=HEAP32[(($59)>>2)];
 var $715=$_pre908;label=260;break;
 case 260: 
 var $715;
 var $716=(($this+144)|0);
 var $717=$45;
 HEAP32[(($717)>>2)]=3144;
 var $718=(($tmpcast711+4)|0);
 HEAP32[(($718)>>2)]=$716;
 var $719=HEAP32[(($60)>>2)];
 var $720=($715|0)==($719|0);
 if($720){label=264;break;}else{label=261;break;}
 case 261: 
 var $722=($715|0)==0;
 if($722){var $726=0;label=263;break;}else{label=262;break;}
 case 262: 
 var $724=$715;
 var $ld$172$0=(($45)|0);
 var $725$0=HEAP32[(($ld$172$0)>>2)];
 var $ld$173$1=(($45+4)|0);
 var $725$1=HEAP32[(($ld$173$1)>>2)];
 var $st$174$0=(($724)|0);
 HEAP32[(($st$174$0)>>2)]=$725$0;
 var $st$175$1=(($724+4)|0);
 HEAP32[(($st$175$1)>>2)]=$725$1;
 var $_pre766=HEAP32[(($59)>>2)];
 var $726=$_pre766;label=263;break;
 case 263: 
 var $726;
 var $727=(($726+8)|0);
 HEAP32[(($59)>>2)]=$727;
 var $730=$727;label=266;break;
 case 264: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast711) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=265;break; } else { label=332;break; }
 case 265: 
 var $_pre909=HEAP32[(($59)>>2)];
 var $730=$_pre909;label=266;break;
 case 266: 
 var $730;
 var $731=(($this+148)|0);
 var $732=$46;
 HEAP32[(($732)>>2)]=2824;
 var $733=(($tmpcast710+4)|0);
 HEAP32[(($733)>>2)]=$731;
 var $734=HEAP32[(($60)>>2)];
 var $735=($730|0)==($734|0);
 if($735){label=270;break;}else{label=267;break;}
 case 267: 
 var $737=($730|0)==0;
 if($737){var $741=0;label=269;break;}else{label=268;break;}
 case 268: 
 var $739=$730;
 var $ld$176$0=(($46)|0);
 var $740$0=HEAP32[(($ld$176$0)>>2)];
 var $ld$177$1=(($46+4)|0);
 var $740$1=HEAP32[(($ld$177$1)>>2)];
 var $st$178$0=(($739)|0);
 HEAP32[(($st$178$0)>>2)]=$740$0;
 var $st$179$1=(($739+4)|0);
 HEAP32[(($st$179$1)>>2)]=$740$1;
 var $_pre765=HEAP32[(($59)>>2)];
 var $741=$_pre765;label=269;break;
 case 269: 
 var $741;
 var $742=(($741+8)|0);
 HEAP32[(($59)>>2)]=$742;
 var $745=$742;label=272;break;
 case 270: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast710) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=271;break; } else { label=332;break; }
 case 271: 
 var $_pre910=HEAP32[(($59)>>2)];
 var $745=$_pre910;label=272;break;
 case 272: 
 var $745;
 var $746=(($this+152)|0);
 var $747=$47;
 HEAP32[(($747)>>2)]=2256;
 var $748=(($tmpcast709+4)|0);
 HEAP32[(($748)>>2)]=$746;
 var $749=HEAP32[(($60)>>2)];
 var $750=($745|0)==($749|0);
 if($750){label=276;break;}else{label=273;break;}
 case 273: 
 var $752=($745|0)==0;
 if($752){var $756=0;label=275;break;}else{label=274;break;}
 case 274: 
 var $754=$745;
 var $ld$180$0=(($47)|0);
 var $755$0=HEAP32[(($ld$180$0)>>2)];
 var $ld$181$1=(($47+4)|0);
 var $755$1=HEAP32[(($ld$181$1)>>2)];
 var $st$182$0=(($754)|0);
 HEAP32[(($st$182$0)>>2)]=$755$0;
 var $st$183$1=(($754+4)|0);
 HEAP32[(($st$183$1)>>2)]=$755$1;
 var $_pre764=HEAP32[(($59)>>2)];
 var $756=$_pre764;label=275;break;
 case 275: 
 var $756;
 var $757=(($756+8)|0);
 HEAP32[(($59)>>2)]=$757;
 var $760=$757;label=278;break;
 case 276: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast709) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=277;break; } else { label=332;break; }
 case 277: 
 var $_pre911=HEAP32[(($59)>>2)];
 var $760=$_pre911;label=278;break;
 case 278: 
 var $760;
 var $761=(($this+156)|0);
 var $762=$48;
 HEAP32[(($762)>>2)]=2208;
 var $763=(($tmpcast708+4)|0);
 HEAP32[(($763)>>2)]=$761;
 var $764=HEAP32[(($60)>>2)];
 var $765=($760|0)==($764|0);
 if($765){label=282;break;}else{label=279;break;}
 case 279: 
 var $767=($760|0)==0;
 if($767){var $771=0;label=281;break;}else{label=280;break;}
 case 280: 
 var $769=$760;
 var $ld$184$0=(($48)|0);
 var $770$0=HEAP32[(($ld$184$0)>>2)];
 var $ld$185$1=(($48+4)|0);
 var $770$1=HEAP32[(($ld$185$1)>>2)];
 var $st$186$0=(($769)|0);
 HEAP32[(($st$186$0)>>2)]=$770$0;
 var $st$187$1=(($769+4)|0);
 HEAP32[(($st$187$1)>>2)]=$770$1;
 var $_pre763=HEAP32[(($59)>>2)];
 var $771=$_pre763;label=281;break;
 case 281: 
 var $771;
 var $772=(($771+8)|0);
 HEAP32[(($59)>>2)]=$772;
 var $775=$772;label=284;break;
 case 282: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast708) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=283;break; } else { label=332;break; }
 case 283: 
 var $_pre912=HEAP32[(($59)>>2)];
 var $775=$_pre912;label=284;break;
 case 284: 
 var $775;
 var $776=(($this+268)|0);
 var $777=$49;
 HEAP32[(($777)>>2)]=2184;
 var $778=(($tmpcast707+4)|0);
 HEAP32[(($778)>>2)]=$776;
 var $779=HEAP32[(($60)>>2)];
 var $780=($775|0)==($779|0);
 if($780){label=288;break;}else{label=285;break;}
 case 285: 
 var $782=($775|0)==0;
 if($782){var $786=0;label=287;break;}else{label=286;break;}
 case 286: 
 var $784=$775;
 var $ld$188$0=(($49)|0);
 var $785$0=HEAP32[(($ld$188$0)>>2)];
 var $ld$189$1=(($49+4)|0);
 var $785$1=HEAP32[(($ld$189$1)>>2)];
 var $st$190$0=(($784)|0);
 HEAP32[(($st$190$0)>>2)]=$785$0;
 var $st$191$1=(($784+4)|0);
 HEAP32[(($st$191$1)>>2)]=$785$1;
 var $_pre762=HEAP32[(($59)>>2)];
 var $786=$_pre762;label=287;break;
 case 287: 
 var $786;
 var $787=(($786+8)|0);
 HEAP32[(($59)>>2)]=$787;
 var $790=$787;label=290;break;
 case 288: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast707) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=289;break; } else { label=332;break; }
 case 289: 
 var $_pre913=HEAP32[(($59)>>2)];
 var $790=$_pre913;label=290;break;
 case 290: 
 var $790;
 var $791=(($this+272)|0);
 var $792=$50;
 HEAP32[(($792)>>2)]=2160;
 var $793=(($tmpcast706+4)|0);
 HEAP32[(($793)>>2)]=$791;
 var $794=HEAP32[(($60)>>2)];
 var $795=($790|0)==($794|0);
 if($795){label=294;break;}else{label=291;break;}
 case 291: 
 var $797=($790|0)==0;
 if($797){var $801=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $799=$790;
 var $ld$192$0=(($50)|0);
 var $800$0=HEAP32[(($ld$192$0)>>2)];
 var $ld$193$1=(($50+4)|0);
 var $800$1=HEAP32[(($ld$193$1)>>2)];
 var $st$194$0=(($799)|0);
 HEAP32[(($st$194$0)>>2)]=$800$0;
 var $st$195$1=(($799+4)|0);
 HEAP32[(($st$195$1)>>2)]=$800$1;
 var $_pre761=HEAP32[(($59)>>2)];
 var $801=$_pre761;label=293;break;
 case 293: 
 var $801;
 var $802=(($801+8)|0);
 HEAP32[(($59)>>2)]=$802;
 var $805=$802;label=296;break;
 case 294: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast706) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=332;break; }
 case 295: 
 var $_pre914=HEAP32[(($59)>>2)];
 var $805=$_pre914;label=296;break;
 case 296: 
 var $805;
 var $806=(($this+284)|0);
 var $807=$51;
 HEAP32[(($807)>>2)]=2104;
 var $808=(($tmpcast705+4)|0);
 HEAP32[(($808)>>2)]=$806;
 var $809=HEAP32[(($60)>>2)];
 var $810=($805|0)==($809|0);
 if($810){label=300;break;}else{label=297;break;}
 case 297: 
 var $812=($805|0)==0;
 if($812){var $816=0;label=299;break;}else{label=298;break;}
 case 298: 
 var $814=$805;
 var $ld$196$0=(($51)|0);
 var $815$0=HEAP32[(($ld$196$0)>>2)];
 var $ld$197$1=(($51+4)|0);
 var $815$1=HEAP32[(($ld$197$1)>>2)];
 var $st$198$0=(($814)|0);
 HEAP32[(($st$198$0)>>2)]=$815$0;
 var $st$199$1=(($814+4)|0);
 HEAP32[(($st$199$1)>>2)]=$815$1;
 var $_pre760=HEAP32[(($59)>>2)];
 var $816=$_pre760;label=299;break;
 case 299: 
 var $816;
 var $817=(($816+8)|0);
 HEAP32[(($59)>>2)]=$817;
 var $820=$817;label=302;break;
 case 300: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast705) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { label=332;break; }
 case 301: 
 var $_pre915=HEAP32[(($59)>>2)];
 var $820=$_pre915;label=302;break;
 case 302: 
 var $820;
 var $821=(($this+288)|0);
 var $822=$52;
 HEAP32[(($822)>>2)]=2008;
 var $823=(($tmpcast704+4)|0);
 HEAP32[(($823)>>2)]=$821;
 var $824=HEAP32[(($60)>>2)];
 var $825=($820|0)==($824|0);
 if($825){label=306;break;}else{label=303;break;}
 case 303: 
 var $827=($820|0)==0;
 if($827){var $831=0;label=305;break;}else{label=304;break;}
 case 304: 
 var $829=$820;
 var $ld$200$0=(($52)|0);
 var $830$0=HEAP32[(($ld$200$0)>>2)];
 var $ld$201$1=(($52+4)|0);
 var $830$1=HEAP32[(($ld$201$1)>>2)];
 var $st$202$0=(($829)|0);
 HEAP32[(($st$202$0)>>2)]=$830$0;
 var $st$203$1=(($829+4)|0);
 HEAP32[(($st$203$1)>>2)]=$830$1;
 var $_pre759=HEAP32[(($59)>>2)];
 var $831=$_pre759;label=305;break;
 case 305: 
 var $831;
 var $832=(($831+8)|0);
 HEAP32[(($59)>>2)]=$832;
 var $835=$832;label=308;break;
 case 306: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=307;break; } else { label=332;break; }
 case 307: 
 var $_pre916=HEAP32[(($59)>>2)];
 var $835=$_pre916;label=308;break;
 case 308: 
 var $835;
 var $836=(($this+292)|0);
 var $837=$53;
 HEAP32[(($837)>>2)]=1928;
 var $838=(($tmpcast703+4)|0);
 HEAP32[(($838)>>2)]=$836;
 var $839=HEAP32[(($60)>>2)];
 var $840=($835|0)==($839|0);
 if($840){label=312;break;}else{label=309;break;}
 case 309: 
 var $842=($835|0)==0;
 if($842){var $846=0;label=311;break;}else{label=310;break;}
 case 310: 
 var $844=$835;
 var $ld$204$0=(($53)|0);
 var $845$0=HEAP32[(($ld$204$0)>>2)];
 var $ld$205$1=(($53+4)|0);
 var $845$1=HEAP32[(($ld$205$1)>>2)];
 var $st$206$0=(($844)|0);
 HEAP32[(($st$206$0)>>2)]=$845$0;
 var $st$207$1=(($844+4)|0);
 HEAP32[(($st$207$1)>>2)]=$845$1;
 var $_pre758=HEAP32[(($59)>>2)];
 var $846=$_pre758;label=311;break;
 case 311: 
 var $846;
 var $847=(($846+8)|0);
 HEAP32[(($59)>>2)]=$847;
 var $850=$847;label=314;break;
 case 312: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast703) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=313;break; } else { label=332;break; }
 case 313: 
 var $_pre917=HEAP32[(($59)>>2)];
 var $850=$_pre917;label=314;break;
 case 314: 
 var $850;
 var $851=(($this+296)|0);
 var $852=$54;
 HEAP32[(($852)>>2)]=1880;
 var $853=(($tmpcast702+4)|0);
 HEAP32[(($853)>>2)]=$851;
 var $854=HEAP32[(($60)>>2)];
 var $855=($850|0)==($854|0);
 if($855){label=318;break;}else{label=315;break;}
 case 315: 
 var $857=($850|0)==0;
 if($857){var $861=0;label=317;break;}else{label=316;break;}
 case 316: 
 var $859=$850;
 var $ld$208$0=(($54)|0);
 var $860$0=HEAP32[(($ld$208$0)>>2)];
 var $ld$209$1=(($54+4)|0);
 var $860$1=HEAP32[(($ld$209$1)>>2)];
 var $st$210$0=(($859)|0);
 HEAP32[(($st$210$0)>>2)]=$860$0;
 var $st$211$1=(($859+4)|0);
 HEAP32[(($st$211$1)>>2)]=$860$1;
 var $_pre757=HEAP32[(($59)>>2)];
 var $861=$_pre757;label=317;break;
 case 317: 
 var $861;
 var $862=(($861+8)|0);
 HEAP32[(($59)>>2)]=$862;
 var $865=$862;label=320;break;
 case 318: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast702) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=319;break; } else { label=332;break; }
 case 319: 
 var $_pre918=HEAP32[(($59)>>2)];
 var $865=$_pre918;label=320;break;
 case 320: 
 var $865;
 var $866=(($this+300)|0);
 var $867=$55;
 HEAP32[(($867)>>2)]=1800;
 var $868=(($tmpcast701+4)|0);
 HEAP32[(($868)>>2)]=$866;
 var $869=HEAP32[(($60)>>2)];
 var $870=($865|0)==($869|0);
 if($870){label=324;break;}else{label=321;break;}
 case 321: 
 var $872=($865|0)==0;
 if($872){var $876=0;label=323;break;}else{label=322;break;}
 case 322: 
 var $874=$865;
 var $ld$212$0=(($55)|0);
 var $875$0=HEAP32[(($ld$212$0)>>2)];
 var $ld$213$1=(($55+4)|0);
 var $875$1=HEAP32[(($ld$213$1)>>2)];
 var $st$214$0=(($874)|0);
 HEAP32[(($st$214$0)>>2)]=$875$0;
 var $st$215$1=(($874+4)|0);
 HEAP32[(($st$215$1)>>2)]=$875$1;
 var $_pre756=HEAP32[(($59)>>2)];
 var $876=$_pre756;label=323;break;
 case 323: 
 var $876;
 var $877=(($876+8)|0);
 HEAP32[(($59)>>2)]=$877;
 var $880=$877;label=326;break;
 case 324: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast701) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=325;break; } else { label=332;break; }
 case 325: 
 var $_pre919=HEAP32[(($59)>>2)];
 var $880=$_pre919;label=326;break;
 case 326: 
 var $880;
 var $881=(($this+304)|0);
 var $882=$56;
 HEAP32[(($882)>>2)]=1728;
 var $883=(($tmpcast+4)|0);
 HEAP32[(($883)>>2)]=$881;
 var $884=HEAP32[(($60)>>2)];
 var $885=($880|0)==($884|0);
 if($885){label=330;break;}else{label=327;break;}
 case 327: 
 var $887=($880|0)==0;
 if($887){var $891=0;label=329;break;}else{label=328;break;}
 case 328: 
 var $889=$880;
 var $ld$216$0=(($56)|0);
 var $890$0=HEAP32[(($ld$216$0)>>2)];
 var $ld$217$1=(($56+4)|0);
 var $890$1=HEAP32[(($ld$217$1)>>2)];
 var $st$218$0=(($889)|0);
 HEAP32[(($st$218$0)>>2)]=$890$0;
 var $st$219$1=(($889+4)|0);
 HEAP32[(($st$219$1)>>2)]=$890$1;
 var $_pre=HEAP32[(($59)>>2)];
 var $891=$_pre;label=329;break;
 case 329: 
 var $891;
 var $892=(($891+8)|0);
 HEAP32[(($59)>>2)]=$892;
 label=331;break;
 case 330: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($57,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=331;break; } else { label=332;break; }
 case 331: 
 STACKTOP=sp;return;
 case 332: 
 var $895$0 = ___cxa_find_matching_catch(-1, -1); var $895$1 = tempRet0;
 var $896=HEAP32[(($58)>>2)];
 var $897=$896;
 var $898=($896|0)==0;
 if($898){label=336;break;}else{label=333;break;}
 case 333: 
 var $899=HEAP32[(($59)>>2)];
 var $900=($896|0)==($899|0);
 if($900){label=335;break;}else{label=334;break;}
 case 334: 
 var $scevgep_i_i_i=((($899)-(8))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $901=(((-$897))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$901)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $902=$uglygep29_i_i_i>>>3;
 var $903=$902^-1;
 var $scevgep30_i_i_i=(($899+($903<<3))|0);
 HEAP32[(($59)>>2)]=$scevgep30_i_i_i;
 label=335;break;
 case 335: 
 var $904=$896;
 __ZdlPv($904);
 label=336;break;
 case 336: 
 ___resumeException($895$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14ConfigSettings10setSettingEPKcS1_($this,$key,$value){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>3;
 var $n_0=0;label=2;break;
 case 2: 
 var $n_0;
 var $10=($n_0>>>0)<($8>>>0);
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=(($4+($n_0<<3))|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_strcasecmp($key,$13);
 var $15=($14|0)==0;
 var $16=((($n_0)+(1))|0);
 if($15){label=4;break;}else{var $n_0=$16;label=2;break;}
 case 4: 
 var $18=_atoi($value);
 var $19=(($4+($n_0<<3)+4)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($20)>>2)]=$18;
 var $_0=1;label=9;break;
 case 5: 
 var $22=_strcasecmp($key,1696);
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=(($this+404)|0);
 HEAP32[(($25)>>2)]=$value;
 var $_0=1;label=9;break;
 case 7: 
 var $27=_strcasecmp($key,1640);
 var $28=($27|0)==0;
 if($28){label=8;break;}else{var $_0=0;label=9;break;}
 case 8: 
 var $30=(($this+408)|0);
 HEAP32[(($30)>>2)]=$value;
 var $_0=1;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI19_ConfigSettingIndexNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>3;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>536870911;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>3;
 var $21=($20>>>0)>268435454;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>3;
 var $_044=536870911;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>2;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>3;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<3;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<3))|0);
 var $43=(($41+($_045<<3))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=$__x;
 var $47=$42;
 var $ld$0$0=(($46)|0);
 var $48$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($46+4)|0);
 var $48$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($47)|0);
 HEAP32[(($st$2$0)>>2)]=$48$0;
 var $st$3$1=(($47+4)|0);
 HEAP32[(($st$3$1)>>2)]=$48$1;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $49=(($41+($_sum<<3))|0);
 var $50=$41;
 var $51=$14;
 assert($40 % 1 === 0);(_memcpy($50, $51, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$49;
 HEAP32[(($15)>>2)]=$43;
 var $52=($14|0)==0;
 if($52){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($51);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z18loadModelSTL_asciiPKcR10FMatrix3x3($filename,$matrix){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(40);
 var $buffer=(sp)+(56);
 var $vertex=(sp)+(1080);
 var $3=__Znwj(12);
 var $4=$3;
 var $5=$3;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($5)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($5+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $6=$3;
 HEAP32[(($6)>>2)]=0;
 var $7=(($3+4)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=0;
 var $9=(($3+8)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=0;
 var $11=$2;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($11)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($11+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $12=(($2)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($2+4)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=(($2+8)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$3;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI12SimpleVolumeNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($15,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $_pre131=HEAP32[(($12)>>2)];
 var $16=$_pre131;
 var $17=($_pre131|0)==0;
 if($17){label=6;break;}else{label=3;break;}
 case 3: 
 var $18=HEAP32[(($13)>>2)];
 var $19=($_pre131|0)==($18|0);
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 var $scevgep_i_i_i_i_i39=((($18)-(36))|0);
 var $scevgep28_i_i_i_i_i40=$scevgep_i_i_i_i_i39;
 var $20=(((-$16))|0);
 var $uglygep_i_i_i_i_i41=(($scevgep28_i_i_i_i_i40+$20)|0);
 var $uglygep29_i_i_i_i_i42=$uglygep_i_i_i_i_i41;
 var $21=(((($uglygep29_i_i_i_i_i42>>>0))/(36))&-1);
 var $22=$21^-1;
 var $scevgep30_i_i_i_i_i43=(($18+((($22)*(36))&-1))|0);
 HEAP32[(($13)>>2)]=$scevgep30_i_i_i_i_i43;
 label=5;break;
 case 5: 
 var $23=$_pre131;
 __ZdlPv($23);
 label=6;break;
 case 6: 
 var $24=HEAP32[(($6)>>2)];
 var $25=_fopen($filename,5984);
 var $26=(($buffer)|0);
 var $27=(($vertex)|0);
 var $28=(($vertex+8)|0);
 var $29=(($vertex+16)|0);
 var $30=(($matrix)|0);
 var $31=(($matrix+24)|0);
 var $32=(($matrix+48)|0);
 var $33=(($matrix+8)|0);
 var $34=(($matrix+32)|0);
 var $35=(($matrix+56)|0);
 var $36=(($matrix+16)|0);
 var $37=(($matrix+40)|0);
 var $38=(($matrix+64)|0);
 var $39=$1;
 var $v0_sroa_0_0__idx=(($1)|0);
 var $v0_sroa_1_4__idx63=(($1+4)|0);
 var $v0_sroa_2_8__idx64=(($1+8)|0);
 var $v1_sroa_0_0__idx=(($1+12)|0);
 var $v1_sroa_1_4__idx61=(($1+16)|0);
 var $v1_sroa_2_8__idx62=(($1+20)|0);
 var $v2_sroa_0_0__idx=(($1+24)|0);
 var $v2_sroa_1_4__idx59=(($1+28)|0);
 var $v2_sroa_2_8__idx60=(($1+32)|0);
 var $40=(($24+4)|0);
 var $41=(($24+8)|0);
 var $42=(($24)|0);
 var $n_0_ph=0;var $v1_sroa_0_0_copyload95_ph=0;var $v1_sroa_1_4_copyload96_ph=0;var $v1_sroa_2_8_copyload97_ph=0;var $v0_sroa_0_0_copyload98_ph=0;var $v0_sroa_1_4_copyload99_ph=0;var $v0_sroa_2_8_copyload100_ph=0;label=7;break;
 case 7: 
 var $v0_sroa_2_8_copyload100_ph;
 var $v0_sroa_1_4_copyload99_ph;
 var $v0_sroa_0_0_copyload98_ph;
 var $v1_sroa_2_8_copyload97_ph;
 var $v1_sroa_1_4_copyload96_ph;
 var $v1_sroa_0_0_copyload95_ph;
 var $n_0_ph;
 var $n_0_ph107=$n_0_ph;var $v1_sroa_0_0_copyload95_ph106=$v1_sroa_0_0_copyload95_ph;var $v1_sroa_1_4_copyload96_ph105=$v1_sroa_1_4_copyload96_ph;var $v1_sroa_2_8_copyload97_ph104=$v1_sroa_2_8_copyload97_ph;label=8;break;
 case 8: 
 var $v1_sroa_2_8_copyload97_ph104;
 var $v1_sroa_1_4_copyload96_ph105;
 var $v1_sroa_0_0_copyload95_ph106;
 var $n_0_ph107;
 var $n_0_ph109=$n_0_ph107;label=9;break;
 case 9: 
 var $n_0_ph109;
 var $_01113_i=$26;var $_01014_i=1024;label=10;break;
 case 10: 
 var $_01014_i;
 var $_01113_i;
 var $43=_fread($_01113_i,1,1,$25);
 var $44=($43|0)==0;
 if($44){label=27;break;}else{label=11;break;}
 case 11: 
 var $46=HEAP8[($_01113_i)];
 if((($46<<24)>>24)==10|(($46<<24)>>24)==13){ label=13;break;}else{label=12;break;}
 case 12: 
 var $48=(($_01113_i+1)|0);
 var $49=((($_01014_i)+(1))|0);
 var $50=($49|0)==0;
 if($50){label=27;break;}else{var $_01113_i=$48;var $_01014_i=$49;label=10;break;}
 case 13: 
 HEAP8[($_01113_i)]=0;
 var $51=($_01113_i|0)==0;
 if($51){label=27;break;}else{label=14;break;}
 case 14: 
 var $53=_sscanf($26,5752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,HEAP32[(((tempVarArgs)+(16))>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs;
 var $54=($53|0)==3;
 if($54){label=15;break;}else{var $_01113_i=$26;var $_01014_i=1024;label=10;break;}
 case 15: 
 var $56=((($n_0_ph109)+(1))|0);
 if(($n_0_ph109|0)==0){ label=20;break;}else if(($n_0_ph109|0)==1){ label=21;break;}else if(($n_0_ph109|0)==2){ label=22;break;}else{var $n_0_ph109=$56;label=9;break;}
 case 16: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $_pre=HEAP32[(($12)>>2)];
 var $58=$_pre;
 var $59=($_pre|0)==0;
 if($59){label=28;break;}else{label=17;break;}
 case 17: 
 var $60=HEAP32[(($13)>>2)];
 var $61=($_pre|0)==($60|0);
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $scevgep_i_i_i_i_i=((($60)-(36))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $62=(((-$58))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$62)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $63=(((($uglygep29_i_i_i_i_i>>>0))/(36))&-1);
 var $64=$63^-1;
 var $scevgep30_i_i_i_i_i=(($60+((($64)*(36))&-1))|0);
 HEAP32[(($13)>>2)]=$scevgep30_i_i_i_i_i;
 label=19;break;
 case 19: 
 var $65=$_pre;
 __ZdlPv($65);
 label=28;break;
 case 20: 
 var $_sroa_090_0_copyload=HEAPF64[(($27)>>3)];
 var $_sroa_191_8_copyload=HEAPF64[(($28)>>3)];
 var $_sroa_293_16_copyload=HEAPF64[(($29)>>3)];
 var $67=HEAPF64[(($30)>>3)];
 var $68=($_sroa_090_0_copyload)*($67);
 var $69=HEAPF64[(($31)>>3)];
 var $70=($_sroa_191_8_copyload)*($69);
 var $71=($68)+($70);
 var $72=HEAPF64[(($32)>>3)];
 var $73=($_sroa_293_16_copyload)*($72);
 var $74=($71)+($73);
 var $75=($74)*(1000);
 var $76=(($75)&-1);
 var $77=HEAPF64[(($33)>>3)];
 var $78=($_sroa_090_0_copyload)*($77);
 var $79=HEAPF64[(($34)>>3)];
 var $80=($_sroa_191_8_copyload)*($79);
 var $81=($78)+($80);
 var $82=HEAPF64[(($35)>>3)];
 var $83=($_sroa_293_16_copyload)*($82);
 var $84=($81)+($83);
 var $85=($84)*(1000);
 var $86=(($85)&-1);
 var $87=HEAPF64[(($36)>>3)];
 var $88=($_sroa_090_0_copyload)*($87);
 var $89=HEAPF64[(($37)>>3)];
 var $90=($_sroa_191_8_copyload)*($89);
 var $91=($88)+($90);
 var $92=HEAPF64[(($38)>>3)];
 var $93=($_sroa_293_16_copyload)*($92);
 var $94=($91)+($93);
 var $95=($94)*(1000);
 var $96=(($95)&-1);
 var $n_0_ph=$56;var $v1_sroa_0_0_copyload95_ph=$v1_sroa_0_0_copyload95_ph106;var $v1_sroa_1_4_copyload96_ph=$v1_sroa_1_4_copyload96_ph105;var $v1_sroa_2_8_copyload97_ph=$v1_sroa_2_8_copyload97_ph104;var $v0_sroa_0_0_copyload98_ph=$76;var $v0_sroa_1_4_copyload99_ph=$86;var $v0_sroa_2_8_copyload100_ph=$96;label=7;break;
 case 21: 
 var $_sroa_080_0_copyload=HEAPF64[(($27)>>3)];
 var $_sroa_181_8_copyload=HEAPF64[(($28)>>3)];
 var $_sroa_283_16_copyload=HEAPF64[(($29)>>3)];
 var $98=HEAPF64[(($30)>>3)];
 var $99=($_sroa_080_0_copyload)*($98);
 var $100=HEAPF64[(($31)>>3)];
 var $101=($_sroa_181_8_copyload)*($100);
 var $102=($99)+($101);
 var $103=HEAPF64[(($32)>>3)];
 var $104=($_sroa_283_16_copyload)*($103);
 var $105=($102)+($104);
 var $106=($105)*(1000);
 var $107=(($106)&-1);
 var $108=HEAPF64[(($33)>>3)];
 var $109=($_sroa_080_0_copyload)*($108);
 var $110=HEAPF64[(($34)>>3)];
 var $111=($_sroa_181_8_copyload)*($110);
 var $112=($109)+($111);
 var $113=HEAPF64[(($35)>>3)];
 var $114=($_sroa_283_16_copyload)*($113);
 var $115=($112)+($114);
 var $116=($115)*(1000);
 var $117=(($116)&-1);
 var $118=HEAPF64[(($36)>>3)];
 var $119=($_sroa_080_0_copyload)*($118);
 var $120=HEAPF64[(($37)>>3)];
 var $121=($_sroa_181_8_copyload)*($120);
 var $122=($119)+($121);
 var $123=HEAPF64[(($38)>>3)];
 var $124=($_sroa_283_16_copyload)*($123);
 var $125=($122)+($124);
 var $126=($125)*(1000);
 var $127=(($126)&-1);
 var $n_0_ph107=$56;var $v1_sroa_0_0_copyload95_ph106=$107;var $v1_sroa_1_4_copyload96_ph105=$117;var $v1_sroa_2_8_copyload97_ph104=$127;label=8;break;
 case 22: 
 var $_sroa_070_0_copyload=HEAPF64[(($27)>>3)];
 var $_sroa_171_8_copyload=HEAPF64[(($28)>>3)];
 var $_sroa_273_16_copyload=HEAPF64[(($29)>>3)];
 var $129=HEAPF64[(($30)>>3)];
 var $130=($_sroa_070_0_copyload)*($129);
 var $131=HEAPF64[(($31)>>3)];
 var $132=($_sroa_171_8_copyload)*($131);
 var $133=($130)+($132);
 var $134=HEAPF64[(($32)>>3)];
 var $135=($_sroa_273_16_copyload)*($134);
 var $136=($133)+($135);
 var $137=($136)*(1000);
 var $138=(($137)&-1);
 var $139=HEAPF64[(($33)>>3)];
 var $140=($_sroa_070_0_copyload)*($139);
 var $141=HEAPF64[(($34)>>3)];
 var $142=($_sroa_171_8_copyload)*($141);
 var $143=($140)+($142);
 var $144=HEAPF64[(($35)>>3)];
 var $145=($_sroa_273_16_copyload)*($144);
 var $146=($143)+($145);
 var $147=($146)*(1000);
 var $148=(($147)&-1);
 var $149=HEAPF64[(($36)>>3)];
 var $150=($_sroa_070_0_copyload)*($149);
 var $151=HEAPF64[(($37)>>3)];
 var $152=($_sroa_171_8_copyload)*($151);
 var $153=($150)+($152);
 var $154=HEAPF64[(($38)>>3)];
 var $155=($_sroa_273_16_copyload)*($154);
 var $156=($153)+($155);
 var $157=($156)*(1000);
 var $158=(($157)&-1);
 HEAP32[(($v0_sroa_0_0__idx)>>2)]=$v0_sroa_0_0_copyload98_ph;
 HEAP32[(($v0_sroa_1_4__idx63)>>2)]=$v0_sroa_1_4_copyload99_ph;
 HEAP32[(($v0_sroa_2_8__idx64)>>2)]=$v0_sroa_2_8_copyload100_ph;
 HEAP32[(($v1_sroa_0_0__idx)>>2)]=$v1_sroa_0_0_copyload95_ph106;
 HEAP32[(($v1_sroa_1_4__idx61)>>2)]=$v1_sroa_1_4_copyload96_ph105;
 HEAP32[(($v1_sroa_2_8__idx62)>>2)]=$v1_sroa_2_8_copyload97_ph104;
 HEAP32[(($v2_sroa_0_0__idx)>>2)]=$138;
 HEAP32[(($v2_sroa_1_4__idx59)>>2)]=$148;
 HEAP32[(($v2_sroa_2_8__idx60)>>2)]=$158;
 var $159=HEAP32[(($40)>>2)];
 var $160=HEAP32[(($41)>>2)];
 var $161=($159|0)==($160|0);
 if($161){label=26;break;}else{label=23;break;}
 case 23: 
 var $163=($159|0)==0;
 if($163){var $166=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $165=$159;
 assert(36 % 1 === 0);(_memcpy($165, $39, 36)|0);
 var $_pre_i=HEAP32[(($40)>>2)];
 var $166=$_pre_i;label=25;break;
 case 25: 
 var $166;
 var $167=(($166+36)|0);
 HEAP32[(($40)>>2)]=$167;
 var $n_0_ph109=0;label=9;break;
 case 26: 
 __ZNSt3__16vectorI10SimpleFaceNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($42,$1);
 var $n_0_ph109=0;label=9;break;
 case 27: 
 var $169=_fclose($25);
 STACKTOP=sp;return $4;
 case 28: 
 ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z19loadModelSTL_binaryPKcR10FMatrix3x3($filename,$matrix){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $buffer=(sp)+(40);
 var $faceCount=(sp)+(120);
 var $2=(sp)+(128);
 var $v=(sp)+(144);
 var $3=_fopen($filename,4640);
 var $4=(($buffer)|0);
 var $5=_fread($4,80,1,$3);
 var $6=($5|0)==1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=_fclose($3);
 var $_0=0;label=30;break;
 case 3: 
 var $10=$faceCount;
 var $11=_fread($10,4,1,$3);
 var $12=($11|0)==1;
 if($12){label=5;break;}else{label=4;break;}
 case 4: 
 var $14=_fclose($3);
 var $_0=0;label=30;break;
 case 5: 
 var $16=__Znwj(12);
 var $17=$16;
 var $18=$16;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($18)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($18+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $19=$16;
 HEAP32[(($19)>>2)]=0;
 var $20=(($16+4)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=0;
 var $22=(($16+8)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=0;
 var $24=$2;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($24)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($24+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $25=(($2)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=(($2+4)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($2+8)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=$16;
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI12SimpleVolumeNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($28,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 var $_pre87=HEAP32[(($25)>>2)];
 var $29=$_pre87;
 var $30=($_pre87|0)==0;
 if($30){label=10;break;}else{label=7;break;}
 case 7: 
 var $31=HEAP32[(($26)>>2)];
 var $32=($_pre87|0)==($31|0);
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $scevgep_i_i_i_i_i52=((($31)-(36))|0);
 var $scevgep28_i_i_i_i_i53=$scevgep_i_i_i_i_i52;
 var $33=(((-$29))|0);
 var $uglygep_i_i_i_i_i54=(($scevgep28_i_i_i_i_i53+$33)|0);
 var $uglygep29_i_i_i_i_i55=$uglygep_i_i_i_i_i54;
 var $34=(((($uglygep29_i_i_i_i_i55>>>0))/(36))&-1);
 var $35=$34^-1;
 var $scevgep30_i_i_i_i_i56=(($31+((($35)*(36))&-1))|0);
 HEAP32[(($26)>>2)]=$scevgep30_i_i_i_i_i56;
 label=9;break;
 case 9: 
 var $36=$_pre87;
 __ZdlPv($36);
 label=10;break;
 case 10: 
 var $37=HEAP32[(($19)>>2)];
 var $38=($37|0)==0;
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=HEAP32[(($faceCount)>>2)];
 var $40=$v;
 var $41=(($v)|0);
 var $42=(($v+4)|0);
 var $43=(($v+8)|0);
 var $44=(($matrix)|0);
 var $45=(($matrix+24)|0);
 var $46=(($matrix+48)|0);
 var $47=(($matrix+8)|0);
 var $48=(($matrix+32)|0);
 var $49=(($matrix+56)|0);
 var $50=(($matrix+16)|0);
 var $51=(($matrix+40)|0);
 var $52=(($matrix+64)|0);
 var $53=(($v+12)|0);
 var $54=(($v+16)|0);
 var $55=(($v+20)|0);
 var $56=(($v+24)|0);
 var $57=(($v+28)|0);
 var $58=(($v+32)|0);
 var $59=$1;
 var $v0_sroa_0_0__idx=(($1)|0);
 var $v0_sroa_1_4__idx76=(($1+4)|0);
 var $v0_sroa_2_8__idx77=(($1+8)|0);
 var $v1_sroa_0_0__idx=(($1+12)|0);
 var $v1_sroa_1_4__idx69=(($1+16)|0);
 var $v1_sroa_2_8__idx70=(($1+20)|0);
 var $v2_sroa_0_0__idx=(($1+24)|0);
 var $v2_sroa_1_4__idx62=(($1+28)|0);
 var $v2_sroa_2_8__idx63=(($1+32)|0);
 var $60=(($37+4)|0);
 var $61=(($37+8)|0);
 var $62=(($37)|0);
 var $i_0=0;label=17;break;
 case 12: 
 var $64=_fclose($3);
 var $_0=0;label=30;break;
 case 13: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $_pre=HEAP32[(($25)>>2)];
 var $66=$_pre;
 var $67=($_pre|0)==0;
 if($67){label=31;break;}else{label=14;break;}
 case 14: 
 var $68=HEAP32[(($26)>>2)];
 var $69=($_pre|0)==($68|0);
 if($69){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i=((($68)-(36))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $70=(((-$66))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$70)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $71=(((($uglygep29_i_i_i_i_i>>>0))/(36))&-1);
 var $72=$71^-1;
 var $scevgep30_i_i_i_i_i=(($68+((($72)*(36))&-1))|0);
 HEAP32[(($26)>>2)]=$scevgep30_i_i_i_i_i;
 label=16;break;
 case 16: 
 var $73=$_pre;
 __ZdlPv($73);
 label=31;break;
 case 17: 
 var $i_0;
 var $75=($i_0>>>0)<($39>>>0);
 if($75){label=18;break;}else{label=29;break;}
 case 18: 
 var $77=_fread($4,12,1,$3);
 var $78=($77|0)==1;
 if($78){label=20;break;}else{label=19;break;}
 case 19: 
 var $80=_fclose($3);
 var $_0=0;label=30;break;
 case 20: 
 var $82=_fread($40,36,1,$3);
 var $83=($82|0)==1;
 if($83){label=22;break;}else{label=21;break;}
 case 21: 
 var $85=_fclose($3);
 var $_0=0;label=30;break;
 case 22: 
 var $87=HEAPF32[(($41)>>2)];
 var $88=$87;
 var $89=HEAPF32[(($42)>>2)];
 var $90=$89;
 var $91=HEAPF32[(($43)>>2)];
 var $92=$91;
 var $93=HEAPF64[(($44)>>3)];
 var $94=($88)*($93);
 var $95=HEAPF64[(($45)>>3)];
 var $96=($90)*($95);
 var $97=($94)+($96);
 var $98=HEAPF64[(($46)>>3)];
 var $99=($92)*($98);
 var $100=($97)+($99);
 var $101=($100)*(1000);
 var $102=(($101)&-1);
 var $103=HEAPF64[(($47)>>3)];
 var $104=($88)*($103);
 var $105=HEAPF64[(($48)>>3)];
 var $106=($90)*($105);
 var $107=($104)+($106);
 var $108=HEAPF64[(($49)>>3)];
 var $109=($92)*($108);
 var $110=($107)+($109);
 var $111=($110)*(1000);
 var $112=(($111)&-1);
 var $113=HEAPF64[(($50)>>3)];
 var $114=($88)*($113);
 var $115=HEAPF64[(($51)>>3)];
 var $116=($90)*($115);
 var $117=($114)+($116);
 var $118=HEAPF64[(($52)>>3)];
 var $119=($92)*($118);
 var $120=($117)+($119);
 var $121=($120)*(1000);
 var $122=(($121)&-1);
 var $123=HEAPF32[(($53)>>2)];
 var $124=$123;
 var $125=HEAPF32[(($54)>>2)];
 var $126=$125;
 var $127=HEAPF32[(($55)>>2)];
 var $128=$127;
 var $129=($93)*($124);
 var $130=($95)*($126);
 var $131=($129)+($130);
 var $132=($98)*($128);
 var $133=($131)+($132);
 var $134=($133)*(1000);
 var $135=(($134)&-1);
 var $136=($103)*($124);
 var $137=($105)*($126);
 var $138=($136)+($137);
 var $139=($108)*($128);
 var $140=($138)+($139);
 var $141=($140)*(1000);
 var $142=(($141)&-1);
 var $143=($113)*($124);
 var $144=($115)*($126);
 var $145=($143)+($144);
 var $146=($118)*($128);
 var $147=($145)+($146);
 var $148=($147)*(1000);
 var $149=(($148)&-1);
 var $150=HEAPF32[(($56)>>2)];
 var $151=$150;
 var $152=HEAPF32[(($57)>>2)];
 var $153=$152;
 var $154=HEAPF32[(($58)>>2)];
 var $155=$154;
 var $156=($93)*($151);
 var $157=($95)*($153);
 var $158=($156)+($157);
 var $159=($98)*($155);
 var $160=($158)+($159);
 var $161=($160)*(1000);
 var $162=(($161)&-1);
 var $163=($103)*($151);
 var $164=($105)*($153);
 var $165=($163)+($164);
 var $166=($108)*($155);
 var $167=($165)+($166);
 var $168=($167)*(1000);
 var $169=(($168)&-1);
 var $170=($113)*($151);
 var $171=($115)*($153);
 var $172=($170)+($171);
 var $173=($118)*($155);
 var $174=($172)+($173);
 var $175=($174)*(1000);
 var $176=(($175)&-1);
 HEAP32[(($v0_sroa_0_0__idx)>>2)]=$102;
 HEAP32[(($v0_sroa_1_4__idx76)>>2)]=$112;
 HEAP32[(($v0_sroa_2_8__idx77)>>2)]=$122;
 HEAP32[(($v1_sroa_0_0__idx)>>2)]=$135;
 HEAP32[(($v1_sroa_1_4__idx69)>>2)]=$142;
 HEAP32[(($v1_sroa_2_8__idx70)>>2)]=$149;
 HEAP32[(($v2_sroa_0_0__idx)>>2)]=$162;
 HEAP32[(($v2_sroa_1_4__idx62)>>2)]=$169;
 HEAP32[(($v2_sroa_2_8__idx63)>>2)]=$176;
 var $177=HEAP32[(($60)>>2)];
 var $178=HEAP32[(($61)>>2)];
 var $179=($177|0)==($178|0);
 if($179){label=26;break;}else{label=23;break;}
 case 23: 
 var $181=($177|0)==0;
 if($181){var $184=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $183=$177;
 assert(36 % 1 === 0);(_memcpy($183, $59, 36)|0);
 var $_pre_i=HEAP32[(($60)>>2)];
 var $184=$_pre_i;label=25;break;
 case 25: 
 var $184;
 var $185=(($184+36)|0);
 HEAP32[(($60)>>2)]=$185;
 label=27;break;
 case 26: 
 __ZNSt3__16vectorI10SimpleFaceNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($62,$1);
 label=27;break;
 case 27: 
 var $187=_fread($4,2,1,$3);
 var $188=($187|0)==1;
 var $189=((($i_0)+(1))|0);
 if($188){var $i_0=$189;label=17;break;}else{label=28;break;}
 case 28: 
 var $191=_fclose($3);
 var $_0=0;label=30;break;
 case 29: 
 var $193=_fclose($3);
 var $_0=$17;label=30;break;
 case 30: 
 var $_0;
 STACKTOP=sp;return $_0;
 case 31: 
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z12loadModelSTLPKcR10FMatrix3x3($filename,$matrix){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buffer=sp;
 var $1=_fopen($filename,4024);
 var $2=($1|0)==0;
 if($2){var $_0=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=(($buffer)|0);
 var $5=_fread($4,5,1,$1);
 var $6=($5|0)==1;
 var $7=_fclose($1);
 if($6){label=3;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $9=(($buffer+5)|0);
 HEAP8[($9)]=0;
 var $10=_strcasecmp($4,3328);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=__Z18loadModelSTL_asciiPKcR10FMatrix3x3($filename,$matrix);
 var $_0=$13;label=6;break;
 case 5: 
 var $15=__Z19loadModelSTL_binaryPKcR10FMatrix3x3($filename,$matrix);
 var $_0=$15;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z9loadModelPKcR10FMatrix3x3($filename,$matrix){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(40);
 var $n=(sp)+(56);
 var $v=(sp)+(64);
 var $f=(sp)+(104);
 var $3=_strrchr($filename,46);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=_strcasecmp($3,2072);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=__Z12loadModelSTLPKcR10FMatrix3x3($filename,$matrix);
 var $_0=$9;label=32;break;
 case 4: 
 var $11=HEAP8[($filename)];
 var $12=(($11<<24)>>24)==35;
 var $13=HEAP32[((14504)>>2)];
 var $14=($13|0)!=0;
 var $or_cond=$12&$14;
 if($or_cond){label=5;break;}else{var $_0=0;label=32;break;}
 case 5: 
 var $15=__Znwj(12);
 var $16=$15;
 var $17=$15;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($17)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($17+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $18=$15;
 HEAP32[(($18)>>2)]=0;
 var $19=(($15+4)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=0;
 var $21=(($15+8)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=0;
 var $23=(($2)|0);
 var $24=(($2+4)|0);
 var $25=(($2+8)|0);
 var $26=$15;
 var $27=$n;
 var $28=$f;
 var $29=(($f)|0);
 var $30=(($f+4)|0);
 var $31=(($f+8)|0);
 var $32=(($matrix)|0);
 var $33=(($matrix+24)|0);
 var $34=(($matrix+48)|0);
 var $35=(($matrix+8)|0);
 var $36=(($matrix+32)|0);
 var $37=(($matrix+56)|0);
 var $38=(($matrix+16)|0);
 var $39=(($matrix+40)|0);
 var $40=(($matrix+64)|0);
 var $41=(($v+12)|0);
 var $42=(($v+24)|0);
 var $43=$1;
 var $44=$v;
 var $45=(($1+12)|0);
 var $46=$45;
 var $47=$41;
 var $48=(($1+24)|0);
 var $49=$48;
 var $50=$42;
 var $_03374=$filename;var $55=0;var $54=0;label=8;break;
 case 6: 
 var $51=HEAP8[($56)];
 var $52=(($51<<24)>>24)==35;
 if($52){label=7;break;}else{var $_0=$16;label=32;break;}
 case 7: 
 var $_pre78=HEAP32[(($20)>>2)];
 var $_pre79=HEAP32[(($22)>>2)];
 var $_03374=$56;var $55=$_pre78;var $54=$_pre79;label=8;break;
 case 8: 
 var $54;
 var $55;
 var $_03374;
 var $56=(($_03374+1)|0);
 var $57=$2;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($57)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($57+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 HEAP32[(($23)>>2)]=0;
 HEAP32[(($24)>>2)]=0;
 HEAP32[(($25)>>2)]=0;
 var $58=($55|0)==($54|0);
 if($58){label=12;break;}else{label=9;break;}
 case 9: 
 var $60=($55|0)==0;
 if($60){label=11;break;}else{label=10;break;}
 case 10: 
 var $61=(($55)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($55+4)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($55+8)|0);
 HEAP32[(($63)>>2)]=0;
 label=11;break;
 case 11: 
 var $64=HEAP32[(($20)>>2)];
 var $65=(($64+12)|0);
 HEAP32[(($20)>>2)]=$65;
 label=17;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI12SimpleVolumeNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($26,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $_pre80=HEAP32[(($23)>>2)];
 var $67=$_pre80;
 var $68=($_pre80|0)==0;
 if($68){label=17;break;}else{label=14;break;}
 case 14: 
 var $69=HEAP32[(($24)>>2)];
 var $70=($_pre80|0)==($69|0);
 if($70){label=16;break;}else{label=15;break;}
 case 15: 
 var $scevgep_i_i_i_i_i44=((($69)-(36))|0);
 var $scevgep28_i_i_i_i_i45=$scevgep_i_i_i_i_i44;
 var $71=(((-$67))|0);
 var $uglygep_i_i_i_i_i46=(($scevgep28_i_i_i_i_i45+$71)|0);
 var $uglygep29_i_i_i_i_i47=$uglygep_i_i_i_i_i46;
 var $72=(((($uglygep29_i_i_i_i_i47>>>0))/(36))&-1);
 var $73=$72^-1;
 var $scevgep30_i_i_i_i_i48=(($69+((($73)*(36))&-1))|0);
 HEAP32[(($24)>>2)]=$scevgep30_i_i_i_i_i48;
 label=16;break;
 case 16: 
 var $74=$_pre80;
 __ZdlPv($74);
 label=17;break;
 case 17: 
 var $75=HEAP32[(($20)>>2)];
 var $76=HEAP32[(($18)>>2)];
 var $77=$75;
 var $78=$76;
 var $79=((($77)-($78))|0);
 var $80=(((($79|0))/(12))&-1);
 var $81=((($80)-(1))|0);
 var $82=HEAP32[((14504)>>2)];
 var $83=_fread($27,1,4,$82);
 var $84=($83|0)==0;
 if($84){var $_0=0;label=32;break;}else{label=22;break;}
 case 18: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $_pre=HEAP32[(($23)>>2)];
 var $86=$_pre;
 var $87=($_pre|0)==0;
 if($87){label=33;break;}else{label=19;break;}
 case 19: 
 var $88=HEAP32[(($24)>>2)];
 var $89=($_pre|0)==($88|0);
 if($89){label=21;break;}else{label=20;break;}
 case 20: 
 var $scevgep_i_i_i_i_i=((($88)-(36))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $90=(((-$86))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$90)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $91=(((($uglygep29_i_i_i_i_i>>>0))/(36))&-1);
 var $92=$91^-1;
 var $scevgep30_i_i_i_i_i=(($88+((($92)*(36))&-1))|0);
 HEAP32[(($24)>>2)]=$scevgep30_i_i_i_i_i;
 label=21;break;
 case 21: 
 var $93=$_pre;
 __ZdlPv($93);
 label=33;break;
 case 22: 
 var $94=HEAP32[(($n)>>2)];
 var $95=_printf(1456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$94,tempVarArgs)); STACKTOP=tempVarArgs;
 var $96=($94|0)==0;
 if($96){label=6;break;}else{label=23;break;}
 case 23: 
 var $97=(($76+((($81)*(12))&-1)+4)|0);
 var $98=(($76+((($81)*(12))&-1)+8)|0);
 var $99=(($76+((($81)*(12))&-1))|0);
 var $pNr_065=0;var $101=$94;label=24;break;
 case 24: 
 var $101;
 var $pNr_065;
 var $102=HEAP32[((14504)>>2)];
 var $103=_fread($28,3,4,$102);
 var $104=($103|0)==0;
 if($104){var $_0=0;label=32;break;}else{label=25;break;}
 case 25: 
 var $106=HEAPF32[(($29)>>2)];
 var $107=$106;
 var $108=HEAPF32[(($30)>>2)];
 var $109=$108;
 var $110=HEAPF32[(($31)>>2)];
 var $111=$110;
 var $112=((($pNr_065)+(1))|0);
 var $113=HEAPF64[(($32)>>3)];
 var $114=($107)*($113);
 var $115=HEAPF64[(($33)>>3)];
 var $116=($109)*($115);
 var $117=($114)+($116);
 var $118=HEAPF64[(($34)>>3)];
 var $119=($111)*($118);
 var $120=($117)+($119);
 var $121=($120)*(1000);
 var $122=(($121)&-1);
 var $123=HEAPF64[(($35)>>3)];
 var $124=($107)*($123);
 var $125=HEAPF64[(($36)>>3)];
 var $126=($109)*($125);
 var $127=($124)+($126);
 var $128=HEAPF64[(($37)>>3)];
 var $129=($111)*($128);
 var $130=($127)+($129);
 var $131=($130)*(1000);
 var $132=(($131)&-1);
 var $133=HEAPF64[(($38)>>3)];
 var $134=($107)*($133);
 var $135=HEAPF64[(($39)>>3)];
 var $136=($109)*($135);
 var $137=($134)+($136);
 var $138=HEAPF64[(($40)>>3)];
 var $139=($111)*($138);
 var $140=($137)+($139);
 var $141=($140)*(1000);
 var $142=(($141)&-1);
 var $_sroa_0_0__idx=(($v+((($pNr_065)*(12))&-1))|0);
 HEAP32[(($_sroa_0_0__idx)>>2)]=$122;
 var $_sroa_1_4__idx52=(($v+((($pNr_065)*(12))&-1)+4)|0);
 HEAP32[(($_sroa_1_4__idx52)>>2)]=$132;
 var $_sroa_2_8__idx53=(($v+((($pNr_065)*(12))&-1)+8)|0);
 HEAP32[(($_sroa_2_8__idx53)>>2)]=$142;
 var $143=($112|0)==3;
 if($143){label=26;break;}else{var $pNr_1=$112;label=31;break;}
 case 26: 
 assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
 assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
 assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
 var $145=HEAP32[(($97)>>2)];
 var $146=HEAP32[(($98)>>2)];
 var $147=($145|0)==($146|0);
 if($147){label=30;break;}else{label=27;break;}
 case 27: 
 var $149=($145|0)==0;
 if($149){var $152=0;label=29;break;}else{label=28;break;}
 case 28: 
 var $151=$145;
 assert(36 % 1 === 0);(_memcpy($151, $43, 36)|0);
 var $_pre_i=HEAP32[(($97)>>2)];
 var $152=$_pre_i;label=29;break;
 case 29: 
 var $152;
 var $153=(($152+36)|0);
 HEAP32[(($97)>>2)]=$153;
 var $pNr_1=0;label=31;break;
 case 30: 
 __ZNSt3__16vectorI10SimpleFaceNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($99,$1);
 var $pNr_1=0;label=31;break;
 case 31: 
 var $pNr_1;
 var $155=((($101)-(1))|0);
 HEAP32[(($n)>>2)]=$155;
 var $156=($155|0)==0;
 if($156){label=6;break;}else{var $pNr_065=$pNr_1;var $101=$155;label=24;break;}
 case 32: 
 var $_0;
 STACKTOP=sp;return $_0;
 case 33: 
 ___resumeException($85$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI12SimpleVolumeNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>357913941;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(12))&-1);
 var $21=($20>>>0)>178956969;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(12))&-1);
 var $_095=357913941;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(12))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $39=0;var $_096=0;var $38=$31;label=7;break;}else{var $_095=$_sroa_speculated;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $_095;
 var $35=((($_095)*(12))&-1);
 var $36=__Znwj($35);
 var $37=$36;
 var $39=$37;var $_096=$_095;var $38=$34;label=7;break;
 case 7: 
 var $38;
 var $_096;
 var $39;
 var $40=(($39+((($38)*(12))&-1))|0);
 var $41=(($39+((($_096)*(12))&-1))|0);
 var $42=($40|0)==0;
 if($42){label=20;break;}else{label=8;break;}
 case 8: 
 var $44=(($40)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=(($39+((($38)*(12))&-1)+4)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=(($39+((($38)*(12))&-1)+8)|0);
 HEAP32[(($46)>>2)]=0;
 var $47=(($__x+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($__x)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=20;break;}else{label=9;break;}
 case 9: 
 var $53=$50;
 var $54=$48;
 var $55=((($54)-($53))|0);
 var $56=(((($55|0))/(36))&-1);
 var $57=($56>>>0)>119304647;
 if($57){label=10;break;}else{label=11;break;}
 case 10: 
 var $59=$40;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=16;break; }
 case 11: 
 var $60=(function() { try { __THREW__ = 0; return __Znwj($55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $62=$60;
 HEAP32[(($45)>>2)]=$62;
 HEAP32[(($44)>>2)]=$62;
 var $63=(($62+((($56)*(36))&-1))|0);
 HEAP32[(($46)>>2)]=$63;
 var $64=HEAP32[(($49)>>2)];
 var $65=HEAP32[(($47)>>2)];
 var $66=($64|0)==($65|0);
 if($66){label=20;break;}else{var $_011_i_i_i_i_i=$64;var $67=$62;label=13;break;}
 case 13: 
 var $67;
 var $_011_i_i_i_i_i;
 var $68=($67|0)==0;
 if($68){var $72=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $70=$67;
 var $71=$_011_i_i_i_i_i;
 assert(36 % 1 === 0);(_memcpy($70, $71, 36)|0);
 var $_pre12_i_i_i_i_i=HEAP32[(($45)>>2)];
 var $72=$_pre12_i_i_i_i_i;label=15;break;
 case 15: 
 var $72;
 var $73=(($72+36)|0);
 HEAP32[(($45)>>2)]=$73;
 var $74=(($_011_i_i_i_i_i+36)|0);
 var $75=($74|0)==($65|0);
 if($75){label=20;break;}else{var $_011_i_i_i_i_i=$74;var $67=$73;label=13;break;}
 case 16: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($44)>>2)];
 var $79=$78;
 var $80=($78|0)==0;
 if($80){var $eh_lpad_body8797$1=$77$1;var $eh_lpad_body8797$0=$77$0;label=52;break;}else{label=17;break;}
 case 17: 
 var $81=HEAP32[(($45)>>2)];
 var $82=($78|0)==($81|0);
 if($82){label=19;break;}else{label=18;break;}
 case 18: 
 var $scevgep_i_i_i_i_i=((($81)-(36))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $83=(((-$79))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$83)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $84=(((($uglygep29_i_i_i_i_i>>>0))/(36))&-1);
 var $85=$84^-1;
 var $scevgep30_i_i_i_i_i=(($81+((($85)*(36))&-1))|0);
 HEAP32[(($45)>>2)]=$scevgep30_i_i_i_i_i;
 label=19;break;
 case 19: 
 var $86=$78;
 __ZdlPv($86);
 var $eh_lpad_body87$1=$77$1;var $eh_lpad_body87$0=$77$0;label=51;break;
 case 20: 
 var $_sum=((($38)+(1))|0);
 var $87=(($39+((($_sum)*(12))&-1))|0);
 var $88=HEAP32[(($3)>>2)];
 var $89=HEAP32[(($1)>>2)];
 var $90=($89|0)==($88|0);
 if($90){label=21;break;}else{var $_049_i=$89;var $__v_sroa_1_4_load7182=$40;label=22;break;}
 case 21: 
 HEAP32[(($3)>>2)]=$40;
 HEAP32[(($1)>>2)]=$87;
 HEAP32[(($15)>>2)]=$41;
 var $155=$88;label=42;break;
 case 22: 
 var $__v_sroa_1_4_load7182;
 var $_049_i;
 var $91=((($__v_sroa_1_4_load7182)-(12))|0);
 var $92=((($_049_i)-(12))|0);
 var $93=($91|0)==0;
 if($93){label=35;break;}else{label=23;break;}
 case 23: 
 var $95=(($91)|0);
 HEAP32[(($95)>>2)]=0;
 var $96=((($__v_sroa_1_4_load7182)-(12)+4)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=((($__v_sroa_1_4_load7182)-(12)+8)|0);
 HEAP32[(($97)>>2)]=0;
 var $98=((($_049_i)-(12)+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($92)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=35;break;}else{label=24;break;}
 case 24: 
 var $104=$101;
 var $105=$99;
 var $106=((($105)-($104))|0);
 var $107=(((($106|0))/(36))&-1);
 var $108=($107>>>0)>119304647;
 if($108){label=25;break;}else{label=26;break;}
 case 25: 
 var $110=$91;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=31;break; }
 case 26: 
 var $111=(function() { try { __THREW__ = 0; return __Znwj($106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 var $113=$111;
 HEAP32[(($96)>>2)]=$113;
 HEAP32[(($95)>>2)]=$113;
 var $114=(($113+((($107)*(36))&-1))|0);
 HEAP32[(($97)>>2)]=$114;
 var $115=HEAP32[(($100)>>2)];
 var $116=HEAP32[(($98)>>2)];
 var $117=($115|0)==($116|0);
 if($117){label=35;break;}else{var $_011_i_i_i_i_i38=$115;var $118=$113;label=28;break;}
 case 28: 
 var $118;
 var $_011_i_i_i_i_i38;
 var $119=($118|0)==0;
 if($119){var $123=0;label=30;break;}else{label=29;break;}
 case 29: 
 var $121=$118;
 var $122=$_011_i_i_i_i_i38;
 assert(36 % 1 === 0);(_memcpy($121, $122, 36)|0);
 var $_pre12_i_i_i_i_i40=HEAP32[(($96)>>2)];
 var $123=$_pre12_i_i_i_i_i40;label=30;break;
 case 30: 
 var $123;
 var $124=(($123+36)|0);
 HEAP32[(($96)>>2)]=$124;
 var $125=(($_011_i_i_i_i_i38+36)|0);
 var $126=($125|0)==($116|0);
 if($126){label=35;break;}else{var $_011_i_i_i_i_i38=$125;var $118=$124;label=28;break;}
 case 31: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=HEAP32[(($95)>>2)];
 var $130=$129;
 var $131=($129|0)==0;
 if($131){label=45;break;}else{label=32;break;}
 case 32: 
 var $132=HEAP32[(($96)>>2)];
 var $133=($129|0)==($132|0);
 if($133){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i_i_i43=((($132)-(36))|0);
 var $scevgep28_i_i_i_i_i44=$scevgep_i_i_i_i_i43;
 var $134=(((-$130))|0);
 var $uglygep_i_i_i_i_i45=(($scevgep28_i_i_i_i_i44+$134)|0);
 var $uglygep29_i_i_i_i_i46=$uglygep_i_i_i_i_i45;
 var $135=(((($uglygep29_i_i_i_i_i46>>>0))/(36))&-1);
 var $136=$135^-1;
 var $scevgep30_i_i_i_i_i47=(($132+((($136)*(36))&-1))|0);
 HEAP32[(($96)>>2)]=$scevgep30_i_i_i_i_i47;
 label=34;break;
 case 34: 
 var $137=$129;
 __ZdlPv($137);
 label=45;break;
 case 35: 
 var $138=($92|0)==($88|0);
 if($138){label=36;break;}else{var $_049_i=$92;var $__v_sroa_1_4_load7182=$91;label=22;break;}
 case 36: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre94=HEAP32[(($1)>>2)];
 HEAP32[(($3)>>2)]=$91;
 HEAP32[(($1)>>2)]=$87;
 HEAP32[(($15)>>2)]=$41;
 var $140=($_pre_i|0)==($_pre94|0);
 if($140){var $155=$_pre_i;label=42;break;}else{var $141=$_pre94;label=37;break;}
 case 37: 
 var $141;
 var $142=((($141)-(12))|0);
 var $143=(($142)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$144;
 var $146=($144|0)==0;
 if($146){label=38;break;}else{label=39;break;}
 case 38: 
 var $147=($_pre_i|0)==($142|0);
 if($147){var $155=$_pre_i;label=42;break;}else{var $141=$142;label=37;break;}
 case 39: 
 var $148=((($141)-(12)+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($144|0)==($149|0);
 if($150){label=41;break;}else{label=40;break;}
 case 40: 
 var $scevgep_i_i_i_i_i_i_i57=((($149)-(36))|0);
 var $scevgep28_i_i_i_i_i_i_i58=$scevgep_i_i_i_i_i_i_i57;
 var $151=(((-$145))|0);
 var $uglygep_i_i_i_i_i_i_i59=(($scevgep28_i_i_i_i_i_i_i58+$151)|0);
 var $uglygep29_i_i_i_i_i_i_i60=$uglygep_i_i_i_i_i_i_i59;
 var $152=(((($uglygep29_i_i_i_i_i_i_i60>>>0))/(36))&-1);
 var $153=$152^-1;
 var $scevgep30_i_i_i_i_i_i_i61=(($149+((($153)*(36))&-1))|0);
 HEAP32[(($148)>>2)]=$scevgep30_i_i_i_i_i_i_i61;
 label=41;break;
 case 41: 
 var $154=$144;
 __ZdlPv($154);
 label=38;break;
 case 42: 
 var $155;
 var $156=($155|0)==0;
 if($156){label=44;break;}else{label=43;break;}
 case 43: 
 var $158=$155;
 __ZdlPv($158);
 label=44;break;
 case 44: 
 return;
 case 45: 
 var $159=($__v_sroa_1_4_load7182|0)==($87|0);
 if($159){var $eh_lpad_body87$1=$128$1;var $eh_lpad_body87$0=$128$0;label=51;break;}else{var $160=$87;label=46;break;}
 case 46: 
 var $160;
 var $161=((($160)-(12))|0);
 var $162=(($161)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=($163|0)==0;
 if($165){label=47;break;}else{label=48;break;}
 case 47: 
 var $166=($__v_sroa_1_4_load7182|0)==($161|0);
 if($166){var $eh_lpad_body87$1=$128$1;var $eh_lpad_body87$0=$128$0;label=51;break;}else{var $160=$161;label=46;break;}
 case 48: 
 var $167=((($160)-(12)+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($163|0)==($168|0);
 if($169){label=50;break;}else{label=49;break;}
 case 49: 
 var $scevgep_i_i_i_i_i_i_i=((($168)-(36))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $170=(((-$164))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$170)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $171=(((($uglygep29_i_i_i_i_i_i_i>>>0))/(36))&-1);
 var $172=$171^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($168+((($172)*(36))&-1))|0);
 HEAP32[(($167)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=50;break;
 case 50: 
 var $173=$163;
 __ZdlPv($173);
 label=47;break;
 case 51: 
 var $eh_lpad_body87$0;
 var $eh_lpad_body87$1;
 var $174=($39|0)==0;
 if($174){var $eh_lpad_body8798$1=$eh_lpad_body87$1;var $eh_lpad_body8798$0=$eh_lpad_body87$0;label=53;break;}else{var $eh_lpad_body8797$1=$eh_lpad_body87$1;var $eh_lpad_body8797$0=$eh_lpad_body87$0;label=52;break;}
 case 52: 
 var $eh_lpad_body8797$0;
 var $eh_lpad_body8797$1;
 var $175=$39;
 __ZdlPv($175);
 var $eh_lpad_body8798$1=$eh_lpad_body8797$1;var $eh_lpad_body8798$0=$eh_lpad_body8797$0;label=53;break;
 case 53: 
 var $eh_lpad_body8798$0;
 var $eh_lpad_body8798$1;
 ___resumeException($eh_lpad_body8798$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorI10SimpleFaceNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(36))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>119304647;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(36))&-1);
 var $21=($20>>>0)>59652322;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(36))&-1);
 var $_044=119304647;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(36))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=((($_044)*(36))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+((($39)*(36))&-1))|0);
 var $43=(($41+((($_045)*(36))&-1))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=$42;
 var $47=$__x;
 assert(36 % 1 === 0);(_memcpy($46, $47, 36)|0);
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $48=(($41+((($_sum)*(36))&-1))|0);
 var $49=(((($40|0))/(-36))&-1);
 var $_sum43=((($49)+($39))|0);
 var $50=(($41+((($_sum43)*(36))&-1))|0);
 var $51=$50;
 var $52=$14;
 assert($40 % 1 === 0);(_memcpy($51, $52, $40)|0);
 HEAP32[(($3)>>2)]=$50;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $53=($14|0)==0;
 if($53){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($52);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11OrientationERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($poly){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(($poly+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($poly)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$8;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=$13>>4;
 var $15=((($14)-(1))|0);
 var $16=($15|0)<2;
 if($16){var $_0=0;label=22;break;}else{var $j_081=0;var $i_082=0;label=2;break;}
 case 2: 
 var $i_082;
 var $j_081;
 var $17=(($10+($i_082<<4)+8)|0);
 var $ld$0$0=(($17)|0);
 var $18$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$1$1)>>2)];
 var $19=(($10+($j_081<<4)+8)|0);
 var $ld$2$0=(($19)|0);
 var $20$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($19+4)|0);
 var $20$1=HEAP32[(($ld$3$1)>>2)];
 var $21=(($18$1|0) < ($20$1|0)) | (((($18$1|0) == ($20$1|0) & ($18$0>>>0) <  ($20$0>>>0))));
 if($21){var $j_1=$j_081;label=6;break;}else{label=3;break;}
 case 3: 
 var $23=(($18$1|0) > ($20$1|0)) | (((($18$1|0) == ($20$1|0) & ($18$0>>>0) >  ($20$0>>>0))));
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=(($10+($i_082<<4))|0);
 var $ld$4$0=(($25)|0);
 var $26$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($25+4)|0);
 var $26$1=HEAP32[(($ld$5$1)>>2)];
 var $27=(($10+($j_081<<4))|0);
 var $ld$6$0=(($27)|0);
 var $28$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$7$1)>>2)];
 var $29=(($26$1|0) < ($28$1|0)) | (((($26$1|0) == ($28$1|0) & ($26$0>>>0) <  ($28$0>>>0))));
 if($29){label=5;break;}else{var $j_1=$j_081;label=6;break;}
 case 5: 
 var $j_1=$i_082;label=6;break;
 case 6: 
 var $j_1;
 var $32=((($i_082)+(1))|0);
 var $33=($32|0)>($15|0);
 if($33){label=7;break;}else{var $j_081=$j_1;var $i_082=$32;label=2;break;}
 case 7: 
 var $34=($j_1|0)==($15|0);
 var $35=((($j_1)+(1))|0);
 var $jplus_0=$34?0:$35;
 var $36=($j_1|0)==0;
 var $37=((($j_1)-(1))|0);
 var $jminus_0=$36?$15:$37;
 var $38=(($10+($j_1<<4))|0);
 var $ld$8$0=(($38)|0);
 var $39$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$9$1)>>2)];
 var $40=(($10+($jminus_0<<4))|0);
 var $ld$10$0=(($40)|0);
 var $41$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($40+4)|0);
 var $41$1=HEAP32[(($ld$11$1)>>2)];
 var $42$0=_i64Subtract($39$0,$39$1,$41$0,$41$1);var $42$1=tempRet0;
 var $43=(($10+($j_1<<4)+8)|0);
 var $ld$12$0=(($43)|0);
 var $44$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($43+4)|0);
 var $44$1=HEAP32[(($ld$13$1)>>2)];
 var $45=(($10+($jminus_0<<4)+8)|0);
 var $ld$14$0=(($45)|0);
 var $46$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($45+4)|0);
 var $46$1=HEAP32[(($ld$15$1)>>2)];
 var $47$0=_i64Subtract($44$0,$44$1,$46$0,$46$1);var $47$1=tempRet0;
 var $48=(($10+($jplus_0<<4))|0);
 var $ld$16$0=(($48)|0);
 var $49$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($48+4)|0);
 var $49$1=HEAP32[(($ld$17$1)>>2)];
 var $50$0=_i64Subtract($49$0,$49$1,$39$0,$39$1);var $50$1=tempRet0;
 var $51=(($10+($jplus_0<<4)+8)|0);
 var $ld$18$0=(($51)|0);
 var $52$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($51+4)|0);
 var $52$1=HEAP32[(($ld$19$1)>>2)];
 var $53$0=_i64Subtract($52$0,$52$1,$44$0,$44$1);var $53$1=tempRet0;
 var $$etemp$20$0=0;
 var $$etemp$20$1=0;
 var $54=(($42$1|0) < ($$etemp$20$1|0)) | (((($42$1|0) == ($$etemp$20$1|0) & ($42$0>>>0) <  ($$etemp$20$0>>>0))));
 var $$etemp$21$0=0;
 var $$etemp$21$1=0;
 var $55$0=_i64Subtract($$etemp$21$0,$$etemp$21$1,$42$0,$42$1);var $55$1=tempRet0;
 var $56$0=$54?$55$0:$42$0;
 var $56$1=$54?$55$1:$42$1;
 var $$etemp$22$0=1073741823;
 var $$etemp$22$1=0;
 var $57=(($56$1|0) > ($$etemp$22$1|0)) | (((($56$1|0) == ($$etemp$22$1|0) & ($56$0>>>0) >  ($$etemp$22$0>>>0))));
 if($57){label=11;break;}else{label=8;break;}
 case 8: 
 var $$etemp$23$0=0;
 var $$etemp$23$1=0;
 var $59=(($47$1|0) < ($$etemp$23$1|0)) | (((($47$1|0) == ($$etemp$23$1|0) & ($47$0>>>0) <  ($$etemp$23$0>>>0))));
 var $$etemp$24$0=0;
 var $$etemp$24$1=0;
 var $60$0=_i64Subtract($$etemp$24$0,$$etemp$24$1,$47$0,$47$1);var $60$1=tempRet0;
 var $61$0=$59?$60$0:$47$0;
 var $61$1=$59?$60$1:$47$1;
 var $$etemp$25$0=1073741823;
 var $$etemp$25$1=0;
 var $62=(($61$1|0) > ($$etemp$25$1|0)) | (((($61$1|0) == ($$etemp$25$1|0) & ($61$0>>>0) >  ($$etemp$25$0>>>0))));
 if($62){var $_pre_phi$1=$60$1;var $_pre_phi$0=$60$0;label=13;break;}else{label=9;break;}
 case 9: 
 var $$etemp$26$0=0;
 var $$etemp$26$1=0;
 var $64=(($50$1|0) < ($$etemp$26$1|0)) | (((($50$1|0) == ($$etemp$26$1|0) & ($50$0>>>0) <  ($$etemp$26$0>>>0))));
 var $$etemp$27$0=0;
 var $$etemp$27$1=0;
 var $65$0=_i64Subtract($$etemp$27$0,$$etemp$27$1,$50$0,$50$1);var $65$1=tempRet0;
 var $66$0=$64?$65$0:$50$0;
 var $66$1=$64?$65$1:$50$1;
 var $$etemp$28$0=1073741823;
 var $$etemp$28$1=0;
 var $67=(($66$1|0) > ($$etemp$28$1|0)) | (((($66$1|0) == ($$etemp$28$1|0) & ($66$0>>>0) >  ($$etemp$28$0>>>0))));
 if($67){label=11;break;}else{label=10;break;}
 case 10: 
 var $$etemp$29$0=0;
 var $$etemp$29$1=0;
 var $69=(($53$1|0) < ($$etemp$29$1|0)) | (((($53$1|0) == ($$etemp$29$1|0) & ($53$0>>>0) <  ($$etemp$29$0>>>0))));
 var $$etemp$30$0=0;
 var $$etemp$30$1=0;
 var $70$0=_i64Subtract($$etemp$30$0,$$etemp$30$1,$53$0,$53$1);var $70$1=tempRet0;
 var $71$0=$69?$70$0:$53$0;
 var $71$1=$69?$70$1:$53$1;
 var $$etemp$31$0=1073741823;
 var $$etemp$31$1=0;
 var $72=(($71$1|0) > ($$etemp$31$1|0)) | (((($71$1|0) == ($$etemp$31$1|0) & ($71$0>>>0) >  ($$etemp$31$0>>>0))));
 if($72){label=11;break;}else{label=21;break;}
 case 11: 
 var $$etemp$32$0=-1;
 var $$etemp$32$1=1073741823;
 var $74=(($56$1|0) > ($$etemp$32$1|0)) | (((($56$1|0) == ($$etemp$32$1|0) & ($56$0>>>0) >  ($$etemp$32$0>>>0))));
 if($74){label=16;break;}else{label=12;break;}
 case 12: 
 var $$etemp$33$0=0;
 var $$etemp$33$1=0;
 var $_pre$0=_i64Subtract($$etemp$33$0,$$etemp$33$1,$47$0,$47$1);var $_pre$1=tempRet0;
 var $_pre_phi$1=$_pre$1;var $_pre_phi$0=$_pre$0;label=13;break;
 case 13: 
 var $_pre_phi$0;
 var $_pre_phi$1;
 var $$etemp$34$0=0;
 var $$etemp$34$1=0;
 var $75=(($47$1|0) < ($$etemp$34$1|0)) | (((($47$1|0) == ($$etemp$34$1|0) & ($47$0>>>0) <  ($$etemp$34$0>>>0))));
 var $76$0=$75?$_pre_phi$0:$47$0;
 var $76$1=$75?$_pre_phi$1:$47$1;
 var $$etemp$35$0=-1;
 var $$etemp$35$1=1073741823;
 var $77=(($76$1|0) > ($$etemp$35$1|0)) | (((($76$1|0) == ($$etemp$35$1|0) & ($76$0>>>0) >  ($$etemp$35$0>>>0))));
 if($77){label=16;break;}else{label=14;break;}
 case 14: 
 var $$etemp$36$0=0;
 var $$etemp$36$1=0;
 var $79=(($50$1|0) < ($$etemp$36$1|0)) | (((($50$1|0) == ($$etemp$36$1|0) & ($50$0>>>0) <  ($$etemp$36$0>>>0))));
 var $$etemp$37$0=0;
 var $$etemp$37$1=0;
 var $80$0=_i64Subtract($$etemp$37$0,$$etemp$37$1,$50$0,$50$1);var $80$1=tempRet0;
 var $81$0=$79?$80$0:$50$0;
 var $81$1=$79?$80$1:$50$1;
 var $$etemp$38$0=-1;
 var $$etemp$38$1=1073741823;
 var $82=(($81$1|0) > ($$etemp$38$1|0)) | (((($81$1|0) == ($$etemp$38$1|0) & ($81$0>>>0) >  ($$etemp$38$0>>>0))));
 if($82){label=16;break;}else{label=15;break;}
 case 15: 
 var $$etemp$39$0=0;
 var $$etemp$39$1=0;
 var $84=(($53$1|0) < ($$etemp$39$1|0)) | (((($53$1|0) == ($$etemp$39$1|0) & ($53$0>>>0) <  ($$etemp$39$0>>>0))));
 var $$etemp$40$0=0;
 var $$etemp$40$1=0;
 var $85$0=_i64Subtract($$etemp$40$0,$$etemp$40$1,$53$0,$53$1);var $85$1=tempRet0;
 var $86$0=$84?$85$0:$53$0;
 var $86$1=$84?$85$1:$53$1;
 var $$etemp$41$0=-1;
 var $$etemp$41$1=1073741823;
 var $87=(($86$1|0) > ($$etemp$41$1|0)) | (((($86$1|0) == ($$etemp$41$1|0) & ($86$0>>>0) >  ($$etemp$41$0>>>0))));
 if($87){label=16;break;}else{label=17;break;}
 case 16: 
 var $89=___cxa_allocate_exception(4);
 var $90=$89;
 HEAP32[(($90)>>2)]=5512;
 ___cxa_throw($89,12808,0);
 throw "Reached an unreachable!";
 case 17: 
 var $92=(($1+8)|0);
 var $st$42$0=(($92)|0);
 HEAP32[(($st$42$0)>>2)]=$42$0;
 var $st$43$1=(($92+4)|0);
 HEAP32[(($st$43$1)>>2)]=$42$1;
 var $93=(($1)|0);
 var $_lo_lobit_i_i67$0=($42$1>>31)|(((((($42$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i67$1=(((((($42$1|0)<0))|0)?-1:0)>>31)|(((((($42$1|0)<0))|0)?-1:0)<<1);
 var $st$44$0=(($93)|0);
 HEAP32[(($st$44$0)>>2)]=$_lo_lobit_i_i67$0;
 var $st$45$1=(($93+4)|0);
 HEAP32[(($st$45$1)>>2)]=$_lo_lobit_i_i67$1;
 var $94=(($2+8)|0);
 var $st$46$0=(($94)|0);
 HEAP32[(($st$46$0)>>2)]=$53$0;
 var $st$47$1=(($94+4)|0);
 HEAP32[(($st$47$1)>>2)]=$53$1;
 var $95=(($2)|0);
 var $_lo_lobit_i_i66$0=($53$1>>31)|(((((($53$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i66$1=(((((($53$1|0)<0))|0)?-1:0)>>31)|(((((($53$1|0)<0))|0)?-1:0)<<1);
 var $st$48$0=(($95)|0);
 HEAP32[(($st$48$0)>>2)]=$_lo_lobit_i_i66$0;
 var $st$49$1=(($95+4)|0);
 HEAP32[(($st$49$1)>>2)]=$_lo_lobit_i_i66$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $96=(($5+8)|0);
 var $st$50$0=(($96)|0);
 HEAP32[(($st$50$0)>>2)]=$50$0;
 var $st$51$1=(($96+4)|0);
 HEAP32[(($st$51$1)>>2)]=$50$1;
 var $97=(($5)|0);
 var $_lo_lobit_i_i65$0=($50$1>>31)|(((((($50$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i65$1=(((((($50$1|0)<0))|0)?-1:0)>>31)|(((((($50$1|0)<0))|0)?-1:0)<<1);
 var $st$52$0=(($97)|0);
 HEAP32[(($st$52$0)>>2)]=$_lo_lobit_i_i65$0;
 var $st$53$1=(($97+4)|0);
 HEAP32[(($st$53$1)>>2)]=$_lo_lobit_i_i65$1;
 var $98=(($6+8)|0);
 var $st$54$0=(($98)|0);
 HEAP32[(($st$54$0)>>2)]=$47$0;
 var $st$55$1=(($98+4)|0);
 HEAP32[(($st$55$1)>>2)]=$47$1;
 var $99=(($6)|0);
 var $_lo_lobit_i_i$0=($47$1>>31)|(((((($47$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i$1=(((((($47$1|0)<0))|0)?-1:0)>>31)|(((((($47$1|0)<0))|0)?-1:0)<<1);
 var $st$56$0=(($99)|0);
 HEAP32[(($st$56$0)>>2)]=$_lo_lobit_i_i$0;
 var $st$57$1=(($99+4)|0);
 HEAP32[(($st$57$1)>>2)]=$_lo_lobit_i_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $100=(($3)|0);
 var $ld$58$0=(($100)|0);
 var $101$0=HEAP32[(($ld$58$0)>>2)];
 var $ld$59$1=(($100+4)|0);
 var $101$1=HEAP32[(($ld$59$1)>>2)];
 var $102=(($3+8)|0);
 var $ld$60$0=(($102)|0);
 var $103$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($102+4)|0);
 var $103$1=HEAP32[(($ld$61$1)>>2)];
 var $104=(($4)|0);
 var $ld$62$0=(($104)|0);
 var $105$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($104+4)|0);
 var $105$1=HEAP32[(($ld$63$1)>>2)];
 var $106=(($4+8)|0);
 var $ld$64$0=(($106)|0);
 var $107$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($106+4)|0);
 var $107$1=HEAP32[(($ld$65$1)>>2)];
 var $$etemp$66$0=0;
 var $$etemp$66$1=0;
 var $108=(($107$0|0) == ($$etemp$66$0|0)) & (($107$1|0) == ($$etemp$66$1|0));
 if($108){label=18;break;}else{label=19;break;}
 case 18: 
 var $$etemp$67$0=0;
 var $$etemp$67$1=0;
 var $110$0=_i64Subtract($$etemp$67$0,$$etemp$67$1,$105$0,$105$1);var $110$1=tempRet0;
 var $115$1=$110$1;var $115$0=$110$0;var $114$1=0;var $114$0=0;label=20;break;
 case 19: 
 var $$etemp$68$0=0;
 var $$etemp$68$1=0;
 var $112$0=_i64Subtract($$etemp$68$0,$$etemp$68$1,$107$0,$107$1);var $112$1=tempRet0;
 var $$etemp$69$0=-1;
 var $$etemp$69$1=-1;
 var $113$0=$105$0^$$etemp$69$0;
 var $113$1=$105$1^$$etemp$69$1;
 var $115$1=$113$1;var $115$0=$113$0;var $114$1=$112$1;var $114$0=$112$0;label=20;break;
 case 20: 
 var $114$0;
 var $114$1;
 var $115$0;
 var $115$1;
 var $116$0=_i64Add($115$0,$115$1,$101$0,$101$1);var $116$1=tempRet0;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i64($103$0,$103$1,$114$0,$114$1);
 var $uadd_i_i$1=tempRet0;
 var $uadd_i_i$2=tempRet1;
 var $117=$uadd_i_i$2;
 var $118$0=($117&1);
 var $118$1=0;
 var $cross_sroa_0_0_load80$0=_i64Add($116$0,$116$1,$118$0,$118$1);var $cross_sroa_0_0_load80$1=tempRet0;
 var $$etemp$70$0=-1;
 var $$etemp$70$1=-1;
 var $119=(($cross_sroa_0_0_load80$1|0) > ($$etemp$70$1|0)) | (((($cross_sroa_0_0_load80$1|0) == ($$etemp$70$1|0) & ($cross_sroa_0_0_load80$0>>>0) >  ($$etemp$70$0>>>0))));
 var $_0=$119;label=22;break;
 case 21: 
 var $121$0=___muldi3($53$0,$53$1,$42$0,$42$1);var $121$1=tempRet0;
 var $122$0=___muldi3($50$0,$50$1,$47$0,$47$1);var $122$1=tempRet0;
 var $123$0=_i64Subtract($121$0,$121$1,$122$0,$122$1);var $123$1=tempRet0;
 var $$etemp$71$0=-1;
 var $$etemp$71$1=-1;
 var $124=(($123$1|0) > ($$etemp$71$1|0)) | (((($123$1|0) == ($$etemp$71$1|0) & ($123$0>>>0) >  ($$etemp$71$0>>>0))));
 var $_0=$124;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10ClipperLib6Int128mlERKS0_($agg_result,$this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 if($2$0==$$etemp$2$0&$2$1==$$etemp$2$1|$2$0==$$etemp$3$0&$2$1==$$etemp$3$1){ label=2;break;}else{label=3;break;}
 case 2: 
 var $4=(($rhs)|0);
 var $ld$4$0=(($4)|0);
 var $5$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$7$0=-1;
 var $$etemp$7$1=-1;
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 if($5$0==$$etemp$6$0&$5$1==$$etemp$6$1|$5$0==$$etemp$7$0&$5$1==$$etemp$7$1){ label=4;break;}else{label=3;break;}
 case 3: 
 var $7=___cxa_allocate_exception(4);
 var $8=$7;
 HEAP32[(($8)>>2)]=5336;
 ___cxa_throw($7,12808,0);
 throw "Reached an unreachable!";
 case 4: 
 var $_lobit$0=($2$1>>>31)|(0<<1);
 var $_lobit$1=(0>>>31)|(0<<1);
 var $10$0=$_lobit$0;
 var $10=$10$0;
 var $_lobit11$0=($5$1>>>31)|(0<<1);
 var $_lobit11$1=(0>>>31)|(0<<1);
 var $11$0=$_lobit11$0;
 var $11=$11$0;
 var $12=($10|0)==($11|0);
 var $13=(($agg_result)|0);
 var $st$8$0=(($13)|0);
 HEAP32[(($st$8$0)>>2)]=$2$0;
 var $st$9$1=(($13+4)|0);
 HEAP32[(($st$9$1)>>2)]=$2$1;
 var $14=(($agg_result+8)|0);
 var $15=(($this+8)|0);
 var $ld$10$0=(($15)|0);
 var $16$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($15+4)|0);
 var $16$1=HEAP32[(($ld$11$1)>>2)];
 var $st$12$0=(($14)|0);
 HEAP32[(($st$12$0)>>2)]=$16$0;
 var $st$13$1=(($14+4)|0);
 HEAP32[(($st$13$1)>>2)]=$16$1;
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $17=(($2$1|0) < ($$etemp$14$1|0)) | (((($2$1|0) == ($$etemp$14$1|0) & ($2$0>>>0) <  ($$etemp$14$0>>>0))));
 if($17){label=5;break;}else{var $25$1=$16$1;var $25$0=$16$0;label=8;break;}
 case 5: 
 var $$etemp$15$0=0;
 var $$etemp$15$1=0;
 var $19=(($16$0|0) == ($$etemp$15$0|0)) & (($16$1|0) == ($$etemp$15$1|0));
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $21$0=_i64Subtract($$etemp$16$0,$$etemp$16$1,$2$0,$2$1);var $21$1=tempRet0;
 var $st$17$0=(($13)|0);
 HEAP32[(($st$17$0)>>2)]=$21$0;
 var $st$18$1=(($13+4)|0);
 HEAP32[(($st$18$1)>>2)]=$21$1;
 var $25$1=0;var $25$0=0;label=8;break;
 case 7: 
 var $$etemp$19$0=0;
 var $$etemp$19$1=0;
 var $23$0=_i64Subtract($$etemp$19$0,$$etemp$19$1,$16$0,$16$1);var $23$1=tempRet0;
 var $st$20$0=(($14)|0);
 HEAP32[(($st$20$0)>>2)]=$23$0;
 var $st$21$1=(($14+4)|0);
 HEAP32[(($st$21$1)>>2)]=$23$1;
 var $$etemp$22$0=-1;
 var $$etemp$22$1=-1;
 var $24$0=$2$0^$$etemp$22$0;
 var $24$1=$2$1^$$etemp$22$1;
 var $st$23$0=(($13)|0);
 HEAP32[(($st$23$0)>>2)]=$24$0;
 var $st$24$1=(($13+4)|0);
 HEAP32[(($st$24$1)>>2)]=$24$1;
 var $25$1=$23$1;var $25$0=$23$0;label=8;break;
 case 8: 
 var $25$0;
 var $25$1;
 var $26$0=$25$1;
 var $26$1=0;
 var $$etemp$25$0=-1;
 var $$etemp$25$1=0;
 var $27$0=$25$0&$$etemp$25$0;
 var $27$1=$25$1&$$etemp$25$1;
 var $28=$agg_result;
 var $29=$rhs;
 assert(16 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];HEAP32[((($28)+(12))>>2)]=HEAP32[((($29)+(12))>>2)];
 var $ld$26$0=(($13)|0);
 var $30$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($13+4)|0);
 var $30$1=HEAP32[(($ld$27$1)>>2)];
 var $$etemp$28$0=0;
 var $$etemp$28$1=0;
 var $31=(($30$1|0) < ($$etemp$28$1|0)) | (((($30$1|0) == ($$etemp$28$1|0) & ($30$0>>>0) <  ($$etemp$28$0>>>0))));
 var $ld$29$0=(($14)|0);
 var $32$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($14+4)|0);
 var $32$1=HEAP32[(($ld$30$1)>>2)];
 if($31){label=9;break;}else{var $40$1=$32$1;var $40$0=$32$0;label=12;break;}
 case 9: 
 var $$etemp$31$0=0;
 var $$etemp$31$1=0;
 var $34=(($32$0|0) == ($$etemp$31$0|0)) & (($32$1|0) == ($$etemp$31$1|0));
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $36$0=_i64Subtract($$etemp$32$0,$$etemp$32$1,$30$0,$30$1);var $36$1=tempRet0;
 var $st$33$0=(($13)|0);
 HEAP32[(($st$33$0)>>2)]=$36$0;
 var $st$34$1=(($13+4)|0);
 HEAP32[(($st$34$1)>>2)]=$36$1;
 var $40$1=0;var $40$0=0;label=12;break;
 case 11: 
 var $$etemp$35$0=0;
 var $$etemp$35$1=0;
 var $38$0=_i64Subtract($$etemp$35$0,$$etemp$35$1,$32$0,$32$1);var $38$1=tempRet0;
 var $st$36$0=(($14)|0);
 HEAP32[(($st$36$0)>>2)]=$38$0;
 var $st$37$1=(($14+4)|0);
 HEAP32[(($st$37$1)>>2)]=$38$1;
 var $$etemp$38$0=-1;
 var $$etemp$38$1=-1;
 var $39$0=$30$0^$$etemp$38$0;
 var $39$1=$30$1^$$etemp$38$1;
 var $st$39$0=(($13)|0);
 HEAP32[(($st$39$0)>>2)]=$39$0;
 var $st$40$1=(($13+4)|0);
 HEAP32[(($st$40$1)>>2)]=$39$1;
 var $40$1=$38$1;var $40$0=$38$0;label=12;break;
 case 12: 
 var $40$0;
 var $40$1;
 var $41$0=$40$1;
 var $41$1=0;
 var $$etemp$41$0=-1;
 var $$etemp$41$1=0;
 var $42$0=$40$0&$$etemp$41$0;
 var $42$1=$40$1&$$etemp$41$1;
 var $43$0=___muldi3($41$0,$41$1,$26$0,$26$1);var $43$1=tempRet0;
 var $44$0=___muldi3($42$0,$42$1,$27$0,$27$1);var $44$1=tempRet0;
 var $45$0=___muldi3($42$0,$42$1,$26$0,$26$1);var $45$1=tempRet0;
 var $46$0=___muldi3($41$0,$41$1,$27$0,$27$1);var $46$1=tempRet0;
 var $47$0=_i64Add($45$0,$45$1,$46$0,$46$1);var $47$1=tempRet0;
 var $48$0=$47$1;
 var $48$1=0;
 var $49$0=_i64Add($48$0,$48$1,$43$0,$43$1);var $49$1=tempRet0;
 var $st$42$0=(($13)|0);
 HEAP32[(($st$42$0)>>2)]=$49$0;
 var $st$43$1=(($13+4)|0);
 HEAP32[(($st$43$1)>>2)]=$49$1;
 var $50$0=0;
 var $50$1=$47$0;
 var $uadd$0=_llvm_uadd_with_overflow_i64($50$0,$50$1,$44$0,$44$1);
 var $uadd$1=tempRet0;
 var $uadd$2=tempRet1;
 var $51$0=$uadd$0;
 var $51$1=$uadd$1;
 var $st$44$0=(($14)|0);
 HEAP32[(($st$44$0)>>2)]=$51$0;
 var $st$45$1=(($14+4)|0);
 HEAP32[(($st$45$1)>>2)]=$51$1;
 var $52=$uadd$2;
 if($52){label=13;break;}else{var $56$1=$49$1;var $56$0=$49$0;label=14;break;}
 case 13: 
 var $$etemp$46$0=1;
 var $$etemp$46$1=0;
 var $54$0=_i64Add($49$0,$49$1,$$etemp$46$0,$$etemp$46$1);var $54$1=tempRet0;
 var $st$47$0=(($13)|0);
 HEAP32[(($st$47$0)>>2)]=$54$0;
 var $st$48$1=(($13+4)|0);
 HEAP32[(($st$48$1)>>2)]=$54$1;
 var $56$1=$54$1;var $56$0=$54$0;label=14;break;
 case 14: 
 var $56$0;
 var $56$1;
 if($12){label=19;break;}else{label=15;break;}
 case 15: 
 var $$etemp$49$0=0;
 var $$etemp$49$1=0;
 var $58=(($51$0|0) == ($$etemp$49$0|0)) & (($51$1|0) == ($$etemp$49$1|0));
 if($58){label=16;break;}else{label=18;break;}
 case 16: 
 var $$etemp$50$0=0;
 var $$etemp$50$1=0;
 var $60=(($56$0|0) == ($$etemp$50$0|0)) & (($56$1|0) == ($$etemp$50$1|0));
 if($60){label=19;break;}else{label=17;break;}
 case 17: 
 var $$etemp$51$0=0;
 var $$etemp$51$1=0;
 var $62$0=_i64Subtract($$etemp$51$0,$$etemp$51$1,$56$0,$56$1);var $62$1=tempRet0;
 var $st$52$0=(($13)|0);
 HEAP32[(($st$52$0)>>2)]=$62$0;
 var $st$53$1=(($13+4)|0);
 HEAP32[(($st$53$1)>>2)]=$62$1;
 label=19;break;
 case 18: 
 var $$etemp$54$0=0;
 var $$etemp$54$1=0;
 var $64$0=_i64Subtract($$etemp$54$0,$$etemp$54$1,$51$0,$51$1);var $64$1=tempRet0;
 var $st$55$0=(($14)|0);
 HEAP32[(($st$55$0)>>2)]=$64$0;
 var $st$56$1=(($14+4)|0);
 HEAP32[(($st$56$1)>>2)]=$64$1;
 var $$etemp$57$0=-1;
 var $$etemp$57$1=-1;
 var $65$0=$56$0^$$etemp$57$0;
 var $65$1=$56$1^$$etemp$57$1;
 var $st$58$0=(($13)|0);
 HEAP32[(($st$58$0)>>2)]=$65$0;
 var $st$59$1=(($13+4)|0);
 HEAP32[(($st$59$1)>>2)]=$65$1;
 label=19;break;
 case 19: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11OrientationEPNS_6OutRecEb($outRec,$UseFullInt64Range){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(($outRec+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){var $_0=1;label=24;break;}else{label=2;break;}
 case 2: 
 var $op_0_in4855=(($8+24)|0);
 var $op_04956=HEAP32[(($op_0_in4855)>>2)];
 var $10=($op_04956|0)==($8|0);
 if($10){var $opBottom_0_ph53=$8;label=10;break;}else{label=3;break;}
 case 3: 
 var $_phi_trans_insert=(($8+16)|0);
 var $ld$0$0=(($_phi_trans_insert)|0);
 var $_pre64$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_phi_trans_insert+4)|0);
 var $_pre64$1=HEAP32[(($ld$1$1)>>2)];
 var $opBottom_0_ph57=$8;var $op_04958=$op_04956;var $11$1=$_pre64$1;var $11$0=$_pre64$0;label=4;break;
 case 4: 
 var $11$0;
 var $11$1;
 var $op_04958;
 var $opBottom_0_ph57;
 var $12=(($opBottom_0_ph57+8)|0);
 var $op_050=$op_04958;label=5;break;
 case 5: 
 var $op_050;
 var $14=(($op_050+16)|0);
 var $ld$2$0=(($14)|0);
 var $15$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$3$1)>>2)];
 var $16=(($15$1|0) < ($11$1|0)) | (((($15$1|0) == ($11$1|0) & ($15$0>>>0) <  ($11$0>>>0))));
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $op_0_in=(($op_050+24)|0);
 var $op_0=HEAP32[(($op_0_in)>>2)];
 var $17=($op_0|0)==($8|0);
 if($17){var $opBottom_0_ph53=$opBottom_0_ph57;label=10;break;}else{var $op_050=$op_0;label=5;break;}
 case 7: 
 var $19=(($15$1|0) > ($11$1|0)) | (((($15$1|0) == ($11$1|0) & ($15$0>>>0) >  ($11$0>>>0))));
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 var $21=(($op_050+8)|0);
 var $ld$4$0=(($21)|0);
 var $22$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($21+4)|0);
 var $22$1=HEAP32[(($ld$5$1)>>2)];
 var $ld$6$0=(($12)|0);
 var $23$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($12+4)|0);
 var $23$1=HEAP32[(($ld$7$1)>>2)];
 var $24=(($22$1|0) < ($23$1|0)) | (((($22$1|0) == ($23$1|0) & ($22$0>>>0) <  ($23$0>>>0))));
 if($24){label=9;break;}else{label=6;break;}
 case 9: 
 var $op_0_in48=(($op_050+24)|0);
 var $op_049=HEAP32[(($op_0_in48)>>2)];
 var $25=($op_049|0)==($8|0);
 if($25){var $opBottom_0_ph53=$op_050;label=10;break;}else{var $opBottom_0_ph57=$op_050;var $op_04958=$op_049;var $11$1=$15$1;var $11$0=$15$0;label=4;break;}
 case 10: 
 var $opBottom_0_ph53;
 var $26=(($outRec+20)|0);
 HEAP32[(($26)>>2)]=$opBottom_0_ph53;
 var $27=(($outRec)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($opBottom_0_ph53)|0);
 HEAP32[(($29)>>2)]=$28;
 var $30=(($opBottom_0_ph53+24)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($opBottom_0_ph53+8)|0);
 var $33=(($opBottom_0_ph53+16)|0);
 var $opBottom_0_pn=$opBottom_0_ph53;label=11;break;
 case 11: 
 var $opBottom_0_pn;
 var $opPrev_0_in=(($opBottom_0_pn+28)|0);
 var $opPrev_0=HEAP32[(($opPrev_0_in)>>2)];
 var $35=($opBottom_0_ph53|0)==($opPrev_0|0);
 if($35){var $opPrev_0_lcssa=$opBottom_0_ph53;label=14;break;}else{label=12;break;}
 case 12: 
 var $ld$8$0=(($32)|0);
 var $37$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($32+4)|0);
 var $37$1=HEAP32[(($ld$9$1)>>2)];
 var $38=(($opPrev_0+8)|0);
 var $ld$10$0=(($38)|0);
 var $39$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$11$1)>>2)];
 var $40=(($37$0|0) == ($39$0|0)) & (($37$1|0) == ($39$1|0));
 if($40){label=13;break;}else{var $opPrev_0_lcssa=$opPrev_0;label=14;break;}
 case 13: 
 var $ld$12$0=(($33)|0);
 var $41$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($33+4)|0);
 var $41$1=HEAP32[(($ld$13$1)>>2)];
 var $42=(($opPrev_0+16)|0);
 var $ld$14$0=(($42)|0);
 var $43$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($42+4)|0);
 var $43$1=HEAP32[(($ld$15$1)>>2)];
 var $44=(($41$0|0) == ($43$0|0)) & (($41$1|0) == ($43$1|0));
 if($44){var $opBottom_0_pn=$opPrev_0;label=11;break;}else{var $opPrev_0_lcssa=$opPrev_0;label=14;break;}
 case 14: 
 var $opPrev_0_lcssa;
 var $45=($opBottom_0_ph53|0)==($31|0);
 var $ld$16$0=(($32)|0);
 var $_pre$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($32+4)|0);
 var $_pre$1=HEAP32[(($ld$17$1)>>2)];
 if($45){var $opNext_0_lcssa=$opBottom_0_ph53;var $56$1=$_pre$1;var $56$0=$_pre$0;label=18;break;}else{var $opNext_046=$31;label=15;break;}
 case 15: 
 var $opNext_046;
 var $46=(($opNext_046+8)|0);
 var $ld$18$0=(($46)|0);
 var $47$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($46+4)|0);
 var $47$1=HEAP32[(($ld$19$1)>>2)];
 var $48=(($_pre$0|0) == ($47$0|0)) & (($_pre$1|0) == ($47$1|0));
 if($48){label=16;break;}else{var $opNext_0_lcssa=$opNext_046;var $56$1=$47$1;var $56$0=$47$0;label=18;break;}
 case 16: 
 var $ld$20$0=(($33)|0);
 var $49$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($33+4)|0);
 var $49$1=HEAP32[(($ld$21$1)>>2)];
 var $50=(($opNext_046+16)|0);
 var $ld$22$0=(($50)|0);
 var $51$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($50+4)|0);
 var $51$1=HEAP32[(($ld$23$1)>>2)];
 var $52=(($49$0|0) == ($51$0|0)) & (($49$1|0) == ($51$1|0));
 if($52){label=17;break;}else{var $opNext_0_lcssa=$opNext_046;var $56$1=$47$1;var $56$0=$47$0;label=18;break;}
 case 17: 
 var $53=(($opNext_046+24)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($opBottom_0_ph53|0)==($54|0);
 if($55){var $opNext_0_lcssa=$opBottom_0_ph53;var $56$1=$_pre$1;var $56$0=$_pre$0;label=18;break;}else{var $opNext_046=$54;label=15;break;}
 case 18: 
 var $56$0;
 var $56$1;
 var $opNext_0_lcssa;
 var $57=(($opPrev_0_lcssa+8)|0);
 var $ld$24$0=(($57)|0);
 var $58$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($57+4)|0);
 var $58$1=HEAP32[(($ld$25$1)>>2)];
 var $59$0=_i64Subtract($_pre$0,$_pre$1,$58$0,$58$1);var $59$1=tempRet0;
 var $ld$26$0=(($33)|0);
 var $60$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($33+4)|0);
 var $60$1=HEAP32[(($ld$27$1)>>2)];
 var $61=(($opPrev_0_lcssa+16)|0);
 var $ld$28$0=(($61)|0);
 var $62$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$29$1)>>2)];
 var $63$0=_i64Subtract($60$0,$60$1,$62$0,$62$1);var $63$1=tempRet0;
 var $64$0=_i64Subtract($56$0,$56$1,$_pre$0,$_pre$1);var $64$1=tempRet0;
 var $65=(($opNext_0_lcssa+16)|0);
 var $ld$30$0=(($65)|0);
 var $66$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($65+4)|0);
 var $66$1=HEAP32[(($ld$31$1)>>2)];
 var $67$0=_i64Subtract($66$0,$66$1,$60$0,$60$1);var $67$1=tempRet0;
 if($UseFullInt64Range){label=19;break;}else{label=23;break;}
 case 19: 
 var $69=(($1+8)|0);
 var $st$32$0=(($69)|0);
 HEAP32[(($st$32$0)>>2)]=$59$0;
 var $st$33$1=(($69+4)|0);
 HEAP32[(($st$33$1)>>2)]=$59$1;
 var $70=(($1)|0);
 var $_lo_lobit_i_i40$0=($59$1>>31)|(((((($59$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i40$1=(((((($59$1|0)<0))|0)?-1:0)>>31)|(((((($59$1|0)<0))|0)?-1:0)<<1);
 var $st$34$0=(($70)|0);
 HEAP32[(($st$34$0)>>2)]=$_lo_lobit_i_i40$0;
 var $st$35$1=(($70+4)|0);
 HEAP32[(($st$35$1)>>2)]=$_lo_lobit_i_i40$1;
 var $71=(($2+8)|0);
 var $st$36$0=(($71)|0);
 HEAP32[(($st$36$0)>>2)]=$67$0;
 var $st$37$1=(($71+4)|0);
 HEAP32[(($st$37$1)>>2)]=$67$1;
 var $72=(($2)|0);
 var $_lo_lobit_i_i39$0=($67$1>>31)|(((((($67$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i39$1=(((((($67$1|0)<0))|0)?-1:0)>>31)|(((((($67$1|0)<0))|0)?-1:0)<<1);
 var $st$38$0=(($72)|0);
 HEAP32[(($st$38$0)>>2)]=$_lo_lobit_i_i39$0;
 var $st$39$1=(($72+4)|0);
 HEAP32[(($st$39$1)>>2)]=$_lo_lobit_i_i39$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $73=(($5+8)|0);
 var $st$40$0=(($73)|0);
 HEAP32[(($st$40$0)>>2)]=$64$0;
 var $st$41$1=(($73+4)|0);
 HEAP32[(($st$41$1)>>2)]=$64$1;
 var $74=(($5)|0);
 var $_lo_lobit_i_i38$0=($64$1>>31)|(((((($64$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i38$1=(((((($64$1|0)<0))|0)?-1:0)>>31)|(((((($64$1|0)<0))|0)?-1:0)<<1);
 var $st$42$0=(($74)|0);
 HEAP32[(($st$42$0)>>2)]=$_lo_lobit_i_i38$0;
 var $st$43$1=(($74+4)|0);
 HEAP32[(($st$43$1)>>2)]=$_lo_lobit_i_i38$1;
 var $75=(($6+8)|0);
 var $st$44$0=(($75)|0);
 HEAP32[(($st$44$0)>>2)]=$63$0;
 var $st$45$1=(($75+4)|0);
 HEAP32[(($st$45$1)>>2)]=$63$1;
 var $76=(($6)|0);
 var $_lo_lobit_i_i$0=($63$1>>31)|(((((($63$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i$1=(((((($63$1|0)<0))|0)?-1:0)>>31)|(((((($63$1|0)<0))|0)?-1:0)<<1);
 var $st$46$0=(($76)|0);
 HEAP32[(($st$46$0)>>2)]=$_lo_lobit_i_i$0;
 var $st$47$1=(($76+4)|0);
 HEAP32[(($st$47$1)>>2)]=$_lo_lobit_i_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $77=(($3)|0);
 var $ld$48$0=(($77)|0);
 var $78$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($77+4)|0);
 var $78$1=HEAP32[(($ld$49$1)>>2)];
 var $79=(($3+8)|0);
 var $ld$50$0=(($79)|0);
 var $80$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($79+4)|0);
 var $80$1=HEAP32[(($ld$51$1)>>2)];
 var $81=(($4)|0);
 var $ld$52$0=(($81)|0);
 var $82$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($81+4)|0);
 var $82$1=HEAP32[(($ld$53$1)>>2)];
 var $83=(($4+8)|0);
 var $ld$54$0=(($83)|0);
 var $84$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($83+4)|0);
 var $84$1=HEAP32[(($ld$55$1)>>2)];
 var $$etemp$56$0=0;
 var $$etemp$56$1=0;
 var $85=(($84$0|0) == ($$etemp$56$0|0)) & (($84$1|0) == ($$etemp$56$1|0));
 if($85){label=20;break;}else{label=21;break;}
 case 20: 
 var $$etemp$57$0=0;
 var $$etemp$57$1=0;
 var $87$0=_i64Subtract($$etemp$57$0,$$etemp$57$1,$82$0,$82$1);var $87$1=tempRet0;
 var $92$1=$87$1;var $92$0=$87$0;var $91$1=0;var $91$0=0;label=22;break;
 case 21: 
 var $$etemp$58$0=0;
 var $$etemp$58$1=0;
 var $89$0=_i64Subtract($$etemp$58$0,$$etemp$58$1,$84$0,$84$1);var $89$1=tempRet0;
 var $$etemp$59$0=-1;
 var $$etemp$59$1=-1;
 var $90$0=$82$0^$$etemp$59$0;
 var $90$1=$82$1^$$etemp$59$1;
 var $92$1=$90$1;var $92$0=$90$0;var $91$1=$89$1;var $91$0=$89$0;label=22;break;
 case 22: 
 var $91$0;
 var $91$1;
 var $92$0;
 var $92$1;
 var $93$0=_i64Add($92$0,$92$1,$78$0,$78$1);var $93$1=tempRet0;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i64($80$0,$80$1,$91$0,$91$1);
 var $uadd_i_i$1=tempRet0;
 var $uadd_i_i$2=tempRet1;
 var $94=$uadd_i_i$2;
 var $95$0=($94&1);
 var $95$1=0;
 var $_sroa_041_0_load45$0=_i64Add($93$0,$93$1,$95$0,$95$1);var $_sroa_041_0_load45$1=tempRet0;
 var $$etemp$60$0=-1;
 var $$etemp$60$1=-1;
 var $96=(($_sroa_041_0_load45$1|0) > ($$etemp$60$1|0)) | (((($_sroa_041_0_load45$1|0) == ($$etemp$60$1|0) & ($_sroa_041_0_load45$0>>>0) >  ($$etemp$60$0>>>0))));
 var $_0=$96;label=24;break;
 case 23: 
 var $98$0=___muldi3($67$0,$67$1,$59$0,$59$1);var $98$1=tempRet0;
 var $99$0=___muldi3($64$0,$64$1,$63$0,$63$1);var $99$1=tempRet0;
 var $100$0=_i64Subtract($98$0,$98$1,$99$0,$99$1);var $100$1=tempRet0;
 var $$etemp$61$0=-1;
 var $$etemp$61$1=-1;
 var $101=(($100$1|0) > ($$etemp$61$1|0)) | (((($100$1|0) == ($$etemp$61$1|0) & ($100$0>>>0) >  ($$etemp$61$0>>>0))));
 var $_0=$101;label=24;break;
 case 24: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($poly){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(sp)+(96);
 var $8=(sp)+(112);
 var $9=(sp)+(128);
 var $10=(sp)+(144);
 var $11=(sp)+(160);
 var $12=(sp)+(176);
 var $13=(($poly+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($poly)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>4;
 var $21=((($20)-(1))|0);
 var $22=($21|0)<2;
 if($22){var $_0=0;label=26;break;}else{label=2;break;}
 case 2: 
 var $24=($14|0)==($16|0);
 if($24){label=23;break;}else{var $result_0_off021_i=0;var $i_022_i=0;label=3;break;}
 case 3: 
 var $i_022_i;
 var $result_0_off021_i;
 var $25=(($16+($i_022_i<<4))|0);
 var $ld$0$0=(($25)|0);
 var $26$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($25+4)|0);
 var $26$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $27=(($26$1|0) < ($$etemp$2$1|0)) | (((($26$1|0) == ($$etemp$2$1|0) & ($26$0>>>0) <  ($$etemp$2$0>>>0))));
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $28$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$26$0,$26$1);var $28$1=tempRet0;
 var $29$0=$27?$28$0:$26$0;
 var $29$1=$27?$28$1:$26$1;
 var $$etemp$4$0=-1;
 var $$etemp$4$1=1073741823;
 var $30=(($29$1|0) > ($$etemp$4$1|0)) | (((($29$1|0) == ($$etemp$4$1|0) & ($29$0>>>0) >  ($$etemp$4$0>>>0))));
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 var $32=(($16+($i_022_i<<4)+8)|0);
 var $ld$5$0=(($32)|0);
 var $33$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($32+4)|0);
 var $33$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $34=(($33$1|0) < ($$etemp$7$1|0)) | (((($33$1|0) == ($$etemp$7$1|0) & ($33$0>>>0) <  ($$etemp$7$0>>>0))));
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $35$0=_i64Subtract($$etemp$8$0,$$etemp$8$1,$33$0,$33$1);var $35$1=tempRet0;
 var $36$0=$34?$35$0:$33$0;
 var $36$1=$34?$35$1:$33$1;
 var $$etemp$9$0=-1;
 var $$etemp$9$1=1073741823;
 var $37=(($36$1|0) > ($$etemp$9$1|0)) | (((($36$1|0) == ($$etemp$9$1|0) & ($36$0>>>0) >  ($$etemp$9$0>>>0))));
 if($37){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5512;
 ___cxa_throw($39,12808,0);
 throw "Reached an unreachable!";
 case 6: 
 var $$etemp$10$0=1073741823;
 var $$etemp$10$1=0;
 var $42=(($29$1|0) > ($$etemp$10$1|0)) | (((($29$1|0) == ($$etemp$10$1|0) & ($29$0>>>0) >  ($$etemp$10$0>>>0))));
 var $$etemp$11$0=1073741823;
 var $$etemp$11$1=0;
 var $43=(($36$1|0) > ($$etemp$11$1|0)) | (((($36$1|0) == ($$etemp$11$1|0) & ($36$0>>>0) >  ($$etemp$11$0>>>0))));
 var $or_cond_i=$42|$43;
 var $_result_0_off0_i=$or_cond_i|$result_0_off021_i;
 var $44=((($i_022_i)+(1))|0);
 var $45=($44>>>0)<($20>>>0);
 if($45){var $result_0_off021_i=$_result_0_off0_i;var $i_022_i=$44;label=3;break;}else{label=7;break;}
 case 7: 
 if($_result_0_off0_i){label=8;break;}else{label=23;break;}
 case 8: 
 var $47=(($16+($21<<4))|0);
 var $ld$12$0=(($47)|0);
 var $48$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($47+4)|0);
 var $48$1=HEAP32[(($ld$13$1)>>2)];
 var $49=(($1+8)|0);
 var $st$14$0=(($49)|0);
 HEAP32[(($st$14$0)>>2)]=$48$0;
 var $st$15$1=(($49+4)|0);
 HEAP32[(($st$15$1)>>2)]=$48$1;
 var $50=(($1)|0);
 var $_lo_lobit_i_i$0=($48$1>>31)|(((((($48$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i$1=(((((($48$1|0)<0))|0)?-1:0)>>31)|(((((($48$1|0)<0))|0)?-1:0)<<1);
 var $st$16$0=(($50)|0);
 HEAP32[(($st$16$0)>>2)]=$_lo_lobit_i_i$0;
 var $st$17$1=(($50+4)|0);
 HEAP32[(($st$17$1)>>2)]=$_lo_lobit_i_i$1;
 var $51=(($16+8)|0);
 var $ld$18$0=(($51)|0);
 var $52$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($51+4)|0);
 var $52$1=HEAP32[(($ld$19$1)>>2)];
 var $53=(($2+8)|0);
 var $st$20$0=(($53)|0);
 HEAP32[(($st$20$0)>>2)]=$52$0;
 var $st$21$1=(($53+4)|0);
 HEAP32[(($st$21$1)>>2)]=$52$1;
 var $54=(($2)|0);
 var $_lo_lobit_i_i69$0=($52$1>>31)|(((((($52$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i69$1=(((((($52$1|0)<0))|0)?-1:0)>>31)|(((((($52$1|0)<0))|0)?-1:0)<<1);
 var $st$22$0=(($54)|0);
 HEAP32[(($st$22$0)>>2)]=$_lo_lobit_i_i69$0;
 var $st$23$1=(($54+4)|0);
 HEAP32[(($st$23$1)>>2)]=$_lo_lobit_i_i69$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $55=HEAP32[(($15)>>2)];
 var $56=(($55)|0);
 var $ld$24$0=(($56)|0);
 var $57$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($56+4)|0);
 var $57$1=HEAP32[(($ld$25$1)>>2)];
 var $58=(($5+8)|0);
 var $st$26$0=(($58)|0);
 HEAP32[(($st$26$0)>>2)]=$57$0;
 var $st$27$1=(($58+4)|0);
 HEAP32[(($st$27$1)>>2)]=$57$1;
 var $59=(($5)|0);
 var $_lo_lobit_i_i72$0=($57$1>>31)|(((((($57$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i72$1=(((((($57$1|0)<0))|0)?-1:0)>>31)|(((((($57$1|0)<0))|0)?-1:0)<<1);
 var $st$28$0=(($59)|0);
 HEAP32[(($st$28$0)>>2)]=$_lo_lobit_i_i72$0;
 var $st$29$1=(($59+4)|0);
 HEAP32[(($st$29$1)>>2)]=$_lo_lobit_i_i72$1;
 var $60=(($55+($21<<4)+8)|0);
 var $ld$30$0=(($60)|0);
 var $61$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($60+4)|0);
 var $61$1=HEAP32[(($ld$31$1)>>2)];
 var $62=(($6+8)|0);
 var $st$32$0=(($62)|0);
 HEAP32[(($st$32$0)>>2)]=$61$0;
 var $st$33$1=(($62+4)|0);
 HEAP32[(($st$33$1)>>2)]=$61$1;
 var $63=(($6)|0);
 var $_lo_lobit_i_i78$0=($61$1>>31)|(((((($61$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i78$1=(((((($61$1|0)<0))|0)?-1:0)>>31)|(((((($61$1|0)<0))|0)?-1:0)<<1);
 var $st$34$0=(($63)|0);
 HEAP32[(($st$34$0)>>2)]=$_lo_lobit_i_i78$0;
 var $st$35$1=(($63+4)|0);
 HEAP32[(($st$35$1)>>2)]=$_lo_lobit_i_i78$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $64=(($3)|0);
 var $ld$36$0=(($64)|0);
 var $65$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($64+4)|0);
 var $65$1=HEAP32[(($ld$37$1)>>2)];
 var $66=(($3+8)|0);
 var $ld$38$0=(($66)|0);
 var $67$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($66+4)|0);
 var $67$1=HEAP32[(($ld$39$1)>>2)];
 var $68=(($4)|0);
 var $ld$40$0=(($68)|0);
 var $69$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($68+4)|0);
 var $69$1=HEAP32[(($ld$41$1)>>2)];
 var $70=(($4+8)|0);
 var $ld$42$0=(($70)|0);
 var $71$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($70+4)|0);
 var $71$1=HEAP32[(($ld$43$1)>>2)];
 var $$etemp$44$0=0;
 var $$etemp$44$1=0;
 var $72=(($71$0|0) == ($$etemp$44$0|0)) & (($71$1|0) == ($$etemp$44$1|0));
 if($72){label=9;break;}else{label=10;break;}
 case 9: 
 var $$etemp$45$0=0;
 var $$etemp$45$1=0;
 var $74$0=_i64Subtract($$etemp$45$0,$$etemp$45$1,$69$0,$69$1);var $74$1=tempRet0;
 var $79$1=$74$1;var $79$0=$74$0;var $78$1=0;var $78$0=0;label=11;break;
 case 10: 
 var $$etemp$46$0=0;
 var $$etemp$46$1=0;
 var $76$0=_i64Subtract($$etemp$46$0,$$etemp$46$1,$71$0,$71$1);var $76$1=tempRet0;
 var $$etemp$47$0=-1;
 var $$etemp$47$1=-1;
 var $77$0=$69$0^$$etemp$47$0;
 var $77$1=$69$1^$$etemp$47$1;
 var $79$1=$77$1;var $79$0=$77$0;var $78$1=$76$1;var $78$0=$76$0;label=11;break;
 case 11: 
 var $78$0;
 var $78$1;
 var $79$0;
 var $79$1;
 var $80$0=_i64Add($79$0,$79$1,$65$0,$65$1);var $80$1=tempRet0;
 var $uadd_i_i75$0=_llvm_uadd_with_overflow_i64($67$0,$67$1,$78$0,$78$1);
 var $uadd_i_i75$1=tempRet0;
 var $uadd_i_i75$2=tempRet1;
 var $81$0=$uadd_i_i75$0;
 var $81$1=$uadd_i_i75$1;
 var $82=$uadd_i_i75$2;
 var $83$0=($82&1);
 var $83$1=0;
 var $_ph$0=_i64Add($80$0,$80$1,$83$0,$83$1);var $_ph$1=tempRet0;
 var $84=($21|0)>0;
 if($84){label=12;break;}else{var $_lcssa$1=$81$1;var $_lcssa$0=$81$0;var $_lcssa89$1=$_ph$1;var $_lcssa89$0=$_ph$0;label=17;break;}
 case 12: 
 var $85=(($7+8)|0);
 var $86=(($7)|0);
 var $87=(($8+8)|0);
 var $88=(($8)|0);
 var $89=(($11+8)|0);
 var $90=(($11)|0);
 var $91=(($12+8)|0);
 var $92=(($12)|0);
 var $93=(($9)|0);
 var $94=(($9+8)|0);
 var $95=(($10)|0);
 var $96=(($10+8)|0);
 var $99$1=$81$1;var $99$0=$81$0;var $98$1=$_ph$1;var $98$0=$_ph$0;var $i_090=0;label=13;break;
 case 13: 
 var $i_090;
 var $98$0;
 var $98$1;
 var $99$0;
 var $99$1;
 var $100=HEAP32[(($15)>>2)];
 var $101=(($100+($i_090<<4))|0);
 var $ld$48$0=(($101)|0);
 var $102$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($101+4)|0);
 var $102$1=HEAP32[(($ld$49$1)>>2)];
 var $st$50$0=(($85)|0);
 HEAP32[(($st$50$0)>>2)]=$102$0;
 var $st$51$1=(($85+4)|0);
 HEAP32[(($st$51$1)>>2)]=$102$1;
 var $_lo_lobit_i_i74$0=($102$1>>31)|(((((($102$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i74$1=(((((($102$1|0)<0))|0)?-1:0)>>31)|(((((($102$1|0)<0))|0)?-1:0)<<1);
 var $st$52$0=(($86)|0);
 HEAP32[(($st$52$0)>>2)]=$_lo_lobit_i_i74$0;
 var $st$53$1=(($86+4)|0);
 HEAP32[(($st$53$1)>>2)]=$_lo_lobit_i_i74$1;
 var $103=((($i_090)+(1))|0);
 var $104=(($100+($103<<4)+8)|0);
 var $ld$54$0=(($104)|0);
 var $105$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($104+4)|0);
 var $105$1=HEAP32[(($ld$55$1)>>2)];
 var $st$56$0=(($87)|0);
 HEAP32[(($st$56$0)>>2)]=$105$0;
 var $st$57$1=(($87+4)|0);
 HEAP32[(($st$57$1)>>2)]=$105$1;
 var $_lo_lobit_i_i73$0=($105$1>>31)|(((((($105$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i73$1=(((((($105$1|0)<0))|0)?-1:0)>>31)|(((((($105$1|0)<0))|0)?-1:0)<<1);
 var $st$58$0=(($88)|0);
 HEAP32[(($st$58$0)>>2)]=$_lo_lobit_i_i73$0;
 var $st$59$1=(($88+4)|0);
 HEAP32[(($st$59$1)>>2)]=$_lo_lobit_i_i73$1;
 __ZNK10ClipperLib6Int128mlERKS0_($9,$7,$8);
 var $106=HEAP32[(($15)>>2)];
 var $107=(($106+($103<<4))|0);
 var $ld$60$0=(($107)|0);
 var $108$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($107+4)|0);
 var $108$1=HEAP32[(($ld$61$1)>>2)];
 var $st$62$0=(($89)|0);
 HEAP32[(($st$62$0)>>2)]=$108$0;
 var $st$63$1=(($89+4)|0);
 HEAP32[(($st$63$1)>>2)]=$108$1;
 var $_lo_lobit_i_i71$0=($108$1>>31)|(((((($108$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i71$1=(((((($108$1|0)<0))|0)?-1:0)>>31)|(((((($108$1|0)<0))|0)?-1:0)<<1);
 var $st$64$0=(($90)|0);
 HEAP32[(($st$64$0)>>2)]=$_lo_lobit_i_i71$0;
 var $st$65$1=(($90+4)|0);
 HEAP32[(($st$65$1)>>2)]=$_lo_lobit_i_i71$1;
 var $109=(($106+($i_090<<4)+8)|0);
 var $ld$66$0=(($109)|0);
 var $110$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($109+4)|0);
 var $110$1=HEAP32[(($ld$67$1)>>2)];
 var $st$68$0=(($91)|0);
 HEAP32[(($st$68$0)>>2)]=$110$0;
 var $st$69$1=(($91+4)|0);
 HEAP32[(($st$69$1)>>2)]=$110$1;
 var $_lo_lobit_i_i70$0=($110$1>>31)|(((((($110$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i70$1=(((((($110$1|0)<0))|0)?-1:0)>>31)|(((((($110$1|0)<0))|0)?-1:0)<<1);
 var $st$70$0=(($92)|0);
 HEAP32[(($st$70$0)>>2)]=$_lo_lobit_i_i70$0;
 var $st$71$1=(($92+4)|0);
 HEAP32[(($st$71$1)>>2)]=$_lo_lobit_i_i70$1;
 __ZNK10ClipperLib6Int128mlERKS0_($10,$11,$12);
 var $ld$72$0=(($93)|0);
 var $111$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($93+4)|0);
 var $111$1=HEAP32[(($ld$73$1)>>2)];
 var $ld$74$0=(($94)|0);
 var $112$0=HEAP32[(($ld$74$0)>>2)];
 var $ld$75$1=(($94+4)|0);
 var $112$1=HEAP32[(($ld$75$1)>>2)];
 var $ld$76$0=(($95)|0);
 var $113$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($95+4)|0);
 var $113$1=HEAP32[(($ld$77$1)>>2)];
 var $ld$78$0=(($96)|0);
 var $114$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($96+4)|0);
 var $114$1=HEAP32[(($ld$79$1)>>2)];
 var $$etemp$80$0=0;
 var $$etemp$80$1=0;
 var $115=(($114$0|0) == ($$etemp$80$0|0)) & (($114$1|0) == ($$etemp$80$1|0));
 if($115){label=14;break;}else{label=15;break;}
 case 14: 
 var $$etemp$81$0=0;
 var $$etemp$81$1=0;
 var $117$0=_i64Subtract($$etemp$81$0,$$etemp$81$1,$113$0,$113$1);var $117$1=tempRet0;
 var $122$1=$117$1;var $122$0=$117$0;var $121$1=0;var $121$0=0;label=16;break;
 case 15: 
 var $$etemp$82$0=0;
 var $$etemp$82$1=0;
 var $119$0=_i64Subtract($$etemp$82$0,$$etemp$82$1,$114$0,$114$1);var $119$1=tempRet0;
 var $$etemp$83$0=-1;
 var $$etemp$83$1=-1;
 var $120$0=$113$0^$$etemp$83$0;
 var $120$1=$113$1^$$etemp$83$1;
 var $122$1=$120$1;var $122$0=$120$0;var $121$1=$119$1;var $121$0=$119$0;label=16;break;
 case 16: 
 var $121$0;
 var $121$1;
 var $122$0;
 var $122$1;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i64($112$0,$112$1,$121$0,$121$1);
 var $uadd_i_i$1=tempRet0;
 var $uadd_i_i$2=tempRet1;
 var $123$0=$uadd_i_i$0;
 var $123$1=$uadd_i_i$1;
 var $124=$uadd_i_i$2;
 var $125$0=($124&1);
 var $125$1=0;
 var $126$0=_i64Add($111$0,$111$1,$98$0,$98$1);var $126$1=tempRet0;
 var $_sroa_0_0_load85$0=_i64Add($126$0,$126$1,$122$0,$122$1);var $_sroa_0_0_load85$1=tempRet0;
 var $127$0=_i64Add($_sroa_0_0_load85$0,$_sroa_0_0_load85$1,$125$0,$125$1);var $127$1=tempRet0;
 var $uadd$0=_llvm_uadd_with_overflow_i64($99$0,$99$1,$123$0,$123$1);
 var $uadd$1=tempRet0;
 var $uadd$2=tempRet1;
 var $128$0=$uadd$0;
 var $128$1=$uadd$1;
 var $129=$uadd$2;
 var $130$0=($129&1);
 var $130$1=0;
 var $_be$0=_i64Add($127$0,$127$1,$130$0,$130$1);var $_be$1=tempRet0;
 var $131=($103|0)<($21|0);
 if($131){var $99$1=$128$1;var $99$0=$128$0;var $98$1=$_be$1;var $98$0=$_be$0;var $i_090=$103;label=13;break;}else{var $_lcssa$1=$128$1;var $_lcssa$0=$128$0;var $_lcssa89$1=$_be$1;var $_lcssa89$0=$_be$0;label=17;break;}
 case 17: 
 var $_lcssa89$0;
 var $_lcssa89$1;
 var $_lcssa$0;
 var $_lcssa$1;
 var $$etemp$84$0=0;
 var $$etemp$84$1=0;
 var $132=(($_lcssa89$1|0) < ($$etemp$84$1|0)) | (((($_lcssa89$1|0) == ($$etemp$84$1|0) & ($_lcssa89$0>>>0) <  ($$etemp$84$0>>>0))));
 if($132){label=18;break;}else{label=21;break;}
 case 18: 
 var $$etemp$85$0=0;
 var $$etemp$85$1=0;
 var $134=(($_lcssa$0|0) == ($$etemp$85$0|0)) & (($_lcssa$1|0) == ($$etemp$85$1|0));
 if($134){label=19;break;}else{label=20;break;}
 case 19: 
 var $136=(($_lcssa89$0>>>0)+(($_lcssa89$1|0)*4294967296));
 var $137=($136)*(18446744073709552000);
 var $_0_i=$137;label=22;break;
 case 20: 
 var $$etemp$86$0=0;
 var $$etemp$86$1=0;
 var $139$0=_i64Subtract($$etemp$86$0,$$etemp$86$1,$_lcssa$0,$_lcssa$1);var $139$1=tempRet0;
 var $140=(($139$0>>>0)+(($139$1>>>0)*4294967296));
 var $$etemp$87$0=-1;
 var $$etemp$87$1=-1;
 var $141$0=$_lcssa89$0^$$etemp$87$0;
 var $141$1=$_lcssa89$1^$$etemp$87$1;
 var $142=(($141$0>>>0)+(($141$1|0)*4294967296));
 var $143=($142)*(18446744073709552000);
 var $144=($140)+($143);
 var $145=((-.0))-($144);
 var $_0_i=$145;label=22;break;
 case 21: 
 var $147=(($_lcssa$0>>>0)+(($_lcssa$1>>>0)*4294967296));
 var $148=(($_lcssa89$0>>>0)+(($_lcssa89$1|0)*4294967296));
 var $149=($148)*(18446744073709552000);
 var $150=($147)+($149);
 var $_0_i=$150;label=22;break;
 case 22: 
 var $_0_i;
 var $151=($_0_i)*((0.5));
 var $_0=$151;label=26;break;
 case 23: 
 var $152=(($16+($21<<4))|0);
 var $ld$88$0=(($152)|0);
 var $153$0=HEAP32[(($ld$88$0)>>2)];
 var $ld$89$1=(($152+4)|0);
 var $153$1=HEAP32[(($ld$89$1)>>2)];
 var $154=(($153$0>>>0)+(($153$1|0)*4294967296));
 var $155=(($16+8)|0);
 var $ld$90$0=(($155)|0);
 var $156$0=HEAP32[(($ld$90$0)>>2)];
 var $ld$91$1=(($155+4)|0);
 var $156$1=HEAP32[(($ld$91$1)>>2)];
 var $157=(($156$0>>>0)+(($156$1|0)*4294967296));
 var $158=($154)*($157);
 var $159=(($16)|0);
 var $ld$92$0=(($159)|0);
 var $160$0=HEAP32[(($ld$92$0)>>2)];
 var $ld$93$1=(($159+4)|0);
 var $160$1=HEAP32[(($ld$93$1)>>2)];
 var $161=(($160$0>>>0)+(($160$1|0)*4294967296));
 var $162=(($16+($21<<4)+8)|0);
 var $ld$94$0=(($162)|0);
 var $163$0=HEAP32[(($ld$94$0)>>2)];
 var $ld$95$1=(($162+4)|0);
 var $163$1=HEAP32[(($ld$95$1)>>2)];
 var $164=(($163$0>>>0)+(($163$1|0)*4294967296));
 var $165=($161)*($164);
 var $166=($158)-($165);
 var $167=($21|0)>0;
 if($167){var $a1_087=$166;var $i2_088=0;var $169$1=$160$1;var $169$0=$160$0;var $168$1=$156$1;var $168$0=$156$0;label=24;break;}else{var $a1_0_lcssa=$166;label=25;break;}
 case 24: 
 var $168$0;
 var $168$1;
 var $169$0;
 var $169$1;
 var $i2_088;
 var $a1_087;
 var $170=(($169$0>>>0)+(($169$1|0)*4294967296));
 var $171=((($i2_088)+(1))|0);
 var $172=(($16+($171<<4)+8)|0);
 var $ld$96$0=(($172)|0);
 var $173$0=HEAP32[(($ld$96$0)>>2)];
 var $ld$97$1=(($172+4)|0);
 var $173$1=HEAP32[(($ld$97$1)>>2)];
 var $174=(($173$0>>>0)+(($173$1|0)*4294967296));
 var $175=($170)*($174);
 var $176=(($16+($171<<4))|0);
 var $ld$98$0=(($176)|0);
 var $177$0=HEAP32[(($ld$98$0)>>2)];
 var $ld$99$1=(($176+4)|0);
 var $177$1=HEAP32[(($ld$99$1)>>2)];
 var $178=(($177$0>>>0)+(($177$1|0)*4294967296));
 var $179=(($168$0>>>0)+(($168$1|0)*4294967296));
 var $180=($178)*($179);
 var $181=($175)-($180);
 var $182=($a1_087)+($181);
 var $183=($171|0)<($21|0);
 if($183){var $a1_087=$182;var $i2_088=$171;var $169$1=$177$1;var $169$0=$177$0;var $168$1=$173$1;var $168$0=$173$0;label=24;break;}else{var $a1_0_lcssa=$182;label=25;break;}
 case 25: 
 var $a1_0_lcssa;
 var $184=($a1_0_lcssa)*((0.5));
 var $_0=$184;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib4AreaERKNS_6OutRecEb($outRec,$UseFullInt64Range){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(($outRec+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){var $_0=0;label=16;break;}else{label=2;break;}
 case 2: 
 if($UseFullInt64Range){label=3;break;}else{var $a1_0=0;var $op_1=$8;label=14;break;}
 case 3: 
 var $11=(($1+8)|0);
 var $12=(($1)|0);
 var $13=(($2+8)|0);
 var $14=(($2)|0);
 var $15=(($5+8)|0);
 var $16=(($5)|0);
 var $17=(($6+8)|0);
 var $18=(($6)|0);
 var $19=(($3)|0);
 var $20=(($3+8)|0);
 var $21=(($4)|0);
 var $22=(($4+8)|0);
 var $op_0=$8;var $25$1=0;var $25$0=0;var $24$1=0;var $24$0=0;label=4;break;
 case 4: 
 var $24$0;
 var $24$1;
 var $25$0;
 var $25$1;
 var $op_0;
 var $26=(($op_0+28)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+8)|0);
 var $ld$0$0=(($28)|0);
 var $29$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($11)|0);
 HEAP32[(($st$2$0)>>2)]=$29$0;
 var $st$3$1=(($11+4)|0);
 HEAP32[(($st$3$1)>>2)]=$29$1;
 var $_lo_lobit_i_i$0=($29$1>>31)|(((((($29$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i$1=(((((($29$1|0)<0))|0)?-1:0)>>31)|(((((($29$1|0)<0))|0)?-1:0)<<1);
 var $st$4$0=(($12)|0);
 HEAP32[(($st$4$0)>>2)]=$_lo_lobit_i_i$0;
 var $st$5$1=(($12+4)|0);
 HEAP32[(($st$5$1)>>2)]=$_lo_lobit_i_i$1;
 var $30=(($op_0+16)|0);
 var $ld$6$0=(($30)|0);
 var $31$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($13)|0);
 HEAP32[(($st$8$0)>>2)]=$31$0;
 var $st$9$1=(($13+4)|0);
 HEAP32[(($st$9$1)>>2)]=$31$1;
 var $_lo_lobit_i_i20$0=($31$1>>31)|(((((($31$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i20$1=(((((($31$1|0)<0))|0)?-1:0)>>31)|(((((($31$1|0)<0))|0)?-1:0)<<1);
 var $st$10$0=(($14)|0);
 HEAP32[(($st$10$0)>>2)]=$_lo_lobit_i_i20$0;
 var $st$11$1=(($14+4)|0);
 HEAP32[(($st$11$1)>>2)]=$_lo_lobit_i_i20$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $32=(($op_0+8)|0);
 var $ld$12$0=(($32)|0);
 var $33$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($32+4)|0);
 var $33$1=HEAP32[(($ld$13$1)>>2)];
 var $st$14$0=(($15)|0);
 HEAP32[(($st$14$0)>>2)]=$33$0;
 var $st$15$1=(($15+4)|0);
 HEAP32[(($st$15$1)>>2)]=$33$1;
 var $_lo_lobit_i_i19$0=($33$1>>31)|(((((($33$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i19$1=(((((($33$1|0)<0))|0)?-1:0)>>31)|(((((($33$1|0)<0))|0)?-1:0)<<1);
 var $st$16$0=(($16)|0);
 HEAP32[(($st$16$0)>>2)]=$_lo_lobit_i_i19$0;
 var $st$17$1=(($16+4)|0);
 HEAP32[(($st$17$1)>>2)]=$_lo_lobit_i_i19$1;
 var $34=HEAP32[(($26)>>2)];
 var $35=(($34+16)|0);
 var $ld$18$0=(($35)|0);
 var $36$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($35+4)|0);
 var $36$1=HEAP32[(($ld$19$1)>>2)];
 var $st$20$0=(($17)|0);
 HEAP32[(($st$20$0)>>2)]=$36$0;
 var $st$21$1=(($17+4)|0);
 HEAP32[(($st$21$1)>>2)]=$36$1;
 var $_lo_lobit_i_i18$0=($36$1>>31)|(((((($36$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i18$1=(((((($36$1|0)<0))|0)?-1:0)>>31)|(((((($36$1|0)<0))|0)?-1:0)<<1);
 var $st$22$0=(($18)|0);
 HEAP32[(($st$22$0)>>2)]=$_lo_lobit_i_i18$0;
 var $st$23$1=(($18+4)|0);
 HEAP32[(($st$23$1)>>2)]=$_lo_lobit_i_i18$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$24$0=(($19)|0);
 var $37$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($19+4)|0);
 var $37$1=HEAP32[(($ld$25$1)>>2)];
 var $ld$26$0=(($20)|0);
 var $38$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($20+4)|0);
 var $38$1=HEAP32[(($ld$27$1)>>2)];
 var $ld$28$0=(($21)|0);
 var $39$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($21+4)|0);
 var $39$1=HEAP32[(($ld$29$1)>>2)];
 var $ld$30$0=(($22)|0);
 var $40$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($22+4)|0);
 var $40$1=HEAP32[(($ld$31$1)>>2)];
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $41=(($40$0|0) == ($$etemp$32$0|0)) & (($40$1|0) == ($$etemp$32$1|0));
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $$etemp$33$0=0;
 var $$etemp$33$1=0;
 var $43$0=_i64Subtract($$etemp$33$0,$$etemp$33$1,$39$0,$39$1);var $43$1=tempRet0;
 var $48$1=$43$1;var $48$0=$43$0;var $47$1=0;var $47$0=0;label=7;break;
 case 6: 
 var $$etemp$34$0=0;
 var $$etemp$34$1=0;
 var $45$0=_i64Subtract($$etemp$34$0,$$etemp$34$1,$40$0,$40$1);var $45$1=tempRet0;
 var $$etemp$35$0=-1;
 var $$etemp$35$1=-1;
 var $46$0=$39$0^$$etemp$35$0;
 var $46$1=$39$1^$$etemp$35$1;
 var $48$1=$46$1;var $48$0=$46$0;var $47$1=$45$1;var $47$0=$45$0;label=7;break;
 case 7: 
 var $47$0;
 var $47$1;
 var $48$0;
 var $48$1;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i64($38$0,$38$1,$47$0,$47$1);
 var $uadd_i_i$1=tempRet0;
 var $uadd_i_i$2=tempRet1;
 var $49$0=$uadd_i_i$0;
 var $49$1=$uadd_i_i$1;
 var $50=$uadd_i_i$2;
 var $51$0=($50&1);
 var $51$1=0;
 var $uadd$0=_llvm_uadd_with_overflow_i64($24$0,$24$1,$49$0,$49$1);
 var $uadd$1=tempRet0;
 var $uadd$2=tempRet1;
 var $52$0=$uadd$0;
 var $52$1=$uadd$1;
 var $53=$uadd$2;
 var $54$0=($53&1);
 var $54$1=0;
 var $55$0=_i64Add($37$0,$37$1,$25$0,$25$1);var $55$1=tempRet0;
 var $_sroa_0_0_load24$0=_i64Add($55$0,$55$1,$48$0,$48$1);var $_sroa_0_0_load24$1=tempRet0;
 var $56$0=_i64Add($_sroa_0_0_load24$0,$_sroa_0_0_load24$1,$51$0,$51$1);var $56$1=tempRet0;
 var $57$0=_i64Add($56$0,$56$1,$54$0,$54$1);var $57$1=tempRet0;
 var $58=(($op_0+24)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=HEAP32[(($7)>>2)];
 var $61=($59|0)==($60|0);
 if($61){label=8;break;}else{var $op_0=$59;var $25$1=$57$1;var $25$0=$57$0;var $24$1=$52$1;var $24$0=$52$0;label=4;break;}
 case 8: 
 var $$etemp$36$0=0;
 var $$etemp$36$1=0;
 var $63=(($57$1|0) < ($$etemp$36$1|0)) | (((($57$1|0) == ($$etemp$36$1|0) & ($57$0>>>0) <  ($$etemp$36$0>>>0))));
 if($63){label=9;break;}else{label=12;break;}
 case 9: 
 var $$etemp$37$0=0;
 var $$etemp$37$1=0;
 var $65=(($52$0|0) == ($$etemp$37$0|0)) & (($52$1|0) == ($$etemp$37$1|0));
 if($65){label=10;break;}else{label=11;break;}
 case 10: 
 var $67=(($57$0>>>0)+(($57$1|0)*4294967296));
 var $68=($67)*(18446744073709552000);
 var $_0_i=$68;label=13;break;
 case 11: 
 var $$etemp$38$0=0;
 var $$etemp$38$1=0;
 var $70$0=_i64Subtract($$etemp$38$0,$$etemp$38$1,$52$0,$52$1);var $70$1=tempRet0;
 var $71=(($70$0>>>0)+(($70$1>>>0)*4294967296));
 var $$etemp$39$0=-1;
 var $$etemp$39$1=-1;
 var $72$0=$57$0^$$etemp$39$0;
 var $72$1=$57$1^$$etemp$39$1;
 var $73=(($72$0>>>0)+(($72$1|0)*4294967296));
 var $74=($73)*(18446744073709552000);
 var $75=($71)+($74);
 var $76=((-.0))-($75);
 var $_0_i=$76;label=13;break;
 case 12: 
 var $78=(($52$0>>>0)+(($52$1>>>0)*4294967296));
 var $79=(($57$0>>>0)+(($57$1|0)*4294967296));
 var $80=($79)*(18446744073709552000);
 var $81=($78)+($80);
 var $_0_i=$81;label=13;break;
 case 13: 
 var $_0_i;
 var $82=($_0_i)*((0.5));
 var $_0=$82;label=16;break;
 case 14: 
 var $op_1;
 var $a1_0;
 var $83=(($op_1+28)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $ld$40$0=(($85)|0);
 var $86$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($85+4)|0);
 var $86$1=HEAP32[(($ld$41$1)>>2)];
 var $87=(($op_1+16)|0);
 var $ld$42$0=(($87)|0);
 var $88$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($87+4)|0);
 var $88$1=HEAP32[(($ld$43$1)>>2)];
 var $89$0=___muldi3($88$0,$88$1,$86$0,$86$1);var $89$1=tempRet0;
 var $90=(($op_1+8)|0);
 var $ld$44$0=(($90)|0);
 var $91$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($90+4)|0);
 var $91$1=HEAP32[(($ld$45$1)>>2)];
 var $92=(($84+16)|0);
 var $ld$46$0=(($92)|0);
 var $93$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($92+4)|0);
 var $93$1=HEAP32[(($ld$47$1)>>2)];
 var $94$0=___muldi3($93$0,$93$1,$91$0,$91$1);var $94$1=tempRet0;
 var $95$0=_i64Subtract($89$0,$89$1,$94$0,$94$1);var $95$1=tempRet0;
 var $96=(($95$0>>>0)+(($95$1|0)*4294967296));
 var $97=($a1_0)+($96);
 var $98=(($op_1+24)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==($8|0);
 if($100){label=15;break;}else{var $a1_0=$97;var $op_1=$99;label=14;break;}
 case 15: 
 var $102=($97)*((0.5));
 var $_0=$102;label=16;break;
 case 16: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib14PointInPolygonERKNS_8IntPointEPNS_5OutPtEb($pt,$pp,$UseFullInt64Range){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(($pt+8)|0);
 if($UseFullInt64Range){label=3;break;}else{label=2;break;}
 case 2: 
 var $ld$0$0=(($6)|0);
 var $7$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($6+4)|0);
 var $7$1=HEAP32[(($ld$1$1)>>2)];
 var $8=(($pt)|0);
 var $result_2_off0=0;var $pp2_1=$pp;label=11;break;
 case 3: 
 var $9=(($pt)|0);
 var $10=(($2+8)|0);
 var $11=(($2)|0);
 var $12=(($3+8)|0);
 var $13=(($3)|0);
 var $14=(($5+8)|0);
 var $15=(($5)|0);
 var $16=(($1)|0);
 var $17=(($1+8)|0);
 var $result_0=0;var $pp2_0=$pp;label=4;break;
 case 4: 
 var $pp2_0;
 var $result_0;
 var $18=(($pp2_0+16)|0);
 var $ld$2$0=(($18)|0);
 var $19$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($18+4)|0);
 var $19$1=HEAP32[(($ld$3$1)>>2)];
 var $ld$4$0=(($6)|0);
 var $20$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($6+4)|0);
 var $20$1=HEAP32[(($ld$5$1)>>2)];
 var $21=(($19$1|0) > ($20$1|0)) | (((($19$1|0) == ($20$1|0) & ($19$0>>>0) >  ($20$0>>>0))));
 var $_phi_trans_insert=(($pp2_0+28)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert56=(($_pre+16)|0);
 var $ld$6$0=(($_phi_trans_insert56)|0);
 var $_pre57$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($_phi_trans_insert56+4)|0);
 var $_pre57$1=HEAP32[(($ld$7$1)>>2)];
 var $_not=$21^1;
 var $22=(($20$1|0) < ($_pre57$1|0)) | (((($20$1|0) == ($_pre57$1|0) & ($20$0>>>0) <  ($_pre57$0>>>0))));
 var $or_cond=$22&$_not;
 if($or_cond){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=(($_pre57$1|0) > ($20$1|0)) | (((($_pre57$1|0) == ($20$1|0) & ($_pre57$0>>>0) >  ($20$0>>>0))));
 var $_not62=$21^1;
 var $brmerge=$23|$_not62;
 if($brmerge){var $result_1=$result_0;label=10;break;}else{label=6;break;}
 case 6: 
 var $ld$8$0=(($9)|0);
 var $25$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($9+4)|0);
 var $25$1=HEAP32[(($ld$9$1)>>2)];
 var $26=(($pp2_0+8)|0);
 var $ld$10$0=(($26)|0);
 var $27$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($26+4)|0);
 var $27$1=HEAP32[(($ld$11$1)>>2)];
 var $28$0=_i64Subtract($25$0,$25$1,$27$0,$27$1);var $28$1=tempRet0;
 var $_lo_lobit_i_i$0=($28$1>>31)|(((((($28$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i$1=(((((($28$1|0)<0))|0)?-1:0)>>31)|(((((($28$1|0)<0))|0)?-1:0)<<1);
 var $29=(($pp2_0+28)|0);
 var $30=(($_pre+8)|0);
 var $ld$12$0=(($30)|0);
 var $31$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$13$1)>>2)];
 var $32$0=_i64Subtract($31$0,$31$1,$27$0,$27$1);var $32$1=tempRet0;
 var $st$14$0=(($10)|0);
 HEAP32[(($st$14$0)>>2)]=$32$0;
 var $st$15$1=(($10+4)|0);
 HEAP32[(($st$15$1)>>2)]=$32$1;
 var $_lo_lobit_i_i47$0=($32$1>>31)|(((((($32$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i47$1=(((((($32$1|0)<0))|0)?-1:0)>>31)|(((((($32$1|0)<0))|0)?-1:0)<<1);
 var $st$16$0=(($11)|0);
 HEAP32[(($st$16$0)>>2)]=$_lo_lobit_i_i47$0;
 var $st$17$1=(($11+4)|0);
 HEAP32[(($st$17$1)>>2)]=$_lo_lobit_i_i47$1;
 var $33$0=_i64Subtract($20$0,$20$1,$19$0,$19$1);var $33$1=tempRet0;
 var $st$18$0=(($12)|0);
 HEAP32[(($st$18$0)>>2)]=$33$0;
 var $st$19$1=(($12+4)|0);
 HEAP32[(($st$19$1)>>2)]=$33$1;
 var $_lo_lobit_i_i49$0=($33$1>>31)|(((((($33$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i49$1=(((((($33$1|0)<0))|0)?-1:0)>>31)|(((((($33$1|0)<0))|0)?-1:0)<<1);
 var $st$20$0=(($13)|0);
 HEAP32[(($st$20$0)>>2)]=$_lo_lobit_i_i49$0;
 var $st$21$1=(($13+4)|0);
 HEAP32[(($st$21$1)>>2)]=$_lo_lobit_i_i49$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$2,$3);
 var $34=HEAP32[(($29)>>2)];
 var $35=(($34+16)|0);
 var $ld$22$0=(($35)|0);
 var $36$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($35+4)|0);
 var $36$1=HEAP32[(($ld$23$1)>>2)];
 var $ld$24$0=(($18)|0);
 var $37$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($18+4)|0);
 var $37$1=HEAP32[(($ld$25$1)>>2)];
 var $38$0=_i64Subtract($36$0,$36$1,$37$0,$37$1);var $38$1=tempRet0;
 var $st$26$0=(($14)|0);
 HEAP32[(($st$26$0)>>2)]=$38$0;
 var $st$27$1=(($14+4)|0);
 HEAP32[(($st$27$1)>>2)]=$38$1;
 var $_lo_lobit_i_i48$0=($38$1>>31)|(((((($38$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i48$1=(((((($38$1|0)<0))|0)?-1:0)>>31)|(((((($38$1|0)<0))|0)?-1:0)<<1);
 var $st$28$0=(($15)|0);
 HEAP32[(($st$28$0)>>2)]=$_lo_lobit_i_i48$0;
 var $st$29$1=(($15+4)|0);
 HEAP32[(($st$29$1)>>2)]=$_lo_lobit_i_i48$1;
 __ZNK10ClipperLib6Int128dvERKS0_($1,$4,$5);
 var $ld$30$0=(($16)|0);
 var $39$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($16+4)|0);
 var $39$1=HEAP32[(($ld$31$1)>>2)];
 var $40=(($_lo_lobit_i_i$0|0) == ($39$0|0)) & (($_lo_lobit_i_i$1|0) == ($39$1|0));
 if($40){label=8;break;}else{label=7;break;}
 case 7: 
 var $42=(($_lo_lobit_i_i$1|0) < ($39$1|0)) | (((($_lo_lobit_i_i$1|0) == ($39$1|0) & ($_lo_lobit_i_i$0>>>0) <  ($39$0>>>0))));
 if($42){label=9;break;}else{var $result_1=$result_0;label=10;break;}
 case 8: 
 var $ld$32$0=(($17)|0);
 var $43$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($17+4)|0);
 var $43$1=HEAP32[(($ld$33$1)>>2)];
 var $44=(($28$1>>>0) < ($43$1>>>0)) | (((($28$1>>>0) == ($43$1>>>0) & ($28$0>>>0) <  ($43$0>>>0))));
 if($44){label=9;break;}else{var $result_1=$result_0;label=10;break;}
 case 9: 
 var $46=$result_0&1;
 var $47=$46^1;
 var $result_1=$47;label=10;break;
 case 10: 
 var $result_1;
 var $49=(($pp2_0+24)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($pp|0);
 if($51){label=15;break;}else{var $result_0=$result_1;var $pp2_0=$50;label=4;break;}
 case 11: 
 var $pp2_1;
 var $result_2_off0;
 var $53=(($pp2_1+16)|0);
 var $ld$34$0=(($53)|0);
 var $54$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($53+4)|0);
 var $54$1=HEAP32[(($ld$35$1)>>2)];
 var $55=(($54$1|0) > ($7$1|0)) | (((($54$1|0) == ($7$1|0) & ($54$0>>>0) >  ($7$0>>>0))));
 var $_phi_trans_insert58=(($pp2_1+28)|0);
 var $_pre59=HEAP32[(($_phi_trans_insert58)>>2)];
 var $_phi_trans_insert60=(($_pre59+16)|0);
 var $ld$36$0=(($_phi_trans_insert60)|0);
 var $_pre61$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($_phi_trans_insert60+4)|0);
 var $_pre61$1=HEAP32[(($ld$37$1)>>2)];
 var $_not63=$55^1;
 var $56=(($7$1|0) < ($_pre61$1|0)) | (((($7$1|0) == ($_pre61$1|0) & ($7$0>>>0) <  ($_pre61$0>>>0))));
 var $or_cond64=$56&$_not63;
 if($or_cond64){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($_pre61$1|0) > ($7$1|0)) | (((($_pre61$1|0) == ($7$1|0) & ($_pre61$0>>>0) >  ($7$0>>>0))));
 var $_not65=$55^1;
 var $brmerge66=$57|$_not65;
 if($brmerge66){var $result_3_off0=$result_2_off0;label=14;break;}else{label=13;break;}
 case 13: 
 var $ld$38$0=(($8)|0);
 var $58$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($8+4)|0);
 var $58$1=HEAP32[(($ld$39$1)>>2)];
 var $59=(($_pre59+8)|0);
 var $ld$40$0=(($59)|0);
 var $60$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($59+4)|0);
 var $60$1=HEAP32[(($ld$41$1)>>2)];
 var $61=(($pp2_1+8)|0);
 var $ld$42$0=(($61)|0);
 var $62$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$43$1)>>2)];
 var $63$0=_i64Subtract($60$0,$60$1,$62$0,$62$1);var $63$1=tempRet0;
 var $64$0=_i64Subtract($7$0,$7$1,$54$0,$54$1);var $64$1=tempRet0;
 var $65$0=___muldi3($64$0,$64$1,$63$0,$63$1);var $65$1=tempRet0;
 var $66$0=_i64Subtract($_pre61$0,$_pre61$1,$54$0,$54$1);var $66$1=tempRet0;
 var $67$0=___divdi3($65$0,$65$1,$66$0,$66$1);var $67$1=tempRet0;
 var $68$0=_i64Add($67$0,$67$1,$62$0,$62$1);var $68$1=tempRet0;
 var $69=(($58$1|0) < ($68$1|0)) | (((($58$1|0) == ($68$1|0) & ($58$0>>>0) <  ($68$0>>>0))));
 var $_result_2_off0=$result_2_off0^$69;
 var $result_3_off0=$_result_2_off0;label=14;break;
 case 14: 
 var $result_3_off0;
 var $71=(($pp2_1+24)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)==($pp|0);
 if($73){var $result_4_off0=$result_3_off0;label=16;break;}else{var $result_2_off0=$result_3_off0;var $pp2_1=$72;label=11;break;}
 case 15: 
 var $74=$result_1&1;
 var $extract_t41=(($74<<24)>>24)!=0;
 var $result_4_off0=$extract_t41;label=16;break;
 case 16: 
 var $result_4_off0;
 STACKTOP=sp;return $result_4_off0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10ClipperLib6Int128dvERKS0_($agg_result,$this,$rhs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($rhs+8)|0);
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $3=(($2$0|0) == ($$etemp$2$0|0)) & (($2$1|0) == ($$etemp$2$1|0));
 var $4=(($rhs)|0);
 var $ld$3$0=(($4)|0);
 var $5$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$4$1)>>2)];
 var $6$0=$2$0|$5$0;
 var $6$1=$2$1|$5$1;
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $7=(($6$0|0) == ($$etemp$5$0|0)) & (($6$1|0) == ($$etemp$5$1|0));
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=___cxa_allocate_exception(4);
 var $10=$9;
 HEAP32[(($10)>>2)]=5680;
 ___cxa_throw($9,12808,0);
 throw "Reached an unreachable!";
 case 3: 
 var $_lobit$0=($5$1>>>31)|(0<<1);
 var $_lobit$1=(0>>>31)|(0<<1);
 var $11$0=$_lobit$0;
 var $11=$11$0;
 var $12=(($this)|0);
 var $ld$6$0=(($12)|0);
 var $13$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($12+4)|0);
 var $13$1=HEAP32[(($ld$7$1)>>2)];
 var $_lobit6$0=($13$1>>>31)|(0<<1);
 var $_lobit6$1=(0>>>31)|(0<<1);
 var $14$0=$_lobit6$0;
 var $14=$14$0;
 var $15=($11|0)==($14|0);
 var $16=(($this+8)|0);
 var $ld$8$0=(($16)|0);
 var $17$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$9$1)>>2)];
 var $$etemp$10$0=0;
 var $$etemp$10$1=0;
 var $18=(($13$1|0) < ($$etemp$10$1|0)) | (((($13$1|0) == ($$etemp$10$1|0) & ($13$0>>>0) <  ($$etemp$10$0>>>0))));
 if($18){label=4;break;}else{var $result_sroa_0_0_load3456$1=$13$1;var $result_sroa_0_0_load3456$0=$13$0;var $result_sroa_1_8_load4062$1=$17$1;var $result_sroa_1_8_load4062$0=$17$0;label=7;break;}
 case 4: 
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $20=(($17$0|0) == ($$etemp$11$0|0)) & (($17$1|0) == ($$etemp$11$1|0));
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $22$0=_i64Subtract($$etemp$12$0,$$etemp$12$1,$13$0,$13$1);var $22$1=tempRet0;
 var $result_sroa_0_0_load3456$1=$22$1;var $result_sroa_0_0_load3456$0=$22$0;var $result_sroa_1_8_load4062$1=0;var $result_sroa_1_8_load4062$0=0;label=7;break;
 case 6: 
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $24$0=_i64Subtract($$etemp$13$0,$$etemp$13$1,$17$0,$17$1);var $24$1=tempRet0;
 var $$etemp$14$0=-1;
 var $$etemp$14$1=-1;
 var $25$0=$13$0^$$etemp$14$0;
 var $25$1=$13$1^$$etemp$14$1;
 var $result_sroa_0_0_load3456$1=$25$1;var $result_sroa_0_0_load3456$0=$25$0;var $result_sroa_1_8_load4062$1=$24$1;var $result_sroa_1_8_load4062$0=$24$0;label=7;break;
 case 7: 
 var $result_sroa_1_8_load4062$0;
 var $result_sroa_1_8_load4062$1;
 var $result_sroa_0_0_load3456$0;
 var $result_sroa_0_0_load3456$1;
 var $$etemp$15$0=0;
 var $$etemp$15$1=0;
 var $26=(($5$1|0) < ($$etemp$15$1|0)) | (((($5$1|0) == ($$etemp$15$1|0) & ($5$0>>>0) <  ($$etemp$15$0>>>0))));
 if($26){label=8;break;}else{var $denom_sroa_0_0_load2249$1=$5$1;var $denom_sroa_0_0_load2249$0=$5$0;var $denom_sroa_1_8_load2652$1=$2$1;var $denom_sroa_1_8_load2652$0=$2$0;label=11;break;}
 case 8: 
 if($3){label=9;break;}else{label=10;break;}
 case 9: 
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $29$0=_i64Subtract($$etemp$16$0,$$etemp$16$1,$5$0,$5$1);var $29$1=tempRet0;
 var $denom_sroa_0_0_load2249$1=$29$1;var $denom_sroa_0_0_load2249$0=$29$0;var $denom_sroa_1_8_load2652$1=0;var $denom_sroa_1_8_load2652$0=0;label=11;break;
 case 10: 
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $31$0=_i64Subtract($$etemp$17$0,$$etemp$17$1,$2$0,$2$1);var $31$1=tempRet0;
 var $$etemp$18$0=-1;
 var $$etemp$18$1=-1;
 var $32$0=$5$0^$$etemp$18$0;
 var $32$1=$5$1^$$etemp$18$1;
 var $denom_sroa_0_0_load2249$1=$32$1;var $denom_sroa_0_0_load2249$0=$32$0;var $denom_sroa_1_8_load2652$1=$31$1;var $denom_sroa_1_8_load2652$0=$31$0;label=11;break;
 case 11: 
 var $denom_sroa_1_8_load2652$0;
 var $denom_sroa_1_8_load2652$1;
 var $denom_sroa_0_0_load2249$0;
 var $denom_sroa_0_0_load2249$1;
 var $33=(($denom_sroa_0_0_load2249$0|0) == ($result_sroa_0_0_load3456$0|0)) & (($denom_sroa_0_0_load2249$1|0) == ($result_sroa_0_0_load3456$1|0));
 if($33){label=13;break;}else{label=12;break;}
 case 12: 
 var $35=(($denom_sroa_0_0_load2249$1|0) > ($result_sroa_0_0_load3456$1|0)) | (((($denom_sroa_0_0_load2249$1|0) == ($result_sroa_0_0_load3456$1|0) & ($denom_sroa_0_0_load2249$0>>>0) >  ($result_sroa_0_0_load3456$0>>>0))));
 if($35){label=14;break;}else{label=15;break;}
 case 13: 
 var $36=(($denom_sroa_1_8_load2652$1>>>0) > ($result_sroa_1_8_load4062$1>>>0)) | (((($denom_sroa_1_8_load2652$1>>>0) == ($result_sroa_1_8_load4062$1>>>0) & ($denom_sroa_1_8_load2652$0>>>0) >  ($result_sroa_1_8_load4062$0>>>0))));
 if($36){label=14;break;}else{label=15;break;}
 case 14: 
 var $38=$agg_result;
 HEAP32[(($38)>>2)]=0; HEAP32[((($38)+(4))>>2)]=0; HEAP32[((($38)+(8))>>2)]=0; HEAP32[((($38)+(12))>>2)]=0;
 label=25;break;
 case 15: 
 var $$etemp$19$0=0;
 var $$etemp$19$1=0;
 var $40=(($denom_sroa_1_8_load2652$0|0) == ($$etemp$19$0|0)) & (($denom_sroa_1_8_load2652$1|0) == ($$etemp$19$1|0));
 if($40){label=16;break;}else{label=17;break;}
 case 16: 
 var $$etemp$20$0=0;
 var $$etemp$20$1=0;
 var $42$0=_i64Subtract($$etemp$20$0,$$etemp$20$1,$denom_sroa_0_0_load2249$0,$denom_sroa_0_0_load2249$1);var $42$1=tempRet0;
 var $denom_sroa_0_0_load2248$1=$42$1;var $denom_sroa_0_0_load2248$0=$42$0;var $denom_sroa_1_8_load2651$1=0;var $denom_sroa_1_8_load2651$0=0;label=18;break;
 case 17: 
 var $$etemp$21$0=0;
 var $$etemp$21$1=0;
 var $44$0=_i64Subtract($$etemp$21$0,$$etemp$21$1,$denom_sroa_1_8_load2652$0,$denom_sroa_1_8_load2652$1);var $44$1=tempRet0;
 var $$etemp$22$0=-1;
 var $$etemp$22$1=-1;
 var $45$0=$denom_sroa_0_0_load2249$0^$$etemp$22$0;
 var $45$1=$denom_sroa_0_0_load2249$1^$$etemp$22$1;
 var $denom_sroa_0_0_load2248$1=$45$1;var $denom_sroa_0_0_load2248$0=$45$0;var $denom_sroa_1_8_load2651$1=$44$1;var $denom_sroa_1_8_load2651$0=$44$0;label=18;break;
 case 18: 
 var $denom_sroa_1_8_load2651$0;
 var $denom_sroa_1_8_load2651$1;
 var $denom_sroa_0_0_load2248$0;
 var $denom_sroa_0_0_load2248$1;
 var $result_sroa_1_8_load406069$1=$result_sroa_1_8_load4062$1;var $result_sroa_1_8_load406069$0=$result_sroa_1_8_load4062$0;var $result_sroa_0_0_load345470$1=$result_sroa_0_0_load3456$1;var $result_sroa_0_0_load345470$0=$result_sroa_0_0_load3456$0;var $p_sroa_1_8_load164571$1=0;var $p_sroa_1_8_load164571$0=0;var $p_sroa_0_0_load134172$1=0;var $p_sroa_0_0_load134172$0=0;var $i_073=0;label=19;break;
 case 19: 
 var $i_073;
 var $p_sroa_0_0_load134172$0;
 var $p_sroa_0_0_load134172$1;
 var $p_sroa_1_8_load164571$0;
 var $p_sroa_1_8_load164571$1;
 var $result_sroa_0_0_load345470$0;
 var $result_sroa_0_0_load345470$1;
 var $result_sroa_1_8_load406069$0;
 var $result_sroa_1_8_load406069$1;
 var $46$0=($p_sroa_0_0_load134172$0<<1)|(0>>>31);
 var $46$1=($p_sroa_0_0_load134172$1<<1)|($p_sroa_0_0_load134172$0>>>31);
 var $p_sroa_1_8_load1645_lobit$0=($p_sroa_1_8_load164571$1>>>31)|(0<<1);
 var $p_sroa_1_8_load1645_lobit$1=(0>>>31)|(0<<1);
 var $p_sroa_0_0_load1344$0=$46$0|$p_sroa_1_8_load1645_lobit$0;
 var $p_sroa_0_0_load1344$1=$46$1|$p_sroa_1_8_load1645_lobit$1;
 var $47$0=($p_sroa_1_8_load164571$0<<1)|(0>>>31);
 var $47$1=($p_sroa_1_8_load164571$1<<1)|($p_sroa_1_8_load164571$0>>>31);
 var $result_sroa_0_0_load3454_lobit$0=($result_sroa_0_0_load345470$1>>>31)|(0<<1);
 var $result_sroa_0_0_load3454_lobit$1=(0>>>31)|(0<<1);
 var $p_sroa_1_8_load1647$0=$47$0|$result_sroa_0_0_load3454_lobit$0;
 var $p_sroa_1_8_load1647$1=$47$1|$result_sroa_0_0_load3454_lobit$1;
 var $48$0=($result_sroa_0_0_load345470$0<<1)|(0>>>31);
 var $48$1=($result_sroa_0_0_load345470$1<<1)|($result_sroa_0_0_load345470$0>>>31);
 var $result_sroa_1_8_load4060_lobit$0=($result_sroa_1_8_load406069$1>>>31)|(0<<1);
 var $result_sroa_1_8_load4060_lobit$1=(0>>>31)|(0<<1);
 var $result_sroa_0_0_load3455$0=$48$0|$result_sroa_1_8_load4060_lobit$0;
 var $result_sroa_0_0_load3455$1=$48$1|$result_sroa_1_8_load4060_lobit$1;
 var $49$0=($result_sroa_1_8_load406069$0<<1)|(0>>>31);
 var $49$1=($result_sroa_1_8_load406069$1<<1)|($result_sroa_1_8_load406069$0>>>31);
 var $50$0=_i64Add($p_sroa_0_0_load1344$0,$p_sroa_0_0_load1344$1,$denom_sroa_0_0_load2248$0,$denom_sroa_0_0_load2248$1);var $50$1=tempRet0;
 var $uadd$0=_llvm_uadd_with_overflow_i64($p_sroa_1_8_load1647$0,$p_sroa_1_8_load1647$1,$denom_sroa_1_8_load2651$0,$denom_sroa_1_8_load2651$1);
 var $uadd$1=tempRet0;
 var $uadd$2=tempRet1;
 var $51$0=$uadd$0;
 var $51$1=$uadd$1;
 var $52=$uadd$2;
 var $53$0=($52&1);
 var $53$1=0;
 var $p_sroa_0_0_load1343$0=_i64Add($50$0,$50$1,$53$0,$53$1);var $p_sroa_0_0_load1343$1=tempRet0;
 var $$etemp$23$0=0;
 var $$etemp$23$1=0;
 var $54=(($p_sroa_0_0_load1343$1|0) < ($$etemp$23$1|0)) | (((($p_sroa_0_0_load1343$1|0) == ($$etemp$23$1|0) & ($p_sroa_0_0_load1343$0>>>0) <  ($$etemp$23$0>>>0))));
 var $p_sroa_0_0_load1343_lobit$0=($p_sroa_0_0_load1343$1>>>31)|(0<<1);
 var $p_sroa_0_0_load1343_lobit$1=(0>>>31)|(0<<1);
 var $55$0=$p_sroa_0_0_load1343_lobit$0|$49$0;
 var $55$1=$p_sroa_0_0_load1343_lobit$1|$49$1;
 var $$etemp$24$0=1;
 var $$etemp$24$1=0;
 var $_67$0=$55$0^$$etemp$24$0;
 var $_67$1=$55$1^$$etemp$24$1;
 var $p_sroa_1_8_load1647_$0=$54?$p_sroa_1_8_load1647$0:$51$0;
 var $p_sroa_1_8_load1647_$1=$54?$p_sroa_1_8_load1647$1:$51$1;
 var $p_sroa_0_0_load1344_p_sroa_0_0_load1343$0=$54?$p_sroa_0_0_load1344$0:$p_sroa_0_0_load1343$0;
 var $p_sroa_0_0_load1344_p_sroa_0_0_load1343$1=$54?$p_sroa_0_0_load1344$1:$p_sroa_0_0_load1343$1;
 var $56=((($i_073)+(1))|0);
 var $57=($56|0)<128;
 if($57){var $result_sroa_1_8_load406069$1=$_67$1;var $result_sroa_1_8_load406069$0=$_67$0;var $result_sroa_0_0_load345470$1=$result_sroa_0_0_load3455$1;var $result_sroa_0_0_load345470$0=$result_sroa_0_0_load3455$0;var $p_sroa_1_8_load164571$1=$p_sroa_1_8_load1647_$1;var $p_sroa_1_8_load164571$0=$p_sroa_1_8_load1647_$0;var $p_sroa_0_0_load134172$1=$p_sroa_0_0_load1344_p_sroa_0_0_load1343$1;var $p_sroa_0_0_load134172$0=$p_sroa_0_0_load1344_p_sroa_0_0_load1343$0;var $i_073=$56;label=19;break;}else{label=20;break;}
 case 20: 
 if($15){var $result_sroa_0_0_load3458$1=$result_sroa_0_0_load3455$1;var $result_sroa_0_0_load3458$0=$result_sroa_0_0_load3455$0;var $result_sroa_1_8_load4064$1=$_67$1;var $result_sroa_1_8_load4064$0=$_67$0;label=24;break;}else{label=21;break;}
 case 21: 
 var $$etemp$25$0=1;
 var $$etemp$25$1=0;
 var $60=(($55$0|0) == ($$etemp$25$0|0)) & (($55$1|0) == ($$etemp$25$1|0));
 if($60){label=22;break;}else{label=23;break;}
 case 22: 
 var $$etemp$26$0=0;
 var $$etemp$26$1=0;
 var $62$0=_i64Subtract($$etemp$26$0,$$etemp$26$1,$result_sroa_0_0_load3455$0,$result_sroa_0_0_load3455$1);var $62$1=tempRet0;
 var $result_sroa_0_0_load3458$1=$62$1;var $result_sroa_0_0_load3458$0=$62$0;var $result_sroa_1_8_load4064$1=0;var $result_sroa_1_8_load4064$0=0;label=24;break;
 case 23: 
 var $$etemp$27$0=0;
 var $$etemp$27$1=0;
 var $64$0=_i64Subtract($$etemp$27$0,$$etemp$27$1,$_67$0,$_67$1);var $64$1=tempRet0;
 var $$etemp$28$0=-1;
 var $$etemp$28$1=-1;
 var $65$0=$result_sroa_0_0_load3455$0^$$etemp$28$0;
 var $65$1=$result_sroa_0_0_load3455$1^$$etemp$28$1;
 var $result_sroa_0_0_load3458$1=$65$1;var $result_sroa_0_0_load3458$0=$65$0;var $result_sroa_1_8_load4064$1=$64$1;var $result_sroa_1_8_load4064$0=$64$0;label=24;break;
 case 24: 
 var $result_sroa_1_8_load4064$0;
 var $result_sroa_1_8_load4064$1;
 var $result_sroa_0_0_load3458$0;
 var $result_sroa_0_0_load3458$1;
 var $66=(($agg_result)|0);
 var $st$29$0=(($66)|0);
 HEAP32[(($st$29$0)>>2)]=$result_sroa_0_0_load3458$0;
 var $st$30$1=(($66+4)|0);
 HEAP32[(($st$30$1)>>2)]=$result_sroa_0_0_load3458$1;
 var $67=(($agg_result+8)|0);
 var $st$31$0=(($67)|0);
 HEAP32[(($st$31$0)>>2)]=$result_sroa_1_8_load4064$0;
 var $st$32$1=(($67+4)|0);
 HEAP32[(($st$32$1)>>2)]=$result_sroa_1_8_load4064$1;
 label=25;break;
 case 25: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib14IntersectPointERNS_5TEdgeES1_RNS_8IntPointEb($edge1,$edge2,$ip,$UseFullInt64Range){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$6;
 var $13=(($edge1+64)|0);
 var $ld$0$0=(($13)|0);
 var $14$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($13+4)|0);
 var $14$1=HEAP32[(($ld$1$1)>>2)];
 if($UseFullInt64Range){label=2;break;}else{label=4;break;}
 case 2: 
 var $16=(($1+8)|0);
 var $st$2$0=(($16)|0);
 HEAP32[(($st$2$0)>>2)]=$14$0;
 var $st$3$1=(($16+4)|0);
 HEAP32[(($st$3$1)>>2)]=$14$1;
 var $17=(($1)|0);
 var $_lo_lobit_i_i_i$0=($14$1>>31)|(((((($14$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($14$1|0)<0))|0)?-1:0)>>31)|(((((($14$1|0)<0))|0)?-1:0)<<1);
 var $st$4$0=(($17)|0);
 HEAP32[(($st$4$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$5$1=(($17+4)|0);
 HEAP32[(($st$5$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $18=(($edge2+56)|0);
 var $ld$6$0=(($18)|0);
 var $19$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($18+4)|0);
 var $19$1=HEAP32[(($ld$7$1)>>2)];
 var $20=(($2+8)|0);
 var $st$8$0=(($20)|0);
 HEAP32[(($st$8$0)>>2)]=$19$0;
 var $st$9$1=(($20+4)|0);
 HEAP32[(($st$9$1)>>2)]=$19$1;
 var $21=(($2)|0);
 var $_lo_lobit_i_i9_i$0=($19$1>>31)|(((((($19$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i9_i$1=(((((($19$1|0)<0))|0)?-1:0)>>31)|(((((($19$1|0)<0))|0)?-1:0)<<1);
 var $st$10$0=(($21)|0);
 HEAP32[(($st$10$0)>>2)]=$_lo_lobit_i_i9_i$0;
 var $st$11$1=(($21+4)|0);
 HEAP32[(($st$11$1)>>2)]=$_lo_lobit_i_i9_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $22=(($edge1+56)|0);
 var $ld$12$0=(($22)|0);
 var $23$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($22+4)|0);
 var $23$1=HEAP32[(($ld$13$1)>>2)];
 var $24=(($5+8)|0);
 var $st$14$0=(($24)|0);
 HEAP32[(($st$14$0)>>2)]=$23$0;
 var $st$15$1=(($24+4)|0);
 HEAP32[(($st$15$1)>>2)]=$23$1;
 var $25=(($5)|0);
 var $_lo_lobit_i_i11_i$0=($23$1>>31)|(((((($23$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i11_i$1=(((((($23$1|0)<0))|0)?-1:0)>>31)|(((((($23$1|0)<0))|0)?-1:0)<<1);
 var $st$16$0=(($25)|0);
 HEAP32[(($st$16$0)>>2)]=$_lo_lobit_i_i11_i$0;
 var $st$17$1=(($25+4)|0);
 HEAP32[(($st$17$1)>>2)]=$_lo_lobit_i_i11_i$1;
 var $26=(($edge2+64)|0);
 var $ld$18$0=(($26)|0);
 var $27$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($26+4)|0);
 var $27$1=HEAP32[(($ld$19$1)>>2)];
 var $28=(($6+8)|0);
 var $st$20$0=(($28)|0);
 HEAP32[(($st$20$0)>>2)]=$27$0;
 var $st$21$1=(($28+4)|0);
 HEAP32[(($st$21$1)>>2)]=$27$1;
 var $29=(($6)|0);
 var $_lo_lobit_i_i10_i$0=($27$1>>31)|(((((($27$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i10_i$1=(((((($27$1|0)<0))|0)?-1:0)>>31)|(((((($27$1|0)<0))|0)?-1:0)<<1);
 var $st$22$0=(($29)|0);
 HEAP32[(($st$22$0)>>2)]=$_lo_lobit_i_i10_i$0;
 var $st$23$1=(($29+4)|0);
 HEAP32[(($st$23$1)>>2)]=$_lo_lobit_i_i10_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $30=(($3)|0);
 var $ld$24$0=(($30)|0);
 var $31$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$25$1)>>2)];
 var $32=(($4)|0);
 var $ld$26$0=(($32)|0);
 var $33$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($32+4)|0);
 var $33$1=HEAP32[(($ld$27$1)>>2)];
 var $34=(($31$0|0) == ($33$0|0)) & (($31$1|0) == ($33$1|0));
 if($34){label=3;break;}else{label=6;break;}
 case 3: 
 var $36=(($3+8)|0);
 var $ld$28$0=(($36)|0);
 var $37$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($36+4)|0);
 var $37$1=HEAP32[(($ld$29$1)>>2)];
 var $38=(($4+8)|0);
 var $ld$30$0=(($38)|0);
 var $39$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$31$1)>>2)];
 var $40=(($37$0|0) == ($39$0|0)) & (($37$1|0) == ($39$1|0));
 var $_0_i=$40;label=5;break;
 case 4: 
 var $42=(($edge2+56)|0);
 var $ld$32$0=(($42)|0);
 var $43$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($42+4)|0);
 var $43$1=HEAP32[(($ld$33$1)>>2)];
 var $44$0=___muldi3($43$0,$43$1,$14$0,$14$1);var $44$1=tempRet0;
 var $45=(($edge1+56)|0);
 var $ld$34$0=(($45)|0);
 var $46$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($45+4)|0);
 var $46$1=HEAP32[(($ld$35$1)>>2)];
 var $47=(($edge2+64)|0);
 var $ld$36$0=(($47)|0);
 var $48$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($47+4)|0);
 var $48$1=HEAP32[(($ld$37$1)>>2)];
 var $49$0=___muldi3($48$0,$48$1,$46$0,$46$1);var $49$1=tempRet0;
 var $50=(($44$0|0) == ($49$0|0)) & (($44$1|0) == ($49$1|0));
 var $_0_i=$50;label=5;break;
 case 5: 
 var $_0_i;
 if($_0_i){var $_0=0;label=48;break;}else{label=6;break;}
 case 6: 
 var $51=(($edge1+48)|0);
 var $52=HEAPF64[(($51)>>3)];
 var $53=$52>(-1e-20);
 var $54=$52<(1e-20);
 var $or_cond=$53&$54;
 if($or_cond){label=7;break;}else{label=13;break;}
 case 7: 
 var $56=(($edge1)|0);
 var $ld$38$0=(($56)|0);
 var $57$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($56+4)|0);
 var $57$1=HEAP32[(($ld$39$1)>>2)];
 var $58=(($ip)|0);
 var $st$40$0=(($58)|0);
 HEAP32[(($st$40$0)>>2)]=$57$0;
 var $st$41$1=(($58+4)|0);
 HEAP32[(($st$41$1)>>2)]=$57$1;
 var $59=(($edge2+48)|0);
 var $60=HEAPF64[(($59)>>3)];
 var $61=($60)+((1e+40));
 var $62=$61>(-1e-20);
 var $63=$61<(1e-20);
 var $or_cond73=$62&$63;
 var $64=(($edge2+8)|0);
 var $ld$42$0=(($64)|0);
 var $65$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($64+4)|0);
 var $65$1=HEAP32[(($ld$43$1)>>2)];
 if($or_cond73){label=8;break;}else{label=9;break;}
 case 8: 
 var $67=(($ip+8)|0);
 var $st$44$0=(($67)|0);
 HEAP32[(($st$44$0)>>2)]=$65$0;
 var $st$45$1=(($67+4)|0);
 HEAP32[(($st$45$1)>>2)]=$65$1;
 var $172$1=$65$1;var $172$0=$65$0;label=32;break;
 case 9: 
 var $69=(($65$0>>>0)+(($65$1|0)*4294967296));
 var $70=(($edge2)|0);
 var $ld$46$0=(($70)|0);
 var $71$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($70+4)|0);
 var $71$1=HEAP32[(($ld$47$1)>>2)];
 var $72=(($71$0>>>0)+(($71$1|0)*4294967296));
 var $73=($72)/($60);
 var $74=($69)-($73);
 var $75=(($57$0>>>0)+(($57$1|0)*4294967296));
 var $76=($75)/($60);
 var $77=($76)+($74);
 var $78=$77<0;
 if($78){label=10;break;}else{label=11;break;}
 case 10: 
 var $80=($77)+((-0.5));
 var $_sink_i=$80;label=12;break;
 case 11: 
 var $82=($77)+((0.5));
 var $_sink_i=$82;label=12;break;
 case 12: 
 var $_sink_i;
 var $83$0=$_sink_i>>>0;var $83$1=(Math_abs($_sink_i) >= 1 ? ($_sink_i > 0 ? Math_min(Math_floor(($_sink_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i - +(((~~($_sink_i)))>>>0))/4294967296)))>>>0) : 0);
 var $84=(($ip+8)|0);
 var $st$48$0=(($84)|0);
 HEAP32[(($st$48$0)>>2)]=$83$0;
 var $st$49$1=(($84+4)|0);
 HEAP32[(($st$49$1)>>2)]=$83$1;
 var $172$1=$83$1;var $172$0=$83$0;label=32;break;
 case 13: 
 var $86=(($edge2+48)|0);
 var $87=HEAPF64[(($86)>>3)];
 var $88=$87>(-1e-20);
 var $89=$87<(1e-20);
 var $or_cond74=$88&$89;
 if($or_cond74){label=14;break;}else{label=20;break;}
 case 14: 
 var $91=(($edge2)|0);
 var $ld$50$0=(($91)|0);
 var $92$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($91+4)|0);
 var $92$1=HEAP32[(($ld$51$1)>>2)];
 var $93=(($ip)|0);
 var $st$52$0=(($93)|0);
 HEAP32[(($st$52$0)>>2)]=$92$0;
 var $st$53$1=(($93+4)|0);
 HEAP32[(($st$53$1)>>2)]=$92$1;
 var $94=HEAPF64[(($51)>>3)];
 var $95=($94)+((1e+40));
 var $96=$95>(-1e-20);
 var $97=$95<(1e-20);
 var $or_cond75=$96&$97;
 var $98=(($edge1+8)|0);
 var $ld$54$0=(($98)|0);
 var $99$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($98+4)|0);
 var $99$1=HEAP32[(($ld$55$1)>>2)];
 if($or_cond75){label=15;break;}else{label=16;break;}
 case 15: 
 var $101=(($ip+8)|0);
 var $st$56$0=(($101)|0);
 HEAP32[(($st$56$0)>>2)]=$99$0;
 var $st$57$1=(($101+4)|0);
 HEAP32[(($st$57$1)>>2)]=$99$1;
 var $172$1=$99$1;var $172$0=$99$0;label=32;break;
 case 16: 
 var $103=(($99$0>>>0)+(($99$1|0)*4294967296));
 var $104=(($edge1)|0);
 var $ld$58$0=(($104)|0);
 var $105$0=HEAP32[(($ld$58$0)>>2)];
 var $ld$59$1=(($104+4)|0);
 var $105$1=HEAP32[(($ld$59$1)>>2)];
 var $106=(($105$0>>>0)+(($105$1|0)*4294967296));
 var $107=($106)/($94);
 var $108=($103)-($107);
 var $109=(($92$0>>>0)+(($92$1|0)*4294967296));
 var $110=($109)/($94);
 var $111=($110)+($108);
 var $112=$111<0;
 if($112){label=17;break;}else{label=18;break;}
 case 17: 
 var $114=($111)+((-0.5));
 var $_sink_i76=$114;label=19;break;
 case 18: 
 var $116=($111)+((0.5));
 var $_sink_i76=$116;label=19;break;
 case 19: 
 var $_sink_i76;
 var $117$0=$_sink_i76>>>0;var $117$1=(Math_abs($_sink_i76) >= 1 ? ($_sink_i76 > 0 ? Math_min(Math_floor(($_sink_i76)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i76 - +(((~~($_sink_i76)))>>>0))/4294967296)))>>>0) : 0);
 var $118=(($ip+8)|0);
 var $st$60$0=(($118)|0);
 HEAP32[(($st$60$0)>>2)]=$117$0;
 var $st$61$1=(($118+4)|0);
 HEAP32[(($st$61$1)>>2)]=$117$1;
 var $172$1=$117$1;var $172$0=$117$0;label=32;break;
 case 20: 
 var $120=(($edge1)|0);
 var $ld$62$0=(($120)|0);
 var $121$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($120+4)|0);
 var $121$1=HEAP32[(($ld$63$1)>>2)];
 var $122=(($121$0>>>0)+(($121$1|0)*4294967296));
 var $123=(($edge1+8)|0);
 var $ld$64$0=(($123)|0);
 var $124$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($123+4)|0);
 var $124$1=HEAP32[(($ld$65$1)>>2)];
 var $125=(($124$0>>>0)+(($124$1|0)*4294967296));
 var $126=($52)*($125);
 var $127=($122)-($126);
 var $128=(($edge2)|0);
 var $ld$66$0=(($128)|0);
 var $129$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($128+4)|0);
 var $129$1=HEAP32[(($ld$67$1)>>2)];
 var $130=(($129$0>>>0)+(($129$1|0)*4294967296));
 var $131=(($edge2+8)|0);
 var $ld$68$0=(($131)|0);
 var $132$0=HEAP32[(($ld$68$0)>>2)];
 var $ld$69$1=(($131+4)|0);
 var $132$1=HEAP32[(($ld$69$1)>>2)];
 var $133=(($132$0>>>0)+(($132$1|0)*4294967296));
 var $134=($87)*($133);
 var $135=($130)-($134);
 var $136=($135)-($127);
 var $137=($52)-($87);
 var $138=($136)/($137);
 var $139=$138<0;
 if($139){label=21;break;}else{label=22;break;}
 case 21: 
 var $141=($138)+((-0.5));
 var $_sink_i85=$141;label=23;break;
 case 22: 
 var $143=($138)+((0.5));
 var $_sink_i85=$143;label=23;break;
 case 23: 
 var $_sink_i85;
 var $144$0=$_sink_i85>>>0;var $144$1=(Math_abs($_sink_i85) >= 1 ? ($_sink_i85 > 0 ? Math_min(Math_floor(($_sink_i85)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i85 - +(((~~($_sink_i85)))>>>0))/4294967296)))>>>0) : 0);
 var $145=(($ip+8)|0);
 var $st$70$0=(($145)|0);
 HEAP32[(($st$70$0)>>2)]=$144$0;
 var $st$71$1=(($145+4)|0);
 HEAP32[(($st$71$1)>>2)]=$144$1;
 var $146=HEAPF64[(($51)>>3)];
 var $147=Math_abs($146);
 var $148=HEAPF64[(($86)>>3)];
 var $149=Math_abs($148);
 var $150=$147<$149;
 if($150){label=24;break;}else{label=28;break;}
 case 24: 
 var $152=($138)*($146);
 var $153=($127)+($152);
 var $154=$153<0;
 if($154){label=25;break;}else{label=26;break;}
 case 25: 
 var $156=($153)+((-0.5));
 var $_sink_i83=$156;label=27;break;
 case 26: 
 var $158=($153)+((0.5));
 var $_sink_i83=$158;label=27;break;
 case 27: 
 var $_sink_i83;
 var $159$0=$_sink_i83>>>0;var $159$1=(Math_abs($_sink_i83) >= 1 ? ($_sink_i83 > 0 ? Math_min(Math_floor(($_sink_i83)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i83 - +(((~~($_sink_i83)))>>>0))/4294967296)))>>>0) : 0);
 var $160=(($ip)|0);
 var $st$72$0=(($160)|0);
 HEAP32[(($st$72$0)>>2)]=$159$0;
 var $st$73$1=(($160+4)|0);
 HEAP32[(($st$73$1)>>2)]=$159$1;
 var $172$1=$144$1;var $172$0=$144$0;label=32;break;
 case 28: 
 var $162=($138)*($148);
 var $163=($135)+($162);
 var $164=$163<0;
 if($164){label=29;break;}else{label=30;break;}
 case 29: 
 var $166=($163)+((-0.5));
 var $_sink_i81=$166;label=31;break;
 case 30: 
 var $168=($163)+((0.5));
 var $_sink_i81=$168;label=31;break;
 case 31: 
 var $_sink_i81;
 var $169$0=$_sink_i81>>>0;var $169$1=(Math_abs($_sink_i81) >= 1 ? ($_sink_i81 > 0 ? Math_min(Math_floor(($_sink_i81)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i81 - +(((~~($_sink_i81)))>>>0))/4294967296)))>>>0) : 0);
 var $170=(($ip)|0);
 var $st$74$0=(($170)|0);
 HEAP32[(($st$74$0)>>2)]=$169$0;
 var $st$75$1=(($170+4)|0);
 HEAP32[(($st$75$1)>>2)]=$169$1;
 var $172$1=$144$1;var $172$0=$144$0;label=32;break;
 case 32: 
 var $172$0;
 var $172$1;
 var $173=(($ip+8)|0);
 var $174=(($edge1+40)|0);
 var $ld$76$0=(($174)|0);
 var $175$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($174+4)|0);
 var $175$1=HEAP32[(($ld$77$1)>>2)];
 var $176=(($172$1|0) < ($175$1|0)) | (((($172$1|0) == ($175$1|0) & ($172$0>>>0) <  ($175$0>>>0))));
 var $_phi_trans_insert=(($edge2+40)|0);
 var $ld$78$0=(($_phi_trans_insert)|0);
 var $_pre$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($_phi_trans_insert+4)|0);
 var $_pre$1=HEAP32[(($ld$79$1)>>2)];
 var $177=(($172$1|0) < ($_pre$1|0)) | (((($172$1|0) == ($_pre$1|0) & ($172$0>>>0) <  ($_pre$0>>>0))));
 var $or_cond87=$176|$177;
 if($or_cond87){label=33;break;}else{var $_0=1;label=48;break;}
 case 33: 
 var $178=(($edge2+40)|0);
 var $179=(($175$1|0) > ($_pre$1|0)) | (((($175$1|0) == ($_pre$1|0) & ($175$0>>>0) >  ($_pre$0>>>0))));
 if($179){label=34;break;}else{label=41;break;}
 case 34: 
 var $181=(($edge1+32)|0);
 var $ld$80$0=(($181)|0);
 var $182$0=HEAP32[(($ld$80$0)>>2)];
 var $ld$81$1=(($181+4)|0);
 var $182$1=HEAP32[(($ld$81$1)>>2)];
 var $183=(($ip)|0);
 var $st$82$0=(($183)|0);
 HEAP32[(($st$82$0)>>2)]=$182$0;
 var $st$83$1=(($183+4)|0);
 HEAP32[(($st$83$1)>>2)]=$182$1;
 var $ld$84$0=(($174)|0);
 var $184$0=HEAP32[(($ld$84$0)>>2)];
 var $ld$85$1=(($174+4)|0);
 var $184$1=HEAP32[(($ld$85$1)>>2)];
 var $st$86$0=(($173)|0);
 HEAP32[(($st$86$0)>>2)]=$184$0;
 var $st$87$1=(($173+4)|0);
 HEAP32[(($st$87$1)>>2)]=$184$1;
 var $ld$88$0=(($174)|0);
 var $185$0=HEAP32[(($ld$88$0)>>2)];
 var $ld$89$1=(($174+4)|0);
 var $185$1=HEAP32[(($ld$89$1)>>2)];
 var $ld$90$0=(($178)|0);
 var $186$0=HEAP32[(($ld$90$0)>>2)];
 var $ld$91$1=(($178+4)|0);
 var $186$1=HEAP32[(($ld$91$1)>>2)];
 var $187=(($186$0|0) == ($185$0|0)) & (($186$1|0) == ($185$1|0));
 if($187){label=35;break;}else{label=36;break;}
 case 35: 
 var $189=(($edge2+32)|0);
 var $ld$92$0=(($189)|0);
 var $190$0=HEAP32[(($ld$92$0)>>2)];
 var $ld$93$1=(($189+4)|0);
 var $190$1=HEAP32[(($ld$93$1)>>2)];
 var $208$1=$190$1;var $208$0=$190$0;label=40;break;
 case 36: 
 var $192=(($edge2)|0);
 var $ld$94$0=(($192)|0);
 var $193$0=HEAP32[(($ld$94$0)>>2)];
 var $ld$95$1=(($192+4)|0);
 var $193$1=HEAP32[(($ld$95$1)>>2)];
 var $194=(($edge2+48)|0);
 var $195=HEAPF64[(($194)>>3)];
 var $196=(($edge2+8)|0);
 var $ld$96$0=(($196)|0);
 var $197$0=HEAP32[(($ld$96$0)>>2)];
 var $ld$97$1=(($196+4)|0);
 var $197$1=HEAP32[(($ld$97$1)>>2)];
 var $198$0=_i64Subtract($185$0,$185$1,$197$0,$197$1);var $198$1=tempRet0;
 var $199=(($198$0>>>0)+(($198$1|0)*4294967296));
 var $200=($195)*($199);
 var $201=$200<0;
 if($201){label=37;break;}else{label=38;break;}
 case 37: 
 var $203=($200)+((-0.5));
 var $_sink_i_i78=$203;label=39;break;
 case 38: 
 var $205=($200)+((0.5));
 var $_sink_i_i78=$205;label=39;break;
 case 39: 
 var $_sink_i_i78;
 var $206$0=$_sink_i_i78>>>0;var $206$1=(Math_abs($_sink_i_i78) >= 1 ? ($_sink_i_i78 > 0 ? Math_min(Math_floor(($_sink_i_i78)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i78 - +(((~~($_sink_i_i78)))>>>0))/4294967296)))>>>0) : 0);
 var $207$0=_i64Add($206$0,$206$1,$193$0,$193$1);var $207$1=tempRet0;
 var $208$1=$207$1;var $208$0=$207$0;label=40;break;
 case 40: 
 var $208$0;
 var $208$1;
 var $ld$98$0=(($181)|0);
 var $209$0=HEAP32[(($ld$98$0)>>2)];
 var $ld$99$1=(($181+4)|0);
 var $209$1=HEAP32[(($ld$99$1)>>2)];
 var $210=(($208$1|0) < ($209$1|0)) | (((($208$1|0) == ($209$1|0) & ($208$0>>>0) <  ($209$0>>>0))));
 var $_0=$210;label=48;break;
 case 41: 
 var $212=(($edge2+32)|0);
 var $ld$100$0=(($212)|0);
 var $213$0=HEAP32[(($ld$100$0)>>2)];
 var $ld$101$1=(($212+4)|0);
 var $213$1=HEAP32[(($ld$101$1)>>2)];
 var $214=(($ip)|0);
 var $st$102$0=(($214)|0);
 HEAP32[(($st$102$0)>>2)]=$213$0;
 var $st$103$1=(($214+4)|0);
 HEAP32[(($st$103$1)>>2)]=$213$1;
 var $ld$104$0=(($178)|0);
 var $215$0=HEAP32[(($ld$104$0)>>2)];
 var $ld$105$1=(($178+4)|0);
 var $215$1=HEAP32[(($ld$105$1)>>2)];
 var $st$106$0=(($173)|0);
 HEAP32[(($st$106$0)>>2)]=$215$0;
 var $st$107$1=(($173+4)|0);
 HEAP32[(($st$107$1)>>2)]=$215$1;
 var $ld$108$0=(($178)|0);
 var $216$0=HEAP32[(($ld$108$0)>>2)];
 var $ld$109$1=(($178+4)|0);
 var $216$1=HEAP32[(($ld$109$1)>>2)];
 var $ld$110$0=(($174)|0);
 var $217$0=HEAP32[(($ld$110$0)>>2)];
 var $ld$111$1=(($174+4)|0);
 var $217$1=HEAP32[(($ld$111$1)>>2)];
 var $218=(($217$0|0) == ($216$0|0)) & (($217$1|0) == ($216$1|0));
 if($218){label=42;break;}else{label=43;break;}
 case 42: 
 var $220=(($edge1+32)|0);
 var $ld$112$0=(($220)|0);
 var $221$0=HEAP32[(($ld$112$0)>>2)];
 var $ld$113$1=(($220+4)|0);
 var $221$1=HEAP32[(($ld$113$1)>>2)];
 var $238$1=$221$1;var $238$0=$221$0;label=47;break;
 case 43: 
 var $223=(($edge1)|0);
 var $ld$114$0=(($223)|0);
 var $224$0=HEAP32[(($ld$114$0)>>2)];
 var $ld$115$1=(($223+4)|0);
 var $224$1=HEAP32[(($ld$115$1)>>2)];
 var $225=HEAPF64[(($51)>>3)];
 var $226=(($edge1+8)|0);
 var $ld$116$0=(($226)|0);
 var $227$0=HEAP32[(($ld$116$0)>>2)];
 var $ld$117$1=(($226+4)|0);
 var $227$1=HEAP32[(($ld$117$1)>>2)];
 var $228$0=_i64Subtract($216$0,$216$1,$227$0,$227$1);var $228$1=tempRet0;
 var $229=(($228$0>>>0)+(($228$1|0)*4294967296));
 var $230=($225)*($229);
 var $231=$230<0;
 if($231){label=44;break;}else{label=45;break;}
 case 44: 
 var $233=($230)+((-0.5));
 var $_sink_i_i=$233;label=46;break;
 case 45: 
 var $235=($230)+((0.5));
 var $_sink_i_i=$235;label=46;break;
 case 46: 
 var $_sink_i_i;
 var $236$0=$_sink_i_i>>>0;var $236$1=(Math_abs($_sink_i_i) >= 1 ? ($_sink_i_i > 0 ? Math_min(Math_floor(($_sink_i_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i - +(((~~($_sink_i_i)))>>>0))/4294967296)))>>>0) : 0);
 var $237$0=_i64Add($236$0,$236$1,$224$0,$224$1);var $237$1=tempRet0;
 var $238$1=$237$1;var $238$0=$237$0;label=47;break;
 case 47: 
 var $238$0;
 var $238$1;
 var $ld$118$0=(($212)|0);
 var $239$0=HEAP32[(($ld$118$0)>>2)];
 var $ld$119$1=(($212+4)|0);
 var $239$1=HEAP32[(($ld$119$1)>>2)];
 var $240=(($238$1|0) > ($239$1|0)) | (((($238$1|0) == ($239$1|0) & ($238$0>>>0) >  ($239$0>>>0))));
 var $_0=$240;label=48;break;
 case 48: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib15FirstIsBottomPtEPKNS_5OutPtES2_($btmPt1,$btmPt2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($btmPt1+8)|0);
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $3=(($btmPt1+16)|0);
 var $btmPt1_pn=$btmPt1;label=2;break;
 case 2: 
 var $btmPt1_pn;
 var $p_0_in=(($btmPt1_pn+28)|0);
 var $p_0=HEAP32[(($p_0_in)>>2)];
 var $5=(($p_0+8)|0);
 var $ld$2$0=(($5)|0);
 var $6$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$3$1)>>2)];
 var $7=(($6$0|0) == ($2$0|0)) & (($6$1|0) == ($2$1|0));
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $ld$4$0=(($3)|0);
 var $_sroa_173_8_copyload_pre$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($3+4)|0);
 var $_sroa_173_8_copyload_pre$1=HEAP32[(($ld$5$1)>>2)];
 var $_sroa_170_8__idx71_phi_trans_insert=(($p_0+16)|0);
 var $ld$6$0=(($_sroa_170_8__idx71_phi_trans_insert)|0);
 var $_sroa_170_8_copyload_pre$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($_sroa_170_8__idx71_phi_trans_insert+4)|0);
 var $_sroa_170_8_copyload_pre$1=HEAP32[(($ld$7$1)>>2)];
 var $_sroa_173_8_copyload$1=$_sroa_173_8_copyload_pre$1;var $_sroa_173_8_copyload$0=$_sroa_173_8_copyload_pre$0;var $_sroa_170_8_copyload$1=$_sroa_170_8_copyload_pre$1;var $_sroa_170_8_copyload$0=$_sroa_170_8_copyload_pre$0;label=5;break;
 case 4: 
 var $8=(($p_0+16)|0);
 var $ld$8$0=(($8)|0);
 var $9$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$9$1)>>2)];
 var $ld$10$0=(($3)|0);
 var $10$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($3+4)|0);
 var $10$1=HEAP32[(($ld$11$1)>>2)];
 var $_not=(($9$0|0) != ($10$0|0)) | (($9$1|0) != ($10$1|0));
 var $11=($p_0|0)==($btmPt1|0);
 var $or_cond=$_not|$11;
 if($or_cond){var $_sroa_173_8_copyload$1=$10$1;var $_sroa_173_8_copyload$0=$10$0;var $_sroa_170_8_copyload$1=$9$1;var $_sroa_170_8_copyload$0=$9$0;label=5;break;}else{var $btmPt1_pn=$p_0;label=2;break;}
 case 5: 
 var $_sroa_170_8_copyload$0;
 var $_sroa_170_8_copyload$1;
 var $_sroa_173_8_copyload$0;
 var $_sroa_173_8_copyload$1;
 var $12=(($_sroa_173_8_copyload$0|0) == ($_sroa_170_8_copyload$0|0)) & (($_sroa_173_8_copyload$1|0) == ($_sroa_170_8_copyload$1|0));
 if($12){var $19=-1e+40;label=7;break;}else{label=6;break;}
 case 6: 
 var $14$0=_i64Subtract($6$0,$6$1,$2$0,$2$1);var $14$1=tempRet0;
 var $15=(($14$0>>>0)+(($14$1|0)*4294967296));
 var $16$0=_i64Subtract($_sroa_170_8_copyload$0,$_sroa_170_8_copyload$1,$_sroa_173_8_copyload$0,$_sroa_173_8_copyload$1);var $16$1=tempRet0;
 var $17=(($16$0>>>0)+(($16$1|0)*4294967296));
 var $18=($15)/($17);
 var $19=$18;label=7;break;
 case 7: 
 var $19;
 var $20=Math_abs($19);
 var $btmPt1_pn38=$btmPt1;label=8;break;
 case 8: 
 var $btmPt1_pn38;
 var $p_1_in=(($btmPt1_pn38+24)|0);
 var $p_1=HEAP32[(($p_1_in)>>2)];
 var $22=(($p_1+8)|0);
 var $ld$12$0=(($22)|0);
 var $23$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($22+4)|0);
 var $23$1=HEAP32[(($ld$13$1)>>2)];
 var $24=(($23$0|0) == ($2$0|0)) & (($23$1|0) == ($2$1|0));
 var $25=(($p_1+16)|0);
 var $ld$14$0=(($25)|0);
 var $26$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($25+4)|0);
 var $26$1=HEAP32[(($ld$15$1)>>2)];
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $_not40=(($26$0|0) != ($_sroa_173_8_copyload$0|0)) | (($26$1|0) != ($_sroa_173_8_copyload$1|0));
 var $27=($p_1|0)==($btmPt1|0);
 var $or_cond41=$_not40|$27;
 if($or_cond41){label=10;break;}else{var $btmPt1_pn38=$p_1;label=8;break;}
 case 10: 
 var $28=(($_sroa_173_8_copyload$0|0) == ($26$0|0)) & (($_sroa_173_8_copyload$1|0) == ($26$1|0));
 if($28){var $35=-1e+40;label=12;break;}else{label=11;break;}
 case 11: 
 var $30$0=_i64Subtract($23$0,$23$1,$2$0,$2$1);var $30$1=tempRet0;
 var $31=(($30$0>>>0)+(($30$1|0)*4294967296));
 var $32$0=_i64Subtract($26$0,$26$1,$_sroa_173_8_copyload$0,$_sroa_173_8_copyload$1);var $32$1=tempRet0;
 var $33=(($32$0>>>0)+(($32$1|0)*4294967296));
 var $34=($31)/($33);
 var $35=$34;label=12;break;
 case 12: 
 var $35;
 var $36=Math_abs($35);
 var $37=(($btmPt2+8)|0);
 var $ld$16$0=(($37)|0);
 var $38$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$17$1)>>2)];
 var $39=(($btmPt2+16)|0);
 var $btmPt2_pn=$btmPt2;label=13;break;
 case 13: 
 var $btmPt2_pn;
 var $p_2_in=(($btmPt2_pn+28)|0);
 var $p_2=HEAP32[(($p_2_in)>>2)];
 var $41=(($p_2+8)|0);
 var $ld$18$0=(($41)|0);
 var $42$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($41+4)|0);
 var $42$1=HEAP32[(($ld$19$1)>>2)];
 var $43=(($42$0|0) == ($38$0|0)) & (($42$1|0) == ($38$1|0));
 if($43){label=15;break;}else{label=14;break;}
 case 14: 
 var $ld$20$0=(($39)|0);
 var $_sroa_161_8_copyload_pre$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($39+4)|0);
 var $_sroa_161_8_copyload_pre$1=HEAP32[(($ld$21$1)>>2)];
 var $_sroa_158_8__idx59_phi_trans_insert=(($p_2+16)|0);
 var $ld$22$0=(($_sroa_158_8__idx59_phi_trans_insert)|0);
 var $_sroa_158_8_copyload_pre$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($_sroa_158_8__idx59_phi_trans_insert+4)|0);
 var $_sroa_158_8_copyload_pre$1=HEAP32[(($ld$23$1)>>2)];
 var $_sroa_161_8_copyload$1=$_sroa_161_8_copyload_pre$1;var $_sroa_161_8_copyload$0=$_sroa_161_8_copyload_pre$0;var $_sroa_158_8_copyload$1=$_sroa_158_8_copyload_pre$1;var $_sroa_158_8_copyload$0=$_sroa_158_8_copyload_pre$0;label=16;break;
 case 15: 
 var $44=(($p_2+16)|0);
 var $ld$24$0=(($44)|0);
 var $45$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($44+4)|0);
 var $45$1=HEAP32[(($ld$25$1)>>2)];
 var $ld$26$0=(($39)|0);
 var $46$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($39+4)|0);
 var $46$1=HEAP32[(($ld$27$1)>>2)];
 var $_not42=(($45$0|0) != ($46$0|0)) | (($45$1|0) != ($46$1|0));
 var $47=($p_2|0)==($btmPt2|0);
 var $or_cond43=$_not42|$47;
 if($or_cond43){var $_sroa_161_8_copyload$1=$46$1;var $_sroa_161_8_copyload$0=$46$0;var $_sroa_158_8_copyload$1=$45$1;var $_sroa_158_8_copyload$0=$45$0;label=16;break;}else{var $btmPt2_pn=$p_2;label=13;break;}
 case 16: 
 var $_sroa_158_8_copyload$0;
 var $_sroa_158_8_copyload$1;
 var $_sroa_161_8_copyload$0;
 var $_sroa_161_8_copyload$1;
 var $48=(($_sroa_161_8_copyload$0|0) == ($_sroa_158_8_copyload$0|0)) & (($_sroa_161_8_copyload$1|0) == ($_sroa_158_8_copyload$1|0));
 if($48){var $55=-1e+40;label=18;break;}else{label=17;break;}
 case 17: 
 var $50$0=_i64Subtract($42$0,$42$1,$38$0,$38$1);var $50$1=tempRet0;
 var $51=(($50$0>>>0)+(($50$1|0)*4294967296));
 var $52$0=_i64Subtract($_sroa_158_8_copyload$0,$_sroa_158_8_copyload$1,$_sroa_161_8_copyload$0,$_sroa_161_8_copyload$1);var $52$1=tempRet0;
 var $53=(($52$0>>>0)+(($52$1|0)*4294967296));
 var $54=($51)/($53);
 var $55=$54;label=18;break;
 case 18: 
 var $55;
 var $56=Math_abs($55);
 var $btmPt2_pn39=$btmPt2;label=19;break;
 case 19: 
 var $btmPt2_pn39;
 var $p_3_in=(($btmPt2_pn39+24)|0);
 var $p_3=HEAP32[(($p_3_in)>>2)];
 var $58=(($p_3+8)|0);
 var $ld$28$0=(($58)|0);
 var $59$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($58+4)|0);
 var $59$1=HEAP32[(($ld$29$1)>>2)];
 var $60=(($59$0|0) == ($38$0|0)) & (($59$1|0) == ($38$1|0));
 var $61=(($p_3+16)|0);
 var $ld$30$0=(($61)|0);
 var $62$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$31$1)>>2)];
 if($60){label=20;break;}else{label=21;break;}
 case 20: 
 var $_not44=(($62$0|0) != ($_sroa_161_8_copyload$0|0)) | (($62$1|0) != ($_sroa_161_8_copyload$1|0));
 var $63=($p_3|0)==($btmPt2|0);
 var $or_cond45=$_not44|$63;
 if($or_cond45){label=21;break;}else{var $btmPt2_pn39=$p_3;label=19;break;}
 case 21: 
 var $64=(($_sroa_161_8_copyload$0|0) == ($62$0|0)) & (($_sroa_161_8_copyload$1|0) == ($62$1|0));
 if($64){var $71=-1e+40;label=23;break;}else{label=22;break;}
 case 22: 
 var $66$0=_i64Subtract($59$0,$59$1,$38$0,$38$1);var $66$1=tempRet0;
 var $67=(($66$0>>>0)+(($66$1|0)*4294967296));
 var $68$0=_i64Subtract($62$0,$62$1,$_sroa_161_8_copyload$0,$_sroa_161_8_copyload$1);var $68$1=tempRet0;
 var $69=(($68$0>>>0)+(($68$1|0)*4294967296));
 var $70=($67)/($69);
 var $71=$70;label=23;break;
 case 23: 
 var $71;
 var $72=Math_abs($71);
 var $73=$20<$56;
 var $74=$20<$72;
 var $or_cond46=$73|$74;
 if($or_cond46){label=24;break;}else{var $80=1;label=26;break;}
 case 24: 
 var $76=$36<$56;
 if($76){var $80=0;label=26;break;}else{label=25;break;}
 case 25: 
 var $78=$36>=$72;
 var $80=$78;label=26;break;
 case 26: 
 var $80;
 return $80;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11GetBottomPtEPNS_5OutPtE($pp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_0_in344557=(($pp+24)|0);
 var $p_0354658=HEAP32[(($p_0_in344557)>>2)];
 var $1=($p_0354658|0)==($pp|0);
 if($1){var $_4=$pp;label=18;break;}else{label=2;break;}
 case 2: 
 var $_phi_trans_insert=(($pp+16)|0);
 var $ld$0$0=(($_phi_trans_insert)|0);
 var $_pre$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_phi_trans_insert+4)|0);
 var $_pre$1=HEAP32[(($ld$1$1)>>2)];
 var $_0_ph59=$pp;var $p_0354660=$p_0354658;var $3$1=$_pre$1;var $3$0=$_pre$0;label=4;break;
 case 3: 
 var $p_0_in3445=(($p_036+24)|0);
 var $p_03546=HEAP32[(($p_0_in3445)>>2)];
 var $2=($p_03546|0)==($p_036|0);
 if($2){var $_4=$p_036;label=18;break;}else{var $_0_ph59=$p_036;var $p_0354660=$p_03546;var $3$1=$7$1;var $3$0=$7$0;label=4;break;}
 case 4: 
 var $3$0;
 var $3$1;
 var $p_0354660;
 var $_0_ph59;
 var $4=(($_0_ph59+8)|0);
 var $dups_0_ph47=0;var $p_03548=$p_0354660;label=5;break;
 case 5: 
 var $p_03548;
 var $dups_0_ph47;
 var $p_036=$p_03548;label=6;break;
 case 6: 
 var $p_036;
 var $6=(($p_036+16)|0);
 var $ld$2$0=(($6)|0);
 var $7$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($6+4)|0);
 var $7$1=HEAP32[(($ld$3$1)>>2)];
 var $8=(($7$1|0) > ($3$1|0)) | (((($7$1|0) == ($3$1|0) & ($7$0>>>0) >  ($3$0>>>0))));
 if($8){label=3;break;}else{label=7;break;}
 case 7: 
 var $10=(($7$0|0) == ($3$0|0)) & (($7$1|0) == ($3$1|0));
 if($10){label=8;break;}else{label=11;break;}
 case 8: 
 var $12=(($p_036+8)|0);
 var $ld$4$0=(($12)|0);
 var $13$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($12+4)|0);
 var $13$1=HEAP32[(($ld$5$1)>>2)];
 var $ld$6$0=(($4)|0);
 var $14$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($4+4)|0);
 var $14$1=HEAP32[(($ld$7$1)>>2)];
 var $15=(($13$1|0) > ($14$1|0)) | (((($13$1|0) == ($14$1|0) & ($13$0>>>0) >  ($14$0>>>0))));
 if($15){label=11;break;}else{label=9;break;}
 case 9: 
 var $17=(($13$1|0) < ($14$1|0)) | (((($13$1|0) == ($14$1|0) & ($13$0>>>0) <  ($14$0>>>0))));
 if($17){label=3;break;}else{label=10;break;}
 case 10: 
 var $19=(($p_036+24)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==($_0_ph59|0);
 if($21){label=11;break;}else{label=12;break;}
 case 11: 
 var $p_0_in=(($p_036+24)|0);
 var $p_0=HEAP32[(($p_0_in)>>2)];
 var $22=($p_0|0)==($_0_ph59|0);
 if($22){label=13;break;}else{var $p_036=$p_0;label=6;break;}
 case 12: 
 var $23=(($p_036+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==($_0_ph59|0);
 var $dups_0_p_0=$25?$dups_0_ph47:$p_036;
 var $dups_0_ph47=$dups_0_p_0;var $p_03548=$20;label=5;break;
 case 13: 
 var $26=($dups_0_ph47|0)==0;
 var $27=($dups_0_ph47|0)==($_0_ph59|0);
 var $or_cond=$26|$27;
 if($or_cond){var $_4=$_0_ph59;label=18;break;}else{var $_228=$_0_ph59;var $dups_229=$dups_0_ph47;label=15;break;}
 case 14: 
 var $28=($dups_3|0)==($_0_ph59|0);
 if($28){var $_4=$_2_dups_2;label=18;break;}else{var $_228=$_2_dups_2;var $dups_229=$dups_3;label=15;break;}
 case 15: 
 var $dups_229;
 var $_228;
 var $29=__ZN10ClipperLib15FirstIsBottomPtEPKNS_5OutPtES2_($_0_ph59,$dups_229);
 var $_2_dups_2=$29?$_228:$dups_229;
 var $30=(($_2_dups_2+8)|0);
 var $ld$8$0=(($30)|0);
 var $31$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$9$1)>>2)];
 var $32=(($_2_dups_2+16)|0);
 var $ld$10$0=(($32)|0);
 var $33$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($32+4)|0);
 var $33$1=HEAP32[(($ld$11$1)>>2)];
 var $dups_2_pn=$dups_229;label=16;break;
 case 16: 
 var $dups_2_pn;
 var $dups_3_in=(($dups_2_pn+24)|0);
 var $dups_3=HEAP32[(($dups_3_in)>>2)];
 var $34=(($dups_3+8)|0);
 var $ld$12$0=(($34)|0);
 var $35$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$13$1)>>2)];
 var $36=(($35$0|0) == ($31$0|0)) & (($35$1|0) == ($31$1|0));
 if($36){label=17;break;}else{var $dups_2_pn=$dups_3;label=16;break;}
 case 17: 
 var $37=(($dups_3+16)|0);
 var $ld$14$0=(($37)|0);
 var $38$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$15$1)>>2)];
 var $39=(($38$0|0) == ($33$0|0)) & (($38$1|0) == ($33$1|0));
 if($39){label=14;break;}else{var $dups_2_pn=$dups_3;label=16;break;}
 case 18: 
 var $_4;
 return $_4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11FindSegmentERPNS_5OutPtERNS_8IntPointES4_($pp,$pt1,$pt2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(sp)+(96);
 var $8=(sp)+(112);
 var $9=(sp)+(128);
 var $10=(sp)+(144);
 var $11=(sp)+(160);
 var $12=(sp)+(176);
 var $13=HEAP32[(($pp)>>2)];
 var $14=($13|0)==0;
 if($14){var $_0=0;label=23;break;}else{label=2;break;}
 case 2: 
 var $pt1a_sroa_0_0__idx48=(($pt1)|0);
 var $ld$0$0=(($pt1a_sroa_0_0__idx48)|0);
 var $pt1a_sroa_0_0_copyload49$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($pt1a_sroa_0_0__idx48+4)|0);
 var $pt1a_sroa_0_0_copyload49$1=HEAP32[(($ld$1$1)>>2)];
 var $pt1a_sroa_1_8__idx53=(($pt1+8)|0);
 var $ld$2$0=(($pt1a_sroa_1_8__idx53)|0);
 var $pt1a_sroa_1_8_copyload54$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($pt1a_sroa_1_8__idx53+4)|0);
 var $pt1a_sroa_1_8_copyload54$1=HEAP32[(($ld$3$1)>>2)];
 var $pt2a_sroa_0_0__idx69=(($pt2)|0);
 var $ld$4$0=(($pt2a_sroa_0_0__idx69)|0);
 var $pt2a_sroa_0_0_copyload70$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($pt2a_sroa_0_0__idx69+4)|0);
 var $pt2a_sroa_0_0_copyload70$1=HEAP32[(($ld$5$1)>>2)];
 var $pt2a_sroa_1_8__idx74=(($pt2+8)|0);
 var $ld$6$0=(($pt2a_sroa_1_8__idx74)|0);
 var $pt2a_sroa_1_8_copyload75$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($pt2a_sroa_1_8__idx74+4)|0);
 var $pt2a_sroa_1_8_copyload75$1=HEAP32[(($ld$7$1)>>2)];
 var $16=$7;
 var $17=$8;
 var $18=$9;
 var $19=$10;
 var $20=$11;
 var $21=$12;
 var $22$0=_i64Subtract($pt1a_sroa_1_8_copyload54$0,$pt1a_sroa_1_8_copyload54$1,$pt2a_sroa_1_8_copyload75$0,$pt2a_sroa_1_8_copyload75$1);var $22$1=tempRet0;
 var $23=(($7+8)|0);
 var $24=(($7)|0);
 var $_lo_lobit_i_i_i$0=($22$1>>31)|(((((($22$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($22$1|0)<0))|0)?-1:0)>>31)|(((((($22$1|0)<0))|0)?-1:0)<<1);
 var $25=(($8+8)|0);
 var $26=(($8)|0);
 var $27$0=_i64Subtract($pt1a_sroa_0_0_copyload49$0,$pt1a_sroa_0_0_copyload49$1,$pt2a_sroa_0_0_copyload70$0,$pt2a_sroa_0_0_copyload70$1);var $27$1=tempRet0;
 var $28=(($11+8)|0);
 var $29=(($11)|0);
 var $_lo_lobit_i_i4_i$0=($27$1>>31)|(((((($27$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i4_i$1=(((((($27$1|0)<0))|0)?-1:0)>>31)|(((((($27$1|0)<0))|0)?-1:0)<<1);
 var $30=(($12+8)|0);
 var $31=(($12)|0);
 var $32=(($9)|0);
 var $33=(($10)|0);
 var $34=(($9+8)|0);
 var $35=(($10+8)|0);
 var $36=$1;
 var $37=$2;
 var $38=$3;
 var $39=$4;
 var $40=$5;
 var $41=$6;
 var $42=(($1+8)|0);
 var $43=(($1)|0);
 var $44=(($2+8)|0);
 var $45=(($2)|0);
 var $46=(($5+8)|0);
 var $47=(($5)|0);
 var $48=(($6+8)|0);
 var $49=(($6)|0);
 var $50=(($3)|0);
 var $51=(($4)|0);
 var $52=(($3+8)|0);
 var $53=(($4+8)|0);
 var $54=(($pt1a_sroa_1_8_copyload54$0|0) == ($pt2a_sroa_1_8_copyload75$0|0)) & (($pt1a_sroa_1_8_copyload54$1|0) == ($pt2a_sroa_1_8_copyload75$1|0));
 var $55=(($pt1a_sroa_0_0_copyload49$1|0) > ($pt2a_sroa_0_0_copyload70$1|0)) | (((($pt1a_sroa_0_0_copyload49$1|0) == ($pt2a_sroa_0_0_copyload70$1|0) & ($pt1a_sroa_0_0_copyload49$0>>>0) >  ($pt2a_sroa_0_0_copyload70$0>>>0))));
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75$0=$55?$pt1a_sroa_1_8_copyload54$0:$pt2a_sroa_1_8_copyload75$0;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75$1=$55?$pt1a_sroa_1_8_copyload54$1:$pt2a_sroa_1_8_copyload75$1;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$0=$55?$pt1a_sroa_0_0_copyload49$0:$pt2a_sroa_0_0_copyload70$0;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1=$55?$pt1a_sroa_0_0_copyload49$1:$pt2a_sroa_0_0_copyload70$1;
 var $pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$0=$55?$pt2a_sroa_0_0_copyload70$0:$pt1a_sroa_0_0_copyload49$0;
 var $pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1=$55?$pt2a_sroa_0_0_copyload70$1:$pt1a_sroa_0_0_copyload49$1;
 var $pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54$0=$55?$pt2a_sroa_1_8_copyload75$0:$pt1a_sroa_1_8_copyload54$0;
 var $pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54$1=$55?$pt2a_sroa_1_8_copyload75$1:$pt1a_sroa_1_8_copyload54$1;
 var $56=(($pt1a_sroa_1_8_copyload54$1|0) < ($pt2a_sroa_1_8_copyload75$1|0)) | (((($pt1a_sroa_1_8_copyload54$1|0) == ($pt2a_sroa_1_8_copyload75$1|0) & ($pt1a_sroa_1_8_copyload54$0>>>0) <  ($pt2a_sroa_1_8_copyload75$0>>>0))));
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$0=$56?$pt1a_sroa_1_8_copyload54$0:$pt2a_sroa_1_8_copyload75$0;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$1=$56?$pt1a_sroa_1_8_copyload54$1:$pt2a_sroa_1_8_copyload75$1;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224$0=$56?$pt1a_sroa_0_0_copyload49$0:$pt2a_sroa_0_0_copyload70$0;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224$1=$56?$pt1a_sroa_0_0_copyload49$1:$pt2a_sroa_0_0_copyload70$1;
 var $pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$0=$56?$pt2a_sroa_1_8_copyload75$0:$pt1a_sroa_1_8_copyload54$0;
 var $pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$1=$56?$pt2a_sroa_1_8_copyload75$1:$pt1a_sroa_1_8_copyload54$1;
 var $pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49226$0=$56?$pt2a_sroa_0_0_copyload70$0:$pt1a_sroa_0_0_copyload49$0;
 var $pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49226$1=$56?$pt2a_sroa_0_0_copyload70$1:$pt1a_sroa_0_0_copyload49$1;
 if($54){var $57=$13;label=3;break;}else{var $92=$13;label=11;break;}
 case 3: 
 var $57;
 var $_sroa_085_0__idx_us=(($57+8)|0);
 var $ld$8$0=(($_sroa_085_0__idx_us)|0);
 var $_sroa_085_0_copyload_us$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($_sroa_085_0__idx_us+4)|0);
 var $_sroa_085_0_copyload_us$1=HEAP32[(($ld$9$1)>>2)];
 var $_sroa_186_8__idx87_us=(($57+16)|0);
 var $ld$10$0=(($_sroa_186_8__idx87_us)|0);
 var $_sroa_186_8_copyload_us$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($_sroa_186_8__idx87_us+4)|0);
 var $_sroa_186_8_copyload_us$1=HEAP32[(($ld$11$1)>>2)];
 var $58=(($57+28)|0);
 var $59=HEAP32[(($58)>>2)];
 var $_sroa_091_0__idx_us=(($59+8)|0);
 var $ld$12$0=(($_sroa_091_0__idx_us)|0);
 var $_sroa_091_0_copyload_us$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($_sroa_091_0__idx_us+4)|0);
 var $_sroa_091_0_copyload_us$1=HEAP32[(($ld$13$1)>>2)];
 var $_sroa_192_8__idx93_us=(($59+16)|0);
 var $ld$14$0=(($_sroa_192_8__idx93_us)|0);
 var $_sroa_192_8_copyload_us$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($_sroa_192_8__idx93_us+4)|0);
 var $_sroa_192_8_copyload_us$1=HEAP32[(($ld$15$1)>>2)];
 var $st$16$0=(($23)|0);
 HEAP32[(($st$16$0)>>2)]=$22$0;
 var $st$17$1=(($23+4)|0);
 HEAP32[(($st$17$1)>>2)]=$22$1;
 var $st$18$0=(($24)|0);
 HEAP32[(($st$18$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$19$1=(($24+4)|0);
 HEAP32[(($st$19$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $60$0=_i64Subtract($_sroa_085_0_copyload_us$0,$_sroa_085_0_copyload_us$1,$_sroa_091_0_copyload_us$0,$_sroa_091_0_copyload_us$1);var $60$1=tempRet0;
 var $st$20$0=(($25)|0);
 HEAP32[(($st$20$0)>>2)]=$60$0;
 var $st$21$1=(($25+4)|0);
 HEAP32[(($st$21$1)>>2)]=$60$1;
 var $_lo_lobit_i_i2_i_us$0=($60$1>>31)|(((((($60$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i_us$1=(((((($60$1|0)<0))|0)?-1:0)>>31)|(((((($60$1|0)<0))|0)?-1:0)<<1);
 var $st$22$0=(($26)|0);
 HEAP32[(($st$22$0)>>2)]=$_lo_lobit_i_i2_i_us$0;
 var $st$23$1=(($26+4)|0);
 HEAP32[(($st$23$1)>>2)]=$_lo_lobit_i_i2_i_us$1;
 __ZNK10ClipperLib6Int128mlERKS0_($9,$7,$8);
 var $st$24$0=(($28)|0);
 HEAP32[(($st$24$0)>>2)]=$27$0;
 var $st$25$1=(($28+4)|0);
 HEAP32[(($st$25$1)>>2)]=$27$1;
 var $st$26$0=(($29)|0);
 HEAP32[(($st$26$0)>>2)]=$_lo_lobit_i_i4_i$0;
 var $st$27$1=(($29+4)|0);
 HEAP32[(($st$27$1)>>2)]=$_lo_lobit_i_i4_i$1;
 var $61$0=_i64Subtract($_sroa_186_8_copyload_us$0,$_sroa_186_8_copyload_us$1,$_sroa_192_8_copyload_us$0,$_sroa_192_8_copyload_us$1);var $61$1=tempRet0;
 var $st$28$0=(($30)|0);
 HEAP32[(($st$28$0)>>2)]=$61$0;
 var $st$29$1=(($30+4)|0);
 HEAP32[(($st$29$1)>>2)]=$61$1;
 var $_lo_lobit_i_i3_i_us$0=($61$1>>31)|(((((($61$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i_us$1=(((((($61$1|0)<0))|0)?-1:0)>>31)|(((((($61$1|0)<0))|0)?-1:0)<<1);
 var $st$30$0=(($31)|0);
 HEAP32[(($st$30$0)>>2)]=$_lo_lobit_i_i3_i_us$0;
 var $st$31$1=(($31+4)|0);
 HEAP32[(($st$31$1)>>2)]=$_lo_lobit_i_i3_i_us$1;
 __ZNK10ClipperLib6Int128mlERKS0_($10,$11,$12);
 var $ld$32$0=(($32)|0);
 var $62$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($32+4)|0);
 var $62$1=HEAP32[(($ld$33$1)>>2)];
 var $ld$34$0=(($33)|0);
 var $63$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($33+4)|0);
 var $63$1=HEAP32[(($ld$35$1)>>2)];
 var $64=(($62$0|0) == ($63$0|0)) & (($62$1|0) == ($63$1|0));
 if($64){label=4;break;}else{label=10;break;}
 case 4: 
 var $ld$36$0=(($34)|0);
 var $65$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($34+4)|0);
 var $65$1=HEAP32[(($ld$37$1)>>2)];
 var $ld$38$0=(($35)|0);
 var $66$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($35+4)|0);
 var $66$1=HEAP32[(($ld$39$1)>>2)];
 var $67=(($65$0|0) == ($66$0|0)) & (($65$1|0) == ($66$1|0));
 if($67){label=5;break;}else{label=10;break;}
 case 5: 
 var $69=HEAP32[(($pp)>>2)];
 var $_sroa_0101_0__idx_us=(($69+8)|0);
 var $ld$40$0=(($_sroa_0101_0__idx_us)|0);
 var $_sroa_0101_0_copyload_us$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($_sroa_0101_0__idx_us+4)|0);
 var $_sroa_0101_0_copyload_us$1=HEAP32[(($ld$41$1)>>2)];
 var $_sroa_1102_8__idx103_us=(($69+16)|0);
 var $ld$42$0=(($_sroa_1102_8__idx103_us)|0);
 var $_sroa_1102_8_copyload_us$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($_sroa_1102_8__idx103_us+4)|0);
 var $_sroa_1102_8_copyload_us$1=HEAP32[(($ld$43$1)>>2)];
 var $st$44$0=(($42)|0);
 HEAP32[(($st$44$0)>>2)]=$22$0;
 var $st$45$1=(($42+4)|0);
 HEAP32[(($st$45$1)>>2)]=$22$1;
 var $st$46$0=(($43)|0);
 HEAP32[(($st$46$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$47$1=(($43+4)|0);
 HEAP32[(($st$47$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $70$0=_i64Subtract($pt2a_sroa_0_0_copyload70$0,$pt2a_sroa_0_0_copyload70$1,$_sroa_0101_0_copyload_us$0,$_sroa_0101_0_copyload_us$1);var $70$1=tempRet0;
 var $st$48$0=(($44)|0);
 HEAP32[(($st$48$0)>>2)]=$70$0;
 var $st$49$1=(($44+4)|0);
 HEAP32[(($st$49$1)>>2)]=$70$1;
 var $_lo_lobit_i_i2_i29_us$0=($70$1>>31)|(((((($70$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i29_us$1=(((((($70$1|0)<0))|0)?-1:0)>>31)|(((((($70$1|0)<0))|0)?-1:0)<<1);
 var $st$50$0=(($45)|0);
 HEAP32[(($st$50$0)>>2)]=$_lo_lobit_i_i2_i29_us$0;
 var $st$51$1=(($45+4)|0);
 HEAP32[(($st$51$1)>>2)]=$_lo_lobit_i_i2_i29_us$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $st$52$0=(($46)|0);
 HEAP32[(($st$52$0)>>2)]=$27$0;
 var $st$53$1=(($46+4)|0);
 HEAP32[(($st$53$1)>>2)]=$27$1;
 var $st$54$0=(($47)|0);
 HEAP32[(($st$54$0)>>2)]=$_lo_lobit_i_i4_i$0;
 var $st$55$1=(($47+4)|0);
 HEAP32[(($st$55$1)>>2)]=$_lo_lobit_i_i4_i$1;
 var $71$0=_i64Subtract($pt1a_sroa_1_8_copyload54$0,$pt1a_sroa_1_8_copyload54$1,$_sroa_1102_8_copyload_us$0,$_sroa_1102_8_copyload_us$1);var $71$1=tempRet0;
 var $st$56$0=(($48)|0);
 HEAP32[(($st$56$0)>>2)]=$71$0;
 var $st$57$1=(($48+4)|0);
 HEAP32[(($st$57$1)>>2)]=$71$1;
 var $_lo_lobit_i_i3_i31_us$0=($71$1>>31)|(((((($71$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i31_us$1=(((((($71$1|0)<0))|0)?-1:0)>>31)|(((((($71$1|0)<0))|0)?-1:0)<<1);
 var $st$58$0=(($49)|0);
 HEAP32[(($st$58$0)>>2)]=$_lo_lobit_i_i3_i31_us$0;
 var $st$59$1=(($49+4)|0);
 HEAP32[(($st$59$1)>>2)]=$_lo_lobit_i_i3_i31_us$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$60$0=(($50)|0);
 var $72$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($50+4)|0);
 var $72$1=HEAP32[(($ld$61$1)>>2)];
 var $ld$62$0=(($51)|0);
 var $73$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($51+4)|0);
 var $73$1=HEAP32[(($ld$63$1)>>2)];
 var $74=(($72$0|0) == ($73$0|0)) & (($72$1|0) == ($73$1|0));
 if($74){label=6;break;}else{label=10;break;}
 case 6: 
 var $ld$64$0=(($52)|0);
 var $75$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($52+4)|0);
 var $75$1=HEAP32[(($ld$65$1)>>2)];
 var $ld$66$0=(($53)|0);
 var $76$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($53+4)|0);
 var $76$1=HEAP32[(($ld$67$1)>>2)];
 var $77=(($75$0|0) == ($76$0|0)) & (($75$1|0) == ($76$1|0));
 if($77){label=7;break;}else{label=10;break;}
 case 7: 
 var $78=HEAP32[(($pp)>>2)];
 var $_sroa_0172_0__idx_us=(($78+8)|0);
 var $ld$68$0=(($_sroa_0172_0__idx_us)|0);
 var $_sroa_0172_0_copyload_us$0=HEAP32[(($ld$68$0)>>2)];
 var $ld$69$1=(($_sroa_0172_0__idx_us+4)|0);
 var $_sroa_0172_0_copyload_us$1=HEAP32[(($ld$69$1)>>2)];
 var $_sroa_1173_8__idx174_us=(($78+16)|0);
 var $ld$70$0=(($_sroa_1173_8__idx174_us)|0);
 var $_sroa_1173_8_copyload_us$0=HEAP32[(($ld$70$0)>>2)];
 var $ld$71$1=(($_sroa_1173_8__idx174_us+4)|0);
 var $_sroa_1173_8_copyload_us$1=HEAP32[(($ld$71$1)>>2)];
 var $79=(($78+28)|0);
 var $80=HEAP32[(($79)>>2)];
 var $_sroa_0197_0__idx_us=(($80+8)|0);
 var $ld$72$0=(($_sroa_0197_0__idx_us)|0);
 var $_sroa_0197_0_copyload_us$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($_sroa_0197_0__idx_us+4)|0);
 var $_sroa_0197_0_copyload_us$1=HEAP32[(($ld$73$1)>>2)];
 var $_sroa_1198_8__idx199_us=(($80+16)|0);
 var $ld$74$0=(($_sroa_1198_8__idx199_us)|0);
 var $_sroa_1198_8_copyload_us$0=HEAP32[(($ld$74$0)>>2)];
 var $ld$75$1=(($_sroa_1198_8__idx199_us+4)|0);
 var $_sroa_1198_8_copyload_us$1=HEAP32[(($ld$75$1)>>2)];
 var $81=(($_sroa_0172_0_copyload_us$1|0) > ($_sroa_0197_0_copyload_us$1|0)) | (((($_sroa_0172_0_copyload_us$1|0) == ($_sroa_0197_0_copyload_us$1|0) & ($_sroa_0172_0_copyload_us$0>>>0) >  ($_sroa_0197_0_copyload_us$0>>>0))));
 var $_sroa_1173_8_copyload__sroa_1198_8_copyload_us$0=$81?$_sroa_1173_8_copyload_us$0:$_sroa_1198_8_copyload_us$0;
 var $_sroa_1173_8_copyload__sroa_1198_8_copyload_us$1=$81?$_sroa_1173_8_copyload_us$1:$_sroa_1198_8_copyload_us$1;
 var $_sroa_0172_0_copyload__sroa_0197_0_copyload_us$0=$81?$_sroa_0172_0_copyload_us$0:$_sroa_0197_0_copyload_us$0;
 var $_sroa_0172_0_copyload__sroa_0197_0_copyload_us$1=$81?$_sroa_0172_0_copyload_us$1:$_sroa_0197_0_copyload_us$1;
 var $_sroa_0197_0_copyload__sroa_0172_0_copyload_us$0=$81?$_sroa_0197_0_copyload_us$0:$_sroa_0172_0_copyload_us$0;
 var $_sroa_0197_0_copyload__sroa_0172_0_copyload_us$1=$81?$_sroa_0197_0_copyload_us$1:$_sroa_0172_0_copyload_us$1;
 var $82=(($pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1|0) > ($_sroa_0197_0_copyload__sroa_0172_0_copyload_us$1|0)) | (((($pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1|0) == ($_sroa_0197_0_copyload__sroa_0172_0_copyload_us$1|0) & ($pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$0>>>0) >  ($_sroa_0197_0_copyload__sroa_0172_0_copyload_us$0>>>0))));
 if($82){var $storemerge234_us$1=$pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54$1;var $storemerge234_us$0=$pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54$0;var $storemerge237_us$1=$pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1;var $storemerge237_us$0=$pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$0;label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_1198_8_copyload__sroa_1173_8_copyload_us$0=$81?$_sroa_1198_8_copyload_us$0:$_sroa_1173_8_copyload_us$0;
 var $_sroa_1198_8_copyload__sroa_1173_8_copyload_us$1=$81?$_sroa_1198_8_copyload_us$1:$_sroa_1173_8_copyload_us$1;
 var $storemerge234_us$1=$_sroa_1198_8_copyload__sroa_1173_8_copyload_us$1;var $storemerge234_us$0=$_sroa_1198_8_copyload__sroa_1173_8_copyload_us$0;var $storemerge237_us$1=$_sroa_0197_0_copyload__sroa_0172_0_copyload_us$1;var $storemerge237_us$0=$_sroa_0197_0_copyload__sroa_0172_0_copyload_us$0;label=9;break;
 case 9: 
 var $storemerge237_us$0;
 var $storemerge237_us$1;
 var $storemerge234_us$0;
 var $storemerge234_us$1;
 var $st$76$0=(($pt1a_sroa_0_0__idx48)|0);
 HEAP32[(($st$76$0)>>2)]=$storemerge237_us$0;
 var $st$77$1=(($pt1a_sroa_0_0__idx48+4)|0);
 HEAP32[(($st$77$1)>>2)]=$storemerge237_us$1;
 var $st$78$0=(($pt1a_sroa_1_8__idx53)|0);
 HEAP32[(($st$78$0)>>2)]=$storemerge234_us$0;
 var $st$79$1=(($pt1a_sroa_1_8__idx53+4)|0);
 HEAP32[(($st$79$1)>>2)]=$storemerge234_us$1;
 var $85=(($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1|0) < ($_sroa_0172_0_copyload__sroa_0197_0_copyload_us$1|0)) | (((($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1|0) == ($_sroa_0172_0_copyload__sroa_0197_0_copyload_us$1|0) & ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$0>>>0) <  ($_sroa_0172_0_copyload__sroa_0197_0_copyload_us$0>>>0))));
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$0=$85?$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$0:$_sroa_0172_0_copyload__sroa_0197_0_copyload_us$0;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$1=$85?$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1:$_sroa_0172_0_copyload__sroa_0197_0_copyload_us$1;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload_us$0=$85?$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75$0:$_sroa_1173_8_copyload__sroa_1198_8_copyload_us$0;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload_us$1=$85?$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75$1:$_sroa_1173_8_copyload__sroa_1198_8_copyload_us$1;
 var $st$80$0=(($pt2a_sroa_0_0__idx69)|0);
 HEAP32[(($st$80$0)>>2)]=$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$0;
 var $st$81$1=(($pt2a_sroa_0_0__idx69+4)|0);
 HEAP32[(($st$81$1)>>2)]=$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$1;
 var $st$82$0=(($pt2a_sroa_1_8__idx74)|0);
 HEAP32[(($st$82$0)>>2)]=$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload_us$0;
 var $st$83$1=(($pt2a_sroa_1_8__idx74+4)|0);
 HEAP32[(($st$83$1)>>2)]=$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload_us$1;
 var $ld$84$0=(($pt1a_sroa_0_0__idx48)|0);
 var $86$0=HEAP32[(($ld$84$0)>>2)];
 var $ld$85$1=(($pt1a_sroa_0_0__idx48+4)|0);
 var $86$1=HEAP32[(($ld$85$1)>>2)];
 var $87=(($86$1|0) < ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$1|0)) | (((($86$1|0) == ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$1|0) & ($86$0>>>0) <  ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload_us$0>>>0))));
 if($87){var $_0=1;label=23;break;}else{label=10;break;}
 case 10: 
 var $88=HEAP32[(($pp)>>2)];
 var $89=(($88+24)|0);
 var $90=HEAP32[(($89)>>2)];
 HEAP32[(($pp)>>2)]=$90;
 var $91=($90|0)==($13|0);
 if($91){var $_0=0;label=23;break;}else{var $57=$90;label=3;break;}
 case 11: 
 var $92;
 var $_sroa_085_0__idx=(($92+8)|0);
 var $ld$86$0=(($_sroa_085_0__idx)|0);
 var $_sroa_085_0_copyload$0=HEAP32[(($ld$86$0)>>2)];
 var $ld$87$1=(($_sroa_085_0__idx+4)|0);
 var $_sroa_085_0_copyload$1=HEAP32[(($ld$87$1)>>2)];
 var $_sroa_186_8__idx87=(($92+16)|0);
 var $ld$88$0=(($_sroa_186_8__idx87)|0);
 var $_sroa_186_8_copyload$0=HEAP32[(($ld$88$0)>>2)];
 var $ld$89$1=(($_sroa_186_8__idx87+4)|0);
 var $_sroa_186_8_copyload$1=HEAP32[(($ld$89$1)>>2)];
 var $93=(($92+28)|0);
 var $94=HEAP32[(($93)>>2)];
 var $_sroa_091_0__idx=(($94+8)|0);
 var $ld$90$0=(($_sroa_091_0__idx)|0);
 var $_sroa_091_0_copyload$0=HEAP32[(($ld$90$0)>>2)];
 var $ld$91$1=(($_sroa_091_0__idx+4)|0);
 var $_sroa_091_0_copyload$1=HEAP32[(($ld$91$1)>>2)];
 var $_sroa_192_8__idx93=(($94+16)|0);
 var $ld$92$0=(($_sroa_192_8__idx93)|0);
 var $_sroa_192_8_copyload$0=HEAP32[(($ld$92$0)>>2)];
 var $ld$93$1=(($_sroa_192_8__idx93+4)|0);
 var $_sroa_192_8_copyload$1=HEAP32[(($ld$93$1)>>2)];
 var $st$94$0=(($23)|0);
 HEAP32[(($st$94$0)>>2)]=$22$0;
 var $st$95$1=(($23+4)|0);
 HEAP32[(($st$95$1)>>2)]=$22$1;
 var $st$96$0=(($24)|0);
 HEAP32[(($st$96$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$97$1=(($24+4)|0);
 HEAP32[(($st$97$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $95$0=_i64Subtract($_sroa_085_0_copyload$0,$_sroa_085_0_copyload$1,$_sroa_091_0_copyload$0,$_sroa_091_0_copyload$1);var $95$1=tempRet0;
 var $st$98$0=(($25)|0);
 HEAP32[(($st$98$0)>>2)]=$95$0;
 var $st$99$1=(($25+4)|0);
 HEAP32[(($st$99$1)>>2)]=$95$1;
 var $_lo_lobit_i_i2_i$0=($95$1>>31)|(((((($95$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i$1=(((((($95$1|0)<0))|0)?-1:0)>>31)|(((((($95$1|0)<0))|0)?-1:0)<<1);
 var $st$100$0=(($26)|0);
 HEAP32[(($st$100$0)>>2)]=$_lo_lobit_i_i2_i$0;
 var $st$101$1=(($26+4)|0);
 HEAP32[(($st$101$1)>>2)]=$_lo_lobit_i_i2_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($9,$7,$8);
 var $st$102$0=(($28)|0);
 HEAP32[(($st$102$0)>>2)]=$27$0;
 var $st$103$1=(($28+4)|0);
 HEAP32[(($st$103$1)>>2)]=$27$1;
 var $st$104$0=(($29)|0);
 HEAP32[(($st$104$0)>>2)]=$_lo_lobit_i_i4_i$0;
 var $st$105$1=(($29+4)|0);
 HEAP32[(($st$105$1)>>2)]=$_lo_lobit_i_i4_i$1;
 var $96$0=_i64Subtract($_sroa_186_8_copyload$0,$_sroa_186_8_copyload$1,$_sroa_192_8_copyload$0,$_sroa_192_8_copyload$1);var $96$1=tempRet0;
 var $st$106$0=(($30)|0);
 HEAP32[(($st$106$0)>>2)]=$96$0;
 var $st$107$1=(($30+4)|0);
 HEAP32[(($st$107$1)>>2)]=$96$1;
 var $_lo_lobit_i_i3_i$0=($96$1>>31)|(((((($96$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i$1=(((((($96$1|0)<0))|0)?-1:0)>>31)|(((((($96$1|0)<0))|0)?-1:0)<<1);
 var $st$108$0=(($31)|0);
 HEAP32[(($st$108$0)>>2)]=$_lo_lobit_i_i3_i$0;
 var $st$109$1=(($31+4)|0);
 HEAP32[(($st$109$1)>>2)]=$_lo_lobit_i_i3_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($10,$11,$12);
 var $ld$110$0=(($32)|0);
 var $97$0=HEAP32[(($ld$110$0)>>2)];
 var $ld$111$1=(($32+4)|0);
 var $97$1=HEAP32[(($ld$111$1)>>2)];
 var $ld$112$0=(($33)|0);
 var $98$0=HEAP32[(($ld$112$0)>>2)];
 var $ld$113$1=(($33+4)|0);
 var $98$1=HEAP32[(($ld$113$1)>>2)];
 var $99=(($97$0|0) == ($98$0|0)) & (($97$1|0) == ($98$1|0));
 if($99){label=12;break;}else{label=22;break;}
 case 12: 
 var $ld$114$0=(($34)|0);
 var $100$0=HEAP32[(($ld$114$0)>>2)];
 var $ld$115$1=(($34+4)|0);
 var $100$1=HEAP32[(($ld$115$1)>>2)];
 var $ld$116$0=(($35)|0);
 var $101$0=HEAP32[(($ld$116$0)>>2)];
 var $ld$117$1=(($35+4)|0);
 var $101$1=HEAP32[(($ld$117$1)>>2)];
 var $102=(($100$0|0) == ($101$0|0)) & (($100$1|0) == ($101$1|0));
 if($102){label=13;break;}else{label=22;break;}
 case 13: 
 var $104=HEAP32[(($pp)>>2)];
 var $_sroa_0101_0__idx=(($104+8)|0);
 var $ld$118$0=(($_sroa_0101_0__idx)|0);
 var $_sroa_0101_0_copyload$0=HEAP32[(($ld$118$0)>>2)];
 var $ld$119$1=(($_sroa_0101_0__idx+4)|0);
 var $_sroa_0101_0_copyload$1=HEAP32[(($ld$119$1)>>2)];
 var $_sroa_1102_8__idx103=(($104+16)|0);
 var $ld$120$0=(($_sroa_1102_8__idx103)|0);
 var $_sroa_1102_8_copyload$0=HEAP32[(($ld$120$0)>>2)];
 var $ld$121$1=(($_sroa_1102_8__idx103+4)|0);
 var $_sroa_1102_8_copyload$1=HEAP32[(($ld$121$1)>>2)];
 var $st$122$0=(($42)|0);
 HEAP32[(($st$122$0)>>2)]=$22$0;
 var $st$123$1=(($42+4)|0);
 HEAP32[(($st$123$1)>>2)]=$22$1;
 var $st$124$0=(($43)|0);
 HEAP32[(($st$124$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$125$1=(($43+4)|0);
 HEAP32[(($st$125$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $105$0=_i64Subtract($pt2a_sroa_0_0_copyload70$0,$pt2a_sroa_0_0_copyload70$1,$_sroa_0101_0_copyload$0,$_sroa_0101_0_copyload$1);var $105$1=tempRet0;
 var $st$126$0=(($44)|0);
 HEAP32[(($st$126$0)>>2)]=$105$0;
 var $st$127$1=(($44+4)|0);
 HEAP32[(($st$127$1)>>2)]=$105$1;
 var $_lo_lobit_i_i2_i29$0=($105$1>>31)|(((((($105$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i29$1=(((((($105$1|0)<0))|0)?-1:0)>>31)|(((((($105$1|0)<0))|0)?-1:0)<<1);
 var $st$128$0=(($45)|0);
 HEAP32[(($st$128$0)>>2)]=$_lo_lobit_i_i2_i29$0;
 var $st$129$1=(($45+4)|0);
 HEAP32[(($st$129$1)>>2)]=$_lo_lobit_i_i2_i29$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $st$130$0=(($46)|0);
 HEAP32[(($st$130$0)>>2)]=$27$0;
 var $st$131$1=(($46+4)|0);
 HEAP32[(($st$131$1)>>2)]=$27$1;
 var $st$132$0=(($47)|0);
 HEAP32[(($st$132$0)>>2)]=$_lo_lobit_i_i4_i$0;
 var $st$133$1=(($47+4)|0);
 HEAP32[(($st$133$1)>>2)]=$_lo_lobit_i_i4_i$1;
 var $106$0=_i64Subtract($pt2a_sroa_1_8_copyload75$0,$pt2a_sroa_1_8_copyload75$1,$_sroa_1102_8_copyload$0,$_sroa_1102_8_copyload$1);var $106$1=tempRet0;
 var $st$134$0=(($48)|0);
 HEAP32[(($st$134$0)>>2)]=$106$0;
 var $st$135$1=(($48+4)|0);
 HEAP32[(($st$135$1)>>2)]=$106$1;
 var $_lo_lobit_i_i3_i31$0=($106$1>>31)|(((((($106$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i31$1=(((((($106$1|0)<0))|0)?-1:0)>>31)|(((((($106$1|0)<0))|0)?-1:0)<<1);
 var $st$136$0=(($49)|0);
 HEAP32[(($st$136$0)>>2)]=$_lo_lobit_i_i3_i31$0;
 var $st$137$1=(($49+4)|0);
 HEAP32[(($st$137$1)>>2)]=$_lo_lobit_i_i3_i31$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$138$0=(($50)|0);
 var $107$0=HEAP32[(($ld$138$0)>>2)];
 var $ld$139$1=(($50+4)|0);
 var $107$1=HEAP32[(($ld$139$1)>>2)];
 var $ld$140$0=(($51)|0);
 var $108$0=HEAP32[(($ld$140$0)>>2)];
 var $ld$141$1=(($51+4)|0);
 var $108$1=HEAP32[(($ld$141$1)>>2)];
 var $109=(($107$0|0) == ($108$0|0)) & (($107$1|0) == ($108$1|0));
 if($109){label=14;break;}else{label=22;break;}
 case 14: 
 var $ld$142$0=(($52)|0);
 var $110$0=HEAP32[(($ld$142$0)>>2)];
 var $ld$143$1=(($52+4)|0);
 var $110$1=HEAP32[(($ld$143$1)>>2)];
 var $ld$144$0=(($53)|0);
 var $111$0=HEAP32[(($ld$144$0)>>2)];
 var $ld$145$1=(($53+4)|0);
 var $111$1=HEAP32[(($ld$145$1)>>2)];
 var $112=(($110$0|0) == ($111$0|0)) & (($110$1|0) == ($111$1|0));
 if($112){label=15;break;}else{label=22;break;}
 case 15: 
 var $114=HEAP32[(($pp)>>2)];
 var $_sroa_0172_0__idx=(($114+8)|0);
 var $ld$146$0=(($_sroa_0172_0__idx)|0);
 var $_sroa_0172_0_copyload$0=HEAP32[(($ld$146$0)>>2)];
 var $ld$147$1=(($_sroa_0172_0__idx+4)|0);
 var $_sroa_0172_0_copyload$1=HEAP32[(($ld$147$1)>>2)];
 var $_sroa_1173_8__idx174=(($114+16)|0);
 var $ld$148$0=(($_sroa_1173_8__idx174)|0);
 var $_sroa_1173_8_copyload$0=HEAP32[(($ld$148$0)>>2)];
 var $ld$149$1=(($_sroa_1173_8__idx174+4)|0);
 var $_sroa_1173_8_copyload$1=HEAP32[(($ld$149$1)>>2)];
 var $115=(($114+28)|0);
 var $116=HEAP32[(($115)>>2)];
 var $_sroa_0197_0__idx=(($116+8)|0);
 var $ld$150$0=(($_sroa_0197_0__idx)|0);
 var $_sroa_0197_0_copyload$0=HEAP32[(($ld$150$0)>>2)];
 var $ld$151$1=(($_sroa_0197_0__idx+4)|0);
 var $_sroa_0197_0_copyload$1=HEAP32[(($ld$151$1)>>2)];
 var $_sroa_1198_8__idx199=(($116+16)|0);
 var $ld$152$0=(($_sroa_1198_8__idx199)|0);
 var $_sroa_1198_8_copyload$0=HEAP32[(($ld$152$0)>>2)];
 var $ld$153$1=(($_sroa_1198_8__idx199+4)|0);
 var $_sroa_1198_8_copyload$1=HEAP32[(($ld$153$1)>>2)];
 var $117$0=___divdi3($27$0,$27$1,$22$0,$22$1);var $117$1=tempRet0;
 var $$etemp$154$0=0;
 var $$etemp$154$1=0;
 var $118=(($117$1|0) < ($$etemp$154$1|0)) | (((($117$1|0) == ($$etemp$154$1|0) & ($117$0>>>0) <  ($$etemp$154$0>>>0))));
 var $$etemp$155$0=0;
 var $$etemp$155$1=0;
 var $119$0=_i64Subtract($$etemp$155$0,$$etemp$155$1,$117$0,$117$1);var $119$1=tempRet0;
 var $120$0=$118?$119$0:$117$0;
 var $120$1=$118?$119$1:$117$1;
 var $$etemp$156$0=1;
 var $$etemp$156$1=0;
 var $121=(($120$1|0) > ($$etemp$156$1|0)) | (((($120$1|0) == ($$etemp$156$1|0) & ($120$0>>>0) >  ($$etemp$156$0>>>0))));
 if($121){label=16;break;}else{label=19;break;}
 case 16: 
 var $122=(($_sroa_0172_0_copyload$1|0) > ($_sroa_0197_0_copyload$1|0)) | (((($_sroa_0172_0_copyload$1|0) == ($_sroa_0197_0_copyload$1|0) & ($_sroa_0172_0_copyload$0>>>0) >  ($_sroa_0197_0_copyload$0>>>0))));
 var $_sroa_1173_8_copyload__sroa_1198_8_copyload$0=$122?$_sroa_1173_8_copyload$0:$_sroa_1198_8_copyload$0;
 var $_sroa_1173_8_copyload__sroa_1198_8_copyload$1=$122?$_sroa_1173_8_copyload$1:$_sroa_1198_8_copyload$1;
 var $_sroa_0172_0_copyload__sroa_0197_0_copyload$0=$122?$_sroa_0172_0_copyload$0:$_sroa_0197_0_copyload$0;
 var $_sroa_0172_0_copyload__sroa_0197_0_copyload$1=$122?$_sroa_0172_0_copyload$1:$_sroa_0197_0_copyload$1;
 var $_sroa_0197_0_copyload__sroa_0172_0_copyload$0=$122?$_sroa_0197_0_copyload$0:$_sroa_0172_0_copyload$0;
 var $_sroa_0197_0_copyload__sroa_0172_0_copyload$1=$122?$_sroa_0197_0_copyload$1:$_sroa_0172_0_copyload$1;
 var $123=(($pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1|0) > ($_sroa_0197_0_copyload__sroa_0172_0_copyload$1|0)) | (((($pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1|0) == ($_sroa_0197_0_copyload__sroa_0172_0_copyload$1|0) & ($pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$0>>>0) >  ($_sroa_0197_0_copyload__sroa_0172_0_copyload$0>>>0))));
 if($123){var $storemerge234$1=$pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54$1;var $storemerge234$0=$pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54$0;var $storemerge237$1=$pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$1;var $storemerge237$0=$pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49$0;label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_1198_8_copyload__sroa_1173_8_copyload$0=$122?$_sroa_1198_8_copyload$0:$_sroa_1173_8_copyload$0;
 var $_sroa_1198_8_copyload__sroa_1173_8_copyload$1=$122?$_sroa_1198_8_copyload$1:$_sroa_1173_8_copyload$1;
 var $storemerge234$1=$_sroa_1198_8_copyload__sroa_1173_8_copyload$1;var $storemerge234$0=$_sroa_1198_8_copyload__sroa_1173_8_copyload$0;var $storemerge237$1=$_sroa_0197_0_copyload__sroa_0172_0_copyload$1;var $storemerge237$0=$_sroa_0197_0_copyload__sroa_0172_0_copyload$0;label=18;break;
 case 18: 
 var $storemerge237$0;
 var $storemerge237$1;
 var $storemerge234$0;
 var $storemerge234$1;
 var $st$157$0=(($pt1a_sroa_0_0__idx48)|0);
 HEAP32[(($st$157$0)>>2)]=$storemerge237$0;
 var $st$158$1=(($pt1a_sroa_0_0__idx48+4)|0);
 HEAP32[(($st$158$1)>>2)]=$storemerge237$1;
 var $st$159$0=(($pt1a_sroa_1_8__idx53)|0);
 HEAP32[(($st$159$0)>>2)]=$storemerge234$0;
 var $st$160$1=(($pt1a_sroa_1_8__idx53+4)|0);
 HEAP32[(($st$160$1)>>2)]=$storemerge234$1;
 var $126=(($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1|0) < ($_sroa_0172_0_copyload__sroa_0197_0_copyload$1|0)) | (((($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1|0) == ($_sroa_0172_0_copyload__sroa_0197_0_copyload$1|0) & ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$0>>>0) <  ($_sroa_0172_0_copyload__sroa_0197_0_copyload$0>>>0))));
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$0=$126?$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$0:$_sroa_0172_0_copyload__sroa_0197_0_copyload$0;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$1=$126?$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70$1:$_sroa_0172_0_copyload__sroa_0197_0_copyload$1;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload$0=$126?$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75$0:$_sroa_1173_8_copyload__sroa_1198_8_copyload$0;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload$1=$126?$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75$1:$_sroa_1173_8_copyload__sroa_1198_8_copyload$1;
 var $st$161$0=(($pt2a_sroa_0_0__idx69)|0);
 HEAP32[(($st$161$0)>>2)]=$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$0;
 var $st$162$1=(($pt2a_sroa_0_0__idx69+4)|0);
 HEAP32[(($st$162$1)>>2)]=$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$1;
 var $st$163$0=(($pt2a_sroa_1_8__idx74)|0);
 HEAP32[(($st$163$0)>>2)]=$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload$0;
 var $st$164$1=(($pt2a_sroa_1_8__idx74+4)|0);
 HEAP32[(($st$164$1)>>2)]=$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75__sroa_1173_8_copyload__sroa_1198_8_copyload$1;
 var $ld$165$0=(($pt1a_sroa_0_0__idx48)|0);
 var $127$0=HEAP32[(($ld$165$0)>>2)];
 var $ld$166$1=(($pt1a_sroa_0_0__idx48+4)|0);
 var $127$1=HEAP32[(($ld$166$1)>>2)];
 var $128=(($127$1|0) < ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$1|0)) | (((($127$1|0) == ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$1|0) & ($127$0>>>0) <  ($pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70__sroa_0172_0_copyload__sroa_0197_0_copyload$0>>>0))));
 if($128){var $_0=1;label=23;break;}else{label=22;break;}
 case 19: 
 var $129=(($_sroa_1173_8_copyload$1|0) < ($_sroa_1198_8_copyload$1|0)) | (((($_sroa_1173_8_copyload$1|0) == ($_sroa_1198_8_copyload$1|0) & ($_sroa_1173_8_copyload$0>>>0) <  ($_sroa_1198_8_copyload$0>>>0))));
 var $_sroa_1173_8_copyload__sroa_1198_8_copyload227$0=$129?$_sroa_1173_8_copyload$0:$_sroa_1198_8_copyload$0;
 var $_sroa_1173_8_copyload__sroa_1198_8_copyload227$1=$129?$_sroa_1173_8_copyload$1:$_sroa_1198_8_copyload$1;
 var $_sroa_0172_0_copyload__sroa_0197_0_copyload228$0=$129?$_sroa_0172_0_copyload$0:$_sroa_0197_0_copyload$0;
 var $_sroa_0172_0_copyload__sroa_0197_0_copyload228$1=$129?$_sroa_0172_0_copyload$1:$_sroa_0197_0_copyload$1;
 var $_sroa_1198_8_copyload__sroa_1173_8_copyload230$0=$129?$_sroa_1198_8_copyload$0:$_sroa_1173_8_copyload$0;
 var $_sroa_1198_8_copyload__sroa_1173_8_copyload230$1=$129?$_sroa_1198_8_copyload$1:$_sroa_1173_8_copyload$1;
 var $130=(($pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$1|0) < ($_sroa_1198_8_copyload__sroa_1173_8_copyload230$1|0)) | (((($pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$1|0) == ($_sroa_1198_8_copyload__sroa_1173_8_copyload230$1|0) & ($pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$0>>>0) <  ($_sroa_1198_8_copyload__sroa_1173_8_copyload230$0>>>0))));
 if($130){var $storemerge$1=$pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$1;var $storemerge$0=$pt2a_sroa_1_8_copyload75_pt1a_sroa_1_8_copyload54225$0;var $storemerge233$1=$pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49226$1;var $storemerge233$0=$pt2a_sroa_0_0_copyload70_pt1a_sroa_0_0_copyload49226$0;label=21;break;}else{label=20;break;}
 case 20: 
 var $_sroa_0197_0_copyload__sroa_0172_0_copyload229$0=$129?$_sroa_0197_0_copyload$0:$_sroa_0172_0_copyload$0;
 var $_sroa_0197_0_copyload__sroa_0172_0_copyload229$1=$129?$_sroa_0197_0_copyload$1:$_sroa_0172_0_copyload$1;
 var $storemerge$1=$_sroa_1198_8_copyload__sroa_1173_8_copyload230$1;var $storemerge$0=$_sroa_1198_8_copyload__sroa_1173_8_copyload230$0;var $storemerge233$1=$_sroa_0197_0_copyload__sroa_0172_0_copyload229$1;var $storemerge233$0=$_sroa_0197_0_copyload__sroa_0172_0_copyload229$0;label=21;break;
 case 21: 
 var $storemerge233$0;
 var $storemerge233$1;
 var $storemerge$0;
 var $storemerge$1;
 var $st$167$0=(($pt1a_sroa_0_0__idx48)|0);
 HEAP32[(($st$167$0)>>2)]=$storemerge233$0;
 var $st$168$1=(($pt1a_sroa_0_0__idx48+4)|0);
 HEAP32[(($st$168$1)>>2)]=$storemerge233$1;
 var $st$169$0=(($pt1a_sroa_1_8__idx53)|0);
 HEAP32[(($st$169$0)>>2)]=$storemerge$0;
 var $st$170$1=(($pt1a_sroa_1_8__idx53+4)|0);
 HEAP32[(($st$170$1)>>2)]=$storemerge$1;
 var $132=(($pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$1|0) > ($_sroa_1173_8_copyload__sroa_1198_8_copyload227$1|0)) | (((($pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$1|0) == ($_sroa_1173_8_copyload__sroa_1198_8_copyload227$1|0) & ($pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$0>>>0) >  ($_sroa_1173_8_copyload__sroa_1198_8_copyload227$0>>>0))));
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224__sroa_0172_0_copyload__sroa_0197_0_copyload228$0=$132?$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224$0:$_sroa_0172_0_copyload__sroa_0197_0_copyload228$0;
 var $pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224__sroa_0172_0_copyload__sroa_0197_0_copyload228$1=$132?$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224$1:$_sroa_0172_0_copyload__sroa_0197_0_copyload228$1;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$0=$132?$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$0:$_sroa_1173_8_copyload__sroa_1198_8_copyload227$0;
 var $pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$1=$132?$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223$1:$_sroa_1173_8_copyload__sroa_1198_8_copyload227$1;
 var $st$171$0=(($pt2a_sroa_0_0__idx69)|0);
 HEAP32[(($st$171$0)>>2)]=$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224__sroa_0172_0_copyload__sroa_0197_0_copyload228$0;
 var $st$172$1=(($pt2a_sroa_0_0__idx69+4)|0);
 HEAP32[(($st$172$1)>>2)]=$pt1a_sroa_0_0_copyload49_pt2a_sroa_0_0_copyload70224__sroa_0172_0_copyload__sroa_0197_0_copyload228$1;
 var $st$173$0=(($pt2a_sroa_1_8__idx74)|0);
 HEAP32[(($st$173$0)>>2)]=$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$0;
 var $st$174$1=(($pt2a_sroa_1_8__idx74+4)|0);
 HEAP32[(($st$174$1)>>2)]=$pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$1;
 var $ld$175$0=(($pt1a_sroa_1_8__idx53)|0);
 var $133$0=HEAP32[(($ld$175$0)>>2)];
 var $ld$176$1=(($pt1a_sroa_1_8__idx53+4)|0);
 var $133$1=HEAP32[(($ld$176$1)>>2)];
 var $134=(($133$1|0) > ($pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$1|0)) | (((($133$1|0) == ($pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$1|0) & ($133$0>>>0) >  ($pt1a_sroa_1_8_copyload54_pt2a_sroa_1_8_copyload75223__sroa_1173_8_copyload__sroa_1198_8_copyload227$0>>>0))));
 if($134){var $_0=1;label=23;break;}else{label=22;break;}
 case 22: 
 var $135=HEAP32[(($pp)>>2)];
 var $136=(($135+24)|0);
 var $137=HEAP32[(($136)>>2)];
 HEAP32[(($pp)>>2)]=$137;
 var $138=($137|0)==($13|0);
 if($138){var $_0=0;label=23;break;}else{var $92=$137;label=11;break;}
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBaseD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $2=$this;
 __ZdlPv($2);
 return;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$this;
 __ZdlPv($5);
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBaseD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=9440;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{var $5=$3;label=2;break;}
 case 2: 
 var $5;
 var $6=(($5+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 __ZdlPv($8);
 HEAP32[(($2)>>2)]=$7;
 var $9=($7|0)==0;
 if($9){label=3;break;}else{var $5=$7;label=2;break;}
 case 3: 
 var $10=(($this+4)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($this+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($this+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($12|0)==($14|0);
 if($15){var $37=$12;var $36=$12;label=9;break;}else{var $i_0_i15=0;var $21=$14;var $20=$12;label=6;break;}
 case 4: 
 var $16=($28|0)==($29|0);
 if($16){var $37=$29;var $36=$28;label=9;break;}else{label=5;break;}
 case 5: 
 var $_lcssa1422=$28;
 var $scevgep=((($29)-(4))|0);
 var $scevgep21=$scevgep;
 var $17=(((-$_lcssa1422))|0);
 var $uglygep=(($scevgep21+$17)|0);
 var $uglygep23=$uglygep;
 var $18=$uglygep23>>>2;
 var $19=$18^-1;
 var $scevgep24=(($29+($19<<2))|0);
 HEAP32[(($11)>>2)]=$scevgep24;
 var $37=$scevgep24;var $36=$28;label=9;break;
 case 6: 
 var $20;
 var $21;
 var $i_0_i15;
 var $22=(($21+($i_0_i15<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){var $29=$20;var $28=$21;label=8;break;}else{label=7;break;}
 case 7: 
 var $26=$23;
 __ZdaPv($26);
 var $_pre=HEAP32[(($11)>>2)];
 var $_pre25=HEAP32[(($13)>>2)];
 var $29=$_pre;var $28=$_pre25;label=8;break;
 case 8: 
 var $28;
 var $29;
 var $30=((($i_0_i15)+(1))|0);
 var $31=$29;
 var $32=$28;
 var $33=((($31)-($32))|0);
 var $34=$33>>2;
 var $35=($30>>>0)<($34>>>0);
 if($35){var $i_0_i15=$30;var $21=$28;var $20=$29;label=6;break;}else{label=4;break;}
 case 9: 
 var $36;
 var $37;
 var $38=(($this+12)|0);
 HEAP8[($38)]=0;
 var $39=$36;
 var $40=($36|0)==0;
 if($40){label=13;break;}else{label=10;break;}
 case 10: 
 var $41=($36|0)==($37|0);
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i_i_i=((($37)-(4))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $42=(((-$39))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$42)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $43=$uglygep29_i_i_i>>>2;
 var $44=$43^-1;
 var $scevgep30_i_i_i=(($37+($44<<2))|0);
 HEAP32[(($11)>>2)]=$scevgep30_i_i_i;
 label=12;break;
 case 12: 
 var $45=$36;
 __ZdlPv($45);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($this,$pg,$polyType){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(sp)+(96);
 var $8=(sp)+(112);
 var $9=(sp)+(128);
 var $10=(sp)+(144);
 var $11=(sp)+(160);
 var $12=(sp)+(176);
 var $13=(sp)+(192);
 var $14=(sp)+(208);
 var $15=(sp)+(224);
 var $16=(sp)+(240);
 var $17=(sp)+(256);
 var $18=(sp)+(272);
 var $19=(sp)+(288);
 var $20=(sp)+(304);
 var $21=(sp)+(320);
 var $22=(sp)+(336);
 var $23=(sp)+(352);
 var $24=(sp)+(368);
 var $p=(sp)+(384);
 var $edges=(sp)+(400);
 var $25=(($pg+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($pg)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>4;
 var $33=($31|0)<48;
 if($33){var $_1=0;label=125;break;}else{label=2;break;}
 case 2: 
 var $35=(($p)|0);
 HEAP32[(($35)>>2)]=0;
 var $36=(($p+4)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=(($p+8)|0);
 HEAP32[(($37)>>2)]=0;
 var $38=($32|0)==0;
 if($38){label=3;break;}else{label=4;break;}
 case 3: 
 var $39=$28;
 assert(16 % 1 === 0);HEAP32[((0)>>2)]=HEAP32[(($39)>>2)];HEAP32[((4)>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((8)>>2)]=HEAP32[((($39)+(8))>>2)];HEAP32[((12)>>2)]=HEAP32[((($39)+(12))>>2)];
 var $71=$28;var $70=0;label=17;break;
 case 4: 
 var $41=($32>>>0)>268435455;
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$p;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $44=(function() { try { __THREW__ = 0; return __Znwj($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 var $46=$44;
 HEAP32[(($36)>>2)]=$46;
 HEAP32[(($35)>>2)]=$46;
 var $47=(($46+($32<<4))|0);
 HEAP32[(($37)>>2)]=$47;
 var $_0_i_i_i=$32;var $49=$46;label=8;break;
 case 8: 
 var $49;
 var $_0_i_i_i;
 var $50=($49|0)==0;
 if($50){var $53=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $52=$49;
 HEAP32[(($52)>>2)]=0; HEAP32[((($52)+(4))>>2)]=0; HEAP32[((($52)+(8))>>2)]=0; HEAP32[((($52)+(12))>>2)]=0;
 var $53=$49;label=10;break;
 case 10: 
 var $53;
 var $54=(($53+16)|0);
 var $55=((($_0_i_i_i)-(1))|0);
 var $56=($55|0)==0;
 if($56){label=16;break;}else{var $_0_i_i_i=$55;var $49=$54;label=8;break;}
 case 11: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1); var $58$1 = tempRet0;
 var $59=HEAP32[(($35)>>2)];
 var $60=$59;
 var $61=($59|0)==0;
 if($61){label=15;break;}else{label=12;break;}
 case 12: 
 var $62=HEAP32[(($36)>>2)];
 var $63=($59|0)==($62|0);
 if($63){label=14;break;}else{label=13;break;}
 case 13: 
 var $scevgep_i_i_i=((($62)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $64=(((-$60))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$64)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $65=$uglygep29_i_i_i>>>4;
 var $66=$65^-1;
 var $scevgep30_i_i_i=(($62+($66<<4))|0);
 HEAP32[(($36)>>2)]=$scevgep30_i_i_i;
 label=14;break;
 case 14: 
 var $67=$59;
 __ZdlPv($67);
 label=15;break;
 case 15: 
 ___resumeException($58$0)
 case 16: 
 HEAP32[(($36)>>2)]=$54;
 var $_pre=HEAP32[(($27)>>2)];
 var $68=$_pre;
 assert(16 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($68)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($68)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($68)+(8))>>2)];HEAP32[((($44)+(12))>>2)]=HEAP32[((($68)+(12))>>2)];
 var $69=($31|0)>0;
 if($69){var $71=$_pre;var $70=$46;label=17;break;}else{var $_0=0;label=121;break;}
 case 17: 
 var $70;
 var $71;
 var $72=(($this+12)|0);
 var $73=HEAP8[($72)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=1073741823;
 var $$etemp$0$0=1073741823;
 var $$etemp$0$1=0;
 var $_$0=$75?$$etemp$0$0:$$etemp$1$0;
 var $_$1=$75?$$etemp$0$1:$$etemp$1$1;
 var $76=$19;
 var $77=$20;
 var $78=$21;
 var $79=$22;
 var $80=$23;
 var $81=$24;
 var $82=(($19+8)|0);
 var $83=(($19)|0);
 var $84=(($20+8)|0);
 var $85=(($20)|0);
 var $86=(($23+8)|0);
 var $87=(($23)|0);
 var $88=(($24+8)|0);
 var $89=(($24)|0);
 var $90=(($21)|0);
 var $91=(($22)|0);
 var $92=(($21+8)|0);
 var $93=(($22+8)|0);
 var $j_0350=0;var $maxVal_1352$1=$_$1;var $maxVal_1352$0=$_$0;var $i_0353=0;var $105=$70;var $104=$71;label=26;break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=22;break;
 case 19: 
 var $lpad_loopexit333$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit333$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit333$1;var $lpad_phi$0=$lpad_loopexit333$0;label=22;break;
 case 20: 
 var $lpad_loopexit346$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit346$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit346$1;var $lpad_phi$0=$lpad_loopexit346$0;label=22;break;
 case 21: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=22;break;
 case 22: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $94=HEAP32[(($35)>>2)];
 var $95=$94;
 var $96=($94|0)==0;
 if($96){label=126;break;}else{label=23;break;}
 case 23: 
 var $97=HEAP32[(($36)>>2)];
 var $98=($94|0)==($97|0);
 if($98){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i170=((($97)-(16))|0);
 var $scevgep28_i_i_i171=$scevgep_i_i_i170;
 var $99=(((-$95))|0);
 var $uglygep_i_i_i172=(($scevgep28_i_i_i171+$99)|0);
 var $uglygep29_i_i_i173=$uglygep_i_i_i172;
 var $100=$uglygep29_i_i_i173>>>4;
 var $101=$100^-1;
 var $scevgep30_i_i_i174=(($97+($101<<4))|0);
 HEAP32[(($36)>>2)]=$scevgep30_i_i_i174;
 label=25;break;
 case 25: 
 var $102=$94;
 __ZdlPv($102);
 label=126;break;
 case 26: 
 var $104;
 var $105;
 var $i_0353;
 var $maxVal_1352$0;
 var $maxVal_1352$1;
 var $j_0350;
 var $106=(($104+($i_0353<<4))|0);
 var $ld$2$0=(($106)|0);
 var $107$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($106+4)|0);
 var $107$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $108=(($107$1|0) < ($$etemp$4$1|0)) | (((($107$1|0) == ($$etemp$4$1|0) & ($107$0>>>0) <  ($$etemp$4$0>>>0))));
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $109$0=_i64Subtract($$etemp$5$0,$$etemp$5$1,$107$0,$107$1);var $109$1=tempRet0;
 var $110$0=$108?$109$0:$107$0;
 var $110$1=$108?$109$1:$107$1;
 var $111=(($110$1|0) > ($maxVal_1352$1|0)) | (((($110$1|0) == ($maxVal_1352$1|0) & ($110$0>>>0) >  ($maxVal_1352$0>>>0))));
 if($111){label=28;break;}else{label=27;break;}
 case 27: 
 var $113=(($104+($i_0353<<4)+8)|0);
 var $ld$6$0=(($113)|0);
 var $114$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($113+4)|0);
 var $114$1=HEAP32[(($ld$7$1)>>2)];
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $115=(($114$1|0) < ($$etemp$8$1|0)) | (((($114$1|0) == ($$etemp$8$1|0) & ($114$0>>>0) <  ($$etemp$8$0>>>0))));
 var $$etemp$9$0=0;
 var $$etemp$9$1=0;
 var $116$0=_i64Subtract($$etemp$9$0,$$etemp$9$1,$114$0,$114$1);var $116$1=tempRet0;
 var $117$0=$115?$116$0:$114$0;
 var $117$1=$115?$116$1:$114$1;
 var $118=(($117$1|0) > ($maxVal_1352$1|0)) | (((($117$1|0) == ($maxVal_1352$1|0) & ($117$0>>>0) >  ($maxVal_1352$0>>>0))));
 if($118){label=28;break;}else{var $maxVal_2$1=$maxVal_1352$1;var $maxVal_2$0=$maxVal_1352$0;label=32;break;}
 case 28: 
 var $$etemp$10$0=-1;
 var $$etemp$10$1=1073741823;
 var $120=(($110$1|0) > ($$etemp$10$1|0)) | (((($110$1|0) == ($$etemp$10$1|0) & ($110$0>>>0) >  ($$etemp$10$0>>>0))));
 if($120){label=30;break;}else{label=29;break;}
 case 29: 
 var $122=(($104+($i_0353<<4)+8)|0);
 var $ld$11$0=(($122)|0);
 var $123$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($122+4)|0);
 var $123$1=HEAP32[(($ld$12$1)>>2)];
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $124=(($123$1|0) < ($$etemp$13$1|0)) | (((($123$1|0) == ($$etemp$13$1|0) & ($123$0>>>0) <  ($$etemp$13$0>>>0))));
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $125$0=_i64Subtract($$etemp$14$0,$$etemp$14$1,$123$0,$123$1);var $125$1=tempRet0;
 var $126$0=$124?$125$0:$123$0;
 var $126$1=$124?$125$1:$123$1;
 var $$etemp$15$0=-1;
 var $$etemp$15$1=1073741823;
 var $127=(($126$1|0) > ($$etemp$15$1|0)) | (((($126$1|0) == ($$etemp$15$1|0) & ($126$0>>>0) >  ($$etemp$15$0>>>0))));
 if($127){label=30;break;}else{label=31;break;}
 case 30: 
 var $129=___cxa_allocate_exception(4);
 var $130=$129;
 HEAP32[(($130)>>2)]=4608;
 (function() { try { __THREW__ = 0; return ___cxa_throw($129,12808,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=21;break; }
 case 31: 
 HEAP8[($72)]=1;
 var $maxVal_2$1=1073741823;var $maxVal_2$0=-1;label=32;break;
 case 32: 
 var $maxVal_2$0;
 var $maxVal_2$1;
 var $133=($i_0353|0)==0;
 if($133){var $j_2=$j_0350;var $194=$105;label=47;break;}else{label=33;break;}
 case 33: 
 var $135=HEAP32[(($27)>>2)];
 var $136=(($105+($j_0350<<4))|0);
 var $ld$16$0=(($136)|0);
 var $137$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($136+4)|0);
 var $137$1=HEAP32[(($ld$17$1)>>2)];
 var $138=(($135+($i_0353<<4))|0);
 var $ld$18$0=(($138)|0);
 var $139$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($138+4)|0);
 var $139$1=HEAP32[(($ld$19$1)>>2)];
 var $140=(($137$0|0) == ($139$0|0)) & (($137$1|0) == ($139$1|0));
 if($140){label=34;break;}else{label=35;break;}
 case 34: 
 var $141=(($105+($j_0350<<4)+8)|0);
 var $ld$20$0=(($141)|0);
 var $142$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($141+4)|0);
 var $142$1=HEAP32[(($ld$21$1)>>2)];
 var $143=(($135+($i_0353<<4)+8)|0);
 var $ld$22$0=(($143)|0);
 var $144$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($143+4)|0);
 var $144$1=HEAP32[(($ld$23$1)>>2)];
 var $145=(($142$0|0) == ($144$0|0)) & (($142$1|0) == ($144$1|0));
 if($145){var $j_2=$j_0350;var $194=$105;label=47;break;}else{label=35;break;}
 case 35: 
 var $146=($j_0350|0)>0;
 if($146){label=36;break;}else{label=45;break;}
 case 36: 
 var $148=((($j_0350)-(1))|0);
 var $_sroa_0241_0__idx=(($105+($148<<4))|0);
 var $ld$24$0=(($_sroa_0241_0__idx)|0);
 var $_sroa_0241_0_copyload$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($_sroa_0241_0__idx+4)|0);
 var $_sroa_0241_0_copyload$1=HEAP32[(($ld$25$1)>>2)];
 var $_sroa_1242_8__idx243=(($105+($148<<4)+8)|0);
 var $ld$26$0=(($_sroa_1242_8__idx243)|0);
 var $_sroa_1242_8_copyload$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($_sroa_1242_8__idx243+4)|0);
 var $_sroa_1242_8_copyload$1=HEAP32[(($ld$27$1)>>2)];
 var $_sroa_1249_8__idx250=(($105+($j_0350<<4)+8)|0);
 var $ld$28$0=(($_sroa_1249_8__idx250)|0);
 var $_sroa_1249_8_copyload$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($_sroa_1249_8__idx250+4)|0);
 var $_sroa_1249_8_copyload$1=HEAP32[(($ld$29$1)>>2)];
 var $_sroa_1257_8__idx258=(($135+($i_0353<<4)+8)|0);
 var $ld$30$0=(($_sroa_1257_8__idx258)|0);
 var $_sroa_1257_8_copyload$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($_sroa_1257_8__idx258+4)|0);
 var $_sroa_1257_8_copyload$1=HEAP32[(($ld$31$1)>>2)];
 var $149=HEAP8[($72)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 var $152$0=_i64Subtract($_sroa_1242_8_copyload$0,$_sroa_1242_8_copyload$1,$_sroa_1249_8_copyload$0,$_sroa_1249_8_copyload$1);var $152$1=tempRet0;
 if($151){label=41;break;}else{label=37;break;}
 case 37: 
 var $st$32$0=(($82)|0);
 HEAP32[(($st$32$0)>>2)]=$152$0;
 var $st$33$1=(($82+4)|0);
 HEAP32[(($st$33$1)>>2)]=$152$1;
 var $_lo_lobit_i_i_i$0=($152$1>>31)|(((((($152$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($152$1|0)<0))|0)?-1:0)>>31)|(((((($152$1|0)<0))|0)?-1:0)<<1);
 var $st$34$0=(($83)|0);
 HEAP32[(($st$34$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$35$1=(($83+4)|0);
 HEAP32[(($st$35$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $154$0=_i64Subtract($137$0,$137$1,$139$0,$139$1);var $154$1=tempRet0;
 var $st$36$0=(($84)|0);
 HEAP32[(($st$36$0)>>2)]=$154$0;
 var $st$37$1=(($84+4)|0);
 HEAP32[(($st$37$1)>>2)]=$154$1;
 var $_lo_lobit_i_i2_i$0=($154$1>>31)|(((((($154$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i$1=(((((($154$1|0)<0))|0)?-1:0)>>31)|(((((($154$1|0)<0))|0)?-1:0)<<1);
 var $st$38$0=(($85)|0);
 HEAP32[(($st$38$0)>>2)]=$_lo_lobit_i_i2_i$0;
 var $st$39$1=(($85+4)|0);
 HEAP32[(($st$39$1)>>2)]=$_lo_lobit_i_i2_i$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($21,$19,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=20;break; }
 case 38: 
 var $155$0=_i64Subtract($_sroa_0241_0_copyload$0,$_sroa_0241_0_copyload$1,$137$0,$137$1);var $155$1=tempRet0;
 var $st$40$0=(($86)|0);
 HEAP32[(($st$40$0)>>2)]=$155$0;
 var $st$41$1=(($86+4)|0);
 HEAP32[(($st$41$1)>>2)]=$155$1;
 var $_lo_lobit_i_i4_i$0=($155$1>>31)|(((((($155$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i4_i$1=(((((($155$1|0)<0))|0)?-1:0)>>31)|(((((($155$1|0)<0))|0)?-1:0)<<1);
 var $st$42$0=(($87)|0);
 HEAP32[(($st$42$0)>>2)]=$_lo_lobit_i_i4_i$0;
 var $st$43$1=(($87+4)|0);
 HEAP32[(($st$43$1)>>2)]=$_lo_lobit_i_i4_i$1;
 var $156$0=_i64Subtract($_sroa_1249_8_copyload$0,$_sroa_1249_8_copyload$1,$_sroa_1257_8_copyload$0,$_sroa_1257_8_copyload$1);var $156$1=tempRet0;
 var $st$44$0=(($88)|0);
 HEAP32[(($st$44$0)>>2)]=$156$0;
 var $st$45$1=(($88+4)|0);
 HEAP32[(($st$45$1)>>2)]=$156$1;
 var $_lo_lobit_i_i3_i$0=($156$1>>31)|(((((($156$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i$1=(((((($156$1|0)<0))|0)?-1:0)>>31)|(((((($156$1|0)<0))|0)?-1:0)<<1);
 var $st$46$0=(($89)|0);
 HEAP32[(($st$46$0)>>2)]=$_lo_lobit_i_i3_i$0;
 var $st$47$1=(($89+4)|0);
 HEAP32[(($st$47$1)>>2)]=$_lo_lobit_i_i3_i$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($22,$23,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=20;break; }
 case 39: 
 var $ld$48$0=(($90)|0);
 var $157$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($90+4)|0);
 var $157$1=HEAP32[(($ld$49$1)>>2)];
 var $ld$50$0=(($91)|0);
 var $158$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($91+4)|0);
 var $158$1=HEAP32[(($ld$51$1)>>2)];
 var $159=(($157$0|0) == ($158$0|0)) & (($157$1|0) == ($158$1|0));
 if($159){label=40;break;}else{label=45;break;}
 case 40: 
 var $ld$52$0=(($92)|0);
 var $161$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($92+4)|0);
 var $161$1=HEAP32[(($ld$53$1)>>2)];
 var $ld$54$0=(($93)|0);
 var $162$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($93+4)|0);
 var $162$1=HEAP32[(($ld$55$1)>>2)];
 var $163=(($161$0|0) == ($162$0|0)) & (($161$1|0) == ($162$1|0));
 var $_0_i=$163;label=42;break;
 case 41: 
 var $165$0=_i64Subtract($137$0,$137$1,$139$0,$139$1);var $165$1=tempRet0;
 var $166$0=___muldi3($165$0,$165$1,$152$0,$152$1);var $166$1=tempRet0;
 var $167$0=_i64Subtract($_sroa_0241_0_copyload$0,$_sroa_0241_0_copyload$1,$137$0,$137$1);var $167$1=tempRet0;
 var $168$0=_i64Subtract($_sroa_1249_8_copyload$0,$_sroa_1249_8_copyload$1,$_sroa_1257_8_copyload$0,$_sroa_1257_8_copyload$1);var $168$1=tempRet0;
 var $169$0=___muldi3($168$0,$168$1,$167$0,$167$1);var $169$1=tempRet0;
 var $170=(($166$0|0) == ($169$0|0)) & (($166$1|0) == ($169$1|0));
 var $_0_i=$170;label=42;break;
 case 42: 
 var $_0_i;
 if($_0_i){label=43;break;}else{label=45;break;}
 case 43: 
 var $173=HEAP32[(($35)>>2)];
 var $174=HEAP32[(($27)>>2)];
 var $175=(($173+($148<<4))|0);
 var $ld$56$0=(($175)|0);
 var $176$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($175+4)|0);
 var $176$1=HEAP32[(($ld$57$1)>>2)];
 var $177=(($174+($i_0353<<4))|0);
 var $ld$58$0=(($177)|0);
 var $178$0=HEAP32[(($ld$58$0)>>2)];
 var $ld$59$1=(($177+4)|0);
 var $178$1=HEAP32[(($ld$59$1)>>2)];
 var $179=(($176$0|0) == ($178$0|0)) & (($176$1|0) == ($178$1|0));
 if($179){label=44;break;}else{var $j_1=$j_0350;var $188=$173;var $187=$174;label=46;break;}
 case 44: 
 var $181=(($173+($148<<4)+8)|0);
 var $ld$60$0=(($181)|0);
 var $182$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($181+4)|0);
 var $182$1=HEAP32[(($ld$61$1)>>2)];
 var $183=(($174+($i_0353<<4)+8)|0);
 var $ld$62$0=(($183)|0);
 var $184$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($183+4)|0);
 var $184$1=HEAP32[(($ld$63$1)>>2)];
 var $185=(($182$0|0) == ($184$0|0)) & (($182$1|0) == ($184$1|0));
 var $phitmp=$185?$148:$j_0350;
 var $j_1=$phitmp;var $188=$173;var $187=$174;label=46;break;
 case 45: 
 var $186=((($j_0350)+(1))|0);
 var $_pre365=HEAP32[(($35)>>2)];
 var $_pre366=HEAP32[(($27)>>2)];
 var $j_1=$186;var $188=$_pre365;var $187=$_pre366;label=46;break;
 case 46: 
 var $187;
 var $188;
 var $j_1;
 var $189=(($188+($j_1<<4))|0);
 var $190=(($187+($i_0353<<4))|0);
 var $191=$189;
 var $192=$190;
 assert(16 % 1 === 0);HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($191)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];HEAP32[((($191)+(8))>>2)]=HEAP32[((($192)+(8))>>2)];HEAP32[((($191)+(12))>>2)]=HEAP32[((($192)+(12))>>2)];
 var $j_2=$j_1;var $194=$188;label=47;break;
 case 47: 
 var $194;
 var $j_2;
 var $195=((($i_0353)+(1))|0);
 var $196=($195|0)<($32|0);
 if($196){label=48;break;}else{label=49;break;}
 case 48: 
 var $_pre383=HEAP32[(($27)>>2)];
 var $j_0350=$j_2;var $maxVal_1352$1=$maxVal_2$1;var $maxVal_1352$0=$maxVal_2$0;var $i_0353=$195;var $105=$194;var $104=$_pre383;label=26;break;
 case 49: 
 var $197=($j_2|0)<2;
 if($197){var $_0=0;label=121;break;}else{label=50;break;}
 case 50: 
 var $199=((($j_2)+(1))|0);
 var $200=($199|0)>2;
 if($200){label=51;break;}else{var $_0=0;label=121;break;}
 case 51: 
 var $201=$7;
 var $202=$8;
 var $203=$9;
 var $204=$10;
 var $205=$11;
 var $206=$12;
 var $207=$1;
 var $208=$2;
 var $209=$3;
 var $210=$4;
 var $211=$5;
 var $212=$6;
 var $213=$13;
 var $214=$14;
 var $215=$15;
 var $216=$16;
 var $217=$17;
 var $218=$18;
 var $219=(($13+8)|0);
 var $220=(($13)|0);
 var $221=(($14+8)|0);
 var $222=(($14)|0);
 var $223=(($17+8)|0);
 var $224=(($17)|0);
 var $225=(($18+8)|0);
 var $226=(($18)|0);
 var $227=(($15)|0);
 var $228=(($16)|0);
 var $229=(($15+8)|0);
 var $230=(($16+8)|0);
 var $231=(($1+8)|0);
 var $232=(($1)|0);
 var $233=(($2+8)|0);
 var $234=(($2)|0);
 var $235=(($5+8)|0);
 var $236=(($5)|0);
 var $237=(($6+8)|0);
 var $238=(($6)|0);
 var $239=(($3)|0);
 var $240=(($4)|0);
 var $241=(($3+8)|0);
 var $242=(($4+8)|0);
 var $243=(($7+8)|0);
 var $244=(($7)|0);
 var $245=(($8+8)|0);
 var $246=(($8)|0);
 var $247=(($11+8)|0);
 var $248=(($11)|0);
 var $249=(($12+8)|0);
 var $250=(($12)|0);
 var $251=(($9)|0);
 var $252=(($10)|0);
 var $253=(($9+8)|0);
 var $254=(($10+8)|0);
 var $len_0338=$199;var $j_3341=$j_2;var $256=$194;label=52;break;
 case 52: 
 var $256;
 var $j_3341;
 var $len_0338;
 var $257=(($256+($j_3341<<4))|0);
 var $ld$64$0=(($257)|0);
 var $258$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($257+4)|0);
 var $258$1=HEAP32[(($ld$65$1)>>2)];
 var $259=(($256)|0);
 var $ld$66$0=(($259)|0);
 var $260$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($259+4)|0);
 var $260$1=HEAP32[(($ld$67$1)>>2)];
 var $261=(($258$0|0) == ($260$0|0)) & (($258$1|0) == ($260$1|0));
 if($261){label=53;break;}else{label=54;break;}
 case 53: 
 var $262=(($256+($j_3341<<4)+8)|0);
 var $ld$68$0=(($262)|0);
 var $263$0=HEAP32[(($ld$68$0)>>2)];
 var $ld$69$1=(($262+4)|0);
 var $263$1=HEAP32[(($ld$69$1)>>2)];
 var $264=(($256+8)|0);
 var $ld$70$0=(($264)|0);
 var $265$0=HEAP32[(($ld$70$0)>>2)];
 var $ld$71$1=(($264+4)|0);
 var $265$1=HEAP32[(($ld$71$1)>>2)];
 var $266=(($263$0|0) == ($265$0|0)) & (($263$1|0) == ($265$1|0));
 if($266){label=81;break;}else{label=54;break;}
 case 54: 
 var $267=(($256+16)|0);
 var $ld$72$0=(($267)|0);
 var $268$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($267+4)|0);
 var $268$1=HEAP32[(($ld$73$1)>>2)];
 var $269=(($260$0|0) == ($268$0|0)) & (($260$1|0) == ($268$1|0));
 var $270=(($256+8)|0);
 var $ld$74$0=(($270)|0);
 var $271$0=HEAP32[(($ld$74$0)>>2)];
 var $ld$75$1=(($270+4)|0);
 var $271$1=HEAP32[(($ld$75$1)>>2)];
 var $272=(($256+24)|0);
 var $ld$76$0=(($272)|0);
 var $273$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($272+4)|0);
 var $273$1=HEAP32[(($ld$77$1)>>2)];
 var $274=(($271$0|0) == ($273$0|0)) & (($271$1|0) == ($273$1|0));
 var $or_cond384=$269&$274;
 if($or_cond384){var $299=$256;label=63;break;}else{label=55;break;}
 case 55: 
 var $_sroa_1286_8__idx287=(($256+($j_3341<<4)+8)|0);
 var $ld$78$0=(($_sroa_1286_8__idx287)|0);
 var $_sroa_1286_8_copyload$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($_sroa_1286_8__idx287+4)|0);
 var $_sroa_1286_8_copyload$1=HEAP32[(($ld$79$1)>>2)];
 var $275=HEAP8[($72)];
 var $276=$275&1;
 var $277=(($276<<24)>>24)==0;
 var $278$0=_i64Subtract($_sroa_1286_8_copyload$0,$_sroa_1286_8_copyload$1,$271$0,$271$1);var $278$1=tempRet0;
 if($277){label=60;break;}else{label=56;break;}
 case 56: 
 var $st$80$0=(($243)|0);
 HEAP32[(($st$80$0)>>2)]=$278$0;
 var $st$81$1=(($243+4)|0);
 HEAP32[(($st$81$1)>>2)]=$278$1;
 var $_lo_lobit_i_i_i217$0=($278$1>>31)|(((((($278$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i217$1=(((((($278$1|0)<0))|0)?-1:0)>>31)|(((((($278$1|0)<0))|0)?-1:0)<<1);
 var $st$82$0=(($244)|0);
 HEAP32[(($st$82$0)>>2)]=$_lo_lobit_i_i_i217$0;
 var $st$83$1=(($244+4)|0);
 HEAP32[(($st$83$1)>>2)]=$_lo_lobit_i_i_i217$1;
 var $280$0=_i64Subtract($260$0,$260$1,$268$0,$268$1);var $280$1=tempRet0;
 var $st$84$0=(($245)|0);
 HEAP32[(($st$84$0)>>2)]=$280$0;
 var $st$85$1=(($245+4)|0);
 HEAP32[(($st$85$1)>>2)]=$280$1;
 var $_lo_lobit_i_i2_i218$0=($280$1>>31)|(((((($280$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i218$1=(((((($280$1|0)<0))|0)?-1:0)>>31)|(((((($280$1|0)<0))|0)?-1:0)<<1);
 var $st$86$0=(($246)|0);
 HEAP32[(($st$86$0)>>2)]=$_lo_lobit_i_i2_i218$0;
 var $st$87$1=(($246+4)|0);
 HEAP32[(($st$87$1)>>2)]=$_lo_lobit_i_i2_i218$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($9,$7,$8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=19;break; }
 case 57: 
 var $281$0=_i64Subtract($258$0,$258$1,$260$0,$260$1);var $281$1=tempRet0;
 var $st$88$0=(($247)|0);
 HEAP32[(($st$88$0)>>2)]=$281$0;
 var $st$89$1=(($247+4)|0);
 HEAP32[(($st$89$1)>>2)]=$281$1;
 var $_lo_lobit_i_i4_i219$0=($281$1>>31)|(((((($281$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i4_i219$1=(((((($281$1|0)<0))|0)?-1:0)>>31)|(((((($281$1|0)<0))|0)?-1:0)<<1);
 var $st$90$0=(($248)|0);
 HEAP32[(($st$90$0)>>2)]=$_lo_lobit_i_i4_i219$0;
 var $st$91$1=(($248+4)|0);
 HEAP32[(($st$91$1)>>2)]=$_lo_lobit_i_i4_i219$1;
 var $282$0=_i64Subtract($271$0,$271$1,$273$0,$273$1);var $282$1=tempRet0;
 var $st$92$0=(($249)|0);
 HEAP32[(($st$92$0)>>2)]=$282$0;
 var $st$93$1=(($249+4)|0);
 HEAP32[(($st$93$1)>>2)]=$282$1;
 var $_lo_lobit_i_i3_i220$0=($282$1>>31)|(((((($282$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i220$1=(((((($282$1|0)<0))|0)?-1:0)>>31)|(((((($282$1|0)<0))|0)?-1:0)<<1);
 var $st$94$0=(($250)|0);
 HEAP32[(($st$94$0)>>2)]=$_lo_lobit_i_i3_i220$0;
 var $st$95$1=(($250+4)|0);
 HEAP32[(($st$95$1)>>2)]=$_lo_lobit_i_i3_i220$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($10,$11,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=19;break; }
 case 58: 
 var $ld$96$0=(($251)|0);
 var $283$0=HEAP32[(($ld$96$0)>>2)];
 var $ld$97$1=(($251+4)|0);
 var $283$1=HEAP32[(($ld$97$1)>>2)];
 var $ld$98$0=(($252)|0);
 var $284$0=HEAP32[(($ld$98$0)>>2)];
 var $ld$99$1=(($252+4)|0);
 var $284$1=HEAP32[(($ld$99$1)>>2)];
 var $285=(($283$0|0) == ($284$0|0)) & (($283$1|0) == ($284$1|0));
 if($285){label=59;break;}else{label=64;break;}
 case 59: 
 var $ld$100$0=(($253)|0);
 var $287$0=HEAP32[(($ld$100$0)>>2)];
 var $ld$101$1=(($253+4)|0);
 var $287$1=HEAP32[(($ld$101$1)>>2)];
 var $ld$102$0=(($254)|0);
 var $288$0=HEAP32[(($ld$102$0)>>2)];
 var $ld$103$1=(($254+4)|0);
 var $288$1=HEAP32[(($ld$103$1)>>2)];
 var $289=(($287$0|0) == ($288$0|0)) & (($287$1|0) == ($288$1|0));
 var $_0_i221=$289;label=61;break;
 case 60: 
 var $291$0=_i64Subtract($260$0,$260$1,$268$0,$268$1);var $291$1=tempRet0;
 var $292$0=___muldi3($291$0,$291$1,$278$0,$278$1);var $292$1=tempRet0;
 var $293$0=_i64Subtract($258$0,$258$1,$260$0,$260$1);var $293$1=tempRet0;
 var $294$0=_i64Subtract($271$0,$271$1,$273$0,$273$1);var $294$1=tempRet0;
 var $295$0=___muldi3($294$0,$294$1,$293$0,$293$1);var $295$1=tempRet0;
 var $296=(($292$0|0) == ($295$0|0)) & (($292$1|0) == ($295$1|0));
 var $_0_i221=$296;label=61;break;
 case 61: 
 var $_0_i221;
 if($_0_i221){label=62;break;}else{label=64;break;}
 case 62: 
 var $_pre372=HEAP32[(($35)>>2)];
 var $299=$_pre372;label=63;break;
 case 63: 
 var $299;
 var $300=(($299+($j_3341<<4))|0);
 var $301=$299;
 var $302=$300;
 assert(16 % 1 === 0);HEAP32[(($301)>>2)]=HEAP32[(($302)>>2)];HEAP32[((($301)+(4))>>2)]=HEAP32[((($302)+(4))>>2)];HEAP32[((($301)+(8))>>2)]=HEAP32[((($302)+(8))>>2)];HEAP32[((($301)+(12))>>2)]=HEAP32[((($302)+(12))>>2)];
 label=81;break;
 case 64: 
 var $303=((($j_3341)-(1))|0);
 var $304=HEAP32[(($35)>>2)];
 var $_sroa_0307_0__idx=(($304+($303<<4))|0);
 var $ld$104$0=(($_sroa_0307_0__idx)|0);
 var $_sroa_0307_0_copyload$0=HEAP32[(($ld$104$0)>>2)];
 var $ld$105$1=(($_sroa_0307_0__idx+4)|0);
 var $_sroa_0307_0_copyload$1=HEAP32[(($ld$105$1)>>2)];
 var $_sroa_1308_8__idx309=(($304+($303<<4)+8)|0);
 var $ld$106$0=(($_sroa_1308_8__idx309)|0);
 var $_sroa_1308_8_copyload$0=HEAP32[(($ld$106$0)>>2)];
 var $ld$107$1=(($_sroa_1308_8__idx309+4)|0);
 var $_sroa_1308_8_copyload$1=HEAP32[(($ld$107$1)>>2)];
 var $_sroa_0314_0__idx=(($304+($j_3341<<4))|0);
 var $ld$108$0=(($_sroa_0314_0__idx)|0);
 var $_sroa_0314_0_copyload$0=HEAP32[(($ld$108$0)>>2)];
 var $ld$109$1=(($_sroa_0314_0__idx+4)|0);
 var $_sroa_0314_0_copyload$1=HEAP32[(($ld$109$1)>>2)];
 var $_sroa_1315_8__idx316=(($304+($j_3341<<4)+8)|0);
 var $ld$110$0=(($_sroa_1315_8__idx316)|0);
 var $_sroa_1315_8_copyload$0=HEAP32[(($ld$110$0)>>2)];
 var $ld$111$1=(($_sroa_1315_8__idx316+4)|0);
 var $_sroa_1315_8_copyload$1=HEAP32[(($ld$111$1)>>2)];
 var $_sroa_0322_0__idx=(($304)|0);
 var $ld$112$0=(($_sroa_0322_0__idx)|0);
 var $_sroa_0322_0_copyload$0=HEAP32[(($ld$112$0)>>2)];
 var $ld$113$1=(($_sroa_0322_0__idx+4)|0);
 var $_sroa_0322_0_copyload$1=HEAP32[(($ld$113$1)>>2)];
 var $_sroa_1323_8__idx324=(($304+8)|0);
 var $ld$114$0=(($_sroa_1323_8__idx324)|0);
 var $_sroa_1323_8_copyload$0=HEAP32[(($ld$114$0)>>2)];
 var $ld$115$1=(($_sroa_1323_8__idx324+4)|0);
 var $_sroa_1323_8_copyload$1=HEAP32[(($ld$115$1)>>2)];
 var $305=HEAP8[($72)];
 var $306=$305&1;
 var $307=(($306<<24)>>24)==0;
 var $308$0=_i64Subtract($_sroa_1308_8_copyload$0,$_sroa_1308_8_copyload$1,$_sroa_1315_8_copyload$0,$_sroa_1315_8_copyload$1);var $308$1=tempRet0;
 if($307){label=69;break;}else{label=65;break;}
 case 65: 
 var $st$116$0=(($231)|0);
 HEAP32[(($st$116$0)>>2)]=$308$0;
 var $st$117$1=(($231+4)|0);
 HEAP32[(($st$117$1)>>2)]=$308$1;
 var $_lo_lobit_i_i_i231$0=($308$1>>31)|(((((($308$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i231$1=(((((($308$1|0)<0))|0)?-1:0)>>31)|(((((($308$1|0)<0))|0)?-1:0)<<1);
 var $st$118$0=(($232)|0);
 HEAP32[(($st$118$0)>>2)]=$_lo_lobit_i_i_i231$0;
 var $st$119$1=(($232+4)|0);
 HEAP32[(($st$119$1)>>2)]=$_lo_lobit_i_i_i231$1;
 var $310$0=_i64Subtract($_sroa_0314_0_copyload$0,$_sroa_0314_0_copyload$1,$_sroa_0322_0_copyload$0,$_sroa_0322_0_copyload$1);var $310$1=tempRet0;
 var $st$120$0=(($233)|0);
 HEAP32[(($st$120$0)>>2)]=$310$0;
 var $st$121$1=(($233+4)|0);
 HEAP32[(($st$121$1)>>2)]=$310$1;
 var $_lo_lobit_i_i2_i232$0=($310$1>>31)|(((((($310$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i232$1=(((((($310$1|0)<0))|0)?-1:0)>>31)|(((((($310$1|0)<0))|0)?-1:0)<<1);
 var $st$122$0=(($234)|0);
 HEAP32[(($st$122$0)>>2)]=$_lo_lobit_i_i2_i232$0;
 var $st$123$1=(($234+4)|0);
 HEAP32[(($st$123$1)>>2)]=$_lo_lobit_i_i2_i232$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=19;break; }
 case 66: 
 var $311$0=_i64Subtract($_sroa_0307_0_copyload$0,$_sroa_0307_0_copyload$1,$_sroa_0314_0_copyload$0,$_sroa_0314_0_copyload$1);var $311$1=tempRet0;
 var $st$124$0=(($235)|0);
 HEAP32[(($st$124$0)>>2)]=$311$0;
 var $st$125$1=(($235+4)|0);
 HEAP32[(($st$125$1)>>2)]=$311$1;
 var $_lo_lobit_i_i4_i233$0=($311$1>>31)|(((((($311$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i4_i233$1=(((((($311$1|0)<0))|0)?-1:0)>>31)|(((((($311$1|0)<0))|0)?-1:0)<<1);
 var $st$126$0=(($236)|0);
 HEAP32[(($st$126$0)>>2)]=$_lo_lobit_i_i4_i233$0;
 var $st$127$1=(($236+4)|0);
 HEAP32[(($st$127$1)>>2)]=$_lo_lobit_i_i4_i233$1;
 var $312$0=_i64Subtract($_sroa_1315_8_copyload$0,$_sroa_1315_8_copyload$1,$_sroa_1323_8_copyload$0,$_sroa_1323_8_copyload$1);var $312$1=tempRet0;
 var $st$128$0=(($237)|0);
 HEAP32[(($st$128$0)>>2)]=$312$0;
 var $st$129$1=(($237+4)|0);
 HEAP32[(($st$129$1)>>2)]=$312$1;
 var $_lo_lobit_i_i3_i234$0=($312$1>>31)|(((((($312$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i234$1=(((((($312$1|0)<0))|0)?-1:0)>>31)|(((((($312$1|0)<0))|0)?-1:0)<<1);
 var $st$130$0=(($238)|0);
 HEAP32[(($st$130$0)>>2)]=$_lo_lobit_i_i3_i234$0;
 var $st$131$1=(($238+4)|0);
 HEAP32[(($st$131$1)>>2)]=$_lo_lobit_i_i3_i234$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=19;break; }
 case 67: 
 var $ld$132$0=(($239)|0);
 var $313$0=HEAP32[(($ld$132$0)>>2)];
 var $ld$133$1=(($239+4)|0);
 var $313$1=HEAP32[(($ld$133$1)>>2)];
 var $ld$134$0=(($240)|0);
 var $314$0=HEAP32[(($ld$134$0)>>2)];
 var $ld$135$1=(($240+4)|0);
 var $314$1=HEAP32[(($ld$135$1)>>2)];
 var $315=(($313$0|0) == ($314$0|0)) & (($313$1|0) == ($314$1|0));
 if($315){label=68;break;}else{label=71;break;}
 case 68: 
 var $ld$136$0=(($241)|0);
 var $317$0=HEAP32[(($ld$136$0)>>2)];
 var $ld$137$1=(($241+4)|0);
 var $317$1=HEAP32[(($ld$137$1)>>2)];
 var $ld$138$0=(($242)|0);
 var $318$0=HEAP32[(($ld$138$0)>>2)];
 var $ld$139$1=(($242+4)|0);
 var $318$1=HEAP32[(($ld$139$1)>>2)];
 var $319=(($317$0|0) == ($318$0|0)) & (($317$1|0) == ($318$1|0));
 var $_0_i235=$319;label=70;break;
 case 69: 
 var $321$0=_i64Subtract($_sroa_0314_0_copyload$0,$_sroa_0314_0_copyload$1,$_sroa_0322_0_copyload$0,$_sroa_0322_0_copyload$1);var $321$1=tempRet0;
 var $322$0=___muldi3($321$0,$321$1,$308$0,$308$1);var $322$1=tempRet0;
 var $323$0=_i64Subtract($_sroa_0307_0_copyload$0,$_sroa_0307_0_copyload$1,$_sroa_0314_0_copyload$0,$_sroa_0314_0_copyload$1);var $323$1=tempRet0;
 var $324$0=_i64Subtract($_sroa_1315_8_copyload$0,$_sroa_1315_8_copyload$1,$_sroa_1323_8_copyload$0,$_sroa_1323_8_copyload$1);var $324$1=tempRet0;
 var $325$0=___muldi3($324$0,$324$1,$323$0,$323$1);var $325$1=tempRet0;
 var $326=(($322$0|0) == ($325$0|0)) & (($322$1|0) == ($325$1|0));
 var $_0_i235=$326;label=70;break;
 case 70: 
 var $_0_i235;
 if($_0_i235){label=81;break;}else{label=71;break;}
 case 71: 
 var $328=HEAP32[(($35)>>2)];
 var $_sroa_0263_0__idx=(($328)|0);
 var $ld$140$0=(($_sroa_0263_0__idx)|0);
 var $_sroa_0263_0_copyload$0=HEAP32[(($ld$140$0)>>2)];
 var $ld$141$1=(($_sroa_0263_0__idx+4)|0);
 var $_sroa_0263_0_copyload$1=HEAP32[(($ld$141$1)>>2)];
 var $_sroa_1264_8__idx265=(($328+8)|0);
 var $ld$142$0=(($_sroa_1264_8__idx265)|0);
 var $_sroa_1264_8_copyload$0=HEAP32[(($ld$142$0)>>2)];
 var $ld$143$1=(($_sroa_1264_8__idx265+4)|0);
 var $_sroa_1264_8_copyload$1=HEAP32[(($ld$143$1)>>2)];
 var $_sroa_0270_0__idx=(($328+16)|0);
 var $ld$144$0=(($_sroa_0270_0__idx)|0);
 var $_sroa_0270_0_copyload$0=HEAP32[(($ld$144$0)>>2)];
 var $ld$145$1=(($_sroa_0270_0__idx+4)|0);
 var $_sroa_0270_0_copyload$1=HEAP32[(($ld$145$1)>>2)];
 var $_sroa_1271_8__idx272=(($328+24)|0);
 var $ld$146$0=(($_sroa_1271_8__idx272)|0);
 var $_sroa_1271_8_copyload$0=HEAP32[(($ld$146$0)>>2)];
 var $ld$147$1=(($_sroa_1271_8__idx272+4)|0);
 var $_sroa_1271_8_copyload$1=HEAP32[(($ld$147$1)>>2)];
 var $_sroa_0278_0__idx=(($328+32)|0);
 var $ld$148$0=(($_sroa_0278_0__idx)|0);
 var $_sroa_0278_0_copyload$0=HEAP32[(($ld$148$0)>>2)];
 var $ld$149$1=(($_sroa_0278_0__idx+4)|0);
 var $_sroa_0278_0_copyload$1=HEAP32[(($ld$149$1)>>2)];
 var $_sroa_1279_8__idx280=(($328+40)|0);
 var $ld$150$0=(($_sroa_1279_8__idx280)|0);
 var $_sroa_1279_8_copyload$0=HEAP32[(($ld$150$0)>>2)];
 var $ld$151$1=(($_sroa_1279_8__idx280+4)|0);
 var $_sroa_1279_8_copyload$1=HEAP32[(($ld$151$1)>>2)];
 var $329=HEAP8[($72)];
 var $330=$329&1;
 var $331=(($330<<24)>>24)==0;
 var $332$0=_i64Subtract($_sroa_1264_8_copyload$0,$_sroa_1264_8_copyload$1,$_sroa_1271_8_copyload$0,$_sroa_1271_8_copyload$1);var $332$1=tempRet0;
 if($331){label=76;break;}else{label=72;break;}
 case 72: 
 var $st$152$0=(($219)|0);
 HEAP32[(($st$152$0)>>2)]=$332$0;
 var $st$153$1=(($219+4)|0);
 HEAP32[(($st$153$1)>>2)]=$332$1;
 var $_lo_lobit_i_i_i202$0=($332$1>>31)|(((((($332$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i202$1=(((((($332$1|0)<0))|0)?-1:0)>>31)|(((((($332$1|0)<0))|0)?-1:0)<<1);
 var $st$154$0=(($220)|0);
 HEAP32[(($st$154$0)>>2)]=$_lo_lobit_i_i_i202$0;
 var $st$155$1=(($220+4)|0);
 HEAP32[(($st$155$1)>>2)]=$_lo_lobit_i_i_i202$1;
 var $334$0=_i64Subtract($_sroa_0270_0_copyload$0,$_sroa_0270_0_copyload$1,$_sroa_0278_0_copyload$0,$_sroa_0278_0_copyload$1);var $334$1=tempRet0;
 var $st$156$0=(($221)|0);
 HEAP32[(($st$156$0)>>2)]=$334$0;
 var $st$157$1=(($221+4)|0);
 HEAP32[(($st$157$1)>>2)]=$334$1;
 var $_lo_lobit_i_i2_i203$0=($334$1>>31)|(((((($334$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i203$1=(((((($334$1|0)<0))|0)?-1:0)>>31)|(((((($334$1|0)<0))|0)?-1:0)<<1);
 var $st$158$0=(($222)|0);
 HEAP32[(($st$158$0)>>2)]=$_lo_lobit_i_i2_i203$0;
 var $st$159$1=(($222+4)|0);
 HEAP32[(($st$159$1)>>2)]=$_lo_lobit_i_i2_i203$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($15,$13,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=19;break; }
 case 73: 
 var $335$0=_i64Subtract($_sroa_0263_0_copyload$0,$_sroa_0263_0_copyload$1,$_sroa_0270_0_copyload$0,$_sroa_0270_0_copyload$1);var $335$1=tempRet0;
 var $st$160$0=(($223)|0);
 HEAP32[(($st$160$0)>>2)]=$335$0;
 var $st$161$1=(($223+4)|0);
 HEAP32[(($st$161$1)>>2)]=$335$1;
 var $_lo_lobit_i_i4_i204$0=($335$1>>31)|(((((($335$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i4_i204$1=(((((($335$1|0)<0))|0)?-1:0)>>31)|(((((($335$1|0)<0))|0)?-1:0)<<1);
 var $st$162$0=(($224)|0);
 HEAP32[(($st$162$0)>>2)]=$_lo_lobit_i_i4_i204$0;
 var $st$163$1=(($224+4)|0);
 HEAP32[(($st$163$1)>>2)]=$_lo_lobit_i_i4_i204$1;
 var $336$0=_i64Subtract($_sroa_1271_8_copyload$0,$_sroa_1271_8_copyload$1,$_sroa_1279_8_copyload$0,$_sroa_1279_8_copyload$1);var $336$1=tempRet0;
 var $st$164$0=(($225)|0);
 HEAP32[(($st$164$0)>>2)]=$336$0;
 var $st$165$1=(($225+4)|0);
 HEAP32[(($st$165$1)>>2)]=$336$1;
 var $_lo_lobit_i_i3_i205$0=($336$1>>31)|(((((($336$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i205$1=(((((($336$1|0)<0))|0)?-1:0)>>31)|(((((($336$1|0)<0))|0)?-1:0)<<1);
 var $st$166$0=(($226)|0);
 HEAP32[(($st$166$0)>>2)]=$_lo_lobit_i_i3_i205$0;
 var $st$167$1=(($226+4)|0);
 HEAP32[(($st$167$1)>>2)]=$_lo_lobit_i_i3_i205$1;
 (function() { try { __THREW__ = 0; return __ZNK10ClipperLib6Int128mlERKS0_($16,$17,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=19;break; }
 case 74: 
 var $ld$168$0=(($227)|0);
 var $337$0=HEAP32[(($ld$168$0)>>2)];
 var $ld$169$1=(($227+4)|0);
 var $337$1=HEAP32[(($ld$169$1)>>2)];
 var $ld$170$0=(($228)|0);
 var $338$0=HEAP32[(($ld$170$0)>>2)];
 var $ld$171$1=(($228+4)|0);
 var $338$1=HEAP32[(($ld$171$1)>>2)];
 var $339=(($337$0|0) == ($338$0|0)) & (($337$1|0) == ($338$1|0));
 if($339){label=75;break;}else{label=83;break;}
 case 75: 
 var $ld$172$0=(($229)|0);
 var $341$0=HEAP32[(($ld$172$0)>>2)];
 var $ld$173$1=(($229+4)|0);
 var $341$1=HEAP32[(($ld$173$1)>>2)];
 var $ld$174$0=(($230)|0);
 var $342$0=HEAP32[(($ld$174$0)>>2)];
 var $ld$175$1=(($230+4)|0);
 var $342$1=HEAP32[(($ld$175$1)>>2)];
 var $343=(($341$0|0) == ($342$0|0)) & (($341$1|0) == ($342$1|0));
 var $_0_i206=$343;label=77;break;
 case 76: 
 var $345$0=_i64Subtract($_sroa_0270_0_copyload$0,$_sroa_0270_0_copyload$1,$_sroa_0278_0_copyload$0,$_sroa_0278_0_copyload$1);var $345$1=tempRet0;
 var $346$0=___muldi3($345$0,$345$1,$332$0,$332$1);var $346$1=tempRet0;
 var $347$0=_i64Subtract($_sroa_0263_0_copyload$0,$_sroa_0263_0_copyload$1,$_sroa_0270_0_copyload$0,$_sroa_0270_0_copyload$1);var $347$1=tempRet0;
 var $348$0=_i64Subtract($_sroa_1271_8_copyload$0,$_sroa_1271_8_copyload$1,$_sroa_1279_8_copyload$0,$_sroa_1279_8_copyload$1);var $348$1=tempRet0;
 var $349$0=___muldi3($348$0,$348$1,$347$0,$347$1);var $349$1=tempRet0;
 var $350=(($346$0|0) == ($349$0|0)) & (($346$1|0) == ($349$1|0));
 var $_0_i206=$350;label=77;break;
 case 77: 
 var $_0_i206;
 if($_0_i206){label=78;break;}else{label=83;break;}
 case 78: 
 var $352=($j_3341|0)<2;
 if($352){label=81;break;}else{label=79;break;}
 case 79: 
 var $353=HEAP32[(($35)>>2)];
 var $i1_0330=2;label=80;break;
 case 80: 
 var $i1_0330;
 var $355=((($i1_0330)-(1))|0);
 var $356=(($353+($355<<4))|0);
 var $357=(($353+($i1_0330<<4))|0);
 var $358=$356;
 var $359=$357;
 assert(16 % 1 === 0);HEAP32[(($358)>>2)]=HEAP32[(($359)>>2)];HEAP32[((($358)+(4))>>2)]=HEAP32[((($359)+(4))>>2)];HEAP32[((($358)+(8))>>2)]=HEAP32[((($359)+(8))>>2)];HEAP32[((($358)+(12))>>2)]=HEAP32[((($359)+(12))>>2)];
 var $360=((($i1_0330)+(1))|0);
 var $361=($360|0)>($j_3341|0);
 if($361){label=81;break;}else{var $i1_0330=$360;label=80;break;}
 case 81: 
 var $362=((($len_0338)-(1))|0);
 var $363=($362|0)>2;
 if($363){label=82;break;}else{var $_0=0;label=121;break;}
 case 82: 
 var $j_4=((($j_3341)-(1))|0);
 var $_pre371=HEAP32[(($35)>>2)];
 var $len_0338=$362;var $j_3341=$j_4;var $256=$_pre371;label=52;break;
 case 83: 
 var $364=($len_0338|0)<3;
 if($364){var $_0=0;label=121;break;}else{label=84;break;}
 case 84: 
 var $366$0=_llvm_umul_with_overflow_i32($len_0338,136);
 var $366$1=tempRet0;
 var $367=$366$1;
 var $368=$366$0;
 var $369=$367?-1:$368;
 var $370=(function() { try { __THREW__ = 0; return __Znaj($369) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=21;break; }
 case 85: 
 var $372=$370;
 HEAP32[(($edges)>>2)]=$372;
 var $373=(($this+20)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($this+24)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=($374|0)==($376|0);
 if($377){label=89;break;}else{label=86;break;}
 case 86: 
 var $379=($374|0)==0;
 if($379){var $381=0;label=88;break;}else{label=87;break;}
 case 87: 
 HEAP32[(($374)>>2)]=$372;
 var $_pre364=HEAP32[(($373)>>2)];
 var $381=$_pre364;label=88;break;
 case 88: 
 var $381;
 var $382=(($381+4)|0);
 HEAP32[(($373)>>2)]=$382;
 var $385=$372;label=91;break;
 case 89: 
 var $384=(($this+16)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPN10ClipperLib5TEdgeENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($384,$edges) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=21;break; }
 case 90: 
 var $_pre375=HEAP32[(($edges)>>2)];
 var $385=$_pre375;label=91;break;
 case 91: 
 var $385;
 var $386=HEAP32[(($35)>>2)];
 var $387=(($386)|0);
 var $ld$176$0=(($387)|0);
 var $388$0=HEAP32[(($ld$176$0)>>2)];
 var $ld$177$1=(($387+4)|0);
 var $388$1=HEAP32[(($ld$177$1)>>2)];
 var $389=(($385+16)|0);
 var $st$178$0=(($389)|0);
 HEAP32[(($st$178$0)>>2)]=$388$0;
 var $st$179$1=(($389+4)|0);
 HEAP32[(($st$179$1)>>2)]=$388$1;
 var $390=HEAP32[(($35)>>2)];
 var $391=(($390+8)|0);
 var $ld$180$0=(($391)|0);
 var $392$0=HEAP32[(($ld$180$0)>>2)];
 var $ld$181$1=(($391+4)|0);
 var $392$1=HEAP32[(($ld$181$1)>>2)];
 var $393=(($385+24)|0);
 var $st$182$0=(($393)|0);
 HEAP32[(($st$182$0)>>2)]=$392$0;
 var $st$183$1=(($393+4)|0);
 HEAP32[(($st$183$1)>>2)]=$392$1;
 var $394=((($len_0338)-(1))|0);
 var $395=(($385+((($394)*(136))&-1))|0);
 var $396=((($len_0338)-(2))|0);
 var $397=(($385+((($396)*(136))&-1))|0);
 var $398=HEAP32[(($35)>>2)];
 var $399=$395;
 _memset($399, 0, 136);
 var $400=(($385+((($394)*(136))&-1)+104)|0);
 HEAP32[(($400)>>2)]=$385;
 var $401=(($385+((($394)*(136))&-1)+108)|0);
 HEAP32[(($401)>>2)]=$397;
 var $402=(($398+($394<<4))|0);
 var $ld$184$0=(($402)|0);
 var $403$0=HEAP32[(($ld$184$0)>>2)];
 var $ld$185$1=(($402+4)|0);
 var $403$1=HEAP32[(($ld$185$1)>>2)];
 var $404=(($385+((($394)*(136))&-1)+16)|0);
 var $st$186$0=(($404)|0);
 HEAP32[(($st$186$0)>>2)]=$403$0;
 var $st$187$1=(($404+4)|0);
 HEAP32[(($st$187$1)>>2)]=$403$1;
 var $405=(($398+($394<<4)+8)|0);
 var $ld$188$0=(($405)|0);
 var $406$0=HEAP32[(($ld$188$0)>>2)];
 var $ld$189$1=(($405+4)|0);
 var $406$1=HEAP32[(($ld$189$1)>>2)];
 var $407=(($385+((($394)*(136))&-1)+24)|0);
 var $st$190$0=(($407)|0);
 HEAP32[(($st$190$0)>>2)]=$406$0;
 var $st$191$1=(($407+4)|0);
 HEAP32[(($st$191$1)>>2)]=$406$1;
 var $ld$192$0=(($393)|0);
 var $408$0=HEAP32[(($ld$192$0)>>2)];
 var $ld$193$1=(($393+4)|0);
 var $408$1=HEAP32[(($ld$193$1)>>2)];
 var $409=(($406$1|0) < ($408$1|0)) | (((($406$1|0) == ($408$1|0) & ($406$0>>>0) <  ($408$0>>>0))));
 if($409){label=93;break;}else{label=92;break;}
 case 92: 
 var $411=(($395)|0);
 var $st$194$0=(($411)|0);
 HEAP32[(($st$194$0)>>2)]=$403$0;
 var $st$195$1=(($411+4)|0);
 HEAP32[(($st$195$1)>>2)]=$403$1;
 var $412=(($385+((($394)*(136))&-1)+8)|0);
 var $st$196$0=(($412)|0);
 HEAP32[(($st$196$0)>>2)]=$406$0;
 var $st$197$1=(($412+4)|0);
 HEAP32[(($st$197$1)>>2)]=$406$1;
 var $ld$198$0=(($389)|0);
 var $413$0=HEAP32[(($ld$198$0)>>2)];
 var $ld$199$1=(($389+4)|0);
 var $413$1=HEAP32[(($ld$199$1)>>2)];
 var $414=(($385+((($394)*(136))&-1)+32)|0);
 var $st$200$0=(($414)|0);
 HEAP32[(($st$200$0)>>2)]=$413$0;
 var $st$201$1=(($414+4)|0);
 HEAP32[(($st$201$1)>>2)]=$413$1;
 var $ld$202$0=(($393)|0);
 var $415$0=HEAP32[(($ld$202$0)>>2)];
 var $ld$203$1=(($393+4)|0);
 var $415$1=HEAP32[(($ld$203$1)>>2)];
 var $416=(($385+((($394)*(136))&-1)+40)|0);
 var $st$204$0=(($416)|0);
 HEAP32[(($st$204$0)>>2)]=$415$0;
 var $st$205$1=(($416+4)|0);
 HEAP32[(($st$205$1)>>2)]=$415$1;
 var $417=(($385+((($394)*(136))&-1)+88)|0);
 HEAP32[(($417)>>2)]=1;
 var $430$1=$413$1;var $430$0=$413$0;var $429$1=$403$1;var $429$0=$403$0;var $428$1=$415$1;var $428$0=$415$0;var $427$1=$406$1;var $427$0=$406$0;label=94;break;
 case 93: 
 var $419=(($385+((($394)*(136))&-1)+32)|0);
 var $st$206$0=(($419)|0);
 HEAP32[(($st$206$0)>>2)]=$403$0;
 var $st$207$1=(($419+4)|0);
 HEAP32[(($st$207$1)>>2)]=$403$1;
 var $420=(($385+((($394)*(136))&-1)+40)|0);
 var $st$208$0=(($420)|0);
 HEAP32[(($st$208$0)>>2)]=$406$0;
 var $st$209$1=(($420+4)|0);
 HEAP32[(($st$209$1)>>2)]=$406$1;
 var $ld$210$0=(($389)|0);
 var $421$0=HEAP32[(($ld$210$0)>>2)];
 var $ld$211$1=(($389+4)|0);
 var $421$1=HEAP32[(($ld$211$1)>>2)];
 var $422=(($395)|0);
 var $st$212$0=(($422)|0);
 HEAP32[(($st$212$0)>>2)]=$421$0;
 var $st$213$1=(($422+4)|0);
 HEAP32[(($st$213$1)>>2)]=$421$1;
 var $ld$214$0=(($393)|0);
 var $423$0=HEAP32[(($ld$214$0)>>2)];
 var $ld$215$1=(($393+4)|0);
 var $423$1=HEAP32[(($ld$215$1)>>2)];
 var $424=(($385+((($394)*(136))&-1)+8)|0);
 var $st$216$0=(($424)|0);
 HEAP32[(($st$216$0)>>2)]=$423$0;
 var $st$217$1=(($424+4)|0);
 HEAP32[(($st$217$1)>>2)]=$423$1;
 var $425=(($385+((($394)*(136))&-1)+88)|0);
 HEAP32[(($425)>>2)]=-1;
 var $430$1=$403$1;var $430$0=$403$0;var $429$1=$421$1;var $429$0=$421$0;var $428$1=$406$1;var $428$0=$406$0;var $427$1=$423$1;var $427$0=$423$0;label=94;break;
 case 94: 
 var $427$0;
 var $427$1;
 var $428$0;
 var $428$1;
 var $429$0;
 var $429$1;
 var $430$0;
 var $430$1;
 var $431$0=_i64Subtract($430$0,$430$1,$429$0,$429$1);var $431$1=tempRet0;
 var $432=(($385+((($394)*(136))&-1)+56)|0);
 var $st$218$0=(($432)|0);
 HEAP32[(($st$218$0)>>2)]=$431$0;
 var $st$219$1=(($432+4)|0);
 HEAP32[(($st$219$1)>>2)]=$431$1;
 var $433$0=_i64Subtract($428$0,$428$1,$427$0,$427$1);var $433$1=tempRet0;
 var $434=(($385+((($394)*(136))&-1)+64)|0);
 var $st$220$0=(($434)|0);
 HEAP32[(($st$220$0)>>2)]=$433$0;
 var $st$221$1=(($434+4)|0);
 HEAP32[(($st$221$1)>>2)]=$433$1;
 var $435=(($428$0|0) == ($427$0|0)) & (($428$1|0) == ($427$1|0));
 if($435){label=95;break;}else{label=96;break;}
 case 95: 
 var $437=(($385+((($394)*(136))&-1)+48)|0);
 HEAPF64[(($437)>>3)]=-1e+40;
 label=97;break;
 case 96: 
 var $439=(($431$0>>>0)+(($431$1|0)*4294967296));
 var $440=(($433$0>>>0)+(($433$1|0)*4294967296));
 var $441=($439)/($440);
 var $442=(($385+((($394)*(136))&-1)+48)|0);
 HEAPF64[(($442)>>3)]=$441;
 label=97;break;
 case 97: 
 var $443=(($385+((($394)*(136))&-1)+80)|0);
 HEAP32[(($443)>>2)]=$polyType;
 var $444=(($385+((($394)*(136))&-1)+100)|0);
 HEAP32[(($444)>>2)]=-1;
 var $445=($396|0)>0;
 if($445){var $i2_0328=$396;var $446$1=$406$1;var $446$0=$406$0;label=98;break;}else{label=105;break;}
 case 98: 
 var $446$0;
 var $446$1;
 var $i2_0328;
 var $447=(($385+((($i2_0328)*(136))&-1))|0);
 var $448=((($i2_0328)+(1))|0);
 var $449=(($385+((($448)*(136))&-1))|0);
 var $450=((($i2_0328)-(1))|0);
 var $451=(($385+((($450)*(136))&-1))|0);
 var $452=HEAP32[(($35)>>2)];
 var $453=$447;
 _memset($453, 0, 136);
 var $454=(($385+((($i2_0328)*(136))&-1)+104)|0);
 HEAP32[(($454)>>2)]=$449;
 var $455=(($385+((($i2_0328)*(136))&-1)+108)|0);
 HEAP32[(($455)>>2)]=$451;
 var $456=(($452+($i2_0328<<4))|0);
 var $ld$222$0=(($456)|0);
 var $457$0=HEAP32[(($ld$222$0)>>2)];
 var $ld$223$1=(($456+4)|0);
 var $457$1=HEAP32[(($ld$223$1)>>2)];
 var $458=(($385+((($i2_0328)*(136))&-1)+16)|0);
 var $st$224$0=(($458)|0);
 HEAP32[(($st$224$0)>>2)]=$457$0;
 var $st$225$1=(($458+4)|0);
 HEAP32[(($st$225$1)>>2)]=$457$1;
 var $459=(($452+($i2_0328<<4)+8)|0);
 var $ld$226$0=(($459)|0);
 var $460$0=HEAP32[(($ld$226$0)>>2)];
 var $ld$227$1=(($459+4)|0);
 var $460$1=HEAP32[(($ld$227$1)>>2)];
 var $461=(($385+((($i2_0328)*(136))&-1)+24)|0);
 var $st$228$0=(($461)|0);
 HEAP32[(($st$228$0)>>2)]=$460$0;
 var $st$229$1=(($461+4)|0);
 HEAP32[(($st$229$1)>>2)]=$460$1;
 var $462=(($385+((($448)*(136))&-1)+24)|0);
 var $463=(($460$1|0) < ($446$1|0)) | (((($460$1|0) == ($446$1|0) & ($460$0>>>0) <  ($446$0>>>0))));
 if($463){label=100;break;}else{label=99;break;}
 case 99: 
 var $465=(($447)|0);
 var $st$230$0=(($465)|0);
 HEAP32[(($st$230$0)>>2)]=$457$0;
 var $st$231$1=(($465+4)|0);
 HEAP32[(($st$231$1)>>2)]=$457$1;
 var $466=(($385+((($i2_0328)*(136))&-1)+8)|0);
 var $st$232$0=(($466)|0);
 HEAP32[(($st$232$0)>>2)]=$460$0;
 var $st$233$1=(($466+4)|0);
 HEAP32[(($st$233$1)>>2)]=$460$1;
 var $467=(($385+((($448)*(136))&-1)+16)|0);
 var $ld$234$0=(($467)|0);
 var $468$0=HEAP32[(($ld$234$0)>>2)];
 var $ld$235$1=(($467+4)|0);
 var $468$1=HEAP32[(($ld$235$1)>>2)];
 var $469=(($385+((($i2_0328)*(136))&-1)+32)|0);
 var $st$236$0=(($469)|0);
 HEAP32[(($st$236$0)>>2)]=$468$0;
 var $st$237$1=(($469+4)|0);
 HEAP32[(($st$237$1)>>2)]=$468$1;
 var $ld$238$0=(($462)|0);
 var $470$0=HEAP32[(($ld$238$0)>>2)];
 var $ld$239$1=(($462+4)|0);
 var $470$1=HEAP32[(($ld$239$1)>>2)];
 var $471=(($385+((($i2_0328)*(136))&-1)+40)|0);
 var $st$240$0=(($471)|0);
 HEAP32[(($st$240$0)>>2)]=$470$0;
 var $st$241$1=(($471+4)|0);
 HEAP32[(($st$241$1)>>2)]=$470$1;
 var $472=(($385+((($i2_0328)*(136))&-1)+88)|0);
 HEAP32[(($472)>>2)]=1;
 var $486$1=$468$1;var $486$0=$468$0;var $485$1=$457$1;var $485$0=$457$0;var $484$1=$470$1;var $484$0=$470$0;var $483$1=$460$1;var $483$0=$460$0;label=101;break;
 case 100: 
 var $474=(($385+((($i2_0328)*(136))&-1)+32)|0);
 var $st$242$0=(($474)|0);
 HEAP32[(($st$242$0)>>2)]=$457$0;
 var $st$243$1=(($474+4)|0);
 HEAP32[(($st$243$1)>>2)]=$457$1;
 var $475=(($385+((($i2_0328)*(136))&-1)+40)|0);
 var $st$244$0=(($475)|0);
 HEAP32[(($st$244$0)>>2)]=$460$0;
 var $st$245$1=(($475+4)|0);
 HEAP32[(($st$245$1)>>2)]=$460$1;
 var $476=(($385+((($448)*(136))&-1)+16)|0);
 var $ld$246$0=(($476)|0);
 var $477$0=HEAP32[(($ld$246$0)>>2)];
 var $ld$247$1=(($476+4)|0);
 var $477$1=HEAP32[(($ld$247$1)>>2)];
 var $478=(($447)|0);
 var $st$248$0=(($478)|0);
 HEAP32[(($st$248$0)>>2)]=$477$0;
 var $st$249$1=(($478+4)|0);
 HEAP32[(($st$249$1)>>2)]=$477$1;
 var $ld$250$0=(($462)|0);
 var $479$0=HEAP32[(($ld$250$0)>>2)];
 var $ld$251$1=(($462+4)|0);
 var $479$1=HEAP32[(($ld$251$1)>>2)];
 var $480=(($385+((($i2_0328)*(136))&-1)+8)|0);
 var $st$252$0=(($480)|0);
 HEAP32[(($st$252$0)>>2)]=$479$0;
 var $st$253$1=(($480+4)|0);
 HEAP32[(($st$253$1)>>2)]=$479$1;
 var $481=(($385+((($i2_0328)*(136))&-1)+88)|0);
 HEAP32[(($481)>>2)]=-1;
 var $486$1=$457$1;var $486$0=$457$0;var $485$1=$477$1;var $485$0=$477$0;var $484$1=$460$1;var $484$0=$460$0;var $483$1=$479$1;var $483$0=$479$0;label=101;break;
 case 101: 
 var $483$0;
 var $483$1;
 var $484$0;
 var $484$1;
 var $485$0;
 var $485$1;
 var $486$0;
 var $486$1;
 var $487$0=_i64Subtract($486$0,$486$1,$485$0,$485$1);var $487$1=tempRet0;
 var $488=(($385+((($i2_0328)*(136))&-1)+56)|0);
 var $st$254$0=(($488)|0);
 HEAP32[(($st$254$0)>>2)]=$487$0;
 var $st$255$1=(($488+4)|0);
 HEAP32[(($st$255$1)>>2)]=$487$1;
 var $489$0=_i64Subtract($484$0,$484$1,$483$0,$483$1);var $489$1=tempRet0;
 var $490=(($385+((($i2_0328)*(136))&-1)+64)|0);
 var $st$256$0=(($490)|0);
 HEAP32[(($st$256$0)>>2)]=$489$0;
 var $st$257$1=(($490+4)|0);
 HEAP32[(($st$257$1)>>2)]=$489$1;
 var $491=(($484$0|0) == ($483$0|0)) & (($484$1|0) == ($483$1|0));
 if($491){label=102;break;}else{label=103;break;}
 case 102: 
 var $493=(($385+((($i2_0328)*(136))&-1)+48)|0);
 HEAPF64[(($493)>>3)]=-1e+40;
 label=104;break;
 case 103: 
 var $495=(($487$0>>>0)+(($487$1|0)*4294967296));
 var $496=(($489$0>>>0)+(($489$1|0)*4294967296));
 var $497=($495)/($496);
 var $498=(($385+((($i2_0328)*(136))&-1)+48)|0);
 HEAPF64[(($498)>>3)]=$497;
 label=104;break;
 case 104: 
 var $499=(($385+((($i2_0328)*(136))&-1)+80)|0);
 HEAP32[(($499)>>2)]=$polyType;
 var $500=(($385+((($i2_0328)*(136))&-1)+100)|0);
 HEAP32[(($500)>>2)]=-1;
 var $501=($450|0)>0;
 if($501){var $i2_0328=$450;var $446$1=$460$1;var $446$0=$460$0;label=98;break;}else{label=105;break;}
 case 105: 
 var $502=(($385+136)|0);
 var $503=HEAP32[(($35)>>2)];
 var $504=$385;
 _memset($504, 0, 136);
 var $505=(($385+104)|0);
 HEAP32[(($505)>>2)]=$502;
 var $506=(($385+108)|0);
 HEAP32[(($506)>>2)]=$395;
 var $507=(($503)|0);
 var $ld$258$0=(($507)|0);
 var $508$0=HEAP32[(($ld$258$0)>>2)];
 var $ld$259$1=(($507+4)|0);
 var $508$1=HEAP32[(($ld$259$1)>>2)];
 var $st$260$0=(($389)|0);
 HEAP32[(($st$260$0)>>2)]=$508$0;
 var $st$261$1=(($389+4)|0);
 HEAP32[(($st$261$1)>>2)]=$508$1;
 var $509=(($503+8)|0);
 var $ld$262$0=(($509)|0);
 var $510$0=HEAP32[(($ld$262$0)>>2)];
 var $ld$263$1=(($509+4)|0);
 var $510$1=HEAP32[(($ld$263$1)>>2)];
 var $st$264$0=(($393)|0);
 HEAP32[(($st$264$0)>>2)]=$510$0;
 var $st$265$1=(($393+4)|0);
 HEAP32[(($st$265$1)>>2)]=$510$1;
 var $511=(($385+160)|0);
 var $ld$266$0=(($511)|0);
 var $512$0=HEAP32[(($ld$266$0)>>2)];
 var $ld$267$1=(($511+4)|0);
 var $512$1=HEAP32[(($ld$267$1)>>2)];
 var $513=(($510$1|0) < ($512$1|0)) | (((($510$1|0) == ($512$1|0) & ($510$0>>>0) <  ($512$0>>>0))));
 if($513){label=107;break;}else{label=106;break;}
 case 106: 
 var $515=(($385)|0);
 var $st$268$0=(($515)|0);
 HEAP32[(($st$268$0)>>2)]=$508$0;
 var $st$269$1=(($515+4)|0);
 HEAP32[(($st$269$1)>>2)]=$508$1;
 var $516=(($385+8)|0);
 var $st$270$0=(($516)|0);
 HEAP32[(($st$270$0)>>2)]=$510$0;
 var $st$271$1=(($516+4)|0);
 HEAP32[(($st$271$1)>>2)]=$510$1;
 var $517=(($385+152)|0);
 var $ld$272$0=(($517)|0);
 var $518$0=HEAP32[(($ld$272$0)>>2)];
 var $ld$273$1=(($517+4)|0);
 var $518$1=HEAP32[(($ld$273$1)>>2)];
 var $519=(($385+32)|0);
 var $st$274$0=(($519)|0);
 HEAP32[(($st$274$0)>>2)]=$518$0;
 var $st$275$1=(($519+4)|0);
 HEAP32[(($st$275$1)>>2)]=$518$1;
 var $520=(($385+40)|0);
 var $st$276$0=(($520)|0);
 HEAP32[(($st$276$0)>>2)]=$512$0;
 var $st$277$1=(($520+4)|0);
 HEAP32[(($st$277$1)>>2)]=$512$1;
 var $521=(($385+88)|0);
 HEAP32[(($521)>>2)]=1;
 var $534$1=$518$1;var $534$0=$518$0;var $533$1=$508$1;var $533$0=$508$0;var $532$1=$512$1;var $532$0=$512$0;var $531$1=$510$1;var $531$0=$510$0;label=108;break;
 case 107: 
 var $523=(($385+32)|0);
 var $st$278$0=(($523)|0);
 HEAP32[(($st$278$0)>>2)]=$508$0;
 var $st$279$1=(($523+4)|0);
 HEAP32[(($st$279$1)>>2)]=$508$1;
 var $524=(($385+40)|0);
 var $st$280$0=(($524)|0);
 HEAP32[(($st$280$0)>>2)]=$510$0;
 var $st$281$1=(($524+4)|0);
 HEAP32[(($st$281$1)>>2)]=$510$1;
 var $525=(($385+152)|0);
 var $ld$282$0=(($525)|0);
 var $526$0=HEAP32[(($ld$282$0)>>2)];
 var $ld$283$1=(($525+4)|0);
 var $526$1=HEAP32[(($ld$283$1)>>2)];
 var $527=(($385)|0);
 var $st$284$0=(($527)|0);
 HEAP32[(($st$284$0)>>2)]=$526$0;
 var $st$285$1=(($527+4)|0);
 HEAP32[(($st$285$1)>>2)]=$526$1;
 var $528=(($385+8)|0);
 var $st$286$0=(($528)|0);
 HEAP32[(($st$286$0)>>2)]=$512$0;
 var $st$287$1=(($528+4)|0);
 HEAP32[(($st$287$1)>>2)]=$512$1;
 var $529=(($385+88)|0);
 HEAP32[(($529)>>2)]=-1;
 var $534$1=$508$1;var $534$0=$508$0;var $533$1=$526$1;var $533$0=$526$0;var $532$1=$510$1;var $532$0=$510$0;var $531$1=$512$1;var $531$0=$512$0;label=108;break;
 case 108: 
 var $531$0;
 var $531$1;
 var $532$0;
 var $532$1;
 var $533$0;
 var $533$1;
 var $534$0;
 var $534$1;
 var $535$0=_i64Subtract($534$0,$534$1,$533$0,$533$1);var $535$1=tempRet0;
 var $536=(($385+56)|0);
 var $st$288$0=(($536)|0);
 HEAP32[(($st$288$0)>>2)]=$535$0;
 var $st$289$1=(($536+4)|0);
 HEAP32[(($st$289$1)>>2)]=$535$1;
 var $537$0=_i64Subtract($532$0,$532$1,$531$0,$531$1);var $537$1=tempRet0;
 var $538=(($385+64)|0);
 var $st$290$0=(($538)|0);
 HEAP32[(($st$290$0)>>2)]=$537$0;
 var $st$291$1=(($538+4)|0);
 HEAP32[(($st$291$1)>>2)]=$537$1;
 var $539=(($532$0|0) == ($531$0|0)) & (($532$1|0) == ($531$1|0));
 if($539){label=109;break;}else{label=110;break;}
 case 109: 
 var $541=(($385+48)|0);
 HEAPF64[(($541)>>3)]=-1e+40;
 label=111;break;
 case 110: 
 var $543=(($535$0>>>0)+(($535$1|0)*4294967296));
 var $544=(($537$0>>>0)+(($537$1|0)*4294967296));
 var $545=($543)/($544);
 var $546=(($385+48)|0);
 HEAPF64[(($546)>>3)]=$545;
 label=111;break;
 case 111: 
 var $547=(($385+80)|0);
 HEAP32[(($547)>>2)]=$polyType;
 var $548=(($385+100)|0);
 HEAP32[(($548)>>2)]=-1;
 var $eHighest_0=$385;var $e_0=$385;var $553$1=$533$1;var $553$0=$533$0;var $552$1=$531$1;var $552$0=$531$0;var $551$1=$532$1;var $551$0=$532$0;var $550=$502;label=112;break;
 case 112: 
 var $550;
 var $551$0;
 var $551$1;
 var $552$0;
 var $552$1;
 var $553$0;
 var $553$1;
 var $e_0;
 var $eHighest_0;
 var $554=(($e_0+16)|0);
 var $st$292$0=(($554)|0);
 HEAP32[(($st$292$0)>>2)]=$553$0;
 var $st$293$1=(($554+4)|0);
 HEAP32[(($st$293$1)>>2)]=$553$1;
 var $555=(($e_0+24)|0);
 var $st$294$0=(($555)|0);
 HEAP32[(($st$294$0)>>2)]=$552$0;
 var $st$295$1=(($555+4)|0);
 HEAP32[(($st$295$1)>>2)]=$552$1;
 var $556=(($eHighest_0+40)|0);
 var $ld$296$0=(($556)|0);
 var $557$0=HEAP32[(($ld$296$0)>>2)];
 var $ld$297$1=(($556+4)|0);
 var $557$1=HEAP32[(($ld$297$1)>>2)];
 var $558=(($551$1|0) < ($557$1|0)) | (((($551$1|0) == ($557$1|0) & ($551$0>>>0) <  ($557$0>>>0))));
 var $e_0_eHighest_0=$558?$e_0:$eHighest_0;
 var $559=($550|0)==($385|0);
 if($559){label=114;break;}else{label=113;break;}
 case 113: 
 var $_phi_trans_insert=(($550)|0);
 var $ld$298$0=(($_phi_trans_insert)|0);
 var $_pre376$0=HEAP32[(($ld$298$0)>>2)];
 var $ld$299$1=(($_phi_trans_insert+4)|0);
 var $_pre376$1=HEAP32[(($ld$299$1)>>2)];
 var $_phi_trans_insert377=(($550+8)|0);
 var $ld$300$0=(($_phi_trans_insert377)|0);
 var $_pre378$0=HEAP32[(($ld$300$0)>>2)];
 var $ld$301$1=(($_phi_trans_insert377+4)|0);
 var $_pre378$1=HEAP32[(($ld$301$1)>>2)];
 var $_phi_trans_insert379=(($550+40)|0);
 var $ld$302$0=(($_phi_trans_insert379)|0);
 var $_pre380$0=HEAP32[(($ld$302$0)>>2)];
 var $ld$303$1=(($_phi_trans_insert379+4)|0);
 var $_pre380$1=HEAP32[(($ld$303$1)>>2)];
 var $_phi_trans_insert381=(($550+104)|0);
 var $_pre382=HEAP32[(($_phi_trans_insert381)>>2)];
 var $eHighest_0=$e_0_eHighest_0;var $e_0=$550;var $553$1=$_pre376$1;var $553$0=$_pre376$0;var $552$1=$_pre378$1;var $552$0=$_pre378$0;var $551$1=$_pre380$1;var $551$0=$_pre380$0;var $550=$_pre382;label=112;break;
 case 114: 
 var $561=(($e_0_eHighest_0+88)|0);
 var $562=HEAP32[(($561)>>2)];
 var $563=($562|0)>0;
 if($563){label=115;break;}else{var $eHighest_2=$e_0_eHighest_0;label=116;break;}
 case 115: 
 var $565=(($e_0_eHighest_0+104)|0);
 var $566=HEAP32[(($565)>>2)];
 var $eHighest_2=$566;label=116;break;
 case 116: 
 var $eHighest_2;
 var $568=(($eHighest_2+48)|0);
 var $569=HEAPF64[(($568)>>3)];
 var $570=($569)+((1e+40));
 var $571=$570>(-1e-20);
 var $572=$570<(1e-20);
 var $or_cond=$571&$572;
 if($or_cond){label=117;break;}else{var $eHighest_3=$eHighest_2;label=118;break;}
 case 117: 
 var $574=(($eHighest_2+104)|0);
 var $575=HEAP32[(($574)>>2)];
 var $eHighest_3=$575;label=118;break;
 case 118: 
 var $eHighest_3;
 var $e_1=$eHighest_3;label=119;break;
 case 119: 
 var $e_1;
 var $578=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase14AddBoundsToLMLEPNS_5TEdgeE($this,$e_1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { label=18;break; }
 case 120: 
 var $580=($578|0)==($eHighest_3|0);
 if($580){var $_0=1;label=121;break;}else{var $e_1=$578;label=119;break;}
 case 121: 
 var $_0;
 var $581=HEAP32[(($35)>>2)];
 var $582=$581;
 var $583=($581|0)==0;
 if($583){var $_1=$_0;label=125;break;}else{label=122;break;}
 case 122: 
 var $584=HEAP32[(($36)>>2)];
 var $585=($581|0)==($584|0);
 if($585){label=124;break;}else{label=123;break;}
 case 123: 
 var $scevgep_i_i_i178=((($584)-(16))|0);
 var $scevgep28_i_i_i179=$scevgep_i_i_i178;
 var $586=(((-$582))|0);
 var $uglygep_i_i_i180=(($scevgep28_i_i_i179+$586)|0);
 var $uglygep29_i_i_i181=$uglygep_i_i_i180;
 var $587=$uglygep29_i_i_i181>>>4;
 var $588=$587^-1;
 var $scevgep30_i_i_i182=(($584+($588<<4))|0);
 HEAP32[(($36)>>2)]=$scevgep30_i_i_i182;
 label=124;break;
 case 124: 
 var $589=$581;
 __ZdlPv($589);
 var $_1=$_0;label=125;break;
 case 125: 
 var $_1;
 STACKTOP=sp;return $_1;
 case 126: 
 ___resumeException($lpad_phi$0)
 case 127: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBase14AddBoundsToLMLEPNS_5TEdgeE($this,$e){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($e+112)|0);
 HEAP32[(($1)>>2)]=0;
 var $e_pn=$e;label=2;break;
 case 2: 
 var $e_pn;
 var $_0_in=(($e_pn+104)|0);
 var $_0=HEAP32[(($_0_in)>>2)];
 var $2=(($_0+48)|0);
 var $3=HEAPF64[(($2)>>3)];
 var $4=($3)+((1e+40));
 var $5=$4>(-1e-20);
 var $6=$4<(1e-20);
 var $or_cond=$5&$6;
 if($or_cond){label=3;break;}else{label=9;break;}
 case 3: 
 var $8=(($_0+104)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+40)|0);
 var $ld$0$0=(($10)|0);
 var $11$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $11$1=HEAP32[(($ld$1$1)>>2)];
 var $12=(($_0+40)|0);
 var $ld$2$0=(($12)|0);
 var $13$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($12+4)|0);
 var $13$1=HEAP32[(($ld$3$1)>>2)];
 var $14=(($11$1|0) < ($13$1|0)) | (((($11$1|0) == ($13$1|0) & ($11$0>>>0) <  ($13$0>>>0))));
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $_phi_trans_insert=(($_0+108)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert62=(($_pre)|0);
 var $ld$4$0=(($_phi_trans_insert62)|0);
 var $_pre63$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($_phi_trans_insert62+4)|0);
 var $_pre63$1=HEAP32[(($ld$5$1)>>2)];
 var $25=$_pre;var $24$1=$_pre63$1;var $24$0=$_pre63$0;label=6;break;
 case 5: 
 var $16=(($9)|0);
 var $ld$6$0=(($16)|0);
 var $17$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$7$1)>>2)];
 var $18=(($_0+108)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19)|0);
 var $ld$8$0=(($20)|0);
 var $21$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($20+4)|0);
 var $21$1=HEAP32[(($ld$9$1)>>2)];
 var $22=(($17$1|0) > ($21$1|0)) | (((($17$1|0) == ($21$1|0) & ($17$0>>>0) >  ($21$0>>>0))));
 if($22){label=11;break;}else{var $25=$19;var $24$1=$21$1;var $24$0=$21$0;label=6;break;}
 case 6: 
 var $24$0;
 var $24$1;
 var $25;
 var $26=(($_0+32)|0);
 var $ld$10$0=(($26)|0);
 var $27$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($26+4)|0);
 var $27$1=HEAP32[(($ld$11$1)>>2)];
 var $28=(($27$0|0) == ($24$0|0)) & (($27$1|0) == ($24$1|0));
 if($28){label=8;break;}else{label=7;break;}
 case 7: 
 var $30=(($_0+16)|0);
 var $st$12$0=(($30)|0);
 HEAP32[(($st$12$0)>>2)]=$27$0;
 var $st$13$1=(($30+4)|0);
 HEAP32[(($st$13$1)>>2)]=$27$1;
 var $31=(($_0)|0);
 var $ld$14$0=(($31)|0);
 var $32$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($31+4)|0);
 var $32$1=HEAP32[(($ld$15$1)>>2)];
 var $st$16$0=(($26)|0);
 HEAP32[(($st$16$0)>>2)]=$32$0;
 var $st$17$1=(($26+4)|0);
 HEAP32[(($st$17$1)>>2)]=$32$1;
 var $st$18$0=(($31)|0);
 HEAP32[(($st$18$0)>>2)]=$27$0;
 var $st$19$1=(($31+4)|0);
 HEAP32[(($st$19$1)>>2)]=$27$1;
 label=8;break;
 case 8: 
 var $34=(($_0+112)|0);
 HEAP32[(($34)>>2)]=$25;
 var $e_pn=$_0;label=2;break;
 case 9: 
 var $36=(($_0+24)|0);
 var $ld$20$0=(($36)|0);
 var $37$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($36+4)|0);
 var $37$1=HEAP32[(($ld$21$1)>>2)];
 var $38=(($_0+108)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $ld$22$0=(($40)|0);
 var $41$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($40+4)|0);
 var $41$1=HEAP32[(($ld$23$1)>>2)];
 var $42=(($37$0|0) == ($41$0|0)) & (($37$1|0) == ($41$1|0));
 if($42){label=11;break;}else{label=10;break;}
 case 10: 
 var $44=(($_0+112)|0);
 HEAP32[(($44)>>2)]=$39;
 var $e_pn=$_0;label=2;break;
 case 11: 
 var $46=__Znwj(24);
 var $47=$46;
 var $48=(($46+16)|0);
 var $49=$48;
 HEAP32[(($49)>>2)]=0;
 var $50=(($_0+108)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $ld$24$0=(($52)|0);
 var $53$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($52+4)|0);
 var $53$1=HEAP32[(($ld$25$1)>>2)];
 var $54=$46;
 var $st$26$0=(($54)|0);
 HEAP32[(($st$26$0)>>2)]=$53$0;
 var $st$27$1=(($54+4)|0);
 HEAP32[(($st$27$1)>>2)]=$53$1;
 var $55=HEAPF64[(($2)>>3)];
 var $56=($55)+((1e+40));
 var $57=$56>(-1e-20);
 var $58=$56<(1e-20);
 var $or_cond55=$57&$58;
 if($or_cond55){label=12;break;}else{label=15;break;}
 case 12: 
 var $60=(($_0)|0);
 var $ld$28$0=(($60)|0);
 var $61$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($60+4)|0);
 var $61$1=HEAP32[(($ld$29$1)>>2)];
 var $62=HEAP32[(($50)>>2)];
 var $63=(($62)|0);
 var $ld$30$0=(($63)|0);
 var $64$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($63+4)|0);
 var $64$1=HEAP32[(($ld$31$1)>>2)];
 var $65=(($61$0|0) == ($64$0|0)) & (($61$1|0) == ($64$1|0));
 if($65){label=14;break;}else{label=13;break;}
 case 13: 
 var $67=(($_0+32)|0);
 var $ld$32$0=(($67)|0);
 var $68$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($67+4)|0);
 var $68$1=HEAP32[(($ld$33$1)>>2)];
 var $69=(($_0+16)|0);
 var $st$34$0=(($69)|0);
 HEAP32[(($st$34$0)>>2)]=$68$0;
 var $st$35$1=(($69+4)|0);
 HEAP32[(($st$35$1)>>2)]=$68$1;
 var $st$36$0=(($67)|0);
 HEAP32[(($st$36$0)>>2)]=$61$0;
 var $st$37$1=(($67+4)|0);
 HEAP32[(($st$37$1)>>2)]=$61$1;
 var $st$38$0=(($60)|0);
 HEAP32[(($st$38$0)>>2)]=$68$0;
 var $st$39$1=(($60+4)|0);
 HEAP32[(($st$39$1)>>2)]=$68$1;
 label=14;break;
 case 14: 
 var $71=(($46+8)|0);
 var $72=$71;
 HEAP32[(($72)>>2)]=$62;
 var $73=(($46+12)|0);
 var $74=$73;
 HEAP32[(($74)>>2)]=$_0;
 var $90=$62;label=18;break;
 case 15: 
 var $76=HEAP32[(($50)>>2)];
 var $77=(($76+48)|0);
 var $78=HEAPF64[(($77)>>3)];
 var $79=$55<$78;
 var $80=(($46+8)|0);
 var $81=$80;
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 HEAP32[(($81)>>2)]=$76;
 var $83=(($46+12)|0);
 var $84=$83;
 HEAP32[(($84)>>2)]=$_0;
 var $90=$76;label=18;break;
 case 17: 
 HEAP32[(($81)>>2)]=$_0;
 var $86=HEAP32[(($50)>>2)];
 var $87=(($46+12)|0);
 var $88=$87;
 HEAP32[(($88)>>2)]=$86;
 var $90=$_0;label=18;break;
 case 18: 
 var $90;
 var $91=(($90+84)|0);
 HEAP32[(($91)>>2)]=1;
 var $92=(($46+12)|0);
 var $93=$92;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+84)|0);
 HEAP32[(($95)>>2)]=2;
 var $96=(($this+8)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($97|0)==0;
 if($98){label=19;break;}else{label=20;break;}
 case 19: 
 HEAP32[(($96)>>2)]=$47;
 var $_1=$_0;label=25;break;
 case 20: 
 var $ld$40$0=(($54)|0);
 var $101$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($54+4)|0);
 var $101$1=HEAP32[(($ld$41$1)>>2)];
 var $102=(($97)|0);
 var $ld$42$0=(($102)|0);
 var $103$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($102+4)|0);
 var $103$1=HEAP32[(($ld$43$1)>>2)];
 var $104=(($101$1|0) < ($103$1|0)) | (((($101$1|0) == ($103$1|0) & ($101$0>>>0) <  ($103$0>>>0))));
 if($104){var $tmpLm_0_i=$97;label=22;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($49)>>2)]=$97;
 HEAP32[(($96)>>2)]=$47;
 var $_1=$_0;label=25;break;
 case 22: 
 var $tmpLm_0_i;
 var $106=(($tmpLm_0_i+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){var $113=0;label=24;break;}else{label=23;break;}
 case 23: 
 var $110=(($107)|0);
 var $ld$44$0=(($110)|0);
 var $111$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($110+4)|0);
 var $111$1=HEAP32[(($ld$45$1)>>2)];
 var $112=(($101$1|0) < ($111$1|0)) | (((($101$1|0) == ($111$1|0) & ($101$0>>>0) <  ($111$0>>>0))));
 if($112){var $tmpLm_0_i=$107;label=22;break;}else{var $113=$107;label=24;break;}
 case 24: 
 var $113;
 HEAP32[(($49)>>2)]=$113;
 HEAP32[(($106)>>2)]=$47;
 var $_1=$_0;label=25;break;
 case 25: 
 var $_1;
 var $114=(($_1+104)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $ld$46$0=(($116)|0);
 var $117$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($116+4)|0);
 var $117$1=HEAP32[(($ld$47$1)>>2)];
 var $118=(($_1+40)|0);
 var $ld$48$0=(($118)|0);
 var $119$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($118+4)|0);
 var $119$1=HEAP32[(($ld$49$1)>>2)];
 var $120=(($117$0|0) == ($119$0|0)) & (($117$1|0) == ($119$1|0));
 var $121=(($115+48)|0);
 if($120){label=26;break;}else{label=27;break;}
 case 26: 
 var $123=HEAPF64[(($121)>>3)];
 var $124=($123)+((1e+40));
 var $125=$124>(-1e-20);
 var $126=$124<(1e-20);
 var $or_cond56=$125&$126;
 if($or_cond56){label=27;break;}else{label=30;break;}
 case 27: 
 var $127=(($_1+112)|0);
 HEAP32[(($127)>>2)]=$115;
 var $128=HEAPF64[(($121)>>3)];
 var $129=($128)+((1e+40));
 var $130=$129>(-1e-20);
 var $131=$129<(1e-20);
 var $or_cond57=$130&$131;
 if($or_cond57){label=28;break;}else{var $_1=$115;label=25;break;}
 case 28: 
 var $133=(($115)|0);
 var $ld$50$0=(($133)|0);
 var $134$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($133+4)|0);
 var $134$1=HEAP32[(($ld$51$1)>>2)];
 var $135=(($115+108)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+32)|0);
 var $ld$52$0=(($137)|0);
 var $138$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($137+4)|0);
 var $138$1=HEAP32[(($ld$53$1)>>2)];
 var $139=(($134$0|0) == ($138$0|0)) & (($134$1|0) == ($138$1|0));
 if($139){var $_1=$115;label=25;break;}else{label=29;break;}
 case 29: 
 var $141=(($115+32)|0);
 var $ld$54$0=(($141)|0);
 var $142$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($141+4)|0);
 var $142$1=HEAP32[(($ld$55$1)>>2)];
 var $143=(($115+16)|0);
 var $st$56$0=(($143)|0);
 HEAP32[(($st$56$0)>>2)]=$142$0;
 var $st$57$1=(($143+4)|0);
 HEAP32[(($st$57$1)>>2)]=$142$1;
 var $st$58$0=(($141)|0);
 HEAP32[(($st$58$0)>>2)]=$134$0;
 var $st$59$1=(($141+4)|0);
 HEAP32[(($st$59$1)>>2)]=$134$1;
 var $st$60$0=(($133)|0);
 HEAP32[(($st$60$0)>>2)]=$142$0;
 var $st$61$1=(($133+4)|0);
 HEAP32[(($st$61$1)>>2)]=$142$1;
 var $_1=$115;label=25;break;
 case 30: 
 return $115;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBase11AddPolygonsERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEENS_8PolyTypeE($this,$ppg,$polyType){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($ppg+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($ppg)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){var $result_0_off0_lcssa=0;label=3;break;}else{var $result_0_off010=0;var $i_011=0;var $6=$4;label=2;break;}
 case 2: 
 var $6;
 var $i_011;
 var $result_0_off010;
 var $7=(($6+((($i_011)*(12))&-1))|0);
 var $8=__ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($this,$7,$polyType);
 var $_result_0_off0=$8|$result_0_off010;
 var $9=((($i_011)+(1))|0);
 var $10=HEAP32[(($1)>>2)];
 var $11=HEAP32[(($3)>>2)];
 var $12=$10;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=(((($14|0))/(12))&-1);
 var $16=($9>>>0)<($15>>>0);
 if($16){var $result_0_off010=$_result_0_off0;var $i_011=$9;var $6=$11;label=2;break;}else{var $result_0_off0_lcssa=$_result_0_off0;label=3;break;}
 case 3: 
 var $result_0_off0_lcssa;
 return $result_0_off0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBase5ClearEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{var $4=$2;label=2;break;}
 case 2: 
 var $4;
 var $5=(($4+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 __ZdlPv($7);
 HEAP32[(($1)>>2)]=$6;
 var $8=($6|0)==0;
 if($8){label=3;break;}else{var $4=$6;label=2;break;}
 case 3: 
 var $9=(($this+4)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=(($this+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($this+16)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($11|0)==($13|0);
 if($14){label=9;break;}else{var $i_021=0;var $20=$13;var $19=$11;label=6;break;}
 case 4: 
 var $15=($27|0)==($28|0);
 if($15){label=9;break;}else{label=5;break;}
 case 5: 
 var $_lcssa2025=$27;
 var $scevgep=((($28)-(4))|0);
 var $scevgep24=$scevgep;
 var $16=(((-$_lcssa2025))|0);
 var $uglygep=(($scevgep24+$16)|0);
 var $uglygep26=$uglygep;
 var $17=$uglygep26>>>2;
 var $18=$17^-1;
 var $scevgep27=(($28+($18<<2))|0);
 HEAP32[(($10)>>2)]=$scevgep27;
 label=9;break;
 case 6: 
 var $19;
 var $20;
 var $i_021;
 var $21=(($20+($i_021<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){var $28=$19;var $27=$20;label=8;break;}else{label=7;break;}
 case 7: 
 var $25=$22;
 __ZdaPv($25);
 var $_pre=HEAP32[(($10)>>2)];
 var $_pre28=HEAP32[(($12)>>2)];
 var $28=$_pre;var $27=$_pre28;label=8;break;
 case 8: 
 var $27;
 var $28;
 var $29=((($i_021)+(1))|0);
 var $30=$28;
 var $31=$27;
 var $32=((($30)-($31))|0);
 var $33=$32>>2;
 var $34=($29>>>0)<($33>>>0);
 if($34){var $i_021=$29;var $20=$27;var $19=$28;label=6;break;}else{label=4;break;}
 case 9: 
 var $35=(($this+12)|0);
 HEAP8[($35)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBase5ResetEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=($2|0)==0;
 if($4){label=7;break;}else{var $lm_027=$2;label=2;break;}
 case 2: 
 var $lm_027;
 var $5=(($lm_027+8)|0);
 var $e_019=HEAP32[(($5)>>2)];
 var $6=($e_019|0)==0;
 if($6){label=4;break;}else{var $e_020=$e_019;label=3;break;}
 case 3: 
 var $e_020;
 var $7=(($e_020)|0);
 var $ld$0$0=(($7)|0);
 var $8$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($7+4)|0);
 var $8$1=HEAP32[(($ld$1$1)>>2)];
 var $9=(($e_020+16)|0);
 var $st$2$0=(($9)|0);
 HEAP32[(($st$2$0)>>2)]=$8$0;
 var $st$3$1=(($9+4)|0);
 HEAP32[(($st$3$1)>>2)]=$8$1;
 var $10=(($e_020+8)|0);
 var $ld$4$0=(($10)|0);
 var $11$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($10+4)|0);
 var $11$1=HEAP32[(($ld$5$1)>>2)];
 var $12=(($e_020+24)|0);
 var $st$6$0=(($12)|0);
 HEAP32[(($st$6$0)>>2)]=$11$0;
 var $st$7$1=(($12+4)|0);
 HEAP32[(($st$7$1)>>2)]=$11$1;
 var $13=(($e_020+84)|0);
 HEAP32[(($13)>>2)]=1;
 var $14=(($e_020+100)|0);
 HEAP32[(($14)>>2)]=-1;
 var $15=(($e_020+112)|0);
 var $e_0=HEAP32[(($15)>>2)];
 var $16=($e_0|0)==0;
 if($16){label=4;break;}else{var $e_020=$e_0;label=3;break;}
 case 4: 
 var $17=(($lm_027+12)|0);
 var $e_121=HEAP32[(($17)>>2)];
 var $18=($e_121|0)==0;
 if($18){label=6;break;}else{var $e_122=$e_121;label=5;break;}
 case 5: 
 var $e_122;
 var $19=(($e_122)|0);
 var $ld$8$0=(($19)|0);
 var $20$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($19+4)|0);
 var $20$1=HEAP32[(($ld$9$1)>>2)];
 var $21=(($e_122+16)|0);
 var $st$10$0=(($21)|0);
 HEAP32[(($st$10$0)>>2)]=$20$0;
 var $st$11$1=(($21+4)|0);
 HEAP32[(($st$11$1)>>2)]=$20$1;
 var $22=(($e_122+8)|0);
 var $ld$12$0=(($22)|0);
 var $23$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($22+4)|0);
 var $23$1=HEAP32[(($ld$13$1)>>2)];
 var $24=(($e_122+24)|0);
 var $st$14$0=(($24)|0);
 HEAP32[(($st$14$0)>>2)]=$23$0;
 var $st$15$1=(($24+4)|0);
 HEAP32[(($st$15$1)>>2)]=$23$1;
 var $25=(($e_122+84)|0);
 HEAP32[(($25)>>2)]=2;
 var $26=(($e_122+100)|0);
 HEAP32[(($26)>>2)]=-1;
 var $27=(($e_122+112)|0);
 var $e_1=HEAP32[(($27)>>2)];
 var $28=($e_1|0)==0;
 if($28){label=6;break;}else{var $e_122=$e_1;label=5;break;}
 case 6: 
 var $29=(($lm_027+16)|0);
 var $lm_0=HEAP32[(($29)>>2)];
 var $30=($lm_0|0)==0;
 if($30){label=7;break;}else{var $lm_027=$lm_0;label=2;break;}
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib11ClipperBase9GetBoundsEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$agg_result;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0; HEAP32[((($5)+(16))>>2)]=0; HEAP32[((($5)+(20))>>2)]=0; HEAP32[((($5)+(24))>>2)]=0; HEAP32[((($5)+(28))>>2)]=0;
 label=27;break;
 case 3: 
 var $6=(($2+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)|0);
 var $ld$0$0=(($8)|0);
 var $9$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$1$1)>>2)];
 var $10=(($agg_result)|0);
 var $st$2$0=(($10)|0);
 HEAP32[(($st$2$0)>>2)]=$9$0;
 var $st$3$1=(($10+4)|0);
 HEAP32[(($st$3$1)>>2)]=$9$1;
 var $11=(($7+8)|0);
 var $ld$4$0=(($11)|0);
 var $12$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($11+4)|0);
 var $12$1=HEAP32[(($ld$5$1)>>2)];
 var $13=(($agg_result+8)|0);
 var $st$6$0=(($13)|0);
 HEAP32[(($st$6$0)>>2)]=$12$0;
 var $st$7$1=(($13+4)|0);
 HEAP32[(($st$7$1)>>2)]=$12$1;
 var $14=(($agg_result+16)|0);
 var $st$8$0=(($14)|0);
 HEAP32[(($st$8$0)>>2)]=$9$0;
 var $st$9$1=(($14+4)|0);
 HEAP32[(($st$9$1)>>2)]=$9$1;
 var $15=(($agg_result+24)|0);
 var $st$10$0=(($15)|0);
 HEAP32[(($st$10$0)>>2)]=$12$0;
 var $st$11$1=(($15+4)|0);
 HEAP32[(($st$11$1)>>2)]=$12$1;
 var $lm_031=$2;var $22$1=$12$1;var $22$0=$12$0;var $21$1=$9$1;var $21$0=$9$0;var $20$1=$9$1;var $20$0=$9$0;var $19$1=$12$1;var $19$0=$12$0;var $18=$7;var $17$1=$12$1;var $17$0=$12$0;label=4;break;
 case 4: 
 var $17$0;
 var $17$1;
 var $18;
 var $19$0;
 var $19$1;
 var $20$0;
 var $20$1;
 var $21$0;
 var $21$1;
 var $22$0;
 var $22$1;
 var $lm_031;
 var $23=(($17$1|0) > ($22$1|0)) | (((($17$1|0) == ($22$1|0) & ($17$0>>>0) >  ($22$0>>>0))));
 if($23){label=5;break;}else{var $25$1=$22$1;var $25$0=$22$0;label=6;break;}
 case 5: 
 var $st$12$0=(($15)|0);
 HEAP32[(($st$12$0)>>2)]=$17$0;
 var $st$13$1=(($15+4)|0);
 HEAP32[(($st$13$1)>>2)]=$17$1;
 var $25$1=$17$1;var $25$0=$17$0;label=6;break;
 case 6: 
 var $25$0;
 var $25$1;
 var $26=(($lm_031+12)|0);
 var $30$1=$21$1;var $30$0=$21$0;var $29$1=$20$1;var $29$0=$20$0;var $28$1=$19$1;var $28$0=$19$0;var $e_0=$18;label=7;break;
 case 7: 
 var $e_0;
 var $28$0;
 var $28$1;
 var $29$0;
 var $29$1;
 var $30$0;
 var $30$1;
 var $31=(($e_0+112)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 var $34=(($e_0)|0);
 var $ld$14$0=(($34)|0);
 var $35$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$15$1)>>2)];
 var $36=(($35$1|0) < ($30$1|0)) | (((($35$1|0) == ($30$1|0) & ($35$0>>>0) <  ($30$0>>>0))));
 if($33){var $e_1_lcssa=$e_0;var $_lcssa=$34;var $_lcssa27=$36;var $57$1=$35$1;var $57$0=$35$0;var $56$1=$29$1;var $56$0=$29$0;var $55$1=$30$1;var $55$0=$30$0;label=13;break;}else{var $41$1=$35$1;var $41$0=$35$0;var $40=$36;var $39$1=$29$1;var $39$0=$29$0;var $38=$32;var $37$1=$30$1;var $37$0=$30$0;label=8;break;}
 case 8: 
 var $37$0;
 var $37$1;
 var $38;
 var $39$0;
 var $39$1;
 var $40;
 var $41$0;
 var $41$1;
 if($40){label=9;break;}else{var $44$1=$37$1;var $44$0=$37$0;label=10;break;}
 case 9: 
 var $st$16$0=(($10)|0);
 HEAP32[(($st$16$0)>>2)]=$41$0;
 var $st$17$1=(($10+4)|0);
 HEAP32[(($st$17$1)>>2)]=$41$1;
 var $44$1=$41$1;var $44$0=$41$0;label=10;break;
 case 10: 
 var $44$0;
 var $44$1;
 var $45=(($41$1|0) > ($39$1|0)) | (((($41$1|0) == ($39$1|0) & ($41$0>>>0) >  ($39$0>>>0))));
 if($45){label=11;break;}else{var $48$1=$39$1;var $48$0=$39$0;label=12;break;}
 case 11: 
 var $st$18$0=(($14)|0);
 HEAP32[(($st$18$0)>>2)]=$41$0;
 var $st$19$1=(($14+4)|0);
 HEAP32[(($st$19$1)>>2)]=$41$1;
 var $48$1=$41$1;var $48$0=$41$0;label=12;break;
 case 12: 
 var $48$0;
 var $48$1;
 var $49=(($38+112)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==0;
 var $52=(($38)|0);
 var $ld$20$0=(($52)|0);
 var $53$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($52+4)|0);
 var $53$1=HEAP32[(($ld$21$1)>>2)];
 var $54=(($53$1|0) < ($44$1|0)) | (((($53$1|0) == ($44$1|0) & ($53$0>>>0) <  ($44$0>>>0))));
 if($51){var $e_1_lcssa=$38;var $_lcssa=$52;var $_lcssa27=$54;var $57$1=$53$1;var $57$0=$53$0;var $56$1=$48$1;var $56$0=$48$0;var $55$1=$44$1;var $55$0=$44$0;label=13;break;}else{var $41$1=$53$1;var $41$0=$53$0;var $40=$54;var $39$1=$48$1;var $39$0=$48$0;var $38=$50;var $37$1=$44$1;var $37$0=$44$0;label=8;break;}
 case 13: 
 var $55$0;
 var $55$1;
 var $56$0;
 var $56$1;
 var $57$0;
 var $57$1;
 var $_lcssa27;
 var $_lcssa;
 var $e_1_lcssa;
 if($_lcssa27){label=14;break;}else{var $61$1=$57$1;var $61$0=$57$0;var $60$1=$55$1;var $60$0=$55$0;label=15;break;}
 case 14: 
 var $st$22$0=(($10)|0);
 HEAP32[(($st$22$0)>>2)]=$57$0;
 var $st$23$1=(($10+4)|0);
 HEAP32[(($st$23$1)>>2)]=$57$1;
 var $ld$24$0=(($_lcssa)|0);
 var $_pre$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($_lcssa+4)|0);
 var $_pre$1=HEAP32[(($ld$25$1)>>2)];
 var $61$1=$_pre$1;var $61$0=$_pre$0;var $60$1=$57$1;var $60$0=$57$0;label=15;break;
 case 15: 
 var $60$0;
 var $60$1;
 var $61$0;
 var $61$1;
 var $62=(($61$1|0) > ($56$1|0)) | (((($61$1|0) == ($56$1|0) & ($61$0>>>0) >  ($56$0>>>0))));
 if($62){label=16;break;}else{var $65$1=$56$1;var $65$0=$56$0;label=17;break;}
 case 16: 
 var $st$26$0=(($14)|0);
 HEAP32[(($st$26$0)>>2)]=$61$0;
 var $st$27$1=(($14+4)|0);
 HEAP32[(($st$27$1)>>2)]=$61$1;
 var $65$1=$61$1;var $65$0=$61$0;label=17;break;
 case 17: 
 var $65$0;
 var $65$1;
 var $66=(($e_1_lcssa+32)|0);
 var $ld$28$0=(($66)|0);
 var $67$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($66+4)|0);
 var $67$1=HEAP32[(($ld$29$1)>>2)];
 var $68=(($67$1|0) < ($60$1|0)) | (((($67$1|0) == ($60$1|0) & ($67$0>>>0) <  ($60$0>>>0))));
 if($68){label=18;break;}else{var $72$1=$60$1;var $72$0=$60$0;var $71$1=$67$1;var $71$0=$67$0;label=19;break;}
 case 18: 
 var $st$30$0=(($10)|0);
 HEAP32[(($st$30$0)>>2)]=$67$0;
 var $st$31$1=(($10+4)|0);
 HEAP32[(($st$31$1)>>2)]=$67$1;
 var $ld$32$0=(($66)|0);
 var $_pre38$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($66+4)|0);
 var $_pre38$1=HEAP32[(($ld$33$1)>>2)];
 var $72$1=$67$1;var $72$0=$67$0;var $71$1=$_pre38$1;var $71$0=$_pre38$0;label=19;break;
 case 19: 
 var $71$0;
 var $71$1;
 var $72$0;
 var $72$1;
 var $73=(($71$1|0) > ($65$1|0)) | (((($71$1|0) == ($65$1|0) & ($71$0>>>0) >  ($65$0>>>0))));
 if($73){label=20;break;}else{var $76$1=$65$1;var $76$0=$65$0;label=21;break;}
 case 20: 
 var $st$34$0=(($14)|0);
 HEAP32[(($st$34$0)>>2)]=$71$0;
 var $st$35$1=(($14+4)|0);
 HEAP32[(($st$35$1)>>2)]=$71$1;
 var $76$1=$71$1;var $76$0=$71$0;label=21;break;
 case 21: 
 var $76$0;
 var $76$1;
 var $77=(($e_1_lcssa+40)|0);
 var $ld$36$0=(($77)|0);
 var $78$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($77+4)|0);
 var $78$1=HEAP32[(($ld$37$1)>>2)];
 var $79=(($78$1|0) < ($28$1|0)) | (((($78$1|0) == ($28$1|0) & ($78$0>>>0) <  ($28$0>>>0))));
 if($79){label=22;break;}else{var $82$1=$28$1;var $82$0=$28$0;label=23;break;}
 case 22: 
 var $st$38$0=(($13)|0);
 HEAP32[(($st$38$0)>>2)]=$78$0;
 var $st$39$1=(($13+4)|0);
 HEAP32[(($st$39$1)>>2)]=$78$1;
 var $82$1=$78$1;var $82$0=$78$0;label=23;break;
 case 23: 
 var $82$0;
 var $82$1;
 var $83=($e_0|0)==($18|0);
 if($83){label=24;break;}else{label=25;break;}
 case 24: 
 var $e_0_pre=HEAP32[(($26)>>2)];
 var $30$1=$72$1;var $30$0=$72$0;var $29$1=$76$1;var $29$0=$76$0;var $28$1=$82$1;var $28$0=$82$0;var $e_0=$e_0_pre;label=7;break;
 case 25: 
 var $85=(($lm_031+16)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($86|0)==0;
 if($87){label=27;break;}else{label=26;break;}
 case 26: 
 var $_phi_trans_insert=(($86+8)|0);
 var $_pre41=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert42=(($_pre41+8)|0);
 var $ld$40$0=(($_phi_trans_insert42)|0);
 var $_pre43$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($_phi_trans_insert42+4)|0);
 var $_pre43$1=HEAP32[(($ld$41$1)>>2)];
 var $lm_031=$86;var $22$1=$25$1;var $22$0=$25$0;var $21$1=$72$1;var $21$0=$72$0;var $20$1=$76$1;var $20$0=$76$0;var $19$1=$82$1;var $19$0=$82$0;var $18=$_pre41;var $17$1=$_pre43$1;var $17$0=$_pre43$0;label=4;break;
 case 27: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7ClipperC1Ev($this){
 var label=0;
 var $1=(($this+76)|0);
 var $2=(($this+92)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+96)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+100)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+84)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($this+80)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this)|0);
 HEAP32[(($7)>>2)]=9332;
 HEAP32[(($1)>>2)]=9372;
 var $8=(($this+4)|0);
 var $9=(($this+44)|0);
 var $10=(($this+88)|0);
 var $11=$8;
 _memset($11, 0, 36);
 var $12=$9;
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0; HEAP32[((($12)+(12))>>2)]=0; ; HEAP8[((($12)+(16))|0)]=0;
 HEAP8[($10)]=0;
 var $13=(($this+72)|0);
 HEAP8[($13)]=0;
 return;
}
function __ZN10ClipperLib7ClipperD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD2Ev($this,9464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $2=(($this+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=(($this+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body$1=$4$1;var $eh_lpad_body$0=$4$0;label=7;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=$this;
 __ZdlPv($8);
 return;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 var $eh_lpad_body$1=$10$1;var $eh_lpad_body$0=$10$0;label=7;break;
 case 7: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $11=$this;
 __ZdlPv($11);
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7ClipperD1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD2Ev($this,9464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $2=(($this+76)|0);
 __ZN10ClipperLib11ClipperBaseD2Ev($2);
 return;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=(($this+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 ___resumeException($4$0)
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_N10ClipperLib7ClipperD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD2Ev($8,9464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $_sum1=((($6)+(76))|0);
 var $10=(($1+$_sum1)|0);
 var $11=$10;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=5;break; }
 case 3: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $_sum=((($6)+(76))|0);
 var $14=(($1+$_sum)|0);
 var $15=$14;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body_i$1=$13$1;var $eh_lpad_body_i$0=$13$0;label=6;break; } else { label=4;break; }
 case 4: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $eh_lpad_body_i$1=$19$1;var $eh_lpad_body_i$0=$19$0;label=6;break;
 case 6: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 __ZdlPv($7);
 ___resumeException($eh_lpad_body_i$0)
 case 7: 
 __ZdlPv($7);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7ClipperD2Ev($this,$vtt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($vtt)>>2)];
 var $2=(($this)|0);
 var $_c=$1;
 HEAP32[(($2)>>2)]=$_c;
 var $3=(($vtt+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($1)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$this;
 var $9=(($8+$7)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$4;
 var $11=$this;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=17;break; }
 case 2: 
 var $16=(($this+44)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){label=4;break;}else{var $19=$17;label=3;break;}
 case 3: 
 var $19;
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$19;
 __ZdlPv($22);
 HEAP32[(($16)>>2)]=$21;
 var $23=($21|0)==0;
 if($23){label=4;break;}else{var $19=$21;label=3;break;}
 case 4: 
 var $24=(($this+28)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=8;break;}else{label=5;break;}
 case 5: 
 var $28=(($this+32)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i=((($29)-(4))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $31=(((-$26))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$31)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $32=$uglygep29_i_i_i>>>2;
 var $33=$32^-1;
 var $scevgep30_i_i_i=(($29+($33<<2))|0);
 HEAP32[(($28)>>2)]=$scevgep30_i_i_i;
 label=7;break;
 case 7: 
 var $34=$25;
 __ZdlPv($34);
 label=8;break;
 case 8: 
 var $35=(($this+16)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=($36|0)==0;
 if($38){label=12;break;}else{label=9;break;}
 case 9: 
 var $39=(($this+20)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($36|0)==($40|0);
 if($41){label=11;break;}else{label=10;break;}
 case 10: 
 var $scevgep_i_i_i7=((($40)-(4))|0);
 var $scevgep28_i_i_i8=$scevgep_i_i_i7;
 var $42=(((-$37))|0);
 var $uglygep_i_i_i9=(($scevgep28_i_i_i8+$42)|0);
 var $uglygep29_i_i_i10=$uglygep_i_i_i9;
 var $43=$uglygep29_i_i_i10>>>2;
 var $44=$43^-1;
 var $scevgep30_i_i_i11=(($40+($44<<2))|0);
 HEAP32[(($39)>>2)]=$scevgep30_i_i_i11;
 label=11;break;
 case 11: 
 var $45=$36;
 __ZdlPv($45);
 label=12;break;
 case 12: 
 var $46=(($this+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=($47|0)==0;
 if($49){label=16;break;}else{label=13;break;}
 case 13: 
 var $50=(($this+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($47|0)==($51|0);
 if($52){label=15;break;}else{label=14;break;}
 case 14: 
 var $scevgep_i_i_i14=((($51)-(4))|0);
 var $scevgep28_i_i_i15=$scevgep_i_i_i14;
 var $53=(((-$48))|0);
 var $uglygep_i_i_i16=(($scevgep28_i_i_i15+$53)|0);
 var $uglygep29_i_i_i17=$uglygep_i_i_i16;
 var $54=$uglygep29_i_i_i17>>>2;
 var $55=$54^-1;
 var $scevgep30_i_i_i18=(($51+($55<<2))|0);
 HEAP32[(($50)>>2)]=$scevgep30_i_i_i18;
 label=15;break;
 case 15: 
 var $56=$47;
 __ZdlPv($56);
 label=16;break;
 case 16: 
 return;
 case 17: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1); var $58$1 = tempRet0;
 var $59=(($this+28)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 var $62=($60|0)==0;
 if($62){label=21;break;}else{label=18;break;}
 case 18: 
 var $63=(($this+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($60|0)==($64|0);
 if($65){label=20;break;}else{label=19;break;}
 case 19: 
 var $scevgep_i_i_i21=((($64)-(4))|0);
 var $scevgep28_i_i_i22=$scevgep_i_i_i21;
 var $66=(((-$61))|0);
 var $uglygep_i_i_i23=(($scevgep28_i_i_i22+$66)|0);
 var $uglygep29_i_i_i24=$uglygep_i_i_i23;
 var $67=$uglygep29_i_i_i24>>>2;
 var $68=$67^-1;
 var $scevgep30_i_i_i25=(($64+($68<<2))|0);
 HEAP32[(($63)>>2)]=$scevgep30_i_i_i25;
 label=20;break;
 case 20: 
 var $69=$60;
 __ZdlPv($69);
 label=21;break;
 case 21: 
 var $70=(($this+16)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$71;
 var $73=($71|0)==0;
 if($73){label=25;break;}else{label=22;break;}
 case 22: 
 var $74=(($this+20)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($71|0)==($75|0);
 if($76){label=24;break;}else{label=23;break;}
 case 23: 
 var $scevgep_i_i_i30=((($75)-(4))|0);
 var $scevgep28_i_i_i31=$scevgep_i_i_i30;
 var $77=(((-$72))|0);
 var $uglygep_i_i_i32=(($scevgep28_i_i_i31+$77)|0);
 var $uglygep29_i_i_i33=$uglygep_i_i_i32;
 var $78=$uglygep29_i_i_i33>>>2;
 var $79=$78^-1;
 var $scevgep30_i_i_i34=(($75+($79<<2))|0);
 HEAP32[(($74)>>2)]=$scevgep30_i_i_i34;
 label=24;break;
 case 24: 
 var $80=$71;
 __ZdlPv($80);
 label=25;break;
 case 25: 
 var $81=(($this+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82;
 var $84=($82|0)==0;
 if($84){label=29;break;}else{label=26;break;}
 case 26: 
 var $85=(($this+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($82|0)==($86|0);
 if($87){label=28;break;}else{label=27;break;}
 case 27: 
 var $scevgep_i_i_i39=((($86)-(4))|0);
 var $scevgep28_i_i_i40=$scevgep_i_i_i39;
 var $88=(((-$83))|0);
 var $uglygep_i_i_i41=(($scevgep28_i_i_i40+$88)|0);
 var $uglygep29_i_i_i42=$uglygep_i_i_i41;
 var $89=$uglygep29_i_i_i42>>>2;
 var $90=$89^-1;
 var $scevgep30_i_i_i43=(($86+($90<<2))|0);
 HEAP32[(($85)>>2)]=$scevgep30_i_i_i43;
 label=28;break;
 case 28: 
 var $91=$82;
 __ZdlPv($91);
 label=29;break;
 case 29: 
 ___resumeException($58$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_N10ClipperLib7ClipperD1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD2Ev($8,9464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=2;break; }
 case 2: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 var $_sum=((($6)+(76))|0);
 var $11=(($1+$_sum)|0);
 var $12=$11;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 ___resumeException($10$0)
 case 4: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $_sum1=((($6)+(76))|0);
 var $16=(($1+$_sum1)|0);
 var $17=$16;
 __ZN10ClipperLib11ClipperBaseD2Ev($17);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper5ClearEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(16))|0);
 var $7=(($6+$_sum)|0);
 var $_sum2=((($5)+(20))|0);
 var $8=(($6+$_sum2)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$7;
 var $12=HEAP32[(($11)>>2)];
 var $13=($10|0)==($12|0);
 if($13){label=11;break;}else{label=2;break;}
 case 2: 
 __ZN10ClipperLib7Clipper17DisposeAllPolyPtsEv($this);
 var $15=HEAP32[(($1)>>2)];
 var $16=((($15)-(12))|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $_sum3=((($18)+(8))|0);
 var $19=(($6+$_sum3)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=4;break;}else{var $23=$21;label=3;break;}
 case 3: 
 var $23;
 var $24=(($23+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$23;
 __ZdlPv($26);
 HEAP32[(($20)>>2)]=$25;
 var $27=($25|0)==0;
 if($27){label=4;break;}else{var $23=$25;label=3;break;}
 case 4: 
 var $_sum4=((($18)+(4))|0);
 var $28=(($6+$_sum4)|0);
 var $29=$28;
 HEAP32[(($29)>>2)]=0;
 var $_sum5=((($18)+(20))|0);
 var $30=(($6+$_sum5)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $_sum6=((($18)+(16))|0);
 var $33=(($6+$_sum6)|0);
 var $34=$33;
 var $35=HEAP32[(($34)>>2)];
 var $36=($32|0)==($35|0);
 if($36){label=10;break;}else{var $i_021_i=0;var $42=$35;var $41=$32;label=7;break;}
 case 5: 
 var $37=($49|0)==($50|0);
 if($37){label=10;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i=((($50)-(4))|0);
 var $scevgep24_i=$scevgep_i;
 var $38=(((-$53))|0);
 var $uglygep_i=(($scevgep24_i+$38)|0);
 var $uglygep26_i=$uglygep_i;
 var $39=$uglygep26_i>>>2;
 var $40=$39^-1;
 var $scevgep27_i=(($50+($40<<2))|0);
 HEAP32[(($31)>>2)]=$scevgep27_i;
 label=10;break;
 case 7: 
 var $41;
 var $42;
 var $i_021_i;
 var $43=(($42+($i_021_i<<2))|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)==0;
 if($45){var $50=$41;var $49=$42;label=9;break;}else{label=8;break;}
 case 8: 
 var $47=$44;
 __ZdaPv($47);
 var $_pre_i=HEAP32[(($31)>>2)];
 var $_pre28_i=HEAP32[(($34)>>2)];
 var $50=$_pre_i;var $49=$_pre28_i;label=9;break;
 case 9: 
 var $49;
 var $50;
 var $51=((($i_021_i)+(1))|0);
 var $52=$50;
 var $53=$49;
 var $54=((($52)-($53))|0);
 var $55=$54>>2;
 var $56=($51>>>0)<($55>>>0);
 if($56){var $i_021_i=$51;var $42=$49;var $41=$50;label=7;break;}else{label=5;break;}
 case 10: 
 var $_sum7=((($18)+(12))|0);
 var $57=(($6+$_sum7)|0);
 HEAP8[($57)]=0;
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper17DisposeAllPolyPtsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=10;break;}else{var $i_019=0;var $10=$4;label=4;break;}
 case 2: 
 var $6=($34|0)==($33|0);
 if($6){label=10;break;}else{label=3;break;}
 case 3: 
 var $_lcssa1823=$34;
 var $scevgep=((($33)-(4))|0);
 var $scevgep22=$scevgep;
 var $7=(((-$_lcssa1823))|0);
 var $uglygep=(($scevgep22+$7)|0);
 var $uglygep24=$uglygep;
 var $8=$uglygep24>>>2;
 var $9=$8^-1;
 var $scevgep25=(($33+($9<<2))|0);
 HEAP32[(($1)>>2)]=$scevgep25;
 label=10;break;
 case 4: 
 var $10;
 var $i_019;
 var $11=(($10+($i_019<<2))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=5;break;}
 case 5: 
 var $17=(($14+28)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+24)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=HEAP32[(($13)>>2)];
 var $21=($20|0)==0;
 if($21){label=7;break;}else{var $22=$20;label=6;break;}
 case 6: 
 var $22;
 var $23=(($22+24)|0);
 var $24=HEAP32[(($23)>>2)];
 HEAP32[(($13)>>2)]=$24;
 var $25=$22;
 __ZdlPv($25);
 var $26=HEAP32[(($13)>>2)];
 var $27=($26|0)==0;
 if($27){label=8;break;}else{var $22=$26;label=6;break;}
 case 7: 
 var $28=($12|0)==0;
 if($28){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=$12;
 __ZdlPv($29);
 label=9;break;
 case 9: 
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30+($i_019<<2))|0);
 HEAP32[(($31)>>2)]=0;
 var $32=((($i_019)+(1))|0);
 var $33=HEAP32[(($1)>>2)];
 var $34=HEAP32[(($3)>>2)];
 var $35=$33;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($32>>>0)<($38>>>0);
 if($39){var $i_019=$32;var $10=$34;label=4;break;}else{label=2;break;}
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n16_N10ClipperLib7Clipper5ClearEv($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(16))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 __ZN10ClipperLib7Clipper5ClearEv($8);
 return;
}
function __ZN10ClipperLib7Clipper5ResetEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum8=((($5)+(8))|0);
 var $7=(($6+$_sum8)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $_sum9=((($5)+(4))|0);
 var $10=(($6+$_sum9)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=$9;
 var $12=($9|0)==0;
 if($12){label=7;break;}else{var $lm_027_i=$9;label=2;break;}
 case 2: 
 var $lm_027_i;
 var $13=(($lm_027_i+8)|0);
 var $e_019_i=HEAP32[(($13)>>2)];
 var $14=($e_019_i|0)==0;
 if($14){label=4;break;}else{var $e_020_i=$e_019_i;label=3;break;}
 case 3: 
 var $e_020_i;
 var $15=(($e_020_i)|0);
 var $ld$0$0=(($15)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($15+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $17=(($e_020_i+16)|0);
 var $st$2$0=(($17)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($17+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 var $18=(($e_020_i+8)|0);
 var $ld$4$0=(($18)|0);
 var $19$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($18+4)|0);
 var $19$1=HEAP32[(($ld$5$1)>>2)];
 var $20=(($e_020_i+24)|0);
 var $st$6$0=(($20)|0);
 HEAP32[(($st$6$0)>>2)]=$19$0;
 var $st$7$1=(($20+4)|0);
 HEAP32[(($st$7$1)>>2)]=$19$1;
 var $21=(($e_020_i+84)|0);
 HEAP32[(($21)>>2)]=1;
 var $22=(($e_020_i+100)|0);
 HEAP32[(($22)>>2)]=-1;
 var $23=(($e_020_i+112)|0);
 var $e_0_i=HEAP32[(($23)>>2)];
 var $24=($e_0_i|0)==0;
 if($24){label=4;break;}else{var $e_020_i=$e_0_i;label=3;break;}
 case 4: 
 var $25=(($lm_027_i+12)|0);
 var $e_121_i=HEAP32[(($25)>>2)];
 var $26=($e_121_i|0)==0;
 if($26){label=6;break;}else{var $e_122_i=$e_121_i;label=5;break;}
 case 5: 
 var $e_122_i;
 var $27=(($e_122_i)|0);
 var $ld$8$0=(($27)|0);
 var $28$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$9$1)>>2)];
 var $29=(($e_122_i+16)|0);
 var $st$10$0=(($29)|0);
 HEAP32[(($st$10$0)>>2)]=$28$0;
 var $st$11$1=(($29+4)|0);
 HEAP32[(($st$11$1)>>2)]=$28$1;
 var $30=(($e_122_i+8)|0);
 var $ld$12$0=(($30)|0);
 var $31$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$13$1)>>2)];
 var $32=(($e_122_i+24)|0);
 var $st$14$0=(($32)|0);
 HEAP32[(($st$14$0)>>2)]=$31$0;
 var $st$15$1=(($32+4)|0);
 HEAP32[(($st$15$1)>>2)]=$31$1;
 var $33=(($e_122_i+84)|0);
 HEAP32[(($33)>>2)]=2;
 var $34=(($e_122_i+100)|0);
 HEAP32[(($34)>>2)]=-1;
 var $35=(($e_122_i+112)|0);
 var $e_1_i=HEAP32[(($35)>>2)];
 var $36=($e_1_i|0)==0;
 if($36){label=6;break;}else{var $e_122_i=$e_1_i;label=5;break;}
 case 6: 
 var $37=(($lm_027_i+16)|0);
 var $lm_0_i=HEAP32[(($37)>>2)];
 var $38=($lm_0_i|0)==0;
 if($38){label=7;break;}else{var $lm_027_i=$lm_0_i;label=2;break;}
 case 7: 
 var $39=(($this+44)|0);
 HEAP32[(($39)>>2)]=0;
 var $40=(($this+48)|0);
 HEAP32[(($40)>>2)]=0;
 var $41=(($this+52)|0);
 HEAP32[(($41)>>2)]=0;
 __ZN10ClipperLib7Clipper17DisposeAllPolyPtsEv($this);
 var $42=HEAP32[(($1)>>2)];
 var $43=((($42)-(12))|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $_sum=((($45)+(8))|0);
 var $46=(($6+$_sum)|0);
 var $47=$46;
 var $lm_011=HEAP32[(($47)>>2)];
 var $48=($lm_011|0)==0;
 if($48){label=25;break;}else{var $lm_012=$lm_011;label=8;break;}
 case 8: 
 var $lm_012;
 var $49=(($lm_012)|0);
 var $ld$16$0=(($49)|0);
 var $50$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($49+4)|0);
 var $50$1=HEAP32[(($ld$17$1)>>2)];
 var $51=HEAP32[(($39)>>2)];
 var $52=($51|0)==0;
 if($52){label=9;break;}else{label=10;break;}
 case 9: 
 var $54=__Znwj(16);
 var $55=$54;
 HEAP32[(($39)>>2)]=$55;
 var $56=(($54+8)|0);
 var $57=$56;
 HEAP32[(($57)>>2)]=0;
 var $58=$54;
 var $st$18$0=(($58)|0);
 HEAP32[(($st$18$0)>>2)]=$50$0;
 var $st$19$1=(($58+4)|0);
 HEAP32[(($st$19$1)>>2)]=$50$1;
 var $86=$55;label=16;break;
 case 10: 
 var $60=(($51)|0);
 var $ld$20$0=(($60)|0);
 var $61$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($60+4)|0);
 var $61$1=HEAP32[(($ld$21$1)>>2)];
 var $62=(($61$1|0) < ($50$1|0)) | (((($61$1|0) == ($50$1|0) & ($61$0>>>0) <  ($50$0>>>0))));
 if($62){label=11;break;}else{var $sb2_0_i4=$51;label=12;break;}
 case 11: 
 var $64=__Znwj(16);
 var $65=$64;
 var $66=$64;
 var $st$22$0=(($66)|0);
 HEAP32[(($st$22$0)>>2)]=$50$0;
 var $st$23$1=(($66+4)|0);
 HEAP32[(($st$23$1)>>2)]=$50$1;
 var $67=(($64+8)|0);
 var $68=$67;
 HEAP32[(($68)>>2)]=$51;
 HEAP32[(($39)>>2)]=$65;
 var $86=$65;label=16;break;
 case 12: 
 var $sb2_0_i4;
 var $69=(($sb2_0_i4+8)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=14;break;}else{label=13;break;}
 case 13: 
 var $73=(($70)|0);
 var $ld$24$0=(($73)|0);
 var $74$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($73+4)|0);
 var $74$1=HEAP32[(($ld$25$1)>>2)];
 var $75=(($74$1|0) < ($50$1|0)) | (((($74$1|0) == ($50$1|0) & ($74$0>>>0) <  ($50$0>>>0))));
 if($75){label=14;break;}else{var $sb2_0_i4=$70;label=12;break;}
 case 14: 
 var $76=(($sb2_0_i4)|0);
 var $ld$26$0=(($76)|0);
 var $77$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($76+4)|0);
 var $77$1=HEAP32[(($ld$27$1)>>2)];
 var $78=(($77$0|0) == ($50$0|0)) & (($77$1|0) == ($50$1|0));
 if($78){var $86=$51;label=16;break;}else{label=15;break;}
 case 15: 
 var $80=__Znwj(16);
 var $81=$80;
 var $82=$80;
 var $st$28$0=(($82)|0);
 HEAP32[(($st$28$0)>>2)]=$50$0;
 var $st$29$1=(($82+4)|0);
 HEAP32[(($st$29$1)>>2)]=$50$1;
 var $83=HEAP32[(($69)>>2)];
 var $84=(($80+8)|0);
 var $85=$84;
 HEAP32[(($85)>>2)]=$83;
 HEAP32[(($69)>>2)]=$81;
 var $_pr_pre=HEAP32[(($39)>>2)];
 var $86=$_pr_pre;label=16;break;
 case 16: 
 var $86;
 var $87=(($lm_012+8)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+40)|0);
 var $ld$30$0=(($89)|0);
 var $90$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($89+4)|0);
 var $90$1=HEAP32[(($ld$31$1)>>2)];
 var $91=($86|0)==0;
 if($91){label=17;break;}else{label=18;break;}
 case 17: 
 var $93=__Znwj(16);
 var $94=$93;
 HEAP32[(($39)>>2)]=$94;
 var $95=(($93+8)|0);
 var $96=$95;
 HEAP32[(($96)>>2)]=0;
 var $97=$93;
 var $st$32$0=(($97)|0);
 HEAP32[(($st$32$0)>>2)]=$90$0;
 var $st$33$1=(($97+4)|0);
 HEAP32[(($st$33$1)>>2)]=$90$1;
 label=24;break;
 case 18: 
 var $99=(($86)|0);
 var $ld$34$0=(($99)|0);
 var $100$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($99+4)|0);
 var $100$1=HEAP32[(($ld$35$1)>>2)];
 var $101=(($100$1|0) < ($90$1|0)) | (((($100$1|0) == ($90$1|0) & ($100$0>>>0) <  ($90$0>>>0))));
 if($101){label=19;break;}else{var $sb2_0_i=$86;label=20;break;}
 case 19: 
 var $103=__Znwj(16);
 var $104=$103;
 var $105=$103;
 var $st$36$0=(($105)|0);
 HEAP32[(($st$36$0)>>2)]=$90$0;
 var $st$37$1=(($105+4)|0);
 HEAP32[(($st$37$1)>>2)]=$90$1;
 var $106=(($103+8)|0);
 var $107=$106;
 HEAP32[(($107)>>2)]=$86;
 HEAP32[(($39)>>2)]=$104;
 label=24;break;
 case 20: 
 var $sb2_0_i;
 var $108=(($sb2_0_i+8)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($109|0)==0;
 if($110){label=22;break;}else{label=21;break;}
 case 21: 
 var $112=(($109)|0);
 var $ld$38$0=(($112)|0);
 var $113$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($112+4)|0);
 var $113$1=HEAP32[(($ld$39$1)>>2)];
 var $114=(($113$1|0) < ($90$1|0)) | (((($113$1|0) == ($90$1|0) & ($113$0>>>0) <  ($90$0>>>0))));
 if($114){label=22;break;}else{var $sb2_0_i=$109;label=20;break;}
 case 22: 
 var $115=(($sb2_0_i)|0);
 var $ld$40$0=(($115)|0);
 var $116$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($115+4)|0);
 var $116$1=HEAP32[(($ld$41$1)>>2)];
 var $117=(($116$0|0) == ($90$0|0)) & (($116$1|0) == ($90$1|0));
 if($117){label=24;break;}else{label=23;break;}
 case 23: 
 var $119=__Znwj(16);
 var $120=$119;
 var $121=$119;
 var $st$42$0=(($121)|0);
 HEAP32[(($st$42$0)>>2)]=$90$0;
 var $st$43$1=(($121+4)|0);
 HEAP32[(($st$43$1)>>2)]=$90$1;
 var $122=HEAP32[(($108)>>2)];
 var $123=(($119+8)|0);
 var $124=$123;
 HEAP32[(($124)>>2)]=$122;
 HEAP32[(($108)>>2)]=$120;
 label=24;break;
 case 24: 
 var $125=(($lm_012+16)|0);
 var $lm_0=HEAP32[(($125)>>2)];
 var $126=($lm_0|0)==0;
 if($126){label=25;break;}else{var $lm_012=$lm_0;label=8;break;}
 case 25: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n20_N10ClipperLib7Clipper5ResetEv($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 __ZN10ClipperLib7Clipper5ResetEv($8);
 return;
}
function __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS3_INS_8IntPointENS2_9allocatorIS4_EEEENS5_IS7_EEEENS_12PolyFillTypeESB_($this,$clipType,$solution,$subjFillType,$clipFillType){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+60)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{var $_0=0;label=11;break;}
 case 2: 
 HEAP8[($1)]=1;
 var $6=(($solution+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($solution)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($7|0);
 if($10){label=8;break;}else{var $11=$7;label=3;break;}
 case 3: 
 var $11;
 var $12=((($11)-(12))|0);
 HEAP32[(($6)>>2)]=$12;
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=($14|0)==0;
 if($16){var $17=$12;label=4;break;}else{label=5;break;}
 case 4: 
 var $17;
 var $18=($9|0)==($17|0);
 if($18){label=8;break;}else{var $11=$17;label=3;break;}
 case 5: 
 var $19=((($11)-(12)+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($14|0)==($20|0);
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 var $scevgep_i_i_i_i=((($20)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $22=(((-$15))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$22)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $23=$uglygep29_i_i_i_i>>>4;
 var $24=$23^-1;
 var $scevgep30_i_i_i_i=(($20+($24<<4))|0);
 HEAP32[(($19)>>2)]=$scevgep30_i_i_i_i;
 label=7;break;
 case 7: 
 var $25=$14;
 __ZdlPv($25);
 var $_pre_i=HEAP32[(($6)>>2)];
 var $17=$_pre_i;label=4;break;
 case 8: 
 var $26=(($this+68)|0);
 HEAP32[(($26)>>2)]=$subjFillType;
 var $27=(($this+64)|0);
 HEAP32[(($27)>>2)]=$clipFillType;
 var $28=(($this+40)|0);
 HEAP32[(($28)>>2)]=$clipType;
 var $29=$this;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($this,0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 __ZN10ClipperLib7Clipper11BuildResultERNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEE($this,$solution);
 label=10;break;
 case 10: 
 HEAP8[($1)]=0;
 var $_0=$33;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper11BuildResultERNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEE($this,$polys){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=(($polys+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($polys)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=(((($15|0))/(12))&-1);
 var $17=($16>>>0)<($8>>>0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=((($8)-($16))|0);
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEj($polys,$19);
 label=7;break;
 case 3: 
 var $21=($16>>>0)>($8>>>0);
 if($21){label=4;break;}else{label=7;break;}
 case 4: 
 var $23=(($12+((($8)*(12))&-1))|0);
 var $24=($23|0)==($10|0);
 if($24){label=7;break;}else{var $25=$10;label=5;break;}
 case 5: 
 var $25;
 var $26=((($25)-(12))|0);
 HEAP32[(($9)>>2)]=$26;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=($28|0)==0;
 if($30){var $31=$26;label=6;break;}else{label=8;break;}
 case 6: 
 var $31;
 var $32=($23|0)==($31|0);
 if($32){label=7;break;}else{var $25=$31;label=5;break;}
 case 7: 
 var $33=HEAP32[(($1)>>2)];
 var $34=HEAP32[(($3)>>2)];
 var $35=($33|0)==($34|0);
 if($35){var $k_0_lcssa=0;label=26;break;}else{var $i_080=0;var $k_081=0;var $43=$34;label=11;break;}
 case 8: 
 var $36=((($25)-(12)+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($28|0)==($37|0);
 if($38){label=10;break;}else{label=9;break;}
 case 9: 
 var $scevgep_i_i_i_i=((($37)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $39=(((-$29))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$39)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $40=$uglygep29_i_i_i_i>>>4;
 var $41=$40^-1;
 var $scevgep30_i_i_i_i=(($37+($41<<4))|0);
 HEAP32[(($36)>>2)]=$scevgep30_i_i_i_i;
 label=10;break;
 case 10: 
 var $42=$28;
 __ZdlPv($42);
 var $_pre_i=HEAP32[(($9)>>2)];
 var $31=$_pre_i;label=6;break;
 case 11: 
 var $43;
 var $k_081;
 var $i_080;
 var $44=(($43+($i_080<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){var $k_1=$k_081;var $96=$43;label=25;break;}else{label=12;break;}
 case 12: 
 var $50=HEAP32[(($11)>>2)];
 var $51=(($50+((($k_081)*(12))&-1))|0);
 var $52=(($51)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($50+((($k_081)*(12))&-1)+4)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($53|0)==($55|0);
 if($56){var $61=$47;var $60=$53;label=14;break;}else{label=13;break;}
 case 13: 
 var $57=$53;
 var $scevgep84=((($55)-(16))|0);
 var $scevgep8485=$scevgep84;
 var $58=(((-$57))|0);
 var $uglygep=(($scevgep8485+$58)|0);
 var $uglygep86=$uglygep;
 var $59=$uglygep86>>>4;
 var $scevgep84_sum=$59^-1;
 var $scevgep87=(($55+($scevgep84_sum<<4))|0);
 HEAP32[(($54)>>2)]=$scevgep87;
 var $_pre94=HEAP32[(($3)>>2)];
 var $_phi_trans_insert=(($_pre94+($i_080<<2))|0);
 var $_pre95=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert96=(($_pre95+16)|0);
 var $_pre97=HEAP32[(($_phi_trans_insert96)>>2)];
 var $61=$_pre97;var $60=$scevgep87;label=14;break;
 case 14: 
 var $60;
 var $61;
 var $62=(($50+((($k_081)*(12))&-1)+8)|0);
 var $p_0=$61;var $63=$60;label=15;break;
 case 15: 
 var $63;
 var $p_0;
 var $64=(($p_0+8)|0);
 var $65=HEAP32[(($62)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=19;break;}else{label=16;break;}
 case 16: 
 var $68=($63|0)==0;
 if($68){var $72=0;label=18;break;}else{label=17;break;}
 case 17: 
 var $70=$63;
 var $71=$64;
 assert(16 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];HEAP32[((($70)+(8))>>2)]=HEAP32[((($71)+(8))>>2)];HEAP32[((($70)+(12))>>2)]=HEAP32[((($71)+(12))>>2)];
 var $_pre99=HEAP32[(($54)>>2)];
 var $72=$_pre99;label=18;break;
 case 18: 
 var $72;
 var $73=(($72+16)|0);
 HEAP32[(($54)>>2)]=$73;
 label=20;break;
 case 19: 
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($51,$64);
 label=20;break;
 case 20: 
 var $75=(($p_0+24)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=HEAP32[(($3)>>2)];
 var $78=(($77+($i_080<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+16)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($76|0)==($81|0);
 var $83=HEAP32[(($54)>>2)];
 if($82){label=21;break;}else{var $p_0=$76;var $63=$83;label=15;break;}
 case 21: 
 var $85=HEAP32[(($52)>>2)];
 var $86=$85;
 var $87=$83;
 var $88=((($87)-($86))|0);
 var $89=$88>>4;
 var $90=($89>>>0)<3;
 if($90){label=22;break;}else{label=24;break;}
 case 22: 
 var $91=($85|0)==($83|0);
 if($91){var $k_1=$k_081;var $96=$77;label=25;break;}else{label=23;break;}
 case 23: 
 var $scevgep89=((($83)-(16))|0);
 var $scevgep8990=$scevgep89;
 var $92=(((-$86))|0);
 var $uglygep91=(($scevgep8990+$92)|0);
 var $uglygep9192=$uglygep91;
 var $93=$uglygep9192>>>4;
 var $scevgep89_sum=$93^-1;
 var $scevgep93=(($83+($scevgep89_sum<<4))|0);
 HEAP32[(($54)>>2)]=$scevgep93;
 var $_pre_pre=HEAP32[(($3)>>2)];
 var $k_1=$k_081;var $96=$_pre_pre;label=25;break;
 case 24: 
 var $95=((($k_081)+(1))|0);
 var $k_1=$95;var $96=$77;label=25;break;
 case 25: 
 var $96;
 var $k_1;
 var $97=((($i_080)+(1))|0);
 var $98=HEAP32[(($1)>>2)];
 var $99=$98;
 var $100=$96;
 var $101=((($99)-($100))|0);
 var $102=$101>>2;
 var $103=($97>>>0)<($102>>>0);
 if($103){var $i_080=$97;var $k_081=$k_1;var $43=$96;label=11;break;}else{var $k_0_lcssa=$k_1;label=26;break;}
 case 26: 
 var $k_0_lcssa;
 var $104=HEAP32[(($9)>>2)];
 var $105=HEAP32[(($11)>>2)];
 var $106=$104;
 var $107=$105;
 var $108=((($106)-($107))|0);
 var $109=(((($108|0))/(12))&-1);
 var $110=($109>>>0)<($k_0_lcssa>>>0);
 if($110){label=27;break;}else{label=28;break;}
 case 27: 
 var $112=((($k_0_lcssa)-($109))|0);
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEj($polys,$112);
 label=35;break;
 case 28: 
 var $114=($109>>>0)>($k_0_lcssa>>>0);
 if($114){label=29;break;}else{label=35;break;}
 case 29: 
 var $116=(($105+((($k_0_lcssa)*(12))&-1))|0);
 var $117=($116|0)==($104|0);
 if($117){label=35;break;}else{var $118=$104;label=30;break;}
 case 30: 
 var $118;
 var $119=((($118)-(12))|0);
 HEAP32[(($9)>>2)]=$119;
 var $120=(($119)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$121;
 var $123=($121|0)==0;
 if($123){var $124=$119;label=31;break;}else{label=32;break;}
 case 31: 
 var $124;
 var $125=($116|0)==($124|0);
 if($125){label=35;break;}else{var $118=$124;label=30;break;}
 case 32: 
 var $126=((($118)-(12)+4)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($121|0)==($127|0);
 if($128){label=34;break;}else{label=33;break;}
 case 33: 
 var $scevgep_i_i_i_i68=((($127)-(16))|0);
 var $scevgep28_i_i_i_i69=$scevgep_i_i_i_i68;
 var $129=(((-$122))|0);
 var $uglygep_i_i_i_i70=(($scevgep28_i_i_i_i69+$129)|0);
 var $uglygep29_i_i_i_i71=$uglygep_i_i_i_i70;
 var $130=$uglygep29_i_i_i_i71>>>4;
 var $131=$130^-1;
 var $scevgep30_i_i_i_i72=(($127+($131<<4))|0);
 HEAP32[(($126)>>2)]=$scevgep30_i_i_i_i72;
 label=34;break;
 case 34: 
 var $132=$121;
 __ZdlPv($132);
 var $_pre_i74=HEAP32[(($9)>>2)];
 var $124=$_pre_i74;label=31;break;
 case 35: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper7ExecuteENS_8ClipTypeERNSt3__16vectorINS_9ExPolygonENS2_9allocatorIS4_EEEENS_12PolyFillTypeES9_($this,$clipType,$solution,$subjFillType,$clipFillType){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+60)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{var $_0=0;label=9;break;}
 case 2: 
 HEAP8[($1)]=1;
 var $6=(($solution+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($solution)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=6;break;}else{var $11=$7;label=3;break;}
 case 3: 
 var $11;
 var $12=((($11)-(24))|0);
 HEAP32[(($6)>>2)]=$12;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 var $_pre_i=HEAP32[(($6)>>2)];
 var $13=($9|0)==($_pre_i|0);
 if($13){label=6;break;}else{var $11=$_pre_i;label=3;break;}
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=$15$0;
 ___cxa_call_unexpected($16);
 throw "Reached an unreachable!";
 case 6: 
 var $17=(($this+68)|0);
 HEAP32[(($17)>>2)]=$subjFillType;
 var $18=(($this+64)|0);
 HEAP32[(($18)>>2)]=$clipFillType;
 var $19=(($this+40)|0);
 HEAP32[(($19)>>2)]=$clipType;
 var $20=$this;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+16)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($this,1);
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 __ZN10ClipperLib7Clipper13BuildResultExERNSt3__16vectorINS_9ExPolygonENS1_9allocatorIS3_EEEE($this,$solution);
 label=8;break;
 case 8: 
 HEAP8[($1)]=0;
 var $_0=$24;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper13BuildResultExERNSt3__16vectorINS_9ExPolygonENS1_9allocatorIS3_EEEE($this,$polys){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $epg=sp;
 var $pg=(sp)+(24);
 var $1=(($polys+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($polys)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=5;break;}else{var $6=$2;label=2;break;}
 case 2: 
 var $6;
 var $7=((($6)-(24))|0);
 HEAP32[(($1)>>2)]=$7;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 var $_pre_i=HEAP32[(($1)>>2)];
 var $8=($4|0)==($_pre_i|0);
 if($8){label=5;break;}else{var $6=$_pre_i;label=2;break;}
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 var $11=$10$0;
 ___cxa_call_unexpected($11);
 throw "Reached an unreachable!";
 case 5: 
 var $12=(($this+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($this+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 __ZNSt3__16vectorIN10ClipperLib9ExPolygonENS_9allocatorIS2_EEE7reserveEj($polys,$19);
 var $20=HEAP32[(($12)>>2)];
 var $21=HEAP32[(($14)>>2)];
 var $22=($20|0)==($21|0);
 if($22){var $k_0_lcssa=0;label=92;break;}else{label=6;break;}
 case 6: 
 var $23=$epg;
 var $24=(($epg+4)|0);
 var $25=(($epg+8)|0);
 var $26=(($epg)|0);
 var $27=(($epg)|0);
 var $28=(($epg+12)|0);
 var $29=(($epg+16)|0);
 var $30=(($polys+8)|0);
 var $31=(($pg)|0);
 var $32=(($pg+4)|0);
 var $33=(($pg+8)|0);
 var $34=(($epg+20)|0);
 var $35=(($epg+12)|0);
 var $i_0193=0;var $k_0194=0;var $37=$21;label=7;break;
 case 7: 
 var $37;
 var $k_0194;
 var $i_0193;
 var $38=(($37+($i_0193<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){var $k_0_lcssa=$k_0194;label=92;break;}else{label=8;break;}
 case 8: 
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0; HEAP32[((($23)+(12))>>2)]=0; HEAP32[((($23)+(16))>>2)]=0; HEAP32[((($23)+(20))>>2)]=0;
 var $44=HEAP32[(($38)>>2)];
 var $45=(($44+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $p_0=$46;var $49=0;var $48=0;label=9;break;
 case 9: 
 var $48;
 var $49;
 var $p_0;
 var $50=(($p_0+8)|0);
 var $51=($49|0)==($48|0);
 if($51){label=13;break;}else{label=10;break;}
 case 10: 
 var $53=($49|0)==0;
 if($53){var $57=0;label=12;break;}else{label=11;break;}
 case 11: 
 var $55=$49;
 var $56=$50;
 assert(16 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($56)+(8))>>2)];HEAP32[((($55)+(12))>>2)]=HEAP32[((($56)+(12))>>2)];
 var $_pre=HEAP32[(($24)>>2)];
 var $57=$_pre;label=12;break;
 case 12: 
 var $57;
 var $58=(($57+16)|0);
 HEAP32[(($24)>>2)]=$58;
 label=14;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($26,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=18;break; }
 case 14: 
 var $60=(($p_0+24)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=HEAP32[(($14)>>2)];
 var $63=(($62+($i_0193<<2))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($61|0)==($66|0);
 if($67){label=16;break;}else{label=15;break;}
 case 15: 
 var $_pre211=HEAP32[(($24)>>2)];
 var $_pre212=HEAP32[(($25)>>2)];
 var $p_0=$61;var $49=$_pre211;var $48=$_pre212;label=9;break;
 case 16: 
 var $69=((($i_0193)+(1))|0);
 var $70=HEAP32[(($24)>>2)];
 var $71=HEAP32[(($27)>>2)];
 var $72=$70;
 var $73=$71;
 var $74=((($72)-($73))|0);
 var $75=$74>>4;
 var $76=($75>>>0)<3;
 if($76){var $k_1=$k_0194;var $i_2=$69;label=65;break;}else{label=17;break;}
 case 17: 
 var $77=HEAP32[(($12)>>2)];
 var $78=$77;
 var $79=$62;
 var $80=((($78)-($79))|0);
 var $81=$80>>2;
 var $82=($69>>>0)<($81>>>0);
 if($82){var $i_1181=$69;var $86=$62;label=21;break;}else{var $i_1_lcssa=$69;label=58;break;}
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=20;break;
 case 19: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=20;break;
 case 20: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $84=$lpad_phi$0;
 var $85=$lpad_phi$1;
 var $_0=$85;var $_0114=$84;label=79;break;
 case 21: 
 var $86;
 var $i_1181;
 var $87=(($86+($i_1181<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)==0;
 if($91){var $i_1_lcssa=$i_1181;label=58;break;}else{label=22;break;}
 case 22: 
 var $93=(($88+4)|0);
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){var $i_1_lcssa=$i_1181;label=58;break;}else{label=23;break;}
 case 23: 
 HEAP32[(($31)>>2)]=0;
 HEAP32[(($32)>>2)]=0;
 HEAP32[(($33)>>2)]=0;
 var $98=HEAP32[(($87)>>2)];
 var $99=(($98+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $p_1=$100;var $103=0;var $102=0;label=24;break;
 case 24: 
 var $102;
 var $103;
 var $p_1;
 var $104=(($p_1+8)|0);
 var $105=($103|0)==($102|0);
 if($105){label=28;break;}else{label=25;break;}
 case 25: 
 var $107=($103|0)==0;
 if($107){label=27;break;}else{label=26;break;}
 case 26: 
 var $109=$103;
 var $110=$104;
 assert(16 % 1 === 0);HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[((($109)+(4))>>2)]=HEAP32[((($110)+(4))>>2)];HEAP32[((($109)+(8))>>2)]=HEAP32[((($110)+(8))>>2)];HEAP32[((($109)+(12))>>2)]=HEAP32[((($110)+(12))>>2)];
 label=27;break;
 case 27: 
 var $111=(($103+16)|0);
 HEAP32[(($32)>>2)]=$111;
 label=29;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($pg,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=52;break; }
 case 29: 
 var $113=(($p_1+24)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=HEAP32[(($14)>>2)];
 var $116=(($115+($i_1181<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+16)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($114|0)==($119|0);
 if($120){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre214=HEAP32[(($32)>>2)];
 var $_pre215=HEAP32[(($33)>>2)];
 var $p_1=$114;var $103=$_pre214;var $102=$_pre215;label=24;break;
 case 31: 
 var $122=HEAP32[(($29)>>2)];
 var $123=HEAP32[(($34)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=46;break;}else{label=32;break;}
 case 32: 
 var $126=($122|0)==0;
 if($126){label=45;break;}else{label=33;break;}
 case 33: 
 var $128=(($122)|0);
 HEAP32[(($128)>>2)]=0;
 var $129=(($122+4)|0);
 HEAP32[(($129)>>2)]=0;
 var $130=(($122+8)|0);
 HEAP32[(($130)>>2)]=0;
 var $131=HEAP32[(($32)>>2)];
 var $132=HEAP32[(($31)>>2)];
 var $133=$131;
 var $134=$132;
 var $135=((($133)-($134))|0);
 var $136=$135>>4;
 var $137=($136|0)==0;
 if($137){label=45;break;}else{label=34;break;}
 case 34: 
 var $139=($136>>>0)>268435455;
 if($139){label=35;break;}else{label=36;break;}
 case 35: 
 var $141=$122;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $142=(function() { try { __THREW__ = 0; return __Znwj($135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=41;break; }
 case 37: 
 var $144=$142;
 HEAP32[(($129)>>2)]=$144;
 HEAP32[(($128)>>2)]=$144;
 var $145=(($144+($136<<4))|0);
 HEAP32[(($130)>>2)]=$145;
 var $146=HEAP32[(($31)>>2)];
 var $147=HEAP32[(($32)>>2)];
 var $148=($146|0)==($147|0);
 if($148){label=45;break;}else{var $_011_i_i_i=$146;var $149=$144;label=38;break;}
 case 38: 
 var $149;
 var $_011_i_i_i;
 var $150=($149|0)==0;
 if($150){var $154=0;label=40;break;}else{label=39;break;}
 case 39: 
 var $152=$149;
 var $153=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];HEAP32[((($152)+(12))>>2)]=HEAP32[((($153)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($129)>>2)];
 var $154=$_pre12_i_i_i;label=40;break;
 case 40: 
 var $154;
 var $155=(($154+16)|0);
 HEAP32[(($129)>>2)]=$155;
 var $156=(($_011_i_i_i+16)|0);
 var $157=($156|0)==($147|0);
 if($157){label=45;break;}else{var $_011_i_i_i=$156;var $149=$155;label=38;break;}
 case 41: 
 var $159$0 = ___cxa_find_matching_catch(-1, -1); var $159$1 = tempRet0;
 var $160=HEAP32[(($128)>>2)];
 var $161=$160;
 var $162=($160|0)==0;
 if($162){var $eh_lpad_body$1=$159$1;var $eh_lpad_body$0=$159$0;label=54;break;}else{label=42;break;}
 case 42: 
 var $163=HEAP32[(($129)>>2)];
 var $164=($160|0)==($163|0);
 if($164){label=44;break;}else{label=43;break;}
 case 43: 
 var $scevgep_i_i_i=((($163)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $165=(((-$161))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$165)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $166=$uglygep29_i_i_i>>>4;
 var $167=$166^-1;
 var $scevgep30_i_i_i=(($163+($167<<4))|0);
 HEAP32[(($129)>>2)]=$scevgep30_i_i_i;
 label=44;break;
 case 44: 
 var $168=$160;
 __ZdlPv($168);
 var $eh_lpad_body$1=$159$1;var $eh_lpad_body$0=$159$0;label=54;break;
 case 45: 
 var $169=HEAP32[(($29)>>2)];
 var $170=(($169+12)|0);
 HEAP32[(($29)>>2)]=$170;
 label=47;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE21__push_back_slow_pathIKS5_EEvRT_($35,$pg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=53;break; }
 case 47: 
 var $172=((($i_1181)+(1))|0);
 var $173=HEAP32[(($31)>>2)];
 var $174=$173;
 var $175=($173|0)==0;
 if($175){label=48;break;}else{label=49;break;}
 case 48: 
 var $176=HEAP32[(($12)>>2)];
 var $177=HEAP32[(($14)>>2)];
 var $178=$176;
 var $179=$177;
 var $180=((($178)-($179))|0);
 var $181=$180>>2;
 var $182=($172>>>0)<($181>>>0);
 if($182){var $i_1181=$172;var $86=$177;label=21;break;}else{var $i_1_lcssa=$172;label=58;break;}
 case 49: 
 var $183=HEAP32[(($32)>>2)];
 var $184=($173|0)==($183|0);
 if($184){label=51;break;}else{label=50;break;}
 case 50: 
 var $scevgep_i_i_i119=((($183)-(16))|0);
 var $scevgep28_i_i_i120=$scevgep_i_i_i119;
 var $185=(((-$174))|0);
 var $uglygep_i_i_i121=(($scevgep28_i_i_i120+$185)|0);
 var $uglygep29_i_i_i122=$uglygep_i_i_i121;
 var $186=$uglygep29_i_i_i122>>>4;
 var $187=$186^-1;
 var $scevgep30_i_i_i123=(($183+($187<<4))|0);
 HEAP32[(($32)>>2)]=$scevgep30_i_i_i123;
 label=51;break;
 case 51: 
 var $188=$173;
 __ZdlPv($188);
 label=48;break;
 case 52: 
 var $lpad_loopexit167$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit167$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit167$1;var $eh_lpad_body$0=$lpad_loopexit167$0;label=54;break;
 case 53: 
 var $lpad_nonloopexit168$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit168$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit168$1;var $eh_lpad_body$0=$lpad_nonloopexit168$0;label=54;break;
 case 54: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $189=$eh_lpad_body$0;
 var $190=$eh_lpad_body$1;
 var $191=HEAP32[(($31)>>2)];
 var $192=$191;
 var $193=($191|0)==0;
 if($193){var $_0=$190;var $_0114=$189;label=79;break;}else{label=55;break;}
 case 55: 
 var $194=HEAP32[(($32)>>2)];
 var $195=($191|0)==($194|0);
 if($195){label=57;break;}else{label=56;break;}
 case 56: 
 var $scevgep_i_i_i127=((($194)-(16))|0);
 var $scevgep28_i_i_i128=$scevgep_i_i_i127;
 var $196=(((-$192))|0);
 var $uglygep_i_i_i129=(($scevgep28_i_i_i128+$196)|0);
 var $uglygep29_i_i_i130=$uglygep_i_i_i129;
 var $197=$uglygep29_i_i_i130>>>4;
 var $198=$197^-1;
 var $scevgep30_i_i_i131=(($194+($198<<4))|0);
 HEAP32[(($32)>>2)]=$scevgep30_i_i_i131;
 label=57;break;
 case 57: 
 var $199=$191;
 __ZdlPv($199);
 var $_0=$190;var $_0114=$189;label=79;break;
 case 58: 
 var $i_1_lcssa;
 var $200=HEAP32[(($1)>>2)];
 var $201=HEAP32[(($30)>>2)];
 var $202=($200|0)==($201|0);
 if($202){label=63;break;}else{label=59;break;}
 case 59: 
 var $204=($200|0)==0;
 if($204){var $206=0;label=62;break;}else{label=60;break;}
 case 60: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonC1ERKS0_($200,$epg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=19;break; }
 case 61: 
 var $_pre213=HEAP32[(($1)>>2)];
 var $206=$_pre213;label=62;break;
 case 62: 
 var $206;
 var $207=(($206+24)|0);
 HEAP32[(($1)>>2)]=$207;
 label=64;break;
 case 63: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib9ExPolygonENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($polys,$epg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=19;break; }
 case 64: 
 var $209=((($k_0194)+(1))|0);
 var $k_1=$209;var $i_2=$i_1_lcssa;label=65;break;
 case 65: 
 var $i_2;
 var $k_1;
 var $210=HEAP32[(($28)>>2)];
 var $211=($210|0)==0;
 if($211){label=74;break;}else{label=66;break;}
 case 66: 
 var $212=HEAP32[(($29)>>2)];
 var $213=($210|0)==($212|0);
 if($213){var $229=$210;label=73;break;}else{var $214=$212;label=67;break;}
 case 67: 
 var $214;
 var $215=((($214)-(12))|0);
 HEAP32[(($29)>>2)]=$215;
 var $216=(($215)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=$217;
 var $219=($217|0)==0;
 if($219){var $220=$215;label=68;break;}else{label=69;break;}
 case 68: 
 var $220;
 var $221=($210|0)==($220|0);
 if($221){label=72;break;}else{var $214=$220;label=67;break;}
 case 69: 
 var $222=((($214)-(12)+4)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($217|0)==($223|0);
 if($224){label=71;break;}else{label=70;break;}
 case 70: 
 var $scevgep_i_i_i_i_i_i_i=((($223)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $225=(((-$218))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$225)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $226=$uglygep29_i_i_i_i_i_i_i>>>4;
 var $227=$226^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($223+($227<<4))|0);
 HEAP32[(($222)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=71;break;
 case 71: 
 var $228=$217;
 __ZdlPv($228);
 var $_pre29_i_i_i_i=HEAP32[(($29)>>2)];
 var $220=$_pre29_i_i_i_i;label=68;break;
 case 72: 
 var $_pre_i_i_i_i=HEAP32[(($28)>>2)];
 var $229=$_pre_i_i_i_i;label=73;break;
 case 73: 
 var $229;
 var $230=$229;
 __ZdlPv($230);
 label=74;break;
 case 74: 
 var $231=HEAP32[(($27)>>2)];
 var $232=$231;
 var $233=($231|0)==0;
 if($233){label=75;break;}else{label=76;break;}
 case 75: 
 var $234=HEAP32[(($12)>>2)];
 var $235=HEAP32[(($14)>>2)];
 var $236=$234;
 var $237=$235;
 var $238=((($236)-($237))|0);
 var $239=$238>>2;
 var $240=($i_2>>>0)<($239>>>0);
 if($240){var $i_0193=$i_2;var $k_0194=$k_1;var $37=$235;label=7;break;}else{var $k_0_lcssa=$k_1;label=92;break;}
 case 76: 
 var $241=HEAP32[(($24)>>2)];
 var $242=($231|0)==($241|0);
 if($242){label=78;break;}else{label=77;break;}
 case 77: 
 var $scevgep_i_i_i_i=((($241)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $243=(((-$232))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$243)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $244=$uglygep29_i_i_i_i>>>4;
 var $245=$244^-1;
 var $scevgep30_i_i_i_i=(($241+($245<<4))|0);
 HEAP32[(($24)>>2)]=$scevgep30_i_i_i_i;
 label=78;break;
 case 78: 
 var $246=$231;
 __ZdlPv($246);
 label=75;break;
 case 79: 
 var $_0114;
 var $_0;
 var $247=HEAP32[(($28)>>2)];
 var $248=($247|0)==0;
 if($248){label=88;break;}else{label=80;break;}
 case 80: 
 var $249=HEAP32[(($29)>>2)];
 var $250=($247|0)==($249|0);
 if($250){var $266=$247;label=87;break;}else{var $251=$249;label=81;break;}
 case 81: 
 var $251;
 var $252=((($251)-(12))|0);
 HEAP32[(($29)>>2)]=$252;
 var $253=(($252)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=$254;
 var $256=($254|0)==0;
 if($256){var $257=$252;label=82;break;}else{label=83;break;}
 case 82: 
 var $257;
 var $258=($247|0)==($257|0);
 if($258){label=86;break;}else{var $251=$257;label=81;break;}
 case 83: 
 var $259=((($251)-(12)+4)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($254|0)==($260|0);
 if($261){label=85;break;}else{label=84;break;}
 case 84: 
 var $scevgep_i_i_i_i_i_i_i139=((($260)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i140=$scevgep_i_i_i_i_i_i_i139;
 var $262=(((-$255))|0);
 var $uglygep_i_i_i_i_i_i_i141=(($scevgep28_i_i_i_i_i_i_i140+$262)|0);
 var $uglygep29_i_i_i_i_i_i_i142=$uglygep_i_i_i_i_i_i_i141;
 var $263=$uglygep29_i_i_i_i_i_i_i142>>>4;
 var $264=$263^-1;
 var $scevgep30_i_i_i_i_i_i_i143=(($260+($264<<4))|0);
 HEAP32[(($259)>>2)]=$scevgep30_i_i_i_i_i_i_i143;
 label=85;break;
 case 85: 
 var $265=$254;
 __ZdlPv($265);
 var $_pre29_i_i_i_i145=HEAP32[(($29)>>2)];
 var $257=$_pre29_i_i_i_i145;label=82;break;
 case 86: 
 var $_pre_i_i_i_i147=HEAP32[(($28)>>2)];
 var $266=$_pre_i_i_i_i147;label=87;break;
 case 87: 
 var $266;
 var $267=$266;
 __ZdlPv($267);
 label=88;break;
 case 88: 
 var $268=HEAP32[(($27)>>2)];
 var $269=$268;
 var $270=($268|0)==0;
 if($270){label=100;break;}else{label=89;break;}
 case 89: 
 var $271=HEAP32[(($24)>>2)];
 var $272=($268|0)==($271|0);
 if($272){label=91;break;}else{label=90;break;}
 case 90: 
 var $scevgep_i_i_i_i152=((($271)-(16))|0);
 var $scevgep28_i_i_i_i153=$scevgep_i_i_i_i152;
 var $273=(((-$269))|0);
 var $uglygep_i_i_i_i154=(($scevgep28_i_i_i_i153+$273)|0);
 var $uglygep29_i_i_i_i155=$uglygep_i_i_i_i154;
 var $274=$uglygep29_i_i_i_i155>>>4;
 var $275=$274^-1;
 var $scevgep30_i_i_i_i156=(($271+($275<<4))|0);
 HEAP32[(($24)>>2)]=$scevgep30_i_i_i_i156;
 label=91;break;
 case 91: 
 var $276=$268;
 __ZdlPv($276);
 label=100;break;
 case 92: 
 var $k_0_lcssa;
 var $277=HEAP32[(($1)>>2)];
 var $278=HEAP32[(($3)>>2)];
 var $279=$277;
 var $280=$278;
 var $281=((($279)-($280))|0);
 var $282=(((($281|0))/(24))&-1);
 var $283=($282>>>0)<($k_0_lcssa>>>0);
 if($283){label=93;break;}else{label=94;break;}
 case 93: 
 var $285=((($k_0_lcssa)-($282))|0);
 __ZNSt3__16vectorIN10ClipperLib9ExPolygonENS_9allocatorIS2_EEE8__appendEj($polys,$285);
 label=99;break;
 case 94: 
 var $287=($282>>>0)>($k_0_lcssa>>>0);
 if($287){label=95;break;}else{label=99;break;}
 case 95: 
 var $289=(($278+((($k_0_lcssa)*(24))&-1))|0);
 var $290=($289|0)==($277|0);
 if($290){label=99;break;}else{var $291=$277;label=96;break;}
 case 96: 
 var $291;
 var $292=((($291)-(24))|0);
 HEAP32[(($1)>>2)]=$292;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($292) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=98;break; }
 case 97: 
 var $_pre_i161=HEAP32[(($1)>>2)];
 var $293=($289|0)==($_pre_i161|0);
 if($293){label=99;break;}else{var $291=$_pre_i161;label=96;break;}
 case 98: 
 var $295$0 = ___cxa_find_matching_catch(-1, -1); var $295$1 = tempRet0;
 var $296=$295$0;
 ___cxa_call_unexpected($296);
 throw "Reached an unreachable!";
 case 99: 
 STACKTOP=sp;return;
 case 100: 
 var $297$0=$_0114;
 var $297$1=0;
 var $298$0=$297$0;
 var $298$1=$_0;
 ___resumeException($298$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib8PolySortEPNS_6OutRecES1_($or1,$or2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($or1|0)==($or2|0);
 if($1){var $_0=0;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($or1+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 var $_phi_trans_insert=(($or2+16)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($5){var $8=$_pre;label=4;break;}else{label=3;break;}
 case 3: 
 var $7=($_pre|0)==0;
 if($7){var $8=0;label=4;break;}else{label=5;break;}
 case 4: 
 var $8;
 var $9=($4|0)!=0;
 var $not_17=($4|0)!=($8|0);
 var $_=$9&$not_17;
 return $_;
 case 5: 
 var $11=(($or1+4)|0);
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){var $_pn=$or1;label=7;break;}else{label=6;break;}
 case 6: 
 var $16=(($or1+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $_pn=$17;label=7;break;
 case 7: 
 var $_pn;
 var $i1_0_in=(($_pn)|0);
 var $i1_0=HEAP32[(($i1_0_in)>>2)];
 var $19=(($or2+4)|0);
 var $20=HEAP8[($19)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){var $_pn16=$or2;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=(($or2+8)|0);
 var $25=HEAP32[(($24)>>2)];
 var $_pn16=$25;label=9;break;
 case 9: 
 var $_pn16;
 var $i2_0_in=(($_pn16)|0);
 var $i2_0=HEAP32[(($i2_0_in)>>2)];
 var $27=($i1_0|0)!=($i2_0|0);
 var $28=(($13<<24)>>24)==(($21<<24)>>24);
 var $or_cond=$27|$28;
 if($or_cond){label=10;break;}else{var $_0=$14;label=11;break;}
 case 10: 
 var $30=((($i1_0)-($i2_0))|0);
 var $31=($30|0)<0;
 var $_0=$31;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper14FixHoleLinkageEPNS_6OutRecE($this,$outRec){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($outRec+20)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $_pn=$outRec;label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($this+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+($6<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $_pn=$10;label=3;break;
 case 3: 
 var $_pn;
 var $tmp_0_in=(($_pn+8)|0);
 var $tmp_0=HEAP32[(($tmp_0_in)>>2)];
 var $12=($tmp_0|0)==($outRec|0);
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 var $14=___cxa_allocate_exception(16);
 var $15=$14;
 HEAP32[(($15)>>2)]=9408;
 var $16=(($14+4)|0);
 var $17=$16;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17,4000,17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 ___cxa_throw($14,14376,(576));
 throw "Reached an unreachable!";
 case 6: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 ___cxa_free_exception($14);
 ___resumeException($19$0)
 case 7: 
 var $21=($tmp_0|0)==0;
 if($21){label=14;break;}else{label=8;break;}
 case 8: 
 var $23=(($tmp_0+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){var $tmp_1=$tmp_0;label=11;break;}else{var $_0_i=$tmp_0;var $26=$24;label=9;break;}
 case 9: 
 var $26;
 var $_0_i;
 var $27=($26|0)==0;
 if($27){var $tmp_1=$_0_i;label=11;break;}else{label=10;break;}
 case 10: 
 var $_phi_trans_insert=(($26+12)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_0_i=$26;var $26=$_pre;label=9;break;
 case 11: 
 var $tmp_1;
 var $28=($tmp_1|0)==($outRec|0);
 if($28){label=14;break;}else{label=12;break;}
 case 12: 
 var $30=(($tmp_1+4)|0);
 var $31=HEAP8[($30)];
 var $32=$31&1;
 var $33=(($32<<24)>>24)==0;
 if($33){var $tmp_2=$tmp_1;label=15;break;}else{label=13;break;}
 case 13: 
 __ZN10ClipperLib7Clipper14FixHoleLinkageEPNS_6OutRecE($this,$tmp_1);
 var $35=(($tmp_1+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $tmp_2=$36;label=15;break;
 case 14: 
 var $37=(($outRec+8)|0);
 HEAP32[(($37)>>2)]=0;
 label=16;break;
 case 15: 
 var $tmp_2;
 var $39=(($outRec+8)|0);
 HEAP32[(($39)>>2)]=$tmp_2;
 var $40=($tmp_2|0)==0;
 if($40){label=16;break;}else{label=17;break;}
 case 16: 
 var $42=(($outRec+4)|0);
 HEAP8[($42)]=0;
 label=17;break;
 case 17: 
 var $44=(($outRec+12)|0);
 HEAP32[(($44)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib16clipperExceptionD1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=9408;
 var $2=(($this+4)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$0;
 ___cxa_call_unexpected($5);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper15ExecuteInternalEb($this,$fixHoleLinkages){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5]($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=((($8)-(12))|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$this;
 var $_sum53=((($11)+(4))|0);
 var $13=(($12+$_sum53)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=1;label=62;break;}else{label=10;break;}
 case 3: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=6;break;
 case 4: 
 var $lpad_loopexit93$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit93$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit93$1;var $lpad_phi$0=$lpad_loopexit93$0;label=6;break;
 case 5: 
 var $lpad_nonloopexit94$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit94$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit94$1;var $lpad_phi$0=$lpad_nonloopexit94$0;label=6;break;
 case 6: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $17=$lpad_phi$0;
 var $18=___cxa_begin_catch($17);
 ___cxa_end_catch();
 var $succeeded_0_off080=0;label=50;break;
 case 7: 
 var $19=(($this+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($this+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($20|0)==($22|0);
 if($23){label=48;break;}else{label=8;break;}
 case 8: 
 var $fixHoleLinkages_not=$fixHoleLinkages^1;
 var $24=(($this+72)|0);
 var $i_088=0;var $26=$22;label=9;break;
 case 9: 
 var $26;
 var $i_088;
 var $27=(($26+($i_088<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+16)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=47;break;}else{label=34;break;}
 case 10: 
 var $33=(($this+44)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34)|0);
 var $ld$0$0=(($35)|0);
 var $36$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($35+4)|0);
 var $36$1=HEAP32[(($ld$1$1)>>2)];
 var $37=(($34+8)|0);
 var $38=HEAP32[(($37)>>2)];
 HEAP32[(($33)>>2)]=$38;
 var $39=($34|0)==0;
 if($39){label=12;break;}else{label=11;break;}
 case 11: 
 var $41=$34;
 __ZdlPv($41);
 label=12;break;
 case 12: 
 var $42=(($this+32)|0);
 var $43=(($this+28)|0);
 var $44=(($this+52)|0);
 var $botY_0$1=$36$1;var $botY_0$0=$36$0;label=13;break;
 case 13: 
 var $botY_0$0;
 var $botY_0$1;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper24InsertLocalMinimaIntoAELEx($this,$botY_0$0,$botY_0$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=4;break; }
 case 14: 
 var $46=HEAP32[(($42)>>2)];
 var $47=HEAP32[(($43)>>2)];
 var $48=($46|0)==($47|0);
 if($48){label=20;break;}else{var $i_07_i=0;var $50=$47;var $49=$46;label=15;break;}
 case 15: 
 var $49;
 var $50;
 var $i_07_i;
 var $51=(($50+($i_07_i<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){var $58=$49;var $57=$50;label=17;break;}else{label=16;break;}
 case 16: 
 var $55=$52;
 __ZdlPv($55);
 var $_pre_i=HEAP32[(($42)>>2)];
 var $_pre11_i=HEAP32[(($43)>>2)];
 var $58=$_pre_i;var $57=$_pre11_i;label=17;break;
 case 17: 
 var $57;
 var $58;
 var $59=((($i_07_i)+(1))|0);
 var $60=$58;
 var $61=$57;
 var $62=((($60)-($61))|0);
 var $63=$62>>2;
 var $64=($59>>>0)<($63>>>0);
 if($64){var $i_07_i=$59;var $50=$57;var $49=$58;label=15;break;}else{label=18;break;}
 case 18: 
 var $65=($57|0)==($58|0);
 if($65){label=20;break;}else{label=19;break;}
 case 19: 
 var $scevgep_i_i=((($58)-(4))|0);
 var $scevgep20_i_i=$scevgep_i_i;
 var $66=(((-$61))|0);
 var $uglygep_i_i=(($scevgep20_i_i+$66)|0);
 var $uglygep23_i_i=$uglygep_i_i;
 var $67=$uglygep23_i_i>>>2;
 var $68=$67^-1;
 var $scevgep24_i_i=(($58+($68<<2))|0);
 HEAP32[(($42)>>2)]=$scevgep24_i_i;
 label=20;break;
 case 20: 
 var $horzEdge_03_i=HEAP32[(($44)>>2)];
 var $69=($horzEdge_03_i|0)==0;
 if($69){label=28;break;}else{var $horzEdge_04_i=$horzEdge_03_i;label=21;break;}
 case 21: 
 var $horzEdge_04_i;
 var $70=(($horzEdge_04_i+128)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($horzEdge_04_i+124)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($71|0)==0;
 var $75=($73|0)==0;
 if($74){label=23;break;}else{label=22;break;}
 case 22: 
 var $77=(($71+124)|0);
 HEAP32[(($77)>>2)]=$73;
 label=24;break;
 case 23: 
 HEAP32[(($44)>>2)]=$73;
 label=24;break;
 case 24: 
 if($75){label=26;break;}else{label=25;break;}
 case 25: 
 var $81=(($73+128)|0);
 HEAP32[(($81)>>2)]=$71;
 label=26;break;
 case 26: 
 HEAP32[(($72)>>2)]=0;
 HEAP32[(($70)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper17ProcessHorizontalEPNS_5TEdgeE($this,$horzEdge_04_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=3;break; }
 case 27: 
 var $horzEdge_0_i=HEAP32[(($44)>>2)];
 var $82=($horzEdge_0_i|0)==0;
 if($82){label=28;break;}else{var $horzEdge_04_i=$horzEdge_0_i;label=21;break;}
 case 28: 
 var $83=HEAP32[(($33)>>2)];
 var $84=(($83)|0);
 var $ld$2$0=(($84)|0);
 var $85$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($84+4)|0);
 var $85$1=HEAP32[(($ld$3$1)>>2)];
 var $86=(($83+8)|0);
 var $87=HEAP32[(($86)>>2)];
 HEAP32[(($33)>>2)]=$87;
 var $88=($83|0)==0;
 if($88){label=30;break;}else{label=29;break;}
 case 29: 
 var $90=$83;
 __ZdlPv($90);
 label=30;break;
 case 30: 
 var $91=(function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper20ProcessIntersectionsExx($this,$botY_0$0,$botY_0$1,$85$0,$85$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=4;break; }
 case 31: 
 if($91){label=32;break;}else{var $succeeded_0_off080=0;label=50;break;}
 case 32: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper27ProcessEdgesAtTopOfScanbeamEx($this,$85$0,$85$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=4;break; }
 case 33: 
 var $95=HEAP32[(($33)>>2)];
 var $96=($95|0)==0;
 if($96){label=7;break;}else{var $botY_0$1=$85$1;var $botY_0$0=$85$0;label=13;break;}
 case 34: 
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$28);
 var $98=HEAP32[(($29)>>2)];
 var $99=($98|0)==0;
 if($99){label=47;break;}else{label=35;break;}
 case 35: 
 var $101=(($28+4)|0);
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $brmerge=$104|$fixHoleLinkages_not;
 if($brmerge){label=37;break;}else{label=36;break;}
 case 36: 
 __ZN10ClipperLib7Clipper14FixHoleLinkageEPNS_6OutRecE($this,$28);
 label=37;break;
 case 37: 
 var $107=(($28+20)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($28+24)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=38;break;}else{label=44;break;}
 case 38: 
 var $113=HEAP32[(($7)>>2)];
 var $114=((($113)-(12))|0);
 var $115=$114;
 var $116=HEAP32[(($115)>>2)];
 var $_sum51=((($116)+(12))|0);
 var $117=(($12+$_sum51)|0);
 var $118=HEAP8[($117)];
 var $119=$118&1;
 var $120=(($119<<24)>>24)!=0;
 var $121=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($28,$120);
 var $122=HEAP32[(($7)>>2)];
 var $123=((($122)-(12))|0);
 var $124=$123;
 var $125=HEAP32[(($124)>>2)];
 var $_sum52=((($125)+(12))|0);
 var $126=(($12+$_sum52)|0);
 var $127=HEAP8[($126)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)!=0;
 var $130=__ZN10ClipperLib4AreaERKNS_6OutRecEb($28,$129);
 var $131=$130>0;
 var $132=$121^$131;
 if($132){label=39;break;}else{label=44;break;}
 case 39: 
 var $134=HEAP32[(($107)>>2)];
 var $135=(($134+24)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($134+28)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=HEAP32[(($29)>>2)];
 var $140=($139|0)==($134|0);
 if($140){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($29)>>2)]=$136;
 label=41;break;
 case 41: 
 var $143=($134|0)==0;
 if($143){label=43;break;}else{label=42;break;}
 case 42: 
 var $145=$134;
 __ZdlPv($145);
 label=43;break;
 case 43: 
 var $146=(($136+28)|0);
 HEAP32[(($146)>>2)]=$138;
 var $147=(($138+24)|0);
 HEAP32[(($147)>>2)]=$136;
 HEAP32[(($107)>>2)]=$136;
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$28);
 label=44;break;
 case 44: 
 var $148=HEAP8[($101)];
 var $149=$148&1;
 var $150=($149&255);
 var $151=HEAP8[($24)];
 var $152=$151&1;
 var $153=($152&255);
 var $154=HEAP32[(($7)>>2)];
 var $155=((($154)-(12))|0);
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $_sum=((($157)+(12))|0);
 var $158=(($12+$_sum)|0);
 var $159=HEAP8[($158)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)!=0;
 var $162=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($28,$161);
 var $163=($162&1);
 var $164=$163^$153;
 var $165=($150|0)==($164|0);
 if($165){label=45;break;}else{label=47;break;}
 case 45: 
 var $167=HEAP32[(($29)>>2)];
 var $168=($167|0)==0;
 if($168){label=47;break;}else{var $pp1_0_i=$167;label=46;break;}
 case 46: 
 var $pp1_0_i;
 var $169=(($pp1_0_i+24)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($pp1_0_i+28)|0);
 var $172=HEAP32[(($171)>>2)];
 HEAP32[(($169)>>2)]=$172;
 HEAP32[(($171)>>2)]=$170;
 var $173=($170|0)==($167|0);
 if($173){label=47;break;}else{var $pp1_0_i=$170;label=46;break;}
 case 47: 
 var $174=((($i_088)+(1))|0);
 var $175=HEAP32[(($19)>>2)];
 var $176=HEAP32[(($21)>>2)];
 var $177=$175;
 var $178=$176;
 var $179=((($177)-($178))|0);
 var $180=$179>>2;
 var $181=($174>>>0)<($180>>>0);
 if($181){var $i_088=$174;var $26=$176;label=9;break;}else{label=48;break;}
 case 48: 
 __ZN10ClipperLib7Clipper15JoinCommonEdgesEb($this,$fixHoleLinkages);
 if($fixHoleLinkages){label=49;break;}else{var $succeeded_0_off080=1;label=50;break;}
 case 49: 
 var $183=HEAP32[(($21)>>2)];
 var $184=HEAP32[(($19)>>2)];
 HEAP32[(($1)>>2)]=410;
 __ZNSt3__16__sortIRPFbPN10ClipperLib6OutRecES3_EPS3_EEvT0_S8_T_($183,$184,$1);
 var $succeeded_0_off080=1;label=50;break;
 case 50: 
 var $succeeded_0_off080;
 var $185=(($this+20)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($this+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=56;break;}else{var $i_07_i57=0;var $191=$188;var $190=$186;label=51;break;}
 case 51: 
 var $190;
 var $191;
 var $i_07_i57;
 var $192=(($191+($i_07_i57<<2))|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($193|0)==0;
 if($194){var $199=$190;var $198=$191;label=53;break;}else{label=52;break;}
 case 52: 
 var $196=$193;
 __ZdlPv($196);
 var $_pre_i59=HEAP32[(($185)>>2)];
 var $_pre11_i60=HEAP32[(($187)>>2)];
 var $199=$_pre_i59;var $198=$_pre11_i60;label=53;break;
 case 53: 
 var $198;
 var $199;
 var $200=((($i_07_i57)+(1))|0);
 var $201=$199;
 var $202=$198;
 var $203=((($201)-($202))|0);
 var $204=$203>>2;
 var $205=($200>>>0)<($204>>>0);
 if($205){var $i_07_i57=$200;var $191=$198;var $190=$199;label=51;break;}else{label=54;break;}
 case 54: 
 var $206=($198|0)==($199|0);
 if($206){label=56;break;}else{label=55;break;}
 case 55: 
 var $scevgep_i_i62=((($199)-(4))|0);
 var $scevgep20_i_i63=$scevgep_i_i62;
 var $207=(((-$202))|0);
 var $uglygep_i_i64=(($scevgep20_i_i63+$207)|0);
 var $uglygep23_i_i65=$uglygep_i_i64;
 var $208=$uglygep23_i_i65>>>2;
 var $209=$208^-1;
 var $scevgep24_i_i66=(($199+($209<<2))|0);
 HEAP32[(($185)>>2)]=$scevgep24_i_i66;
 label=56;break;
 case 56: 
 var $210=(($this+32)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($this+28)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($211|0)==($213|0);
 if($214){var $_0=$succeeded_0_off080;label=62;break;}else{var $i_07_i68=0;var $216=$213;var $215=$211;label=57;break;}
 case 57: 
 var $215;
 var $216;
 var $i_07_i68;
 var $217=(($216+($i_07_i68<<2))|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($218|0)==0;
 if($219){var $224=$215;var $223=$216;label=59;break;}else{label=58;break;}
 case 58: 
 var $221=$218;
 __ZdlPv($221);
 var $_pre_i70=HEAP32[(($210)>>2)];
 var $_pre11_i71=HEAP32[(($212)>>2)];
 var $224=$_pre_i70;var $223=$_pre11_i71;label=59;break;
 case 59: 
 var $223;
 var $224;
 var $225=((($i_07_i68)+(1))|0);
 var $226=$224;
 var $227=$223;
 var $228=((($226)-($227))|0);
 var $229=$228>>2;
 var $230=($225>>>0)<($229>>>0);
 if($230){var $i_07_i68=$225;var $216=$223;var $215=$224;label=57;break;}else{label=60;break;}
 case 60: 
 var $231=($223|0)==($224|0);
 if($231){var $_0=$succeeded_0_off080;label=62;break;}else{label=61;break;}
 case 61: 
 var $scevgep_i_i73=((($224)-(4))|0);
 var $scevgep20_i_i74=$scevgep_i_i73;
 var $232=(((-$227))|0);
 var $uglygep_i_i75=(($scevgep20_i_i74+$232)|0);
 var $uglygep23_i_i76=$uglygep_i_i75;
 var $233=$uglygep23_i_i76>>>2;
 var $234=$233^-1;
 var $scevgep24_i_i77=(($224+($234<<2))|0);
 HEAP32[(($210)>>2)]=$scevgep24_i_i77;
 var $_0=$succeeded_0_off080;label=62;break;
 case 62: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper24InsertLocalMinimaIntoAELEx($this,$botY$0,$botY$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $jr_i88=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(24);
 var $3=(sp)+(40);
 var $4=(sp)+(56);
 var $5=(sp)+(72);
 var $6=(sp)+(88);
 var $jr_i=(sp)+(104);
 var $7=(sp)+(112);
 var $pt1=(sp)+(128);
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)-(12))|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=$this;
 var $_sum252=((($12)+(4))|0);
 var $14=(($13+$_sum252)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=106;break;}else{label=2;break;}
 case 2: 
 var $18=(($this+48)|0);
 var $19=(($this+44)|0);
 var $20=(($this+68)|0);
 var $21=(($this+64)|0);
 var $22=(($this+52)|0);
 var $23=(($7)|0);
 var $24=(($7+8)|0);
 var $25=(($this+32)|0);
 var $26=(($this+28)|0);
 var $27=$jr_i88;
 var $28=(($this+20)|0);
 var $29=(($this+24)|0);
 var $30=(($this+16)|0);
 var $31=$1;
 var $32=$2;
 var $33=$3;
 var $34=$4;
 var $35=$5;
 var $36=$6;
 var $37=$jr_i;
 var $38=(($1+8)|0);
 var $39=(($1)|0);
 var $40=(($2+8)|0);
 var $41=(($2)|0);
 var $42=(($5+8)|0);
 var $43=(($5)|0);
 var $44=(($6+8)|0);
 var $45=(($6)|0);
 var $46=(($3)|0);
 var $47=(($4)|0);
 var $48=(($3+8)|0);
 var $49=(($4+8)|0);
 var $50=(($pt1)|0);
 var $51=(($pt1+8)|0);
 var $53=$16;label=3;break;
 case 3: 
 var $53;
 var $54=(($53)|0);
 var $ld$0$0=(($54)|0);
 var $55$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($54+4)|0);
 var $55$1=HEAP32[(($ld$1$1)>>2)];
 var $56=(($55$0|0) == ($botY$0|0)) & (($55$1|0) == ($botY$1|0));
 if($56){label=4;break;}else{label=106;break;}
 case 4: 
 var $58=(($53+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($53+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($59+120)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($59+116)|0);
 HEAP32[(($63)>>2)]=0;
 var $64=HEAP32[(($18)>>2)];
 var $65=($64|0)==0;
 if($65){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($18)>>2)]=$59;
 label=19;break;
 case 6: 
 var $68=(($59+16)|0);
 var $ld$2$0=(($68)|0);
 var $69$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($68+4)|0);
 var $69$1=HEAP32[(($ld$3$1)>>2)];
 var $70=(($64+16)|0);
 var $ld$4$0=(($70)|0);
 var $71$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($70+4)|0);
 var $71$1=HEAP32[(($ld$5$1)>>2)];
 var $72=(($69$0|0) == ($71$0|0)) & (($69$1|0) == ($71$1|0));
 if($72){label=7;break;}else{label=9;break;}
 case 7: 
 var $74=(($59+48)|0);
 var $75=HEAPF64[(($74)>>3)];
 var $76=(($64+48)|0);
 var $77=HEAPF64[(($76)>>3)];
 var $78=$75>$77;
 if($78){label=11;break;}else{var $_pre_phi_i=$74;label=8;break;}
 case 8: 
 var $_pre_phi_i;
 var $79=(($64+116)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)==0;
 if($81){var $101=0;var $e_0_i_lcssa=$64;var $_lcssa=$79;label=16;break;}else{var $e_0_i233=$64;var $87=$79;var $86=$80;label=12;break;}
 case 9: 
 var $82=(($69$1|0) < ($71$1|0)) | (((($69$1|0) == ($71$1|0) & ($69$0>>>0) <  ($71$0>>>0))));
 if($82){label=11;break;}else{label=10;break;}
 case 10: 
 var $_pre_i=(($59+48)|0);
 var $_pre_phi_i=$_pre_i;label=8;break;
 case 11: 
 HEAP32[(($63)>>2)]=$64;
 var $84=HEAP32[(($18)>>2)];
 var $85=(($84+120)|0);
 HEAP32[(($85)>>2)]=$59;
 HEAP32[(($18)>>2)]=$59;
 label=19;break;
 case 12: 
 var $86;
 var $87;
 var $e_0_i233;
 var $88=(($86+16)|0);
 var $ld$6$0=(($88)|0);
 var $89$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($88+4)|0);
 var $89$1=HEAP32[(($ld$7$1)>>2)];
 var $90=(($69$0|0) == ($89$0|0)) & (($69$1|0) == ($89$1|0));
 if($90){label=13;break;}else{label=15;break;}
 case 13: 
 var $92=HEAPF64[(($_pre_phi_i)>>3)];
 var $93=(($86+48)|0);
 var $94=HEAPF64[(($93)>>3)];
 var $95=$92>$94;
 if($95){var $101=$86;var $e_0_i_lcssa=$e_0_i233;var $_lcssa=$87;label=16;break;}else{label=14;break;}
 case 14: 
 var $96=(($86+116)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($97|0)==0;
 if($98){var $101=0;var $e_0_i_lcssa=$86;var $_lcssa=$96;label=16;break;}else{var $e_0_i233=$86;var $87=$96;var $86=$97;label=12;break;}
 case 15: 
 var $100=(($69$1|0) < ($89$1|0)) | (((($69$1|0) == ($89$1|0) & ($69$0>>>0) <  ($89$0>>>0))));
 if($100){var $101=$86;var $e_0_i_lcssa=$e_0_i233;var $_lcssa=$87;label=16;break;}else{label=14;break;}
 case 16: 
 var $_lcssa;
 var $e_0_i_lcssa;
 var $101;
 HEAP32[(($63)>>2)]=$101;
 var $102=HEAP32[(($_lcssa)>>2)];
 var $103=($102|0)==0;
 if($103){label=18;break;}else{label=17;break;}
 case 17: 
 var $105=(($102+120)|0);
 HEAP32[(($105)>>2)]=$59;
 label=18;break;
 case 18: 
 HEAP32[(($62)>>2)]=$e_0_i_lcssa;
 HEAP32[(($_lcssa)>>2)]=$59;
 label=19;break;
 case 19: 
 var $107=(($59+40)|0);
 var $ld$8$0=(($107)|0);
 var $108$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($107+4)|0);
 var $108$1=HEAP32[(($ld$9$1)>>2)];
 var $109=HEAP32[(($19)>>2)];
 var $110=($109|0)==0;
 if($110){label=20;break;}else{label=21;break;}
 case 20: 
 var $112=__Znwj(16);
 var $113=$112;
 HEAP32[(($19)>>2)]=$113;
 var $114=(($112+8)|0);
 var $115=$114;
 HEAP32[(($115)>>2)]=0;
 var $116=$112;
 var $st$10$0=(($116)|0);
 HEAP32[(($st$10$0)>>2)]=$108$0;
 var $st$11$1=(($116+4)|0);
 HEAP32[(($st$11$1)>>2)]=$108$1;
 label=27;break;
 case 21: 
 var $118=(($109)|0);
 var $ld$12$0=(($118)|0);
 var $119$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($118+4)|0);
 var $119$1=HEAP32[(($ld$13$1)>>2)];
 var $120=(($119$1|0) < ($108$1|0)) | (((($119$1|0) == ($108$1|0) & ($119$0>>>0) <  ($108$0>>>0))));
 if($120){label=22;break;}else{var $sb2_0_i=$109;label=23;break;}
 case 22: 
 var $122=__Znwj(16);
 var $123=$122;
 var $124=$122;
 var $st$14$0=(($124)|0);
 HEAP32[(($st$14$0)>>2)]=$108$0;
 var $st$15$1=(($124+4)|0);
 HEAP32[(($st$15$1)>>2)]=$108$1;
 var $125=(($122+8)|0);
 var $126=$125;
 HEAP32[(($126)>>2)]=$109;
 HEAP32[(($19)>>2)]=$123;
 label=27;break;
 case 23: 
 var $sb2_0_i;
 var $127=(($sb2_0_i+8)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)==0;
 if($129){label=25;break;}else{label=24;break;}
 case 24: 
 var $131=(($128)|0);
 var $ld$16$0=(($131)|0);
 var $132$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($131+4)|0);
 var $132$1=HEAP32[(($ld$17$1)>>2)];
 var $133=(($132$1|0) < ($108$1|0)) | (((($132$1|0) == ($108$1|0) & ($132$0>>>0) <  ($108$0>>>0))));
 if($133){label=25;break;}else{var $sb2_0_i=$128;label=23;break;}
 case 25: 
 var $134=(($sb2_0_i)|0);
 var $ld$18$0=(($134)|0);
 var $135$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($134+4)|0);
 var $135$1=HEAP32[(($ld$19$1)>>2)];
 var $136=(($135$0|0) == ($108$0|0)) & (($135$1|0) == ($108$1|0));
 if($136){label=27;break;}else{label=26;break;}
 case 26: 
 var $138=__Znwj(16);
 var $139=$138;
 var $140=$138;
 var $st$20$0=(($140)|0);
 HEAP32[(($st$20$0)>>2)]=$108$0;
 var $st$21$1=(($140+4)|0);
 HEAP32[(($st$21$1)>>2)]=$108$1;
 var $141=HEAP32[(($127)>>2)];
 var $142=(($138+8)|0);
 var $143=$142;
 HEAP32[(($143)>>2)]=$141;
 HEAP32[(($127)>>2)]=$139;
 label=27;break;
 case 27: 
 var $144=(($61+120)|0);
 HEAP32[(($144)>>2)]=0;
 var $145=(($61+116)|0);
 HEAP32[(($145)>>2)]=0;
 var $146=HEAP32[(($18)>>2)];
 var $147=($146|0)==0;
 if($147){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($18)>>2)]=$61;
 label=42;break;
 case 29: 
 var $150=(($61+16)|0);
 var $ld$22$0=(($150)|0);
 var $151$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($150+4)|0);
 var $151$1=HEAP32[(($ld$23$1)>>2)];
 var $152=(($146+16)|0);
 var $ld$24$0=(($152)|0);
 var $153$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($152+4)|0);
 var $153$1=HEAP32[(($ld$25$1)>>2)];
 var $154=(($151$0|0) == ($153$0|0)) & (($151$1|0) == ($153$1|0));
 if($154){label=30;break;}else{label=32;break;}
 case 30: 
 var $156=(($61+48)|0);
 var $157=HEAPF64[(($156)>>3)];
 var $158=(($146+48)|0);
 var $159=HEAPF64[(($158)>>3)];
 var $160=$157>$159;
 if($160){label=34;break;}else{var $_pre_phi_i61=$156;label=31;break;}
 case 31: 
 var $_pre_phi_i61;
 var $161=(($146+116)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){var $183=0;var $e_0_i66_lcssa=$146;var $_lcssa238=$161;label=39;break;}else{var $e_0_i66239=$146;var $169=$161;var $168=$162;label=35;break;}
 case 32: 
 var $164=(($151$1|0) < ($153$1|0)) | (((($151$1|0) == ($153$1|0) & ($151$0>>>0) <  ($153$0>>>0))));
 if($164){label=34;break;}else{label=33;break;}
 case 33: 
 var $_pre_i64=(($61+48)|0);
 var $_pre_phi_i61=$_pre_i64;label=31;break;
 case 34: 
 HEAP32[(($145)>>2)]=$146;
 var $166=HEAP32[(($18)>>2)];
 var $167=(($166+120)|0);
 HEAP32[(($167)>>2)]=$61;
 HEAP32[(($18)>>2)]=$61;
 label=42;break;
 case 35: 
 var $168;
 var $169;
 var $e_0_i66239;
 var $170=(($168+16)|0);
 var $ld$26$0=(($170)|0);
 var $171$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($170+4)|0);
 var $171$1=HEAP32[(($ld$27$1)>>2)];
 var $172=(($151$0|0) == ($171$0|0)) & (($151$1|0) == ($171$1|0));
 if($172){label=36;break;}else{label=38;break;}
 case 36: 
 var $174=HEAPF64[(($_pre_phi_i61)>>3)];
 var $175=(($168+48)|0);
 var $176=HEAPF64[(($175)>>3)];
 var $177=$174>$176;
 if($177){var $183=$168;var $e_0_i66_lcssa=$e_0_i66239;var $_lcssa238=$169;label=39;break;}else{label=37;break;}
 case 37: 
 var $178=(($168+116)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){var $183=0;var $e_0_i66_lcssa=$168;var $_lcssa238=$178;label=39;break;}else{var $e_0_i66239=$168;var $169=$178;var $168=$179;label=35;break;}
 case 38: 
 var $182=(($151$1|0) < ($171$1|0)) | (((($151$1|0) == ($171$1|0) & ($151$0>>>0) <  ($171$0>>>0))));
 if($182){var $183=$168;var $e_0_i66_lcssa=$e_0_i66239;var $_lcssa238=$169;label=39;break;}else{label=37;break;}
 case 39: 
 var $_lcssa238;
 var $e_0_i66_lcssa;
 var $183;
 HEAP32[(($145)>>2)]=$183;
 var $184=HEAP32[(($_lcssa238)>>2)];
 var $185=($184|0)==0;
 if($185){label=41;break;}else{label=40;break;}
 case 40: 
 var $187=(($184+120)|0);
 HEAP32[(($187)>>2)]=$61;
 label=41;break;
 case 41: 
 HEAP32[(($144)>>2)]=$e_0_i66_lcssa;
 HEAP32[(($_lcssa238)>>2)]=$61;
 label=42;break;
 case 42: 
 var $189=(($59+80)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($190|0)==0;
 var $_0_in_in_i=$191?$20:$21;
 var $_0_in_i=HEAP32[(($_0_in_in_i)>>2)];
 var $_0_i=($_0_in_i|0)==0;
 var $192=(($59+88)|0);
 if($_0_i){label=43;break;}else{label=44;break;}
 case 43: 
 HEAP32[(($192)>>2)]=1;
 var $194=(($61+88)|0);
 HEAP32[(($194)>>2)]=1;
 label=45;break;
 case 44: 
 var $196=HEAP32[(($192)>>2)];
 var $197=(((-$196))|0);
 var $198=(($61+88)|0);
 HEAP32[(($198)>>2)]=$197;
 label=45;break;
 case 45: 
 __ZN10ClipperLib7Clipper15SetWindingCountERNS_5TEdgeE($this,$59);
 var $200=(($59+92)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($61+92)|0);
 HEAP32[(($202)>>2)]=$201;
 var $203=(($59+96)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($61+96)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=(($61+48)|0);
 var $207=HEAPF64[(($206)>>3)];
 var $208=($207)+((1e+40));
 var $209=$208>(-1e-20);
 var $210=$208<(1e-20);
 var $or_cond=$209&$210;
 if($or_cond){label=46;break;}else{label=57;break;}
 case 46: 
 var $212=HEAP32[(($22)>>2)];
 var $213=($212|0)==0;
 if($213){label=47;break;}else{label=48;break;}
 case 47: 
 HEAP32[(($22)>>2)]=$61;
 var $215=(($61+128)|0);
 HEAP32[(($215)>>2)]=0;
 var $216=(($61+124)|0);
 HEAP32[(($216)>>2)]=0;
 label=49;break;
 case 48: 
 var $218=(($61+124)|0);
 HEAP32[(($218)>>2)]=$212;
 var $219=(($61+128)|0);
 HEAP32[(($219)>>2)]=0;
 var $220=HEAP32[(($22)>>2)];
 var $221=(($220+128)|0);
 HEAP32[(($221)>>2)]=$61;
 HEAP32[(($22)>>2)]=$61;
 label=49;break;
 case 49: 
 var $222=(($61+112)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+40)|0);
 var $ld$28$0=(($224)|0);
 var $225$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($224+4)|0);
 var $225$1=HEAP32[(($ld$29$1)>>2)];
 var $226=HEAP32[(($19)>>2)];
 var $227=($226|0)==0;
 if($227){label=50;break;}else{label=51;break;}
 case 50: 
 var $229=__Znwj(16);
 var $230=$229;
 HEAP32[(($19)>>2)]=$230;
 var $231=(($229+8)|0);
 var $232=$231;
 HEAP32[(($232)>>2)]=0;
 var $233=$229;
 var $st$30$0=(($233)|0);
 HEAP32[(($st$30$0)>>2)]=$225$0;
 var $st$31$1=(($233+4)|0);
 HEAP32[(($st$31$1)>>2)]=$225$1;
 label=65;break;
 case 51: 
 var $235=(($226)|0);
 var $ld$32$0=(($235)|0);
 var $236$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($235+4)|0);
 var $236$1=HEAP32[(($ld$33$1)>>2)];
 var $237=(($236$1|0) < ($225$1|0)) | (((($236$1|0) == ($225$1|0) & ($236$0>>>0) <  ($225$0>>>0))));
 if($237){label=52;break;}else{var $sb2_0_i69=$226;label=53;break;}
 case 52: 
 var $239=__Znwj(16);
 var $240=$239;
 var $241=$239;
 var $st$34$0=(($241)|0);
 HEAP32[(($st$34$0)>>2)]=$225$0;
 var $st$35$1=(($241+4)|0);
 HEAP32[(($st$35$1)>>2)]=$225$1;
 var $242=(($239+8)|0);
 var $243=$242;
 HEAP32[(($243)>>2)]=$226;
 HEAP32[(($19)>>2)]=$240;
 label=65;break;
 case 53: 
 var $sb2_0_i69;
 var $244=(($sb2_0_i69+8)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($245|0)==0;
 if($246){label=55;break;}else{label=54;break;}
 case 54: 
 var $248=(($245)|0);
 var $ld$36$0=(($248)|0);
 var $249$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($248+4)|0);
 var $249$1=HEAP32[(($ld$37$1)>>2)];
 var $250=(($249$1|0) < ($225$1|0)) | (((($249$1|0) == ($225$1|0) & ($249$0>>>0) <  ($225$0>>>0))));
 if($250){label=55;break;}else{var $sb2_0_i69=$245;label=53;break;}
 case 55: 
 var $251=(($sb2_0_i69)|0);
 var $ld$38$0=(($251)|0);
 var $252$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($251+4)|0);
 var $252$1=HEAP32[(($ld$39$1)>>2)];
 var $253=(($252$0|0) == ($225$0|0)) & (($252$1|0) == ($225$1|0));
 if($253){label=65;break;}else{label=56;break;}
 case 56: 
 var $255=__Znwj(16);
 var $256=$255;
 var $257=$255;
 var $st$40$0=(($257)|0);
 HEAP32[(($st$40$0)>>2)]=$225$0;
 var $st$41$1=(($257+4)|0);
 HEAP32[(($st$41$1)>>2)]=$225$1;
 var $258=HEAP32[(($244)>>2)];
 var $259=(($255+8)|0);
 var $260=$259;
 HEAP32[(($260)>>2)]=$258;
 HEAP32[(($244)>>2)]=$256;
 label=65;break;
 case 57: 
 var $262=(($61+40)|0);
 var $ld$42$0=(($262)|0);
 var $263$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($262+4)|0);
 var $263$1=HEAP32[(($ld$43$1)>>2)];
 var $264=HEAP32[(($19)>>2)];
 var $265=($264|0)==0;
 if($265){label=58;break;}else{label=59;break;}
 case 58: 
 var $267=__Znwj(16);
 var $268=$267;
 HEAP32[(($19)>>2)]=$268;
 var $269=(($267+8)|0);
 var $270=$269;
 HEAP32[(($270)>>2)]=0;
 var $271=$267;
 var $st$44$0=(($271)|0);
 HEAP32[(($st$44$0)>>2)]=$263$0;
 var $st$45$1=(($271+4)|0);
 HEAP32[(($st$45$1)>>2)]=$263$1;
 label=65;break;
 case 59: 
 var $273=(($264)|0);
 var $ld$46$0=(($273)|0);
 var $274$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($273+4)|0);
 var $274$1=HEAP32[(($ld$47$1)>>2)];
 var $275=(($274$1|0) < ($263$1|0)) | (((($274$1|0) == ($263$1|0) & ($274$0>>>0) <  ($263$0>>>0))));
 if($275){label=60;break;}else{var $sb2_0_i73=$264;label=61;break;}
 case 60: 
 var $277=__Znwj(16);
 var $278=$277;
 var $279=$277;
 var $st$48$0=(($279)|0);
 HEAP32[(($st$48$0)>>2)]=$263$0;
 var $st$49$1=(($279+4)|0);
 HEAP32[(($st$49$1)>>2)]=$263$1;
 var $280=(($277+8)|0);
 var $281=$280;
 HEAP32[(($281)>>2)]=$264;
 HEAP32[(($19)>>2)]=$278;
 label=65;break;
 case 61: 
 var $sb2_0_i73;
 var $282=(($sb2_0_i73+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==0;
 if($284){label=63;break;}else{label=62;break;}
 case 62: 
 var $286=(($283)|0);
 var $ld$50$0=(($286)|0);
 var $287$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($286+4)|0);
 var $287$1=HEAP32[(($ld$51$1)>>2)];
 var $288=(($287$1|0) < ($263$1|0)) | (((($287$1|0) == ($263$1|0) & ($287$0>>>0) <  ($263$0>>>0))));
 if($288){label=63;break;}else{var $sb2_0_i73=$283;label=61;break;}
 case 63: 
 var $289=(($sb2_0_i73)|0);
 var $ld$52$0=(($289)|0);
 var $290$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($289+4)|0);
 var $290$1=HEAP32[(($ld$53$1)>>2)];
 var $291=(($290$0|0) == ($263$0|0)) & (($290$1|0) == ($263$1|0));
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=__Znwj(16);
 var $294=$293;
 var $295=$293;
 var $st$54$0=(($295)|0);
 HEAP32[(($st$54$0)>>2)]=$263$0;
 var $st$55$1=(($295+4)|0);
 HEAP32[(($st$55$1)>>2)]=$263$1;
 var $296=HEAP32[(($282)>>2)];
 var $297=(($293+8)|0);
 var $298=$297;
 HEAP32[(($298)>>2)]=$296;
 HEAP32[(($282)>>2)]=$294;
 label=65;break;
 case 65: 
 var $299=__ZNK10ClipperLib7Clipper14IsContributingERKNS_5TEdgeE($this,$59);
 if($299){label=66;break;}else{label=67;break;}
 case 66: 
 var $301=(($59+16)|0);
 var $ld$56$0=(($301)|0);
 var $302$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($301+4)|0);
 var $302$1=HEAP32[(($ld$57$1)>>2)];
 var $303=HEAP32[(($8)>>2)];
 var $304=((($303)-(12))|0);
 var $305=$304;
 var $306=HEAP32[(($305)>>2)];
 var $_sum58=((($306)+(4))|0);
 var $307=(($13+$_sum58)|0);
 var $308=$307;
 var $309=HEAP32[(($308)>>2)];
 var $310=(($309)|0);
 var $ld$58$0=(($310)|0);
 var $311$0=HEAP32[(($ld$58$0)>>2)];
 var $ld$59$1=(($310+4)|0);
 var $311$1=HEAP32[(($ld$59$1)>>2)];
 var $st$60$0=(($23)|0);
 HEAP32[(($st$60$0)>>2)]=$302$0;
 var $st$61$1=(($23+4)|0);
 HEAP32[(($st$61$1)>>2)]=$302$1;
 var $st$62$0=(($24)|0);
 HEAP32[(($st$62$0)>>2)]=$311$0;
 var $st$63$1=(($24+4)|0);
 HEAP32[(($st$63$1)>>2)]=$311$1;
 __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$59,$61,$7);
 label=67;break;
 case 67: 
 var $313=(($61+100)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($314|0)>-1;
 if($315){label=68;break;}else{label=84;break;}
 case 68: 
 var $317=HEAPF64[(($206)>>3)];
 var $318=($317)+((1e+40));
 var $319=$318>(-1e-20);
 var $320=$318<(1e-20);
 var $or_cond59=$319&$320;
 if($or_cond59){label=69;break;}else{label=84;break;}
 case 69: 
 var $321=HEAP32[(($25)>>2)];
 var $322=HEAP32[(($26)>>2)];
 var $323=($321|0)==($322|0);
 if($323){label=84;break;}else{label=70;break;}
 case 70: 
 var $324=(($61)|0);
 var $325=(($61+8)|0);
 var $326=(($61+32)|0);
 var $327=(($61+40)|0);
 var $328=(($61+16)|0);
 var $329=(($61+24)|0);
 var $i_0247=0;var $330=$322;label=71;break;
 case 71: 
 var $330;
 var $i_0247;
 var $331=(($330+($i_0247<<2))|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=(($332)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334)|0);
 var $ld$64$0=(($335)|0);
 var $336$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($335+4)|0);
 var $336$1=HEAP32[(($ld$65$1)>>2)];
 var $337=(($334+8)|0);
 var $ld$66$0=(($337)|0);
 var $338$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($337+4)|0);
 var $338$1=HEAP32[(($ld$67$1)>>2)];
 var $339=(($334+32)|0);
 var $ld$68$0=(($339)|0);
 var $340$0=HEAP32[(($ld$68$0)>>2)];
 var $ld$69$1=(($339+4)|0);
 var $340$1=HEAP32[(($ld$69$1)>>2)];
 var $341=(($334+40)|0);
 var $ld$70$0=(($341)|0);
 var $342$0=HEAP32[(($ld$70$0)>>2)];
 var $ld$71$1=(($341+4)|0);
 var $342$1=HEAP32[(($ld$71$1)>>2)];
 var $ld$72$0=(($324)|0);
 var $343$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($324+4)|0);
 var $343$1=HEAP32[(($ld$73$1)>>2)];
 var $ld$74$0=(($325)|0);
 var $344$0=HEAP32[(($ld$74$0)>>2)];
 var $ld$75$1=(($325+4)|0);
 var $344$1=HEAP32[(($ld$75$1)>>2)];
 var $ld$76$0=(($326)|0);
 var $345$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($326+4)|0);
 var $345$1=HEAP32[(($ld$77$1)>>2)];
 var $ld$78$0=(($327)|0);
 var $346$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($327+4)|0);
 var $346$1=HEAP32[(($ld$79$1)>>2)];
 var $347=(($338$0|0) == ($342$0|0)) & (($338$1|0) == ($342$1|0));
 if($347){label=73;break;}else{label=72;break;}
 case 72: 
 var $349$0=_i64Subtract($336$0,$336$1,$340$0,$340$1);var $349$1=tempRet0;
 var $350$0=_i64Subtract($338$0,$338$1,$342$0,$342$1);var $350$1=tempRet0;
 var $351$0=___divdi3($349$0,$349$1,$350$0,$350$1);var $351$1=tempRet0;
 var $$etemp$80$0=0;
 var $$etemp$80$1=0;
 var $352=(($351$1|0) < ($$etemp$80$1|0)) | (((($351$1|0) == ($$etemp$80$1|0) & ($351$0>>>0) <  ($$etemp$80$0>>>0))));
 var $$etemp$81$0=0;
 var $$etemp$81$1=0;
 var $353$0=_i64Subtract($$etemp$81$0,$$etemp$81$1,$351$0,$351$1);var $353$1=tempRet0;
 var $354$0=$352?$353$0:$351$0;
 var $354$1=$352?$353$1:$351$1;
 var $$etemp$82$0=1;
 var $$etemp$82$1=0;
 var $355=(($354$1|0) > ($$etemp$82$1|0)) | (((($354$1|0) == ($$etemp$82$1|0) & ($354$0>>>0) >  ($$etemp$82$0>>>0))));
 if($355){label=73;break;}else{label=74;break;}
 case 73: 
 var $356=(($336$1|0) > ($340$1|0)) | (((($336$1|0) == ($340$1|0) & ($336$0>>>0) >  ($340$0>>>0))));
 var $_$0=$356?$336$0:$340$0;
 var $_$1=$356?$336$1:$340$1;
 var $_228$0=$356?$340$0:$336$0;
 var $_228$1=$356?$340$1:$336$1;
 var $357=(($343$1|0) > ($345$1|0)) | (((($343$1|0) == ($345$1|0) & ($343$0>>>0) >  ($345$0>>>0))));
 var $tmp_i_i_sroa_0_0_load224$0=$357?$343$0:$345$0;
 var $tmp_i_i_sroa_0_0_load224$1=$357?$343$1:$345$1;
 var $358$0=$357?$345$0:$343$0;
 var $358$1=$357?$345$1:$343$1;
 var $359=(($_228$1|0) > ($358$1|0)) | (((($_228$1|0) == ($358$1|0) & ($_228$0>>>0) >  ($358$0>>>0))));
 var $_228_$0=$359?$_228$0:$358$0;
 var $_228_$1=$359?$_228$1:$358$1;
 var $360=(($_$1|0) < ($tmp_i_i_sroa_0_0_load224$1|0)) | (((($_$1|0) == ($tmp_i_i_sroa_0_0_load224$1|0) & ($_$0>>>0) <  ($tmp_i_i_sroa_0_0_load224$0>>>0))));
 var $361$0=$360?$_$0:$tmp_i_i_sroa_0_0_load224$0;
 var $361$1=$360?$_$1:$tmp_i_i_sroa_0_0_load224$1;
 var $362=(($_228_$1|0) < ($361$1|0)) | (((($_228_$1|0) == ($361$1|0) & ($_228_$0>>>0) <  ($361$0>>>0))));
 if($362){label=75;break;}else{label=83;break;}
 case 74: 
 var $363=(($338$1|0) < ($342$1|0)) | (((($338$1|0) == ($342$1|0) & ($338$0>>>0) <  ($342$0>>>0))));
 var $_229$0=$363?$338$0:$342$0;
 var $_229$1=$363?$338$1:$342$1;
 var $_230$0=$363?$342$0:$338$0;
 var $_230$1=$363?$342$1:$338$1;
 var $364=(($344$1|0) < ($346$1|0)) | (((($344$1|0) == ($346$1|0) & ($344$0>>>0) <  ($346$0>>>0))));
 var $_sroa_1197_8_load205226$0=$364?$344$0:$346$0;
 var $_sroa_1197_8_load205226$1=$364?$344$1:$346$1;
 var $365$0=$364?$346$0:$344$0;
 var $365$1=$364?$346$1:$344$1;
 var $366=(($_230$1|0) < ($365$1|0)) | (((($_230$1|0) == ($365$1|0) & ($_230$0>>>0) <  ($365$0>>>0))));
 var $_230_$0=$366?$_230$0:$365$0;
 var $_230_$1=$366?$_230$1:$365$1;
 var $367=(($_229$1|0) > ($_sroa_1197_8_load205226$1|0)) | (((($_229$1|0) == ($_sroa_1197_8_load205226$1|0) & ($_229$0>>>0) >  ($_sroa_1197_8_load205226$0>>>0))));
 var $368$0=$367?$_229$0:$_sroa_1197_8_load205226$0;
 var $368$1=$367?$_229$1:$_sroa_1197_8_load205226$1;
 var $369=(($_230_$1|0) > ($368$1|0)) | (((($_230_$1|0) == ($368$1|0) & ($_230_$0>>>0) >  ($368$0>>>0))));
 if($369){label=75;break;}else{label=83;break;}
 case 75: 
 var $371=(($332+4)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=__Znwj(80);
 var $374=$373;
 var $375=(($373+40)|0);
 HEAP32[(($373)>>2)]=0; HEAP32[((($373)+(4))>>2)]=0; HEAP32[((($373)+(8))>>2)]=0; HEAP32[((($373)+(12))>>2)]=0; HEAP32[((($373)+(16))>>2)]=0; HEAP32[((($373)+(20))>>2)]=0; HEAP32[((($373)+(24))>>2)]=0; HEAP32[((($373)+(28))>>2)]=0;
 HEAP32[(($375)>>2)]=0; HEAP32[((($375)+(4))>>2)]=0; HEAP32[((($375)+(8))>>2)]=0; HEAP32[((($375)+(12))>>2)]=0; HEAP32[((($375)+(16))>>2)]=0; HEAP32[((($375)+(20))>>2)]=0; HEAP32[((($375)+(24))>>2)]=0; HEAP32[((($375)+(28))>>2)]=0;
 HEAP32[(($jr_i88)>>2)]=$374;
 var $376=($372|0)>-1;
 if($376){label=76;break;}else{label=77;break;}
 case 76: 
 var $378=(($373+32)|0);
 var $379=$378;
 HEAP32[(($379)>>2)]=$372;
 label=78;break;
 case 77: 
 var $381=(($334+100)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=(($373+32)|0);
 var $384=$383;
 HEAP32[(($384)>>2)]=$382;
 label=78;break;
 case 78: 
 var $386=(($334+16)|0);
 var $ld$83$0=(($386)|0);
 var $387$0=HEAP32[(($ld$83$0)>>2)];
 var $ld$84$1=(($386+4)|0);
 var $387$1=HEAP32[(($ld$84$1)>>2)];
 var $388=(($334+24)|0);
 var $ld$85$0=(($388)|0);
 var $389$0=HEAP32[(($ld$85$0)>>2)];
 var $ld$86$1=(($388+4)|0);
 var $389$1=HEAP32[(($ld$86$1)>>2)];
 var $_sroa_036_0__idx_i89=$373;
 var $st$87$0=(($_sroa_036_0__idx_i89)|0);
 HEAP32[(($st$87$0)>>2)]=$387$0;
 var $st$88$1=(($_sroa_036_0__idx_i89+4)|0);
 HEAP32[(($st$88$1)>>2)]=$387$1;
 var $_sroa_137_8__idx38_i90=(($373+8)|0);
 var $390=$_sroa_137_8__idx38_i90;
 var $st$89$0=(($390)|0);
 HEAP32[(($st$89$0)>>2)]=$389$0;
 var $st$90$1=(($390+4)|0);
 HEAP32[(($st$90$1)>>2)]=$389$1;
 var $ld$91$0=(($339)|0);
 var $391$0=HEAP32[(($ld$91$0)>>2)];
 var $ld$92$1=(($339+4)|0);
 var $391$1=HEAP32[(($ld$92$1)>>2)];
 var $ld$93$0=(($341)|0);
 var $392$0=HEAP32[(($ld$93$0)>>2)];
 var $ld$94$1=(($341+4)|0);
 var $392$1=HEAP32[(($ld$94$1)>>2)];
 var $_sroa_033_0__idx_i91=(($373+16)|0);
 var $393=$_sroa_033_0__idx_i91;
 var $st$95$0=(($393)|0);
 HEAP32[(($st$95$0)>>2)]=$391$0;
 var $st$96$1=(($393+4)|0);
 HEAP32[(($st$96$1)>>2)]=$391$1;
 var $_sroa_134_8__idx35_i92=(($373+24)|0);
 var $394=$_sroa_134_8__idx35_i92;
 var $st$97$0=(($394)|0);
 HEAP32[(($st$97$0)>>2)]=$392$0;
 var $st$98$1=(($394+4)|0);
 HEAP32[(($st$98$1)>>2)]=$392$1;
 var $395=HEAP32[(($313)>>2)];
 var $396=(($373+72)|0);
 var $397=$396;
 HEAP32[(($397)>>2)]=$395;
 var $ld$99$0=(($328)|0);
 var $398$0=HEAP32[(($ld$99$0)>>2)];
 var $ld$100$1=(($328+4)|0);
 var $398$1=HEAP32[(($ld$100$1)>>2)];
 var $ld$101$0=(($329)|0);
 var $399$0=HEAP32[(($ld$101$0)>>2)];
 var $ld$102$1=(($329+4)|0);
 var $399$1=HEAP32[(($ld$102$1)>>2)];
 var $400=$375;
 var $st$103$0=(($400)|0);
 HEAP32[(($st$103$0)>>2)]=$398$0;
 var $st$104$1=(($400+4)|0);
 HEAP32[(($st$104$1)>>2)]=$398$1;
 var $_sroa_131_8__idx32_i94=(($373+48)|0);
 var $401=$_sroa_131_8__idx32_i94;
 var $st$105$0=(($401)|0);
 HEAP32[(($st$105$0)>>2)]=$399$0;
 var $st$106$1=(($401+4)|0);
 HEAP32[(($st$106$1)>>2)]=$399$1;
 var $ld$107$0=(($326)|0);
 var $402$0=HEAP32[(($ld$107$0)>>2)];
 var $ld$108$1=(($326+4)|0);
 var $402$1=HEAP32[(($ld$108$1)>>2)];
 var $ld$109$0=(($327)|0);
 var $403$0=HEAP32[(($ld$109$0)>>2)];
 var $ld$110$1=(($327+4)|0);
 var $403$1=HEAP32[(($ld$110$1)>>2)];
 var $_sroa_0_0__idx_i95=(($373+56)|0);
 var $404=$_sroa_0_0__idx_i95;
 var $st$111$0=(($404)|0);
 HEAP32[(($st$111$0)>>2)]=$402$0;
 var $st$112$1=(($404+4)|0);
 HEAP32[(($st$112$1)>>2)]=$402$1;
 var $_sroa_1_8__idx29_i96=(($373+64)|0);
 var $405=$_sroa_1_8__idx29_i96;
 var $st$113$0=(($405)|0);
 HEAP32[(($st$113$0)>>2)]=$403$0;
 var $st$114$1=(($405+4)|0);
 HEAP32[(($st$114$1)>>2)]=$403$1;
 var $406=HEAP32[(($28)>>2)];
 var $407=HEAP32[(($29)>>2)];
 var $408=($406|0)==($407|0);
 if($408){label=82;break;}else{label=79;break;}
 case 79: 
 var $410=($406|0)==0;
 if($410){var $412=0;label=81;break;}else{label=80;break;}
 case 80: 
 HEAP32[(($406)>>2)]=$374;
 var $_pre_i97=HEAP32[(($28)>>2)];
 var $412=$_pre_i97;label=81;break;
 case 81: 
 var $412;
 var $413=(($412+4)|0);
 HEAP32[(($28)>>2)]=$413;
 label=83;break;
 case 82: 
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($30,$jr_i88);
 label=83;break;
 case 83: 
 var $415=((($i_0247)+(1))|0);
 var $416=HEAP32[(($25)>>2)];
 var $417=HEAP32[(($26)>>2)];
 var $418=$416;
 var $419=$417;
 var $420=((($418)-($419))|0);
 var $421=$420>>2;
 var $422=($415>>>0)<($421>>>0);
 if($422){var $i_0247=$415;var $330=$417;label=71;break;}else{label=84;break;}
 case 84: 
 var $423=HEAP32[(($63)>>2)];
 var $424=($423|0)==($61|0);
 if($424){label=103;break;}else{label=85;break;}
 case 85: 
 var $426=HEAP32[(($313)>>2)];
 var $427=($426|0)>-1;
 if($427){label=86;break;}else{label=97;break;}
 case 86: 
 var $429=HEAP32[(($144)>>2)];
 var $430=(($429+100)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=($431|0)>-1;
 if($432){label=87;break;}else{label=97;break;}
 case 87: 
 var $434=HEAP32[(($8)>>2)];
 var $435=((($434)-(12))|0);
 var $436=$435;
 var $437=HEAP32[(($436)>>2)];
 var $_sum57=((($437)+(12))|0);
 var $438=(($13+$_sum57)|0);
 var $439=HEAP8[($438)];
 var $440=$439&1;
 var $441=(($440<<24)>>24)==0;
 var $442=(($429+64)|0);
 var $ld$115$0=(($442)|0);
 var $443$0=HEAP32[(($ld$115$0)>>2)];
 var $ld$116$1=(($442+4)|0);
 var $443$1=HEAP32[(($ld$116$1)>>2)];
 if($441){label=90;break;}else{label=88;break;}
 case 88: 
 var $st$117$0=(($38)|0);
 HEAP32[(($st$117$0)>>2)]=$443$0;
 var $st$118$1=(($38+4)|0);
 HEAP32[(($st$118$1)>>2)]=$443$1;
 var $_lo_lobit_i_i_i$0=($443$1>>31)|(((((($443$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($443$1|0)<0))|0)?-1:0)>>31)|(((((($443$1|0)<0))|0)?-1:0)<<1);
 var $st$119$0=(($39)|0);
 HEAP32[(($st$119$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$120$1=(($39+4)|0);
 HEAP32[(($st$120$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $445=(($61+56)|0);
 var $ld$121$0=(($445)|0);
 var $446$0=HEAP32[(($ld$121$0)>>2)];
 var $ld$122$1=(($445+4)|0);
 var $446$1=HEAP32[(($ld$122$1)>>2)];
 var $st$123$0=(($40)|0);
 HEAP32[(($st$123$0)>>2)]=$446$0;
 var $st$124$1=(($40+4)|0);
 HEAP32[(($st$124$1)>>2)]=$446$1;
 var $_lo_lobit_i_i9_i$0=($446$1>>31)|(((((($446$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i9_i$1=(((((($446$1|0)<0))|0)?-1:0)>>31)|(((((($446$1|0)<0))|0)?-1:0)<<1);
 var $st$125$0=(($41)|0);
 HEAP32[(($st$125$0)>>2)]=$_lo_lobit_i_i9_i$0;
 var $st$126$1=(($41+4)|0);
 HEAP32[(($st$126$1)>>2)]=$_lo_lobit_i_i9_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $447=(($429+56)|0);
 var $ld$127$0=(($447)|0);
 var $448$0=HEAP32[(($ld$127$0)>>2)];
 var $ld$128$1=(($447+4)|0);
 var $448$1=HEAP32[(($ld$128$1)>>2)];
 var $st$129$0=(($42)|0);
 HEAP32[(($st$129$0)>>2)]=$448$0;
 var $st$130$1=(($42+4)|0);
 HEAP32[(($st$130$1)>>2)]=$448$1;
 var $_lo_lobit_i_i11_i$0=($448$1>>31)|(((((($448$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i11_i$1=(((((($448$1|0)<0))|0)?-1:0)>>31)|(((((($448$1|0)<0))|0)?-1:0)<<1);
 var $st$131$0=(($43)|0);
 HEAP32[(($st$131$0)>>2)]=$_lo_lobit_i_i11_i$0;
 var $st$132$1=(($43+4)|0);
 HEAP32[(($st$132$1)>>2)]=$_lo_lobit_i_i11_i$1;
 var $449=(($61+64)|0);
 var $ld$133$0=(($449)|0);
 var $450$0=HEAP32[(($ld$133$0)>>2)];
 var $ld$134$1=(($449+4)|0);
 var $450$1=HEAP32[(($ld$134$1)>>2)];
 var $st$135$0=(($44)|0);
 HEAP32[(($st$135$0)>>2)]=$450$0;
 var $st$136$1=(($44+4)|0);
 HEAP32[(($st$136$1)>>2)]=$450$1;
 var $_lo_lobit_i_i10_i$0=($450$1>>31)|(((((($450$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i10_i$1=(((((($450$1|0)<0))|0)?-1:0)>>31)|(((((($450$1|0)<0))|0)?-1:0)<<1);
 var $st$137$0=(($45)|0);
 HEAP32[(($st$137$0)>>2)]=$_lo_lobit_i_i10_i$0;
 var $st$138$1=(($45+4)|0);
 HEAP32[(($st$138$1)>>2)]=$_lo_lobit_i_i10_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$139$0=(($46)|0);
 var $451$0=HEAP32[(($ld$139$0)>>2)];
 var $ld$140$1=(($46+4)|0);
 var $451$1=HEAP32[(($ld$140$1)>>2)];
 var $ld$141$0=(($47)|0);
 var $452$0=HEAP32[(($ld$141$0)>>2)];
 var $ld$142$1=(($47+4)|0);
 var $452$1=HEAP32[(($ld$142$1)>>2)];
 var $453=(($451$0|0) == ($452$0|0)) & (($451$1|0) == ($452$1|0));
 if($453){label=89;break;}else{label=97;break;}
 case 89: 
 var $ld$143$0=(($48)|0);
 var $455$0=HEAP32[(($ld$143$0)>>2)];
 var $ld$144$1=(($48+4)|0);
 var $455$1=HEAP32[(($ld$144$1)>>2)];
 var $ld$145$0=(($49)|0);
 var $456$0=HEAP32[(($ld$145$0)>>2)];
 var $ld$146$1=(($49+4)|0);
 var $456$1=HEAP32[(($ld$146$1)>>2)];
 var $457=(($455$0|0) == ($456$0|0)) & (($455$1|0) == ($456$1|0));
 var $_0_i87=$457;label=91;break;
 case 90: 
 var $459=(($61+56)|0);
 var $ld$147$0=(($459)|0);
 var $460$0=HEAP32[(($ld$147$0)>>2)];
 var $ld$148$1=(($459+4)|0);
 var $460$1=HEAP32[(($ld$148$1)>>2)];
 var $461$0=___muldi3($460$0,$460$1,$443$0,$443$1);var $461$1=tempRet0;
 var $462=(($429+56)|0);
 var $ld$149$0=(($462)|0);
 var $463$0=HEAP32[(($ld$149$0)>>2)];
 var $ld$150$1=(($462+4)|0);
 var $463$1=HEAP32[(($ld$150$1)>>2)];
 var $464=(($61+64)|0);
 var $ld$151$0=(($464)|0);
 var $465$0=HEAP32[(($ld$151$0)>>2)];
 var $ld$152$1=(($464+4)|0);
 var $465$1=HEAP32[(($ld$152$1)>>2)];
 var $466$0=___muldi3($465$0,$465$1,$463$0,$463$1);var $466$1=tempRet0;
 var $467=(($461$0|0) == ($466$0|0)) & (($461$1|0) == ($466$1|0));
 var $_0_i87=$467;label=91;break;
 case 91: 
 var $_0_i87;
 if($_0_i87){label=92;break;}else{label=97;break;}
 case 92: 
 var $469=HEAP32[(($144)>>2)];
 var $470=__Znwj(80);
 var $471=$470;
 var $472=(($470+40)|0);
 HEAP32[(($470)>>2)]=0; HEAP32[((($470)+(4))>>2)]=0; HEAP32[((($470)+(8))>>2)]=0; HEAP32[((($470)+(12))>>2)]=0; HEAP32[((($470)+(16))>>2)]=0; HEAP32[((($470)+(20))>>2)]=0; HEAP32[((($470)+(24))>>2)]=0; HEAP32[((($470)+(28))>>2)]=0;
 HEAP32[(($472)>>2)]=0; HEAP32[((($472)+(4))>>2)]=0; HEAP32[((($472)+(8))>>2)]=0; HEAP32[((($472)+(12))>>2)]=0; HEAP32[((($472)+(16))>>2)]=0; HEAP32[((($472)+(20))>>2)]=0; HEAP32[((($472)+(24))>>2)]=0; HEAP32[((($472)+(28))>>2)]=0;
 HEAP32[(($jr_i)>>2)]=$471;
 var $473=HEAP32[(($313)>>2)];
 var $474=(($470+32)|0);
 var $475=$474;
 HEAP32[(($475)>>2)]=$473;
 var $476=(($61+16)|0);
 var $ld$153$0=(($476)|0);
 var $477$0=HEAP32[(($ld$153$0)>>2)];
 var $ld$154$1=(($476+4)|0);
 var $477$1=HEAP32[(($ld$154$1)>>2)];
 var $478=(($61+24)|0);
 var $ld$155$0=(($478)|0);
 var $479$0=HEAP32[(($ld$155$0)>>2)];
 var $ld$156$1=(($478+4)|0);
 var $479$1=HEAP32[(($ld$156$1)>>2)];
 var $_sroa_036_0__idx_i=$470;
 var $st$157$0=(($_sroa_036_0__idx_i)|0);
 HEAP32[(($st$157$0)>>2)]=$477$0;
 var $st$158$1=(($_sroa_036_0__idx_i+4)|0);
 HEAP32[(($st$158$1)>>2)]=$477$1;
 var $_sroa_137_8__idx38_i=(($470+8)|0);
 var $480=$_sroa_137_8__idx38_i;
 var $st$159$0=(($480)|0);
 HEAP32[(($st$159$0)>>2)]=$479$0;
 var $st$160$1=(($480+4)|0);
 HEAP32[(($st$160$1)>>2)]=$479$1;
 var $481=(($61+32)|0);
 var $ld$161$0=(($481)|0);
 var $482$0=HEAP32[(($ld$161$0)>>2)];
 var $ld$162$1=(($481+4)|0);
 var $482$1=HEAP32[(($ld$162$1)>>2)];
 var $483=(($61+40)|0);
 var $ld$163$0=(($483)|0);
 var $484$0=HEAP32[(($ld$163$0)>>2)];
 var $ld$164$1=(($483+4)|0);
 var $484$1=HEAP32[(($ld$164$1)>>2)];
 var $_sroa_033_0__idx_i=(($470+16)|0);
 var $485=$_sroa_033_0__idx_i;
 var $st$165$0=(($485)|0);
 HEAP32[(($st$165$0)>>2)]=$482$0;
 var $st$166$1=(($485+4)|0);
 HEAP32[(($st$166$1)>>2)]=$482$1;
 var $_sroa_134_8__idx35_i=(($470+24)|0);
 var $486=$_sroa_134_8__idx35_i;
 var $st$167$0=(($486)|0);
 HEAP32[(($st$167$0)>>2)]=$484$0;
 var $st$168$1=(($486+4)|0);
 HEAP32[(($st$168$1)>>2)]=$484$1;
 var $487=(($469+100)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=(($470+72)|0);
 var $490=$489;
 HEAP32[(($490)>>2)]=$488;
 var $491=(($469+16)|0);
 var $ld$169$0=(($491)|0);
 var $492$0=HEAP32[(($ld$169$0)>>2)];
 var $ld$170$1=(($491+4)|0);
 var $492$1=HEAP32[(($ld$170$1)>>2)];
 var $493=(($469+24)|0);
 var $ld$171$0=(($493)|0);
 var $494$0=HEAP32[(($ld$171$0)>>2)];
 var $ld$172$1=(($493+4)|0);
 var $494$1=HEAP32[(($ld$172$1)>>2)];
 var $495=$472;
 var $st$173$0=(($495)|0);
 HEAP32[(($st$173$0)>>2)]=$492$0;
 var $st$174$1=(($495+4)|0);
 HEAP32[(($st$174$1)>>2)]=$492$1;
 var $_sroa_131_8__idx32_i=(($470+48)|0);
 var $496=$_sroa_131_8__idx32_i;
 var $st$175$0=(($496)|0);
 HEAP32[(($st$175$0)>>2)]=$494$0;
 var $st$176$1=(($496+4)|0);
 HEAP32[(($st$176$1)>>2)]=$494$1;
 var $497=(($469+32)|0);
 var $ld$177$0=(($497)|0);
 var $498$0=HEAP32[(($ld$177$0)>>2)];
 var $ld$178$1=(($497+4)|0);
 var $498$1=HEAP32[(($ld$178$1)>>2)];
 var $499=(($469+40)|0);
 var $ld$179$0=(($499)|0);
 var $500$0=HEAP32[(($ld$179$0)>>2)];
 var $ld$180$1=(($499+4)|0);
 var $500$1=HEAP32[(($ld$180$1)>>2)];
 var $_sroa_0_0__idx_i=(($470+56)|0);
 var $501=$_sroa_0_0__idx_i;
 var $st$181$0=(($501)|0);
 HEAP32[(($st$181$0)>>2)]=$498$0;
 var $st$182$1=(($501+4)|0);
 HEAP32[(($st$182$1)>>2)]=$498$1;
 var $_sroa_1_8__idx29_i=(($470+64)|0);
 var $502=$_sroa_1_8__idx29_i;
 var $st$183$0=(($502)|0);
 HEAP32[(($st$183$0)>>2)]=$500$0;
 var $st$184$1=(($502+4)|0);
 HEAP32[(($st$184$1)>>2)]=$500$1;
 var $503=HEAP32[(($28)>>2)];
 var $504=HEAP32[(($29)>>2)];
 var $505=($503|0)==($504|0);
 if($505){label=96;break;}else{label=93;break;}
 case 93: 
 var $507=($503|0)==0;
 if($507){var $509=0;label=95;break;}else{label=94;break;}
 case 94: 
 HEAP32[(($503)>>2)]=$471;
 var $_pre_i77=HEAP32[(($28)>>2)];
 var $509=$_pre_i77;label=95;break;
 case 95: 
 var $509;
 var $510=(($509+4)|0);
 HEAP32[(($28)>>2)]=$510;
 label=97;break;
 case 96: 
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($30,$jr_i);
 label=97;break;
 case 97: 
 var $512=HEAP32[(($63)>>2)];
 var $513=(($59+16)|0);
 var $ld$185$0=(($513)|0);
 var $514$0=HEAP32[(($ld$185$0)>>2)];
 var $ld$186$1=(($513+4)|0);
 var $514$1=HEAP32[(($ld$186$1)>>2)];
 var $515=(($59+24)|0);
 var $ld$187$0=(($515)|0);
 var $516$0=HEAP32[(($ld$187$0)>>2)];
 var $ld$188$1=(($515+4)|0);
 var $516$1=HEAP32[(($ld$188$1)>>2)];
 var $st$189$0=(($50)|0);
 HEAP32[(($st$189$0)>>2)]=$514$0;
 var $st$190$1=(($50+4)|0);
 HEAP32[(($st$190$1)>>2)]=$514$1;
 var $st$191$0=(($51)|0);
 HEAP32[(($st$191$0)>>2)]=$516$0;
 var $st$192$1=(($51+4)|0);
 HEAP32[(($st$192$1)>>2)]=$516$1;
 var $517=($512|0)==($61|0);
 if($517){label=103;break;}else{var $e_0250=$512;label=98;break;}
 case 98: 
 var $e_0250;
 var $518=($e_0250|0)==0;
 if($518){label=99;break;}else{label=102;break;}
 case 99: 
 var $520=___cxa_allocate_exception(16);
 var $521=$520;
 HEAP32[(($521)>>2)]=9408;
 var $522=(($520+4)|0);
 var $523=$522;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($523,3280,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=101;break; }
 case 100: 
 ___cxa_throw($520,14376,(576));
 throw "Reached an unreachable!";
 case 101: 
 var $525$0 = ___cxa_find_matching_catch(-1, -1); var $525$1 = tempRet0;
 ___cxa_free_exception($520);
 ___resumeException($525$0)
 case 102: 
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$61,$e_0250,$pt1,0);
 var $527=(($e_0250+116)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=($528|0)==($61|0);
 if($529){label=103;break;}else{var $e_0250=$528;label=98;break;}
 case 103: 
 var $530=HEAP32[(($8)>>2)];
 var $531=((($530)-(12))|0);
 var $532=$531;
 var $533=HEAP32[(($532)>>2)];
 var $_sum232=((($533)+(4))|0);
 var $534=(($13+$_sum232)|0);
 var $535=$534;
 var $536=HEAP32[(($535)>>2)];
 var $537=($536|0)==0;
 if($537){var $538=$533;label=104;break;}else{label=105;break;}
 case 104: 
 var $538;
 var $_sum=((($538)+(4))|0);
 var $539=(($13+$_sum)|0);
 var $540=$539;
 var $541=HEAP32[(($540)>>2)];
 var $542=($541|0)==0;
 if($542){label=106;break;}else{var $53=$541;label=3;break;}
 case 105: 
 var $544=(($536+16)|0);
 var $545=HEAP32[(($544)>>2)];
 HEAP32[(($535)>>2)]=$545;
 var $_pre=HEAP32[(($8)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert269=$_phi_trans_insert;
 var $_pre270=HEAP32[(($_phi_trans_insert269)>>2)];
 var $538=$_pre270;label=104;break;
 case 106: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper20ProcessIntersectionsExx($this,$botY$0,$botY$1,$topY$0,$topY$1){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+48)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $_08=1;label=19;break;}else{label=2;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper18BuildIntersectListExx($this,$botY$0,$botY$1,$topY$0,$topY$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $6=(($this+56)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){var $_08=1;label=19;break;}else{label=10;break;}
 case 4: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $_pre_phi=$6;label=6;break;
 case 5: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit$1 = tempRet0;
 var $_pre=(($this+56)|0);
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $_pre_phi=$_pre;label=6;break;
 case 6: 
 var $_pre_phi;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $10=$lpad_phi$0;
 var $11=___cxa_begin_catch($10);
 var $12=(($this+52)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=HEAP32[(($_pre_phi)>>2)];
 var $14=($13|0)==0;
 if($14){label=8;break;}else{var $15=$13;label=7;break;}
 case 7: 
 var $15;
 var $16=(($15+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$15;
 __ZdlPv($18);
 HEAP32[(($_pre_phi)>>2)]=$17;
 var $19=($17|0)==0;
 if($19){label=8;break;}else{var $15=$17;label=7;break;}
 case 8: 
 var $20=___cxa_allocate_exception(16);
 var $21=$20;
 HEAP32[(($21)>>2)]=9408;
 var $22=(($20+4)|0);
 var $23=$22;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($23,960,26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=17;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($20,14376,(576)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=16;break; }
 case 10: 
 var $25=__ZN10ClipperLib7Clipper18FixupIntersectionsEv($this);
 if($25){label=11;break;}else{var $_08=0;label=19;break;}
 case 11: 
 var $27=HEAP32[(($6)>>2)];
 var $28=($27|0)==0;
 if($28){var $_08=1;label=19;break;}else{var $29=$27;label=12;break;}
 case 12: 
 var $29;
 var $30=(($29+24)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($29)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($29+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($29+8)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$33,$35,$36,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=4;break; }
 case 13: 
 var $37=HEAP32[(($6)>>2)];
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($37+4)|0);
 var $41=HEAP32[(($40)>>2)];
 __ZN10ClipperLib7Clipper18SwapPositionsInAELEPNS_5TEdgeES2_($this,$39,$41);
 var $42=HEAP32[(($6)>>2)];
 var $43=($42|0)==0;
 if($43){label=15;break;}else{label=14;break;}
 case 14: 
 var $45=$42;
 __ZdlPv($45);
 label=15;break;
 case 15: 
 HEAP32[(($6)>>2)]=$31;
 var $47=($31|0)==0;
 if($47){var $_08=1;label=19;break;}else{var $29=$31;label=12;break;}
 case 16: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $_0=$51;var $_07=$50;label=18;break;
 case 17: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=$53$0;
 var $55=$53$1;
 ___cxa_free_exception($20);
 var $_0=$55;var $_07=$54;label=18;break;
 case 18: 
 var $_07;
 var $_0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 19: 
 var $_08;
 return $_08;
 case 20: 
 var $58$0=$_07;
 var $58$1=0;
 var $59$0=$58$0;
 var $59$1=$_0;
 ___resumeException($59$0)
 case 21: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1,0); var $61$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper27ProcessEdgesAtTopOfScanbeamEx($this,$topY$0,$topY$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $hj_i=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(24);
 var $3=(sp)+(40);
 var $4=(sp)+(56);
 var $5=(sp)+(72);
 var $6=(sp)+(88);
 var $jr_i40=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 var $11=(sp)+(176);
 var $12=(sp)+(192);
 var $jr_i=(sp)+(208);
 var $e=(sp)+(216);
 var $13=(sp)+(224);
 var $14=(sp)+(240);
 var $15=(sp)+(256);
 var $16=(sp)+(272);
 var $17=(($this+48)|0);
 var $18=HEAP32[(($17)>>2)];
 HEAP32[(($e)>>2)]=$18;
 var $19=($18|0)==0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $_pre214=(($this+52)|0);
 var $_pre_phi=$_pre214;label=49;break;
 case 3: 
 var $20=(($13)|0);
 var $21=(($13+8)|0);
 var $22=(($this+32)|0);
 var $23=(($this+28)|0);
 var $24=$hj_i;
 var $25=(($this+36)|0);
 var $26=(($this+28)|0);
 var $27=(($this+52)|0);
 var $29=$18;label=4;break;
 case 4: 
 var $29;
 var $30=(($29+40)|0);
 var $ld$0$0=(($30)|0);
 var $31$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$1$1)>>2)];
 var $32=(($31$0|0) == ($topY$0|0)) & (($31$1|0) == ($topY$1|0));
 if($32){label=5;break;}else{label=43;break;}
 case 5: 
 var $33=(($29+112)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=6;break;}else{label=23;break;}
 case 6: 
 var $37=(($29+104)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=10;break;}else{label=7;break;}
 case 7: 
 var $41=(($38+40)|0);
 var $ld$2$0=(($41)|0);
 var $42$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($41+4)|0);
 var $42$1=HEAP32[(($ld$3$1)>>2)];
 var $43=(($42$0|0) == ($topY$0|0)) & (($42$1|0) == ($topY$1|0));
 if($43){label=8;break;}else{label=10;break;}
 case 8: 
 var $44=(($38+112)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==0;
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 var $48=(($38+32)|0);
 var $ld$4$0=(($48)|0);
 var $49$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($48+4)|0);
 var $49$1=HEAP32[(($ld$5$1)>>2)];
 var $50=(($29+32)|0);
 var $ld$6$0=(($50)|0);
 var $51$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($50+4)|0);
 var $51$1=HEAP32[(($ld$7$1)>>2)];
 var $52=(($49$0|0) == ($51$0|0)) & (($49$1|0) == ($51$1|0));
 if($52){var $_0_i=$38;label=11;break;}else{label=10;break;}
 case 10: 
 var $53=(($29+108)|0);
 var $54=HEAP32[(($53)>>2)];
 var $_0_i=$54;label=11;break;
 case 11: 
 var $_0_i;
 var $55=(($_0_i+48)|0);
 var $56=HEAPF64[(($55)>>3)];
 var $57=($56)+((1e+40));
 var $58=$57>(-1e-20);
 if($58){label=12;break;}else{label=18;break;}
 case 12: 
 if($39){label=16;break;}else{label=13;break;}
 case 13: 
 var $61=(($38+40)|0);
 var $ld$8$0=(($61)|0);
 var $62$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$9$1)>>2)];
 var $63=(($62$0|0) == ($topY$0|0)) & (($62$1|0) == ($topY$1|0));
 if($63){label=14;break;}else{label=16;break;}
 case 14: 
 var $64=(($38+112)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==0;
 if($66){label=15;break;}else{label=16;break;}
 case 15: 
 var $68=(($38+32)|0);
 var $ld$10$0=(($68)|0);
 var $69$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($68+4)|0);
 var $69$1=HEAP32[(($ld$11$1)>>2)];
 var $70=(($29+32)|0);
 var $ld$12$0=(($70)|0);
 var $71$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($70+4)|0);
 var $71$1=HEAP32[(($ld$13$1)>>2)];
 var $72=(($69$0|0) == ($71$0|0)) & (($69$1|0) == ($71$1|0));
 if($72){var $_0_i37=$38;label=17;break;}else{label=16;break;}
 case 16: 
 var $73=(($29+108)|0);
 var $74=HEAP32[(($73)>>2)];
 var $_0_i37=$74;label=17;break;
 case 17: 
 var $_0_i37;
 var $75=(($_0_i37+48)|0);
 var $76=HEAPF64[(($75)>>3)];
 var $77=($76)+((1e+40));
 var $78=$77<(1e-20);
 if($78){label=22;break;}else{label=18;break;}
 case 18: 
 var $80=(($29+120)|0);
 var $81=HEAP32[(($80)>>2)];
 __ZN10ClipperLib7Clipper8DoMaximaEPNS_5TEdgeEx($this,$29,$topY$0,$topY$1);
 var $82=($81|0)==0;
 if($82){label=19;break;}else{label=21;break;}
 case 19: 
 var $84=HEAP32[(($17)>>2)];
 HEAP32[(($e)>>2)]=$84;
 var $_be=$84;label=20;break;
 case 20: 
 var $_be;
 var $85=($_be|0)==0;
 if($85){var $_pre_phi=$27;label=49;break;}else{var $29=$_be;label=4;break;}
 case 21: 
 var $87=(($81+116)|0);
 var $88=HEAP32[(($87)>>2)];
 HEAP32[(($e)>>2)]=$88;
 var $_be=$88;label=20;break;
 case 22: 
 if($32){label=23;break;}else{label=43;break;}
 case 23: 
 var $89=(($29+112)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)==0;
 if($91){label=41;break;}else{label=24;break;}
 case 24: 
 var $93=(($90+48)|0);
 var $94=HEAPF64[(($93)>>3)];
 var $95=($94)+((1e+40));
 var $96=$95>(-1e-20);
 var $97=$95<(1e-20);
 var $or_cond=$96&$97;
 if($or_cond){label=25;break;}else{label=41;break;}
 case 25: 
 var $99=(($29+100)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)>-1;
 if($101){label=26;break;}else{label=38;break;}
 case 26: 
 var $103=(($29+32)|0);
 var $ld$14$0=(($103)|0);
 var $104$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($103+4)|0);
 var $104$1=HEAP32[(($ld$15$1)>>2)];
 var $st$16$0=(($20)|0);
 HEAP32[(($st$16$0)>>2)]=$104$0;
 var $st$17$1=(($20+4)|0);
 HEAP32[(($st$17$1)>>2)]=$104$1;
 var $st$18$0=(($21)|0);
 HEAP32[(($st$18$0)>>2)]=$topY$0;
 var $st$19$1=(($21+4)|0);
 HEAP32[(($st$19$1)>>2)]=$topY$1;
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$29,$13);
 var $105=HEAP32[(($22)>>2)];
 var $106=HEAP32[(($23)>>2)];
 var $107=($105|0)==($106|0);
 if($107){var $170=$105;label=33;break;}else{var $i_0203=0;var $109=$106;var $108=$105;label=27;break;}
 case 27: 
 var $108;
 var $109;
 var $i_0203;
 var $110=(($109+($i_0203<<2))|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113)|0);
 var $ld$20$0=(($114)|0);
 var $115$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($114+4)|0);
 var $115$1=HEAP32[(($ld$21$1)>>2)];
 var $116=(($113+8)|0);
 var $ld$22$0=(($116)|0);
 var $117$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($116+4)|0);
 var $117$1=HEAP32[(($ld$23$1)>>2)];
 var $118=(($113+32)|0);
 var $ld$24$0=(($118)|0);
 var $119$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($118+4)|0);
 var $119$1=HEAP32[(($ld$25$1)>>2)];
 var $120=(($113+40)|0);
 var $ld$26$0=(($120)|0);
 var $121$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($120+4)|0);
 var $121$1=HEAP32[(($ld$27$1)>>2)];
 var $122=HEAP32[(($e)>>2)];
 var $123=(($122+112)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124)|0);
 var $ld$28$0=(($125)|0);
 var $126$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($125+4)|0);
 var $126$1=HEAP32[(($ld$29$1)>>2)];
 var $127=(($124+8)|0);
 var $ld$30$0=(($127)|0);
 var $128$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($127+4)|0);
 var $128$1=HEAP32[(($ld$31$1)>>2)];
 var $129=(($124+32)|0);
 var $ld$32$0=(($129)|0);
 var $130$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($129+4)|0);
 var $130$1=HEAP32[(($ld$33$1)>>2)];
 var $131=(($124+40)|0);
 var $ld$34$0=(($131)|0);
 var $132$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($131+4)|0);
 var $132$1=HEAP32[(($ld$35$1)>>2)];
 var $133=(($117$0|0) == ($121$0|0)) & (($117$1|0) == ($121$1|0));
 if($133){label=29;break;}else{label=28;break;}
 case 28: 
 var $135$0=_i64Subtract($115$0,$115$1,$119$0,$119$1);var $135$1=tempRet0;
 var $136$0=_i64Subtract($117$0,$117$1,$121$0,$121$1);var $136$1=tempRet0;
 var $137$0=___divdi3($135$0,$135$1,$136$0,$136$1);var $137$1=tempRet0;
 var $$etemp$36$0=0;
 var $$etemp$36$1=0;
 var $138=(($137$1|0) < ($$etemp$36$1|0)) | (((($137$1|0) == ($$etemp$36$1|0) & ($137$0>>>0) <  ($$etemp$36$0>>>0))));
 var $$etemp$37$0=0;
 var $$etemp$37$1=0;
 var $139$0=_i64Subtract($$etemp$37$0,$$etemp$37$1,$137$0,$137$1);var $139$1=tempRet0;
 var $140$0=$138?$139$0:$137$0;
 var $140$1=$138?$139$1:$137$1;
 var $$etemp$38$0=1;
 var $$etemp$38$1=0;
 var $141=(($140$1|0) > ($$etemp$38$1|0)) | (((($140$1|0) == ($$etemp$38$1|0) & ($140$0>>>0) >  ($$etemp$38$0>>>0))));
 if($141){label=29;break;}else{label=30;break;}
 case 29: 
 var $142=(($115$1|0) > ($119$1|0)) | (((($115$1|0) == ($119$1|0) & ($115$0>>>0) >  ($119$0>>>0))));
 var $_$0=$142?$115$0:$119$0;
 var $_$1=$142?$115$1:$119$1;
 var $_198$0=$142?$119$0:$115$0;
 var $_198$1=$142?$119$1:$115$1;
 var $143=(($126$1|0) > ($130$1|0)) | (((($126$1|0) == ($130$1|0) & ($126$0>>>0) >  ($130$0>>>0))));
 var $tmp_i_i_sroa_0_0_load194$0=$143?$126$0:$130$0;
 var $tmp_i_i_sroa_0_0_load194$1=$143?$126$1:$130$1;
 var $144$0=$143?$130$0:$126$0;
 var $144$1=$143?$130$1:$126$1;
 var $145=(($_198$1|0) > ($144$1|0)) | (((($_198$1|0) == ($144$1|0) & ($_198$0>>>0) >  ($144$0>>>0))));
 var $_198_$0=$145?$_198$0:$144$0;
 var $_198_$1=$145?$_198$1:$144$1;
 var $146=(($_$1|0) < ($tmp_i_i_sroa_0_0_load194$1|0)) | (((($_$1|0) == ($tmp_i_i_sroa_0_0_load194$1|0) & ($_$0>>>0) <  ($tmp_i_i_sroa_0_0_load194$0>>>0))));
 var $147$0=$146?$_$0:$tmp_i_i_sroa_0_0_load194$0;
 var $147$1=$146?$_$1:$tmp_i_i_sroa_0_0_load194$1;
 var $148=(($_198_$1|0) < ($147$1|0)) | (((($_198_$1|0) == ($147$1|0) & ($_198_$0>>>0) <  ($147$0>>>0))));
 if($148){label=31;break;}else{var $163=$108;var $162=$109;label=32;break;}
 case 30: 
 var $149=(($117$1|0) < ($121$1|0)) | (((($117$1|0) == ($121$1|0) & ($117$0>>>0) <  ($121$0>>>0))));
 var $_199$0=$149?$117$0:$121$0;
 var $_199$1=$149?$117$1:$121$1;
 var $_200$0=$149?$121$0:$117$0;
 var $_200$1=$149?$121$1:$117$1;
 var $150=(($128$1|0) < ($132$1|0)) | (((($128$1|0) == ($132$1|0) & ($128$0>>>0) <  ($132$0>>>0))));
 var $_sroa_1167_8_load175196$0=$150?$128$0:$132$0;
 var $_sroa_1167_8_load175196$1=$150?$128$1:$132$1;
 var $151$0=$150?$132$0:$128$0;
 var $151$1=$150?$132$1:$128$1;
 var $152=(($_200$1|0) < ($151$1|0)) | (((($_200$1|0) == ($151$1|0) & ($_200$0>>>0) <  ($151$0>>>0))));
 var $_200_$0=$152?$_200$0:$151$0;
 var $_200_$1=$152?$_200$1:$151$1;
 var $153=(($_199$1|0) > ($_sroa_1167_8_load175196$1|0)) | (((($_199$1|0) == ($_sroa_1167_8_load175196$1|0) & ($_199$0>>>0) >  ($_sroa_1167_8_load175196$0>>>0))));
 var $154$0=$153?$_199$0:$_sroa_1167_8_load175196$0;
 var $154$1=$153?$_199$1:$_sroa_1167_8_load175196$1;
 var $155=(($_200_$1|0) > ($154$1|0)) | (((($_200_$1|0) == ($154$1|0) & ($_200_$0>>>0) >  ($154$0>>>0))));
 if($155){label=31;break;}else{var $163=$108;var $162=$109;label=32;break;}
 case 31: 
 var $157=(($111+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($122+100)|0);
 var $160=HEAP32[(($159)>>2)];
 __ZN10ClipperLib7Clipper7AddJoinEPNS_5TEdgeES2_ii($this,$113,$124,$158,$160);
 var $_pre=HEAP32[(($22)>>2)];
 var $_pre208=HEAP32[(($23)>>2)];
 var $163=$_pre;var $162=$_pre208;label=32;break;
 case 32: 
 var $162;
 var $163;
 var $164=((($i_0203)+(1))|0);
 var $165=$163;
 var $166=$162;
 var $167=((($165)-($166))|0);
 var $168=$167>>2;
 var $169=($164>>>0)<($168>>>0);
 if($169){var $i_0203=$164;var $109=$162;var $108=$163;label=27;break;}else{var $170=$163;label=33;break;}
 case 33: 
 var $170;
 var $171=HEAP32[(($e)>>2)];
 var $172=(($171+112)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($171+100)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=__Znwj(8);
 var $177=$176;
 HEAP32[(($hj_i)>>2)]=$177;
 var $178=$176;
 HEAP32[(($178)>>2)]=$173;
 var $179=(($176+4)|0);
 var $180=$179;
 HEAP32[(($180)>>2)]=$175;
 var $181=HEAP32[(($25)>>2)];
 var $182=($170|0)==($181|0);
 if($182){label=37;break;}else{label=34;break;}
 case 34: 
 var $184=($170|0)==0;
 if($184){var $186=0;label=36;break;}else{label=35;break;}
 case 35: 
 HEAP32[(($170)>>2)]=$177;
 var $_pre_i67=HEAP32[(($22)>>2)];
 var $186=$_pre_i67;label=36;break;
 case 36: 
 var $186;
 var $187=(($186+4)|0);
 HEAP32[(($22)>>2)]=$187;
 label=38;break;
 case 37: 
 __ZNSt3__16vectorIPN10ClipperLib11HorzJoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($26,$hj_i);
 label=38;break;
 case 38: 
 __ZN10ClipperLib7Clipper17UpdateEdgeIntoAELERPNS_5TEdgeE($this,$e);
 var $189=HEAP32[(($e)>>2)];
 var $190=HEAP32[(($27)>>2)];
 var $191=($190|0)==0;
 if($191){label=39;break;}else{label=40;break;}
 case 39: 
 HEAP32[(($27)>>2)]=$189;
 var $193=(($189+128)|0);
 HEAP32[(($193)>>2)]=0;
 var $194=(($189+124)|0);
 HEAP32[(($194)>>2)]=0;
 var $222=$189;label=48;break;
 case 40: 
 var $196=(($189+124)|0);
 HEAP32[(($196)>>2)]=$190;
 var $197=(($189+128)|0);
 HEAP32[(($197)>>2)]=0;
 var $198=HEAP32[(($27)>>2)];
 var $199=(($198+128)|0);
 HEAP32[(($199)>>2)]=$189;
 HEAP32[(($27)>>2)]=$189;
 var $222=$189;label=48;break;
 case 41: 
 if($32){label=42;break;}else{label=43;break;}
 case 42: 
 var $201=(($29+32)|0);
 var $ld$39$0=(($201)|0);
 var $202$0=HEAP32[(($ld$39$0)>>2)];
 var $ld$40$1=(($201+4)|0);
 var $202$1=HEAP32[(($ld$40$1)>>2)];
 var $219$1=$202$1;var $219$0=$202$0;label=47;break;
 case 43: 
 var $203=(($29)|0);
 var $ld$41$0=(($203)|0);
 var $204$0=HEAP32[(($ld$41$0)>>2)];
 var $ld$42$1=(($203+4)|0);
 var $204$1=HEAP32[(($ld$42$1)>>2)];
 var $205=(($29+48)|0);
 var $206=HEAPF64[(($205)>>3)];
 var $207=(($29+8)|0);
 var $ld$43$0=(($207)|0);
 var $208$0=HEAP32[(($ld$43$0)>>2)];
 var $ld$44$1=(($207+4)|0);
 var $208$1=HEAP32[(($ld$44$1)>>2)];
 var $209$0=_i64Subtract($topY$0,$topY$1,$208$0,$208$1);var $209$1=tempRet0;
 var $210=(($209$0>>>0)+(($209$1|0)*4294967296));
 var $211=($206)*($210);
 var $212=$211<0;
 if($212){label=44;break;}else{label=45;break;}
 case 44: 
 var $214=($211)+((-0.5));
 var $_sink_i_i=$214;label=46;break;
 case 45: 
 var $216=($211)+((0.5));
 var $_sink_i_i=$216;label=46;break;
 case 46: 
 var $_sink_i_i;
 var $217$0=$_sink_i_i>>>0;var $217$1=(Math_abs($_sink_i_i) >= 1 ? ($_sink_i_i > 0 ? Math_min(Math_floor(($_sink_i_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i - +(((~~($_sink_i_i)))>>>0))/4294967296)))>>>0) : 0);
 var $218$0=_i64Add($217$0,$217$1,$204$0,$204$1);var $218$1=tempRet0;
 var $219$1=$218$1;var $219$0=$218$0;label=47;break;
 case 47: 
 var $219$0;
 var $219$1;
 var $220=(($29+16)|0);
 var $st$45$0=(($220)|0);
 HEAP32[(($st$45$0)>>2)]=$219$0;
 var $st$46$1=(($220+4)|0);
 HEAP32[(($st$46$1)>>2)]=$219$1;
 var $221=(($29+24)|0);
 var $st$47$0=(($221)|0);
 HEAP32[(($st$47$0)>>2)]=$topY$0;
 var $st$48$1=(($221+4)|0);
 HEAP32[(($st$48$1)>>2)]=$topY$1;
 var $222=$29;label=48;break;
 case 48: 
 var $222;
 var $223=(($222+116)|0);
 var $224=HEAP32[(($223)>>2)];
 HEAP32[(($e)>>2)]=$224;
 var $_be=$224;label=20;break;
 case 49: 
 var $_pre_phi;
 var $horzEdge_03_i=HEAP32[(($_pre_phi)>>2)];
 var $225=($horzEdge_03_i|0)==0;
 if($225){label=56;break;}else{var $horzEdge_04_i=$horzEdge_03_i;label=50;break;}
 case 50: 
 var $horzEdge_04_i;
 var $226=(($horzEdge_04_i+128)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($horzEdge_04_i+124)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($227|0)==0;
 var $231=($229|0)==0;
 if($230){label=52;break;}else{label=51;break;}
 case 51: 
 var $233=(($227+124)|0);
 HEAP32[(($233)>>2)]=$229;
 label=53;break;
 case 52: 
 HEAP32[(($_pre_phi)>>2)]=$229;
 label=53;break;
 case 53: 
 if($231){label=55;break;}else{label=54;break;}
 case 54: 
 var $237=(($229+128)|0);
 HEAP32[(($237)>>2)]=$227;
 label=55;break;
 case 55: 
 HEAP32[(($228)>>2)]=0;
 HEAP32[(($226)>>2)]=0;
 __ZN10ClipperLib7Clipper17ProcessHorizontalEPNS_5TEdgeE($this,$horzEdge_04_i);
 var $horzEdge_0_i=HEAP32[(($_pre_phi)>>2)];
 var $238=($horzEdge_0_i|0)==0;
 if($238){label=56;break;}else{var $horzEdge_04_i=$horzEdge_0_i;label=50;break;}
 case 56: 
 var $storemerge201=HEAP32[(($17)>>2)];
 HEAP32[(($e)>>2)]=$storemerge201;
 var $239=($storemerge201|0)==0;
 if($239){label=95;break;}else{label=57;break;}
 case 57: 
 var $240=(($14)|0);
 var $241=(($14+8)|0);
 var $242=$this;
 var $243=$this;
 var $244=$7;
 var $245=$8;
 var $246=$9;
 var $247=$10;
 var $248=$11;
 var $249=$12;
 var $250=(($16)|0);
 var $251=(($16+8)|0);
 var $252=$jr_i;
 var $253=(($this+20)|0);
 var $254=(($this+24)|0);
 var $255=(($this+16)|0);
 var $256=(($7+8)|0);
 var $257=(($7)|0);
 var $258=(($8+8)|0);
 var $259=(($8)|0);
 var $260=(($11+8)|0);
 var $261=(($11)|0);
 var $262=(($12+8)|0);
 var $263=(($12)|0);
 var $264=(($9)|0);
 var $265=(($10)|0);
 var $266=(($9+8)|0);
 var $267=(($10+8)|0);
 var $268=$1;
 var $269=$2;
 var $270=$3;
 var $271=$4;
 var $272=$5;
 var $273=$6;
 var $274=(($15)|0);
 var $275=(($15+8)|0);
 var $276=$jr_i40;
 var $277=(($1+8)|0);
 var $278=(($1)|0);
 var $279=(($2+8)|0);
 var $280=(($2)|0);
 var $281=(($5+8)|0);
 var $282=(($5)|0);
 var $283=(($6+8)|0);
 var $284=(($6)|0);
 var $285=(($3)|0);
 var $286=(($4)|0);
 var $287=(($3+8)|0);
 var $288=(($4+8)|0);
 var $290=$storemerge201;label=58;break;
 case 58: 
 var $290;
 var $291=(($290+40)|0);
 var $ld$49$0=(($291)|0);
 var $292$0=HEAP32[(($ld$49$0)>>2)];
 var $ld$50$1=(($291+4)|0);
 var $292$1=HEAP32[(($ld$50$1)>>2)];
 var $293=(($292$0|0) == ($topY$0|0)) & (($292$1|0) == ($topY$1|0));
 if($293){label=59;break;}else{label=94;break;}
 case 59: 
 var $294=(($290+112)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=($295|0)==0;
 if($296){label=94;break;}else{label=60;break;}
 case 60: 
 var $298=(($290+100)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=($299|0)>-1;
 if($300){label=61;break;}else{label=62;break;}
 case 61: 
 var $302=(($290+32)|0);
 var $ld$51$0=(($302)|0);
 var $303$0=HEAP32[(($ld$51$0)>>2)];
 var $ld$52$1=(($302+4)|0);
 var $303$1=HEAP32[(($ld$52$1)>>2)];
 var $st$53$0=(($240)|0);
 HEAP32[(($st$53$0)>>2)]=$303$0;
 var $st$54$1=(($240+4)|0);
 HEAP32[(($st$54$1)>>2)]=$303$1;
 var $st$55$0=(($241)|0);
 HEAP32[(($st$55$0)>>2)]=$topY$0;
 var $st$56$1=(($241+4)|0);
 HEAP32[(($st$56$1)>>2)]=$topY$1;
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$290,$14);
 label=62;break;
 case 62: 
 __ZN10ClipperLib7Clipper17UpdateEdgeIntoAELERPNS_5TEdgeE($this,$e);
 var $305=HEAP32[(($e)>>2)];
 var $306=(($305+120)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(($305+116)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=($307|0)==0;
 if($310){label=78;break;}else{label=63;break;}
 case 63: 
 var $312=(($307+16)|0);
 var $ld$57$0=(($312)|0);
 var $313$0=HEAP32[(($ld$57$0)>>2)];
 var $ld$58$1=(($312+4)|0);
 var $313$1=HEAP32[(($ld$58$1)>>2)];
 var $314=(($305)|0);
 var $ld$59$0=(($314)|0);
 var $315$0=HEAP32[(($ld$59$0)>>2)];
 var $ld$60$1=(($314+4)|0);
 var $315$1=HEAP32[(($ld$60$1)>>2)];
 var $316=(($313$0|0) == ($315$0|0)) & (($313$1|0) == ($315$1|0));
 if($316){label=64;break;}else{label=78;break;}
 case 64: 
 var $318=(($307+24)|0);
 var $ld$61$0=(($318)|0);
 var $319$0=HEAP32[(($ld$61$0)>>2)];
 var $ld$62$1=(($318+4)|0);
 var $319$1=HEAP32[(($ld$62$1)>>2)];
 var $320=(($305+8)|0);
 var $ld$63$0=(($320)|0);
 var $321$0=HEAP32[(($ld$63$0)>>2)];
 var $ld$64$1=(($320+4)|0);
 var $321$1=HEAP32[(($ld$64$1)>>2)];
 var $322=(($319$0|0) == ($321$0|0)) & (($319$1|0) == ($321$1|0));
 if($322){label=65;break;}else{label=78;break;}
 case 65: 
 var $324=(($305+100)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=($325|0)>-1;
 if($326){label=66;break;}else{label=78;break;}
 case 66: 
 var $328=(($307+100)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=($329|0)>-1;
 if($330){label=67;break;}else{label=78;break;}
 case 67: 
 var $332=(($307+40)|0);
 var $ld$65$0=(($332)|0);
 var $333$0=HEAP32[(($ld$65$0)>>2)];
 var $ld$66$1=(($332+4)|0);
 var $333$1=HEAP32[(($ld$66$1)>>2)];
 var $334=(($319$1|0) > ($333$1|0)) | (((($319$1|0) == ($333$1|0) & ($319$0>>>0) >  ($333$0>>>0))));
 if($334){label=68;break;}else{label=78;break;}
 case 68: 
 var $336=HEAP32[(($242)>>2)];
 var $337=((($336)-(12))|0);
 var $338=$337;
 var $339=HEAP32[(($338)>>2)];
 var $_sum34=((($339)+(12))|0);
 var $340=(($243+$_sum34)|0);
 var $341=HEAP8[($340)];
 var $342=$341&1;
 var $343=(($342<<24)>>24)==0;
 var $344=(($305+64)|0);
 var $ld$67$0=(($344)|0);
 var $345$0=HEAP32[(($ld$67$0)>>2)];
 var $ld$68$1=(($344+4)|0);
 var $345$1=HEAP32[(($ld$68$1)>>2)];
 if($343){label=71;break;}else{label=69;break;}
 case 69: 
 var $st$69$0=(($277)|0);
 HEAP32[(($st$69$0)>>2)]=$345$0;
 var $st$70$1=(($277+4)|0);
 HEAP32[(($st$70$1)>>2)]=$345$1;
 var $_lo_lobit_i_i_i52$0=($345$1>>31)|(((((($345$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i52$1=(((((($345$1|0)<0))|0)?-1:0)>>31)|(((((($345$1|0)<0))|0)?-1:0)<<1);
 var $st$71$0=(($278)|0);
 HEAP32[(($st$71$0)>>2)]=$_lo_lobit_i_i_i52$0;
 var $st$72$1=(($278+4)|0);
 HEAP32[(($st$72$1)>>2)]=$_lo_lobit_i_i_i52$1;
 var $347=(($307+56)|0);
 var $ld$73$0=(($347)|0);
 var $348$0=HEAP32[(($ld$73$0)>>2)];
 var $ld$74$1=(($347+4)|0);
 var $348$1=HEAP32[(($ld$74$1)>>2)];
 var $st$75$0=(($279)|0);
 HEAP32[(($st$75$0)>>2)]=$348$0;
 var $st$76$1=(($279+4)|0);
 HEAP32[(($st$76$1)>>2)]=$348$1;
 var $_lo_lobit_i_i9_i53$0=($348$1>>31)|(((((($348$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i9_i53$1=(((((($348$1|0)<0))|0)?-1:0)>>31)|(((((($348$1|0)<0))|0)?-1:0)<<1);
 var $st$77$0=(($280)|0);
 HEAP32[(($st$77$0)>>2)]=$_lo_lobit_i_i9_i53$0;
 var $st$78$1=(($280+4)|0);
 HEAP32[(($st$78$1)>>2)]=$_lo_lobit_i_i9_i53$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $349=(($305+56)|0);
 var $ld$79$0=(($349)|0);
 var $350$0=HEAP32[(($ld$79$0)>>2)];
 var $ld$80$1=(($349+4)|0);
 var $350$1=HEAP32[(($ld$80$1)>>2)];
 var $st$81$0=(($281)|0);
 HEAP32[(($st$81$0)>>2)]=$350$0;
 var $st$82$1=(($281+4)|0);
 HEAP32[(($st$82$1)>>2)]=$350$1;
 var $_lo_lobit_i_i11_i54$0=($350$1>>31)|(((((($350$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i11_i54$1=(((((($350$1|0)<0))|0)?-1:0)>>31)|(((((($350$1|0)<0))|0)?-1:0)<<1);
 var $st$83$0=(($282)|0);
 HEAP32[(($st$83$0)>>2)]=$_lo_lobit_i_i11_i54$0;
 var $st$84$1=(($282+4)|0);
 HEAP32[(($st$84$1)>>2)]=$_lo_lobit_i_i11_i54$1;
 var $351=(($307+64)|0);
 var $ld$85$0=(($351)|0);
 var $352$0=HEAP32[(($ld$85$0)>>2)];
 var $ld$86$1=(($351+4)|0);
 var $352$1=HEAP32[(($ld$86$1)>>2)];
 var $st$87$0=(($283)|0);
 HEAP32[(($st$87$0)>>2)]=$352$0;
 var $st$88$1=(($283+4)|0);
 HEAP32[(($st$88$1)>>2)]=$352$1;
 var $_lo_lobit_i_i10_i55$0=($352$1>>31)|(((((($352$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i10_i55$1=(((((($352$1|0)<0))|0)?-1:0)>>31)|(((((($352$1|0)<0))|0)?-1:0)<<1);
 var $st$89$0=(($284)|0);
 HEAP32[(($st$89$0)>>2)]=$_lo_lobit_i_i10_i55$0;
 var $st$90$1=(($284+4)|0);
 HEAP32[(($st$90$1)>>2)]=$_lo_lobit_i_i10_i55$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$91$0=(($285)|0);
 var $353$0=HEAP32[(($ld$91$0)>>2)];
 var $ld$92$1=(($285+4)|0);
 var $353$1=HEAP32[(($ld$92$1)>>2)];
 var $ld$93$0=(($286)|0);
 var $354$0=HEAP32[(($ld$93$0)>>2)];
 var $ld$94$1=(($286+4)|0);
 var $354$1=HEAP32[(($ld$94$1)>>2)];
 var $355=(($353$0|0) == ($354$0|0)) & (($353$1|0) == ($354$1|0));
 if($355){label=70;break;}else{label=78;break;}
 case 70: 
 var $ld$95$0=(($287)|0);
 var $357$0=HEAP32[(($ld$95$0)>>2)];
 var $ld$96$1=(($287+4)|0);
 var $357$1=HEAP32[(($ld$96$1)>>2)];
 var $ld$97$0=(($288)|0);
 var $358$0=HEAP32[(($ld$97$0)>>2)];
 var $ld$98$1=(($288+4)|0);
 var $358$1=HEAP32[(($ld$98$1)>>2)];
 var $359=(($357$0|0) == ($358$0|0)) & (($357$1|0) == ($358$1|0));
 var $_0_i56=$359;label=72;break;
 case 71: 
 var $361=(($307+56)|0);
 var $ld$99$0=(($361)|0);
 var $362$0=HEAP32[(($ld$99$0)>>2)];
 var $ld$100$1=(($361+4)|0);
 var $362$1=HEAP32[(($ld$100$1)>>2)];
 var $363$0=___muldi3($362$0,$362$1,$345$0,$345$1);var $363$1=tempRet0;
 var $364=(($305+56)|0);
 var $ld$101$0=(($364)|0);
 var $365$0=HEAP32[(($ld$101$0)>>2)];
 var $ld$102$1=(($364+4)|0);
 var $365$1=HEAP32[(($ld$102$1)>>2)];
 var $366=(($307+64)|0);
 var $ld$103$0=(($366)|0);
 var $367$0=HEAP32[(($ld$103$0)>>2)];
 var $ld$104$1=(($366+4)|0);
 var $367$1=HEAP32[(($ld$104$1)>>2)];
 var $368$0=___muldi3($367$0,$367$1,$365$0,$365$1);var $368$1=tempRet0;
 var $369=(($363$0|0) == ($368$0|0)) & (($363$1|0) == ($368$1|0));
 var $_0_i56=$369;label=72;break;
 case 72: 
 var $_0_i56;
 if($_0_i56){label=73;break;}else{label=78;break;}
 case 73: 
 var $371=HEAP32[(($e)>>2)];
 var $372=(($371)|0);
 var $ld$105$0=(($372)|0);
 var $373$0=HEAP32[(($ld$105$0)>>2)];
 var $ld$106$1=(($372+4)|0);
 var $373$1=HEAP32[(($ld$106$1)>>2)];
 var $374=(($371+8)|0);
 var $ld$107$0=(($374)|0);
 var $375$0=HEAP32[(($ld$107$0)>>2)];
 var $ld$108$1=(($374+4)|0);
 var $375$1=HEAP32[(($ld$108$1)>>2)];
 var $st$109$0=(($274)|0);
 HEAP32[(($st$109$0)>>2)]=$373$0;
 var $st$110$1=(($274+4)|0);
 HEAP32[(($st$110$1)>>2)]=$373$1;
 var $st$111$0=(($275)|0);
 HEAP32[(($st$111$0)>>2)]=$375$0;
 var $st$112$1=(($275+4)|0);
 HEAP32[(($st$112$1)>>2)]=$375$1;
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$307,$15);
 var $376=HEAP32[(($e)>>2)];
 var $377=__Znwj(80);
 var $378=$377;
 var $379=(($377+40)|0);
 HEAP32[(($377)>>2)]=0; HEAP32[((($377)+(4))>>2)]=0; HEAP32[((($377)+(8))>>2)]=0; HEAP32[((($377)+(12))>>2)]=0; HEAP32[((($377)+(16))>>2)]=0; HEAP32[((($377)+(20))>>2)]=0; HEAP32[((($377)+(24))>>2)]=0; HEAP32[((($377)+(28))>>2)]=0;
 HEAP32[(($379)>>2)]=0; HEAP32[((($379)+(4))>>2)]=0; HEAP32[((($379)+(8))>>2)]=0; HEAP32[((($379)+(12))>>2)]=0; HEAP32[((($379)+(16))>>2)]=0; HEAP32[((($379)+(20))>>2)]=0; HEAP32[((($379)+(24))>>2)]=0; HEAP32[((($379)+(28))>>2)]=0;
 HEAP32[(($jr_i40)>>2)]=$378;
 var $380=(($376+100)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($377+32)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$381;
 var $384=(($376+16)|0);
 var $ld$113$0=(($384)|0);
 var $385$0=HEAP32[(($ld$113$0)>>2)];
 var $ld$114$1=(($384+4)|0);
 var $385$1=HEAP32[(($ld$114$1)>>2)];
 var $386=(($376+24)|0);
 var $ld$115$0=(($386)|0);
 var $387$0=HEAP32[(($ld$115$0)>>2)];
 var $ld$116$1=(($386+4)|0);
 var $387$1=HEAP32[(($ld$116$1)>>2)];
 var $_sroa_036_0__idx_i41=$377;
 var $st$117$0=(($_sroa_036_0__idx_i41)|0);
 HEAP32[(($st$117$0)>>2)]=$385$0;
 var $st$118$1=(($_sroa_036_0__idx_i41+4)|0);
 HEAP32[(($st$118$1)>>2)]=$385$1;
 var $_sroa_137_8__idx38_i42=(($377+8)|0);
 var $388=$_sroa_137_8__idx38_i42;
 var $st$119$0=(($388)|0);
 HEAP32[(($st$119$0)>>2)]=$387$0;
 var $st$120$1=(($388+4)|0);
 HEAP32[(($st$120$1)>>2)]=$387$1;
 var $389=(($376+32)|0);
 var $ld$121$0=(($389)|0);
 var $390$0=HEAP32[(($ld$121$0)>>2)];
 var $ld$122$1=(($389+4)|0);
 var $390$1=HEAP32[(($ld$122$1)>>2)];
 var $391=(($376+40)|0);
 var $ld$123$0=(($391)|0);
 var $392$0=HEAP32[(($ld$123$0)>>2)];
 var $ld$124$1=(($391+4)|0);
 var $392$1=HEAP32[(($ld$124$1)>>2)];
 var $_sroa_033_0__idx_i43=(($377+16)|0);
 var $393=$_sroa_033_0__idx_i43;
 var $st$125$0=(($393)|0);
 HEAP32[(($st$125$0)>>2)]=$390$0;
 var $st$126$1=(($393+4)|0);
 HEAP32[(($st$126$1)>>2)]=$390$1;
 var $_sroa_134_8__idx35_i44=(($377+24)|0);
 var $394=$_sroa_134_8__idx35_i44;
 var $st$127$0=(($394)|0);
 HEAP32[(($st$127$0)>>2)]=$392$0;
 var $st$128$1=(($394+4)|0);
 HEAP32[(($st$128$1)>>2)]=$392$1;
 var $395=HEAP32[(($328)>>2)];
 var $396=(($377+72)|0);
 var $397=$396;
 HEAP32[(($397)>>2)]=$395;
 var $ld$129$0=(($312)|0);
 var $398$0=HEAP32[(($ld$129$0)>>2)];
 var $ld$130$1=(($312+4)|0);
 var $398$1=HEAP32[(($ld$130$1)>>2)];
 var $ld$131$0=(($318)|0);
 var $399$0=HEAP32[(($ld$131$0)>>2)];
 var $ld$132$1=(($318+4)|0);
 var $399$1=HEAP32[(($ld$132$1)>>2)];
 var $400=$379;
 var $st$133$0=(($400)|0);
 HEAP32[(($st$133$0)>>2)]=$398$0;
 var $st$134$1=(($400+4)|0);
 HEAP32[(($st$134$1)>>2)]=$398$1;
 var $_sroa_131_8__idx32_i46=(($377+48)|0);
 var $401=$_sroa_131_8__idx32_i46;
 var $st$135$0=(($401)|0);
 HEAP32[(($st$135$0)>>2)]=$399$0;
 var $st$136$1=(($401+4)|0);
 HEAP32[(($st$136$1)>>2)]=$399$1;
 var $402=(($307+32)|0);
 var $ld$137$0=(($402)|0);
 var $403$0=HEAP32[(($ld$137$0)>>2)];
 var $ld$138$1=(($402+4)|0);
 var $403$1=HEAP32[(($ld$138$1)>>2)];
 var $ld$139$0=(($332)|0);
 var $404$0=HEAP32[(($ld$139$0)>>2)];
 var $ld$140$1=(($332+4)|0);
 var $404$1=HEAP32[(($ld$140$1)>>2)];
 var $_sroa_0_0__idx_i47=(($377+56)|0);
 var $405=$_sroa_0_0__idx_i47;
 var $st$141$0=(($405)|0);
 HEAP32[(($st$141$0)>>2)]=$403$0;
 var $st$142$1=(($405+4)|0);
 HEAP32[(($st$142$1)>>2)]=$403$1;
 var $_sroa_1_8__idx29_i48=(($377+64)|0);
 var $406=$_sroa_1_8__idx29_i48;
 var $st$143$0=(($406)|0);
 HEAP32[(($st$143$0)>>2)]=$404$0;
 var $st$144$1=(($406+4)|0);
 HEAP32[(($st$144$1)>>2)]=$404$1;
 var $407=HEAP32[(($253)>>2)];
 var $408=HEAP32[(($254)>>2)];
 var $409=($407|0)==($408|0);
 if($409){label=77;break;}else{label=74;break;}
 case 74: 
 var $411=($407|0)==0;
 if($411){var $413=0;label=76;break;}else{label=75;break;}
 case 75: 
 HEAP32[(($407)>>2)]=$378;
 var $_pre_i49=HEAP32[(($253)>>2)];
 var $413=$_pre_i49;label=76;break;
 case 76: 
 var $413;
 var $414=(($413+4)|0);
 HEAP32[(($253)>>2)]=$414;
 label=94;break;
 case 77: 
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($255,$jr_i40);
 label=94;break;
 case 78: 
 var $416=($309|0)==0;
 if($416){label=94;break;}else{label=79;break;}
 case 79: 
 var $418=(($309+16)|0);
 var $ld$145$0=(($418)|0);
 var $419$0=HEAP32[(($ld$145$0)>>2)];
 var $ld$146$1=(($418+4)|0);
 var $419$1=HEAP32[(($ld$146$1)>>2)];
 var $420=HEAP32[(($e)>>2)];
 var $421=(($420)|0);
 var $ld$147$0=(($421)|0);
 var $422$0=HEAP32[(($ld$147$0)>>2)];
 var $ld$148$1=(($421+4)|0);
 var $422$1=HEAP32[(($ld$148$1)>>2)];
 var $423=(($419$0|0) == ($422$0|0)) & (($419$1|0) == ($422$1|0));
 if($423){label=80;break;}else{label=94;break;}
 case 80: 
 var $425=(($309+24)|0);
 var $ld$149$0=(($425)|0);
 var $426$0=HEAP32[(($ld$149$0)>>2)];
 var $ld$150$1=(($425+4)|0);
 var $426$1=HEAP32[(($ld$150$1)>>2)];
 var $427=(($420+8)|0);
 var $ld$151$0=(($427)|0);
 var $428$0=HEAP32[(($ld$151$0)>>2)];
 var $ld$152$1=(($427+4)|0);
 var $428$1=HEAP32[(($ld$152$1)>>2)];
 var $429=(($426$0|0) == ($428$0|0)) & (($426$1|0) == ($428$1|0));
 if($429){label=81;break;}else{label=94;break;}
 case 81: 
 var $431=(($420+100)|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=($432|0)>-1;
 if($433){label=82;break;}else{label=94;break;}
 case 82: 
 var $435=(($309+100)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=($436|0)>-1;
 if($437){label=83;break;}else{label=94;break;}
 case 83: 
 var $439=(($309+40)|0);
 var $ld$153$0=(($439)|0);
 var $440$0=HEAP32[(($ld$153$0)>>2)];
 var $ld$154$1=(($439+4)|0);
 var $440$1=HEAP32[(($ld$154$1)>>2)];
 var $441=(($426$1|0) > ($440$1|0)) | (((($426$1|0) == ($440$1|0) & ($426$0>>>0) >  ($440$0>>>0))));
 if($441){label=84;break;}else{label=94;break;}
 case 84: 
 var $443=HEAP32[(($242)>>2)];
 var $444=((($443)-(12))|0);
 var $445=$444;
 var $446=HEAP32[(($445)>>2)];
 var $_sum=((($446)+(12))|0);
 var $447=(($243+$_sum)|0);
 var $448=HEAP8[($447)];
 var $449=$448&1;
 var $450=(($449<<24)>>24)==0;
 var $451=(($420+64)|0);
 var $ld$155$0=(($451)|0);
 var $452$0=HEAP32[(($ld$155$0)>>2)];
 var $ld$156$1=(($451+4)|0);
 var $452$1=HEAP32[(($ld$156$1)>>2)];
 if($450){label=87;break;}else{label=85;break;}
 case 85: 
 var $st$157$0=(($256)|0);
 HEAP32[(($st$157$0)>>2)]=$452$0;
 var $st$158$1=(($256+4)|0);
 HEAP32[(($st$158$1)>>2)]=$452$1;
 var $_lo_lobit_i_i_i$0=($452$1>>31)|(((((($452$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($452$1|0)<0))|0)?-1:0)>>31)|(((((($452$1|0)<0))|0)?-1:0)<<1);
 var $st$159$0=(($257)|0);
 HEAP32[(($st$159$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$160$1=(($257+4)|0);
 HEAP32[(($st$160$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $454=(($309+56)|0);
 var $ld$161$0=(($454)|0);
 var $455$0=HEAP32[(($ld$161$0)>>2)];
 var $ld$162$1=(($454+4)|0);
 var $455$1=HEAP32[(($ld$162$1)>>2)];
 var $st$163$0=(($258)|0);
 HEAP32[(($st$163$0)>>2)]=$455$0;
 var $st$164$1=(($258+4)|0);
 HEAP32[(($st$164$1)>>2)]=$455$1;
 var $_lo_lobit_i_i9_i$0=($455$1>>31)|(((((($455$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i9_i$1=(((((($455$1|0)<0))|0)?-1:0)>>31)|(((((($455$1|0)<0))|0)?-1:0)<<1);
 var $st$165$0=(($259)|0);
 HEAP32[(($st$165$0)>>2)]=$_lo_lobit_i_i9_i$0;
 var $st$166$1=(($259+4)|0);
 HEAP32[(($st$166$1)>>2)]=$_lo_lobit_i_i9_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($9,$7,$8);
 var $456=(($420+56)|0);
 var $ld$167$0=(($456)|0);
 var $457$0=HEAP32[(($ld$167$0)>>2)];
 var $ld$168$1=(($456+4)|0);
 var $457$1=HEAP32[(($ld$168$1)>>2)];
 var $st$169$0=(($260)|0);
 HEAP32[(($st$169$0)>>2)]=$457$0;
 var $st$170$1=(($260+4)|0);
 HEAP32[(($st$170$1)>>2)]=$457$1;
 var $_lo_lobit_i_i11_i$0=($457$1>>31)|(((((($457$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i11_i$1=(((((($457$1|0)<0))|0)?-1:0)>>31)|(((((($457$1|0)<0))|0)?-1:0)<<1);
 var $st$171$0=(($261)|0);
 HEAP32[(($st$171$0)>>2)]=$_lo_lobit_i_i11_i$0;
 var $st$172$1=(($261+4)|0);
 HEAP32[(($st$172$1)>>2)]=$_lo_lobit_i_i11_i$1;
 var $458=(($309+64)|0);
 var $ld$173$0=(($458)|0);
 var $459$0=HEAP32[(($ld$173$0)>>2)];
 var $ld$174$1=(($458+4)|0);
 var $459$1=HEAP32[(($ld$174$1)>>2)];
 var $st$175$0=(($262)|0);
 HEAP32[(($st$175$0)>>2)]=$459$0;
 var $st$176$1=(($262+4)|0);
 HEAP32[(($st$176$1)>>2)]=$459$1;
 var $_lo_lobit_i_i10_i$0=($459$1>>31)|(((((($459$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i10_i$1=(((((($459$1|0)<0))|0)?-1:0)>>31)|(((((($459$1|0)<0))|0)?-1:0)<<1);
 var $st$177$0=(($263)|0);
 HEAP32[(($st$177$0)>>2)]=$_lo_lobit_i_i10_i$0;
 var $st$178$1=(($263+4)|0);
 HEAP32[(($st$178$1)>>2)]=$_lo_lobit_i_i10_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($10,$11,$12);
 var $ld$179$0=(($264)|0);
 var $460$0=HEAP32[(($ld$179$0)>>2)];
 var $ld$180$1=(($264+4)|0);
 var $460$1=HEAP32[(($ld$180$1)>>2)];
 var $ld$181$0=(($265)|0);
 var $461$0=HEAP32[(($ld$181$0)>>2)];
 var $ld$182$1=(($265+4)|0);
 var $461$1=HEAP32[(($ld$182$1)>>2)];
 var $462=(($460$0|0) == ($461$0|0)) & (($460$1|0) == ($461$1|0));
 if($462){label=86;break;}else{label=94;break;}
 case 86: 
 var $ld$183$0=(($266)|0);
 var $464$0=HEAP32[(($ld$183$0)>>2)];
 var $ld$184$1=(($266+4)|0);
 var $464$1=HEAP32[(($ld$184$1)>>2)];
 var $ld$185$0=(($267)|0);
 var $465$0=HEAP32[(($ld$185$0)>>2)];
 var $ld$186$1=(($267+4)|0);
 var $465$1=HEAP32[(($ld$186$1)>>2)];
 var $466=(($464$0|0) == ($465$0|0)) & (($464$1|0) == ($465$1|0));
 var $_0_i39=$466;label=88;break;
 case 87: 
 var $468=(($309+56)|0);
 var $ld$187$0=(($468)|0);
 var $469$0=HEAP32[(($ld$187$0)>>2)];
 var $ld$188$1=(($468+4)|0);
 var $469$1=HEAP32[(($ld$188$1)>>2)];
 var $470$0=___muldi3($469$0,$469$1,$452$0,$452$1);var $470$1=tempRet0;
 var $471=(($420+56)|0);
 var $ld$189$0=(($471)|0);
 var $472$0=HEAP32[(($ld$189$0)>>2)];
 var $ld$190$1=(($471+4)|0);
 var $472$1=HEAP32[(($ld$190$1)>>2)];
 var $473=(($309+64)|0);
 var $ld$191$0=(($473)|0);
 var $474$0=HEAP32[(($ld$191$0)>>2)];
 var $ld$192$1=(($473+4)|0);
 var $474$1=HEAP32[(($ld$192$1)>>2)];
 var $475$0=___muldi3($474$0,$474$1,$472$0,$472$1);var $475$1=tempRet0;
 var $476=(($470$0|0) == ($475$0|0)) & (($470$1|0) == ($475$1|0));
 var $_0_i39=$476;label=88;break;
 case 88: 
 var $_0_i39;
 if($_0_i39){label=89;break;}else{label=94;break;}
 case 89: 
 var $478=HEAP32[(($e)>>2)];
 var $479=(($478)|0);
 var $ld$193$0=(($479)|0);
 var $480$0=HEAP32[(($ld$193$0)>>2)];
 var $ld$194$1=(($479+4)|0);
 var $480$1=HEAP32[(($ld$194$1)>>2)];
 var $481=(($478+8)|0);
 var $ld$195$0=(($481)|0);
 var $482$0=HEAP32[(($ld$195$0)>>2)];
 var $ld$196$1=(($481+4)|0);
 var $482$1=HEAP32[(($ld$196$1)>>2)];
 var $st$197$0=(($250)|0);
 HEAP32[(($st$197$0)>>2)]=$480$0;
 var $st$198$1=(($250+4)|0);
 HEAP32[(($st$198$1)>>2)]=$480$1;
 var $st$199$0=(($251)|0);
 HEAP32[(($st$199$0)>>2)]=$482$0;
 var $st$200$1=(($251+4)|0);
 HEAP32[(($st$200$1)>>2)]=$482$1;
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$309,$16);
 var $483=HEAP32[(($e)>>2)];
 var $484=__Znwj(80);
 var $485=$484;
 var $486=(($484+40)|0);
 HEAP32[(($484)>>2)]=0; HEAP32[((($484)+(4))>>2)]=0; HEAP32[((($484)+(8))>>2)]=0; HEAP32[((($484)+(12))>>2)]=0; HEAP32[((($484)+(16))>>2)]=0; HEAP32[((($484)+(20))>>2)]=0; HEAP32[((($484)+(24))>>2)]=0; HEAP32[((($484)+(28))>>2)]=0;
 HEAP32[(($486)>>2)]=0; HEAP32[((($486)+(4))>>2)]=0; HEAP32[((($486)+(8))>>2)]=0; HEAP32[((($486)+(12))>>2)]=0; HEAP32[((($486)+(16))>>2)]=0; HEAP32[((($486)+(20))>>2)]=0; HEAP32[((($486)+(24))>>2)]=0; HEAP32[((($486)+(28))>>2)]=0;
 HEAP32[(($jr_i)>>2)]=$485;
 var $487=(($483+100)|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=(($484+32)|0);
 var $490=$489;
 HEAP32[(($490)>>2)]=$488;
 var $491=(($483+16)|0);
 var $ld$201$0=(($491)|0);
 var $492$0=HEAP32[(($ld$201$0)>>2)];
 var $ld$202$1=(($491+4)|0);
 var $492$1=HEAP32[(($ld$202$1)>>2)];
 var $493=(($483+24)|0);
 var $ld$203$0=(($493)|0);
 var $494$0=HEAP32[(($ld$203$0)>>2)];
 var $ld$204$1=(($493+4)|0);
 var $494$1=HEAP32[(($ld$204$1)>>2)];
 var $_sroa_036_0__idx_i=$484;
 var $st$205$0=(($_sroa_036_0__idx_i)|0);
 HEAP32[(($st$205$0)>>2)]=$492$0;
 var $st$206$1=(($_sroa_036_0__idx_i+4)|0);
 HEAP32[(($st$206$1)>>2)]=$492$1;
 var $_sroa_137_8__idx38_i=(($484+8)|0);
 var $495=$_sroa_137_8__idx38_i;
 var $st$207$0=(($495)|0);
 HEAP32[(($st$207$0)>>2)]=$494$0;
 var $st$208$1=(($495+4)|0);
 HEAP32[(($st$208$1)>>2)]=$494$1;
 var $496=(($483+32)|0);
 var $ld$209$0=(($496)|0);
 var $497$0=HEAP32[(($ld$209$0)>>2)];
 var $ld$210$1=(($496+4)|0);
 var $497$1=HEAP32[(($ld$210$1)>>2)];
 var $498=(($483+40)|0);
 var $ld$211$0=(($498)|0);
 var $499$0=HEAP32[(($ld$211$0)>>2)];
 var $ld$212$1=(($498+4)|0);
 var $499$1=HEAP32[(($ld$212$1)>>2)];
 var $_sroa_033_0__idx_i=(($484+16)|0);
 var $500=$_sroa_033_0__idx_i;
 var $st$213$0=(($500)|0);
 HEAP32[(($st$213$0)>>2)]=$497$0;
 var $st$214$1=(($500+4)|0);
 HEAP32[(($st$214$1)>>2)]=$497$1;
 var $_sroa_134_8__idx35_i=(($484+24)|0);
 var $501=$_sroa_134_8__idx35_i;
 var $st$215$0=(($501)|0);
 HEAP32[(($st$215$0)>>2)]=$499$0;
 var $st$216$1=(($501+4)|0);
 HEAP32[(($st$216$1)>>2)]=$499$1;
 var $502=HEAP32[(($435)>>2)];
 var $503=(($484+72)|0);
 var $504=$503;
 HEAP32[(($504)>>2)]=$502;
 var $ld$217$0=(($418)|0);
 var $505$0=HEAP32[(($ld$217$0)>>2)];
 var $ld$218$1=(($418+4)|0);
 var $505$1=HEAP32[(($ld$218$1)>>2)];
 var $ld$219$0=(($425)|0);
 var $506$0=HEAP32[(($ld$219$0)>>2)];
 var $ld$220$1=(($425+4)|0);
 var $506$1=HEAP32[(($ld$220$1)>>2)];
 var $507=$486;
 var $st$221$0=(($507)|0);
 HEAP32[(($st$221$0)>>2)]=$505$0;
 var $st$222$1=(($507+4)|0);
 HEAP32[(($st$222$1)>>2)]=$505$1;
 var $_sroa_131_8__idx32_i=(($484+48)|0);
 var $508=$_sroa_131_8__idx32_i;
 var $st$223$0=(($508)|0);
 HEAP32[(($st$223$0)>>2)]=$506$0;
 var $st$224$1=(($508+4)|0);
 HEAP32[(($st$224$1)>>2)]=$506$1;
 var $509=(($309+32)|0);
 var $ld$225$0=(($509)|0);
 var $510$0=HEAP32[(($ld$225$0)>>2)];
 var $ld$226$1=(($509+4)|0);
 var $510$1=HEAP32[(($ld$226$1)>>2)];
 var $ld$227$0=(($439)|0);
 var $511$0=HEAP32[(($ld$227$0)>>2)];
 var $ld$228$1=(($439+4)|0);
 var $511$1=HEAP32[(($ld$228$1)>>2)];
 var $_sroa_0_0__idx_i=(($484+56)|0);
 var $512=$_sroa_0_0__idx_i;
 var $st$229$0=(($512)|0);
 HEAP32[(($st$229$0)>>2)]=$510$0;
 var $st$230$1=(($512+4)|0);
 HEAP32[(($st$230$1)>>2)]=$510$1;
 var $_sroa_1_8__idx29_i=(($484+64)|0);
 var $513=$_sroa_1_8__idx29_i;
 var $st$231$0=(($513)|0);
 HEAP32[(($st$231$0)>>2)]=$511$0;
 var $st$232$1=(($513+4)|0);
 HEAP32[(($st$232$1)>>2)]=$511$1;
 var $514=HEAP32[(($253)>>2)];
 var $515=HEAP32[(($254)>>2)];
 var $516=($514|0)==($515|0);
 if($516){label=93;break;}else{label=90;break;}
 case 90: 
 var $518=($514|0)==0;
 if($518){var $520=0;label=92;break;}else{label=91;break;}
 case 91: 
 HEAP32[(($514)>>2)]=$485;
 var $_pre_i=HEAP32[(($253)>>2)];
 var $520=$_pre_i;label=92;break;
 case 92: 
 var $520;
 var $521=(($520+4)|0);
 HEAP32[(($253)>>2)]=$521;
 label=94;break;
 case 93: 
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($255,$jr_i);
 label=94;break;
 case 94: 
 var $523=HEAP32[(($e)>>2)];
 var $524=(($523+116)|0);
 var $storemerge=HEAP32[(($524)>>2)];
 HEAP32[(($e)>>2)]=$storemerge;
 var $525=($storemerge|0)==0;
 if($525){label=95;break;}else{var $290=$storemerge;label=58;break;}
 case 95: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$outRec){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(($outRec+20)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($outRec+16)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=(($8+28)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==($8|0);
 if($12){var $_lcssa=$8;var $40=$8;label=4;break;}else{label=2;break;}
 case 2: 
 var $13=$this;
 var $14=$this;
 var $15=$1;
 var $16=$2;
 var $17=$3;
 var $18=$4;
 var $19=$5;
 var $20=$6;
 var $21=(($1+8)|0);
 var $22=(($1)|0);
 var $23=(($2+8)|0);
 var $24=(($2)|0);
 var $25=(($5+8)|0);
 var $26=(($5)|0);
 var $27=(($6+8)|0);
 var $28=(($6)|0);
 var $29=(($3)|0);
 var $30=(($4)|0);
 var $31=(($3+8)|0);
 var $32=(($4+8)|0);
 var $36=$8;var $lastOK_057=0;var $35=$10;var $34=$11;label=3;break;
 case 3: 
 var $34;
 var $35;
 var $lastOK_057;
 var $36;
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($34|0)==($38|0);
 if($39){var $_lcssa=$36;var $40=$34;label=4;break;}else{label=8;break;}
 case 4: 
 var $40;
 var $_lcssa;
 var $41=($_lcssa|0)==0;
 if($41){label=7;break;}else{label=5;break;}
 case 5: 
 var $43=(($40+24)|0);
 HEAP32[(($43)>>2)]=0;
 var $44=$_lcssa;label=6;break;
 case 6: 
 var $44;
 var $45=(($44+24)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$44;
 __ZdlPv($47);
 var $48=($46|0)==0;
 if($48){label=7;break;}else{var $44=$46;label=6;break;}
 case 7: 
 HEAP32[(($9)>>2)]=0;
 HEAP32[(($7)>>2)]=0;
 label=23;break;
 case 8: 
 var $50=(($36+8)|0);
 var $ld$0$0=(($50)|0);
 var $51$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($50+4)|0);
 var $51$1=HEAP32[(($ld$1$1)>>2)];
 var $52=(($38+8)|0);
 var $ld$2$0=(($52)|0);
 var $53$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($52+4)|0);
 var $53$1=HEAP32[(($ld$3$1)>>2)];
 var $54=(($51$0|0) == ($53$0|0)) & (($51$1|0) == ($53$1|0));
 var $55=(($36+16)|0);
 var $ld$4$0=(($55)|0);
 var $56$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($55+4)|0);
 var $56$1=HEAP32[(($ld$5$1)>>2)];
 var $57=(($38+16)|0);
 var $ld$6$0=(($57)|0);
 var $58$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($57+4)|0);
 var $58$1=HEAP32[(($ld$7$1)>>2)];
 var $59=(($56$0|0) == ($58$0|0)) & (($56$1|0) == ($58$1|0));
 var $or_cond=$54&$59;
 if($or_cond){label=14;break;}else{label=9;break;}
 case 9: 
 var $_sroa_036_0__idx=(($34+8)|0);
 var $ld$8$0=(($_sroa_036_0__idx)|0);
 var $_sroa_036_0_copyload$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($_sroa_036_0__idx+4)|0);
 var $_sroa_036_0_copyload$1=HEAP32[(($ld$9$1)>>2)];
 var $_sroa_137_8__idx38=(($34+16)|0);
 var $ld$10$0=(($_sroa_137_8__idx38)|0);
 var $_sroa_137_8_copyload$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($_sroa_137_8__idx38+4)|0);
 var $_sroa_137_8_copyload$1=HEAP32[(($ld$11$1)>>2)];
 var $60=HEAP32[(($13)>>2)];
 var $61=((($60)-(12))|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $_sum=((($63)+(12))|0);
 var $64=(($14+$_sum)|0);
 var $65=HEAP8[($64)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 var $68$0=_i64Subtract($_sroa_137_8_copyload$0,$_sroa_137_8_copyload$1,$56$0,$56$1);var $68$1=tempRet0;
 if($67){label=12;break;}else{label=10;break;}
 case 10: 
 var $st$12$0=(($21)|0);
 HEAP32[(($st$12$0)>>2)]=$68$0;
 var $st$13$1=(($21+4)|0);
 HEAP32[(($st$13$1)>>2)]=$68$1;
 var $_lo_lobit_i_i_i$0=($68$1>>31)|(((((($68$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($68$1|0)<0))|0)?-1:0)>>31)|(((((($68$1|0)<0))|0)?-1:0)<<1);
 var $st$14$0=(($22)|0);
 HEAP32[(($st$14$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$15$1=(($22+4)|0);
 HEAP32[(($st$15$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $70$0=_i64Subtract($51$0,$51$1,$53$0,$53$1);var $70$1=tempRet0;
 var $st$16$0=(($23)|0);
 HEAP32[(($st$16$0)>>2)]=$70$0;
 var $st$17$1=(($23+4)|0);
 HEAP32[(($st$17$1)>>2)]=$70$1;
 var $_lo_lobit_i_i2_i$0=($70$1>>31)|(((((($70$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i2_i$1=(((((($70$1|0)<0))|0)?-1:0)>>31)|(((((($70$1|0)<0))|0)?-1:0)<<1);
 var $st$18$0=(($24)|0);
 HEAP32[(($st$18$0)>>2)]=$_lo_lobit_i_i2_i$0;
 var $st$19$1=(($24+4)|0);
 HEAP32[(($st$19$1)>>2)]=$_lo_lobit_i_i2_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $71$0=_i64Subtract($_sroa_036_0_copyload$0,$_sroa_036_0_copyload$1,$51$0,$51$1);var $71$1=tempRet0;
 var $st$20$0=(($25)|0);
 HEAP32[(($st$20$0)>>2)]=$71$0;
 var $st$21$1=(($25+4)|0);
 HEAP32[(($st$21$1)>>2)]=$71$1;
 var $_lo_lobit_i_i4_i$0=($71$1>>31)|(((((($71$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i4_i$1=(((((($71$1|0)<0))|0)?-1:0)>>31)|(((((($71$1|0)<0))|0)?-1:0)<<1);
 var $st$22$0=(($26)|0);
 HEAP32[(($st$22$0)>>2)]=$_lo_lobit_i_i4_i$0;
 var $st$23$1=(($26+4)|0);
 HEAP32[(($st$23$1)>>2)]=$_lo_lobit_i_i4_i$1;
 var $72$0=_i64Subtract($56$0,$56$1,$58$0,$58$1);var $72$1=tempRet0;
 var $st$24$0=(($27)|0);
 HEAP32[(($st$24$0)>>2)]=$72$0;
 var $st$25$1=(($27+4)|0);
 HEAP32[(($st$25$1)>>2)]=$72$1;
 var $_lo_lobit_i_i3_i$0=($72$1>>31)|(((((($72$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i3_i$1=(((((($72$1|0)<0))|0)?-1:0)>>31)|(((((($72$1|0)<0))|0)?-1:0)<<1);
 var $st$26$0=(($28)|0);
 HEAP32[(($st$26$0)>>2)]=$_lo_lobit_i_i3_i$0;
 var $st$27$1=(($28+4)|0);
 HEAP32[(($st$27$1)>>2)]=$_lo_lobit_i_i3_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$28$0=(($29)|0);
 var $73$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($29+4)|0);
 var $73$1=HEAP32[(($ld$29$1)>>2)];
 var $ld$30$0=(($30)|0);
 var $74$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($30+4)|0);
 var $74$1=HEAP32[(($ld$31$1)>>2)];
 var $75=(($73$0|0) == ($74$0|0)) & (($73$1|0) == ($74$1|0));
 if($75){label=11;break;}else{label=19;break;}
 case 11: 
 var $ld$32$0=(($31)|0);
 var $77$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($31+4)|0);
 var $77$1=HEAP32[(($ld$33$1)>>2)];
 var $ld$34$0=(($32)|0);
 var $78$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($32+4)|0);
 var $78$1=HEAP32[(($ld$35$1)>>2)];
 var $79=(($77$0|0) == ($78$0|0)) & (($77$1|0) == ($78$1|0));
 var $_0_i=$79;label=13;break;
 case 12: 
 var $81$0=_i64Subtract($51$0,$51$1,$53$0,$53$1);var $81$1=tempRet0;
 var $82$0=___muldi3($81$0,$81$1,$68$0,$68$1);var $82$1=tempRet0;
 var $83$0=_i64Subtract($_sroa_036_0_copyload$0,$_sroa_036_0_copyload$1,$51$0,$51$1);var $83$1=tempRet0;
 var $84$0=_i64Subtract($56$0,$56$1,$58$0,$58$1);var $84$1=tempRet0;
 var $85$0=___muldi3($84$0,$84$1,$83$0,$83$1);var $85$1=tempRet0;
 var $86=(($82$0|0) == ($85$0|0)) & (($82$1|0) == ($85$1|0));
 var $_0_i=$86;label=13;break;
 case 13: 
 var $_0_i;
 if($_0_i){label=14;break;}else{label=19;break;}
 case 14: 
 var $87=HEAP32[(($7)>>2)];
 var $88=($36|0)==($87|0);
 if($88){label=15;break;}else{label=16;break;}
 case 15: 
 HEAP32[(($7)>>2)]=0;
 label=16;break;
 case 16: 
 var $90=HEAP32[(($37)>>2)];
 var $91=HEAP32[(($35)>>2)];
 var $92=(($91+24)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=HEAP32[(($35)>>2)];
 var $94=HEAP32[(($37)>>2)];
 var $95=(($94+28)|0);
 HEAP32[(($95)>>2)]=$93;
 var $96=HEAP32[(($35)>>2)];
 var $97=($36|0)==0;
 if($97){var $lastOK_0_be=0;var $_be=$96;label=17;break;}else{label=18;break;}
 case 17: 
 var $_be;
 var $lastOK_0_be;
 var $98=(($_be+28)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==($_be|0);
 if($100){var $_lcssa=$_be;var $40=$_be;label=4;break;}else{var $36=$_be;var $lastOK_057=$lastOK_0_be;var $35=$98;var $34=$99;label=3;break;}
 case 18: 
 var $102=$36;
 __ZdlPv($102);
 var $lastOK_0_be=0;var $_be=$96;label=17;break;
 case 19: 
 var $103=($36|0)==($lastOK_057|0);
 if($103){label=21;break;}else{label=20;break;}
 case 20: 
 var $105=($lastOK_057|0)==0;
 var $_lastOK_0=$105?$36:$lastOK_057;
 var $106=HEAP32[(($37)>>2)];
 var $lastOK_0_be=$_lastOK_0;var $_be=$106;label=17;break;
 case 21: 
 var $108=HEAP32[(($7)>>2)];
 var $109=($108|0)==0;
 if($109){label=22;break;}else{label=23;break;}
 case 22: 
 var $111=__ZN10ClipperLib11GetBottomPtEPNS_5OutPtE($lastOK_057);
 HEAP32[(($7)>>2)]=$111;
 var $112=(($outRec)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($111)|0);
 HEAP32[(($114)>>2)]=$113;
 var $115=HEAP32[(($7)>>2)];
 HEAP32[(($9)>>2)]=$115;
 var $116=(($outRec+24)|0);
 HEAP32[(($116)>>2)]=$115;
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper15JoinCommonEdgesEb($this,$fixHoleLinkages){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p1=sp;
 var $p2=(sp)+(8);
 var $outRec2=(sp)+(16);
 var $1=(($this+20)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=108;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+4)|0);
 var $7=(($6)|0);
 var $8=(($this+8)|0);
 var $9=(($this+12)|0);
 var $10=$this;
 var $11=$this;
 var $12=(($this+72)|0);
 var $i_0164=0;var $14=$4;label=3;break;
 case 3: 
 var $14;
 var $i_0164;
 var $15=(($14+($i_0164<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=__ZN10ClipperLib7Clipper10JoinPointsEPKNS_7JoinRecERPNS_5OutPtES6_($this,$16,$p1,$p2);
 if($17){label=4;break;}else{label=108;break;}
 case 4: 
 var $19=(($16+32)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($7)>>2)];
 var $22=(($21+($20<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($16+72)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($21+($25<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($outRec2)>>2)]=$27;
 var $28=($23|0)==($27|0);
 if($28){label=5;break;}else{label=90;break;}
 case 5: 
 var $30=HEAP32[(($p1)>>2)];
 var $31=__ZN10ClipperLib11GetBottomPtEPNS_5OutPtE($30);
 var $32=(($23+16)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($23+20)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=(($23)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=__Znwj(32);
 var $38=$37;
 var $39=(($37+4)|0);
 HEAP8[($39)]=0;
 var $40=(($37+8)|0);
 HEAP32[(($40)>>2)]=0; HEAP32[((($40)+(4))>>2)]=0; HEAP32[((($40)+(8))>>2)]=0; HEAP32[((($40)+(12))>>2)]=0; HEAP32[((($40)+(16))>>2)]=0; HEAP32[((($40)+(20))>>2)]=0;
 HEAP32[(($outRec2)>>2)]=$38;
 var $41=HEAP32[(($8)>>2)];
 var $42=HEAP32[(($9)>>2)];
 var $43=($41|0)==($42|0);
 if($43){label=9;break;}else{label=6;break;}
 case 6: 
 var $45=($41|0)==0;
 if($45){var $47=0;label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[(($41)>>2)]=$38;
 var $_pre169=HEAP32[(($8)>>2)];
 var $47=$_pre169;label=8;break;
 case 8: 
 var $47;
 var $48=(($47+4)|0);
 HEAP32[(($8)>>2)]=$48;
 var $50=$48;label=10;break;
 case 9: 
 __ZNSt3__16vectorIPN10ClipperLib6OutRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($6,$outRec2);
 var $_pre=HEAP32[(($8)>>2)];
 var $50=$_pre;label=10;break;
 case 10: 
 var $50;
 var $51=HEAP32[(($7)>>2)];
 var $52=$50;
 var $53=$51;
 var $54=((($52)-($53))|0);
 var $55=$54>>2;
 var $56=((($55)-(1))|0);
 var $57=HEAP32[(($outRec2)>>2)];
 var $58=(($57)|0);
 HEAP32[(($58)>>2)]=$56;
 var $59=HEAP32[(($outRec2)>>2)];
 var $60=(($59)|0);
 var $61=HEAP32[(($60)>>2)];
 HEAP32[(($24)>>2)]=$61;
 var $62=HEAP32[(($p2)>>2)];
 var $63=__ZN10ClipperLib11GetBottomPtEPNS_5OutPtE($62);
 var $64=HEAP32[(($outRec2)>>2)];
 var $65=(($64+16)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=HEAP32[(($outRec2)>>2)];
 var $67=(($66+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($66+20)|0);
 HEAP32[(($69)>>2)]=$68;
 var $70=HEAP32[(($outRec2)>>2)];
 var $71=(($70)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+20)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74)|0);
 HEAP32[(($75)>>2)]=$72;
 var $76=HEAP32[(($outRec2)>>2)];
 var $77=(($76+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+8)|0);
 var $80=HEAP32[(($32)>>2)];
 var $81=HEAP32[(($10)>>2)];
 var $82=((($81)-(12))|0);
 var $83=$82;
 var $84=HEAP32[(($83)>>2)];
 var $_sum112=((($84)+(12))|0);
 var $85=(($11+$_sum112)|0);
 var $86=HEAP8[($85)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)!=0;
 var $89=__ZN10ClipperLib14PointInPolygonERKNS_8IntPointEPNS_5OutPtEb($79,$80,$88);
 if($89){label=11;break;}else{label=29;break;}
 case 11: 
 var $91=(($23+4)|0);
 var $92=HEAP8[($91)];
 var $93=$92&1;
 var $94=HEAP32[(($outRec2)>>2)];
 var $95=(($94+4)|0);
 var $96=$93^1;
 HEAP8[($95)]=$96;
 var $97=HEAP32[(($outRec2)>>2)];
 var $98=(($97+8)|0);
 HEAP32[(($98)>>2)]=$23;
 var $99=((($i_0164)+(1))|0);
 var $100=HEAP32[(($1)>>2)];
 var $101=HEAP32[(($3)>>2)];
 var $102=$100;
 var $103=$101;
 var $104=((($102)-($103))|0);
 var $105=$104>>2;
 var $106=($105>>>0)>($99>>>0);
 if($106){var $k_023_i=$99;var $107=$101;label=12;break;}else{label=25;break;}
 case 12: 
 var $107;
 var $k_023_i;
 var $108=(($107+($k_023_i<<2))|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+32)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=HEAP32[(($19)>>2)];
 var $113=($111|0)==($112|0);
 if($113){label=13;break;}else{var $131=$112;label=18;break;}
 case 13: 
 var $115=(($109)|0);
 var $ld$0$0=(($115)|0);
 var $116$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($115+4)|0);
 var $116$1=HEAP32[(($ld$1$1)>>2)];
 var $117=(($109+8)|0);
 var $pp2_0_i_i=$62;label=14;break;
 case 14: 
 var $pp2_0_i_i;
 var $119=(($pp2_0_i_i+8)|0);
 var $ld$2$0=(($119)|0);
 var $120$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($119+4)|0);
 var $120$1=HEAP32[(($ld$3$1)>>2)];
 var $121=(($120$0|0) == ($116$0|0)) & (($120$1|0) == ($116$1|0));
 if($121){label=15;break;}else{label=16;break;}
 case 15: 
 var $122=(($pp2_0_i_i+16)|0);
 var $ld$4$0=(($122)|0);
 var $123$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($122+4)|0);
 var $123$1=HEAP32[(($ld$5$1)>>2)];
 var $ld$6$0=(($117)|0);
 var $124$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($117+4)|0);
 var $124$1=HEAP32[(($ld$7$1)>>2)];
 var $125=(($123$0|0) == ($124$0|0)) & (($123$1|0) == ($124$1|0));
 if($125){label=17;break;}else{label=16;break;}
 case 16: 
 var $126=(($pp2_0_i_i+24)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==($62|0);
 if($128){var $131=$111;label=18;break;}else{var $pp2_0_i_i=$127;label=14;break;}
 case 17: 
 var $130=HEAP32[(($24)>>2)];
 HEAP32[(($110)>>2)]=$130;
 var $_pre_i=HEAP32[(($19)>>2)];
 var $131=$_pre_i;label=18;break;
 case 18: 
 var $131;
 var $132=(($109+72)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($133|0)==($131|0);
 if($134){label=19;break;}else{label=24;break;}
 case 19: 
 var $136=(($109+40)|0);
 var $ld$8$0=(($136)|0);
 var $137$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($136+4)|0);
 var $137$1=HEAP32[(($ld$9$1)>>2)];
 var $138=(($109+48)|0);
 var $pp2_0_i18_i=$62;label=20;break;
 case 20: 
 var $pp2_0_i18_i;
 var $140=(($pp2_0_i18_i+8)|0);
 var $ld$10$0=(($140)|0);
 var $141$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($140+4)|0);
 var $141$1=HEAP32[(($ld$11$1)>>2)];
 var $142=(($141$0|0) == ($137$0|0)) & (($141$1|0) == ($137$1|0));
 if($142){label=21;break;}else{label=22;break;}
 case 21: 
 var $143=(($pp2_0_i18_i+16)|0);
 var $ld$12$0=(($143)|0);
 var $144$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($143+4)|0);
 var $144$1=HEAP32[(($ld$13$1)>>2)];
 var $ld$14$0=(($138)|0);
 var $145$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($138+4)|0);
 var $145$1=HEAP32[(($ld$15$1)>>2)];
 var $146=(($144$0|0) == ($145$0|0)) & (($144$1|0) == ($145$1|0));
 if($146){label=23;break;}else{label=22;break;}
 case 22: 
 var $147=(($pp2_0_i18_i+24)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)==($62|0);
 if($149){label=24;break;}else{var $pp2_0_i18_i=$148;label=20;break;}
 case 23: 
 var $151=HEAP32[(($24)>>2)];
 HEAP32[(($132)>>2)]=$151;
 label=24;break;
 case 24: 
 var $152=((($k_023_i)+(1))|0);
 var $153=HEAP32[(($1)>>2)];
 var $154=HEAP32[(($3)>>2)];
 var $155=$153;
 var $156=$154;
 var $157=((($155)-($156))|0);
 var $158=$157>>2;
 var $159=($152>>>0)<($158>>>0);
 if($159){var $k_023_i=$152;var $107=$154;label=12;break;}else{label=25;break;}
 case 25: 
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$23);
 var $160=HEAP32[(($outRec2)>>2)];
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$160);
 var $161=HEAP32[(($outRec2)>>2)];
 var $162=(($161+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){label=78;break;}else{label=26;break;}
 case 26: 
 var $166=(($161+4)|0);
 var $167=HEAP8[($166)];
 var $168=$167&1;
 var $169=($168&255);
 var $170=HEAP8[($12)];
 var $171=$170&1;
 var $172=($171&255);
 var $173=HEAP32[(($10)>>2)];
 var $174=((($173)-(12))|0);
 var $175=$174;
 var $176=HEAP32[(($175)>>2)];
 var $_sum120=((($176)+(12))|0);
 var $177=(($11+$_sum120)|0);
 var $178=HEAP8[($177)];
 var $179=$178&1;
 var $180=(($179<<24)>>24)!=0;
 var $181=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($161,$180);
 var $182=($181&1);
 var $183=$182^$172;
 var $184=($169|0)==($183|0);
 if($184){label=27;break;}else{label=78;break;}
 case 27: 
 var $186=HEAP32[(($outRec2)>>2)];
 var $187=(($186+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){label=78;break;}else{var $pp1_0_i=$188;label=28;break;}
 case 28: 
 var $pp1_0_i;
 var $190=(($pp1_0_i+24)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($pp1_0_i+28)|0);
 var $193=HEAP32[(($192)>>2)];
 HEAP32[(($190)>>2)]=$193;
 HEAP32[(($192)>>2)]=$191;
 var $194=($191|0)==($188|0);
 if($194){label=78;break;}else{var $pp1_0_i=$191;label=28;break;}
 case 29: 
 var $196=HEAP32[(($32)>>2)];
 var $197=(($196+8)|0);
 var $198=HEAP32[(($outRec2)>>2)];
 var $199=(($198+16)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=HEAP32[(($10)>>2)];
 var $202=((($201)-(12))|0);
 var $203=$202;
 var $204=HEAP32[(($203)>>2)];
 var $_sum113=((($204)+(12))|0);
 var $205=(($11+$_sum113)|0);
 var $206=HEAP8[($205)];
 var $207=$206&1;
 var $208=(($207<<24)>>24)!=0;
 var $209=__ZN10ClipperLib14PointInPolygonERKNS_8IntPointEPNS_5OutPtEb($197,$200,$208);
 var $210=(($23+4)|0);
 var $211=HEAP8[($210)];
 var $212=$211&1;
 var $213=HEAP32[(($outRec2)>>2)];
 var $214=(($213+4)|0);
 HEAP8[($214)]=$212;
 if($209){label=30;break;}else{label=55;break;}
 case 30: 
 var $216=HEAP32[(($outRec2)>>2)];
 var $217=(($216+4)|0);
 var $218=HEAP8[($217)];
 var $219=$218&1;
 var $220=$219^1;
 HEAP8[($210)]=$220;
 var $221=(($23+8)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=HEAP32[(($outRec2)>>2)];
 var $224=(($223+8)|0);
 HEAP32[(($224)>>2)]=$222;
 var $225=HEAP32[(($outRec2)>>2)];
 HEAP32[(($221)>>2)]=$225;
 var $226=((($i_0164)+(1))|0);
 var $227=HEAP32[(($1)>>2)];
 var $228=HEAP32[(($3)>>2)];
 var $229=$227;
 var $230=$228;
 var $231=((($229)-($230))|0);
 var $232=$231>>2;
 var $233=($232>>>0)>($226>>>0);
 if($233){var $k_023_i122=$226;var $234=$228;label=31;break;}else{label=44;break;}
 case 31: 
 var $234;
 var $k_023_i122;
 var $235=(($234+($k_023_i122<<2))|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+32)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=HEAP32[(($19)>>2)];
 var $240=($238|0)==($239|0);
 if($240){label=32;break;}else{var $258=$239;label=37;break;}
 case 32: 
 var $242=(($236)|0);
 var $ld$16$0=(($242)|0);
 var $243$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($242+4)|0);
 var $243$1=HEAP32[(($ld$17$1)>>2)];
 var $244=(($236+8)|0);
 var $pp2_0_i_i124=$62;label=33;break;
 case 33: 
 var $pp2_0_i_i124;
 var $246=(($pp2_0_i_i124+8)|0);
 var $ld$18$0=(($246)|0);
 var $247$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($246+4)|0);
 var $247$1=HEAP32[(($ld$19$1)>>2)];
 var $248=(($247$0|0) == ($243$0|0)) & (($247$1|0) == ($243$1|0));
 if($248){label=34;break;}else{label=35;break;}
 case 34: 
 var $249=(($pp2_0_i_i124+16)|0);
 var $ld$20$0=(($249)|0);
 var $250$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($249+4)|0);
 var $250$1=HEAP32[(($ld$21$1)>>2)];
 var $ld$22$0=(($244)|0);
 var $251$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($244+4)|0);
 var $251$1=HEAP32[(($ld$23$1)>>2)];
 var $252=(($250$0|0) == ($251$0|0)) & (($250$1|0) == ($251$1|0));
 if($252){label=36;break;}else{label=35;break;}
 case 35: 
 var $253=(($pp2_0_i_i124+24)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=($254|0)==($62|0);
 if($255){var $258=$238;label=37;break;}else{var $pp2_0_i_i124=$254;label=33;break;}
 case 36: 
 var $257=HEAP32[(($24)>>2)];
 HEAP32[(($237)>>2)]=$257;
 var $_pre_i127=HEAP32[(($19)>>2)];
 var $258=$_pre_i127;label=37;break;
 case 37: 
 var $258;
 var $259=(($236+72)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==($258|0);
 if($261){label=38;break;}else{label=43;break;}
 case 38: 
 var $263=(($236+40)|0);
 var $ld$24$0=(($263)|0);
 var $264$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($263+4)|0);
 var $264$1=HEAP32[(($ld$25$1)>>2)];
 var $265=(($236+48)|0);
 var $pp2_0_i18_i129=$62;label=39;break;
 case 39: 
 var $pp2_0_i18_i129;
 var $267=(($pp2_0_i18_i129+8)|0);
 var $ld$26$0=(($267)|0);
 var $268$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($267+4)|0);
 var $268$1=HEAP32[(($ld$27$1)>>2)];
 var $269=(($268$0|0) == ($264$0|0)) & (($268$1|0) == ($264$1|0));
 if($269){label=40;break;}else{label=41;break;}
 case 40: 
 var $270=(($pp2_0_i18_i129+16)|0);
 var $ld$28$0=(($270)|0);
 var $271$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($270+4)|0);
 var $271$1=HEAP32[(($ld$29$1)>>2)];
 var $ld$30$0=(($265)|0);
 var $272$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($265+4)|0);
 var $272$1=HEAP32[(($ld$31$1)>>2)];
 var $273=(($271$0|0) == ($272$0|0)) & (($271$1|0) == ($272$1|0));
 if($273){label=42;break;}else{label=41;break;}
 case 41: 
 var $274=(($pp2_0_i18_i129+24)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=($275|0)==($62|0);
 if($276){label=43;break;}else{var $pp2_0_i18_i129=$275;label=39;break;}
 case 42: 
 var $278=HEAP32[(($24)>>2)];
 HEAP32[(($259)>>2)]=$278;
 label=43;break;
 case 43: 
 var $279=((($k_023_i122)+(1))|0);
 var $280=HEAP32[(($1)>>2)];
 var $281=HEAP32[(($3)>>2)];
 var $282=$280;
 var $283=$281;
 var $284=((($282)-($283))|0);
 var $285=$284>>2;
 var $286=($279>>>0)<($285>>>0);
 if($286){var $k_023_i122=$279;var $234=$281;label=31;break;}else{label=44;break;}
 case 44: 
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$23);
 var $287=HEAP32[(($outRec2)>>2)];
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$287);
 var $288=HEAP8[($210)];
 var $289=$288&1;
 var $290=($289&255);
 var $291=HEAP8[($12)];
 var $292=$291&1;
 var $293=($292&255);
 var $294=HEAP32[(($10)>>2)];
 var $295=((($294)-(12))|0);
 var $296=$295;
 var $297=HEAP32[(($296)>>2)];
 var $_sum119=((($297)+(12))|0);
 var $298=(($11+$_sum119)|0);
 var $299=HEAP8[($298)];
 var $300=$299&1;
 var $301=(($300<<24)>>24)!=0;
 var $302=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($23,$301);
 var $303=($302&1);
 var $304=$303^$293;
 var $305=($290|0)==($304|0);
 if($305){label=45;break;}else{label=47;break;}
 case 45: 
 var $307=HEAP32[(($32)>>2)];
 var $308=($307|0)==0;
 if($308){label=47;break;}else{var $pp1_0_i134=$307;label=46;break;}
 case 46: 
 var $pp1_0_i134;
 var $309=(($pp1_0_i134+24)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($pp1_0_i134+28)|0);
 var $312=HEAP32[(($311)>>2)];
 HEAP32[(($309)>>2)]=$312;
 HEAP32[(($311)>>2)]=$310;
 var $313=($310|0)==($307|0);
 if($313){label=47;break;}else{var $pp1_0_i134=$310;label=46;break;}
 case 47: 
 if($fixHoleLinkages){label=48;break;}else{label=78;break;}
 case 48: 
 var $315=HEAP8[($210)];
 var $316=$315&1;
 var $317=(($316<<24)>>24)==0;
 if($317){label=78;break;}else{label=49;break;}
 case 49: 
 var $318=HEAP32[(($8)>>2)];
 var $319=HEAP32[(($7)>>2)];
 var $320=($318|0)==($319|0);
 if($320){label=78;break;}else{var $k_0161=0;var $322=$319;var $321=$318;label=50;break;}
 case 50: 
 var $321;
 var $322;
 var $k_0161;
 var $323=(($322+($k_0161<<2))|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324+4)|0);
 var $326=HEAP8[($325)];
 var $327=$326&1;
 var $328=(($327<<24)>>24)==0;
 if($328){var $341=$321;var $340=$322;label=54;break;}else{label=51;break;}
 case 51: 
 var $330=(($324+20)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 if($332){var $341=$321;var $340=$322;label=54;break;}else{label=52;break;}
 case 52: 
 var $334=(($324+8)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=($335|0)==($23|0);
 if($336){label=53;break;}else{var $341=$321;var $340=$322;label=54;break;}
 case 53: 
 var $338=HEAP32[(($outRec2)>>2)];
 HEAP32[(($334)>>2)]=$338;
 var $_pre167=HEAP32[(($8)>>2)];
 var $_pre168=HEAP32[(($7)>>2)];
 var $341=$_pre167;var $340=$_pre168;label=54;break;
 case 54: 
 var $340;
 var $341;
 var $342=((($k_0161)+(1))|0);
 var $343=$341;
 var $344=$340;
 var $345=((($343)-($344))|0);
 var $346=$345>>2;
 var $347=($342>>>0)<($346>>>0);
 if($347){var $k_0161=$342;var $322=$340;var $321=$341;label=50;break;}else{label=78;break;}
 case 55: 
 var $349=(($23+8)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=HEAP32[(($outRec2)>>2)];
 var $352=(($351+8)|0);
 HEAP32[(($352)>>2)]=$350;
 var $353=((($i_0164)+(1))|0);
 var $354=HEAP32[(($1)>>2)];
 var $355=HEAP32[(($3)>>2)];
 var $356=$354;
 var $357=$355;
 var $358=((($356)-($357))|0);
 var $359=$358>>2;
 var $360=($359>>>0)>($353>>>0);
 if($360){var $k_023_i138=$353;var $361=$355;label=56;break;}else{label=69;break;}
 case 56: 
 var $361;
 var $k_023_i138;
 var $362=(($361+($k_023_i138<<2))|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(($363+32)|0);
 var $365=HEAP32[(($364)>>2)];
 var $366=HEAP32[(($19)>>2)];
 var $367=($365|0)==($366|0);
 if($367){label=57;break;}else{var $385=$366;label=62;break;}
 case 57: 
 var $369=(($363)|0);
 var $ld$32$0=(($369)|0);
 var $370$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($369+4)|0);
 var $370$1=HEAP32[(($ld$33$1)>>2)];
 var $371=(($363+8)|0);
 var $pp2_0_i_i140=$62;label=58;break;
 case 58: 
 var $pp2_0_i_i140;
 var $373=(($pp2_0_i_i140+8)|0);
 var $ld$34$0=(($373)|0);
 var $374$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($373+4)|0);
 var $374$1=HEAP32[(($ld$35$1)>>2)];
 var $375=(($374$0|0) == ($370$0|0)) & (($374$1|0) == ($370$1|0));
 if($375){label=59;break;}else{label=60;break;}
 case 59: 
 var $376=(($pp2_0_i_i140+16)|0);
 var $ld$36$0=(($376)|0);
 var $377$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($376+4)|0);
 var $377$1=HEAP32[(($ld$37$1)>>2)];
 var $ld$38$0=(($371)|0);
 var $378$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($371+4)|0);
 var $378$1=HEAP32[(($ld$39$1)>>2)];
 var $379=(($377$0|0) == ($378$0|0)) & (($377$1|0) == ($378$1|0));
 if($379){label=61;break;}else{label=60;break;}
 case 60: 
 var $380=(($pp2_0_i_i140+24)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==($62|0);
 if($382){var $385=$365;label=62;break;}else{var $pp2_0_i_i140=$381;label=58;break;}
 case 61: 
 var $384=HEAP32[(($24)>>2)];
 HEAP32[(($364)>>2)]=$384;
 var $_pre_i143=HEAP32[(($19)>>2)];
 var $385=$_pre_i143;label=62;break;
 case 62: 
 var $385;
 var $386=(($363+72)|0);
 var $387=HEAP32[(($386)>>2)];
 var $388=($387|0)==($385|0);
 if($388){label=63;break;}else{label=68;break;}
 case 63: 
 var $390=(($363+40)|0);
 var $ld$40$0=(($390)|0);
 var $391$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($390+4)|0);
 var $391$1=HEAP32[(($ld$41$1)>>2)];
 var $392=(($363+48)|0);
 var $pp2_0_i18_i145=$62;label=64;break;
 case 64: 
 var $pp2_0_i18_i145;
 var $394=(($pp2_0_i18_i145+8)|0);
 var $ld$42$0=(($394)|0);
 var $395$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($394+4)|0);
 var $395$1=HEAP32[(($ld$43$1)>>2)];
 var $396=(($395$0|0) == ($391$0|0)) & (($395$1|0) == ($391$1|0));
 if($396){label=65;break;}else{label=66;break;}
 case 65: 
 var $397=(($pp2_0_i18_i145+16)|0);
 var $ld$44$0=(($397)|0);
 var $398$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($397+4)|0);
 var $398$1=HEAP32[(($ld$45$1)>>2)];
 var $ld$46$0=(($392)|0);
 var $399$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($392+4)|0);
 var $399$1=HEAP32[(($ld$47$1)>>2)];
 var $400=(($398$0|0) == ($399$0|0)) & (($398$1|0) == ($399$1|0));
 if($400){label=67;break;}else{label=66;break;}
 case 66: 
 var $401=(($pp2_0_i18_i145+24)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=($402|0)==($62|0);
 if($403){label=68;break;}else{var $pp2_0_i18_i145=$402;label=64;break;}
 case 67: 
 var $405=HEAP32[(($24)>>2)];
 HEAP32[(($386)>>2)]=$405;
 label=68;break;
 case 68: 
 var $406=((($k_023_i138)+(1))|0);
 var $407=HEAP32[(($1)>>2)];
 var $408=HEAP32[(($3)>>2)];
 var $409=$407;
 var $410=$408;
 var $411=((($409)-($410))|0);
 var $412=$411>>2;
 var $413=($406>>>0)<($412>>>0);
 if($413){var $k_023_i138=$406;var $361=$408;label=56;break;}else{label=69;break;}
 case 69: 
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$23);
 var $414=HEAP32[(($outRec2)>>2)];
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$414);
 if($fixHoleLinkages){label=70;break;}else{label=78;break;}
 case 70: 
 var $416=HEAP32[(($outRec2)>>2)];
 var $417=(($416+16)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=($418|0)==0;
 if($419){label=78;break;}else{label=71;break;}
 case 71: 
 var $420=HEAP32[(($8)>>2)];
 var $421=HEAP32[(($7)>>2)];
 var $422=($420|0)==($421|0);
 if($422){label=78;break;}else{var $k1_0157=0;var $423=$421;label=72;break;}
 case 72: 
 var $423;
 var $k1_0157;
 var $424=(($423+($k1_0157<<2))|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=(($425+4)|0);
 var $427=HEAP8[($426)];
 var $428=$427&1;
 var $429=(($428<<24)>>24)==0;
 if($429){label=77;break;}else{label=73;break;}
 case 73: 
 var $431=(($425+20)|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=($432|0)==0;
 if($433){label=77;break;}else{label=74;break;}
 case 74: 
 var $435=(($425+8)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=($436|0)==($23|0);
 if($437){label=75;break;}else{label=77;break;}
 case 75: 
 var $439=(($432+8)|0);
 var $440=HEAP32[(($outRec2)>>2)];
 var $441=(($440+16)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=HEAP32[(($10)>>2)];
 var $444=((($443)-(12))|0);
 var $445=$444;
 var $446=HEAP32[(($445)>>2)];
 var $_sum118=((($446)+(12))|0);
 var $447=(($11+$_sum118)|0);
 var $448=HEAP8[($447)];
 var $449=$448&1;
 var $450=(($449<<24)>>24)!=0;
 var $451=__ZN10ClipperLib14PointInPolygonERKNS_8IntPointEPNS_5OutPtEb($439,$442,$450);
 if($451){label=76;break;}else{label=77;break;}
 case 76: 
 var $453=HEAP32[(($outRec2)>>2)];
 HEAP32[(($435)>>2)]=$453;
 label=77;break;
 case 77: 
 var $454=((($k1_0157)+(1))|0);
 var $455=HEAP32[(($8)>>2)];
 var $456=HEAP32[(($7)>>2)];
 var $457=$455;
 var $458=$456;
 var $459=((($457)-($458))|0);
 var $460=$459>>2;
 var $461=($454>>>0)<($460>>>0);
 if($461){var $k1_0157=$454;var $423=$456;label=72;break;}else{label=78;break;}
 case 78: 
 var $462=HEAP32[(($10)>>2)];
 var $463=((($462)-(12))|0);
 var $464=$463;
 var $465=HEAP32[(($464)>>2)];
 var $_sum114=((($465)+(12))|0);
 var $466=(($11+$_sum114)|0);
 var $467=HEAP8[($466)];
 var $468=$467&1;
 var $469=(($468<<24)>>24)!=0;
 var $470=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($23,$469);
 var $471=HEAP32[(($10)>>2)];
 var $472=((($471)-(12))|0);
 var $473=$472;
 var $474=HEAP32[(($473)>>2)];
 var $_sum115=((($474)+(12))|0);
 var $475=(($11+$_sum115)|0);
 var $476=HEAP8[($475)];
 var $477=$476&1;
 var $478=(($477<<24)>>24)!=0;
 var $479=__ZN10ClipperLib4AreaERKNS_6OutRecEb($23,$478);
 var $480=$479>=0;
 var $481=$470^$480;
 if($481){label=79;break;}else{label=84;break;}
 case 79: 
 var $483=HEAP32[(($33)>>2)];
 var $484=(($483+24)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=(($483+28)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=HEAP32[(($32)>>2)];
 var $489=($488|0)==($483|0);
 if($489){label=80;break;}else{label=81;break;}
 case 80: 
 HEAP32[(($32)>>2)]=$485;
 label=81;break;
 case 81: 
 var $492=($483|0)==0;
 if($492){label=83;break;}else{label=82;break;}
 case 82: 
 var $494=$483;
 __ZdlPv($494);
 label=83;break;
 case 83: 
 var $495=(($485+28)|0);
 HEAP32[(($495)>>2)]=$487;
 var $496=(($487+24)|0);
 HEAP32[(($496)>>2)]=$485;
 HEAP32[(($33)>>2)]=$485;
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$23);
 label=84;break;
 case 84: 
 var $498=HEAP32[(($outRec2)>>2)];
 var $499=HEAP32[(($10)>>2)];
 var $500=((($499)-(12))|0);
 var $501=$500;
 var $502=HEAP32[(($501)>>2)];
 var $_sum116=((($502)+(12))|0);
 var $503=(($11+$_sum116)|0);
 var $504=HEAP8[($503)];
 var $505=$504&1;
 var $506=(($505<<24)>>24)!=0;
 var $507=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($498,$506);
 var $508=HEAP32[(($outRec2)>>2)];
 var $509=HEAP32[(($10)>>2)];
 var $510=((($509)-(12))|0);
 var $511=$510;
 var $512=HEAP32[(($511)>>2)];
 var $_sum117=((($512)+(12))|0);
 var $513=(($11+$_sum117)|0);
 var $514=HEAP8[($513)];
 var $515=$514&1;
 var $516=(($515<<24)>>24)!=0;
 var $517=__ZN10ClipperLib4AreaERKNS_6OutRecEb($508,$516);
 var $518=$517>=0;
 var $519=$507^$518;
 if($519){label=85;break;}else{label=107;break;}
 case 85: 
 var $521=HEAP32[(($outRec2)>>2)];
 var $522=(($521+20)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=(($523+24)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=(($523+28)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(($521+16)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=($529|0)==($523|0);
 if($530){label=86;break;}else{label=87;break;}
 case 86: 
 HEAP32[(($528)>>2)]=$525;
 label=87;break;
 case 87: 
 var $533=($523|0)==0;
 if($533){label=89;break;}else{label=88;break;}
 case 88: 
 var $535=$523;
 __ZdlPv($535);
 label=89;break;
 case 89: 
 var $536=(($525+28)|0);
 HEAP32[(($536)>>2)]=$527;
 var $537=(($527+24)|0);
 HEAP32[(($537)>>2)]=$525;
 HEAP32[(($522)>>2)]=$525;
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$521);
 label=107;break;
 case 90: 
 if($fixHoleLinkages){label=91;break;}else{label=97;break;}
 case 91: 
 var $539=HEAP32[(($8)>>2)];
 var $540=($539|0)==($21|0);
 if($540){label=97;break;}else{var $k3_0151=0;var $542=$21;var $541=$539;label=92;break;}
 case 92: 
 var $541;
 var $542;
 var $k3_0151;
 var $543=(($542+($k3_0151<<2))|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=(($544+4)|0);
 var $546=HEAP8[($545)];
 var $547=$546&1;
 var $548=(($547<<24)>>24)==0;
 if($548){var $561=$541;var $560=$542;label=96;break;}else{label=93;break;}
 case 93: 
 var $550=(($544+20)|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=($551|0)==0;
 if($552){var $561=$541;var $560=$542;label=96;break;}else{label=94;break;}
 case 94: 
 var $554=(($544+8)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=HEAP32[(($outRec2)>>2)];
 var $557=($555|0)==($556|0);
 if($557){label=95;break;}else{var $561=$541;var $560=$542;label=96;break;}
 case 95: 
 HEAP32[(($554)>>2)]=$23;
 var $_pre170=HEAP32[(($8)>>2)];
 var $_pre171=HEAP32[(($7)>>2)];
 var $561=$_pre170;var $560=$_pre171;label=96;break;
 case 96: 
 var $560;
 var $561;
 var $562=((($k3_0151)+(1))|0);
 var $563=$561;
 var $564=$560;
 var $565=((($563)-($564))|0);
 var $566=$565>>2;
 var $567=($562>>>0)<($566>>>0);
 if($567){var $k3_0151=$562;var $542=$560;var $541=$561;label=92;break;}else{label=97;break;}
 case 97: 
 __ZN10ClipperLib7Clipper15FixupOutPolygonERNS_6OutRecE($this,$23);
 var $568=(($23+16)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=($569|0)==0;
 if($570){label=101;break;}else{label=98;break;}
 case 98: 
 var $572=HEAP32[(($10)>>2)];
 var $573=((($572)-(12))|0);
 var $574=$573;
 var $575=HEAP32[(($574)>>2)];
 var $_sum=((($575)+(12))|0);
 var $576=(($11+$_sum)|0);
 var $577=HEAP8[($576)];
 var $578=$577&1;
 var $579=(($578<<24)>>24)!=0;
 var $580=__ZN10ClipperLib11OrientationEPNS_6OutRecEb($23,$579);
 var $581=(($23+4)|0);
 var $582=($580&1);
 var $583=$582^1;
 HEAP8[($581)]=$583;
 if($580){label=101;break;}else{label=99;break;}
 case 99: 
 var $585=(($23+8)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=($586|0)==0;
 if($587){label=100;break;}else{label=101;break;}
 case 100: 
 var $589=HEAP32[(($outRec2)>>2)];
 var $590=(($589+8)|0);
 var $591=HEAP32[(($590)>>2)];
 HEAP32[(($585)>>2)]=$591;
 label=101;break;
 case 101: 
 var $593=(($23)|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=HEAP32[(($outRec2)>>2)];
 var $596=(($595)|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=(($595+16)|0);
 HEAP32[(($598)>>2)]=0;
 var $599=HEAP32[(($outRec2)>>2)];
 var $600=(($599+20)|0);
 HEAP32[(($600)>>2)]=0;
 var $601=HEAP32[(($outRec2)>>2)];
 var $602=(($601+12)|0);
 HEAP32[(($602)>>2)]=$23;
 var $k4_0153=((($i_0164)+(1))|0);
 var $603=HEAP32[(($1)>>2)];
 var $604=HEAP32[(($3)>>2)];
 var $605=$603;
 var $606=$604;
 var $607=((($605)-($606))|0);
 var $608=$607>>2;
 var $609=($k4_0153>>>0)<($608>>>0);
 if($609){var $k4_0154=$k4_0153;var $610=$604;label=102;break;}else{label=107;break;}
 case 102: 
 var $610;
 var $k4_0154;
 var $611=(($610+($k4_0154<<2))|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=(($612+32)|0);
 var $614=HEAP32[(($613)>>2)];
 var $615=($614|0)==($597|0);
 if($615){label=103;break;}else{label=104;break;}
 case 103: 
 HEAP32[(($613)>>2)]=$594;
 label=104;break;
 case 104: 
 var $618=(($612+72)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=($619|0)==($597|0);
 if($620){label=106;break;}else{label=105;break;}
 case 105: 
 var $k4_0=((($k4_0154)+(1))|0);
 var $621=HEAP32[(($1)>>2)];
 var $622=HEAP32[(($3)>>2)];
 var $623=$621;
 var $624=$622;
 var $625=((($623)-($624))|0);
 var $626=$625>>2;
 var $627=($k4_0>>>0)<($626>>>0);
 if($627){var $k4_0154=$k4_0;var $610=$622;label=102;break;}else{label=107;break;}
 case 106: 
 HEAP32[(($618)>>2)]=$594;
 label=105;break;
 case 107: 
 var $629=((($i_0164)+(1))|0);
 var $630=HEAP32[(($1)>>2)];
 var $631=HEAP32[(($3)>>2)];
 var $632=$630;
 var $633=$631;
 var $634=((($632)-($633))|0);
 var $635=$634>>2;
 var $636=($629>>>0)<($635>>>0);
 if($636){var $i_0164=$629;var $14=$631;label=3;break;}else{label=108;break;}
 case 108: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper15SetWindingCountERNS_5TEdgeE($this,$edge){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($edge+80)|0);
 var $edge_pn=$edge;label=2;break;
 case 2: 
 var $edge_pn;
 var $e_0_in=(($edge_pn+120)|0);
 var $e_0=HEAP32[(($e_0_in)>>2)];
 var $3=($e_0|0)==0;
 if($3){label=4;break;}else{label=3;break;}
 case 3: 
 var $5=(($e_0+80)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=HEAP32[(($1)>>2)];
 var $8=($6|0)==($7|0);
 if($8){label=5;break;}else{var $edge_pn=$e_0;label=2;break;}
 case 4: 
 var $9=(($edge+88)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($edge+92)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($edge+96)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($this+48)|0);
 var $_pre=HEAP32[(($1)>>2)];
 var $_pre59=(($this+64)|0);
 var $_pre60=(($this+68)|0);
 var $e_1_in=$13;var $72=$_pre;var $71=0;var $_pre_phi=$_pre59;var $_pre_phi61=$_pre60;label=20;break;
 case 5: 
 var $14=($6|0)==0;
 var $15=(($this+68)|0);
 var $16=(($this+64)|0);
 var $_0_in_in_i=$14?$15:$16;
 var $_0_in_i=HEAP32[(($_0_in_in_i)>>2)];
 var $_0_i=($_0_in_i|0)==0;
 if($_0_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=(($edge+92)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($e_0+96)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($edge+96)|0);
 HEAP32[(($21)>>2)]=$20;
 var $22=(($e_0+116)|0);
 var $e_1_in=$22;var $72=$6;var $71=$20;var $_pre_phi=$16;var $_pre_phi61=$15;label=20;break;
 case 7: 
 var $24=(($e_0+92)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($e_0+88)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(Math_imul($27,$25)|0);
 var $29=($28|0)<0;
 var $30$0=$25;
 var $30$1=(((($25|0)<0))|0)?-1:0;
 var $31=($25|0)<0;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $32$0=_i64Subtract($$etemp$0$0,$$etemp$0$1,$30$0,$30$1);var $32$1=tempRet0;
 var $33$0=$31?$32$0:$30$0;
 var $33$1=$31?$32$1:$30$1;
 var $$etemp$1$0=1;
 var $$etemp$1$1=0;
 var $34=(($33$1|0) > ($$etemp$1$1|0)) | (((($33$1|0) == ($$etemp$1$1|0) & ($33$0>>>0) >  ($$etemp$1$0>>>0))));
 if($29){label=8;break;}else{label=13;break;}
 case 8: 
 if($34){label=9;break;}else{label=12;break;}
 case 9: 
 var $37=(($edge+88)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(Math_imul($38,$27)|0);
 var $40=($39|0)<0;
 if($40){label=10;break;}else{label=11;break;}
 case 10: 
 var $42=(($edge+92)|0);
 HEAP32[(($42)>>2)]=$25;
 label=19;break;
 case 11: 
 var $44=((($38)+($25))|0);
 var $45=(($edge+92)|0);
 HEAP32[(($45)>>2)]=$44;
 label=19;break;
 case 12: 
 var $47=((($27)+($25))|0);
 var $48=(($edge+88)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=((($47)+($49))|0);
 var $51=(($edge+92)|0);
 HEAP32[(($51)>>2)]=$50;
 label=19;break;
 case 13: 
 var $53=(($edge+88)|0);
 var $54=HEAP32[(($53)>>2)];
 if($34){label=14;break;}else{label=16;break;}
 case 14: 
 var $56=(Math_imul($54,$27)|0);
 var $57=($56|0)<0;
 if($57){label=15;break;}else{label=16;break;}
 case 15: 
 var $59=(($edge+92)|0);
 HEAP32[(($59)>>2)]=$25;
 label=19;break;
 case 16: 
 var $60=((($54)+($25))|0);
 var $61=($60|0)==0;
 var $62=(($edge+92)|0);
 if($61){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($62)>>2)]=$25;
 label=19;break;
 case 18: 
 HEAP32[(($62)>>2)]=$60;
 label=19;break;
 case 19: 
 var $66=(($e_0+96)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($edge+96)|0);
 HEAP32[(($68)>>2)]=$67;
 var $69=(($e_0+116)|0);
 var $e_1_in=$69;var $72=$6;var $71=$67;var $_pre_phi=$16;var $_pre_phi61=$15;label=20;break;
 case 20: 
 var $_pre_phi61;
 var $_pre_phi;
 var $71;
 var $72;
 var $e_1_in;
 var $e_1=HEAP32[(($e_1_in)>>2)];
 var $73=($72|0)==0;
 var $_0_in_in_i47=$73?$_pre_phi:$_pre_phi61;
 var $_0_in_i48=HEAP32[(($_0_in_in_i47)>>2)];
 var $_0_i49=($_0_in_i48|0)==0;
 var $74=($e_1|0)==($edge|0);
 if($_0_i49){label=23;break;}else{label=21;break;}
 case 21: 
 if($74){label=27;break;}else{label=22;break;}
 case 22: 
 var $75=(($edge+96)|0);
 var $e_353=$e_1;var $85=$71;label=26;break;
 case 23: 
 if($74){label=27;break;}else{label=24;break;}
 case 24: 
 var $76=(($edge+96)|0);
 var $e_250=$e_1;var $78=$71;label=25;break;
 case 25: 
 var $78;
 var $e_250;
 var $79=($78|0)==0;
 var $80=($79&1);
 HEAP32[(($76)>>2)]=$80;
 var $81=(($e_250+116)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==($edge|0);
 if($83){label=27;break;}else{var $e_250=$82;var $78=$80;label=25;break;}
 case 26: 
 var $85;
 var $e_353;
 var $86=(($e_353+88)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=((($85)+($87))|0);
 HEAP32[(($75)>>2)]=$88;
 var $89=(($e_353+116)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)==($edge|0);
 if($91){label=27;break;}else{var $e_353=$90;var $85=$88;label=26;break;}
 case 27: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10ClipperLib7Clipper14IsContributingERKNS_5TEdgeE($this,$edge){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($edge+80)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($this+68)|0);
 var $6=(($this+64)|0);
 var $pft2_0_in=$6;var $pft_0_in=$5;label=4;break;
 case 3: 
 var $8=(($this+64)|0);
 var $9=(($this+68)|0);
 var $pft2_0_in=$9;var $pft_0_in=$8;label=4;break;
 case 4: 
 var $pft_0_in;
 var $pft2_0_in;
 var $pft2_0=HEAP32[(($pft2_0_in)>>2)];
 var $pft_0=HEAP32[(($pft_0_in)>>2)];
 if(($pft_0|0)==0|($pft_0|0)==1){ label=5;break;}else if(($pft_0|0)==2){ label=6;break;}else{label=7;break;}
 case 5: 
 var $12=(($edge+92)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14$0=$13;
 var $14$1=(((($13|0)<0))|0)?-1:0;
 var $15=($13|0)<0;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $16$0=_i64Subtract($$etemp$0$0,$$etemp$0$1,$14$0,$14$1);var $16$1=tempRet0;
 var $17$0=$15?$16$0:$14$0;
 var $17$1=$15?$16$1:$14$1;
 var $$etemp$1$0=1;
 var $$etemp$1$1=0;
 var $18=(($17$0|0) == ($$etemp$1$0|0)) & (($17$1|0) == ($$etemp$1$1|0));
 if($18){label=8;break;}else{var $_0=0;label=26;break;}
 case 6: 
 var $20=(($edge+92)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==1;
 if($22){label=8;break;}else{var $_0=0;label=26;break;}
 case 7: 
 var $24=(($edge+92)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==-1;
 if($26){label=8;break;}else{var $_0=0;label=26;break;}
 case 8: 
 var $28=(($this+40)|0);
 var $29=HEAP32[(($28)>>2)];
 if(($29|0)==1){ label=13;break;}else if(($29|0)==2){ label=17;break;}else if(($29|0)==0){ label=9;break;}else{var $_0=1;label=26;break;}
 case 9: 
 if(($pft2_0|0)==0|($pft2_0|0)==1){ label=10;break;}else if(($pft2_0|0)==2){ label=11;break;}else{label=12;break;}
 case 10: 
 var $32=(($edge+96)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)!=0;
 var $_0=$34;label=26;break;
 case 11: 
 var $36=(($edge+96)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)>0;
 var $_0=$38;label=26;break;
 case 12: 
 var $40=(($edge+96)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)<0;
 var $_0=$42;label=26;break;
 case 13: 
 if(($pft2_0|0)==0|($pft2_0|0)==1){ label=14;break;}else if(($pft2_0|0)==2){ label=15;break;}else{label=16;break;}
 case 14: 
 var $45=(($edge+96)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 var $_0=$47;label=26;break;
 case 15: 
 var $49=(($edge+96)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)<1;
 var $_0=$51;label=26;break;
 case 16: 
 var $53=(($edge+96)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)>-1;
 var $_0=$55;label=26;break;
 case 17: 
 if($3){label=18;break;}else{label=22;break;}
 case 18: 
 if(($pft2_0|0)==0|($pft2_0|0)==1){ label=19;break;}else if(($pft2_0|0)==2){ label=20;break;}else{label=21;break;}
 case 19: 
 var $59=(($edge+96)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==0;
 var $_0=$61;label=26;break;
 case 20: 
 var $63=(($edge+96)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)<1;
 var $_0=$65;label=26;break;
 case 21: 
 var $67=(($edge+96)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)>-1;
 var $_0=$69;label=26;break;
 case 22: 
 if(($pft2_0|0)==0|($pft2_0|0)==1){ label=23;break;}else if(($pft2_0|0)==2){ label=24;break;}else{label=25;break;}
 case 23: 
 var $72=(($edge+96)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)!=0;
 var $_0=$74;label=26;break;
 case 24: 
 var $76=(($edge+96)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)>0;
 var $_0=$78;label=26;break;
 case 25: 
 var $80=(($edge+96)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)<0;
 var $_0=$82;label=26;break;
 case 26: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $jr_i=(sp)+(96);
 var $7=(($e2+48)|0);
 var $8=HEAPF64[(($7)>>3)];
 var $9=($8)+((1e+40));
 var $10=$9>(-1e-20);
 var $11=$9<(1e-20);
 var $or_cond=$10&$11;
 if($or_cond){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=(($e1+48)|0);
 var $14=HEAPF64[(($13)>>3)];
 var $15=$14>$8;
 if($15){label=3;break;}else{label=5;break;}
 case 3: 
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e1,$pt);
 var $17=(($e1+100)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($e2+100)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($e1+84)|0);
 HEAP32[(($20)>>2)]=1;
 var $21=(($e2+84)|0);
 HEAP32[(($21)>>2)]=2;
 var $22=(($e1+120)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($e2|0);
 if($24){label=4;break;}else{var $prevE_0=$23;var $e_0=$e1;label=7;break;}
 case 4: 
 var $26=(($e2+120)|0);
 var $27=HEAP32[(($26)>>2)];
 var $prevE_0=$27;var $e_0=$e1;label=7;break;
 case 5: 
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e2,$pt);
 var $29=(($e2+100)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($e1+100)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($e1+84)|0);
 HEAP32[(($32)>>2)]=2;
 var $33=(($e2+84)|0);
 HEAP32[(($33)>>2)]=1;
 var $34=(($e2+120)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==($e1|0);
 if($36){label=6;break;}else{var $prevE_0=$35;var $e_0=$e2;label=7;break;}
 case 6: 
 var $38=(($e1+120)|0);
 var $39=HEAP32[(($38)>>2)];
 var $prevE_0=$39;var $e_0=$e2;label=7;break;
 case 7: 
 var $e_0;
 var $prevE_0;
 var $41=($prevE_0|0)==0;
 if($41){label=32;break;}else{label=8;break;}
 case 8: 
 var $43=(($prevE_0+100)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)>-1;
 if($45){label=9;break;}else{label=32;break;}
 case 9: 
 var $47=(($pt+8)|0);
 var $ld$0$0=(($47)|0);
 var $48$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($47+4)|0);
 var $48$1=HEAP32[(($ld$1$1)>>2)];
 var $49=(($prevE_0+40)|0);
 var $ld$2$0=(($49)|0);
 var $50$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($49+4)|0);
 var $50$1=HEAP32[(($ld$3$1)>>2)];
 var $51=(($50$0|0) == ($48$0|0)) & (($50$1|0) == ($48$1|0));
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=(($prevE_0+32)|0);
 var $ld$4$0=(($53)|0);
 var $54$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($53+4)|0);
 var $54$1=HEAP32[(($ld$5$1)>>2)];
 var $72$1=$54$1;var $72$0=$54$0;label=15;break;
 case 11: 
 var $56=(($prevE_0)|0);
 var $ld$6$0=(($56)|0);
 var $57$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($56+4)|0);
 var $57$1=HEAP32[(($ld$7$1)>>2)];
 var $58=(($prevE_0+48)|0);
 var $59=HEAPF64[(($58)>>3)];
 var $60=(($prevE_0+8)|0);
 var $ld$8$0=(($60)|0);
 var $61$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($60+4)|0);
 var $61$1=HEAP32[(($ld$9$1)>>2)];
 var $62$0=_i64Subtract($48$0,$48$1,$61$0,$61$1);var $62$1=tempRet0;
 var $63=(($62$0>>>0)+(($62$1|0)*4294967296));
 var $64=($59)*($63);
 var $65=$64<0;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 var $67=($64)+((-0.5));
 var $_sink_i_i=$67;label=14;break;
 case 13: 
 var $69=($64)+((0.5));
 var $_sink_i_i=$69;label=14;break;
 case 14: 
 var $_sink_i_i;
 var $70$0=$_sink_i_i>>>0;var $70$1=(Math_abs($_sink_i_i) >= 1 ? ($_sink_i_i > 0 ? Math_min(Math_floor(($_sink_i_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i - +(((~~($_sink_i_i)))>>>0))/4294967296)))>>>0) : 0);
 var $71$0=_i64Add($70$0,$70$1,$57$0,$57$1);var $71$1=tempRet0;
 var $72$1=$71$1;var $72$0=$71$0;label=15;break;
 case 15: 
 var $72$0;
 var $72$1;
 var $73=(($e_0+40)|0);
 var $ld$10$0=(($73)|0);
 var $74$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($73+4)|0);
 var $74$1=HEAP32[(($ld$11$1)>>2)];
 var $75=(($74$0|0) == ($48$0|0)) & (($74$1|0) == ($48$1|0));
 if($75){label=16;break;}else{label=17;break;}
 case 16: 
 var $77=(($e_0+32)|0);
 var $ld$12$0=(($77)|0);
 var $78$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($77+4)|0);
 var $78$1=HEAP32[(($ld$13$1)>>2)];
 var $96$1=$78$1;var $96$0=$78$0;label=21;break;
 case 17: 
 var $80=(($e_0)|0);
 var $ld$14$0=(($80)|0);
 var $81$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($80+4)|0);
 var $81$1=HEAP32[(($ld$15$1)>>2)];
 var $82=(($e_0+48)|0);
 var $83=HEAPF64[(($82)>>3)];
 var $84=(($e_0+8)|0);
 var $ld$16$0=(($84)|0);
 var $85$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($84+4)|0);
 var $85$1=HEAP32[(($ld$17$1)>>2)];
 var $86$0=_i64Subtract($48$0,$48$1,$85$0,$85$1);var $86$1=tempRet0;
 var $87=(($86$0>>>0)+(($86$1|0)*4294967296));
 var $88=($83)*($87);
 var $89=$88<0;
 if($89){label=18;break;}else{label=19;break;}
 case 18: 
 var $91=($88)+((-0.5));
 var $_sink_i_i35=$91;label=20;break;
 case 19: 
 var $93=($88)+((0.5));
 var $_sink_i_i35=$93;label=20;break;
 case 20: 
 var $_sink_i_i35;
 var $94$0=$_sink_i_i35>>>0;var $94$1=(Math_abs($_sink_i_i35) >= 1 ? ($_sink_i_i35 > 0 ? Math_min(Math_floor(($_sink_i_i35)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i35 - +(((~~($_sink_i_i35)))>>>0))/4294967296)))>>>0) : 0);
 var $95$0=_i64Add($94$0,$94$1,$81$0,$81$1);var $95$1=tempRet0;
 var $96$1=$95$1;var $96$0=$95$0;label=21;break;
 case 21: 
 var $96$0;
 var $96$1;
 var $97=(($72$0|0) == ($96$0|0)) & (($72$1|0) == ($96$1|0));
 if($97){label=22;break;}else{label=32;break;}
 case 22: 
 var $99=$this;
 var $100=HEAP32[(($99)>>2)];
 var $101=((($100)-(12))|0);
 var $102=$101;
 var $103=HEAP32[(($102)>>2)];
 var $104=$this;
 var $_sum=((($103)+(12))|0);
 var $105=(($104+$_sum)|0);
 var $106=HEAP8[($105)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 var $109=$1;
 var $110=$2;
 var $111=$3;
 var $112=$4;
 var $113=$5;
 var $114=$6;
 var $115=(($e_0+64)|0);
 var $ld$18$0=(($115)|0);
 var $116$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($115+4)|0);
 var $116$1=HEAP32[(($ld$19$1)>>2)];
 if($108){label=25;break;}else{label=23;break;}
 case 23: 
 var $118=(($1+8)|0);
 var $st$20$0=(($118)|0);
 HEAP32[(($st$20$0)>>2)]=$116$0;
 var $st$21$1=(($118+4)|0);
 HEAP32[(($st$21$1)>>2)]=$116$1;
 var $119=(($1)|0);
 var $_lo_lobit_i_i_i$0=($116$1>>31)|(((((($116$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($116$1|0)<0))|0)?-1:0)>>31)|(((((($116$1|0)<0))|0)?-1:0)<<1);
 var $st$22$0=(($119)|0);
 HEAP32[(($st$22$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$23$1=(($119+4)|0);
 HEAP32[(($st$23$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $120=(($prevE_0+56)|0);
 var $ld$24$0=(($120)|0);
 var $121$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($120+4)|0);
 var $121$1=HEAP32[(($ld$25$1)>>2)];
 var $122=(($2+8)|0);
 var $st$26$0=(($122)|0);
 HEAP32[(($st$26$0)>>2)]=$121$0;
 var $st$27$1=(($122+4)|0);
 HEAP32[(($st$27$1)>>2)]=$121$1;
 var $123=(($2)|0);
 var $_lo_lobit_i_i9_i$0=($121$1>>31)|(((((($121$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i9_i$1=(((((($121$1|0)<0))|0)?-1:0)>>31)|(((((($121$1|0)<0))|0)?-1:0)<<1);
 var $st$28$0=(($123)|0);
 HEAP32[(($st$28$0)>>2)]=$_lo_lobit_i_i9_i$0;
 var $st$29$1=(($123+4)|0);
 HEAP32[(($st$29$1)>>2)]=$_lo_lobit_i_i9_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $124=(($e_0+56)|0);
 var $ld$30$0=(($124)|0);
 var $125$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($124+4)|0);
 var $125$1=HEAP32[(($ld$31$1)>>2)];
 var $126=(($5+8)|0);
 var $st$32$0=(($126)|0);
 HEAP32[(($st$32$0)>>2)]=$125$0;
 var $st$33$1=(($126+4)|0);
 HEAP32[(($st$33$1)>>2)]=$125$1;
 var $127=(($5)|0);
 var $_lo_lobit_i_i11_i$0=($125$1>>31)|(((((($125$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i11_i$1=(((((($125$1|0)<0))|0)?-1:0)>>31)|(((((($125$1|0)<0))|0)?-1:0)<<1);
 var $st$34$0=(($127)|0);
 HEAP32[(($st$34$0)>>2)]=$_lo_lobit_i_i11_i$0;
 var $st$35$1=(($127+4)|0);
 HEAP32[(($st$35$1)>>2)]=$_lo_lobit_i_i11_i$1;
 var $128=(($prevE_0+64)|0);
 var $ld$36$0=(($128)|0);
 var $129$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($128+4)|0);
 var $129$1=HEAP32[(($ld$37$1)>>2)];
 var $130=(($6+8)|0);
 var $st$38$0=(($130)|0);
 HEAP32[(($st$38$0)>>2)]=$129$0;
 var $st$39$1=(($130+4)|0);
 HEAP32[(($st$39$1)>>2)]=$129$1;
 var $131=(($6)|0);
 var $_lo_lobit_i_i10_i$0=($129$1>>31)|(((((($129$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i10_i$1=(((((($129$1|0)<0))|0)?-1:0)>>31)|(((((($129$1|0)<0))|0)?-1:0)<<1);
 var $st$40$0=(($131)|0);
 HEAP32[(($st$40$0)>>2)]=$_lo_lobit_i_i10_i$0;
 var $st$41$1=(($131+4)|0);
 HEAP32[(($st$41$1)>>2)]=$_lo_lobit_i_i10_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $132=(($3)|0);
 var $ld$42$0=(($132)|0);
 var $133$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($132+4)|0);
 var $133$1=HEAP32[(($ld$43$1)>>2)];
 var $134=(($4)|0);
 var $ld$44$0=(($134)|0);
 var $135$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($134+4)|0);
 var $135$1=HEAP32[(($ld$45$1)>>2)];
 var $136=(($133$0|0) == ($135$0|0)) & (($133$1|0) == ($135$1|0));
 if($136){label=24;break;}else{label=32;break;}
 case 24: 
 var $138=(($3+8)|0);
 var $ld$46$0=(($138)|0);
 var $139$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($138+4)|0);
 var $139$1=HEAP32[(($ld$47$1)>>2)];
 var $140=(($4+8)|0);
 var $ld$48$0=(($140)|0);
 var $141$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($140+4)|0);
 var $141$1=HEAP32[(($ld$49$1)>>2)];
 var $142=(($139$0|0) == ($141$0|0)) & (($139$1|0) == ($141$1|0));
 var $_0_i=$142;label=26;break;
 case 25: 
 var $144=(($prevE_0+56)|0);
 var $ld$50$0=(($144)|0);
 var $145$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($144+4)|0);
 var $145$1=HEAP32[(($ld$51$1)>>2)];
 var $146$0=___muldi3($145$0,$145$1,$116$0,$116$1);var $146$1=tempRet0;
 var $147=(($e_0+56)|0);
 var $ld$52$0=(($147)|0);
 var $148$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($147+4)|0);
 var $148$1=HEAP32[(($ld$53$1)>>2)];
 var $149=(($prevE_0+64)|0);
 var $ld$54$0=(($149)|0);
 var $150$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($149+4)|0);
 var $150$1=HEAP32[(($ld$55$1)>>2)];
 var $151$0=___muldi3($150$0,$150$1,$148$0,$148$1);var $151$1=tempRet0;
 var $152=(($146$0|0) == ($151$0|0)) & (($146$1|0) == ($151$1|0));
 var $_0_i=$152;label=26;break;
 case 26: 
 var $_0_i;
 if($_0_i){label=27;break;}else{label=32;break;}
 case 27: 
 var $154=$jr_i;
 var $155=__Znwj(80);
 var $156=$155;
 var $157=(($155+40)|0);
 HEAP32[(($155)>>2)]=0; HEAP32[((($155)+(4))>>2)]=0; HEAP32[((($155)+(8))>>2)]=0; HEAP32[((($155)+(12))>>2)]=0; HEAP32[((($155)+(16))>>2)]=0; HEAP32[((($155)+(20))>>2)]=0;
 HEAP32[(($157)>>2)]=0; HEAP32[((($157)+(4))>>2)]=0; HEAP32[((($157)+(8))>>2)]=0; HEAP32[((($157)+(12))>>2)]=0; HEAP32[((($157)+(16))>>2)]=0; HEAP32[((($157)+(20))>>2)]=0; HEAP32[((($157)+(24))>>2)]=0; HEAP32[((($157)+(28))>>2)]=0;
 HEAP32[(($jr_i)>>2)]=$156;
 var $158=(($e_0+100)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($155+32)|0);
 var $161=$160;
 HEAP32[(($161)>>2)]=$159;
 var $162=(($e_0+16)|0);
 var $ld$56$0=(($162)|0);
 var $163$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($162+4)|0);
 var $163$1=HEAP32[(($ld$57$1)>>2)];
 var $164=(($e_0+24)|0);
 var $ld$58$0=(($164)|0);
 var $165$0=HEAP32[(($ld$58$0)>>2)];
 var $ld$59$1=(($164+4)|0);
 var $165$1=HEAP32[(($ld$59$1)>>2)];
 var $_sroa_036_0__idx_i=$155;
 var $st$60$0=(($_sroa_036_0__idx_i)|0);
 HEAP32[(($st$60$0)>>2)]=$163$0;
 var $st$61$1=(($_sroa_036_0__idx_i+4)|0);
 HEAP32[(($st$61$1)>>2)]=$163$1;
 var $_sroa_137_8__idx38_i=(($155+8)|0);
 var $166=$_sroa_137_8__idx38_i;
 var $st$62$0=(($166)|0);
 HEAP32[(($st$62$0)>>2)]=$165$0;
 var $st$63$1=(($166+4)|0);
 HEAP32[(($st$63$1)>>2)]=$165$1;
 var $167=(($e_0+32)|0);
 var $ld$64$0=(($167)|0);
 var $168$0=HEAP32[(($ld$64$0)>>2)];
 var $ld$65$1=(($167+4)|0);
 var $168$1=HEAP32[(($ld$65$1)>>2)];
 var $ld$66$0=(($73)|0);
 var $169$0=HEAP32[(($ld$66$0)>>2)];
 var $ld$67$1=(($73+4)|0);
 var $169$1=HEAP32[(($ld$67$1)>>2)];
 var $_sroa_033_0__idx_i=(($155+16)|0);
 var $170=$_sroa_033_0__idx_i;
 var $st$68$0=(($170)|0);
 HEAP32[(($st$68$0)>>2)]=$168$0;
 var $st$69$1=(($170+4)|0);
 HEAP32[(($st$69$1)>>2)]=$168$1;
 var $_sroa_134_8__idx35_i=(($155+24)|0);
 var $171=$_sroa_134_8__idx35_i;
 var $st$70$0=(($171)|0);
 HEAP32[(($st$70$0)>>2)]=$169$0;
 var $st$71$1=(($171+4)|0);
 HEAP32[(($st$71$1)>>2)]=$169$1;
 var $172=HEAP32[(($43)>>2)];
 var $173=(($155+72)|0);
 var $174=$173;
 HEAP32[(($174)>>2)]=$172;
 var $175=(($prevE_0+16)|0);
 var $ld$72$0=(($175)|0);
 var $176$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($175+4)|0);
 var $176$1=HEAP32[(($ld$73$1)>>2)];
 var $177=(($prevE_0+24)|0);
 var $ld$74$0=(($177)|0);
 var $178$0=HEAP32[(($ld$74$0)>>2)];
 var $ld$75$1=(($177+4)|0);
 var $178$1=HEAP32[(($ld$75$1)>>2)];
 var $179=$157;
 var $st$76$0=(($179)|0);
 HEAP32[(($st$76$0)>>2)]=$176$0;
 var $st$77$1=(($179+4)|0);
 HEAP32[(($st$77$1)>>2)]=$176$1;
 var $_sroa_131_8__idx32_i=(($155+48)|0);
 var $180=$_sroa_131_8__idx32_i;
 var $st$78$0=(($180)|0);
 HEAP32[(($st$78$0)>>2)]=$178$0;
 var $st$79$1=(($180+4)|0);
 HEAP32[(($st$79$1)>>2)]=$178$1;
 var $181=(($prevE_0+32)|0);
 var $ld$80$0=(($181)|0);
 var $182$0=HEAP32[(($ld$80$0)>>2)];
 var $ld$81$1=(($181+4)|0);
 var $182$1=HEAP32[(($ld$81$1)>>2)];
 var $ld$82$0=(($49)|0);
 var $183$0=HEAP32[(($ld$82$0)>>2)];
 var $ld$83$1=(($49+4)|0);
 var $183$1=HEAP32[(($ld$83$1)>>2)];
 var $_sroa_0_0__idx_i=(($155+56)|0);
 var $184=$_sroa_0_0__idx_i;
 var $st$84$0=(($184)|0);
 HEAP32[(($st$84$0)>>2)]=$182$0;
 var $st$85$1=(($184+4)|0);
 HEAP32[(($st$85$1)>>2)]=$182$1;
 var $_sroa_1_8__idx29_i=(($155+64)|0);
 var $185=$_sroa_1_8__idx29_i;
 var $st$86$0=(($185)|0);
 HEAP32[(($st$86$0)>>2)]=$183$0;
 var $st$87$1=(($185+4)|0);
 HEAP32[(($st$87$1)>>2)]=$183$1;
 var $186=(($this+20)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(($this+24)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($187|0)==($189|0);
 if($190){label=31;break;}else{label=28;break;}
 case 28: 
 var $192=($187|0)==0;
 if($192){var $194=0;label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($187)>>2)]=$156;
 var $_pre_i=HEAP32[(($186)>>2)];
 var $194=$_pre_i;label=30;break;
 case 30: 
 var $194;
 var $195=(($194+4)|0);
 HEAP32[(($186)>>2)]=$195;
 label=32;break;
 case 31: 
 var $197=(($this+16)|0);
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($197,$jr_i);
 label=32;break;
 case 32: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e,$pt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $outRec=sp;
 var $1=(($e+100)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)<0;
 if($3){label=2;break;}else{label=15;break;}
 case 2: 
 var $5=__Znwj(32);
 var $6=$5;
 var $7=(($5+4)|0);
 HEAP8[($7)]=0;
 var $8=(($5+8)|0);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0; HEAP32[((($8)+(12))>>2)]=0; HEAP32[((($8)+(16))>>2)]=0; HEAP32[((($8)+(20))>>2)]=0;
 HEAP32[(($outRec)>>2)]=$6;
 var $9=(($this+4)|0);
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($this+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($11|0)==($13|0);
 if($14){label=6;break;}else{label=3;break;}
 case 3: 
 var $16=($11|0)==0;
 if($16){var $18=0;label=5;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$6;
 var $_pre103=HEAP32[(($10)>>2)];
 var $18=$_pre103;label=5;break;
 case 5: 
 var $18;
 var $19=(($18+4)|0);
 HEAP32[(($10)>>2)]=$19;
 var $23=$19;var $22=$6;label=7;break;
 case 6: 
 __ZNSt3__16vectorIPN10ClipperLib6OutRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($9,$outRec);
 var $_pre=HEAP32[(($10)>>2)];
 var $_pre102=HEAP32[(($outRec)>>2)];
 var $23=$_pre;var $22=$_pre102;label=7;break;
 case 7: 
 var $22;
 var $23;
 var $24=(($9)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$23;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=$28>>2;
 var $30=((($29)-(1))|0);
 var $31=(($22)|0);
 HEAP32[(($31)>>2)]=$30;
 HEAP32[(($1)>>2)]=$30;
 var $32=__Znwj(32);
 var $33=$32;
 var $34=(($32+8)|0);
 var $35=(($22+16)|0);
 HEAP32[(($35)>>2)]=$33;
 var $36=(($22+20)|0);
 HEAP32[(($36)>>2)]=$33;
 var $37=$pt;
 assert(16 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];HEAP32[((($34)+(12))>>2)]=HEAP32[((($37)+(12))>>2)];
 var $38=HEAP32[(($31)>>2)];
 var $39=$32;
 HEAP32[(($39)>>2)]=$38;
 var $40=(($32+24)|0);
 var $41=$40;
 HEAP32[(($41)>>2)]=$33;
 var $42=(($32+28)|0);
 var $43=$42;
 HEAP32[(($43)>>2)]=$33;
 var $44=(($22+8)|0);
 var $45=(($this+4)|0);
 var $e_pn_ph_i=$e;var $isHole_0_off0_ph_i=0;label=8;break;
 case 8: 
 var $isHole_0_off0_ph_i;
 var $e_pn_ph_i;
 var $e_pn_i=$e_pn_ph_i;label=9;break;
 case 9: 
 var $e_pn_i;
 var $e2_0_in_i=(($e_pn_i+120)|0);
 var $e2_0_i=HEAP32[(($e2_0_in_i)>>2)];
 var $47=($e2_0_i|0)==0;
 if($47){label=13;break;}else{label=10;break;}
 case 10: 
 var $49=(($e2_0_i+100)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)>-1;
 if($51){label=11;break;}else{var $e_pn_i=$e2_0_i;label=9;break;}
 case 11: 
 var $53=$isHole_0_off0_ph_i^1;
 var $54=HEAP32[(($44)>>2)];
 var $55=($54|0)==0;
 if($55){label=12;break;}else{var $e_pn_ph_i=$e2_0_i;var $isHole_0_off0_ph_i=$53;label=8;break;}
 case 12: 
 var $57=HEAP32[(($45)>>2)];
 var $58=(($57+($50<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP32[(($44)>>2)]=$59;
 var $e_pn_ph_i=$e2_0_i;var $isHole_0_off0_ph_i=$53;label=8;break;
 case 13: 
 if($isHole_0_off0_ph_i){label=14;break;}else{label=41;break;}
 case 14: 
 var $62=(($22+4)|0);
 HEAP8[($62)]=1;
 label=41;break;
 case 15: 
 var $64=(($e+84)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==1;
 var $67=(($this+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+($2<<2))|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+16)|0);
 var $72=HEAP32[(($71)>>2)];
 if($66){label=16;break;}else{label=18;break;}
 case 16: 
 var $74=(($pt)|0);
 var $ld$0$0=(($74)|0);
 var $75$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($74+4)|0);
 var $75$1=HEAP32[(($ld$1$1)>>2)];
 var $76=(($72+8)|0);
 var $ld$2$0=(($76)|0);
 var $77$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($76+4)|0);
 var $77$1=HEAP32[(($ld$3$1)>>2)];
 var $78=(($75$0|0) == ($77$0|0)) & (($75$1|0) == ($77$1|0));
 if($78){label=17;break;}else{var $96$1=$75$1;var $96$0=$75$0;label=20;break;}
 case 17: 
 var $79=(($pt+8)|0);
 var $ld$4$0=(($79)|0);
 var $80$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($79+4)|0);
 var $80$1=HEAP32[(($ld$5$1)>>2)];
 var $81=(($72+16)|0);
 var $ld$6$0=(($81)|0);
 var $82$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($81+4)|0);
 var $82$1=HEAP32[(($ld$7$1)>>2)];
 var $83=(($80$0|0) == ($82$0|0)) & (($80$1|0) == ($82$1|0));
 if($83){label=41;break;}else{var $96$1=$75$1;var $96$0=$75$0;label=20;break;}
 case 18: 
 var $84=(($72+28)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($pt)|0);
 var $ld$8$0=(($86)|0);
 var $87$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($86+4)|0);
 var $87$1=HEAP32[(($ld$9$1)>>2)];
 var $88=(($85+8)|0);
 var $ld$10$0=(($88)|0);
 var $89$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($88+4)|0);
 var $89$1=HEAP32[(($ld$11$1)>>2)];
 var $90=(($87$0|0) == ($89$0|0)) & (($87$1|0) == ($89$1|0));
 if($90){label=19;break;}else{var $96$1=$87$1;var $96$0=$87$0;label=20;break;}
 case 19: 
 var $91=(($pt+8)|0);
 var $ld$12$0=(($91)|0);
 var $92$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($91+4)|0);
 var $92$1=HEAP32[(($ld$13$1)>>2)];
 var $93=(($85+16)|0);
 var $ld$14$0=(($93)|0);
 var $94$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($93+4)|0);
 var $94$1=HEAP32[(($ld$15$1)>>2)];
 var $95=(($92$0|0) == ($94$0|0)) & (($92$1|0) == ($94$1|0));
 if($95){label=41;break;}else{var $96$1=$87$1;var $96$0=$87$0;label=20;break;}
 case 20: 
 var $96$0;
 var $96$1;
 var $97=(($70+28)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$98|$65;
 var $100=($99|0)==($98|0);
 if($100){label=36;break;}else{label=21;break;}
 case 21: 
 var $102=($98|0)==0;
 if($102){label=22;break;}else{label=26;break;}
 case 22: 
 var $104=(($pt+8)|0);
 var $ld$16$0=(($104)|0);
 var $105$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($104+4)|0);
 var $105$1=HEAP32[(($ld$17$1)>>2)];
 var $106=(($72+16)|0);
 var $ld$18$0=(($106)|0);
 var $107$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($106+4)|0);
 var $107$1=HEAP32[(($ld$19$1)>>2)];
 var $108=(($105$0|0) == ($107$0|0)) & (($105$1|0) == ($107$1|0));
 if($108){label=23;break;}else{label=26;break;}
 case 23: 
 var $110=(($72+8)|0);
 var $ld$20$0=(($110)|0);
 var $111$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($110+4)|0);
 var $111$1=HEAP32[(($ld$21$1)>>2)];
 if($66){label=24;break;}else{label=25;break;}
 case 24: 
 var $$etemp$22$0=1;
 var $$etemp$22$1=0;
 var $113$0=_i64Add($111$0,$111$1,$$etemp$22$0,$$etemp$22$1);var $113$1=tempRet0;
 var $114=(($96$0|0) == ($113$0|0)) & (($96$1|0) == ($113$1|0));
 if($114){label=41;break;}else{label=26;break;}
 case 25: 
 var $$etemp$23$0=-1;
 var $$etemp$23$1=-1;
 var $116$0=_i64Add($111$0,$111$1,$$etemp$23$0,$$etemp$23$1);var $116$1=tempRet0;
 var $117=(($96$0|0) == ($116$0|0)) & (($96$1|0) == ($116$1|0));
 if($117){label=41;break;}else{label=26;break;}
 case 26: 
 HEAP32[(($97)>>2)]=$99;
 var $119=($99|0)==3;
 if($119){label=27;break;}else{label=36;break;}
 case 27: 
 if($66){label=28;break;}else{label=32;break;}
 case 28: 
 var $122=(($72+24)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($72+16)|0);
 var $ld$24$0=(($124)|0);
 var $125$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($124+4)|0);
 var $125$1=HEAP32[(($ld$25$1)>>2)];
 var $126=(($123+16)|0);
 var $ld$26$0=(($126)|0);
 var $127$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($126+4)|0);
 var $127$1=HEAP32[(($ld$27$1)>>2)];
 var $128=(($125$0|0) == ($127$0|0)) & (($125$1|0) == ($127$1|0));
 if($128){label=36;break;}else{label=29;break;}
 case 29: 
 var $130=(($pt+8)|0);
 var $ld$28$0=(($130)|0);
 var $131$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($130+4)|0);
 var $131$1=HEAP32[(($ld$29$1)>>2)];
 var $132=(($125$0|0) == ($131$0|0)) & (($125$1|0) == ($131$1|0));
 if($132){label=36;break;}else{label=30;break;}
 case 30: 
 var $134=(($72+8)|0);
 var $ld$30$0=(($134)|0);
 var $135$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($134+4)|0);
 var $135$1=HEAP32[(($ld$31$1)>>2)];
 var $136=(($pt)|0);
 var $ld$32$0=(($136)|0);
 var $137$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($136+4)|0);
 var $137$1=HEAP32[(($ld$33$1)>>2)];
 var $138$0=_i64Subtract($135$0,$135$1,$137$0,$137$1);var $138$1=tempRet0;
 var $139$0=_i64Subtract($125$0,$125$1,$131$0,$131$1);var $139$1=tempRet0;
 var $140$0=___divdi3($138$0,$138$1,$139$0,$139$1);var $140$1=tempRet0;
 var $141=(($123+8)|0);
 var $ld$34$0=(($141)|0);
 var $142$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($141+4)|0);
 var $142$1=HEAP32[(($ld$35$1)>>2)];
 var $143$0=_i64Subtract($135$0,$135$1,$142$0,$142$1);var $143$1=tempRet0;
 var $144$0=_i64Subtract($125$0,$125$1,$127$0,$127$1);var $144$1=tempRet0;
 var $145$0=___divdi3($143$0,$143$1,$144$0,$144$1);var $145$1=tempRet0;
 var $146=(($140$1|0) < ($145$1|0)) | (((($140$1|0) == ($145$1|0) & ($140$0>>>0) <  ($145$0>>>0))));
 if($146){label=31;break;}else{label=36;break;}
 case 31: 
 var $148=(($70+24)|0);
 HEAP32[(($148)>>2)]=$72;
 label=36;break;
 case 32: 
 var $150=(($72+28)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+28)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+16)|0);
 var $ld$36$0=(($154)|0);
 var $155$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($154+4)|0);
 var $155$1=HEAP32[(($ld$37$1)>>2)];
 var $156=(($153+16)|0);
 var $ld$38$0=(($156)|0);
 var $157$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($156+4)|0);
 var $157$1=HEAP32[(($ld$39$1)>>2)];
 var $158=(($155$0|0) == ($157$0|0)) & (($155$1|0) == ($157$1|0));
 if($158){label=36;break;}else{label=33;break;}
 case 33: 
 var $160=(($pt+8)|0);
 var $ld$40$0=(($160)|0);
 var $161$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($160+4)|0);
 var $161$1=HEAP32[(($ld$41$1)>>2)];
 var $162=(($155$0|0) == ($161$0|0)) & (($155$1|0) == ($161$1|0));
 if($162){label=36;break;}else{label=34;break;}
 case 34: 
 var $164=(($151+8)|0);
 var $ld$42$0=(($164)|0);
 var $165$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($164+4)|0);
 var $165$1=HEAP32[(($ld$43$1)>>2)];
 var $166=(($pt)|0);
 var $ld$44$0=(($166)|0);
 var $167$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($166+4)|0);
 var $167$1=HEAP32[(($ld$45$1)>>2)];
 var $168$0=_i64Subtract($165$0,$165$1,$167$0,$167$1);var $168$1=tempRet0;
 var $169$0=_i64Subtract($155$0,$155$1,$161$0,$161$1);var $169$1=tempRet0;
 var $170$0=___divdi3($168$0,$168$1,$169$0,$169$1);var $170$1=tempRet0;
 var $171=(($153+8)|0);
 var $ld$46$0=(($171)|0);
 var $172$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($171+4)|0);
 var $172$1=HEAP32[(($ld$47$1)>>2)];
 var $173$0=_i64Subtract($165$0,$165$1,$172$0,$172$1);var $173$1=tempRet0;
 var $174$0=_i64Subtract($155$0,$155$1,$157$0,$157$1);var $174$1=tempRet0;
 var $175$0=___divdi3($173$0,$173$1,$174$0,$174$1);var $175$1=tempRet0;
 var $176=(($170$1|0) > ($175$1|0)) | (((($170$1|0) == ($175$1|0) & ($170$0>>>0) >  ($175$0>>>0))));
 if($176){label=35;break;}else{label=36;break;}
 case 35: 
 var $178=(($70+24)|0);
 HEAP32[(($178)>>2)]=$151;
 label=36;break;
 case 36: 
 var $180=__Znwj(32);
 var $181=$180;
 var $182=(($180+8)|0);
 var $183=$pt;
 assert(16 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($183)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($183)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($183)+(8))>>2)];HEAP32[((($182)+(12))>>2)]=HEAP32[((($183)+(12))>>2)];
 var $184=(($70)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=$180;
 HEAP32[(($186)>>2)]=$185;
 var $187=(($180+16)|0);
 var $188=$187;
 var $ld$48$0=(($188)|0);
 var $189$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($188+4)|0);
 var $189$1=HEAP32[(($ld$49$1)>>2)];
 var $190=(($70+20)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+16)|0);
 var $ld$50$0=(($192)|0);
 var $193$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($192+4)|0);
 var $193$1=HEAP32[(($ld$51$1)>>2)];
 var $194=(($189$0|0) == ($193$0|0)) & (($189$1|0) == ($193$1|0));
 if($194){label=37;break;}else{label=39;break;}
 case 37: 
 var $196=$182;
 var $ld$52$0=(($196)|0);
 var $197$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($196+4)|0);
 var $197$1=HEAP32[(($ld$53$1)>>2)];
 var $198=(($191+8)|0);
 var $ld$54$0=(($198)|0);
 var $199$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($198+4)|0);
 var $199$1=HEAP32[(($ld$55$1)>>2)];
 var $200=(($197$1|0) < ($199$1|0)) | (((($197$1|0) == ($199$1|0) & ($197$0>>>0) <  ($199$0>>>0))));
 if($200){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($190)>>2)]=$181;
 label=39;break;
 case 39: 
 var $203=(($180+24)|0);
 var $204=$203;
 HEAP32[(($204)>>2)]=$72;
 var $205=(($72+28)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($180+28)|0);
 var $208=$207;
 HEAP32[(($208)>>2)]=$206;
 var $209=(($206+24)|0);
 HEAP32[(($209)>>2)]=$181;
 HEAP32[(($205)>>2)]=$181;
 if($66){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($71)>>2)]=$181;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper7AddJoinEPNS_5TEdgeES2_ii($this,$e1,$e2,$e1OutIdx,$e2OutIdx){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $jr=sp;
 var $1=__Znwj(80);
 var $2=$1;
 var $3=(($1+40)|0);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0; HEAP32[((($1)+(16))>>2)]=0; HEAP32[((($1)+(20))>>2)]=0; HEAP32[((($1)+(24))>>2)]=0; HEAP32[((($1)+(28))>>2)]=0;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; HEAP32[((($3)+(12))>>2)]=0; HEAP32[((($3)+(16))>>2)]=0; HEAP32[((($3)+(20))>>2)]=0; HEAP32[((($3)+(24))>>2)]=0; HEAP32[((($3)+(28))>>2)]=0;
 HEAP32[(($jr)>>2)]=$2;
 var $4=($e1OutIdx|0)>-1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=(($1+32)|0);
 var $7=$6;
 HEAP32[(($7)>>2)]=$e1OutIdx;
 label=4;break;
 case 3: 
 var $9=(($e1+100)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1+32)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=$10;
 label=4;break;
 case 4: 
 var $14=(($e1+16)|0);
 var $ld$0$0=(($14)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $16=(($e1+24)|0);
 var $ld$2$0=(($16)|0);
 var $17$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$3$1)>>2)];
 var $_sroa_036_0__idx=$1;
 var $st$4$0=(($_sroa_036_0__idx)|0);
 HEAP32[(($st$4$0)>>2)]=$15$0;
 var $st$5$1=(($_sroa_036_0__idx+4)|0);
 HEAP32[(($st$5$1)>>2)]=$15$1;
 var $_sroa_137_8__idx38=(($1+8)|0);
 var $18=$_sroa_137_8__idx38;
 var $st$6$0=(($18)|0);
 HEAP32[(($st$6$0)>>2)]=$17$0;
 var $st$7$1=(($18+4)|0);
 HEAP32[(($st$7$1)>>2)]=$17$1;
 var $19=(($e1+32)|0);
 var $ld$8$0=(($19)|0);
 var $20$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($19+4)|0);
 var $20$1=HEAP32[(($ld$9$1)>>2)];
 var $21=(($e1+40)|0);
 var $ld$10$0=(($21)|0);
 var $22$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($21+4)|0);
 var $22$1=HEAP32[(($ld$11$1)>>2)];
 var $_sroa_033_0__idx=(($1+16)|0);
 var $23=$_sroa_033_0__idx;
 var $st$12$0=(($23)|0);
 HEAP32[(($st$12$0)>>2)]=$20$0;
 var $st$13$1=(($23+4)|0);
 HEAP32[(($st$13$1)>>2)]=$20$1;
 var $_sroa_134_8__idx35=(($1+24)|0);
 var $24=$_sroa_134_8__idx35;
 var $st$14$0=(($24)|0);
 HEAP32[(($st$14$0)>>2)]=$22$0;
 var $st$15$1=(($24+4)|0);
 HEAP32[(($st$15$1)>>2)]=$22$1;
 var $25=($e2OutIdx|0)>-1;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($1+72)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=$e2OutIdx;
 label=7;break;
 case 6: 
 var $30=(($e2+100)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1+72)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=$31;
 label=7;break;
 case 7: 
 var $35=(($e2+16)|0);
 var $ld$16$0=(($35)|0);
 var $36$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($35+4)|0);
 var $36$1=HEAP32[(($ld$17$1)>>2)];
 var $37=(($e2+24)|0);
 var $ld$18$0=(($37)|0);
 var $38$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$19$1)>>2)];
 var $_sroa_030_0__idx=(($1+40)|0);
 var $39=$_sroa_030_0__idx;
 var $st$20$0=(($39)|0);
 HEAP32[(($st$20$0)>>2)]=$36$0;
 var $st$21$1=(($39+4)|0);
 HEAP32[(($st$21$1)>>2)]=$36$1;
 var $_sroa_131_8__idx32=(($1+48)|0);
 var $40=$_sroa_131_8__idx32;
 var $st$22$0=(($40)|0);
 HEAP32[(($st$22$0)>>2)]=$38$0;
 var $st$23$1=(($40+4)|0);
 HEAP32[(($st$23$1)>>2)]=$38$1;
 var $41=(($e2+32)|0);
 var $ld$24$0=(($41)|0);
 var $42$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($41+4)|0);
 var $42$1=HEAP32[(($ld$25$1)>>2)];
 var $43=(($e2+40)|0);
 var $ld$26$0=(($43)|0);
 var $44$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($43+4)|0);
 var $44$1=HEAP32[(($ld$27$1)>>2)];
 var $_sroa_0_0__idx=(($1+56)|0);
 var $45=$_sroa_0_0__idx;
 var $st$28$0=(($45)|0);
 HEAP32[(($st$28$0)>>2)]=$42$0;
 var $st$29$1=(($45+4)|0);
 HEAP32[(($st$29$1)>>2)]=$42$1;
 var $_sroa_1_8__idx29=(($1+64)|0);
 var $46=$_sroa_1_8__idx29;
 var $st$30$0=(($46)|0);
 HEAP32[(($st$30$0)>>2)]=$44$0;
 var $st$31$1=(($46+4)|0);
 HEAP32[(($st$31$1)>>2)]=$44$1;
 var $47=(($this+20)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($this+24)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=11;break;}else{label=8;break;}
 case 8: 
 var $53=($48|0)==0;
 if($53){var $55=0;label=10;break;}else{label=9;break;}
 case 9: 
 HEAP32[(($48)>>2)]=$2;
 var $_pre=HEAP32[(($47)>>2)];
 var $55=$_pre;label=10;break;
 case 10: 
 var $55;
 var $56=(($55+4)|0);
 HEAP32[(($47)>>2)]=$56;
 label=12;break;
 case 11: 
 var $58=(($this+16)|0);
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($58,$jr);
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper13AppendPolygonEPNS_5TEdgeES2_($this,$e1,$e2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($e1+100)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+($2<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($e2+100)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+($8<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $_05_i=$6;label=2;break;
 case 2: 
 var $_05_i;
 var $12=(($_05_i+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==($10|0);
 if($14){var $holeStateRec_0=$10;label=13;break;}else{label=3;break;}
 case 3: 
 var $16=($13|0)==0;
 if($16){var $_05_i105=$10;label=4;break;}else{var $_05_i=$13;label=2;break;}
 case 4: 
 var $_05_i105;
 var $17=(($_05_i105+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==($6|0);
 if($19){var $holeStateRec_0=$6;label=13;break;}else{label=5;break;}
 case 5: 
 var $21=($18|0)==0;
 if($21){label=6;break;}else{var $_05_i105=$18;label=4;break;}
 case 6: 
 var $22=(($6+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($10+20)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($23+16)|0);
 var $ld$0$0=(($26)|0);
 var $27$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($26+4)|0);
 var $27$1=HEAP32[(($ld$1$1)>>2)];
 var $28=(($25+16)|0);
 var $ld$2$0=(($28)|0);
 var $29$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$3$1)>>2)];
 var $30=(($27$1|0) > ($29$1|0)) | (((($27$1|0) == ($29$1|0) & ($27$0>>>0) >  ($29$0>>>0))));
 if($30){var $holeStateRec_0=$6;label=13;break;}else{label=7;break;}
 case 7: 
 var $32=(($27$1|0) < ($29$1|0)) | (((($27$1|0) == ($29$1|0) & ($27$0>>>0) <  ($29$0>>>0))));
 if($32){var $holeStateRec_0=$10;label=13;break;}else{label=8;break;}
 case 8: 
 var $34=(($23+8)|0);
 var $ld$4$0=(($34)|0);
 var $35$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$5$1)>>2)];
 var $36=(($25+8)|0);
 var $ld$6$0=(($36)|0);
 var $37$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($36+4)|0);
 var $37$1=HEAP32[(($ld$7$1)>>2)];
 var $38=(($35$1|0) < ($37$1|0)) | (((($35$1|0) == ($37$1|0) & ($35$0>>>0) <  ($37$0>>>0))));
 if($38){var $holeStateRec_0=$6;label=13;break;}else{label=9;break;}
 case 9: 
 var $40=(($35$1|0) > ($37$1|0)) | (((($35$1|0) == ($37$1|0) & ($35$0>>>0) >  ($37$0>>>0))));
 if($40){var $holeStateRec_0=$10;label=13;break;}else{label=10;break;}
 case 10: 
 var $42=(($23+24)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==($23|0);
 if($44){var $holeStateRec_0=$10;label=13;break;}else{label=11;break;}
 case 11: 
 var $46=(($25+24)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==($25|0);
 if($48){var $holeStateRec_0=$6;label=13;break;}else{label=12;break;}
 case 12: 
 var $50=__ZN10ClipperLib15FirstIsBottomPtEPKNS_5OutPtES2_($23,$25);
 var $outRec1_outRec2_i=$50?$6:$10;
 var $holeStateRec_0=$outRec1_outRec2_i;label=13;break;
 case 13: 
 var $holeStateRec_0;
 var $51=(($6+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+28)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($10+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($e1+84)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==1;
 var $62=(($e2+84)|0);
 var $63=HEAP32[(($62)>>2)];
 if($61){label=14;break;}else{label=21;break;}
 case 14: 
 var $65=($63|0)==1;
 if($65){label=15;break;}else{label=19;break;}
 case 15: 
 var $67=($56|0)==0;
 if($67){label=18;break;}else{var $pp1_0_i101=$56;var $68=$58;label=16;break;}
 case 16: 
 var $68;
 var $pp1_0_i101;
 var $69=(($pp1_0_i101+24)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($pp1_0_i101+28)|0);
 HEAP32[(($69)>>2)]=$68;
 HEAP32[(($71)>>2)]=$70;
 var $72=($70|0)==($56|0);
 if($72){label=18;break;}else{label=17;break;}
 case 17: 
 var $_phi_trans_insert120=(($70+28)|0);
 var $_pre121=HEAP32[(($_phi_trans_insert120)>>2)];
 var $pp1_0_i101=$70;var $68=$_pre121;label=16;break;
 case 18: 
 var $73=(($56+24)|0);
 HEAP32[(($73)>>2)]=$52;
 HEAP32[(($53)>>2)]=$56;
 var $74=(($54+24)|0);
 HEAP32[(($74)>>2)]=$58;
 var $75=(($58+28)|0);
 HEAP32[(($75)>>2)]=$54;
 var $storemerge=$58;label=20;break;
 case 19: 
 var $77=(($58+24)|0);
 HEAP32[(($77)>>2)]=$52;
 HEAP32[(($53)>>2)]=$58;
 HEAP32[(($57)>>2)]=$54;
 var $78=(($54+24)|0);
 HEAP32[(($78)>>2)]=$56;
 var $storemerge=$56;label=20;break;
 case 20: 
 var $storemerge;
 HEAP32[(($51)>>2)]=$storemerge;
 var $side_0=1;label=27;break;
 case 21: 
 var $81=($63|0)==2;
 if($81){label=22;break;}else{label=26;break;}
 case 22: 
 var $83=($56|0)==0;
 if($83){label=25;break;}else{var $pp1_0_i=$56;var $84=$58;label=23;break;}
 case 23: 
 var $84;
 var $pp1_0_i;
 var $85=(($pp1_0_i+24)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($pp1_0_i+28)|0);
 HEAP32[(($85)>>2)]=$84;
 HEAP32[(($87)>>2)]=$86;
 var $88=($86|0)==($56|0);
 if($88){label=25;break;}else{label=24;break;}
 case 24: 
 var $_phi_trans_insert122=(($86+28)|0);
 var $_pre123=HEAP32[(($_phi_trans_insert122)>>2)];
 var $pp1_0_i=$86;var $84=$_pre123;label=23;break;
 case 25: 
 var $89=(($54+24)|0);
 HEAP32[(($89)>>2)]=$58;
 var $90=(($58+28)|0);
 HEAP32[(($90)>>2)]=$54;
 var $91=(($56+24)|0);
 HEAP32[(($91)>>2)]=$52;
 HEAP32[(($53)>>2)]=$56;
 var $side_0=2;label=27;break;
 case 26: 
 var $93=(($54+24)|0);
 HEAP32[(($93)>>2)]=$56;
 HEAP32[(($57)>>2)]=$54;
 HEAP32[(($53)>>2)]=$58;
 var $94=(($58+24)|0);
 HEAP32[(($94)>>2)]=$52;
 var $side_0=2;label=27;break;
 case 27: 
 var $side_0;
 var $96=($holeStateRec_0|0)==($10|0);
 var $97=(($10+20)|0);
 if($96){label=28;break;}else{label=31;break;}
 case 28: 
 var $99=HEAP32[(($97)>>2)];
 var $100=(($6+20)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=(($6)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($99)|0);
 HEAP32[(($103)>>2)]=$102;
 var $104=(($10+8)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105|0)==($6|0);
 if($106){label=30;break;}else{label=29;break;}
 case 29: 
 var $108=(($6+8)|0);
 HEAP32[(($108)>>2)]=$105;
 label=30;break;
 case 30: 
 var $110=(($10+4)|0);
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($6+4)|0);
 HEAP8[($113)]=$112;
 label=31;break;
 case 31: 
 HEAP32[(($55)>>2)]=0;
 HEAP32[(($97)>>2)]=0;
 var $114=(($10+12)|0);
 HEAP32[(($114)>>2)]=$6;
 var $115=HEAP32[(($1)>>2)];
 var $116=HEAP32[(($7)>>2)];
 HEAP32[(($1)>>2)]=-1;
 HEAP32[(($7)>>2)]=-1;
 var $117=(($this+48)|0);
 var $e_0_in=$117;label=32;break;
 case 32: 
 var $e_0_in;
 var $e_0=HEAP32[(($e_0_in)>>2)];
 var $119=($e_0|0)==0;
 if($119){label=35;break;}else{label=33;break;}
 case 33: 
 var $121=(($e_0+100)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($122|0)==($116|0);
 var $124=(($e_0+116)|0);
 if($123){label=34;break;}else{var $e_0_in=$124;label=32;break;}
 case 34: 
 HEAP32[(($121)>>2)]=$115;
 var $126=(($e_0+84)|0);
 HEAP32[(($126)>>2)]=$side_0;
 label=35;break;
 case 35: 
 var $127=(($this+20)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($this+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=36;break;}else{var $i_0110=0;var $137=$130;label=37;break;}
 case 36: 
 var $132=(($this+32)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($this+28)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($133|0)==($135|0);
 if($136){label=45;break;}else{var $i1_0108=0;var $160=$135;var $159=$133;label=42;break;}
 case 37: 
 var $137;
 var $i_0110;
 var $138=(($137+($i_0110<<2))|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($139+32)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($141|0)==($116|0);
 if($142){label=38;break;}else{var $146=$137;var $145=$139;label=39;break;}
 case 38: 
 HEAP32[(($140)>>2)]=$115;
 var $_pre116=HEAP32[(($129)>>2)];
 var $_phi_trans_insert=(($_pre116+($i_0110<<2))|0);
 var $_pre117=HEAP32[(($_phi_trans_insert)>>2)];
 var $146=$_pre116;var $145=$_pre117;label=39;break;
 case 39: 
 var $145;
 var $146;
 var $147=(($145+72)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)==($116|0);
 if($149){label=40;break;}else{var $151=$146;label=41;break;}
 case 40: 
 HEAP32[(($147)>>2)]=$115;
 var $_pre118=HEAP32[(($129)>>2)];
 var $151=$_pre118;label=41;break;
 case 41: 
 var $151;
 var $152=((($i_0110)+(1))|0);
 var $153=HEAP32[(($127)>>2)];
 var $154=$153;
 var $155=$151;
 var $156=((($154)-($155))|0);
 var $157=$156>>2;
 var $158=($152>>>0)<($157>>>0);
 if($158){var $i_0110=$152;var $137=$151;label=37;break;}else{label=36;break;}
 case 42: 
 var $159;
 var $160;
 var $i1_0108;
 var $161=(($160+($i1_0108<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+4)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($116|0);
 if($165){label=43;break;}else{var $169=$159;var $168=$160;label=44;break;}
 case 43: 
 HEAP32[(($163)>>2)]=$115;
 var $_pre=HEAP32[(($132)>>2)];
 var $_pre115=HEAP32[(($134)>>2)];
 var $169=$_pre;var $168=$_pre115;label=44;break;
 case 44: 
 var $168;
 var $169;
 var $170=((($i1_0108)+(1))|0);
 var $171=$169;
 var $172=$168;
 var $173=((($171)-($172))|0);
 var $174=$173>>2;
 var $175=($170>>>0)<($174>>>0);
 if($175){var $i1_0108=$170;var $160=$168;var $159=$169;label=42;break;}else{label=45;break;}
 case 45: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$e1,$e2,$pt,$protects){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$protects&1;
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $_off0=0;label=5;break;}
 case 2: 
 var $4=(($e1+112)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_off0=0;label=5;break;}
 case 3: 
 var $8=(($e1+32)|0);
 var $ld$0$0=(($8)|0);
 var $9$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$1$1)>>2)];
 var $10=(($pt)|0);
 var $ld$2$0=(($10)|0);
 var $11$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($10+4)|0);
 var $11$1=HEAP32[(($ld$3$1)>>2)];
 var $12=(($9$0|0) == ($11$0|0)) & (($9$1|0) == ($11$1|0));
 if($12){label=4;break;}else{var $_off0=0;label=5;break;}
 case 4: 
 var $14=(($e1+40)|0);
 var $ld$4$0=(($14)|0);
 var $15$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$5$1)>>2)];
 var $16=(($pt+8)|0);
 var $ld$6$0=(($16)|0);
 var $17$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$7$1)>>2)];
 var $18=(($15$0|0) == ($17$0|0)) & (($15$1|0) == ($17$1|0));
 var $_off0=$18;label=5;break;
 case 5: 
 var $_off0;
 var $20=$protects&2;
 var $21=($20|0)==0;
 if($21){label=6;break;}else{var $_off0141=0;label=9;break;}
 case 6: 
 var $23=(($e2+112)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=7;break;}else{var $_off0141=0;label=9;break;}
 case 7: 
 var $27=(($e2+32)|0);
 var $ld$8$0=(($27)|0);
 var $28$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$9$1)>>2)];
 var $29=(($pt)|0);
 var $ld$10$0=(($29)|0);
 var $30$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$11$1)>>2)];
 var $31=(($28$0|0) == ($30$0|0)) & (($28$1|0) == ($30$1|0));
 if($31){label=8;break;}else{var $_off0141=0;label=9;break;}
 case 8: 
 var $33=(($e2+40)|0);
 var $ld$12$0=(($33)|0);
 var $34$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($33+4)|0);
 var $34$1=HEAP32[(($ld$13$1)>>2)];
 var $35=(($pt+8)|0);
 var $ld$14$0=(($35)|0);
 var $36$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($35+4)|0);
 var $36$1=HEAP32[(($ld$15$1)>>2)];
 var $37=(($34$0|0) == ($36$0|0)) & (($34$1|0) == ($36$1|0));
 var $_off0141=$37;label=9;break;
 case 9: 
 var $_off0141;
 var $39=(($e1+100)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)>-1;
 var $42=(($e2+100)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($e1+80)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($e2+80)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=10;break;}else{label=15;break;}
 case 10: 
 var $50=($45|0)==0;
 var $51=(($this+68)|0);
 var $52=(($this+64)|0);
 var $_0_in_in_i=$50?$51:$52;
 var $_0_in_i=HEAP32[(($_0_in_in_i)>>2)];
 var $_0_i=($_0_in_i|0)==0;
 var $53=(($e1+92)|0);
 var $54=HEAP32[(($53)>>2)];
 if($_0_i){label=11;break;}else{label=12;break;}
 case 11: 
 var $56=(($e2+92)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[(($53)>>2)]=$57;
 HEAP32[(($56)>>2)]=$54;
 label=21;break;
 case 12: 
 var $59=(($e2+88)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=((($60)+($54))|0);
 var $62=($61|0)==0;
 var $63=(((-$54))|0);
 var $storemerge=$62?$63:$61;
 HEAP32[(($53)>>2)]=$storemerge;
 var $64=(($e2+92)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($e1+88)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($65|0)==($67|0);
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 var $70=(((-$65))|0);
 HEAP32[(($64)>>2)]=$70;
 label=21;break;
 case 14: 
 var $72=((($65)-($67))|0);
 HEAP32[(($64)>>2)]=$72;
 label=21;break;
 case 15: 
 var $74=($47|0)==0;
 var $75=(($this+68)|0);
 var $76=(($this+64)|0);
 var $_0_in_in_i159=$74?$75:$76;
 var $_0_in_i160=HEAP32[(($_0_in_in_i159)>>2)];
 var $_0_i161=($_0_in_i160|0)==0;
 if($_0_i161){label=17;break;}else{label=16;break;}
 case 16: 
 var $78=(($e2+88)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($e1+96)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=((($81)+($79))|0);
 HEAP32[(($80)>>2)]=$82;
 label=18;break;
 case 17: 
 var $84=(($e1+96)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==0;
 var $87=($86&1);
 HEAP32[(($84)>>2)]=$87;
 label=18;break;
 case 18: 
 var $89=($45|0)==0;
 var $_0_in_in_i162=$89?$75:$76;
 var $_0_in_i163=HEAP32[(($_0_in_in_i162)>>2)];
 var $_0_i164=($_0_in_i163|0)==0;
 if($_0_i164){label=20;break;}else{label=19;break;}
 case 19: 
 var $91=(($e1+88)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($e2+96)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=((($94)-($92))|0);
 HEAP32[(($93)>>2)]=$95;
 label=21;break;
 case 20: 
 var $97=(($e2+96)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 var $100=($99&1);
 HEAP32[(($97)>>2)]=$100;
 label=21;break;
 case 21: 
 var $102=HEAP32[(($44)>>2)];
 var $103=($102|0)==0;
 if($103){label=22;break;}else{label=23;break;}
 case 22: 
 var $105=(($this+68)|0);
 var $106=(($this+64)|0);
 var $e1FillType2_0_in=$106;var $e1FillType_0_in=$105;label=24;break;
 case 23: 
 var $108=(($this+64)|0);
 var $109=(($this+68)|0);
 var $e1FillType2_0_in=$109;var $e1FillType_0_in=$108;label=24;break;
 case 24: 
 var $e1FillType_0_in;
 var $e1FillType2_0_in;
 var $e1FillType2_0=HEAP32[(($e1FillType2_0_in)>>2)];
 var $e1FillType_0=HEAP32[(($e1FillType_0_in)>>2)];
 var $111=HEAP32[(($46)>>2)];
 var $112=($111|0)==0;
 if($112){label=25;break;}else{label=26;break;}
 case 25: 
 var $114=(($this+68)|0);
 var $115=(($this+64)|0);
 var $e2FillType2_0_in=$115;var $e2FillType_0_in=$114;label=27;break;
 case 26: 
 var $117=(($this+64)|0);
 var $118=(($this+68)|0);
 var $e2FillType2_0_in=$118;var $e2FillType_0_in=$117;label=27;break;
 case 27: 
 var $e2FillType_0_in;
 var $e2FillType2_0_in;
 var $e2FillType2_0=HEAP32[(($e2FillType2_0_in)>>2)];
 var $e2FillType_0=HEAP32[(($e2FillType_0_in)>>2)];
 if(($e1FillType_0|0)==2){ label=28;break;}else if(($e1FillType_0|0)==3){ label=29;break;}else{label=30;break;}
 case 28: 
 var $121=(($e1+92)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123$0=$122;
 var $123$1=(((($122|0)<0))|0)?-1:0;
 var $e1Wc_0$1=$123$1;var $e1Wc_0$0=$123$0;label=31;break;
 case 29: 
 var $125=(($e1+92)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(((-$126))|0);
 var $128$0=$127;
 var $128$1=(((($127|0)<0))|0)?-1:0;
 var $e1Wc_0$1=$128$1;var $e1Wc_0$0=$128$0;label=31;break;
 case 30: 
 var $130=(($e1+92)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132$0=$131;
 var $132$1=(((($131|0)<0))|0)?-1:0;
 var $133=($131|0)<0;
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $134$0=_i64Subtract($$etemp$16$0,$$etemp$16$1,$132$0,$132$1);var $134$1=tempRet0;
 var $135$0=$133?$134$0:$132$0;
 var $135$1=$133?$134$1:$132$1;
 var $e1Wc_0$1=$135$1;var $e1Wc_0$0=$135$0;label=31;break;
 case 31: 
 var $e1Wc_0$0;
 var $e1Wc_0$1;
 if(($e2FillType_0|0)==2){ label=32;break;}else if(($e2FillType_0|0)==3){ label=33;break;}else{label=34;break;}
 case 32: 
 var $138=(($e2+92)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140$0=$139;
 var $140$1=(((($139|0)<0))|0)?-1:0;
 var $e2Wc_0$1=$140$1;var $e2Wc_0$0=$140$0;label=35;break;
 case 33: 
 var $142=(($e2+92)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(((-$143))|0);
 var $145$0=$144;
 var $145$1=(((($144|0)<0))|0)?-1:0;
 var $e2Wc_0$1=$145$1;var $e2Wc_0$0=$145$0;label=35;break;
 case 34: 
 var $147=(($e2+92)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149$0=$148;
 var $149$1=(((($148|0)<0))|0)?-1:0;
 var $150=($148|0)<0;
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $151$0=_i64Subtract($$etemp$17$0,$$etemp$17$1,$149$0,$149$1);var $151$1=tempRet0;
 var $152$0=$150?$151$0:$149$0;
 var $152$1=$150?$151$1:$149$1;
 var $e2Wc_0$1=$152$1;var $e2Wc_0$0=$152$0;label=35;break;
 case 35: 
 var $e2Wc_0$0;
 var $e2Wc_0$1;
 var $_not=$41^1;
 var $154=($43|0)<0;
 var $or_cond=$154|$_not;
 if($or_cond){label=45;break;}else{label=36;break;}
 case 36: 
 var $brmerge=$_off0|$_off0141;
 var $$etemp$18$0=1;
 var $$etemp$18$1=0;
 var $156=(($e1Wc_0$1>>>0) > ($$etemp$18$1>>>0)) | (((($e1Wc_0$1>>>0) == ($$etemp$18$1>>>0) & ($e1Wc_0$0>>>0) >  ($$etemp$18$0>>>0))));
 var $or_cond142=$brmerge|$156;
 var $$etemp$19$0=1;
 var $$etemp$19$1=0;
 var $157=(($e2Wc_0$1>>>0) > ($$etemp$19$1>>>0)) | (((($e2Wc_0$1>>>0) == ($$etemp$19$1>>>0) & ($e2Wc_0$0>>>0) >  ($$etemp$19$0>>>0))));
 var $or_cond143=$or_cond142|$157;
 if($or_cond143){label=39;break;}else{label=37;break;}
 case 37: 
 var $159=($102|0)==($111|0);
 if($159){label=44;break;}else{label=38;break;}
 case 38: 
 var $161=(($this+40)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==3;
 if($163){label=44;break;}else{label=39;break;}
 case 39: 
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e1,$pt);
 var $165=HEAP32[(($39)>>2)];
 var $166=HEAP32[(($42)>>2)];
 var $167=($165|0)==($166|0);
 if($167){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($39)>>2)]=-1;
 HEAP32[(($42)>>2)]=-1;
 label=78;break;
 case 41: 
 var $170=($165|0)<($166|0);
 if($170){label=42;break;}else{label=43;break;}
 case 42: 
 __ZN10ClipperLib7Clipper13AppendPolygonEPNS_5TEdgeES2_($this,$e1,$e2);
 label=78;break;
 case 43: 
 __ZN10ClipperLib7Clipper13AppendPolygonEPNS_5TEdgeES2_($this,$e2,$e1);
 label=78;break;
 case 44: 
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e1,$pt);
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e2,$pt);
 var $174=(($e1+84)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($e2+84)|0);
 var $177=HEAP32[(($176)>>2)];
 HEAP32[(($174)>>2)]=$177;
 HEAP32[(($176)>>2)]=$175;
 var $178=HEAP32[(($39)>>2)];
 var $179=HEAP32[(($42)>>2)];
 HEAP32[(($39)>>2)]=$179;
 HEAP32[(($42)>>2)]=$178;
 label=78;break;
 case 45: 
 if($41){label=46;break;}else{label=50;break;}
 case 46: 
 var $$etemp$20$0=2;
 var $$etemp$20$1=0;
 var $182=(($e2Wc_0$1>>>0) < ($$etemp$20$1>>>0)) | (((($e2Wc_0$1>>>0) == ($$etemp$20$1>>>0) & ($e2Wc_0$0>>>0) <  ($$etemp$20$0>>>0))));
 if($182){label=47;break;}else{label=78;break;}
 case 47: 
 var $184=(($this+40)|0);
 var $185=HEAP32[(($184)>>2)];
 var $_not166=($185|0)!=0;
 var $brmerge167=$_not166|$112;
 if($brmerge167){label=49;break;}else{label=48;break;}
 case 48: 
 var $187=(($e2+96)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){label=78;break;}else{label=49;break;}
 case 49: 
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e1,$pt);
 var $191=(($e1+84)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($e2+84)|0);
 var $194=HEAP32[(($193)>>2)];
 HEAP32[(($191)>>2)]=$194;
 HEAP32[(($193)>>2)]=$192;
 var $195=HEAP32[(($39)>>2)];
 var $196=HEAP32[(($42)>>2)];
 HEAP32[(($39)>>2)]=$196;
 HEAP32[(($42)>>2)]=$195;
 label=78;break;
 case 50: 
 var $$etemp$21$0=2;
 var $$etemp$21$1=0;
 var $198=(($e1Wc_0$1>>>0) < ($$etemp$21$1>>>0)) | (((($e1Wc_0$1>>>0) == ($$etemp$21$1>>>0) & ($e1Wc_0$0>>>0) <  ($$etemp$21$0>>>0))));
 if($154){label=55;break;}else{label=51;break;}
 case 51: 
 if($198){label=52;break;}else{label=78;break;}
 case 52: 
 var $201=(($this+40)|0);
 var $202=HEAP32[(($201)>>2)];
 var $_not168=($202|0)!=0;
 var $brmerge169=$_not168|$103;
 if($brmerge169){label=54;break;}else{label=53;break;}
 case 53: 
 var $204=(($e1+96)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($205|0)==0;
 if($206){label=78;break;}else{label=54;break;}
 case 54: 
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$e2,$pt);
 var $208=(($e1+84)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($e2+84)|0);
 var $211=HEAP32[(($210)>>2)];
 HEAP32[(($208)>>2)]=$211;
 HEAP32[(($210)>>2)]=$209;
 var $212=HEAP32[(($39)>>2)];
 var $213=HEAP32[(($42)>>2)];
 HEAP32[(($39)>>2)]=$213;
 HEAP32[(($42)>>2)]=$212;
 label=78;break;
 case 55: 
 if($198){label=56;break;}else{label=78;break;}
 case 56: 
 var $$etemp$22$0=1;
 var $$etemp$22$1=0;
 var $_not144=(($e2Wc_0$1>>>0) > ($$etemp$22$1>>>0)) | (((($e2Wc_0$1>>>0) == ($$etemp$22$1>>>0) & ($e2Wc_0$0>>>0) >  ($$etemp$22$0>>>0))));
 var $brmerge145=$_not144|$_off0;
 var $brmerge146=$brmerge145|$_off0141;
 if($brmerge146){label=78;break;}else{label=57;break;}
 case 57: 
 if(($e1FillType2_0|0)==2){ label=58;break;}else if(($e1FillType2_0|0)==3){ label=59;break;}else{label=60;break;}
 case 58: 
 var $218=(($e1+96)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220$0=$219;
 var $220$1=(((($219|0)<0))|0)?-1:0;
 var $e1Wc2_0$1=$220$1;var $e1Wc2_0$0=$220$0;label=61;break;
 case 59: 
 var $222=(($e1+96)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(((-$223))|0);
 var $225$0=$224;
 var $225$1=(((($224|0)<0))|0)?-1:0;
 var $e1Wc2_0$1=$225$1;var $e1Wc2_0$0=$225$0;label=61;break;
 case 60: 
 var $227=(($e1+96)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229$0=$228;
 var $229$1=(((($228|0)<0))|0)?-1:0;
 var $230=($228|0)<0;
 var $$etemp$23$0=0;
 var $$etemp$23$1=0;
 var $231$0=_i64Subtract($$etemp$23$0,$$etemp$23$1,$229$0,$229$1);var $231$1=tempRet0;
 var $232$0=$230?$231$0:$229$0;
 var $232$1=$230?$231$1:$229$1;
 var $e1Wc2_0$1=$232$1;var $e1Wc2_0$0=$232$0;label=61;break;
 case 61: 
 var $e1Wc2_0$0;
 var $e1Wc2_0$1;
 if(($e2FillType2_0|0)==2){ label=62;break;}else if(($e2FillType2_0|0)==3){ label=63;break;}else{label=64;break;}
 case 62: 
 var $235=(($e2+96)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237$0=$236;
 var $237$1=(((($236|0)<0))|0)?-1:0;
 var $e2Wc2_0$1=$237$1;var $e2Wc2_0$0=$237$0;label=65;break;
 case 63: 
 var $239=(($e2+96)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(((-$240))|0);
 var $242$0=$241;
 var $242$1=(((($241|0)<0))|0)?-1:0;
 var $e2Wc2_0$1=$242$1;var $e2Wc2_0$0=$242$0;label=65;break;
 case 64: 
 var $244=(($e2+96)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246$0=$245;
 var $246$1=(((($245|0)<0))|0)?-1:0;
 var $247=($245|0)<0;
 var $$etemp$24$0=0;
 var $$etemp$24$1=0;
 var $248$0=_i64Subtract($$etemp$24$0,$$etemp$24$1,$246$0,$246$1);var $248$1=tempRet0;
 var $249$0=$247?$248$0:$246$0;
 var $249$1=$247?$248$1:$246$1;
 var $e2Wc2_0$1=$249$1;var $e2Wc2_0$0=$249$0;label=65;break;
 case 65: 
 var $e2Wc2_0$0;
 var $e2Wc2_0$1;
 var $251=($102|0)==($111|0);
 if($251){label=67;break;}else{label=66;break;}
 case 66: 
 __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt);
 label=78;break;
 case 67: 
 var $$etemp$25$0=1;
 var $$etemp$25$1=0;
 var $_not147=(($e1Wc_0$0|0) != ($$etemp$25$0|0)) | (($e1Wc_0$1|0) != ($$etemp$25$1|0));
 var $$etemp$26$0=1;
 var $$etemp$26$1=0;
 var $_not148=(($e2Wc_0$0|0) != ($$etemp$26$0|0)) | (($e2Wc_0$1|0) != ($$etemp$26$1|0));
 var $brmerge149=$_not147|$_not148;
 if($brmerge149){label=77;break;}else{label=68;break;}
 case 68: 
 var $255=(($this+40)|0);
 var $256=HEAP32[(($255)>>2)];
 if(($256|0)==0){ label=69;break;}else if(($256|0)==1){ label=71;break;}else if(($256|0)==2){ label=73;break;}else if(($256|0)==3){ label=76;break;}else{label=78;break;}
 case 69: 
 var $$etemp$27$0=0;
 var $$etemp$27$1=0;
 var $258=(($e1Wc2_0$1|0) > ($$etemp$27$1|0)) | (((($e1Wc2_0$1|0) == ($$etemp$27$1|0) & ($e1Wc2_0$0>>>0) >  ($$etemp$27$0>>>0))));
 var $$etemp$28$0=0;
 var $$etemp$28$1=0;
 var $259=(($e2Wc2_0$1|0) > ($$etemp$28$1|0)) | (((($e2Wc2_0$1|0) == ($$etemp$28$1|0) & ($e2Wc2_0$0>>>0) >  ($$etemp$28$0>>>0))));
 var $or_cond150=$258&$259;
 if($or_cond150){label=70;break;}else{label=78;break;}
 case 70: 
 __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt);
 label=78;break;
 case 71: 
 var $$etemp$29$0=1;
 var $$etemp$29$1=0;
 var $262=(($e1Wc2_0$1|0) < ($$etemp$29$1|0)) | (((($e1Wc2_0$1|0) == ($$etemp$29$1|0) & ($e1Wc2_0$0>>>0) <  ($$etemp$29$0>>>0))));
 var $$etemp$30$0=1;
 var $$etemp$30$1=0;
 var $263=(($e2Wc2_0$1|0) < ($$etemp$30$1|0)) | (((($e2Wc2_0$1|0) == ($$etemp$30$1|0) & ($e2Wc2_0$0>>>0) <  ($$etemp$30$0>>>0))));
 var $or_cond151=$262&$263;
 if($or_cond151){label=72;break;}else{label=78;break;}
 case 72: 
 __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt);
 label=78;break;
 case 73: 
 var $266=($102|0)==1;
 var $$etemp$31$0=0;
 var $$etemp$31$1=0;
 var $267=(($e1Wc2_0$1|0) > ($$etemp$31$1|0)) | (((($e1Wc2_0$1|0) == ($$etemp$31$1|0) & ($e1Wc2_0$0>>>0) >  ($$etemp$31$0>>>0))));
 var $or_cond152=$266&$267;
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $268=(($e2Wc2_0$1|0) > ($$etemp$32$1|0)) | (((($e2Wc2_0$1|0) == ($$etemp$32$1|0) & ($e2Wc2_0$0>>>0) >  ($$etemp$32$0>>>0))));
 var $or_cond153=$or_cond152&$268;
 if($or_cond153){label=75;break;}else{label=74;break;}
 case 74: 
 var $$etemp$33$0=1;
 var $$etemp$33$1=0;
 var $270=(($e1Wc2_0$1|0) < ($$etemp$33$1|0)) | (((($e1Wc2_0$1|0) == ($$etemp$33$1|0) & ($e1Wc2_0$0>>>0) <  ($$etemp$33$0>>>0))));
 var $or_cond154=$103&$270;
 var $$etemp$34$0=1;
 var $$etemp$34$1=0;
 var $271=(($e2Wc2_0$1|0) < ($$etemp$34$1|0)) | (((($e2Wc2_0$1|0) == ($$etemp$34$1|0) & ($e2Wc2_0$0>>>0) <  ($$etemp$34$0>>>0))));
 var $or_cond155=$or_cond154&$271;
 if($or_cond155){label=75;break;}else{label=78;break;}
 case 75: 
 __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt);
 label=78;break;
 case 76: 
 __ZN10ClipperLib7Clipper15AddLocalMinPolyEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt);
 label=78;break;
 case 77: 
 var $275=(($e1+84)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($e2+84)|0);
 var $278=HEAP32[(($277)>>2)];
 HEAP32[(($275)>>2)]=$278;
 HEAP32[(($277)>>2)]=$276;
 label=78;break;
 case 78: 
 var $279=$_off0^$_off0141;
 if($279){label=79;break;}else{label=84;break;}
 case 79: 
 if($_off0){label=80;break;}else{label=81;break;}
 case 80: 
 var $282=HEAP32[(($39)>>2)];
 var $283=($282|0)>-1;
 if($283){label=83;break;}else{label=81;break;}
 case 81: 
 if($_off0141){label=82;break;}else{label=84;break;}
 case 82: 
 var $286=HEAP32[(($42)>>2)];
 var $287=($286|0)>-1;
 if($287){label=83;break;}else{label=84;break;}
 case 83: 
 var $288=(($e1+84)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=(($e2+84)|0);
 var $291=HEAP32[(($290)>>2)];
 HEAP32[(($288)>>2)]=$291;
 HEAP32[(($290)>>2)]=$289;
 var $292=HEAP32[(($39)>>2)];
 var $293=HEAP32[(($42)>>2)];
 HEAP32[(($39)>>2)]=$293;
 HEAP32[(($42)>>2)]=$292;
 label=84;break;
 case 84: 
 if($_off0){label=85;break;}else{label=93;break;}
 case 85: 
 var $296=(($e1+120)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=(($e1+116)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=($297|0)!=0;
 var $_not_i156=$300^1;
 var $301=($299|0)==0;
 var $or_cond_i157=$301&$_not_i156;
 if($or_cond_i157){label=86;break;}else{label=87;break;}
 case 86: 
 var $303=(($this+48)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=($304|0)==($e1|0);
 if($305){label=87;break;}else{label=93;break;}
 case 87: 
 if($300){label=88;break;}else{label=89;break;}
 case 88: 
 var $308=(($297+116)|0);
 HEAP32[(($308)>>2)]=$299;
 label=90;break;
 case 89: 
 var $310=(($this+48)|0);
 HEAP32[(($310)>>2)]=$299;
 label=90;break;
 case 90: 
 if($301){label=92;break;}else{label=91;break;}
 case 91: 
 var $313=(($299+120)|0);
 HEAP32[(($313)>>2)]=$297;
 label=92;break;
 case 92: 
 HEAP32[(($298)>>2)]=0;
 HEAP32[(($296)>>2)]=0;
 label=93;break;
 case 93: 
 if($_off0141){label=94;break;}else{label=102;break;}
 case 94: 
 var $316=(($e2+120)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=(($e2+116)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=($317|0)!=0;
 var $_not_i=$320^1;
 var $321=($319|0)==0;
 var $or_cond_i=$321&$_not_i;
 if($or_cond_i){label=95;break;}else{label=96;break;}
 case 95: 
 var $323=(($this+48)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=($324|0)==($e2|0);
 if($325){label=96;break;}else{label=102;break;}
 case 96: 
 if($320){label=97;break;}else{label=98;break;}
 case 97: 
 var $328=(($317+116)|0);
 HEAP32[(($328)>>2)]=$319;
 label=99;break;
 case 98: 
 var $330=(($this+48)|0);
 HEAP32[(($330)>>2)]=$319;
 label=99;break;
 case 99: 
 if($321){label=101;break;}else{label=100;break;}
 case 100: 
 var $333=(($319+120)|0);
 HEAP32[(($333)>>2)]=$317;
 label=101;break;
 case 101: 
 HEAP32[(($318)>>2)]=0;
 HEAP32[(($316)>>2)]=0;
 label=102;break;
 case 102: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper17ProcessHorizontalEPNS_5TEdgeE($this,$horzEdge){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $jr_i=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(24);
 var $3=(sp)+(40);
 var $4=(sp)+(56);
 var $5=(sp)+(72);
 var $6=(sp)+(88);
 var $7=(sp)+(104);
 var $8=(sp)+(112);
 var $9=(sp)+(128);
 var $10=(sp)+(144);
 var $11=(sp)+(160);
 var $12=(sp)+(176);
 var $13=(sp)+(192);
 var $14=(sp)+(208);
 var $15=(sp)+(224);
 HEAP32[(($7)>>2)]=$horzEdge;
 var $16=(($horzEdge+16)|0);
 var $ld$0$0=(($16)|0);
 var $17$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$1$1)>>2)];
 var $18=(($horzEdge+32)|0);
 var $ld$2$0=(($18)|0);
 var $19$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($18+4)|0);
 var $19$1=HEAP32[(($ld$3$1)>>2)];
 var $20=(($17$1|0) < ($19$1|0)) | (((($17$1|0) == ($19$1|0) & ($17$0>>>0) <  ($19$0>>>0))));
 var $_$0=$20?$17$0:$19$0;
 var $_$1=$20?$17$1:$19$1;
 var $_53$0=$20?$19$0:$17$0;
 var $_53$1=$20?$19$1:$17$1;
 var $21=(($horzEdge+112)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=2;break;}else{var $eMaxPair_0=0;label=7;break;}
 case 2: 
 var $25=(($horzEdge+104)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==0;
 if($27){label=6;break;}else{label=3;break;}
 case 3: 
 var $29=(($horzEdge+40)|0);
 var $ld$4$0=(($29)|0);
 var $30$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$5$1)>>2)];
 var $31=(($26+40)|0);
 var $ld$6$0=(($31)|0);
 var $32$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($31+4)|0);
 var $32$1=HEAP32[(($ld$7$1)>>2)];
 var $33=(($32$0|0) == ($30$0|0)) & (($32$1|0) == ($30$1|0));
 if($33){label=4;break;}else{label=6;break;}
 case 4: 
 var $34=(($26+112)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $38=(($26+32)|0);
 var $ld$8$0=(($38)|0);
 var $39$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$9$1)>>2)];
 var $40=(($39$0|0) == ($19$0|0)) & (($39$1|0) == ($19$1|0));
 if($40){var $eMaxPair_0=$26;label=7;break;}else{label=6;break;}
 case 6: 
 var $41=(($horzEdge+108)|0);
 var $42=HEAP32[(($41)>>2)];
 var $eMaxPair_0=$42;label=7;break;
 case 7: 
 var $eMaxPair_0;
 var $43=(($horzEdge+116)|0);
 var $44=(($horzEdge+120)|0);
 var $_in_i=$20?$43:$44;
 var $45=HEAP32[(($_in_i)>>2)];
 var $46=($45|0)==0;
 if($46){label=68;break;}else{label=8;break;}
 case 8: 
 var $47=($eMaxPair_0|0)!=0;
 var $48=(($horzEdge+24)|0);
 var $49=(($10)|0);
 var $50=(($10+8)|0);
 var $51=(($this+52)|0);
 var $52=(($11)|0);
 var $53=(($11+8)|0);
 var $54=(($12)|0);
 var $55=(($12+8)|0);
 var $56=(($13)|0);
 var $57=(($13+8)|0);
 var $58=$this;
 var $59=$this;
 var $60=$1;
 var $61=$2;
 var $62=$3;
 var $63=$4;
 var $64=$5;
 var $65=$6;
 var $66=(($1+8)|0);
 var $67=(($1)|0);
 var $68=(($2+8)|0);
 var $69=(($2)|0);
 var $70=(($5+8)|0);
 var $71=(($5)|0);
 var $72=(($6+8)|0);
 var $73=(($6)|0);
 var $74=(($3)|0);
 var $75=(($4)|0);
 var $76=(($3+8)|0);
 var $77=(($4+8)|0);
 var $e_089=$45;label=9;break;
 case 9: 
 var $e_089;
 var $79=(($e_089+116)|0);
 var $80=(($e_089+120)|0);
 var $_in_i58=$20?$79:$80;
 var $81=HEAP32[(($_in_i58)>>2)];
 var $82=(($e_089+16)|0);
 if($47){var $185=$82;label=27;break;}else{label=10;break;}
 case 10: 
 var $ld$10$0=(($82)|0);
 var $84$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($82+4)|0);
 var $84$1=HEAP32[(($ld$11$1)>>2)];
 if($20){label=11;break;}else{label=12;break;}
 case 11: 
 var $86=(($84$1|0) > ($_53$1|0)) | (((($84$1|0) == ($_53$1|0) & ($84$0>>>0) >  ($_53$0>>>0))));
 if($86){label=62;break;}else{label=13;break;}
 case 12: 
 var $87=(($84$1|0) < ($_$1|0)) | (((($84$1|0) == ($_$1|0) & ($84$0>>>0) <  ($_$0>>>0))));
 if($87){label=65;break;}else{label=13;break;}
 case 13: 
 var $88=(($e_089+16)|0);
 var $ld$12$0=(($18)|0);
 var $89$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($18+4)|0);
 var $89$1=HEAP32[(($ld$13$1)>>2)];
 var $_not=(($84$0|0) != ($89$0|0)) | (($84$1|0) != ($89$1|0));
 var $brmerge=$_not|$47;
 if($brmerge){var $185=$88;label=27;break;}else{label=14;break;}
 case 14: 
 var $91=HEAP32[(($21)>>2)];
 var $92=HEAP32[(($58)>>2)];
 var $93=((($92)-(12))|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $_sum=((($95)+(12))|0);
 var $96=(($59+$_sum)|0);
 var $97=HEAP8[($96)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 var $100=(($e_089+64)|0);
 var $ld$14$0=(($100)|0);
 var $101$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($100+4)|0);
 var $101$1=HEAP32[(($ld$15$1)>>2)];
 if($99){label=17;break;}else{label=15;break;}
 case 15: 
 var $st$16$0=(($66)|0);
 HEAP32[(($st$16$0)>>2)]=$101$0;
 var $st$17$1=(($66+4)|0);
 HEAP32[(($st$17$1)>>2)]=$101$1;
 var $_lo_lobit_i_i_i$0=($101$1>>31)|(((((($101$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i_i$1=(((((($101$1|0)<0))|0)?-1:0)>>31)|(((((($101$1|0)<0))|0)?-1:0)<<1);
 var $st$18$0=(($67)|0);
 HEAP32[(($st$18$0)>>2)]=$_lo_lobit_i_i_i$0;
 var $st$19$1=(($67+4)|0);
 HEAP32[(($st$19$1)>>2)]=$_lo_lobit_i_i_i$1;
 var $103=(($91+56)|0);
 var $ld$20$0=(($103)|0);
 var $104$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($103+4)|0);
 var $104$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($68)|0);
 HEAP32[(($st$22$0)>>2)]=$104$0;
 var $st$23$1=(($68+4)|0);
 HEAP32[(($st$23$1)>>2)]=$104$1;
 var $_lo_lobit_i_i9_i$0=($104$1>>31)|(((((($104$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i9_i$1=(((((($104$1|0)<0))|0)?-1:0)>>31)|(((((($104$1|0)<0))|0)?-1:0)<<1);
 var $st$24$0=(($69)|0);
 HEAP32[(($st$24$0)>>2)]=$_lo_lobit_i_i9_i$0;
 var $st$25$1=(($69+4)|0);
 HEAP32[(($st$25$1)>>2)]=$_lo_lobit_i_i9_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($3,$1,$2);
 var $105=(($e_089+56)|0);
 var $ld$26$0=(($105)|0);
 var $106$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($105+4)|0);
 var $106$1=HEAP32[(($ld$27$1)>>2)];
 var $st$28$0=(($70)|0);
 HEAP32[(($st$28$0)>>2)]=$106$0;
 var $st$29$1=(($70+4)|0);
 HEAP32[(($st$29$1)>>2)]=$106$1;
 var $_lo_lobit_i_i11_i$0=($106$1>>31)|(((((($106$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i11_i$1=(((((($106$1|0)<0))|0)?-1:0)>>31)|(((((($106$1|0)<0))|0)?-1:0)<<1);
 var $st$30$0=(($71)|0);
 HEAP32[(($st$30$0)>>2)]=$_lo_lobit_i_i11_i$0;
 var $st$31$1=(($71+4)|0);
 HEAP32[(($st$31$1)>>2)]=$_lo_lobit_i_i11_i$1;
 var $107=(($91+64)|0);
 var $ld$32$0=(($107)|0);
 var $108$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($107+4)|0);
 var $108$1=HEAP32[(($ld$33$1)>>2)];
 var $st$34$0=(($72)|0);
 HEAP32[(($st$34$0)>>2)]=$108$0;
 var $st$35$1=(($72+4)|0);
 HEAP32[(($st$35$1)>>2)]=$108$1;
 var $_lo_lobit_i_i10_i$0=($108$1>>31)|(((((($108$1|0)<0))|0)?-1:0)<<1);
 var $_lo_lobit_i_i10_i$1=(((((($108$1|0)<0))|0)?-1:0)>>31)|(((((($108$1|0)<0))|0)?-1:0)<<1);
 var $st$36$0=(($73)|0);
 HEAP32[(($st$36$0)>>2)]=$_lo_lobit_i_i10_i$0;
 var $st$37$1=(($73+4)|0);
 HEAP32[(($st$37$1)>>2)]=$_lo_lobit_i_i10_i$1;
 __ZNK10ClipperLib6Int128mlERKS0_($4,$5,$6);
 var $ld$38$0=(($74)|0);
 var $109$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($74+4)|0);
 var $109$1=HEAP32[(($ld$39$1)>>2)];
 var $ld$40$0=(($75)|0);
 var $110$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($75+4)|0);
 var $110$1=HEAP32[(($ld$41$1)>>2)];
 var $111=(($109$0|0) == ($110$0|0)) & (($109$1|0) == ($110$1|0));
 if($111){label=16;break;}else{label=26;break;}
 case 16: 
 var $ld$42$0=(($76)|0);
 var $113$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($76+4)|0);
 var $113$1=HEAP32[(($ld$43$1)>>2)];
 var $ld$44$0=(($77)|0);
 var $114$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($77+4)|0);
 var $114$1=HEAP32[(($ld$45$1)>>2)];
 var $115=(($113$0|0) == ($114$0|0)) & (($113$1|0) == ($114$1|0));
 var $_0_i59=$115;label=18;break;
 case 17: 
 var $117=(($91+56)|0);
 var $ld$46$0=(($117)|0);
 var $118$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($117+4)|0);
 var $118$1=HEAP32[(($ld$47$1)>>2)];
 var $119$0=___muldi3($118$0,$118$1,$101$0,$101$1);var $119$1=tempRet0;
 var $120=(($e_089+56)|0);
 var $ld$48$0=(($120)|0);
 var $121$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($120+4)|0);
 var $121$1=HEAP32[(($ld$49$1)>>2)];
 var $122=(($91+64)|0);
 var $ld$50$0=(($122)|0);
 var $123$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($122+4)|0);
 var $123$1=HEAP32[(($ld$51$1)>>2)];
 var $124$0=___muldi3($123$0,$123$1,$121$0,$121$1);var $124$1=tempRet0;
 var $125=(($119$0|0) == ($124$0|0)) & (($119$1|0) == ($124$1|0));
 var $_0_i59=$125;label=18;break;
 case 18: 
 var $_0_i59;
 if($_0_i59){label=19;break;}else{label=26;break;}
 case 19: 
 var $127=(($horzEdge+100)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)>-1;
 if($129){label=20;break;}else{var $_pre_phi=$127;label=69;break;}
 case 20: 
 var $131=(($e_089+100)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132|0)>-1;
 if($133){label=21;break;}else{var $_pre_phi=$127;label=69;break;}
 case 21: 
 var $135=HEAP32[(($21)>>2)];
 var $136=$jr_i;
 var $137=__Znwj(80);
 var $138=$137;
 var $139=(($137+40)|0);
 HEAP32[(($137)>>2)]=0; HEAP32[((($137)+(4))>>2)]=0; HEAP32[((($137)+(8))>>2)]=0; HEAP32[((($137)+(12))>>2)]=0; HEAP32[((($137)+(16))>>2)]=0; HEAP32[((($137)+(20))>>2)]=0; HEAP32[((($137)+(24))>>2)]=0; HEAP32[((($137)+(28))>>2)]=0;
 HEAP32[(($139)>>2)]=0; HEAP32[((($139)+(4))>>2)]=0; HEAP32[((($139)+(8))>>2)]=0; HEAP32[((($139)+(12))>>2)]=0; HEAP32[((($139)+(16))>>2)]=0; HEAP32[((($139)+(20))>>2)]=0; HEAP32[((($139)+(24))>>2)]=0; HEAP32[((($139)+(28))>>2)]=0;
 HEAP32[(($jr_i)>>2)]=$138;
 var $140=(($137+32)|0);
 var $141=$140;
 HEAP32[(($141)>>2)]=$128;
 var $142=(($135+16)|0);
 var $ld$52$0=(($142)|0);
 var $143$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($142+4)|0);
 var $143$1=HEAP32[(($ld$53$1)>>2)];
 var $144=(($135+24)|0);
 var $ld$54$0=(($144)|0);
 var $145$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($144+4)|0);
 var $145$1=HEAP32[(($ld$55$1)>>2)];
 var $_sroa_036_0__idx_i=$137;
 var $st$56$0=(($_sroa_036_0__idx_i)|0);
 HEAP32[(($st$56$0)>>2)]=$143$0;
 var $st$57$1=(($_sroa_036_0__idx_i+4)|0);
 HEAP32[(($st$57$1)>>2)]=$143$1;
 var $_sroa_137_8__idx38_i=(($137+8)|0);
 var $146=$_sroa_137_8__idx38_i;
 var $st$58$0=(($146)|0);
 HEAP32[(($st$58$0)>>2)]=$145$0;
 var $st$59$1=(($146+4)|0);
 HEAP32[(($st$59$1)>>2)]=$145$1;
 var $147=(($135+32)|0);
 var $ld$60$0=(($147)|0);
 var $148$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($147+4)|0);
 var $148$1=HEAP32[(($ld$61$1)>>2)];
 var $149=(($135+40)|0);
 var $ld$62$0=(($149)|0);
 var $150$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($149+4)|0);
 var $150$1=HEAP32[(($ld$63$1)>>2)];
 var $_sroa_033_0__idx_i=(($137+16)|0);
 var $151=$_sroa_033_0__idx_i;
 var $st$64$0=(($151)|0);
 HEAP32[(($st$64$0)>>2)]=$148$0;
 var $st$65$1=(($151+4)|0);
 HEAP32[(($st$65$1)>>2)]=$148$1;
 var $_sroa_134_8__idx35_i=(($137+24)|0);
 var $152=$_sroa_134_8__idx35_i;
 var $st$66$0=(($152)|0);
 HEAP32[(($st$66$0)>>2)]=$150$0;
 var $st$67$1=(($152+4)|0);
 HEAP32[(($st$67$1)>>2)]=$150$1;
 var $153=HEAP32[(($131)>>2)];
 var $154=(($137+72)|0);
 var $155=$154;
 HEAP32[(($155)>>2)]=$153;
 var $ld$68$0=(($88)|0);
 var $156$0=HEAP32[(($ld$68$0)>>2)];
 var $ld$69$1=(($88+4)|0);
 var $156$1=HEAP32[(($ld$69$1)>>2)];
 var $157=(($e_089+24)|0);
 var $ld$70$0=(($157)|0);
 var $158$0=HEAP32[(($ld$70$0)>>2)];
 var $ld$71$1=(($157+4)|0);
 var $158$1=HEAP32[(($ld$71$1)>>2)];
 var $159=$139;
 var $st$72$0=(($159)|0);
 HEAP32[(($st$72$0)>>2)]=$156$0;
 var $st$73$1=(($159+4)|0);
 HEAP32[(($st$73$1)>>2)]=$156$1;
 var $_sroa_131_8__idx32_i=(($137+48)|0);
 var $160=$_sroa_131_8__idx32_i;
 var $st$74$0=(($160)|0);
 HEAP32[(($st$74$0)>>2)]=$158$0;
 var $st$75$1=(($160+4)|0);
 HEAP32[(($st$75$1)>>2)]=$158$1;
 var $161=(($e_089+32)|0);
 var $ld$76$0=(($161)|0);
 var $162$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($161+4)|0);
 var $162$1=HEAP32[(($ld$77$1)>>2)];
 var $163=(($e_089+40)|0);
 var $ld$78$0=(($163)|0);
 var $164$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($163+4)|0);
 var $164$1=HEAP32[(($ld$79$1)>>2)];
 var $_sroa_0_0__idx_i=(($137+56)|0);
 var $165=$_sroa_0_0__idx_i;
 var $st$80$0=(($165)|0);
 HEAP32[(($st$80$0)>>2)]=$162$0;
 var $st$81$1=(($165+4)|0);
 HEAP32[(($st$81$1)>>2)]=$162$1;
 var $_sroa_1_8__idx29_i=(($137+64)|0);
 var $166=$_sroa_1_8__idx29_i;
 var $st$82$0=(($166)|0);
 HEAP32[(($st$82$0)>>2)]=$164$0;
 var $st$83$1=(($166+4)|0);
 HEAP32[(($st$83$1)>>2)]=$164$1;
 var $167=(($this+20)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($this+24)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=25;break;}else{label=22;break;}
 case 22: 
 var $173=($168|0)==0;
 if($173){var $175=0;label=24;break;}else{label=23;break;}
 case 23: 
 HEAP32[(($168)>>2)]=$138;
 var $_pre_i=HEAP32[(($167)>>2)];
 var $175=$_pre_i;label=24;break;
 case 24: 
 var $175;
 var $176=(($175+4)|0);
 HEAP32[(($167)>>2)]=$176;
 var $_pre_phi=$127;label=69;break;
 case 25: 
 var $178=(($this+16)|0);
 __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($178,$jr_i);
 var $_pre_phi=$127;label=69;break;
 case 26: 
 var $179=(($e_089+48)|0);
 var $180=HEAPF64[(($179)>>3)];
 var $181=HEAP32[(($21)>>2)];
 var $182=(($181+48)|0);
 var $183=HEAPF64[(($182)>>3)];
 var $184=$180<$183;
 if($184){label=68;break;}else{var $185=$88;label=27;break;}
 case 27: 
 var $185;
 var $186=($e_089|0)==($eMaxPair_0|0);
 if($186){label=28;break;}else{label=35;break;}
 case 28: 
 var $ld$84$0=(($185)|0);
 var $188$0=HEAP32[(($ld$84$0)>>2)];
 var $ld$85$1=(($185+4)|0);
 var $188$1=HEAP32[(($ld$85$1)>>2)];
 var $ld$86$0=(($48)|0);
 var $189$0=HEAP32[(($ld$86$0)>>2)];
 var $ld$87$1=(($48+4)|0);
 var $189$1=HEAP32[(($ld$87$1)>>2)];
 if($20){label=29;break;}else{label=30;break;}
 case 29: 
 var $191=(($8)|0);
 var $st$88$0=(($191)|0);
 HEAP32[(($st$88$0)>>2)]=$188$0;
 var $st$89$1=(($191+4)|0);
 HEAP32[(($st$89$1)>>2)]=$188$1;
 var $192=(($8+8)|0);
 var $st$90$0=(($192)|0);
 HEAP32[(($st$90$0)>>2)]=$189$0;
 var $st$91$1=(($192+4)|0);
 HEAP32[(($st$91$1)>>2)]=$189$1;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$horzEdge,$eMaxPair_0,$8,0);
 label=31;break;
 case 30: 
 var $194=(($9)|0);
 var $st$92$0=(($194)|0);
 HEAP32[(($st$92$0)>>2)]=$188$0;
 var $st$93$1=(($194+4)|0);
 HEAP32[(($st$93$1)>>2)]=$188$1;
 var $195=(($9+8)|0);
 var $st$94$0=(($195)|0);
 HEAP32[(($st$94$0)>>2)]=$189$0;
 var $st$95$1=(($195+4)|0);
 HEAP32[(($st$95$1)>>2)]=$189$1;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$eMaxPair_0,$horzEdge,$9,0);
 label=31;break;
 case 31: 
 var $197=(($eMaxPair_0+100)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($198|0)>-1;
 if($199){label=32;break;}else{label=95;break;}
 case 32: 
 var $201=___cxa_allocate_exception(16);
 var $202=$201;
 HEAP32[(($202)>>2)]=9408;
 var $203=(($201+4)|0);
 var $204=$203;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($204,2048,23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 ___cxa_throw($201,14376,(576));
 throw "Reached an unreachable!";
 case 34: 
 var $206$0 = ___cxa_find_matching_catch(-1, -1); var $206$1 = tempRet0;
 var $207=$206$0;
 var $208=$206$1;
 ___cxa_free_exception($201);
 var $_0=$208;var $_052=$207;label=96;break;
 case 35: 
 var $210=(($e_089+48)|0);
 var $211=HEAPF64[(($210)>>3)];
 var $212=($211)+((1e+40));
 var $213=$212>(-1e-20);
 var $214=$212<(1e-20);
 var $or_cond=$213&$214;
 if($or_cond){label=36;break;}else{label=50;break;}
 case 36: 
 var $216=(($e_089+108)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+112)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==($e_089|0);
 if($220){label=38;break;}else{label=37;break;}
 case 37: 
 var $221=(($e_089+104)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+112)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=($224|0)==($e_089|0);
 if($225){label=38;break;}else{label=50;break;}
 case 38: 
 var $ld$96$0=(($185)|0);
 var $226$0=HEAP32[(($ld$96$0)>>2)];
 var $ld$97$1=(($185+4)|0);
 var $226$1=HEAP32[(($ld$97$1)>>2)];
 var $227=(($e_089+32)|0);
 var $ld$98$0=(($227)|0);
 var $228$0=HEAP32[(($ld$98$0)>>2)];
 var $ld$99$1=(($227+4)|0);
 var $228$1=HEAP32[(($ld$99$1)>>2)];
 var $229=(($226$1|0) > ($228$1|0)) | (((($226$1|0) == ($228$1|0) & ($226$0>>>0) >  ($228$0>>>0))));
 if($229){label=50;break;}else{label=39;break;}
 case 39: 
 var $ld$100$0=(($48)|0);
 var $231$0=HEAP32[(($ld$100$0)>>2)];
 var $ld$101$1=(($48+4)|0);
 var $231$1=HEAP32[(($ld$101$1)>>2)];
 if($20){label=40;break;}else{label=45;break;}
 case 40: 
 var $st$102$0=(($49)|0);
 HEAP32[(($st$102$0)>>2)]=$226$0;
 var $st$103$1=(($49+4)|0);
 HEAP32[(($st$103$1)>>2)]=$226$1;
 var $st$104$0=(($50)|0);
 HEAP32[(($st$104$0)>>2)]=$231$0;
 var $st$105$1=(($50+4)|0);
 HEAP32[(($st$105$1)>>2)]=$231$1;
 var $e_030_i=HEAP32[(($51)>>2)];
 var $233=($e_030_i|0)==0;
 if($233){var $_0_i61=1;label=44;break;}else{var $e_031_i=$e_030_i;label=41;break;}
 case 41: 
 var $e_031_i;
 var $234=(($e_031_i+16)|0);
 var $235=(($e_031_i+32)|0);
 var $ld$106$0=(($235)|0);
 var $236$0=HEAP32[(($ld$106$0)>>2)];
 var $ld$107$1=(($235+4)|0);
 var $236$1=HEAP32[(($ld$107$1)>>2)];
 var $ld$108$0=(($234)|0);
 var $237$0=HEAP32[(($ld$108$0)>>2)];
 var $ld$109$1=(($234+4)|0);
 var $237$1=HEAP32[(($ld$109$1)>>2)];
 var $238=(($236$1|0) < ($237$1|0)) | (((($236$1|0) == ($237$1|0) & ($236$0>>>0) <  ($237$0>>>0))));
 var $239$0=$238?$236$0:$237$0;
 var $239$1=$238?$236$1:$237$1;
 var $240=(($239$1|0) > ($226$1|0)) | (((($239$1|0) == ($226$1|0) & ($239$0>>>0) >  ($226$0>>>0))));
 if($240){label=43;break;}else{label=42;break;}
 case 42: 
 var $241=(($237$1|0) < ($236$1|0)) | (((($237$1|0) == ($236$1|0) & ($237$0>>>0) <  ($236$0>>>0))));
 var $242=$241?$235:$234;
 var $ld$110$0=(($242)|0);
 var $243$0=HEAP32[(($ld$110$0)>>2)];
 var $ld$111$1=(($242+4)|0);
 var $243$1=HEAP32[(($ld$111$1)>>2)];
 var $244=(($243$1|0) < ($226$1|0)) | (((($243$1|0) == ($226$1|0) & ($243$0>>>0) <  ($226$0>>>0))));
 if($244){label=43;break;}else{var $_0_i61=3;label=44;break;}
 case 43: 
 var $246=(($e_031_i+124)|0);
 var $e_0_i=HEAP32[(($246)>>2)];
 var $247=($e_0_i|0)==0;
 if($247){var $_0_i61=1;label=44;break;}else{var $e_031_i=$e_0_i;label=41;break;}
 case 44: 
 var $_0_i61;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$horzEdge,$e_089,$10,$_0_i61);
 label=61;break;
 case 45: 
 var $st$112$0=(($52)|0);
 HEAP32[(($st$112$0)>>2)]=$226$0;
 var $st$113$1=(($52+4)|0);
 HEAP32[(($st$113$1)>>2)]=$226$1;
 var $st$114$0=(($53)|0);
 HEAP32[(($st$114$0)>>2)]=$231$0;
 var $st$115$1=(($53+4)|0);
 HEAP32[(($st$115$1)>>2)]=$231$1;
 var $e_030_i62=HEAP32[(($51)>>2)];
 var $249=($e_030_i62|0)==0;
 if($249){var $_0_i67=2;label=49;break;}else{var $e_031_i63=$e_030_i62;label=46;break;}
 case 46: 
 var $e_031_i63;
 var $250=(($e_031_i63+16)|0);
 var $251=(($e_031_i63+32)|0);
 var $ld$116$0=(($251)|0);
 var $252$0=HEAP32[(($ld$116$0)>>2)];
 var $ld$117$1=(($251+4)|0);
 var $252$1=HEAP32[(($ld$117$1)>>2)];
 var $ld$118$0=(($250)|0);
 var $253$0=HEAP32[(($ld$118$0)>>2)];
 var $ld$119$1=(($250+4)|0);
 var $253$1=HEAP32[(($ld$119$1)>>2)];
 var $254=(($252$1|0) < ($253$1|0)) | (((($252$1|0) == ($253$1|0) & ($252$0>>>0) <  ($253$0>>>0))));
 var $255$0=$254?$252$0:$253$0;
 var $255$1=$254?$252$1:$253$1;
 var $256=(($255$1|0) > ($226$1|0)) | (((($255$1|0) == ($226$1|0) & ($255$0>>>0) >  ($226$0>>>0))));
 if($256){label=48;break;}else{label=47;break;}
 case 47: 
 var $257=(($253$1|0) < ($252$1|0)) | (((($253$1|0) == ($252$1|0) & ($253$0>>>0) <  ($252$0>>>0))));
 var $258=$257?$251:$250;
 var $ld$120$0=(($258)|0);
 var $259$0=HEAP32[(($ld$120$0)>>2)];
 var $ld$121$1=(($258+4)|0);
 var $259$1=HEAP32[(($ld$121$1)>>2)];
 var $260=(($259$1|0) < ($226$1|0)) | (((($259$1|0) == ($226$1|0) & ($259$0>>>0) <  ($226$0>>>0))));
 if($260){label=48;break;}else{var $_0_i67=3;label=49;break;}
 case 48: 
 var $262=(($e_031_i63+124)|0);
 var $e_0_i66=HEAP32[(($262)>>2)];
 var $263=($e_0_i66|0)==0;
 if($263){var $_0_i67=2;label=49;break;}else{var $e_031_i63=$e_0_i66;label=46;break;}
 case 49: 
 var $_0_i67;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$e_089,$horzEdge,$11,$_0_i67);
 label=61;break;
 case 50: 
 var $ld$122$0=(($185)|0);
 var $264$0=HEAP32[(($ld$122$0)>>2)];
 var $ld$123$1=(($185+4)|0);
 var $264$1=HEAP32[(($ld$123$1)>>2)];
 var $ld$124$0=(($48)|0);
 var $265$0=HEAP32[(($ld$124$0)>>2)];
 var $ld$125$1=(($48+4)|0);
 var $265$1=HEAP32[(($ld$125$1)>>2)];
 if($20){label=51;break;}else{label=56;break;}
 case 51: 
 var $st$126$0=(($54)|0);
 HEAP32[(($st$126$0)>>2)]=$264$0;
 var $st$127$1=(($54+4)|0);
 HEAP32[(($st$127$1)>>2)]=$264$1;
 var $st$128$0=(($55)|0);
 HEAP32[(($st$128$0)>>2)]=$265$0;
 var $st$129$1=(($55+4)|0);
 HEAP32[(($st$129$1)>>2)]=$265$1;
 var $e_030_i76=HEAP32[(($51)>>2)];
 var $267=($e_030_i76|0)==0;
 if($267){var $_0_i81=1;label=55;break;}else{var $e_031_i77=$e_030_i76;label=52;break;}
 case 52: 
 var $e_031_i77;
 var $268=(($e_031_i77+16)|0);
 var $269=(($e_031_i77+32)|0);
 var $ld$130$0=(($269)|0);
 var $270$0=HEAP32[(($ld$130$0)>>2)];
 var $ld$131$1=(($269+4)|0);
 var $270$1=HEAP32[(($ld$131$1)>>2)];
 var $ld$132$0=(($268)|0);
 var $271$0=HEAP32[(($ld$132$0)>>2)];
 var $ld$133$1=(($268+4)|0);
 var $271$1=HEAP32[(($ld$133$1)>>2)];
 var $272=(($270$1|0) < ($271$1|0)) | (((($270$1|0) == ($271$1|0) & ($270$0>>>0) <  ($271$0>>>0))));
 var $273$0=$272?$270$0:$271$0;
 var $273$1=$272?$270$1:$271$1;
 var $274=(($273$1|0) > ($264$1|0)) | (((($273$1|0) == ($264$1|0) & ($273$0>>>0) >  ($264$0>>>0))));
 if($274){label=54;break;}else{label=53;break;}
 case 53: 
 var $275=(($271$1|0) < ($270$1|0)) | (((($271$1|0) == ($270$1|0) & ($271$0>>>0) <  ($270$0>>>0))));
 var $276=$275?$269:$268;
 var $ld$134$0=(($276)|0);
 var $277$0=HEAP32[(($ld$134$0)>>2)];
 var $ld$135$1=(($276+4)|0);
 var $277$1=HEAP32[(($ld$135$1)>>2)];
 var $278=(($277$1|0) < ($264$1|0)) | (((($277$1|0) == ($264$1|0) & ($277$0>>>0) <  ($264$0>>>0))));
 if($278){label=54;break;}else{var $_0_i81=3;label=55;break;}
 case 54: 
 var $280=(($e_031_i77+124)|0);
 var $e_0_i80=HEAP32[(($280)>>2)];
 var $281=($e_0_i80|0)==0;
 if($281){var $_0_i81=1;label=55;break;}else{var $e_031_i77=$e_0_i80;label=52;break;}
 case 55: 
 var $_0_i81;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$horzEdge,$e_089,$12,$_0_i81);
 label=61;break;
 case 56: 
 var $st$136$0=(($56)|0);
 HEAP32[(($st$136$0)>>2)]=$264$0;
 var $st$137$1=(($56+4)|0);
 HEAP32[(($st$137$1)>>2)]=$264$1;
 var $st$138$0=(($57)|0);
 HEAP32[(($st$138$0)>>2)]=$265$0;
 var $st$139$1=(($57+4)|0);
 HEAP32[(($st$139$1)>>2)]=$265$1;
 var $e_030_i69=HEAP32[(($51)>>2)];
 var $283=($e_030_i69|0)==0;
 if($283){var $_0_i74=2;label=60;break;}else{var $e_031_i70=$e_030_i69;label=57;break;}
 case 57: 
 var $e_031_i70;
 var $284=(($e_031_i70+16)|0);
 var $285=(($e_031_i70+32)|0);
 var $ld$140$0=(($285)|0);
 var $286$0=HEAP32[(($ld$140$0)>>2)];
 var $ld$141$1=(($285+4)|0);
 var $286$1=HEAP32[(($ld$141$1)>>2)];
 var $ld$142$0=(($284)|0);
 var $287$0=HEAP32[(($ld$142$0)>>2)];
 var $ld$143$1=(($284+4)|0);
 var $287$1=HEAP32[(($ld$143$1)>>2)];
 var $288=(($286$1|0) < ($287$1|0)) | (((($286$1|0) == ($287$1|0) & ($286$0>>>0) <  ($287$0>>>0))));
 var $289$0=$288?$286$0:$287$0;
 var $289$1=$288?$286$1:$287$1;
 var $290=(($289$1|0) > ($264$1|0)) | (((($289$1|0) == ($264$1|0) & ($289$0>>>0) >  ($264$0>>>0))));
 if($290){label=59;break;}else{label=58;break;}
 case 58: 
 var $291=(($287$1|0) < ($286$1|0)) | (((($287$1|0) == ($286$1|0) & ($287$0>>>0) <  ($286$0>>>0))));
 var $292=$291?$285:$284;
 var $ld$144$0=(($292)|0);
 var $293$0=HEAP32[(($ld$144$0)>>2)];
 var $ld$145$1=(($292+4)|0);
 var $293$1=HEAP32[(($ld$145$1)>>2)];
 var $294=(($293$1|0) < ($264$1|0)) | (((($293$1|0) == ($264$1|0) & ($293$0>>>0) <  ($264$0>>>0))));
 if($294){label=59;break;}else{var $_0_i74=3;label=60;break;}
 case 59: 
 var $296=(($e_031_i70+124)|0);
 var $e_0_i73=HEAP32[(($296)>>2)];
 var $297=($e_0_i73|0)==0;
 if($297){var $_0_i74=2;label=60;break;}else{var $e_031_i70=$e_0_i73;label=57;break;}
 case 60: 
 var $_0_i74;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$e_089,$horzEdge,$13,$_0_i74);
 label=61;break;
 case 61: 
 __ZN10ClipperLib7Clipper18SwapPositionsInAELEPNS_5TEdgeES2_($this,$horzEdge,$e_089);
 label=67;break;
 case 62: 
 var $299=(($84$1|0) > ($_53$1|0)) | (((($84$1|0) == ($_53$1|0) & ($84$0>>>0) >  ($_53$0>>>0))));
 if($299){label=63;break;}else{label=67;break;}
 case 63: 
 var $301=HEAP32[(($51)>>2)];
 var $302=($301|0)==0;
 if($302){label=64;break;}else{label=68;break;}
 case 64: 
 if($20){label=67;break;}else{label=65;break;}
 case 65: 
 var $304=(($84$1|0) < ($_$1|0)) | (((($84$1|0) == ($_$1|0) & ($84$0>>>0) <  ($_$0>>>0))));
 if($304){label=66;break;}else{label=67;break;}
 case 66: 
 var $306=HEAP32[(($51)>>2)];
 var $307=($306|0)!=0;
 var $308=($81|0)==0;
 var $or_cond108=$307|$308;
 if($or_cond108){label=68;break;}else{var $e_089=$81;label=9;break;}
 case 67: 
 var $_old=($81|0)==0;
 if($_old){label=68;break;}else{var $e_089=$81;label=9;break;}
 case 68: 
 var $_pre104=(($horzEdge+100)|0);
 var $_pre_phi=$_pre104;label=69;break;
 case 69: 
 var $_pre_phi;
 var $309=HEAP32[(($21)>>2)];
 var $310=($309|0)==0;
 var $311=HEAP32[(($_pre_phi)>>2)];
 var $312=($311|0)>-1;
 if($310){label=73;break;}else{label=70;break;}
 case 70: 
 if($312){label=71;break;}else{label=72;break;}
 case 71: 
 var $ld$146$0=(($18)|0);
 var $315$0=HEAP32[(($ld$146$0)>>2)];
 var $ld$147$1=(($18+4)|0);
 var $315$1=HEAP32[(($ld$147$1)>>2)];
 var $316=(($horzEdge+40)|0);
 var $ld$148$0=(($316)|0);
 var $317$0=HEAP32[(($ld$148$0)>>2)];
 var $ld$149$1=(($316+4)|0);
 var $317$1=HEAP32[(($ld$149$1)>>2)];
 var $318=(($14)|0);
 var $st$150$0=(($318)|0);
 HEAP32[(($st$150$0)>>2)]=$315$0;
 var $st$151$1=(($318+4)|0);
 HEAP32[(($st$151$1)>>2)]=$315$1;
 var $319=(($14+8)|0);
 var $st$152$0=(($319)|0);
 HEAP32[(($st$152$0)>>2)]=$317$0;
 var $st$153$1=(($319+4)|0);
 HEAP32[(($st$153$1)>>2)]=$317$1;
 __ZN10ClipperLib7Clipper8AddOutPtEPNS_5TEdgeERKNS_8IntPointE($this,$horzEdge,$14);
 label=72;break;
 case 72: 
 __ZN10ClipperLib7Clipper17UpdateEdgeIntoAELERPNS_5TEdgeE($this,$7);
 label=95;break;
 case 73: 
 if($312){label=74;break;}else{label=75;break;}
 case 74: 
 var $ld$154$0=(($18)|0);
 var $323$0=HEAP32[(($ld$154$0)>>2)];
 var $ld$155$1=(($18+4)|0);
 var $323$1=HEAP32[(($ld$155$1)>>2)];
 var $324=(($horzEdge+24)|0);
 var $ld$156$0=(($324)|0);
 var $325$0=HEAP32[(($ld$156$0)>>2)];
 var $ld$157$1=(($324+4)|0);
 var $325$1=HEAP32[(($ld$157$1)>>2)];
 var $326=(($15)|0);
 var $st$158$0=(($326)|0);
 HEAP32[(($st$158$0)>>2)]=$323$0;
 var $st$159$1=(($326+4)|0);
 HEAP32[(($st$159$1)>>2)]=$323$1;
 var $327=(($15+8)|0);
 var $st$160$0=(($327)|0);
 HEAP32[(($st$160$0)>>2)]=$325$0;
 var $st$161$1=(($327+4)|0);
 HEAP32[(($st$161$1)>>2)]=$325$1;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$horzEdge,$eMaxPair_0,$15,3);
 label=75;break;
 case 75: 
 var $329=(($eMaxPair_0+100)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)>-1;
 if($331){label=76;break;}else{label=79;break;}
 case 76: 
 var $333=___cxa_allocate_exception(16);
 var $334=$333;
 HEAP32[(($334)>>2)]=9408;
 var $335=(($333+4)|0);
 var $336=$335;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($336,2048,23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=78;break; }
 case 77: 
 ___cxa_throw($333,14376,(576));
 throw "Reached an unreachable!";
 case 78: 
 var $338$0 = ___cxa_find_matching_catch(-1, -1); var $338$1 = tempRet0;
 var $339=$338$0;
 var $340=$338$1;
 ___cxa_free_exception($333);
 var $_0=$340;var $_052=$339;label=96;break;
 case 79: 
 var $342=(($eMaxPair_0+120)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($eMaxPair_0+116)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=($343|0)!=0;
 var $_not_i55=$346^1;
 var $347=($345|0)==0;
 var $or_cond_i56=$347&$_not_i55;
 if($or_cond_i56){label=80;break;}else{label=81;break;}
 case 80: 
 var $349=(($this+48)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=($350|0)==($eMaxPair_0|0);
 if($351){label=81;break;}else{label=87;break;}
 case 81: 
 if($346){label=82;break;}else{label=83;break;}
 case 82: 
 var $354=(($343+116)|0);
 HEAP32[(($354)>>2)]=$345;
 label=84;break;
 case 83: 
 var $356=(($this+48)|0);
 HEAP32[(($356)>>2)]=$345;
 label=84;break;
 case 84: 
 if($347){label=86;break;}else{label=85;break;}
 case 85: 
 var $359=(($345+120)|0);
 HEAP32[(($359)>>2)]=$343;
 label=86;break;
 case 86: 
 HEAP32[(($344)>>2)]=0;
 HEAP32[(($342)>>2)]=0;
 label=87;break;
 case 87: 
 var $361=HEAP32[(($44)>>2)];
 var $362=HEAP32[(($43)>>2)];
 var $363=($361|0)!=0;
 var $_not_i=$363^1;
 var $364=($362|0)==0;
 var $or_cond_i=$364&$_not_i;
 if($or_cond_i){label=88;break;}else{label=89;break;}
 case 88: 
 var $366=(($this+48)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($367|0)==($horzEdge|0);
 if($368){label=89;break;}else{label=95;break;}
 case 89: 
 if($363){label=90;break;}else{label=91;break;}
 case 90: 
 var $371=(($361+116)|0);
 HEAP32[(($371)>>2)]=$362;
 label=92;break;
 case 91: 
 var $373=(($this+48)|0);
 HEAP32[(($373)>>2)]=$362;
 label=92;break;
 case 92: 
 if($364){label=94;break;}else{label=93;break;}
 case 93: 
 var $376=(($362+120)|0);
 HEAP32[(($376)>>2)]=$361;
 label=94;break;
 case 94: 
 HEAP32[(($43)>>2)]=0;
 HEAP32[(($44)>>2)]=0;
 label=95;break;
 case 95: 
 STACKTOP=sp;return;
 case 96: 
 var $_052;
 var $_0;
 var $379$0=$_052;
 var $379$1=0;
 var $380$0=$379$0;
 var $380$1=$_0;
 ___resumeException($380$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper18SwapPositionsInAELEPNS_5TEdgeES2_($this,$edge1,$edge2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($edge1+116)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($edge1+120)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=29;break;}else{label=3;break;}
 case 3: 
 var $9=(($edge2+116)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=(($edge2+120)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=29;break;}else{label=5;break;}
 case 5: 
 var $16=($2|0)==($edge2|0);
 if($16){label=6;break;}else{label=11;break;}
 case 6: 
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $19=(($10+120)|0);
 HEAP32[(($19)>>2)]=$edge1;
 label=8;break;
 case 8: 
 var $20=(($edge1+120)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=9;break;}
 case 9: 
 var $24=(($21+116)|0);
 HEAP32[(($24)>>2)]=$edge2;
 label=10;break;
 case 10: 
 var $26=(($edge2+120)|0);
 HEAP32[(($26)>>2)]=$21;
 HEAP32[(($9)>>2)]=$edge1;
 HEAP32[(($20)>>2)]=$edge2;
 HEAP32[(($1)>>2)]=$10;
 label=25;break;
 case 11: 
 var $28=($10|0)==($edge1|0);
 if($28){label=12;break;}else{label=17;break;}
 case 12: 
 if($3){label=14;break;}else{label=13;break;}
 case 13: 
 var $31=(($2+120)|0);
 HEAP32[(($31)>>2)]=$edge2;
 label=14;break;
 case 14: 
 var $32=(($edge2+120)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=16;break;}else{label=15;break;}
 case 15: 
 var $36=(($33+116)|0);
 HEAP32[(($36)>>2)]=$edge1;
 label=16;break;
 case 16: 
 var $38=(($edge1+120)|0);
 HEAP32[(($38)>>2)]=$33;
 HEAP32[(($1)>>2)]=$edge2;
 HEAP32[(($32)>>2)]=$edge1;
 HEAP32[(($9)>>2)]=$2;
 label=25;break;
 case 17: 
 var $40=(($edge1+120)|0);
 var $41=HEAP32[(($40)>>2)];
 HEAP32[(($1)>>2)]=$10;
 if($11){label=19;break;}else{label=18;break;}
 case 18: 
 var $43=(($10+120)|0);
 HEAP32[(($43)>>2)]=$edge1;
 label=19;break;
 case 19: 
 var $45=(($edge2+120)|0);
 var $46=HEAP32[(($45)>>2)];
 HEAP32[(($40)>>2)]=$46;
 var $47=($46|0)==0;
 if($47){label=21;break;}else{label=20;break;}
 case 20: 
 var $49=(($46+116)|0);
 HEAP32[(($49)>>2)]=$edge1;
 label=21;break;
 case 21: 
 HEAP32[(($9)>>2)]=$2;
 if($3){label=23;break;}else{label=22;break;}
 case 22: 
 var $52=(($2+120)|0);
 HEAP32[(($52)>>2)]=$edge2;
 label=23;break;
 case 23: 
 HEAP32[(($45)>>2)]=$41;
 var $54=($41|0)==0;
 if($54){label=25;break;}else{label=24;break;}
 case 24: 
 var $56=(($41+116)|0);
 HEAP32[(($56)>>2)]=$edge2;
 label=25;break;
 case 25: 
 var $57=(($edge1+120)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==0;
 if($59){label=26;break;}else{label=27;break;}
 case 26: 
 var $61=(($this+48)|0);
 HEAP32[(($61)>>2)]=$edge1;
 label=29;break;
 case 27: 
 var $63=(($edge2+120)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=28;break;}else{label=29;break;}
 case 28: 
 var $67=(($this+48)|0);
 HEAP32[(($67)>>2)]=$edge2;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper18SwapPositionsInSELEPNS_5TEdgeES2_($this,$edge1,$edge2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($edge1+124)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($edge1+128)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=29;break;}else{label=3;break;}
 case 3: 
 var $9=(($edge2+124)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=(($edge2+128)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=29;break;}else{label=5;break;}
 case 5: 
 var $16=($2|0)==($edge2|0);
 if($16){label=6;break;}else{label=11;break;}
 case 6: 
 if($11){label=8;break;}else{label=7;break;}
 case 7: 
 var $19=(($10+128)|0);
 HEAP32[(($19)>>2)]=$edge1;
 label=8;break;
 case 8: 
 var $20=(($edge1+128)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=9;break;}
 case 9: 
 var $24=(($21+124)|0);
 HEAP32[(($24)>>2)]=$edge2;
 label=10;break;
 case 10: 
 var $26=(($edge2+128)|0);
 HEAP32[(($26)>>2)]=$21;
 HEAP32[(($9)>>2)]=$edge1;
 HEAP32[(($20)>>2)]=$edge2;
 HEAP32[(($1)>>2)]=$10;
 label=25;break;
 case 11: 
 var $28=($10|0)==($edge1|0);
 if($28){label=12;break;}else{label=17;break;}
 case 12: 
 if($3){label=14;break;}else{label=13;break;}
 case 13: 
 var $31=(($2+128)|0);
 HEAP32[(($31)>>2)]=$edge2;
 label=14;break;
 case 14: 
 var $32=(($edge2+128)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=16;break;}else{label=15;break;}
 case 15: 
 var $36=(($33+124)|0);
 HEAP32[(($36)>>2)]=$edge1;
 label=16;break;
 case 16: 
 var $38=(($edge1+128)|0);
 HEAP32[(($38)>>2)]=$33;
 HEAP32[(($1)>>2)]=$edge2;
 HEAP32[(($32)>>2)]=$edge1;
 HEAP32[(($9)>>2)]=$2;
 label=25;break;
 case 17: 
 var $40=(($edge1+128)|0);
 var $41=HEAP32[(($40)>>2)];
 HEAP32[(($1)>>2)]=$10;
 if($11){label=19;break;}else{label=18;break;}
 case 18: 
 var $43=(($10+128)|0);
 HEAP32[(($43)>>2)]=$edge1;
 label=19;break;
 case 19: 
 var $45=(($edge2+128)|0);
 var $46=HEAP32[(($45)>>2)];
 HEAP32[(($40)>>2)]=$46;
 var $47=($46|0)==0;
 if($47){label=21;break;}else{label=20;break;}
 case 20: 
 var $49=(($46+124)|0);
 HEAP32[(($49)>>2)]=$edge1;
 label=21;break;
 case 21: 
 HEAP32[(($9)>>2)]=$2;
 if($3){label=23;break;}else{label=22;break;}
 case 22: 
 var $52=(($2+128)|0);
 HEAP32[(($52)>>2)]=$edge2;
 label=23;break;
 case 23: 
 HEAP32[(($45)>>2)]=$41;
 var $54=($41|0)==0;
 if($54){label=25;break;}else{label=24;break;}
 case 24: 
 var $56=(($41+124)|0);
 HEAP32[(($56)>>2)]=$edge2;
 label=25;break;
 case 25: 
 var $57=(($edge1+128)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==0;
 if($59){label=26;break;}else{label=27;break;}
 case 26: 
 var $61=(($this+52)|0);
 HEAP32[(($61)>>2)]=$edge1;
 label=29;break;
 case 27: 
 var $63=(($edge2+128)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=28;break;}else{label=29;break;}
 case 28: 
 var $67=(($this+52)|0);
 HEAP32[(($67)>>2)]=$edge2;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper17UpdateEdgeIntoAELERPNS_5TEdgeE($this,$e){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($e)>>2)];
 var $2=(($1+112)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=5;break;}
 case 2: 
 var $6=___cxa_allocate_exception(16);
 var $7=$6;
 HEAP32[(($7)>>2)]=9408;
 var $8=(($6+4)|0);
 var $9=$8;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($9,1424,31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 ___cxa_throw($6,14376,(576));
 throw "Reached an unreachable!";
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___cxa_free_exception($6);
 ___resumeException($11$0)
 case 5: 
 var $13=(($1+120)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($1+116)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($1+100)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($3+100)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=($14|0)==0;
 var $21=HEAP32[(($e)>>2)];
 var $22=(($21+112)|0);
 var $23=HEAP32[(($22)>>2)];
 if($20){label=7;break;}else{label=6;break;}
 case 6: 
 var $25=(($14+116)|0);
 HEAP32[(($25)>>2)]=$23;
 label=8;break;
 case 7: 
 var $27=(($this+48)|0);
 HEAP32[(($27)>>2)]=$23;
 label=8;break;
 case 8: 
 var $29=($16|0)==0;
 if($29){label=10;break;}else{label=9;break;}
 case 9: 
 var $31=HEAP32[(($e)>>2)];
 var $32=(($31+112)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($16+120)|0);
 HEAP32[(($34)>>2)]=$33;
 label=10;break;
 case 10: 
 var $36=HEAP32[(($e)>>2)];
 var $37=(($36+84)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($36+112)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+84)|0);
 HEAP32[(($41)>>2)]=$38;
 var $42=HEAP32[(($e)>>2)];
 var $43=(($42+88)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($42+112)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+88)|0);
 HEAP32[(($47)>>2)]=$44;
 var $48=HEAP32[(($e)>>2)];
 var $49=(($48+92)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($48+112)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+92)|0);
 HEAP32[(($53)>>2)]=$50;
 var $54=HEAP32[(($e)>>2)];
 var $55=(($54+96)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($54+112)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+96)|0);
 HEAP32[(($59)>>2)]=$56;
 var $60=HEAP32[(($e)>>2)];
 var $61=(($60+112)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP32[(($e)>>2)]=$62;
 var $63=(($62+120)|0);
 HEAP32[(($63)>>2)]=$14;
 var $64=HEAP32[(($e)>>2)];
 var $65=(($64+116)|0);
 HEAP32[(($65)>>2)]=$16;
 var $66=HEAP32[(($e)>>2)];
 var $67=(($66+48)|0);
 var $68=HEAPF64[(($67)>>3)];
 var $69=($68)+((1e+40));
 var $70=$69>(-1e-20);
 var $71=$69<(1e-20);
 var $or_cond=$70&$71;
 if($or_cond){label=19;break;}else{label=11;break;}
 case 11: 
 var $73=(($66+40)|0);
 var $ld$0$0=(($73)|0);
 var $74$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($73+4)|0);
 var $74$1=HEAP32[(($ld$1$1)>>2)];
 var $75=(($this+44)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($76|0)==0;
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 var $79=__Znwj(16);
 var $80=$79;
 HEAP32[(($75)>>2)]=$80;
 var $81=(($79+8)|0);
 var $82=$81;
 HEAP32[(($82)>>2)]=0;
 var $83=$79;
 var $st$2$0=(($83)|0);
 HEAP32[(($st$2$0)>>2)]=$74$0;
 var $st$3$1=(($83+4)|0);
 HEAP32[(($st$3$1)>>2)]=$74$1;
 label=19;break;
 case 13: 
 var $85=(($76)|0);
 var $ld$4$0=(($85)|0);
 var $86$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($85+4)|0);
 var $86$1=HEAP32[(($ld$5$1)>>2)];
 var $87=(($86$1|0) < ($74$1|0)) | (((($86$1|0) == ($74$1|0) & ($86$0>>>0) <  ($74$0>>>0))));
 if($87){label=14;break;}else{var $sb2_0_i=$76;label=15;break;}
 case 14: 
 var $89=__Znwj(16);
 var $90=$89;
 var $91=$89;
 var $st$6$0=(($91)|0);
 HEAP32[(($st$6$0)>>2)]=$74$0;
 var $st$7$1=(($91+4)|0);
 HEAP32[(($st$7$1)>>2)]=$74$1;
 var $92=(($89+8)|0);
 var $93=$92;
 HEAP32[(($93)>>2)]=$76;
 HEAP32[(($75)>>2)]=$90;
 label=19;break;
 case 15: 
 var $sb2_0_i;
 var $94=(($sb2_0_i+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=17;break;}else{label=16;break;}
 case 16: 
 var $98=(($95)|0);
 var $ld$8$0=(($98)|0);
 var $99$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($98+4)|0);
 var $99$1=HEAP32[(($ld$9$1)>>2)];
 var $100=(($99$1|0) < ($74$1|0)) | (((($99$1|0) == ($74$1|0) & ($99$0>>>0) <  ($74$0>>>0))));
 if($100){label=17;break;}else{var $sb2_0_i=$95;label=15;break;}
 case 17: 
 var $101=(($sb2_0_i)|0);
 var $ld$10$0=(($101)|0);
 var $102$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($101+4)|0);
 var $102$1=HEAP32[(($ld$11$1)>>2)];
 var $103=(($102$0|0) == ($74$0|0)) & (($102$1|0) == ($74$1|0));
 if($103){label=19;break;}else{label=18;break;}
 case 18: 
 var $105=__Znwj(16);
 var $106=$105;
 var $107=$105;
 var $st$12$0=(($107)|0);
 HEAP32[(($st$12$0)>>2)]=$74$0;
 var $st$13$1=(($107+4)|0);
 HEAP32[(($st$13$1)>>2)]=$74$1;
 var $108=HEAP32[(($94)>>2)];
 var $109=(($105+8)|0);
 var $110=$109;
 HEAP32[(($110)>>2)]=$108;
 HEAP32[(($94)>>2)]=$106;
 label=19;break;
 case 19: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper18BuildIntersectListExx($this,$botY$0,$botY$1,$topY$0,$topY$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $pt=sp;
 var $1=(($this+48)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=35;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+40)|0);
 var $ld$0$0=(($5)|0);
 var $6$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$1$1)>>2)];
 var $7=(($6$0|0) == ($topY$0|0)) & (($6$1|0) == ($topY$1|0));
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=(($2+32)|0);
 var $ld$2$0=(($9)|0);
 var $10$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$3$1)>>2)];
 var $28$1=$10$1;var $28$0=$10$0;label=8;break;
 case 4: 
 var $12=(($2)|0);
 var $ld$4$0=(($12)|0);
 var $13$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($12+4)|0);
 var $13$1=HEAP32[(($ld$5$1)>>2)];
 var $14=(($2+48)|0);
 var $15=HEAPF64[(($14)>>3)];
 var $16=(($2+8)|0);
 var $ld$6$0=(($16)|0);
 var $17$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$7$1)>>2)];
 var $18$0=_i64Subtract($topY$0,$topY$1,$17$0,$17$1);var $18$1=tempRet0;
 var $19=(($18$0>>>0)+(($18$1|0)*4294967296));
 var $20=($15)*($19);
 var $21=$20<0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=($20)+((-0.5));
 var $_sink_i_i=$23;label=7;break;
 case 6: 
 var $25=($20)+((0.5));
 var $_sink_i_i=$25;label=7;break;
 case 7: 
 var $_sink_i_i;
 var $26$0=$_sink_i_i>>>0;var $26$1=(Math_abs($_sink_i_i) >= 1 ? ($_sink_i_i > 0 ? Math_min(Math_floor(($_sink_i_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i - +(((~~($_sink_i_i)))>>>0))/4294967296)))>>>0) : 0);
 var $27$0=_i64Add($26$0,$26$1,$13$0,$13$1);var $27$1=tempRet0;
 var $28$1=$27$1;var $28$0=$27$0;label=8;break;
 case 8: 
 var $28$0;
 var $28$1;
 var $29=(($2+72)|0);
 var $st$8$0=(($29)|0);
 HEAP32[(($st$8$0)>>2)]=$28$0;
 var $st$9$1=(($29+4)|0);
 HEAP32[(($st$9$1)>>2)]=$28$1;
 var $30=(($this+52)|0);
 HEAP32[(($30)>>2)]=$2;
 var $31=(($2+128)|0);
 HEAP32[(($31)>>2)]=0;
 var $e_0_in47=(($2+116)|0);
 var $e_048=HEAP32[(($e_0_in47)>>2)];
 var $32=($e_048|0)==0;
 if($32){label=9;break;}else{var $e_049=$e_048;label=10;break;}
 case 9: 
 var $33=(($pt)|0);
 var $34=(($pt+8)|0);
 var $35=$this;
 var $36=$this;
 label=17;break;
 case 10: 
 var $e_049;
 var $37=(($e_049+120)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($e_049+128)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($38+124)|0);
 HEAP32[(($40)>>2)]=$e_049;
 var $41=(($e_049+124)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=(($e_049+40)|0);
 var $ld$10$0=(($42)|0);
 var $43$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($42+4)|0);
 var $43$1=HEAP32[(($ld$11$1)>>2)];
 var $44=(($43$0|0) == ($topY$0|0)) & (($43$1|0) == ($topY$1|0));
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $46=(($e_049+32)|0);
 var $ld$12$0=(($46)|0);
 var $47$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($46+4)|0);
 var $47$1=HEAP32[(($ld$13$1)>>2)];
 var $65$1=$47$1;var $65$0=$47$0;label=16;break;
 case 12: 
 var $49=(($e_049)|0);
 var $ld$14$0=(($49)|0);
 var $50$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($49+4)|0);
 var $50$1=HEAP32[(($ld$15$1)>>2)];
 var $51=(($e_049+48)|0);
 var $52=HEAPF64[(($51)>>3)];
 var $53=(($e_049+8)|0);
 var $ld$16$0=(($53)|0);
 var $54$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($53+4)|0);
 var $54$1=HEAP32[(($ld$17$1)>>2)];
 var $55$0=_i64Subtract($topY$0,$topY$1,$54$0,$54$1);var $55$1=tempRet0;
 var $56=(($55$0>>>0)+(($55$1|0)*4294967296));
 var $57=($52)*($56);
 var $58=$57<0;
 if($58){label=13;break;}else{label=14;break;}
 case 13: 
 var $60=($57)+((-0.5));
 var $_sink_i_i30=$60;label=15;break;
 case 14: 
 var $62=($57)+((0.5));
 var $_sink_i_i30=$62;label=15;break;
 case 15: 
 var $_sink_i_i30;
 var $63$0=$_sink_i_i30>>>0;var $63$1=(Math_abs($_sink_i_i30) >= 1 ? ($_sink_i_i30 > 0 ? Math_min(Math_floor(($_sink_i_i30)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i30 - +(((~~($_sink_i_i30)))>>>0))/4294967296)))>>>0) : 0);
 var $64$0=_i64Add($63$0,$63$1,$50$0,$50$1);var $64$1=tempRet0;
 var $65$1=$64$1;var $65$0=$64$0;label=16;break;
 case 16: 
 var $65$0;
 var $65$1;
 var $66=(($e_049+72)|0);
 var $st$18$0=(($66)|0);
 HEAP32[(($st$18$0)>>2)]=$65$0;
 var $st$19$1=(($66+4)|0);
 HEAP32[(($st$19$1)>>2)]=$65$1;
 var $e_0_in=(($e_049+116)|0);
 var $e_0=HEAP32[(($e_0_in)>>2)];
 var $67=($e_0|0)==0;
 if($67){label=9;break;}else{var $e_049=$e_0;label=10;break;}
 case 17: 
 var $68=HEAP32[(($30)>>2)];
 var $69=($68|0)==0;
 if($69){label=34;break;}else{label=18;break;}
 case 18: 
 var $70=(($68+124)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)==0;
 if($72){var $e_1_lcssa=$68;var $isModified_1_ph41=0;label=32;break;}else{var $isModified_1_ph43=0;var $e_1_ph44=$68;var $73=$71;label=19;break;}
 case 19: 
 var $73;
 var $e_1_ph44;
 var $isModified_1_ph43;
 var $e_139=$e_1_ph44;var $75=$73;label=20;break;
 case 20: 
 var $75;
 var $e_139;
 var $76=(($e_139+72)|0);
 var $77=$pt;
 HEAP32[(($77)>>2)]=0; HEAP32[((($77)+(4))>>2)]=0; HEAP32[((($77)+(8))>>2)]=0; HEAP32[((($77)+(12))>>2)]=0;
 var $ld$20$0=(($76)|0);
 var $78$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($76+4)|0);
 var $78$1=HEAP32[(($ld$21$1)>>2)];
 var $79=(($75+72)|0);
 var $ld$22$0=(($79)|0);
 var $80$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($79+4)|0);
 var $80$1=HEAP32[(($ld$23$1)>>2)];
 var $81=(($78$1|0) > ($80$1|0)) | (((($78$1|0) == ($80$1|0) & ($78$0>>>0) >  ($80$0>>>0))));
 if($81){label=21;break;}else{label=22;break;}
 case 21: 
 var $83=HEAP32[(($35)>>2)];
 var $84=((($83)-(12))|0);
 var $85=$84;
 var $86=HEAP32[(($85)>>2)];
 var $_sum=((($86)+(12))|0);
 var $87=(($36+$_sum)|0);
 var $88=HEAP8[($87)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)!=0;
 var $91=__ZN10ClipperLib14IntersectPointERNS_5TEdgeES1_RNS_8IntPointEb($e_139,$75,$pt,$90);
 if($91){label=23;break;}else{label=22;break;}
 case 22: 
 var $92=(($75+124)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=($93|0)==0;
 if($94){var $e_1_lcssa=$75;var $isModified_1_ph41=$isModified_1_ph43;label=32;break;}else{var $e_139=$75;var $75=$93;label=20;break;}
 case 23: 
 var $ld$24$0=(($34)|0);
 var $96$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($34+4)|0);
 var $96$1=HEAP32[(($ld$25$1)>>2)];
 var $97=(($96$1|0) > ($botY$1|0)) | (((($96$1|0) == ($botY$1|0) & ($96$0>>>0) >  ($botY$0>>>0))));
 if($97){label=24;break;}else{label=31;break;}
 case 24: 
 var $st$26$0=(($34)|0);
 HEAP32[(($st$26$0)>>2)]=$botY$0;
 var $st$27$1=(($34+4)|0);
 HEAP32[(($st$27$1)>>2)]=$botY$1;
 var $99=(($e_139+40)|0);
 var $ld$28$0=(($99)|0);
 var $100$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($99+4)|0);
 var $100$1=HEAP32[(($ld$29$1)>>2)];
 var $101=(($100$0|0) == ($botY$0|0)) & (($100$1|0) == ($botY$1|0));
 if($101){label=25;break;}else{label=26;break;}
 case 25: 
 var $103=(($e_139+32)|0);
 var $ld$30$0=(($103)|0);
 var $104$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($103+4)|0);
 var $104$1=HEAP32[(($ld$31$1)>>2)];
 var $122$1=$104$1;var $122$0=$104$0;label=30;break;
 case 26: 
 var $106=(($e_139)|0);
 var $ld$32$0=(($106)|0);
 var $107$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($106+4)|0);
 var $107$1=HEAP32[(($ld$33$1)>>2)];
 var $108=(($e_139+48)|0);
 var $109=HEAPF64[(($108)>>3)];
 var $110=(($e_139+8)|0);
 var $ld$34$0=(($110)|0);
 var $111$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($110+4)|0);
 var $111$1=HEAP32[(($ld$35$1)>>2)];
 var $112$0=_i64Subtract($botY$0,$botY$1,$111$0,$111$1);var $112$1=tempRet0;
 var $113=(($112$0>>>0)+(($112$1|0)*4294967296));
 var $114=($109)*($113);
 var $115=$114<0;
 if($115){label=27;break;}else{label=28;break;}
 case 27: 
 var $117=($114)+((-0.5));
 var $_sink_i_i33=$117;label=29;break;
 case 28: 
 var $119=($114)+((0.5));
 var $_sink_i_i33=$119;label=29;break;
 case 29: 
 var $_sink_i_i33;
 var $120$0=$_sink_i_i33>>>0;var $120$1=(Math_abs($_sink_i_i33) >= 1 ? ($_sink_i_i33 > 0 ? Math_min(Math_floor(($_sink_i_i33)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i_i33 - +(((~~($_sink_i_i33)))>>>0))/4294967296)))>>>0) : 0);
 var $121$0=_i64Add($120$0,$120$1,$107$0,$107$1);var $121$1=tempRet0;
 var $122$1=$121$1;var $122$0=$121$0;label=30;break;
 case 30: 
 var $122$0;
 var $122$1;
 var $st$36$0=(($33)|0);
 HEAP32[(($st$36$0)>>2)]=$122$0;
 var $st$37$1=(($33+4)|0);
 HEAP32[(($st$37$1)>>2)]=$122$1;
 label=31;break;
 case 31: 
 __ZN10ClipperLib7Clipper16AddIntersectNodeEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e_139,$75,$pt);
 __ZN10ClipperLib7Clipper18SwapPositionsInSELEPNS_5TEdgeES2_($this,$e_139,$75);
 var $123=(($e_139+124)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=($124|0)==0;
 if($125){var $e_1_lcssa=$e_139;var $isModified_1_ph41=1;label=32;break;}else{var $isModified_1_ph43=1;var $e_1_ph44=$e_139;var $73=$124;label=19;break;}
 case 32: 
 var $isModified_1_ph41;
 var $e_1_lcssa;
 var $126=(($e_1_lcssa+128)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==0;
 if($128){label=34;break;}else{label=33;break;}
 case 33: 
 var $130=(($127+124)|0);
 HEAP32[(($130)>>2)]=0;
 var $extract_t=(($isModified_1_ph41<<24)>>24)==0;
 if($extract_t){label=34;break;}else{label=17;break;}
 case 34: 
 HEAP32[(($30)>>2)]=0;
 label=35;break;
 case 35: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper18FixupIntersectionsEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_i=sp;
 var $1=(($this+56)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){var $_0=1;label=17;break;}else{label=2;break;}
 case 2: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($this+52)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=($8|0)==0;
 if($10){label=5;break;}else{label=3;break;}
 case 3: 
 var $12=(($8+128)|0);
 HEAP32[(($12)>>2)]=0;
 var $e_0_in9_i=(($8+116)|0);
 var $e_010_i=HEAP32[(($e_0_in9_i)>>2)];
 var $13=($e_010_i|0)==0;
 if($13){label=5;break;}else{var $e_011_i=$e_010_i;label=4;break;}
 case 4: 
 var $e_011_i;
 var $14=(($e_011_i+120)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($e_011_i+128)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($15+124)|0);
 HEAP32[(($17)>>2)]=$e_011_i;
 var $18=(($e_011_i+124)|0);
 HEAP32[(($18)>>2)]=0;
 var $e_0_in_i=(($e_011_i+116)|0);
 var $e_0_i=HEAP32[(($e_0_in_i)>>2)];
 var $19=($e_0_i|0)==0;
 if($19){label=5;break;}else{var $e_011_i=$e_0_i;label=4;break;}
 case 5: 
 var $int1_030=HEAP32[(($1)>>2)];
 var $int2_0_in31=(($int1_030+24)|0);
 var $int2_032=HEAP32[(($int2_0_in31)>>2)];
 var $20=($int2_032|0)==0;
 if($20){var $int1_0_lcssa=$int1_030;label=15;break;}else{label=6;break;}
 case 6: 
 var $p_i_0_cast24=$p_i;
 var $int1_033=$int1_030;var $int2_0_in34=$int2_0_in31;var $int2_035=$int2_032;label=7;break;
 case 7: 
 var $int2_035;
 var $int2_0_in34;
 var $int1_033;
 var $22=(($int1_033)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+128)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($int1_033+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($25|0)==($27|0);
 if($28){var $e2_0=$25;var $e1_0=$23;label=14;break;}else{label=8;break;}
 case 8: 
 var $30=(($23+124)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==($27|0);
 if($32){var $e2_0=$27;var $e1_0=$23;label=14;break;}else{label=9;break;}
 case 9: 
 var $33=($int2_035|0)==0;
 if($33){var $_0=0;label=17;break;}else{var $int2_127=$int2_035;label=10;break;}
 case 10: 
 var $int2_127;
 var $34=(($int2_127)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+124)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($int2_127+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=13;break;}else{label=11;break;}
 case 11: 
 var $42=(($35+128)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==($39|0);
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($int2_127+24)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){var $_0=0;label=17;break;}else{var $int2_127=$47;label=10;break;}
 case 13: 
 var $$etemp$0$0=16;
 var $$etemp$0$1=0;
 var $50=(($int1_033+8)|0);
 var $51=$50;
 assert(16 % 1 === 0);HEAP32[(($p_i_0_cast24)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($p_i_0_cast24)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($p_i_0_cast24)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];HEAP32[((($p_i_0_cast24)+(12))>>2)]=HEAP32[((($51)+(12))>>2)];
 var $52=HEAP32[(($34)>>2)];
 HEAP32[(($22)>>2)]=$52;
 var $53=HEAP32[(($38)>>2)];
 HEAP32[(($26)>>2)]=$53;
 var $54=(($int2_127+8)|0);
 var $55=$54;
 assert(16 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];HEAP32[((($51)+(12))>>2)]=HEAP32[((($55)+(12))>>2)];
 HEAP32[(($34)>>2)]=$23;
 HEAP32[(($38)>>2)]=$27;
 assert(16 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($p_i_0_cast24)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($p_i_0_cast24)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($p_i_0_cast24)+(8))>>2)];HEAP32[((($55)+(12))>>2)]=HEAP32[((($p_i_0_cast24)+(12))>>2)];
 var $$etemp$1$0=16;
 var $$etemp$1$1=0;
 var $56=HEAP32[(($22)>>2)];
 var $57=HEAP32[(($26)>>2)];
 var $e2_0=$57;var $e1_0=$56;label=14;break;
 case 14: 
 var $e1_0;
 var $e2_0;
 __ZN10ClipperLib7Clipper18SwapPositionsInSELEPNS_5TEdgeES2_($this,$e1_0,$e2_0);
 var $int1_0=HEAP32[(($int2_0_in34)>>2)];
 var $int2_0_in=(($int1_0+24)|0);
 var $int2_0=HEAP32[(($int2_0_in)>>2)];
 var $58=($int2_0|0)==0;
 if($58){var $int1_0_lcssa=$int1_0;label=15;break;}else{var $int1_033=$int1_0;var $int2_0_in34=$int2_0_in;var $int2_035=$int2_0;label=7;break;}
 case 15: 
 var $int1_0_lcssa;
 HEAP32[(($9)>>2)]=0;
 var $59=(($int1_0_lcssa)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+128)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($int1_0_lcssa+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){var $_0=1;label=17;break;}else{label=16;break;}
 case 16: 
 var $67=(($60+124)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==($64|0);
 var $_0=$69;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper16AddIntersectNodeEPNS_5TEdgeES2_RKNS_8IntPointE($this,$e1,$e2,$pt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__Znwj(32);
 var $2=$1;
 var $3=(($1+8)|0);
 var $4=$1;
 HEAP32[(($4)>>2)]=$e1;
 var $5=(($1+4)|0);
 var $6=$5;
 HEAP32[(($6)>>2)]=$e2;
 var $7=$pt;
 assert(16 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];HEAP32[((($3)+(12))>>2)]=HEAP32[((($7)+(12))>>2)];
 var $8=(($1+24)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=0;
 var $10=(($this+56)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($10)>>2)]=$2;
 label=27;break;
 case 3: 
 var $15=(($1+16)|0);
 var $16=$15;
 var $ld$0$0=(($16)|0);
 var $17$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$1$1)>>2)];
 var $18=(($11+8)|0);
 var $19=(($11+16)|0);
 var $ld$2$0=(($19)|0);
 var $20$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($19+4)|0);
 var $20$1=HEAP32[(($ld$3$1)>>2)];
 var $21=(($17$0|0) == ($20$0|0)) & (($17$1|0) == ($20$1|0));
 if($21){label=4;break;}else{label=12;break;}
 case 4: 
 var $23=(($11)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==($e1|0);
 var $26=($24|0)==($e2|0);
 var $or_cond=$25|$26;
 if($or_cond){label=5;break;}else{label=9;break;}
 case 5: 
 var $28=(($18)|0);
 var $ld$4$0=(($28)|0);
 var $29$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$5$1)>>2)];
 var $30=$3;
 var $ld$6$0=(($30)|0);
 var $31$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$7$1)>>2)];
 var $32=(($29$1|0) > ($31$1|0)) | (((($29$1|0) == ($31$1|0) & ($29$0>>>0) >  ($31$0>>>0))));
 var $33=(($24+48)|0);
 var $34=HEAPF64[(($33)>>3)];
 var $35=$34>0;
 if($35){label=6;break;}else{var $_0_i19=$32;label=13;break;}
 case 6: 
 if($32){label=7;break;}else{label=14;break;}
 case 7: 
 var $37=(($11+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){var $101=0;var $100=$37;label=26;break;}else{label=8;break;}
 case 8: 
 var $40=$3;
 var $61=$37;var $60=$38;label=15;break;
 case 9: 
 var $42=(($11+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==($e1|0);
 var $45=($43|0)==($e2|0);
 var $or_cond_i18=$44|$45;
 var $46=(($18)|0);
 var $ld$8$0=(($46)|0);
 var $47$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($46+4)|0);
 var $47$1=HEAP32[(($ld$9$1)>>2)];
 var $48=$3;
 var $ld$10$0=(($48)|0);
 var $49$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($48+4)|0);
 var $49$1=HEAP32[(($ld$11$1)>>2)];
 var $50=(($47$1|0) > ($49$1|0)) | (((($47$1|0) == ($49$1|0) & ($47$0>>>0) >  ($49$0>>>0))));
 if($or_cond_i18){label=10;break;}else{var $_0_i19=$50;label=13;break;}
 case 10: 
 var $52=(($43+48)|0);
 var $53=HEAPF64[(($52)>>3)];
 var $54=$53>0;
 if($54){label=11;break;}else{var $_0_i19=$50;label=13;break;}
 case 11: 
 if($50){label=7;break;}else{label=14;break;}
 case 12: 
 var $57=(($17$1|0) > ($20$1|0)) | (((($17$1|0) == ($20$1|0) & ($17$0>>>0) >  ($20$0>>>0))));
 if($57){label=14;break;}else{label=7;break;}
 case 13: 
 var $_0_i19;
 if($_0_i19){label=14;break;}else{label=7;break;}
 case 14: 
 HEAP32[(($9)>>2)]=$11;
 HEAP32[(($10)>>2)]=$2;
 label=27;break;
 case 15: 
 var $60;
 var $61;
 var $62=(($60+8)|0);
 var $63=(($60+16)|0);
 var $ld$12$0=(($63)|0);
 var $64$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($63+4)|0);
 var $64$1=HEAP32[(($ld$13$1)>>2)];
 var $65=(($64$0|0) == ($17$0|0)) & (($64$1|0) == ($17$1|0));
 if($65){label=16;break;}else{label=23;break;}
 case 16: 
 var $67=(($60)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==($e1|0);
 if($69){label=18;break;}else{label=17;break;}
 case 17: 
 var $71=(($60+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)==($e1|0);
 if($73){label=18;break;}else{label=20;break;}
 case 18: 
 var $ld$14$0=(($40)|0);
 var $74$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($40+4)|0);
 var $74$1=HEAP32[(($ld$15$1)>>2)];
 var $75=(($62)|0);
 var $ld$16$0=(($75)|0);
 var $76$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($75+4)|0);
 var $76$1=HEAP32[(($ld$17$1)>>2)];
 var $77=(($74$1|0) > ($76$1|0)) | (((($74$1|0) == ($76$1|0) & ($74$0>>>0) >  ($76$0>>>0))));
 var $78=(($e1+48)|0);
 var $79=HEAPF64[(($78)>>3)];
 var $80=$79>0;
 if($80){label=19;break;}else{var $96=$77;label=24;break;}
 case 19: 
 if($77){var $101=$60;var $100=$61;label=26;break;}else{label=25;break;}
 case 20: 
 var $83=($68|0)==($e2|0);
 var $84=($72|0)==($e2|0);
 var $or_cond_i=$83|$84;
 var $ld$18$0=(($40)|0);
 var $85$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($40+4)|0);
 var $85$1=HEAP32[(($ld$19$1)>>2)];
 var $86=(($62)|0);
 var $ld$20$0=(($86)|0);
 var $87$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($86+4)|0);
 var $87$1=HEAP32[(($ld$21$1)>>2)];
 var $88=(($85$1|0) > ($87$1|0)) | (((($85$1|0) == ($87$1|0) & ($85$0>>>0) >  ($87$0>>>0))));
 if($or_cond_i){label=21;break;}else{var $96=$88;label=24;break;}
 case 21: 
 var $90=(($e2+48)|0);
 var $91=HEAPF64[(($90)>>3)];
 var $92=$91>0;
 if($92){label=22;break;}else{var $96=$88;label=24;break;}
 case 22: 
 if($88){var $101=$60;var $100=$61;label=26;break;}else{label=25;break;}
 case 23: 
 var $95=(($64$1|0) > ($17$1|0)) | (((($64$1|0) == ($17$1|0) & ($64$0>>>0) >  ($17$0>>>0))));
 if($95){label=25;break;}else{var $101=$60;var $100=$61;label=26;break;}
 case 24: 
 var $96;
 if($96){label=25;break;}else{var $101=$60;var $100=$61;label=26;break;}
 case 25: 
 var $97=(($60+24)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 if($99){var $101=0;var $100=$97;label=26;break;}else{var $61=$97;var $60=$98;label=15;break;}
 case 26: 
 var $100;
 var $101;
 HEAP32[(($9)>>2)]=$101;
 HEAP32[(($100)>>2)]=$2;
 label=27;break;
 case 27: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper8DoMaximaEPNS_5TEdgeEx($this,$e,$topY$0,$topY$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(($e+104)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=2;break;}
 case 2: 
 var $7=(($e+40)|0);
 var $ld$0$0=(($7)|0);
 var $8$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($7+4)|0);
 var $8$1=HEAP32[(($ld$1$1)>>2)];
 var $9=(($4+40)|0);
 var $ld$2$0=(($9)|0);
 var $10$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$3$1)>>2)];
 var $11=(($10$0|0) == ($8$0|0)) & (($10$1|0) == ($8$1|0));
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=(($4+112)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=(($4+32)|0);
 var $ld$4$0=(($16)|0);
 var $17$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($16+4)|0);
 var $17$1=HEAP32[(($ld$5$1)>>2)];
 var $18=(($e+32)|0);
 var $ld$6$0=(($18)|0);
 var $19$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($18+4)|0);
 var $19$1=HEAP32[(($ld$7$1)>>2)];
 var $20=(($17$0|0) == ($19$0|0)) & (($17$1|0) == ($19$1|0));
 if($20){var $_0_i=$4;var $23$1=$17$1;var $23$0=$17$0;label=6;break;}else{label=5;break;}
 case 5: 
 var $21=(($e+108)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_phi_trans_insert=(($e+32)|0);
 var $ld$8$0=(($_phi_trans_insert)|0);
 var $_pre$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($_phi_trans_insert+4)|0);
 var $_pre$1=HEAP32[(($ld$9$1)>>2)];
 var $_0_i=$22;var $23$1=$_pre$1;var $23$0=$_pre$0;label=6;break;
 case 6: 
 var $23$0;
 var $23$1;
 var $_0_i;
 var $eNext_0_in26=(($e+116)|0);
 var $eNext_027=HEAP32[(($eNext_0_in26)>>2)];
 var $24=($eNext_027|0)==($_0_i|0);
 if($24){label=13;break;}else{label=7;break;}
 case 7: 
 var $25=(($1)|0);
 var $26=(($1+8)|0);
 var $eNext_028=$eNext_027;label=8;break;
 case 8: 
 var $eNext_028;
 var $28=($eNext_028|0)==0;
 if($28){label=9;break;}else{label=12;break;}
 case 9: 
 var $30=___cxa_allocate_exception(16);
 var $31=$30;
 HEAP32[(($31)>>2)]=9408;
 var $32=(($30+4)|0);
 var $33=$32;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($33,672,14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=11;break; }
 case 10: 
 ___cxa_throw($30,14376,(576));
 throw "Reached an unreachable!";
 case 11: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=$35$0;
 var $37=$35$1;
 ___cxa_free_exception($30);
 var $_0=$37;var $_021=$36;label=37;break;
 case 12: 
 var $st$10$0=(($25)|0);
 HEAP32[(($st$10$0)>>2)]=$23$0;
 var $st$11$1=(($25+4)|0);
 HEAP32[(($st$11$1)>>2)]=$23$1;
 var $st$12$0=(($26)|0);
 HEAP32[(($st$12$0)>>2)]=$topY$0;
 var $st$13$1=(($26+4)|0);
 HEAP32[(($st$13$1)>>2)]=$topY$1;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$e,$eNext_028,$1,3);
 var $eNext_0_in=(($eNext_028+116)|0);
 var $eNext_0=HEAP32[(($eNext_0_in)>>2)];
 var $39=($eNext_0|0)==($_0_i|0);
 if($39){label=13;break;}else{var $eNext_028=$eNext_0;label=8;break;}
 case 13: 
 var $40=(($e+100)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)<0;
 var $43=(($_0_i+100)|0);
 var $44=HEAP32[(($43)>>2)];
 if($42){label=14;break;}else{label=31;break;}
 case 14: 
 var $46=($44|0)<0;
 if($46){label=15;break;}else{label=33;break;}
 case 15: 
 var $48=(($e+120)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=HEAP32[(($eNext_0_in26)>>2)];
 var $51=($49|0)!=0;
 var $_not_i=$51^1;
 var $52=($50|0)==0;
 var $or_cond_i=$52&$_not_i;
 if($or_cond_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $54=(($this+48)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==($e|0);
 if($56){label=17;break;}else{label=23;break;}
 case 17: 
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $59=(($49+116)|0);
 HEAP32[(($59)>>2)]=$50;
 label=20;break;
 case 19: 
 var $61=(($this+48)|0);
 HEAP32[(($61)>>2)]=$50;
 label=20;break;
 case 20: 
 if($52){label=22;break;}else{label=21;break;}
 case 21: 
 var $64=(($50+120)|0);
 HEAP32[(($64)>>2)]=$49;
 label=22;break;
 case 22: 
 HEAP32[(($eNext_0_in26)>>2)]=0;
 HEAP32[(($48)>>2)]=0;
 label=23;break;
 case 23: 
 var $66=(($_0_i+120)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($_0_i+116)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)!=0;
 var $_not_i23=$70^1;
 var $71=($69|0)==0;
 var $or_cond_i24=$71&$_not_i23;
 if($or_cond_i24){label=24;break;}else{label=25;break;}
 case 24: 
 var $73=(($this+48)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($74|0)==($_0_i|0);
 if($75){label=25;break;}else{label=36;break;}
 case 25: 
 if($70){label=26;break;}else{label=27;break;}
 case 26: 
 var $78=(($67+116)|0);
 HEAP32[(($78)>>2)]=$69;
 label=28;break;
 case 27: 
 var $80=(($this+48)|0);
 HEAP32[(($80)>>2)]=$69;
 label=28;break;
 case 28: 
 if($71){label=30;break;}else{label=29;break;}
 case 29: 
 var $83=(($69+120)|0);
 HEAP32[(($83)>>2)]=$67;
 label=30;break;
 case 30: 
 HEAP32[(($68)>>2)]=0;
 HEAP32[(($66)>>2)]=0;
 label=36;break;
 case 31: 
 var $85=($44|0)>-1;
 if($85){label=32;break;}else{label=33;break;}
 case 32: 
 var $87=(($2)|0);
 var $st$14$0=(($87)|0);
 HEAP32[(($st$14$0)>>2)]=$23$0;
 var $st$15$1=(($87+4)|0);
 HEAP32[(($st$15$1)>>2)]=$23$1;
 var $88=(($2+8)|0);
 var $st$16$0=(($88)|0);
 HEAP32[(($st$16$0)>>2)]=$topY$0;
 var $st$17$1=(($88+4)|0);
 HEAP32[(($st$17$1)>>2)]=$topY$1;
 __ZN10ClipperLib7Clipper14IntersectEdgesEPNS_5TEdgeES2_RKNS_8IntPointENS_17IntersectProtectsE($this,$e,$_0_i,$2,0);
 label=36;break;
 case 33: 
 var $90=___cxa_allocate_exception(16);
 var $91=$90;
 HEAP32[(($91)>>2)]=9408;
 var $92=(($90+4)|0);
 var $93=$92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($93,672,14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=35;break; }
 case 34: 
 ___cxa_throw($90,14376,(576));
 throw "Reached an unreachable!";
 case 35: 
 var $95$0 = ___cxa_find_matching_catch(-1, -1); var $95$1 = tempRet0;
 var $96=$95$0;
 var $97=$95$1;
 ___cxa_free_exception($90);
 var $_0=$97;var $_021=$96;label=37;break;
 case 36: 
 STACKTOP=sp;return;
 case 37: 
 var $_021;
 var $_0;
 var $99$0=$_021;
 var $99$1=0;
 var $100$0=$99$0;
 var $100$1=$_0;
 ___resumeException($100$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIN10ClipperLib9ExPolygonENS_9allocatorIS2_EEE7reserveEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=2;break;}else{label=21;break;}
 case 2: 
 var $11=(($this+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=((($13)-($6))|0);
 var $15=(((($14|0))/(24))&-1);
 var $16=($__n|0)==0;
 if($16){var $21=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $18=((($__n)*(24))&-1);
 var $19=__Znwj($18);
 var $20=$19;
 var $21=$20;label=4;break;
 case 4: 
 var $21;
 var $22=(($21+((($15)*(24))&-1))|0);
 var $23=(($21+((($__n)*(24))&-1))|0);
 var $24=($12|0)==($4|0);
 if($24){var $34=$4;var $33=$22;var $32=$4;label=9;break;}else{var $_049_i=$12;var $25=$22;label=5;break;}
 case 5: 
 var $25;
 var $_049_i;
 var $26=((($25)-(24))|0);
 var $27=((($_049_i)-(24))|0);
 var $28=($26|0)==0;
 if($28){label=7;break;}else{label=6;break;}
 case 6: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonC1ERKS0_($26,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 var $30=($27|0)==($4|0);
 if($30){label=8;break;}else{var $_049_i=$27;var $25=$26;label=5;break;}
 case 8: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre=HEAP32[(($11)>>2)];
 var $34=$_pre_i;var $33=$26;var $32=$_pre;label=9;break;
 case 9: 
 var $32;
 var $33;
 var $34;
 HEAP32[(($3)>>2)]=$33;
 HEAP32[(($11)>>2)]=$22;
 HEAP32[(($1)>>2)]=$23;
 var $35=$32;label=10;break;
 case 10: 
 var $35;
 var $36=($34|0)==($35|0);
 if($36){label=13;break;}else{label=11;break;}
 case 11: 
 var $38=((($35)-(24))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $35=$38;label=10;break; } else { label=12;break; }
 case 12: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 var $41=$40$0;
 ___cxa_call_unexpected($41);
 throw "Reached an unreachable!";
 case 13: 
 var $42=($34|0)==0;
 if($42){label=21;break;}else{label=14;break;}
 case 14: 
 var $44=$34;
 __ZdlPv($44);
 label=21;break;
 case 15: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 var $47=$22;label=16;break;
 case 16: 
 var $47;
 var $48=($25|0)==($47|0);
 if($48){label=19;break;}else{label=17;break;}
 case 17: 
 var $50=((($47)-(24))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $47=$50;label=16;break; } else { label=18;break; }
 case 18: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=$52$0;
 ___cxa_call_unexpected($53);
 throw "Reached an unreachable!";
 case 19: 
 var $54=($21|0)==0;
 if($54){label=22;break;}else{label=20;break;}
 case 20: 
 var $56=$21;
 __ZdlPv($56);
 label=22;break;
 case 21: 
 return;
 case 22: 
 ___resumeException($46$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib7Clipper10JoinPointsEPKNS_7JoinRecERPNS_5OutPtES6_($this,$j,$p1,$p2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+208)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(sp)+(64);
 var $6=(sp)+(80);
 var $7=(sp)+(96);
 var $8=(sp)+(112);
 var $pp1a=(sp)+(128);
 var $pp2a=(sp)+(136);
 var $pt1=(sp)+(144);
 var $pt2=(sp)+(160);
 var $pt3=(sp)+(176);
 var $pt4=(sp)+(192);
 var $9=(($j+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($10<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($j+72)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($12+($16<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($14|0)==0;
 var $20=($18|0)==0;
 var $or_cond=$19|$20;
 if($or_cond){var $_0=0;label=90;break;}else{label=2;break;}
 case 2: 
 var $22=(($14+16)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($pp1a)>>2)]=$23;
 var $24=(($18+16)|0);
 var $25=HEAP32[(($24)>>2)];
 HEAP32[(($pp2a)>>2)]=$25;
 var $26=(($j+40)|0);
 var $27=$pt1;
 var $28=$26;
 assert(16 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];HEAP32[((($27)+(12))>>2)]=HEAP32[((($28)+(12))>>2)];
 var $29=(($j+56)|0);
 var $30=$pt2;
 var $31=$29;
 assert(16 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];
 var $32=$pt3;
 var $33=$j;
 assert(16 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];HEAP32[((($32)+(12))>>2)]=HEAP32[((($33)+(12))>>2)];
 var $34=(($j+16)|0);
 var $35=$pt4;
 var $36=$34;
 assert(16 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];HEAP32[((($35)+(12))>>2)]=HEAP32[((($36)+(12))>>2)];
 var $37=__ZN10ClipperLib11FindSegmentERPNS_5OutPtERNS_8IntPointES4_($pp1a,$pt1,$pt2);
 if($37){label=3;break;}else{var $_0=0;label=90;break;}
 case 3: 
 var $39=($14|0)==($18|0);
 if($39){label=4;break;}else{label=5;break;}
 case 4: 
 var $41=HEAP32[(($pp1a)>>2)];
 var $42=(($41+24)|0);
 var $43=HEAP32[(($42)>>2)];
 HEAP32[(($pp2a)>>2)]=$43;
 var $44=__ZN10ClipperLib11FindSegmentERPNS_5OutPtERNS_8IntPointES4_($pp2a,$pt3,$pt4);
 var $_not=$44^1;
 var $45=HEAP32[(($pp2a)>>2)];
 var $46=($45|0)==($41|0);
 var $or_cond293=$46|$_not;
 if($or_cond293){var $_0=0;label=90;break;}else{label=6;break;}
 case 5: 
 var $48=__ZN10ClipperLib11FindSegmentERPNS_5OutPtERNS_8IntPointES4_($pp2a,$pt3,$pt4);
 if($48){label=6;break;}else{var $_0=0;label=90;break;}
 case 6: 
 var $_sroa_0169_0__idx=(($pt1)|0);
 var $ld$0$0=(($_sroa_0169_0__idx)|0);
 var $_sroa_0169_0_copyload$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($_sroa_0169_0__idx+4)|0);
 var $_sroa_0169_0_copyload$1=HEAP32[(($ld$1$1)>>2)];
 var $_sroa_1170_8__idx171=(($pt1+8)|0);
 var $ld$2$0=(($_sroa_1170_8__idx171)|0);
 var $_sroa_1170_8_copyload$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($_sroa_1170_8__idx171+4)|0);
 var $_sroa_1170_8_copyload$1=HEAP32[(($ld$3$1)>>2)];
 var $_sroa_0194_0__idx=(($pt2)|0);
 var $ld$4$0=(($_sroa_0194_0__idx)|0);
 var $_sroa_0194_0_copyload$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($_sroa_0194_0__idx+4)|0);
 var $_sroa_0194_0_copyload$1=HEAP32[(($ld$5$1)>>2)];
 var $_sroa_1195_8__idx196=(($pt2+8)|0);
 var $ld$6$0=(($_sroa_1195_8__idx196)|0);
 var $_sroa_1195_8_copyload$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($_sroa_1195_8__idx196+4)|0);
 var $_sroa_1195_8_copyload$1=HEAP32[(($ld$7$1)>>2)];
 var $_sroa_0223_0__idx=(($pt3)|0);
 var $ld$8$0=(($_sroa_0223_0__idx)|0);
 var $_sroa_0223_0_copyload$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($_sroa_0223_0__idx+4)|0);
 var $_sroa_0223_0_copyload$1=HEAP32[(($ld$9$1)>>2)];
 var $_sroa_1224_8__idx225=(($pt3+8)|0);
 var $ld$10$0=(($_sroa_1224_8__idx225)|0);
 var $_sroa_1224_8_copyload$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($_sroa_1224_8__idx225+4)|0);
 var $_sroa_1224_8_copyload$1=HEAP32[(($ld$11$1)>>2)];
 var $_sroa_0248_0__idx=(($pt4)|0);
 var $ld$12$0=(($_sroa_0248_0__idx)|0);
 var $_sroa_0248_0_copyload$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($_sroa_0248_0__idx+4)|0);
 var $_sroa_0248_0_copyload$1=HEAP32[(($ld$13$1)>>2)];
 var $_sroa_1249_8__idx250=(($pt4+8)|0);
 var $ld$14$0=(($_sroa_1249_8__idx250)|0);
 var $_sroa_1249_8_copyload$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($_sroa_1249_8__idx250+4)|0);
 var $_sroa_1249_8_copyload$1=HEAP32[(($ld$15$1)>>2)];
 var $50=(($_sroa_1170_8_copyload$0|0) == ($_sroa_1195_8_copyload$0|0)) & (($_sroa_1170_8_copyload$1|0) == ($_sroa_1195_8_copyload$1|0));
 if($50){label=8;break;}else{label=7;break;}
 case 7: 
 var $52$0=_i64Subtract($_sroa_0169_0_copyload$0,$_sroa_0169_0_copyload$1,$_sroa_0194_0_copyload$0,$_sroa_0194_0_copyload$1);var $52$1=tempRet0;
 var $53$0=_i64Subtract($_sroa_1170_8_copyload$0,$_sroa_1170_8_copyload$1,$_sroa_1195_8_copyload$0,$_sroa_1195_8_copyload$1);var $53$1=tempRet0;
 var $54$0=___divdi3($52$0,$52$1,$53$0,$53$1);var $54$1=tempRet0;
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $55=(($54$1|0) < ($$etemp$16$1|0)) | (((($54$1|0) == ($$etemp$16$1|0) & ($54$0>>>0) <  ($$etemp$16$0>>>0))));
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $56$0=_i64Subtract($$etemp$17$0,$$etemp$17$1,$54$0,$54$1);var $56$1=tempRet0;
 var $57$0=$55?$56$0:$54$0;
 var $57$1=$55?$56$1:$54$1;
 var $$etemp$18$0=1;
 var $$etemp$18$1=0;
 var $58=(($57$1|0) > ($$etemp$18$1|0)) | (((($57$1|0) == ($$etemp$18$1|0) & ($57$0>>>0) >  ($$etemp$18$0>>>0))));
 if($58){label=8;break;}else{label=12;break;}
 case 8: 
 var $59=(($_sroa_0169_0_copyload$1|0) > ($_sroa_0194_0_copyload$1|0)) | (((($_sroa_0169_0_copyload$1|0) == ($_sroa_0194_0_copyload$1|0) & ($_sroa_0169_0_copyload$0>>>0) >  ($_sroa_0194_0_copyload$0>>>0))));
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload$0=$59?$_sroa_1170_8_copyload$0:$_sroa_1195_8_copyload$0;
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload$1=$59?$_sroa_1170_8_copyload$1:$_sroa_1195_8_copyload$1;
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload$0=$59?$_sroa_0169_0_copyload$0:$_sroa_0194_0_copyload$0;
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload$1=$59?$_sroa_0169_0_copyload$1:$_sroa_0194_0_copyload$1;
 var $_sroa_0194_0_copyload__sroa_0169_0_copyload$0=$59?$_sroa_0194_0_copyload$0:$_sroa_0169_0_copyload$0;
 var $_sroa_0194_0_copyload__sroa_0169_0_copyload$1=$59?$_sroa_0194_0_copyload$1:$_sroa_0169_0_copyload$1;
 var $60=(($_sroa_0223_0_copyload$1|0) > ($_sroa_0248_0_copyload$1|0)) | (((($_sroa_0223_0_copyload$1|0) == ($_sroa_0248_0_copyload$1|0) & ($_sroa_0223_0_copyload$0>>>0) >  ($_sroa_0248_0_copyload$0>>>0))));
 var $_sroa_1224_8_copyload__sroa_1249_8_copyload$0=$60?$_sroa_1224_8_copyload$0:$_sroa_1249_8_copyload$0;
 var $_sroa_1224_8_copyload__sroa_1249_8_copyload$1=$60?$_sroa_1224_8_copyload$1:$_sroa_1249_8_copyload$1;
 var $_sroa_0223_0_copyload__sroa_0248_0_copyload$0=$60?$_sroa_0223_0_copyload$0:$_sroa_0248_0_copyload$0;
 var $_sroa_0223_0_copyload__sroa_0248_0_copyload$1=$60?$_sroa_0223_0_copyload$1:$_sroa_0248_0_copyload$1;
 var $_sroa_0248_0_copyload__sroa_0223_0_copyload$0=$60?$_sroa_0248_0_copyload$0:$_sroa_0223_0_copyload$0;
 var $_sroa_0248_0_copyload__sroa_0223_0_copyload$1=$60?$_sroa_0248_0_copyload$1:$_sroa_0223_0_copyload$1;
 var $61=(($_sroa_0194_0_copyload__sroa_0169_0_copyload$1|0) > ($_sroa_0248_0_copyload__sroa_0223_0_copyload$1|0)) | (((($_sroa_0194_0_copyload__sroa_0169_0_copyload$1|0) == ($_sroa_0248_0_copyload__sroa_0223_0_copyload$1|0) & ($_sroa_0194_0_copyload__sroa_0169_0_copyload$0>>>0) >  ($_sroa_0248_0_copyload__sroa_0223_0_copyload$0>>>0))));
 if($61){label=9;break;}else{label=10;break;}
 case 9: 
 var $_sroa_1195_8_copyload__sroa_1170_8_copyload$0=$59?$_sroa_1195_8_copyload$0:$_sroa_1170_8_copyload$0;
 var $_sroa_1195_8_copyload__sroa_1170_8_copyload$1=$59?$_sroa_1195_8_copyload$1:$_sroa_1170_8_copyload$1;
 var $storemerge288$1=$_sroa_1195_8_copyload__sroa_1170_8_copyload$1;var $storemerge288$0=$_sroa_1195_8_copyload__sroa_1170_8_copyload$0;var $storemerge291$1=$_sroa_0194_0_copyload__sroa_0169_0_copyload$1;var $storemerge291$0=$_sroa_0194_0_copyload__sroa_0169_0_copyload$0;label=11;break;
 case 10: 
 var $_sroa_1249_8_copyload__sroa_1224_8_copyload$0=$60?$_sroa_1249_8_copyload$0:$_sroa_1224_8_copyload$0;
 var $_sroa_1249_8_copyload__sroa_1224_8_copyload$1=$60?$_sroa_1249_8_copyload$1:$_sroa_1224_8_copyload$1;
 var $storemerge288$1=$_sroa_1249_8_copyload__sroa_1224_8_copyload$1;var $storemerge288$0=$_sroa_1249_8_copyload__sroa_1224_8_copyload$0;var $storemerge291$1=$_sroa_0248_0_copyload__sroa_0223_0_copyload$1;var $storemerge291$0=$_sroa_0248_0_copyload__sroa_0223_0_copyload$0;label=11;break;
 case 11: 
 var $storemerge291$0;
 var $storemerge291$1;
 var $storemerge288$0;
 var $storemerge288$1;
 var $st$19$0=(($_sroa_0169_0__idx)|0);
 HEAP32[(($st$19$0)>>2)]=$storemerge291$0;
 var $st$20$1=(($_sroa_0169_0__idx+4)|0);
 HEAP32[(($st$20$1)>>2)]=$storemerge291$1;
 var $st$21$0=(($_sroa_1170_8__idx171)|0);
 HEAP32[(($st$21$0)>>2)]=$storemerge288$0;
 var $st$22$1=(($_sroa_1170_8__idx171+4)|0);
 HEAP32[(($st$22$1)>>2)]=$storemerge288$1;
 var $65=(($_sroa_0169_0_copyload__sroa_0194_0_copyload$1|0) < ($_sroa_0223_0_copyload__sroa_0248_0_copyload$1|0)) | (((($_sroa_0169_0_copyload__sroa_0194_0_copyload$1|0) == ($_sroa_0223_0_copyload__sroa_0248_0_copyload$1|0) & ($_sroa_0169_0_copyload__sroa_0194_0_copyload$0>>>0) <  ($_sroa_0223_0_copyload__sroa_0248_0_copyload$0>>>0))));
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$0=$65?$_sroa_0169_0_copyload__sroa_0194_0_copyload$0:$_sroa_0223_0_copyload__sroa_0248_0_copyload$0;
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$1=$65?$_sroa_0169_0_copyload__sroa_0194_0_copyload$1:$_sroa_0223_0_copyload__sroa_0248_0_copyload$1;
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload__sroa_1224_8_copyload__sroa_1249_8_copyload$0=$65?$_sroa_1170_8_copyload__sroa_1195_8_copyload$0:$_sroa_1224_8_copyload__sroa_1249_8_copyload$0;
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload__sroa_1224_8_copyload__sroa_1249_8_copyload$1=$65?$_sroa_1170_8_copyload__sroa_1195_8_copyload$1:$_sroa_1224_8_copyload__sroa_1249_8_copyload$1;
 var $st$23$0=(($_sroa_0194_0__idx)|0);
 HEAP32[(($st$23$0)>>2)]=$_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$0;
 var $st$24$1=(($_sroa_0194_0__idx+4)|0);
 HEAP32[(($st$24$1)>>2)]=$_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$1;
 var $st$25$0=(($_sroa_1195_8__idx196)|0);
 HEAP32[(($st$25$0)>>2)]=$_sroa_1170_8_copyload__sroa_1195_8_copyload__sroa_1224_8_copyload__sroa_1249_8_copyload$0;
 var $st$26$1=(($_sroa_1195_8__idx196+4)|0);
 HEAP32[(($st$26$1)>>2)]=$_sroa_1170_8_copyload__sroa_1195_8_copyload__sroa_1224_8_copyload__sroa_1249_8_copyload$1;
 var $66=(($storemerge291$1|0) < ($_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$1|0)) | (((($storemerge291$1|0) == ($_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$1|0) & ($storemerge291$0>>>0) <  ($_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$0>>>0))));
 if($66){var $75$1=$storemerge291$1;var $75$0=$storemerge291$0;var $74$1=$storemerge288$1;var $74$0=$storemerge288$0;var $_sroa_0130_0_copyload$1=$_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$1;var $_sroa_0130_0_copyload$0=$_sroa_0169_0_copyload__sroa_0194_0_copyload__sroa_0223_0_copyload__sroa_0248_0_copyload$0;var $_sroa_1131_8_copyload$1=$_sroa_1170_8_copyload__sroa_1195_8_copyload__sroa_1224_8_copyload__sroa_1249_8_copyload$1;var $_sroa_1131_8_copyload$0=$_sroa_1170_8_copyload__sroa_1195_8_copyload__sroa_1224_8_copyload__sroa_1249_8_copyload$0;label=16;break;}else{var $_0=0;label=90;break;}
 case 12: 
 var $67=(($_sroa_1170_8_copyload$1|0) < ($_sroa_1195_8_copyload$1|0)) | (((($_sroa_1170_8_copyload$1|0) == ($_sroa_1195_8_copyload$1|0) & ($_sroa_1170_8_copyload$0>>>0) <  ($_sroa_1195_8_copyload$0>>>0))));
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload273$0=$67?$_sroa_1170_8_copyload$0:$_sroa_1195_8_copyload$0;
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload273$1=$67?$_sroa_1170_8_copyload$1:$_sroa_1195_8_copyload$1;
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload274$0=$67?$_sroa_0169_0_copyload$0:$_sroa_0194_0_copyload$0;
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload274$1=$67?$_sroa_0169_0_copyload$1:$_sroa_0194_0_copyload$1;
 var $_sroa_1195_8_copyload__sroa_1170_8_copyload275$0=$67?$_sroa_1195_8_copyload$0:$_sroa_1170_8_copyload$0;
 var $_sroa_1195_8_copyload__sroa_1170_8_copyload275$1=$67?$_sroa_1195_8_copyload$1:$_sroa_1170_8_copyload$1;
 var $68=(($_sroa_1224_8_copyload$1|0) < ($_sroa_1249_8_copyload$1|0)) | (((($_sroa_1224_8_copyload$1|0) == ($_sroa_1249_8_copyload$1|0) & ($_sroa_1224_8_copyload$0>>>0) <  ($_sroa_1249_8_copyload$0>>>0))));
 var $_sroa_1224_8_copyload__sroa_1249_8_copyload281$0=$68?$_sroa_1224_8_copyload$0:$_sroa_1249_8_copyload$0;
 var $_sroa_1224_8_copyload__sroa_1249_8_copyload281$1=$68?$_sroa_1224_8_copyload$1:$_sroa_1249_8_copyload$1;
 var $_sroa_0223_0_copyload__sroa_0248_0_copyload282$0=$68?$_sroa_0223_0_copyload$0:$_sroa_0248_0_copyload$0;
 var $_sroa_0223_0_copyload__sroa_0248_0_copyload282$1=$68?$_sroa_0223_0_copyload$1:$_sroa_0248_0_copyload$1;
 var $_sroa_1249_8_copyload__sroa_1224_8_copyload284$0=$68?$_sroa_1249_8_copyload$0:$_sroa_1224_8_copyload$0;
 var $_sroa_1249_8_copyload__sroa_1224_8_copyload284$1=$68?$_sroa_1249_8_copyload$1:$_sroa_1224_8_copyload$1;
 var $69=(($_sroa_1195_8_copyload__sroa_1170_8_copyload275$1|0) < ($_sroa_1249_8_copyload__sroa_1224_8_copyload284$1|0)) | (((($_sroa_1195_8_copyload__sroa_1170_8_copyload275$1|0) == ($_sroa_1249_8_copyload__sroa_1224_8_copyload284$1|0) & ($_sroa_1195_8_copyload__sroa_1170_8_copyload275$0>>>0) <  ($_sroa_1249_8_copyload__sroa_1224_8_copyload284$0>>>0))));
 if($69){label=13;break;}else{label=14;break;}
 case 13: 
 var $_sroa_0194_0_copyload__sroa_0169_0_copyload276$0=$67?$_sroa_0194_0_copyload$0:$_sroa_0169_0_copyload$0;
 var $_sroa_0194_0_copyload__sroa_0169_0_copyload276$1=$67?$_sroa_0194_0_copyload$1:$_sroa_0169_0_copyload$1;
 var $storemerge$1=$_sroa_1195_8_copyload__sroa_1170_8_copyload275$1;var $storemerge$0=$_sroa_1195_8_copyload__sroa_1170_8_copyload275$0;var $storemerge287$1=$_sroa_0194_0_copyload__sroa_0169_0_copyload276$1;var $storemerge287$0=$_sroa_0194_0_copyload__sroa_0169_0_copyload276$0;label=15;break;
 case 14: 
 var $_sroa_0248_0_copyload__sroa_0223_0_copyload283$0=$68?$_sroa_0248_0_copyload$0:$_sroa_0223_0_copyload$0;
 var $_sroa_0248_0_copyload__sroa_0223_0_copyload283$1=$68?$_sroa_0248_0_copyload$1:$_sroa_0223_0_copyload$1;
 var $storemerge$1=$_sroa_1249_8_copyload__sroa_1224_8_copyload284$1;var $storemerge$0=$_sroa_1249_8_copyload__sroa_1224_8_copyload284$0;var $storemerge287$1=$_sroa_0248_0_copyload__sroa_0223_0_copyload283$1;var $storemerge287$0=$_sroa_0248_0_copyload__sroa_0223_0_copyload283$0;label=15;break;
 case 15: 
 var $storemerge287$0;
 var $storemerge287$1;
 var $storemerge$0;
 var $storemerge$1;
 var $st$27$0=(($_sroa_0169_0__idx)|0);
 HEAP32[(($st$27$0)>>2)]=$storemerge287$0;
 var $st$28$1=(($_sroa_0169_0__idx+4)|0);
 HEAP32[(($st$28$1)>>2)]=$storemerge287$1;
 var $st$29$0=(($_sroa_1170_8__idx171)|0);
 HEAP32[(($st$29$0)>>2)]=$storemerge$0;
 var $st$30$1=(($_sroa_1170_8__idx171+4)|0);
 HEAP32[(($st$30$1)>>2)]=$storemerge$1;
 var $72=(($_sroa_1170_8_copyload__sroa_1195_8_copyload273$1|0) > ($_sroa_1224_8_copyload__sroa_1249_8_copyload281$1|0)) | (((($_sroa_1170_8_copyload__sroa_1195_8_copyload273$1|0) == ($_sroa_1224_8_copyload__sroa_1249_8_copyload281$1|0) & ($_sroa_1170_8_copyload__sroa_1195_8_copyload273$0>>>0) >  ($_sroa_1224_8_copyload__sroa_1249_8_copyload281$0>>>0))));
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload274__sroa_0223_0_copyload__sroa_0248_0_copyload282$0=$72?$_sroa_0169_0_copyload__sroa_0194_0_copyload274$0:$_sroa_0223_0_copyload__sroa_0248_0_copyload282$0;
 var $_sroa_0169_0_copyload__sroa_0194_0_copyload274__sroa_0223_0_copyload__sroa_0248_0_copyload282$1=$72?$_sroa_0169_0_copyload__sroa_0194_0_copyload274$1:$_sroa_0223_0_copyload__sroa_0248_0_copyload282$1;
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$0=$72?$_sroa_1170_8_copyload__sroa_1195_8_copyload273$0:$_sroa_1224_8_copyload__sroa_1249_8_copyload281$0;
 var $_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$1=$72?$_sroa_1170_8_copyload__sroa_1195_8_copyload273$1:$_sroa_1224_8_copyload__sroa_1249_8_copyload281$1;
 var $st$31$0=(($_sroa_0194_0__idx)|0);
 HEAP32[(($st$31$0)>>2)]=$_sroa_0169_0_copyload__sroa_0194_0_copyload274__sroa_0223_0_copyload__sroa_0248_0_copyload282$0;
 var $st$32$1=(($_sroa_0194_0__idx+4)|0);
 HEAP32[(($st$32$1)>>2)]=$_sroa_0169_0_copyload__sroa_0194_0_copyload274__sroa_0223_0_copyload__sroa_0248_0_copyload282$1;
 var $st$33$0=(($_sroa_1195_8__idx196)|0);
 HEAP32[(($st$33$0)>>2)]=$_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$0;
 var $st$34$1=(($_sroa_1195_8__idx196+4)|0);
 HEAP32[(($st$34$1)>>2)]=$_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$1;
 var $73=(($storemerge$1|0) > ($_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$1|0)) | (((($storemerge$1|0) == ($_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$1|0) & ($storemerge$0>>>0) >  ($_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$0>>>0))));
 if($73){var $75$1=$storemerge287$1;var $75$0=$storemerge287$0;var $74$1=$storemerge$1;var $74$0=$storemerge$0;var $_sroa_0130_0_copyload$1=$_sroa_0169_0_copyload__sroa_0194_0_copyload274__sroa_0223_0_copyload__sroa_0248_0_copyload282$1;var $_sroa_0130_0_copyload$0=$_sroa_0169_0_copyload__sroa_0194_0_copyload274__sroa_0223_0_copyload__sroa_0248_0_copyload282$0;var $_sroa_1131_8_copyload$1=$_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$1;var $_sroa_1131_8_copyload$0=$_sroa_1170_8_copyload__sroa_1195_8_copyload273__sroa_1224_8_copyload__sroa_1249_8_copyload281$0;label=16;break;}else{var $_0=0;label=90;break;}
 case 16: 
 var $_sroa_1131_8_copyload$0;
 var $_sroa_1131_8_copyload$1;
 var $_sroa_0130_0_copyload$0;
 var $_sroa_0130_0_copyload$1;
 var $74$0;
 var $74$1;
 var $75$0;
 var $75$1;
 var $76=HEAP32[(($pp1a)>>2)];
 var $77=(($76+28)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($76+8)|0);
 var $ld$35$0=(($79)|0);
 var $80$0=HEAP32[(($ld$35$0)>>2)];
 var $ld$36$1=(($79+4)|0);
 var $80$1=HEAP32[(($ld$36$1)>>2)];
 var $81=(($80$0|0) == ($75$0|0)) & (($80$1|0) == ($75$1|0));
 if($81){label=17;break;}else{label=19;break;}
 case 17: 
 var $82=(($76+16)|0);
 var $ld$37$0=(($82)|0);
 var $83$0=HEAP32[(($ld$37$0)>>2)];
 var $ld$38$1=(($82+4)|0);
 var $83$1=HEAP32[(($ld$38$1)>>2)];
 var $84=(($83$0|0) == ($74$0|0)) & (($83$1|0) == ($74$1|0));
 if($84){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($p1)>>2)]=$76;
 var $118=$76;label=28;break;
 case 19: 
 var $86=(($78+8)|0);
 var $ld$39$0=(($86)|0);
 var $87$0=HEAP32[(($ld$39$0)>>2)];
 var $ld$40$1=(($86+4)|0);
 var $87$1=HEAP32[(($ld$40$1)>>2)];
 var $88=(($87$0|0) == ($75$0|0)) & (($87$1|0) == ($75$1|0));
 if($88){label=20;break;}else{label=22;break;}
 case 20: 
 var $89=(($78+16)|0);
 var $ld$41$0=(($89)|0);
 var $90$0=HEAP32[(($ld$41$0)>>2)];
 var $ld$42$1=(($89+4)|0);
 var $90$1=HEAP32[(($ld$42$1)>>2)];
 var $91=(($90$0|0) == ($74$0|0)) & (($90$1|0) == ($74$1|0));
 if($91){label=21;break;}else{label=22;break;}
 case 21: 
 HEAP32[(($p1)>>2)]=$78;
 var $118=$78;label=28;break;
 case 22: 
 var $93=$7;
 assert(16 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];HEAP32[((($93)+(12))>>2)]=HEAP32[((($27)+(12))>>2)];
 var $94=($76|0)==($78|0);
 if($94){label=23;break;}else{label=24;break;}
 case 23: 
 var $96=___cxa_allocate_exception(4);
 var $97=$96;
 HEAP32[(($97)>>2)]=5664;
 ___cxa_throw($96,12808,0);
 throw "Reached an unreachable!";
 case 24: 
 var $tmp83=$7;
 var $99=__Znwj(32);
 var $100=$99;
 var $101=(($99+8)|0);
 assert(16 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($tmp83)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($tmp83)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($tmp83)+(8))>>2)];HEAP32[((($101)+(12))>>2)]=HEAP32[((($tmp83)+(12))>>2)];
 var $102=(($76+24)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==($78|0);
 if($104){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($102)>>2)]=$100;
 var $106=(($78+28)|0);
 HEAP32[(($106)>>2)]=$100;
 var $107=(($99+24)|0);
 var $108=$107;
 HEAP32[(($108)>>2)]=$78;
 var $109=(($99+28)|0);
 var $110=$109;
 HEAP32[(($110)>>2)]=$76;
 label=27;break;
 case 26: 
 var $112=(($78+24)|0);
 HEAP32[(($112)>>2)]=$100;
 HEAP32[(($77)>>2)]=$100;
 var $113=(($99+24)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$76;
 var $115=(($99+28)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$78;
 label=27;break;
 case 27: 
 HEAP32[(($p1)>>2)]=$100;
 var $118=$100;label=28;break;
 case 28: 
 var $118;
 var $ld$43$0=(($79)|0);
 var $119$0=HEAP32[(($ld$43$0)>>2)];
 var $ld$44$1=(($79+4)|0);
 var $119$1=HEAP32[(($ld$44$1)>>2)];
 var $120=(($119$0|0) == ($_sroa_0130_0_copyload$0|0)) & (($119$1|0) == ($_sroa_0130_0_copyload$1|0));
 if($120){label=29;break;}else{label=31;break;}
 case 29: 
 var $121=(($76+16)|0);
 var $ld$45$0=(($121)|0);
 var $122$0=HEAP32[(($ld$45$0)>>2)];
 var $ld$46$1=(($121+4)|0);
 var $122$1=HEAP32[(($ld$46$1)>>2)];
 var $123=(($122$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($122$1|0) == ($_sroa_1131_8_copyload$1|0));
 if($123){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($p2)>>2)]=$76;
 label=54;break;
 case 31: 
 var $125=(($78+8)|0);
 var $ld$47$0=(($125)|0);
 var $126$0=HEAP32[(($ld$47$0)>>2)];
 var $ld$48$1=(($125+4)|0);
 var $126$1=HEAP32[(($ld$48$1)>>2)];
 var $127=(($126$0|0) == ($_sroa_0130_0_copyload$0|0)) & (($126$1|0) == ($_sroa_0130_0_copyload$1|0));
 if($127){label=32;break;}else{label=34;break;}
 case 32: 
 var $128=(($78+16)|0);
 var $ld$49$0=(($128)|0);
 var $129$0=HEAP32[(($ld$49$0)>>2)];
 var $ld$50$1=(($128+4)|0);
 var $129$1=HEAP32[(($ld$50$1)>>2)];
 var $130=(($129$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($129$1|0) == ($_sroa_1131_8_copyload$1|0));
 if($130){label=33;break;}else{label=34;break;}
 case 33: 
 HEAP32[(($p2)>>2)]=$78;
 label=54;break;
 case 34: 
 var $132=($118|0)==($76|0);
 var $133=($118|0)==($78|0);
 var $or_cond71=$132|$133;
 if($or_cond71){label=35;break;}else{label=41;break;}
 case 35: 
 var $135=$6;
 assert(16 % 1 === 0);HEAP32[(($135)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($135)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($135)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($135)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];
 var $136=($76|0)==($78|0);
 if($136){label=36;break;}else{label=37;break;}
 case 36: 
 var $138=___cxa_allocate_exception(4);
 var $139=$138;
 HEAP32[(($139)>>2)]=5664;
 ___cxa_throw($138,12808,0);
 throw "Reached an unreachable!";
 case 37: 
 var $tmp88=$6;
 var $141=__Znwj(32);
 var $142=$141;
 var $143=(($141+8)|0);
 assert(16 % 1 === 0);HEAP32[(($143)>>2)]=HEAP32[(($tmp88)>>2)];HEAP32[((($143)+(4))>>2)]=HEAP32[((($tmp88)+(4))>>2)];HEAP32[((($143)+(8))>>2)]=HEAP32[((($tmp88)+(8))>>2)];HEAP32[((($143)+(12))>>2)]=HEAP32[((($tmp88)+(12))>>2)];
 var $144=(($76+24)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145|0)==($78|0);
 if($146){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($144)>>2)]=$142;
 var $148=(($78+28)|0);
 HEAP32[(($148)>>2)]=$142;
 var $149=(($141+24)|0);
 var $150=$149;
 HEAP32[(($150)>>2)]=$78;
 var $151=(($141+28)|0);
 var $152=$151;
 HEAP32[(($152)>>2)]=$76;
 label=40;break;
 case 39: 
 var $154=(($78+24)|0);
 HEAP32[(($154)>>2)]=$142;
 HEAP32[(($77)>>2)]=$142;
 var $155=(($141+24)|0);
 var $156=$155;
 HEAP32[(($156)>>2)]=$76;
 var $157=(($141+28)|0);
 var $158=$157;
 HEAP32[(($158)>>2)]=$78;
 label=40;break;
 case 40: 
 HEAP32[(($p2)>>2)]=$142;
 label=54;break;
 case 41: 
 var $_sroa_1140_8__idx142=(($76+16)|0);
 var $ld$51$0=(($_sroa_1140_8__idx142)|0);
 var $_sroa_1140_8_copyload$0=HEAP32[(($ld$51$0)>>2)];
 var $ld$52$1=(($_sroa_1140_8__idx142+4)|0);
 var $_sroa_1140_8_copyload$1=HEAP32[(($ld$52$1)>>2)];
 var $_sroa_0135_0__idx=(($118+8)|0);
 var $ld$53$0=(($_sroa_0135_0__idx)|0);
 var $_sroa_0135_0_copyload$0=HEAP32[(($ld$53$0)>>2)];
 var $ld$54$1=(($_sroa_0135_0__idx+4)|0);
 var $_sroa_0135_0_copyload$1=HEAP32[(($ld$54$1)>>2)];
 var $_sroa_1136_8__idx138=(($118+16)|0);
 var $ld$55$0=(($_sroa_1136_8__idx138)|0);
 var $_sroa_1136_8_copyload$0=HEAP32[(($ld$55$0)>>2)];
 var $ld$56$1=(($_sroa_1136_8__idx138+4)|0);
 var $_sroa_1136_8_copyload$1=HEAP32[(($ld$56$1)>>2)];
 var $160=(($_sroa_1140_8_copyload$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($_sroa_1140_8_copyload$1|0) == ($_sroa_1131_8_copyload$1|0));
 var $or_cond277=$120&$160;
 if($or_cond277){label=46;break;}else{label=42;break;}
 case 42: 
 var $161=(($_sroa_0135_0_copyload$0|0) == ($_sroa_0130_0_copyload$0|0)) & (($_sroa_0135_0_copyload$1|0) == ($_sroa_0130_0_copyload$1|0));
 var $162=(($_sroa_1136_8_copyload$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($_sroa_1136_8_copyload$1|0) == ($_sroa_1131_8_copyload$1|0));
 var $or_cond278=$161&$162;
 if($or_cond278){label=46;break;}else{label=43;break;}
 case 43: 
 var $163=(($119$0|0) == ($_sroa_0135_0_copyload$0|0)) & (($119$1|0) == ($_sroa_0135_0_copyload$1|0));
 if($163){label=45;break;}else{label=44;break;}
 case 44: 
 var $165=(($119$1|0) < ($_sroa_0130_0_copyload$1|0)) | (((($119$1|0) == ($_sroa_0130_0_copyload$1|0) & ($119$0>>>0) <  ($_sroa_0130_0_copyload$0>>>0))));
 var $166=(($_sroa_0130_0_copyload$1|0) < ($_sroa_0135_0_copyload$1|0)) | (((($_sroa_0130_0_copyload$1|0) == ($_sroa_0135_0_copyload$1|0) & ($_sroa_0130_0_copyload$0>>>0) <  ($_sroa_0135_0_copyload$0>>>0))));
 var $tmp1_i=$165^$166;
 if($tmp1_i){label=50;break;}else{label=46;break;}
 case 45: 
 var $167=(($_sroa_1140_8_copyload$1|0) < ($_sroa_1131_8_copyload$1|0)) | (((($_sroa_1140_8_copyload$1|0) == ($_sroa_1131_8_copyload$1|0) & ($_sroa_1140_8_copyload$0>>>0) <  ($_sroa_1131_8_copyload$0>>>0))));
 var $168=(($_sroa_1131_8_copyload$1|0) < ($_sroa_1136_8_copyload$1|0)) | (((($_sroa_1131_8_copyload$1|0) == ($_sroa_1136_8_copyload$1|0) & ($_sroa_1131_8_copyload$0>>>0) <  ($_sroa_1136_8_copyload$0>>>0))));
 var $tmp_i=$167^$168;
 if($tmp_i){label=50;break;}else{label=46;break;}
 case 46: 
 var $170=$5;
 assert(16 % 1 === 0);HEAP32[(($170)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($170)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($170)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($170)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];
 var $tmp92=$5;
 var $171=__Znwj(32);
 var $172=$171;
 var $173=(($171+8)|0);
 assert(16 % 1 === 0);HEAP32[(($173)>>2)]=HEAP32[(($tmp92)>>2)];HEAP32[((($173)+(4))>>2)]=HEAP32[((($tmp92)+(4))>>2)];HEAP32[((($173)+(8))>>2)]=HEAP32[((($tmp92)+(8))>>2)];HEAP32[((($173)+(12))>>2)]=HEAP32[((($tmp92)+(12))>>2)];
 var $174=(($76+24)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==($118|0);
 if($176){label=47;break;}else{label=48;break;}
 case 47: 
 HEAP32[(($174)>>2)]=$172;
 var $178=(($118+28)|0);
 HEAP32[(($178)>>2)]=$172;
 var $179=(($171+24)|0);
 var $180=$179;
 HEAP32[(($180)>>2)]=$118;
 var $181=(($171+28)|0);
 var $182=$181;
 HEAP32[(($182)>>2)]=$76;
 label=49;break;
 case 48: 
 var $184=(($118+24)|0);
 HEAP32[(($184)>>2)]=$172;
 HEAP32[(($77)>>2)]=$172;
 var $185=(($171+24)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$76;
 var $187=(($171+28)|0);
 var $188=$187;
 HEAP32[(($188)>>2)]=$118;
 label=49;break;
 case 49: 
 HEAP32[(($p2)>>2)]=$172;
 label=54;break;
 case 50: 
 var $190=$4;
 assert(16 % 1 === 0);HEAP32[(($190)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($190)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($190)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($190)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];
 var $tmp95=$4;
 var $191=__Znwj(32);
 var $192=$191;
 var $193=(($191+8)|0);
 assert(16 % 1 === 0);HEAP32[(($193)>>2)]=HEAP32[(($tmp95)>>2)];HEAP32[((($193)+(4))>>2)]=HEAP32[((($tmp95)+(4))>>2)];HEAP32[((($193)+(8))>>2)]=HEAP32[((($tmp95)+(8))>>2)];HEAP32[((($193)+(12))>>2)]=HEAP32[((($tmp95)+(12))>>2)];
 var $194=(($118+24)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==($78|0);
 if($196){label=51;break;}else{label=52;break;}
 case 51: 
 HEAP32[(($194)>>2)]=$192;
 var $198=(($78+28)|0);
 HEAP32[(($198)>>2)]=$192;
 var $199=(($191+24)|0);
 var $200=$199;
 HEAP32[(($200)>>2)]=$78;
 var $201=(($191+28)|0);
 var $202=$201;
 HEAP32[(($202)>>2)]=$118;
 label=53;break;
 case 52: 
 var $204=(($78+24)|0);
 HEAP32[(($204)>>2)]=$192;
 var $205=(($118+28)|0);
 HEAP32[(($205)>>2)]=$192;
 var $206=(($191+24)|0);
 var $207=$206;
 HEAP32[(($207)>>2)]=$118;
 var $208=(($191+28)|0);
 var $209=$208;
 HEAP32[(($209)>>2)]=$78;
 label=53;break;
 case 53: 
 HEAP32[(($p2)>>2)]=$192;
 label=54;break;
 case 54: 
 var $211=HEAP32[(($pp2a)>>2)];
 var $212=(($211+28)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($211+8)|0);
 var $ld$57$0=(($214)|0);
 var $215$0=HEAP32[(($ld$57$0)>>2)];
 var $ld$58$1=(($214+4)|0);
 var $215$1=HEAP32[(($ld$58$1)>>2)];
 var $216=(($215$0|0) == ($75$0|0)) & (($215$1|0) == ($75$1|0));
 if($216){label=55;break;}else{label=56;break;}
 case 55: 
 var $217=(($211+16)|0);
 var $ld$59$0=(($217)|0);
 var $218$0=HEAP32[(($ld$59$0)>>2)];
 var $ld$60$1=(($217+4)|0);
 var $218$1=HEAP32[(($ld$60$1)>>2)];
 var $219=(($218$0|0) == ($74$0|0)) & (($218$1|0) == ($74$1|0));
 if($219){var $p3_0=$211;label=63;break;}else{label=56;break;}
 case 56: 
 var $220=(($213+8)|0);
 var $ld$61$0=(($220)|0);
 var $221$0=HEAP32[(($ld$61$0)>>2)];
 var $ld$62$1=(($220+4)|0);
 var $221$1=HEAP32[(($ld$62$1)>>2)];
 var $222=(($221$0|0) == ($75$0|0)) & (($221$1|0) == ($75$1|0));
 if($222){label=57;break;}else{label=58;break;}
 case 57: 
 var $223=(($213+16)|0);
 var $ld$63$0=(($223)|0);
 var $224$0=HEAP32[(($ld$63$0)>>2)];
 var $ld$64$1=(($223+4)|0);
 var $224$1=HEAP32[(($ld$64$1)>>2)];
 var $225=(($224$0|0) == ($74$0|0)) & (($224$1|0) == ($74$1|0));
 if($225){var $p3_0=$213;label=63;break;}else{label=58;break;}
 case 58: 
 var $226=$3;
 assert(16 % 1 === 0);HEAP32[(($226)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($226)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($226)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];HEAP32[((($226)+(12))>>2)]=HEAP32[((($27)+(12))>>2)];
 var $227=($211|0)==($213|0);
 if($227){label=59;break;}else{label=60;break;}
 case 59: 
 var $229=___cxa_allocate_exception(4);
 var $230=$229;
 HEAP32[(($230)>>2)]=5664;
 ___cxa_throw($229,12808,0);
 throw "Reached an unreachable!";
 case 60: 
 var $tmp100=$3;
 var $232=__Znwj(32);
 var $233=$232;
 var $234=(($232+8)|0);
 assert(16 % 1 === 0);HEAP32[(($234)>>2)]=HEAP32[(($tmp100)>>2)];HEAP32[((($234)+(4))>>2)]=HEAP32[((($tmp100)+(4))>>2)];HEAP32[((($234)+(8))>>2)]=HEAP32[((($tmp100)+(8))>>2)];HEAP32[((($234)+(12))>>2)]=HEAP32[((($tmp100)+(12))>>2)];
 var $235=(($211+24)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($236|0)==($213|0);
 if($237){label=61;break;}else{label=62;break;}
 case 61: 
 HEAP32[(($235)>>2)]=$233;
 var $239=(($213+28)|0);
 HEAP32[(($239)>>2)]=$233;
 var $240=(($232+24)|0);
 var $241=$240;
 HEAP32[(($241)>>2)]=$213;
 var $242=(($232+28)|0);
 var $243=$242;
 HEAP32[(($243)>>2)]=$211;
 var $p3_0=$233;label=63;break;
 case 62: 
 var $245=(($213+24)|0);
 HEAP32[(($245)>>2)]=$233;
 HEAP32[(($212)>>2)]=$233;
 var $246=(($232+24)|0);
 var $247=$246;
 HEAP32[(($247)>>2)]=$211;
 var $248=(($232+28)|0);
 var $249=$248;
 HEAP32[(($249)>>2)]=$213;
 var $p3_0=$233;label=63;break;
 case 63: 
 var $p3_0;
 var $ld$65$0=(($214)|0);
 var $250$0=HEAP32[(($ld$65$0)>>2)];
 var $ld$66$1=(($214+4)|0);
 var $250$1=HEAP32[(($ld$66$1)>>2)];
 var $251=(($250$0|0) == ($_sroa_0130_0_copyload$0|0)) & (($250$1|0) == ($_sroa_0130_0_copyload$1|0));
 if($251){label=64;break;}else{label=65;break;}
 case 64: 
 var $252=(($211+16)|0);
 var $ld$67$0=(($252)|0);
 var $253$0=HEAP32[(($ld$67$0)>>2)];
 var $ld$68$1=(($252+4)|0);
 var $253$1=HEAP32[(($ld$68$1)>>2)];
 var $254=(($253$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($253$1|0) == ($_sroa_1131_8_copyload$1|0));
 if($254){var $p4_0=$211;label=84;break;}else{label=65;break;}
 case 65: 
 var $255=(($213+8)|0);
 var $ld$69$0=(($255)|0);
 var $256$0=HEAP32[(($ld$69$0)>>2)];
 var $ld$70$1=(($255+4)|0);
 var $256$1=HEAP32[(($ld$70$1)>>2)];
 var $257=(($256$0|0) == ($_sroa_0130_0_copyload$0|0)) & (($256$1|0) == ($_sroa_0130_0_copyload$1|0));
 if($257){label=66;break;}else{label=67;break;}
 case 66: 
 var $258=(($213+16)|0);
 var $ld$71$0=(($258)|0);
 var $259$0=HEAP32[(($ld$71$0)>>2)];
 var $ld$72$1=(($258+4)|0);
 var $259$1=HEAP32[(($ld$72$1)>>2)];
 var $260=(($259$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($259$1|0) == ($_sroa_1131_8_copyload$1|0));
 if($260){var $p4_0=$213;label=84;break;}else{label=67;break;}
 case 67: 
 var $261=($p3_0|0)==($211|0);
 var $262=($p3_0|0)==($213|0);
 var $or_cond72=$261|$262;
 if($or_cond72){label=68;break;}else{label=73;break;}
 case 68: 
 var $264=$2;
 assert(16 % 1 === 0);HEAP32[(($264)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($264)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($264)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($264)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];
 var $265=($211|0)==($213|0);
 if($265){label=69;break;}else{label=70;break;}
 case 69: 
 var $267=___cxa_allocate_exception(4);
 var $268=$267;
 HEAP32[(($268)>>2)]=5664;
 ___cxa_throw($267,12808,0);
 throw "Reached an unreachable!";
 case 70: 
 var $tmp105=$2;
 var $270=__Znwj(32);
 var $271=$270;
 var $272=(($270+8)|0);
 assert(16 % 1 === 0);HEAP32[(($272)>>2)]=HEAP32[(($tmp105)>>2)];HEAP32[((($272)+(4))>>2)]=HEAP32[((($tmp105)+(4))>>2)];HEAP32[((($272)+(8))>>2)]=HEAP32[((($tmp105)+(8))>>2)];HEAP32[((($272)+(12))>>2)]=HEAP32[((($tmp105)+(12))>>2)];
 var $273=(($211+24)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==($213|0);
 if($275){label=71;break;}else{label=72;break;}
 case 71: 
 HEAP32[(($273)>>2)]=$271;
 var $277=(($213+28)|0);
 HEAP32[(($277)>>2)]=$271;
 var $278=(($270+24)|0);
 var $279=$278;
 HEAP32[(($279)>>2)]=$213;
 var $280=(($270+28)|0);
 var $281=$280;
 HEAP32[(($281)>>2)]=$211;
 var $p4_0=$271;label=84;break;
 case 72: 
 var $283=(($213+24)|0);
 HEAP32[(($283)>>2)]=$271;
 HEAP32[(($212)>>2)]=$271;
 var $284=(($270+24)|0);
 var $285=$284;
 HEAP32[(($285)>>2)]=$211;
 var $286=(($270+28)|0);
 var $287=$286;
 HEAP32[(($287)>>2)]=$213;
 var $p4_0=$271;label=84;break;
 case 73: 
 var $_sroa_1127_8__idx129=(($211+16)|0);
 var $ld$73$0=(($_sroa_1127_8__idx129)|0);
 var $_sroa_1127_8_copyload$0=HEAP32[(($ld$73$0)>>2)];
 var $ld$74$1=(($_sroa_1127_8__idx129+4)|0);
 var $_sroa_1127_8_copyload$1=HEAP32[(($ld$74$1)>>2)];
 var $_sroa_0122_0__idx=(($p3_0+8)|0);
 var $ld$75$0=(($_sroa_0122_0__idx)|0);
 var $_sroa_0122_0_copyload$0=HEAP32[(($ld$75$0)>>2)];
 var $ld$76$1=(($_sroa_0122_0__idx+4)|0);
 var $_sroa_0122_0_copyload$1=HEAP32[(($ld$76$1)>>2)];
 var $_sroa_1123_8__idx125=(($p3_0+16)|0);
 var $ld$77$0=(($_sroa_1123_8__idx125)|0);
 var $_sroa_1123_8_copyload$0=HEAP32[(($ld$77$0)>>2)];
 var $ld$78$1=(($_sroa_1123_8__idx125+4)|0);
 var $_sroa_1123_8_copyload$1=HEAP32[(($ld$78$1)>>2)];
 var $289=(($_sroa_1127_8_copyload$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($_sroa_1127_8_copyload$1|0) == ($_sroa_1131_8_copyload$1|0));
 var $or_cond279=$251&$289;
 if($or_cond279){label=78;break;}else{label=74;break;}
 case 74: 
 var $290=(($_sroa_0122_0_copyload$0|0) == ($_sroa_0130_0_copyload$0|0)) & (($_sroa_0122_0_copyload$1|0) == ($_sroa_0130_0_copyload$1|0));
 var $291=(($_sroa_1123_8_copyload$0|0) == ($_sroa_1131_8_copyload$0|0)) & (($_sroa_1123_8_copyload$1|0) == ($_sroa_1131_8_copyload$1|0));
 var $or_cond280=$290&$291;
 if($or_cond280){label=78;break;}else{label=75;break;}
 case 75: 
 var $292=(($250$0|0) == ($_sroa_0122_0_copyload$0|0)) & (($250$1|0) == ($_sroa_0122_0_copyload$1|0));
 if($292){label=77;break;}else{label=76;break;}
 case 76: 
 var $294=(($250$1|0) < ($_sroa_0130_0_copyload$1|0)) | (((($250$1|0) == ($_sroa_0130_0_copyload$1|0) & ($250$0>>>0) <  ($_sroa_0130_0_copyload$0>>>0))));
 var $295=(($_sroa_0130_0_copyload$1|0) < ($_sroa_0122_0_copyload$1|0)) | (((($_sroa_0130_0_copyload$1|0) == ($_sroa_0122_0_copyload$1|0) & ($_sroa_0130_0_copyload$0>>>0) <  ($_sroa_0122_0_copyload$0>>>0))));
 var $tmp1_i112=$294^$295;
 if($tmp1_i112){label=81;break;}else{label=78;break;}
 case 77: 
 var $296=(($_sroa_1127_8_copyload$1|0) < ($_sroa_1131_8_copyload$1|0)) | (((($_sroa_1127_8_copyload$1|0) == ($_sroa_1131_8_copyload$1|0) & ($_sroa_1127_8_copyload$0>>>0) <  ($_sroa_1131_8_copyload$0>>>0))));
 var $297=(($_sroa_1131_8_copyload$1|0) < ($_sroa_1123_8_copyload$1|0)) | (((($_sroa_1131_8_copyload$1|0) == ($_sroa_1123_8_copyload$1|0) & ($_sroa_1131_8_copyload$0>>>0) <  ($_sroa_1123_8_copyload$0>>>0))));
 var $tmp_i113=$296^$297;
 if($tmp_i113){label=81;break;}else{label=78;break;}
 case 78: 
 var $299=$1;
 assert(16 % 1 === 0);HEAP32[(($299)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($299)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($299)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($299)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];
 var $tmp116=$1;
 var $300=__Znwj(32);
 var $301=$300;
 var $302=(($300+8)|0);
 assert(16 % 1 === 0);HEAP32[(($302)>>2)]=HEAP32[(($tmp116)>>2)];HEAP32[((($302)+(4))>>2)]=HEAP32[((($tmp116)+(4))>>2)];HEAP32[((($302)+(8))>>2)]=HEAP32[((($tmp116)+(8))>>2)];HEAP32[((($302)+(12))>>2)]=HEAP32[((($tmp116)+(12))>>2)];
 var $303=(($211+24)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=($304|0)==($p3_0|0);
 if($305){label=79;break;}else{label=80;break;}
 case 79: 
 HEAP32[(($303)>>2)]=$301;
 var $307=(($p3_0+28)|0);
 HEAP32[(($307)>>2)]=$301;
 var $308=(($300+24)|0);
 var $309=$308;
 HEAP32[(($309)>>2)]=$p3_0;
 var $310=(($300+28)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=$211;
 var $p4_0=$301;label=84;break;
 case 80: 
 var $313=(($p3_0+24)|0);
 HEAP32[(($313)>>2)]=$301;
 HEAP32[(($212)>>2)]=$301;
 var $314=(($300+24)|0);
 var $315=$314;
 HEAP32[(($315)>>2)]=$211;
 var $316=(($300+28)|0);
 var $317=$316;
 HEAP32[(($317)>>2)]=$p3_0;
 var $p4_0=$301;label=84;break;
 case 81: 
 var $319=$8;
 assert(16 % 1 === 0);HEAP32[(($319)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($319)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($319)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($319)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];
 var $tmp80=$8;
 var $320=__Znwj(32);
 var $321=$320;
 var $322=(($320+8)|0);
 assert(16 % 1 === 0);HEAP32[(($322)>>2)]=HEAP32[(($tmp80)>>2)];HEAP32[((($322)+(4))>>2)]=HEAP32[((($tmp80)+(4))>>2)];HEAP32[((($322)+(8))>>2)]=HEAP32[((($tmp80)+(8))>>2)];HEAP32[((($322)+(12))>>2)]=HEAP32[((($tmp80)+(12))>>2)];
 var $323=(($p3_0+24)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=($324|0)==($213|0);
 if($325){label=82;break;}else{label=83;break;}
 case 82: 
 HEAP32[(($323)>>2)]=$321;
 var $327=(($213+28)|0);
 HEAP32[(($327)>>2)]=$321;
 var $328=(($320+24)|0);
 var $329=$328;
 HEAP32[(($329)>>2)]=$213;
 var $330=(($320+28)|0);
 var $331=$330;
 HEAP32[(($331)>>2)]=$p3_0;
 var $p4_0=$321;label=84;break;
 case 83: 
 var $333=(($213+24)|0);
 HEAP32[(($333)>>2)]=$321;
 var $334=(($p3_0+28)|0);
 HEAP32[(($334)>>2)]=$321;
 var $335=(($320+24)|0);
 var $336=$335;
 HEAP32[(($336)>>2)]=$p3_0;
 var $337=(($320+28)|0);
 var $338=$337;
 HEAP32[(($338)>>2)]=$213;
 var $p4_0=$321;label=84;break;
 case 84: 
 var $p4_0;
 var $339=HEAP32[(($p1)>>2)];
 var $340=(($339+24)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=HEAP32[(($p2)>>2)];
 var $343=($341|0)==($342|0);
 if($343){label=85;break;}else{label=87;break;}
 case 85: 
 var $345=(($p3_0+28)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==($p4_0|0);
 if($347){label=86;break;}else{label=87;break;}
 case 86: 
 HEAP32[(($340)>>2)]=$p3_0;
 var $349=HEAP32[(($p1)>>2)];
 HEAP32[(($345)>>2)]=$349;
 var $350=HEAP32[(($p2)>>2)];
 var $351=(($350+28)|0);
 HEAP32[(($351)>>2)]=$p4_0;
 var $352=HEAP32[(($p2)>>2)];
 var $353=(($p4_0+24)|0);
 HEAP32[(($353)>>2)]=$352;
 var $_0=1;label=90;break;
 case 87: 
 var $355=(($339+28)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=($356|0)==($342|0);
 if($357){label=88;break;}else{var $_0=0;label=90;break;}
 case 88: 
 var $359=(($p3_0+24)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=($360|0)==($p4_0|0);
 if($361){label=89;break;}else{var $_0=0;label=90;break;}
 case 89: 
 HEAP32[(($355)>>2)]=$p3_0;
 var $363=HEAP32[(($p1)>>2)];
 HEAP32[(($359)>>2)]=$363;
 var $364=HEAP32[(($p2)>>2)];
 var $365=(($364+24)|0);
 HEAP32[(($365)>>2)]=$p4_0;
 var $366=HEAP32[(($p2)>>2)];
 var $367=(($p4_0+28)|0);
 HEAP32[(($367)>>2)]=$366;
 var $_0=1;label=90;break;
 case 90: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib14ReversePolygonERNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__t_i_i_i=sp;
 var $1=(($p)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($p+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=5;break;}else{label=2;break;}
 case 2: 
 var $6=((($4)-(16))|0);
 var $7=($2>>>0)<($6>>>0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $8=$__t_i_i_i;
 var $_sroa_044_053=$2;var $10=$6;label=4;break;
 case 4: 
 var $10;
 var $_sroa_044_053;
 var $11=$_sroa_044_053;
 assert(16 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];HEAP32[((($8)+(12))>>2)]=HEAP32[((($11)+(12))>>2)];
 var $12=$10;
 assert(16 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];HEAP32[((($11)+(12))>>2)]=HEAP32[((($12)+(12))>>2)];
 assert(16 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];HEAP32[((($12)+(12))>>2)]=HEAP32[((($8)+(12))>>2)];
 var $13=(($_sroa_044_053+16)|0);
 var $14=((($10)-(16))|0);
 var $15=($13>>>0)<($14>>>0);
 if($15){var $_sroa_044_053=$13;var $10=$14;label=4;break;}else{label=5;break;}
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib8BuildArcERKNS_8IntPointEddd($agg_result,$pt,$a1,$a2,$r){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=Math_abs($r);
 var $1=Math_sqrt($0);
 var $2=($a2)-($a1);
 var $3=Math_abs($2);
 var $4=($1)*($3);
 var $5=(($4)&-1);
 var $6=($5|0)>6;
 var $7$0=$5;
 var $7$1=(((($5|0)<0))|0)?-1:0;
 var $$etemp$0$0=6;
 var $$etemp$0$1=0;
 var $8$0=$6?$7$0:$$etemp$0$0;
 var $8$1=$6?$7$1:$$etemp$0$1;
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;
 var $9=(($8$1|0) > ($$etemp$1$1|0)) | (((($8$1|0) == ($$etemp$1$1|0) & ($8$0>>>0) >  ($$etemp$1$0>>>0))));
 var $extract_t$0=$8$0;
 var $extract_t=$extract_t$0;
 var $_extract_t=$9?256:$extract_t;
 var $10=(($agg_result)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($agg_result+4)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($agg_result+8)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=($_extract_t|0)==0;
 if($13){label=23;break;}else{label=2;break;}
 case 2: 
 var $15=($_extract_t>>>0)>268435455;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$agg_result;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $18=$_extract_t<<4;
 var $19=(function() { try { __THREW__ = 0; return __Znwj($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $21=$19;
 HEAP32[(($11)>>2)]=$21;
 HEAP32[(($10)>>2)]=$21;
 var $22=(($21+($_extract_t<<4))|0);
 HEAP32[(($12)>>2)]=$22;
 var $_0_i_i_i=$_extract_t;var $24=$21;label=6;break;
 case 6: 
 var $24;
 var $_0_i_i_i;
 var $25=($24|0)==0;
 if($25){var $28=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $27=$24;
 HEAP32[(($27)>>2)]=0; HEAP32[((($27)+(4))>>2)]=0; HEAP32[((($27)+(8))>>2)]=0; HEAP32[((($27)+(12))>>2)]=0;
 var $_pre8_i_i_i=HEAP32[(($11)>>2)];
 var $28=$_pre8_i_i_i;label=8;break;
 case 8: 
 var $28;
 var $29=(($28+16)|0);
 HEAP32[(($11)>>2)]=$29;
 var $30=((($_0_i_i_i)-(1))|0);
 var $31=($30|0)==0;
 if($31){label=14;break;}else{var $_0_i_i_i=$30;var $24=$29;label=6;break;}
 case 9: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=HEAP32[(($10)>>2)];
 var $35=$34;
 var $36=($34|0)==0;
 if($36){label=13;break;}else{label=10;break;}
 case 10: 
 var $37=HEAP32[(($11)>>2)];
 var $38=($34|0)==($37|0);
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i_i_i=((($37)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $39=(((-$35))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$39)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $40=$uglygep29_i_i_i>>>4;
 var $41=$40^-1;
 var $scevgep30_i_i_i=(($37+($41<<4))|0);
 HEAP32[(($11)>>2)]=$scevgep30_i_i_i;
 label=12;break;
 case 12: 
 var $42=$34;
 __ZdlPv($42);
 label=13;break;
 case 13: 
 ___resumeException($33$0)
 case 14: 
 var $43=((($_extract_t)-(1))|0);
 var $44=($43|0);
 var $45=($2)/($44);
 var $46=($_extract_t|0)>0;
 if($46){label=15;break;}else{label=23;break;}
 case 15: 
 var $47=(($pt)|0);
 var $48=(($pt+8)|0);
 var $a_037=$a1;var $i_038=0;label=16;break;
 case 16: 
 var $i_038;
 var $a_037;
 var $ld$2$0=(($47)|0);
 var $50$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($47+4)|0);
 var $50$1=HEAP32[(($ld$3$1)>>2)];
 var $51=Math_cos($a_037);
 var $52=($51)*($r);
 var $53=$52<0;
 if($53){label=17;break;}else{label=18;break;}
 case 17: 
 var $55=($52)+((-0.5));
 var $_sink_i=$55;label=19;break;
 case 18: 
 var $57=($52)+((0.5));
 var $_sink_i=$57;label=19;break;
 case 19: 
 var $_sink_i;
 var $58$0=$_sink_i>>>0;var $58$1=(Math_abs($_sink_i) >= 1 ? ($_sink_i > 0 ? Math_min(Math_floor(($_sink_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i - +(((~~($_sink_i)))>>>0))/4294967296)))>>>0) : 0);
 var $59$0=_i64Add($58$0,$58$1,$50$0,$50$1);var $59$1=tempRet0;
 var $60=HEAP32[(($10)>>2)];
 var $61=(($60+($i_038<<4))|0);
 var $st$4$0=(($61)|0);
 HEAP32[(($st$4$0)>>2)]=$59$0;
 var $st$5$1=(($61+4)|0);
 HEAP32[(($st$5$1)>>2)]=$59$1;
 var $ld$6$0=(($48)|0);
 var $62$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($48+4)|0);
 var $62$1=HEAP32[(($ld$7$1)>>2)];
 var $63=Math_sin($a_037);
 var $64=($63)*($r);
 var $65=$64<0;
 if($65){label=20;break;}else{label=21;break;}
 case 20: 
 var $67=($64)+((-0.5));
 var $_sink_i35=$67;label=22;break;
 case 21: 
 var $69=($64)+((0.5));
 var $_sink_i35=$69;label=22;break;
 case 22: 
 var $_sink_i35;
 var $70$0=$_sink_i35>>>0;var $70$1=(Math_abs($_sink_i35) >= 1 ? ($_sink_i35 > 0 ? Math_min(Math_floor(($_sink_i35)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i35 - +(((~~($_sink_i35)))>>>0))/4294967296)))>>>0) : 0);
 var $71$0=_i64Add($70$0,$70$1,$62$0,$62$1);var $71$1=tempRet0;
 var $72=HEAP32[(($10)>>2)];
 var $73=(($72+($i_038<<4)+8)|0);
 var $st$8$0=(($73)|0);
 HEAP32[(($st$8$0)>>2)]=$71$0;
 var $st$9$1=(($73+4)|0);
 HEAP32[(($st$9$1)>>2)]=$71$1;
 var $74=($45)+($a_037);
 var $75=((($i_038)+(1))|0);
 var $76=($75|0)<($_extract_t|0);
 if($76){var $a_037=$74;var $i_038=$75;label=16;break;}else{label=23;break;}
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib14OffsetPolygonsERKNSt3__16vectorINS1_INS_8IntPointENS0_9allocatorIS2_EEEENS3_IS5_EEEERS7_dNS_8JoinTypeEdb($in_polys,$out_polys,$delta,$jointype,$MiterLimit,$CheckInputs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $poly2=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(88);
 var $3=($out_polys|0)==($in_polys|0);
 if($3){label=2;break;}else{label=34;break;}
 case 2: 
 __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($poly2,$out_polys);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib17PolyOffsetBuilderC2ERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEERS8_dNS_8JoinTypeEdb($1,$poly2,$out_polys,$delta,$jointype,$MiterLimit,$CheckInputs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=25;break; }
 case 3: 
 var $5=(($1+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=($6|0)==0;
 if($8){label=7;break;}else{label=4;break;}
 case 4: 
 var $9=(($1+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($6|0)==($10|0);
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 var $scevgep_i_i_i_i_i=((($10)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $12=(((-$7))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$12)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $13=$uglygep29_i_i_i_i_i>>>4;
 var $14=$13^-1;
 var $scevgep30_i_i_i_i_i=(($10+($14<<4))|0);
 HEAP32[(($9)>>2)]=$scevgep30_i_i_i_i_i;
 label=6;break;
 case 6: 
 var $15=$6;
 __ZdlPv($15);
 label=7;break;
 case 7: 
 var $16=(($1)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){label=16;break;}else{label=8;break;}
 case 8: 
 var $19=(($1+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($17|0)==($20|0);
 if($21){var $37=$17;label=15;break;}else{var $22=$20;label=9;break;}
 case 9: 
 var $22;
 var $23=((($22)-(12))|0);
 HEAP32[(($19)>>2)]=$23;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){var $28=$23;label=10;break;}else{label=11;break;}
 case 10: 
 var $28;
 var $29=($17|0)==($28|0);
 if($29){label=14;break;}else{var $22=$28;label=9;break;}
 case 11: 
 var $30=((($22)-(12)+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($25|0)==($31|0);
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $scevgep_i_i_i_i_i_i_i=((($31)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $33=(((-$26))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i_i+$33)|0);
 var $uglygep29_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $34=$uglygep29_i_i_i_i_i_i_i>>>4;
 var $35=$34^-1;
 var $scevgep30_i_i_i_i_i_i_i=(($31+($35<<4))|0);
 HEAP32[(($30)>>2)]=$scevgep30_i_i_i_i_i_i_i;
 label=13;break;
 case 13: 
 var $36=$25;
 __ZdlPv($36);
 var $_pre29_i_i_i_i=HEAP32[(($19)>>2)];
 var $28=$_pre29_i_i_i_i;label=10;break;
 case 14: 
 var $_pre_i_i_i_i=HEAP32[(($16)>>2)];
 var $37=$_pre_i_i_i_i;label=15;break;
 case 15: 
 var $37;
 var $38=$37;
 __ZdlPv($38);
 label=16;break;
 case 16: 
 var $39=(($poly2)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=47;break;}else{label=17;break;}
 case 17: 
 var $42=(($poly2+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($40|0)==($43|0);
 if($44){var $60=$40;label=24;break;}else{var $45=$43;label=18;break;}
 case 18: 
 var $45;
 var $46=((($45)-(12))|0);
 HEAP32[(($42)>>2)]=$46;
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$48;
 var $50=($48|0)==0;
 if($50){var $51=$46;label=19;break;}else{label=20;break;}
 case 19: 
 var $51;
 var $52=($40|0)==($51|0);
 if($52){label=23;break;}else{var $45=$51;label=18;break;}
 case 20: 
 var $53=((($45)-(12)+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($48|0)==($54|0);
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $scevgep_i_i_i_i_i_i=((($54)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $56=(((-$49))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$56)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $57=$uglygep29_i_i_i_i_i_i>>>4;
 var $58=$57^-1;
 var $scevgep30_i_i_i_i_i_i=(($54+($58<<4))|0);
 HEAP32[(($53)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=22;break;
 case 22: 
 var $59=$48;
 __ZdlPv($59);
 var $_pre29_i_i_i=HEAP32[(($42)>>2)];
 var $51=$_pre29_i_i_i;label=19;break;
 case 23: 
 var $_pre_i_i_i=HEAP32[(($39)>>2)];
 var $60=$_pre_i_i_i;label=24;break;
 case 24: 
 var $60;
 var $61=$60;
 __ZdlPv($61);
 label=47;break;
 case 25: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=(($poly2)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==0;
 if($66){label=48;break;}else{label=26;break;}
 case 26: 
 var $67=(($poly2+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($65|0)==($68|0);
 if($69){var $85=$65;label=33;break;}else{var $70=$68;label=27;break;}
 case 27: 
 var $70;
 var $71=((($70)-(12))|0);
 HEAP32[(($67)>>2)]=$71;
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$73;
 var $75=($73|0)==0;
 if($75){var $76=$71;label=28;break;}else{label=29;break;}
 case 28: 
 var $76;
 var $77=($65|0)==($76|0);
 if($77){label=32;break;}else{var $70=$76;label=27;break;}
 case 29: 
 var $78=((($70)-(12)+4)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($73|0)==($79|0);
 if($80){label=31;break;}else{label=30;break;}
 case 30: 
 var $scevgep_i_i_i_i_i_i19=((($79)-(16))|0);
 var $scevgep28_i_i_i_i_i_i20=$scevgep_i_i_i_i_i_i19;
 var $81=(((-$74))|0);
 var $uglygep_i_i_i_i_i_i21=(($scevgep28_i_i_i_i_i_i20+$81)|0);
 var $uglygep29_i_i_i_i_i_i22=$uglygep_i_i_i_i_i_i21;
 var $82=$uglygep29_i_i_i_i_i_i22>>>4;
 var $83=$82^-1;
 var $scevgep30_i_i_i_i_i_i23=(($79+($83<<4))|0);
 HEAP32[(($78)>>2)]=$scevgep30_i_i_i_i_i_i23;
 label=31;break;
 case 31: 
 var $84=$73;
 __ZdlPv($84);
 var $_pre29_i_i_i25=HEAP32[(($67)>>2)];
 var $76=$_pre29_i_i_i25;label=28;break;
 case 32: 
 var $_pre_i_i_i27=HEAP32[(($64)>>2)];
 var $85=$_pre_i_i_i27;label=33;break;
 case 33: 
 var $85;
 var $86=$85;
 __ZdlPv($86);
 label=48;break;
 case 34: 
 __ZN10ClipperLib17PolyOffsetBuilderC2ERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEERS8_dNS_8JoinTypeEdb($2,$in_polys,$out_polys,$delta,$jointype,$MiterLimit,$CheckInputs);
 var $88=(($2+16)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$89;
 var $91=($89|0)==0;
 if($91){label=38;break;}else{label=35;break;}
 case 35: 
 var $92=(($2+20)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=($89|0)==($93|0);
 if($94){label=37;break;}else{label=36;break;}
 case 36: 
 var $scevgep_i_i_i_i_i32=((($93)-(16))|0);
 var $scevgep28_i_i_i_i_i33=$scevgep_i_i_i_i_i32;
 var $95=(((-$90))|0);
 var $uglygep_i_i_i_i_i34=(($scevgep28_i_i_i_i_i33+$95)|0);
 var $uglygep29_i_i_i_i_i35=$uglygep_i_i_i_i_i34;
 var $96=$uglygep29_i_i_i_i_i35>>>4;
 var $97=$96^-1;
 var $scevgep30_i_i_i_i_i36=(($93+($97<<4))|0);
 HEAP32[(($92)>>2)]=$scevgep30_i_i_i_i_i36;
 label=37;break;
 case 37: 
 var $98=$89;
 __ZdlPv($98);
 label=38;break;
 case 38: 
 var $99=(($2)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){label=47;break;}else{label=39;break;}
 case 39: 
 var $102=(($2+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($100|0)==($103|0);
 if($104){var $120=$100;label=46;break;}else{var $105=$103;label=40;break;}
 case 40: 
 var $105;
 var $106=((($105)-(12))|0);
 HEAP32[(($102)>>2)]=$106;
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$108;
 var $110=($108|0)==0;
 if($110){var $111=$106;label=41;break;}else{label=42;break;}
 case 41: 
 var $111;
 var $112=($100|0)==($111|0);
 if($112){label=45;break;}else{var $105=$111;label=40;break;}
 case 42: 
 var $113=((($105)-(12)+4)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($108|0)==($114|0);
 if($115){label=44;break;}else{label=43;break;}
 case 43: 
 var $scevgep_i_i_i_i_i_i_i44=((($114)-(16))|0);
 var $scevgep28_i_i_i_i_i_i_i45=$scevgep_i_i_i_i_i_i_i44;
 var $116=(((-$109))|0);
 var $uglygep_i_i_i_i_i_i_i46=(($scevgep28_i_i_i_i_i_i_i45+$116)|0);
 var $uglygep29_i_i_i_i_i_i_i47=$uglygep_i_i_i_i_i_i_i46;
 var $117=$uglygep29_i_i_i_i_i_i_i47>>>4;
 var $118=$117^-1;
 var $scevgep30_i_i_i_i_i_i_i48=(($114+($118<<4))|0);
 HEAP32[(($113)>>2)]=$scevgep30_i_i_i_i_i_i_i48;
 label=44;break;
 case 44: 
 var $119=$108;
 __ZdlPv($119);
 var $_pre29_i_i_i_i50=HEAP32[(($102)>>2)];
 var $111=$_pre29_i_i_i_i50;label=41;break;
 case 45: 
 var $_pre_i_i_i_i52=HEAP32[(($99)>>2)];
 var $120=$_pre_i_i_i_i52;label=46;break;
 case 46: 
 var $120;
 var $121=$120;
 __ZdlPv($121);
 label=47;break;
 case 47: 
 STACKTOP=sp;return;
 case 48: 
 ___resumeException($63$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=(($__iob+12)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)>($9|0);
 var $13=((($11)-($9))|0);
 var $__ns_0=$12?$13:0;
 var $14=$__op;
 var $15=((($14)-($8))|0);
 var $16=($15|0)>0;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$2;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+48)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=FUNCTION_TABLE[$21]($2,$__ob,$15);
 var $23=($22|0)==($15|0);
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $25=(($agg_result)|0);
 HEAP32[(($25)>>2)]=0;
 label=19;break;
 case 6: 
 var $27=($__ns_0|0)>0;
 if($27){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns_0,$__fl);
 var $29=$__sp;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__sp+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=10;break;
 case 9: 
 var $37=$__sp;
 var $38=(($37+1)|0);
 var $39=$38;label=10;break;
 case 10: 
 var $39;
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+48)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($2,$39,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $45=($44|0)==($__ns_0|0);
 if($45){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1); var $48$1 = tempRet0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 14: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $51=((($7)-($14))|0);
 var $52=($51|0)>0;
 if($52){label=16;break;}else{label=18;break;}
 case 16: 
 var $54=$2;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+48)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($2,$__op,$51);
 var $59=($58|0)==($51|0);
 if($59){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $61=(($agg_result)|0);
 HEAP32[(($61)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($10)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
 case 20: 
 ___resumeException($48$0)
 case 21: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1,0); var $67$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIN10ClipperLib9ExPolygonENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>178956970;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=(((($19|0))/(24))&-1);
 var $21=($20>>>0)>89478484;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=(((($24|0))/(24))&-1);
 var $_059=178956970;var $35=$22;var $34=$25;label=6;break;
 case 5: 
 var $26=$20<<1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=(((($30|0))/(24))&-1);
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_060=0;var $40=$28;var $39=$31;label=7;break;}else{var $_059=$_sroa_speculated;var $35=$28;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_059;
 var $36=((($_059)*(24))&-1);
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_060=$_059;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_060;
 var $41;
 var $42=(($41+((($39)*(24))&-1))|0);
 var $43=(($41+((($_060)*(24))&-1))|0);
 var $44=($42|0)==0;
 if($44){var $47=$14;var $46=$40;label=10;break;}else{label=8;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonC1ERKS0_($42,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $_pre57=HEAP32[(($3)>>2)];
 var $_pre58=HEAP32[(($1)>>2)];
 var $47=$_pre57;var $46=$_pre58;label=10;break;
 case 10: 
 var $46;
 var $47;
 var $_sum=((($39)+(1))|0);
 var $48=(($41+((($_sum)*(24))&-1))|0);
 var $49=($46|0)==($47|0);
 if($49){var $58=$46;var $57=$42;var $56=$46;label=15;break;}else{var $_049_i=$46;var $__v_sroa_1_4_load4450=$42;label=11;break;}
 case 11: 
 var $__v_sroa_1_4_load4450;
 var $_049_i;
 var $50=((($__v_sroa_1_4_load4450)-(24))|0);
 var $51=((($_049_i)-(24))|0);
 var $52=($50|0)==0;
 if($52){label=13;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonC1ERKS0_($50,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $54=($51|0)==($47|0);
 if($54){label=14;break;}else{var $_049_i=$51;var $__v_sroa_1_4_load4450=$50;label=11;break;}
 case 14: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_pre56=HEAP32[(($1)>>2)];
 var $58=$_pre_i;var $57=$50;var $56=$_pre56;label=15;break;
 case 15: 
 var $56;
 var $57;
 var $58;
 HEAP32[(($3)>>2)]=$57;
 HEAP32[(($1)>>2)]=$48;
 HEAP32[(($15)>>2)]=$43;
 var $__v_sroa_2_8_load4853=$56;label=16;break;
 case 16: 
 var $__v_sroa_2_8_load4853;
 var $59=($58|0)==($__v_sroa_2_8_load4853|0);
 if($59){label=19;break;}else{label=17;break;}
 case 17: 
 var $61=((($__v_sroa_2_8_load4853)-(24))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load4853=$61;label=16;break; } else { label=18;break; }
 case 18: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=$63$0;
 ___cxa_call_unexpected($64);
 throw "Reached an unreachable!";
 case 19: 
 var $65=($58|0)==0;
 if($65){label=21;break;}else{label=20;break;}
 case 20: 
 var $67=$58;
 __ZdlPv($67);
 label=21;break;
 case 21: 
 return;
 case 22: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $__v_sroa_1_4_load4449=$__v_sroa_1_4_load4450;var $__v_sroa_2_8_load4852=$48;label=24;break;
 case 23: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $__v_sroa_1_4_load4449=$42;var $__v_sroa_2_8_load4852=$42;label=24;break;
 case 24: 
 var $__v_sroa_2_8_load4852;
 var $__v_sroa_1_4_load4449;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $__v_sroa_2_8_load4851=$__v_sroa_2_8_load4852;label=25;break;
 case 25: 
 var $__v_sroa_2_8_load4851;
 var $69=($__v_sroa_1_4_load4449|0)==($__v_sroa_2_8_load4851|0);
 if($69){label=28;break;}else{label=26;break;}
 case 26: 
 var $71=((($__v_sroa_2_8_load4851)-(24))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load4851=$71;label=25;break; } else { label=27;break; }
 case 27: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=$73$0;
 ___cxa_call_unexpected($74);
 throw "Reached an unreachable!";
 case 28: 
 var $75=($41|0)==0;
 if($75){label=30;break;}else{label=29;break;}
 case 29: 
 var $77=$41;
 __ZdlPv($77);
 label=30;break;
 case 30: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib9ExPolygonC1ERKS0_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($0+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($0)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 var $10=$8;
 var $11=((($9)-($10))|0);
 var $12=$11>>4;
 var $13=($12|0)==0;
 if($13){label=14;break;}else{label=2;break;}
 case 2: 
 var $15=($12>>>0)>268435455;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$this;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=9;break; }
 case 4: 
 var $18=(function() { try { __THREW__ = 0; return __Znwj($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $20=$18;
 HEAP32[(($3)>>2)]=$20;
 HEAP32[(($2)>>2)]=$20;
 var $21=(($20+($12<<4))|0);
 HEAP32[(($4)>>2)]=$21;
 var $22=HEAP32[(($7)>>2)];
 var $23=HEAP32[(($5)>>2)];
 var $24=($22|0)==($23|0);
 if($24){label=14;break;}else{var $_011_i_i_i=$22;var $25=$20;label=6;break;}
 case 6: 
 var $25;
 var $_011_i_i_i;
 var $26=($25|0)==0;
 if($26){var $30=0;label=8;break;}else{label=7;break;}
 case 7: 
 var $28=$25;
 var $29=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];HEAP32[((($28)+(12))>>2)]=HEAP32[((($29)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($3)>>2)];
 var $30=$_pre12_i_i_i;label=8;break;
 case 8: 
 var $30;
 var $31=(($30+16)|0);
 HEAP32[(($3)>>2)]=$31;
 var $32=(($_011_i_i_i+16)|0);
 var $33=($32|0)==($23|0);
 if($33){label=14;break;}else{var $_011_i_i_i=$32;var $25=$31;label=6;break;}
 case 9: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=HEAP32[(($2)>>2)];
 var $37=$36;
 var $38=($36|0)==0;
 if($38){label=13;break;}else{label=10;break;}
 case 10: 
 var $39=HEAP32[(($3)>>2)];
 var $40=($36|0)==($39|0);
 if($40){label=12;break;}else{label=11;break;}
 case 11: 
 var $scevgep_i_i_i=((($39)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $41=(((-$37))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$41)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $42=$uglygep29_i_i_i>>>4;
 var $43=$42^-1;
 var $scevgep30_i_i_i=(($39+($43<<4))|0);
 HEAP32[(($3)>>2)]=$scevgep30_i_i_i;
 label=12;break;
 case 12: 
 var $44=$36;
 __ZdlPv($44);
 label=13;break;
 case 13: 
 ___resumeException($35$0)
 case 14: 
 var $45=(($this+12)|0);
 var $46=(($0+12)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEC2ERKS7_($45,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 15: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1); var $48$1 = tempRet0;
 var $49=HEAP32[(($2)>>2)];
 var $50=$49;
 var $51=($49|0)==0;
 if($51){label=19;break;}else{label=16;break;}
 case 16: 
 var $52=HEAP32[(($3)>>2)];
 var $53=($49|0)==($52|0);
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 var $scevgep_i_i_i_i=((($52)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $54=(((-$50))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$54)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $55=$uglygep29_i_i_i_i>>>4;
 var $56=$55^-1;
 var $scevgep30_i_i_i_i=(($52+($56<<4))|0);
 HEAP32[(($3)>>2)]=$scevgep30_i_i_i_i;
 label=18;break;
 case 18: 
 var $57=$49;
 __ZdlPv($57);
 label=19;break;
 case 19: 
 ___resumeException($48$0)
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPN10ClipperLib6OutRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPN10ClipperLib11HorzJoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPN10ClipperLib7JoinRecENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__sortIRPFbPN10ClipperLib6OutRecES3_EPS3_EEvT0_S8_T_($__first,$__last,$__comp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_ph=$__first;var $_0171_ph=$__last;label=2;break;
 case 2: 
 var $_0171_ph;
 var $_0_ph;
 var $1=$_0171_ph;
 var $2=((($_0171_ph)-(4))|0);
 var $_0=$_0_ph;label=3;break;
 case 3: 
 var $_0;
 var $3=$_0;
 var $4=((($1)-($3))|0);
 var $5=$4>>2;
 switch(($5|0)){case 4:{ label=14;break;}case 5:{ label=15;break;}case 2:{ label=4;break;}case 3:{ label=6;break;}case 0:case 1:{ label=83;break;}default:{label=20;break;}}break;
 case 4: 
 var $7=HEAP32[(($__comp)>>2)];
 var $8=HEAP32[(($2)>>2)];
 var $9=HEAP32[(($_0)>>2)];
 var $10=FUNCTION_TABLE[$7]($8,$9);
 if($10){label=5;break;}else{label=83;break;}
 case 5: 
 var $12=HEAP32[(($_0)>>2)];
 var $13=HEAP32[(($2)>>2)];
 HEAP32[(($_0)>>2)]=$13;
 HEAP32[(($2)>>2)]=$12;
 label=83;break;
 case 6: 
 var $15=(($_0+4)|0);
 var $16=HEAP32[(($__comp)>>2)];
 var $17=HEAP32[(($15)>>2)];
 var $18=HEAP32[(($_0)>>2)];
 var $19=FUNCTION_TABLE[$16]($17,$18);
 var $20=HEAP32[(($__comp)>>2)];
 var $21=HEAP32[(($2)>>2)];
 var $22=HEAP32[(($15)>>2)];
 var $23=FUNCTION_TABLE[$20]($21,$22);
 if($19){label=10;break;}else{label=7;break;}
 case 7: 
 if($23){label=8;break;}else{label=83;break;}
 case 8: 
 var $26=HEAP32[(($15)>>2)];
 var $27=HEAP32[(($2)>>2)];
 HEAP32[(($15)>>2)]=$27;
 HEAP32[(($2)>>2)]=$26;
 var $28=HEAP32[(($__comp)>>2)];
 var $29=HEAP32[(($15)>>2)];
 var $30=HEAP32[(($_0)>>2)];
 var $31=FUNCTION_TABLE[$28]($29,$30);
 if($31){label=9;break;}else{label=83;break;}
 case 9: 
 var $33=HEAP32[(($_0)>>2)];
 var $34=HEAP32[(($15)>>2)];
 HEAP32[(($_0)>>2)]=$34;
 HEAP32[(($15)>>2)]=$33;
 label=83;break;
 case 10: 
 var $36=HEAP32[(($_0)>>2)];
 if($23){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=HEAP32[(($2)>>2)];
 HEAP32[(($_0)>>2)]=$38;
 HEAP32[(($2)>>2)]=$36;
 label=83;break;
 case 12: 
 var $40=HEAP32[(($15)>>2)];
 HEAP32[(($_0)>>2)]=$40;
 HEAP32[(($15)>>2)]=$36;
 var $41=HEAP32[(($__comp)>>2)];
 var $42=HEAP32[(($2)>>2)];
 var $43=FUNCTION_TABLE[$41]($42,$36);
 if($43){label=13;break;}else{label=83;break;}
 case 13: 
 var $45=HEAP32[(($15)>>2)];
 var $46=HEAP32[(($2)>>2)];
 HEAP32[(($15)>>2)]=$46;
 HEAP32[(($2)>>2)]=$45;
 label=83;break;
 case 14: 
 var $48=(($_0+4)|0);
 var $49=(($_0+8)|0);
 var $50=__ZNSt3__17__sort4IRPFbPN10ClipperLib6OutRecES3_EPS3_EEjT0_S8_S8_S8_T_($_0,$48,$49,$2,$__comp);
 label=83;break;
 case 15: 
 var $52=(($_0+4)|0);
 var $53=(($_0+8)|0);
 var $54=(($_0+12)|0);
 var $55=__ZNSt3__17__sort4IRPFbPN10ClipperLib6OutRecES3_EPS3_EEjT0_S8_S8_S8_T_($_0,$52,$53,$54,$__comp);
 var $56=HEAP32[(($__comp)>>2)];
 var $57=HEAP32[(($2)>>2)];
 var $58=HEAP32[(($54)>>2)];
 var $59=FUNCTION_TABLE[$56]($57,$58);
 if($59){label=16;break;}else{label=83;break;}
 case 16: 
 var $61=HEAP32[(($54)>>2)];
 var $62=HEAP32[(($2)>>2)];
 HEAP32[(($54)>>2)]=$62;
 HEAP32[(($2)>>2)]=$61;
 var $63=HEAP32[(($__comp)>>2)];
 var $64=HEAP32[(($54)>>2)];
 var $65=HEAP32[(($53)>>2)];
 var $66=FUNCTION_TABLE[$63]($64,$65);
 if($66){label=17;break;}else{label=83;break;}
 case 17: 
 var $68=HEAP32[(($53)>>2)];
 var $69=HEAP32[(($54)>>2)];
 HEAP32[(($53)>>2)]=$69;
 HEAP32[(($54)>>2)]=$68;
 var $70=HEAP32[(($__comp)>>2)];
 var $71=HEAP32[(($52)>>2)];
 var $72=FUNCTION_TABLE[$70]($69,$71);
 if($72){label=18;break;}else{label=83;break;}
 case 18: 
 var $74=HEAP32[(($52)>>2)];
 var $75=HEAP32[(($53)>>2)];
 HEAP32[(($52)>>2)]=$75;
 HEAP32[(($53)>>2)]=$74;
 var $76=HEAP32[(($__comp)>>2)];
 var $77=HEAP32[(($_0)>>2)];
 var $78=FUNCTION_TABLE[$76]($75,$77);
 if($78){label=19;break;}else{label=83;break;}
 case 19: 
 var $80=HEAP32[(($_0)>>2)];
 var $81=HEAP32[(($52)>>2)];
 HEAP32[(($_0)>>2)]=$81;
 HEAP32[(($52)>>2)]=$80;
 label=83;break;
 case 20: 
 var $83=($4|0)<124;
 if($83){label=21;break;}else{label=36;break;}
 case 21: 
 var $85=(($_0+8)|0);
 var $86=(($_0+4)|0);
 var $87=HEAP32[(($__comp)>>2)];
 var $88=HEAP32[(($86)>>2)];
 var $89=HEAP32[(($_0)>>2)];
 var $90=FUNCTION_TABLE[$87]($88,$89);
 var $91=HEAP32[(($__comp)>>2)];
 var $92=HEAP32[(($85)>>2)];
 var $93=HEAP32[(($86)>>2)];
 var $94=FUNCTION_TABLE[$91]($92,$93);
 if($90){label=25;break;}else{label=22;break;}
 case 22: 
 if($94){label=23;break;}else{label=29;break;}
 case 23: 
 var $97=HEAP32[(($86)>>2)];
 var $98=HEAP32[(($85)>>2)];
 HEAP32[(($86)>>2)]=$98;
 HEAP32[(($85)>>2)]=$97;
 var $99=HEAP32[(($__comp)>>2)];
 var $100=HEAP32[(($_0)>>2)];
 var $101=FUNCTION_TABLE[$99]($98,$100);
 if($101){label=24;break;}else{label=29;break;}
 case 24: 
 var $103=HEAP32[(($_0)>>2)];
 var $104=HEAP32[(($86)>>2)];
 HEAP32[(($_0)>>2)]=$104;
 HEAP32[(($86)>>2)]=$103;
 label=29;break;
 case 25: 
 var $106=HEAP32[(($_0)>>2)];
 if($94){label=26;break;}else{label=27;break;}
 case 26: 
 var $108=HEAP32[(($85)>>2)];
 HEAP32[(($_0)>>2)]=$108;
 HEAP32[(($85)>>2)]=$106;
 label=29;break;
 case 27: 
 var $110=HEAP32[(($86)>>2)];
 HEAP32[(($_0)>>2)]=$110;
 HEAP32[(($86)>>2)]=$106;
 var $111=HEAP32[(($__comp)>>2)];
 var $112=HEAP32[(($85)>>2)];
 var $113=FUNCTION_TABLE[$111]($112,$106);
 if($113){label=28;break;}else{label=29;break;}
 case 28: 
 var $115=HEAP32[(($86)>>2)];
 var $116=HEAP32[(($85)>>2)];
 HEAP32[(($86)>>2)]=$116;
 HEAP32[(($85)>>2)]=$115;
 label=29;break;
 case 29: 
 var $117=(($_0+12)|0);
 var $118=($117|0)==($_0171_ph|0);
 if($118){label=83;break;}else{var $__j_025_i=$85;var $__i_026_i=$117;label=30;break;}
 case 30: 
 var $__i_026_i;
 var $__j_025_i;
 var $119=HEAP32[(($__comp)>>2)];
 var $120=HEAP32[(($__i_026_i)>>2)];
 var $121=HEAP32[(($__j_025_i)>>2)];
 var $122=FUNCTION_TABLE[$119]($120,$121);
 if($122){label=31;break;}else{label=35;break;}
 case 31: 
 var $124=HEAP32[(($__i_026_i)>>2)];
 var $__k_0_i=$__j_025_i;var $__j_1_i=$__i_026_i;label=32;break;
 case 32: 
 var $__j_1_i;
 var $__k_0_i;
 var $126=HEAP32[(($__k_0_i)>>2)];
 HEAP32[(($__j_1_i)>>2)]=$126;
 var $127=($__k_0_i|0)==($_0|0);
 if($127){var $__k_0_lcssa_i=$_0;label=34;break;}else{label=33;break;}
 case 33: 
 var $129=HEAP32[(($__comp)>>2)];
 var $130=((($__k_0_i)-(4))|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=FUNCTION_TABLE[$129]($124,$131);
 if($132){var $__j_1_i=$__k_0_i;var $__k_0_i=$130;label=32;break;}else{var $__k_0_lcssa_i=$__k_0_i;label=34;break;}
 case 34: 
 var $__k_0_lcssa_i;
 HEAP32[(($__k_0_lcssa_i)>>2)]=$124;
 label=35;break;
 case 35: 
 var $134=(($__i_026_i+4)|0);
 var $135=($134|0)==($_0171_ph|0);
 if($135){label=83;break;}else{var $__j_025_i=$__i_026_i;var $__i_026_i=$134;label=30;break;}
 case 36: 
 var $137=($4|0)>3996;
 var $138=(((($5|0))/(2))&-1);
 var $139=(($_0+($138<<2))|0);
 if($137){label=37;break;}else{label=45;break;}
 case 37: 
 var $141=(((($5|0))/(4))&-1);
 var $142=(($_0+($141<<2))|0);
 var $_sum=((($141)+($138))|0);
 var $143=(($_0+($_sum<<2))|0);
 var $144=__ZNSt3__17__sort4IRPFbPN10ClipperLib6OutRecES3_EPS3_EEjT0_S8_S8_S8_T_($_0,$142,$139,$143,$__comp);
 var $145=HEAP32[(($__comp)>>2)];
 var $146=HEAP32[(($2)>>2)];
 var $147=HEAP32[(($143)>>2)];
 var $148=FUNCTION_TABLE[$145]($146,$147);
 if($148){label=38;break;}else{var $__n_swaps_0=$144;label=53;break;}
 case 38: 
 var $150=HEAP32[(($143)>>2)];
 var $151=HEAP32[(($2)>>2)];
 HEAP32[(($143)>>2)]=$151;
 HEAP32[(($2)>>2)]=$150;
 var $152=HEAP32[(($__comp)>>2)];
 var $153=HEAP32[(($143)>>2)];
 var $154=HEAP32[(($139)>>2)];
 var $155=FUNCTION_TABLE[$152]($153,$154);
 if($155){label=40;break;}else{label=39;break;}
 case 39: 
 var $156=((($144)+(1))|0);
 var $__n_swaps_0=$156;label=53;break;
 case 40: 
 var $158=HEAP32[(($139)>>2)];
 var $159=HEAP32[(($143)>>2)];
 HEAP32[(($139)>>2)]=$159;
 HEAP32[(($143)>>2)]=$158;
 var $160=HEAP32[(($__comp)>>2)];
 var $161=HEAP32[(($139)>>2)];
 var $162=HEAP32[(($142)>>2)];
 var $163=FUNCTION_TABLE[$160]($161,$162);
 if($163){label=42;break;}else{label=41;break;}
 case 41: 
 var $164=((($144)+(2))|0);
 var $__n_swaps_0=$164;label=53;break;
 case 42: 
 var $166=HEAP32[(($142)>>2)];
 var $167=HEAP32[(($139)>>2)];
 HEAP32[(($142)>>2)]=$167;
 HEAP32[(($139)>>2)]=$166;
 var $168=HEAP32[(($__comp)>>2)];
 var $169=HEAP32[(($142)>>2)];
 var $170=HEAP32[(($_0)>>2)];
 var $171=FUNCTION_TABLE[$168]($169,$170);
 if($171){label=44;break;}else{label=43;break;}
 case 43: 
 var $172=((($144)+(3))|0);
 var $__n_swaps_0=$172;label=53;break;
 case 44: 
 var $174=HEAP32[(($_0)>>2)];
 var $175=HEAP32[(($142)>>2)];
 HEAP32[(($_0)>>2)]=$175;
 HEAP32[(($142)>>2)]=$174;
 var $176=((($144)+(4))|0);
 var $__n_swaps_0=$176;label=53;break;
 case 45: 
 var $178=HEAP32[(($__comp)>>2)];
 var $179=HEAP32[(($139)>>2)];
 var $180=HEAP32[(($_0)>>2)];
 var $181=FUNCTION_TABLE[$178]($179,$180);
 var $182=HEAP32[(($__comp)>>2)];
 var $183=HEAP32[(($2)>>2)];
 var $184=HEAP32[(($139)>>2)];
 var $185=FUNCTION_TABLE[$182]($183,$184);
 if($181){label=49;break;}else{label=46;break;}
 case 46: 
 if($185){label=47;break;}else{var $__n_swaps_0=0;label=53;break;}
 case 47: 
 var $188=HEAP32[(($139)>>2)];
 var $189=HEAP32[(($2)>>2)];
 HEAP32[(($139)>>2)]=$189;
 HEAP32[(($2)>>2)]=$188;
 var $190=HEAP32[(($__comp)>>2)];
 var $191=HEAP32[(($139)>>2)];
 var $192=HEAP32[(($_0)>>2)];
 var $193=FUNCTION_TABLE[$190]($191,$192);
 if($193){label=48;break;}else{var $__n_swaps_0=1;label=53;break;}
 case 48: 
 var $195=HEAP32[(($_0)>>2)];
 var $196=HEAP32[(($139)>>2)];
 HEAP32[(($_0)>>2)]=$196;
 HEAP32[(($139)>>2)]=$195;
 var $__n_swaps_0=2;label=53;break;
 case 49: 
 var $198=HEAP32[(($_0)>>2)];
 if($185){label=50;break;}else{label=51;break;}
 case 50: 
 var $200=HEAP32[(($2)>>2)];
 HEAP32[(($_0)>>2)]=$200;
 HEAP32[(($2)>>2)]=$198;
 var $__n_swaps_0=1;label=53;break;
 case 51: 
 var $202=HEAP32[(($139)>>2)];
 HEAP32[(($_0)>>2)]=$202;
 HEAP32[(($139)>>2)]=$198;
 var $203=HEAP32[(($__comp)>>2)];
 var $204=HEAP32[(($2)>>2)];
 var $205=FUNCTION_TABLE[$203]($204,$198);
 if($205){label=52;break;}else{var $__n_swaps_0=1;label=53;break;}
 case 52: 
 var $207=HEAP32[(($139)>>2)];
 var $208=HEAP32[(($2)>>2)];
 HEAP32[(($139)>>2)]=$208;
 HEAP32[(($2)>>2)]=$207;
 var $__n_swaps_0=2;label=53;break;
 case 53: 
 var $__n_swaps_0;
 var $209=HEAP32[(($__comp)>>2)];
 var $210=HEAP32[(($_0)>>2)];
 var $211=HEAP32[(($139)>>2)];
 var $212=FUNCTION_TABLE[$209]($210,$211);
 if($212){var $__j_3=$2;var $__n_swaps_3=$__n_swaps_0;label=67;break;}else{var $__j_0=$2;label=54;break;}
 case 54: 
 var $__j_0;
 var $213=((($__j_0)-(4))|0);
 var $214=($_0|0)==($213|0);
 if($214){label=55;break;}else{label=65;break;}
 case 55: 
 var $216=(($_0+4)|0);
 var $217=HEAP32[(($__comp)>>2)];
 var $218=HEAP32[(($_0)>>2)];
 var $219=HEAP32[(($2)>>2)];
 var $220=FUNCTION_TABLE[$217]($218,$219);
 if($220){var $__i_1=$216;label=59;break;}else{var $__i_0=$216;label=56;break;}
 case 56: 
 var $__i_0;
 var $221=($__i_0|0)==($2|0);
 if($221){label=83;break;}else{label=57;break;}
 case 57: 
 var $223=HEAP32[(($__comp)>>2)];
 var $224=HEAP32[(($_0)>>2)];
 var $225=HEAP32[(($__i_0)>>2)];
 var $226=FUNCTION_TABLE[$223]($224,$225);
 var $227=(($__i_0+4)|0);
 if($226){label=58;break;}else{var $__i_0=$227;label=56;break;}
 case 58: 
 var $229=HEAP32[(($__i_0)>>2)];
 var $230=HEAP32[(($2)>>2)];
 HEAP32[(($__i_0)>>2)]=$230;
 HEAP32[(($2)>>2)]=$229;
 var $__i_1=$227;label=59;break;
 case 59: 
 var $__i_1;
 var $232=($__i_1|0)==($2|0);
 if($232){label=83;break;}else{var $__j_1_ph=$2;var $__i_2_ph=$__i_1;label=60;break;}
 case 60: 
 var $__i_2_ph;
 var $__j_1_ph;
 var $__i_2=$__i_2_ph;label=61;break;
 case 61: 
 var $__i_2;
 var $234=HEAP32[(($__comp)>>2)];
 var $235=HEAP32[(($_0)>>2)];
 var $236=HEAP32[(($__i_2)>>2)];
 var $237=FUNCTION_TABLE[$234]($235,$236);
 var $238=(($__i_2+4)|0);
 if($237){var $__j_2=$__j_1_ph;label=62;break;}else{var $__i_2=$238;label=61;break;}
 case 62: 
 var $__j_2;
 var $239=HEAP32[(($__comp)>>2)];
 var $240=HEAP32[(($_0)>>2)];
 var $241=((($__j_2)-(4))|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=FUNCTION_TABLE[$239]($240,$242);
 if($243){var $__j_2=$241;label=62;break;}else{label=63;break;}
 case 63: 
 var $245=($__i_2>>>0)<($241>>>0);
 if($245){label=64;break;}else{var $_0=$__i_2;label=3;break;}
 case 64: 
 var $247=HEAP32[(($__i_2)>>2)];
 var $248=HEAP32[(($241)>>2)];
 HEAP32[(($__i_2)>>2)]=$248;
 HEAP32[(($241)>>2)]=$247;
 var $__j_1_ph=$241;var $__i_2_ph=$238;label=60;break;
 case 65: 
 var $250=HEAP32[(($__comp)>>2)];
 var $251=HEAP32[(($213)>>2)];
 var $252=HEAP32[(($139)>>2)];
 var $253=FUNCTION_TABLE[$250]($251,$252);
 if($253){label=66;break;}else{var $__j_0=$213;label=54;break;}
 case 66: 
 var $255=HEAP32[(($_0)>>2)];
 var $256=HEAP32[(($213)>>2)];
 HEAP32[(($_0)>>2)]=$256;
 HEAP32[(($213)>>2)]=$255;
 var $257=((($__n_swaps_0)+(1))|0);
 var $__j_3=$213;var $__n_swaps_3=$257;label=67;break;
 case 67: 
 var $__n_swaps_3;
 var $__j_3;
 var $259=(($_0+4)|0);
 var $260=($259>>>0)<($__j_3>>>0);
 if($260){var $__j_4_ph=$__j_3;var $__i_3_ph=$259;var $__n_swaps_4_ph=$__n_swaps_3;var $__m_0_ph=$139;label=68;break;}else{var $__i_4=$259;var $__n_swaps_5=$__n_swaps_3;var $__m_2=$139;label=73;break;}
 case 68: 
 var $__m_0_ph;
 var $__n_swaps_4_ph;
 var $__i_3_ph;
 var $__j_4_ph;
 var $__i_3=$__i_3_ph;label=69;break;
 case 69: 
 var $__i_3;
 var $262=HEAP32[(($__comp)>>2)];
 var $263=HEAP32[(($__i_3)>>2)];
 var $264=HEAP32[(($__m_0_ph)>>2)];
 var $265=FUNCTION_TABLE[$262]($263,$264);
 var $266=(($__i_3+4)|0);
 if($265){var $__i_3=$266;label=69;break;}else{var $__j_5=$__j_4_ph;label=70;break;}
 case 70: 
 var $__j_5;
 var $267=HEAP32[(($__comp)>>2)];
 var $268=((($__j_5)-(4))|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=HEAP32[(($__m_0_ph)>>2)];
 var $271=FUNCTION_TABLE[$267]($269,$270);
 if($271){label=71;break;}else{var $__j_5=$268;label=70;break;}
 case 71: 
 var $273=($__i_3>>>0)>($268>>>0);
 if($273){var $__i_4=$__i_3;var $__n_swaps_5=$__n_swaps_4_ph;var $__m_2=$__m_0_ph;label=73;break;}else{label=72;break;}
 case 72: 
 var $275=HEAP32[(($__i_3)>>2)];
 var $276=HEAP32[(($268)>>2)];
 HEAP32[(($__i_3)>>2)]=$276;
 HEAP32[(($268)>>2)]=$275;
 var $277=((($__n_swaps_4_ph)+(1))|0);
 var $278=($__m_0_ph|0)==($__i_3|0);
 var $___m_0=$278?$268:$__m_0_ph;
 var $__j_4_ph=$268;var $__i_3_ph=$266;var $__n_swaps_4_ph=$277;var $__m_0_ph=$___m_0;label=68;break;
 case 73: 
 var $__m_2;
 var $__n_swaps_5;
 var $__i_4;
 var $279=($__i_4|0)==($__m_2|0);
 if($279){var $__n_swaps_6=$__n_swaps_5;label=76;break;}else{label=74;break;}
 case 74: 
 var $281=HEAP32[(($__comp)>>2)];
 var $282=HEAP32[(($__m_2)>>2)];
 var $283=HEAP32[(($__i_4)>>2)];
 var $284=FUNCTION_TABLE[$281]($282,$283);
 if($284){label=75;break;}else{var $__n_swaps_6=$__n_swaps_5;label=76;break;}
 case 75: 
 var $286=HEAP32[(($__i_4)>>2)];
 var $287=HEAP32[(($__m_2)>>2)];
 HEAP32[(($__i_4)>>2)]=$287;
 HEAP32[(($__m_2)>>2)]=$286;
 var $288=((($__n_swaps_5)+(1))|0);
 var $__n_swaps_6=$288;label=76;break;
 case 76: 
 var $__n_swaps_6;
 var $290=($__n_swaps_6|0)==0;
 if($290){label=77;break;}else{label=80;break;}
 case 77: 
 var $292=__ZNSt3__127__insertion_sort_incompleteIRPFbPN10ClipperLib6OutRecES3_EPS3_EEbT0_S8_T_($_0,$__i_4,$__comp);
 var $293=(($__i_4+4)|0);
 var $294=__ZNSt3__127__insertion_sort_incompleteIRPFbPN10ClipperLib6OutRecES3_EPS3_EEbT0_S8_T_($293,$_0171_ph,$__comp);
 if($294){label=78;break;}else{label=79;break;}
 case 78: 
 if($292){label=83;break;}else{var $_0_ph=$_0;var $_0171_ph=$__i_4;label=2;break;}
 case 79: 
 if($292){var $_0=$293;label=3;break;}else{label=80;break;}
 case 80: 
 var $298=$__i_4;
 var $299=((($298)-($3))|0);
 var $300=((($1)-($298))|0);
 var $301=($299|0)<($300|0);
 if($301){label=81;break;}else{label=82;break;}
 case 81: 
 __ZNSt3__16__sortIRPFbPN10ClipperLib6OutRecES3_EPS3_EEvT0_S8_T_($_0,$__i_4,$__comp);
 var $303=(($__i_4+4)|0);
 var $_0=$303;label=3;break;
 case 82: 
 var $305=(($__i_4+4)|0);
 __ZNSt3__16__sortIRPFbPN10ClipperLib6OutRecES3_EPS3_EEvT0_S8_T_($305,$_0171_ph,$__comp);
 var $_0_ph=$_0;var $_0171_ph=$__i_4;label=2;break;
 case 83: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17__sort4IRPFbPN10ClipperLib6OutRecES3_EPS3_EEjT0_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__c)>>2)];
 var $2=HEAP32[(($__x2)>>2)];
 var $3=HEAP32[(($__x1)>>2)];
 var $4=FUNCTION_TABLE[$1]($2,$3);
 var $5=HEAP32[(($__c)>>2)];
 var $6=HEAP32[(($__x3)>>2)];
 var $7=HEAP32[(($__x2)>>2)];
 var $8=FUNCTION_TABLE[$5]($6,$7);
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 if($8){label=3;break;}else{var $_0_i=0;label=9;break;}
 case 3: 
 var $11=HEAP32[(($__x2)>>2)];
 var $12=HEAP32[(($__x3)>>2)];
 HEAP32[(($__x2)>>2)]=$12;
 HEAP32[(($__x3)>>2)]=$11;
 var $13=HEAP32[(($__c)>>2)];
 var $14=HEAP32[(($__x2)>>2)];
 var $15=HEAP32[(($__x1)>>2)];
 var $16=FUNCTION_TABLE[$13]($14,$15);
 if($16){label=4;break;}else{var $_0_i=1;label=9;break;}
 case 4: 
 var $18=HEAP32[(($__x1)>>2)];
 var $19=HEAP32[(($__x2)>>2)];
 HEAP32[(($__x1)>>2)]=$19;
 HEAP32[(($__x2)>>2)]=$18;
 var $_0_i=2;label=9;break;
 case 5: 
 var $21=HEAP32[(($__x1)>>2)];
 if($8){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=HEAP32[(($__x3)>>2)];
 HEAP32[(($__x1)>>2)]=$23;
 HEAP32[(($__x3)>>2)]=$21;
 var $_0_i=1;label=9;break;
 case 7: 
 var $25=HEAP32[(($__x2)>>2)];
 HEAP32[(($__x1)>>2)]=$25;
 HEAP32[(($__x2)>>2)]=$21;
 var $26=HEAP32[(($__c)>>2)];
 var $27=HEAP32[(($__x3)>>2)];
 var $28=FUNCTION_TABLE[$26]($27,$21);
 if($28){label=8;break;}else{var $_0_i=1;label=9;break;}
 case 8: 
 var $30=HEAP32[(($__x2)>>2)];
 var $31=HEAP32[(($__x3)>>2)];
 HEAP32[(($__x2)>>2)]=$31;
 HEAP32[(($__x3)>>2)]=$30;
 var $_0_i=2;label=9;break;
 case 9: 
 var $_0_i;
 var $32=HEAP32[(($__c)>>2)];
 var $33=HEAP32[(($__x4)>>2)];
 var $34=HEAP32[(($__x3)>>2)];
 var $35=FUNCTION_TABLE[$32]($33,$34);
 if($35){label=10;break;}else{var $__r_0=$_0_i;label=13;break;}
 case 10: 
 var $37=HEAP32[(($__x3)>>2)];
 var $38=HEAP32[(($__x4)>>2)];
 HEAP32[(($__x3)>>2)]=$38;
 HEAP32[(($__x4)>>2)]=$37;
 var $39=((($_0_i)+(1))|0);
 var $40=HEAP32[(($__c)>>2)];
 var $41=HEAP32[(($__x3)>>2)];
 var $42=HEAP32[(($__x2)>>2)];
 var $43=FUNCTION_TABLE[$40]($41,$42);
 if($43){label=11;break;}else{var $__r_0=$39;label=13;break;}
 case 11: 
 var $45=HEAP32[(($__x2)>>2)];
 var $46=HEAP32[(($__x3)>>2)];
 HEAP32[(($__x2)>>2)]=$46;
 HEAP32[(($__x3)>>2)]=$45;
 var $47=((($_0_i)+(2))|0);
 var $48=HEAP32[(($__c)>>2)];
 var $49=HEAP32[(($__x2)>>2)];
 var $50=HEAP32[(($__x1)>>2)];
 var $51=FUNCTION_TABLE[$48]($49,$50);
 if($51){label=12;break;}else{var $__r_0=$47;label=13;break;}
 case 12: 
 var $53=HEAP32[(($__x1)>>2)];
 var $54=HEAP32[(($__x2)>>2)];
 HEAP32[(($__x1)>>2)]=$54;
 HEAP32[(($__x2)>>2)]=$53;
 var $55=((($_0_i)+(3))|0);
 var $__r_0=$55;label=13;break;
 case 13: 
 var $__r_0;
 return $__r_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbPN10ClipperLib6OutRecES3_EPS3_EEbT0_S8_T_($__first,$__last,$__comp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__last;
 var $2=$__first;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 switch(($4|0)){case 4:{ label=12;break;}case 5:{ label=13;break;}case 2:{ label=2;break;}case 0:case 1:{ var $_0=1;label=34;break;}case 3:{ label=4;break;}default:{label=18;break;}}break;
 case 2: 
 var $6=HEAP32[(($__comp)>>2)];
 var $7=((($__last)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($__first)>>2)];
 var $10=FUNCTION_TABLE[$6]($8,$9);
 if($10){label=3;break;}else{var $_0=1;label=34;break;}
 case 3: 
 var $12=HEAP32[(($__first)>>2)];
 var $13=HEAP32[(($7)>>2)];
 HEAP32[(($__first)>>2)]=$13;
 HEAP32[(($7)>>2)]=$12;
 var $_0=1;label=34;break;
 case 4: 
 var $15=(($__first+4)|0);
 var $16=((($__last)-(4))|0);
 var $17=HEAP32[(($__comp)>>2)];
 var $18=HEAP32[(($15)>>2)];
 var $19=HEAP32[(($__first)>>2)];
 var $20=FUNCTION_TABLE[$17]($18,$19);
 var $21=HEAP32[(($__comp)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($15)>>2)];
 var $24=FUNCTION_TABLE[$21]($22,$23);
 if($20){label=8;break;}else{label=5;break;}
 case 5: 
 if($24){label=6;break;}else{var $_0=1;label=34;break;}
 case 6: 
 var $27=HEAP32[(($15)>>2)];
 var $28=HEAP32[(($16)>>2)];
 HEAP32[(($15)>>2)]=$28;
 HEAP32[(($16)>>2)]=$27;
 var $29=HEAP32[(($__comp)>>2)];
 var $30=HEAP32[(($15)>>2)];
 var $31=HEAP32[(($__first)>>2)];
 var $32=FUNCTION_TABLE[$29]($30,$31);
 if($32){label=7;break;}else{var $_0=1;label=34;break;}
 case 7: 
 var $34=HEAP32[(($__first)>>2)];
 var $35=HEAP32[(($15)>>2)];
 HEAP32[(($__first)>>2)]=$35;
 HEAP32[(($15)>>2)]=$34;
 var $_0=1;label=34;break;
 case 8: 
 var $37=HEAP32[(($__first)>>2)];
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $39=HEAP32[(($16)>>2)];
 HEAP32[(($__first)>>2)]=$39;
 HEAP32[(($16)>>2)]=$37;
 var $_0=1;label=34;break;
 case 10: 
 var $41=HEAP32[(($15)>>2)];
 HEAP32[(($__first)>>2)]=$41;
 HEAP32[(($15)>>2)]=$37;
 var $42=HEAP32[(($__comp)>>2)];
 var $43=HEAP32[(($16)>>2)];
 var $44=FUNCTION_TABLE[$42]($43,$37);
 if($44){label=11;break;}else{var $_0=1;label=34;break;}
 case 11: 
 var $46=HEAP32[(($15)>>2)];
 var $47=HEAP32[(($16)>>2)];
 HEAP32[(($15)>>2)]=$47;
 HEAP32[(($16)>>2)]=$46;
 var $_0=1;label=34;break;
 case 12: 
 var $49=(($__first+4)|0);
 var $50=(($__first+8)|0);
 var $51=((($__last)-(4))|0);
 var $52=__ZNSt3__17__sort4IRPFbPN10ClipperLib6OutRecES3_EPS3_EEjT0_S8_S8_S8_T_($__first,$49,$50,$51,$__comp);
 var $_0=1;label=34;break;
 case 13: 
 var $54=(($__first+4)|0);
 var $55=(($__first+8)|0);
 var $56=(($__first+12)|0);
 var $57=((($__last)-(4))|0);
 var $58=__ZNSt3__17__sort4IRPFbPN10ClipperLib6OutRecES3_EPS3_EEjT0_S8_S8_S8_T_($__first,$54,$55,$56,$__comp);
 var $59=HEAP32[(($__comp)>>2)];
 var $60=HEAP32[(($57)>>2)];
 var $61=HEAP32[(($56)>>2)];
 var $62=FUNCTION_TABLE[$59]($60,$61);
 if($62){label=14;break;}else{var $_0=1;label=34;break;}
 case 14: 
 var $64=HEAP32[(($56)>>2)];
 var $65=HEAP32[(($57)>>2)];
 HEAP32[(($56)>>2)]=$65;
 HEAP32[(($57)>>2)]=$64;
 var $66=HEAP32[(($__comp)>>2)];
 var $67=HEAP32[(($56)>>2)];
 var $68=HEAP32[(($55)>>2)];
 var $69=FUNCTION_TABLE[$66]($67,$68);
 if($69){label=15;break;}else{var $_0=1;label=34;break;}
 case 15: 
 var $71=HEAP32[(($55)>>2)];
 var $72=HEAP32[(($56)>>2)];
 HEAP32[(($55)>>2)]=$72;
 HEAP32[(($56)>>2)]=$71;
 var $73=HEAP32[(($__comp)>>2)];
 var $74=HEAP32[(($54)>>2)];
 var $75=FUNCTION_TABLE[$73]($72,$74);
 if($75){label=16;break;}else{var $_0=1;label=34;break;}
 case 16: 
 var $77=HEAP32[(($54)>>2)];
 var $78=HEAP32[(($55)>>2)];
 HEAP32[(($54)>>2)]=$78;
 HEAP32[(($55)>>2)]=$77;
 var $79=HEAP32[(($__comp)>>2)];
 var $80=HEAP32[(($__first)>>2)];
 var $81=FUNCTION_TABLE[$79]($78,$80);
 if($81){label=17;break;}else{var $_0=1;label=34;break;}
 case 17: 
 var $83=HEAP32[(($__first)>>2)];
 var $84=HEAP32[(($54)>>2)];
 HEAP32[(($__first)>>2)]=$84;
 HEAP32[(($54)>>2)]=$83;
 var $_0=1;label=34;break;
 case 18: 
 var $86=(($__first+8)|0);
 var $87=(($__first+4)|0);
 var $88=HEAP32[(($__comp)>>2)];
 var $89=HEAP32[(($87)>>2)];
 var $90=HEAP32[(($__first)>>2)];
 var $91=FUNCTION_TABLE[$88]($89,$90);
 var $92=HEAP32[(($__comp)>>2)];
 var $93=HEAP32[(($86)>>2)];
 var $94=HEAP32[(($87)>>2)];
 var $95=FUNCTION_TABLE[$92]($93,$94);
 if($91){label=22;break;}else{label=19;break;}
 case 19: 
 if($95){label=20;break;}else{label=26;break;}
 case 20: 
 var $98=HEAP32[(($87)>>2)];
 var $99=HEAP32[(($86)>>2)];
 HEAP32[(($87)>>2)]=$99;
 HEAP32[(($86)>>2)]=$98;
 var $100=HEAP32[(($__comp)>>2)];
 var $101=HEAP32[(($__first)>>2)];
 var $102=FUNCTION_TABLE[$100]($99,$101);
 if($102){label=21;break;}else{label=26;break;}
 case 21: 
 var $104=HEAP32[(($__first)>>2)];
 var $105=HEAP32[(($87)>>2)];
 HEAP32[(($__first)>>2)]=$105;
 HEAP32[(($87)>>2)]=$104;
 label=26;break;
 case 22: 
 var $107=HEAP32[(($__first)>>2)];
 if($95){label=23;break;}else{label=24;break;}
 case 23: 
 var $109=HEAP32[(($86)>>2)];
 HEAP32[(($__first)>>2)]=$109;
 HEAP32[(($86)>>2)]=$107;
 label=26;break;
 case 24: 
 var $111=HEAP32[(($87)>>2)];
 HEAP32[(($__first)>>2)]=$111;
 HEAP32[(($87)>>2)]=$107;
 var $112=HEAP32[(($__comp)>>2)];
 var $113=HEAP32[(($86)>>2)];
 var $114=FUNCTION_TABLE[$112]($113,$107);
 if($114){label=25;break;}else{label=26;break;}
 case 25: 
 var $116=HEAP32[(($87)>>2)];
 var $117=HEAP32[(($86)>>2)];
 HEAP32[(($87)>>2)]=$117;
 HEAP32[(($86)>>2)]=$116;
 label=26;break;
 case 26: 
 var $118=(($__first+12)|0);
 var $119=($118|0)==($__last|0);
 if($119){var $_0=1;label=34;break;}else{var $__j_060=$86;var $__count_061=0;var $__i_062=$118;label=27;break;}
 case 27: 
 var $__i_062;
 var $__count_061;
 var $__j_060;
 var $120=HEAP32[(($__comp)>>2)];
 var $121=HEAP32[(($__i_062)>>2)];
 var $122=HEAP32[(($__j_060)>>2)];
 var $123=FUNCTION_TABLE[$120]($121,$122);
 if($123){label=28;break;}else{var $__count_1=$__count_061;label=33;break;}
 case 28: 
 var $125=HEAP32[(($__i_062)>>2)];
 var $__k_0=$__j_060;var $__j_1=$__i_062;label=29;break;
 case 29: 
 var $__j_1;
 var $__k_0;
 var $127=HEAP32[(($__k_0)>>2)];
 HEAP32[(($__j_1)>>2)]=$127;
 var $128=($__k_0|0)==($__first|0);
 if($128){var $__k_0_lcssa=$__first;label=31;break;}else{label=30;break;}
 case 30: 
 var $130=HEAP32[(($__comp)>>2)];
 var $131=((($__k_0)-(4))|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=FUNCTION_TABLE[$130]($125,$132);
 if($133){var $__j_1=$__k_0;var $__k_0=$131;label=29;break;}else{var $__k_0_lcssa=$__k_0;label=31;break;}
 case 31: 
 var $__k_0_lcssa;
 HEAP32[(($__k_0_lcssa)>>2)]=$125;
 var $134=((($__count_061)+(1))|0);
 var $135=($134|0)==8;
 if($135){label=32;break;}else{var $__count_1=$134;label=33;break;}
 case 32: 
 var $137=(($__i_062+4)|0);
 var $138=($137|0)==($__last|0);
 var $_0=$138;label=34;break;
 case 33: 
 var $__count_1;
 var $140=(($__i_062+4)|0);
 var $141=($140|0)==($__last|0);
 if($141){var $_0=1;label=34;break;}else{var $__j_060=$__i_062;var $__count_061=$__count_1;var $__i_062=$140;label=27;break;}
 case 34: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIN10ClipperLib9ExPolygonENS_9allocatorIS2_EEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(24))&-1);
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $14=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$10;
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0; HEAP32[((($13)+(12))>>2)]=0; HEAP32[((($13)+(16))>>2)]=0; HEAP32[((($13)+(20))>>2)]=0;
 var $_pre8_i=HEAP32[(($3)>>2)];
 var $14=$_pre8_i;label=4;break;
 case 4: 
 var $14;
 var $15=(($14+24)|0);
 HEAP32[(($3)>>2)]=$15;
 var $16=((($_0_i)-(1))|0);
 var $17=($16|0)==0;
 if($17){label=32;break;}else{var $_0_i=$16;var $10=$15;label=2;break;}
 case 5: 
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=(((($22|0))/(24))&-1);
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>178956970;
 if($25){label=6;break;}else{var $30=$2;var $29=$20;label=7;break;}
 case 6: 
 var $27=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($27);
 var $_pre=HEAP32[(($1)>>2)];
 var $_pre62=HEAP32[(($19)>>2)];
 var $30=$_pre;var $29=$_pre62;label=7;break;
 case 7: 
 var $29;
 var $30;
 var $31=$30;
 var $32=$29;
 var $33=((($31)-($32))|0);
 var $34=(((($33|0))/(24))&-1);
 var $35=($34>>>0)>89478484;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=HEAP32[(($3)>>2)];
 var $37=$36;
 var $38=((($37)-($32))|0);
 var $39=(((($38|0))/(24))&-1);
 var $_064=178956970;var $48=$39;label=10;break;
 case 9: 
 var $40=$34<<1;
 var $41=($40>>>0)<($24>>>0);
 var $_sroa_speculated=$41?$24:$40;
 var $42=HEAP32[(($3)>>2)];
 var $43=$42;
 var $44=((($43)-($32))|0);
 var $45=(((($44|0))/(24))&-1);
 var $46=($_sroa_speculated|0)==0;
 if($46){var $53=0;var $_065=0;var $52=$45;label=11;break;}else{var $_064=$_sroa_speculated;var $48=$45;label=10;break;}
 case 10: 
 var $48;
 var $_064;
 var $49=((($_064)*(24))&-1);
 var $50=__Znwj($49);
 var $51=$50;
 var $53=$51;var $_065=$_064;var $52=$48;label=11;break;
 case 11: 
 var $52;
 var $_065;
 var $53;
 var $54=(($53+((($52)*(24))&-1))|0);
 var $_0_i39=$__n;var $56=$54;label=12;break;
 case 12: 
 var $56;
 var $_0_i39;
 var $57=($56|0)==0;
 if($57){var $60=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $59=$56;
 HEAP32[(($59)>>2)]=0; HEAP32[((($59)+(4))>>2)]=0; HEAP32[((($59)+(8))>>2)]=0; HEAP32[((($59)+(12))>>2)]=0; HEAP32[((($59)+(16))>>2)]=0; HEAP32[((($59)+(20))>>2)]=0;
 var $60=$56;label=14;break;
 case 14: 
 var $60;
 var $61=(($60+24)|0);
 var $62=((($_0_i39)-(1))|0);
 var $63=($62|0)==0;
 if($63){label=15;break;}else{var $_0_i39=$62;var $56=$61;label=12;break;}
 case 15: 
 var $64=(($53+((($_065)*(24))&-1))|0);
 var $65=HEAP32[(($19)>>2)];
 var $66=HEAP32[(($3)>>2)];
 var $67=($66|0)==($65|0);
 if($67){var $76=$65;var $75=$54;var $74=$65;label=20;break;}else{var $_049_i=$66;var $__v_sroa_1_4_load5055=$54;label=16;break;}
 case 16: 
 var $__v_sroa_1_4_load5055;
 var $_049_i;
 var $68=((($__v_sroa_1_4_load5055)-(24))|0);
 var $69=((($_049_i)-(24))|0);
 var $70=($68|0)==0;
 if($70){label=18;break;}else{label=17;break;}
 case 17: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonC1ERKS0_($68,$69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=26;break; }
 case 18: 
 var $72=($69|0)==($65|0);
 if($72){label=19;break;}else{var $_049_i=$69;var $__v_sroa_1_4_load5055=$68;label=16;break;}
 case 19: 
 var $_pre_i42=HEAP32[(($19)>>2)];
 var $_pre63=HEAP32[(($3)>>2)];
 var $76=$_pre_i42;var $75=$68;var $74=$_pre63;label=20;break;
 case 20: 
 var $74;
 var $75;
 var $76;
 HEAP32[(($19)>>2)]=$75;
 HEAP32[(($3)>>2)]=$61;
 HEAP32[(($1)>>2)]=$64;
 var $__v_sroa_2_8_load5457=$74;label=21;break;
 case 21: 
 var $__v_sroa_2_8_load5457;
 var $77=($76|0)==($__v_sroa_2_8_load5457|0);
 if($77){label=24;break;}else{label=22;break;}
 case 22: 
 var $79=((($__v_sroa_2_8_load5457)-(24))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load5457=$79;label=21;break; } else { label=23;break; }
 case 23: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $82=$81$0;
 ___cxa_call_unexpected($82);
 throw "Reached an unreachable!";
 case 24: 
 var $83=($76|0)==0;
 if($83){label=32;break;}else{label=25;break;}
 case 25: 
 var $85=$76;
 __ZdlPv($85);
 label=32;break;
 case 26: 
 var $87$0 = ___cxa_find_matching_catch(-1, -1); var $87$1 = tempRet0;
 var $__v_sroa_2_8_load5456=$61;label=27;break;
 case 27: 
 var $__v_sroa_2_8_load5456;
 var $88=($__v_sroa_1_4_load5055|0)==($__v_sroa_2_8_load5456|0);
 if($88){label=30;break;}else{label=28;break;}
 case 28: 
 var $90=((($__v_sroa_2_8_load5456)-(24))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib9ExPolygonD2Ev($90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__v_sroa_2_8_load5456=$90;label=27;break; } else { label=29;break; }
 case 29: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $93=$92$0;
 ___cxa_call_unexpected($93);
 throw "Reached an unreachable!";
 case 30: 
 var $94=($53|0)==0;
 if($94){label=33;break;}else{label=31;break;}
 case 31: 
 var $96=$53;
 __ZdlPv($96);
 label=33;break;
 case 32: 
 return;
 case 33: 
 ___resumeException($87$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(12))&-1);
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $16=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($10)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=(($10+4)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=(($10+8)|0);
 HEAP32[(($15)>>2)]=0;
 var $_pre34_i=HEAP32[(($3)>>2)];
 var $16=$_pre34_i;label=4;break;
 case 4: 
 var $16;
 var $17=(($16+12)|0);
 HEAP32[(($3)>>2)]=$17;
 var $18=((($_0_i)-(1))|0);
 var $19=($18|0)==0;
 if($19){label=47;break;}else{var $_0_i=$18;var $10=$17;label=2;break;}
 case 5: 
 var $21=(($this)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=((($6)-($23))|0);
 var $25=(((($24|0))/(12))&-1);
 var $26=((($25)+($__n))|0);
 var $27=($26>>>0)>357913941;
 if($27){label=6;break;}else{var $32=$2;var $31=$22;label=7;break;}
 case 6: 
 var $29=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($29);
 var $_pre=HEAP32[(($1)>>2)];
 var $_pre80=HEAP32[(($21)>>2)];
 var $32=$_pre;var $31=$_pre80;label=7;break;
 case 7: 
 var $31;
 var $32;
 var $33=$32;
 var $34=$31;
 var $35=((($33)-($34))|0);
 var $36=(((($35|0))/(12))&-1);
 var $37=($36>>>0)>178956969;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=HEAP32[(($3)>>2)];
 var $39=$38;
 var $40=((($39)-($34))|0);
 var $41=(((($40|0))/(12))&-1);
 var $_082=357913941;var $50=$41;label=10;break;
 case 9: 
 var $42=$36<<1;
 var $43=($42>>>0)<($26>>>0);
 var $_sroa_speculated=$43?$26:$42;
 var $44=HEAP32[(($3)>>2)];
 var $45=$44;
 var $46=((($45)-($34))|0);
 var $47=(((($46|0))/(12))&-1);
 var $48=($_sroa_speculated|0)==0;
 if($48){var $55=0;var $_083=0;var $54=$47;label=11;break;}else{var $_082=$_sroa_speculated;var $50=$47;label=10;break;}
 case 10: 
 var $50;
 var $_082;
 var $51=((($_082)*(12))&-1);
 var $52=__Znwj($51);
 var $53=$52;
 var $55=$53;var $_083=$_082;var $54=$50;label=11;break;
 case 11: 
 var $54;
 var $_083;
 var $55;
 var $56=(($55+((($54)*(12))&-1))|0);
 var $_0_i39=$__n;var $58=$56;label=12;break;
 case 12: 
 var $58;
 var $_0_i39;
 var $59=($58|0)==0;
 if($59){var $64=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $61=(($58)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($58+4)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=(($58+8)|0);
 HEAP32[(($63)>>2)]=0;
 var $64=$58;label=14;break;
 case 14: 
 var $64;
 var $65=(($64+12)|0);
 var $66=((($_0_i39)-(1))|0);
 var $67=($66|0)==0;
 if($67){label=15;break;}else{var $_0_i39=$66;var $58=$65;label=12;break;}
 case 15: 
 var $68=(($55+((($_083)*(12))&-1))|0);
 var $69=HEAP32[(($21)>>2)];
 var $70=HEAP32[(($3)>>2)];
 var $71=($70|0)==($69|0);
 if($71){label=16;break;}else{var $_049_i=$70;var $__v_sroa_1_4_load6069=$56;label=17;break;}
 case 16: 
 HEAP32[(($21)>>2)]=$56;
 HEAP32[(($3)>>2)]=$65;
 HEAP32[(($1)>>2)]=$68;
 var $136=$69;label=37;break;
 case 17: 
 var $__v_sroa_1_4_load6069;
 var $_049_i;
 var $72=((($__v_sroa_1_4_load6069)-(12))|0);
 var $73=((($_049_i)-(12))|0);
 var $74=($72|0)==0;
 if($74){label=30;break;}else{label=18;break;}
 case 18: 
 var $76=(($72)|0);
 HEAP32[(($76)>>2)]=0;
 var $77=((($__v_sroa_1_4_load6069)-(12)+4)|0);
 HEAP32[(($77)>>2)]=0;
 var $78=((($__v_sroa_1_4_load6069)-(12)+8)|0);
 HEAP32[(($78)>>2)]=0;
 var $79=((($_049_i)-(12)+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($73)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$80;
 var $84=$82;
 var $85=((($83)-($84))|0);
 var $86=$85>>4;
 var $87=($86|0)==0;
 if($87){label=30;break;}else{label=19;break;}
 case 19: 
 var $89=($86>>>0)>268435455;
 if($89){label=20;break;}else{label=21;break;}
 case 20: 
 var $91=$72;
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($91) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=26;break; }
 case 21: 
 var $92=(function() { try { __THREW__ = 0; return __Znwj($85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=26;break; }
 case 22: 
 var $94=$92;
 HEAP32[(($77)>>2)]=$94;
 HEAP32[(($76)>>2)]=$94;
 var $95=(($94+($86<<4))|0);
 HEAP32[(($78)>>2)]=$95;
 var $96=HEAP32[(($81)>>2)];
 var $97=HEAP32[(($79)>>2)];
 var $98=($96|0)==($97|0);
 if($98){label=30;break;}else{var $_011_i_i_i=$96;var $99=$94;label=23;break;}
 case 23: 
 var $99;
 var $_011_i_i_i;
 var $100=($99|0)==0;
 if($100){var $104=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $102=$99;
 var $103=$_011_i_i_i;
 assert(16 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($103)+(8))>>2)];HEAP32[((($102)+(12))>>2)]=HEAP32[((($103)+(12))>>2)];
 var $_pre12_i_i_i=HEAP32[(($77)>>2)];
 var $104=$_pre12_i_i_i;label=25;break;
 case 25: 
 var $104;
 var $105=(($104+16)|0);
 HEAP32[(($77)>>2)]=$105;
 var $106=(($_011_i_i_i+16)|0);
 var $107=($106|0)==($97|0);
 if($107){label=30;break;}else{var $_011_i_i_i=$106;var $99=$105;label=23;break;}
 case 26: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 var $110=HEAP32[(($76)>>2)];
 var $111=$110;
 var $112=($110|0)==0;
 if($112){label=39;break;}else{label=27;break;}
 case 27: 
 var $113=HEAP32[(($77)>>2)];
 var $114=($110|0)==($113|0);
 if($114){label=29;break;}else{label=28;break;}
 case 28: 
 var $scevgep_i_i_i=((($113)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $115=(((-$111))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$115)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $116=$uglygep29_i_i_i>>>4;
 var $117=$116^-1;
 var $scevgep30_i_i_i=(($113+($117<<4))|0);
 HEAP32[(($77)>>2)]=$scevgep30_i_i_i;
 label=29;break;
 case 29: 
 var $118=$110;
 __ZdlPv($118);
 label=39;break;
 case 30: 
 var $119=($73|0)==($69|0);
 if($119){label=31;break;}else{var $_049_i=$73;var $__v_sroa_1_4_load6069=$72;label=17;break;}
 case 31: 
 var $_pre_i55=HEAP32[(($21)>>2)];
 var $_pre81=HEAP32[(($3)>>2)];
 HEAP32[(($21)>>2)]=$72;
 HEAP32[(($3)>>2)]=$65;
 HEAP32[(($1)>>2)]=$68;
 var $121=($_pre_i55|0)==($_pre81|0);
 if($121){var $136=$_pre_i55;label=37;break;}else{var $122=$_pre81;label=32;break;}
 case 32: 
 var $122;
 var $123=((($122)-(12))|0);
 var $124=(($123)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125;
 var $127=($125|0)==0;
 if($127){label=33;break;}else{label=34;break;}
 case 33: 
 var $128=($_pre_i55|0)==($123|0);
 if($128){var $136=$_pre_i55;label=37;break;}else{var $122=$123;label=32;break;}
 case 34: 
 var $129=((($122)-(12)+4)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($125|0)==($130|0);
 if($131){label=36;break;}else{label=35;break;}
 case 35: 
 var $scevgep_i_i_i_i_i45=((($130)-(16))|0);
 var $scevgep28_i_i_i_i_i46=$scevgep_i_i_i_i_i45;
 var $132=(((-$126))|0);
 var $uglygep_i_i_i_i_i47=(($scevgep28_i_i_i_i_i46+$132)|0);
 var $uglygep29_i_i_i_i_i48=$uglygep_i_i_i_i_i47;
 var $133=$uglygep29_i_i_i_i_i48>>>4;
 var $134=$133^-1;
 var $scevgep30_i_i_i_i_i49=(($130+($134<<4))|0);
 HEAP32[(($129)>>2)]=$scevgep30_i_i_i_i_i49;
 label=36;break;
 case 36: 
 var $135=$125;
 __ZdlPv($135);
 label=33;break;
 case 37: 
 var $136;
 var $137=($136|0)==0;
 if($137){label=47;break;}else{label=38;break;}
 case 38: 
 var $139=$136;
 __ZdlPv($139);
 label=47;break;
 case 39: 
 var $140=($__v_sroa_1_4_load6069|0)==($65|0);
 if($140){label=45;break;}else{var $141=$65;label=40;break;}
 case 40: 
 var $141;
 var $142=((($141)-(12))|0);
 var $143=(($142)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=$144;
 var $146=($144|0)==0;
 if($146){label=41;break;}else{label=42;break;}
 case 41: 
 var $147=($__v_sroa_1_4_load6069|0)==($142|0);
 if($147){label=45;break;}else{var $141=$142;label=40;break;}
 case 42: 
 var $148=((($141)-(12)+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($144|0)==($149|0);
 if($150){label=44;break;}else{label=43;break;}
 case 43: 
 var $scevgep_i_i_i_i_i=((($149)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $151=(((-$145))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$151)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $152=$uglygep29_i_i_i_i_i>>>4;
 var $153=$152^-1;
 var $scevgep30_i_i_i_i_i=(($149+($153<<4))|0);
 HEAP32[(($148)>>2)]=$scevgep30_i_i_i_i_i;
 label=44;break;
 case 44: 
 var $154=$144;
 __ZdlPv($154);
 label=41;break;
 case 45: 
 var $155=($55|0)==0;
 if($155){label=48;break;}else{label=46;break;}
 case 46: 
 var $157=$55;
 __ZdlPv($157);
 label=48;break;
 case 47: 
 return;
 case 48: 
 ___resumeException($109$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPN10ClipperLib5TEdgeENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=((($8)+(1))|0);
 var $10=($9>>>0)>1073741823;
 if($10){label=2;break;}else{var $14=$4;label=3;break;}
 case 2: 
 var $12=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($12);
 var $_pre=HEAP32[(($3)>>2)];
 var $14=$_pre;label=3;break;
 case 3: 
 var $14;
 var $15=(($this+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=$14;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>536870910;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=HEAP32[(($1)>>2)];
 var $23=$22;
 var $24=((($23)-($18))|0);
 var $25=$24>>2;
 var $_044=1073741823;var $35=$24;var $34=$25;label=6;break;
 case 5: 
 var $26=$19>>1;
 var $27=($26>>>0)<($9>>>0);
 var $_sroa_speculated=$27?$9:$26;
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=((($29)-($18))|0);
 var $31=$30>>2;
 var $32=($_sroa_speculated|0)==0;
 if($32){var $41=0;var $_045=0;var $40=$30;var $39=$31;label=7;break;}else{var $_044=$_sroa_speculated;var $35=$30;var $34=$31;label=6;break;}
 case 6: 
 var $34;
 var $35;
 var $_044;
 var $36=$_044<<2;
 var $37=__Znwj($36);
 var $38=$37;
 var $41=$38;var $_045=$_044;var $40=$35;var $39=$34;label=7;break;
 case 7: 
 var $39;
 var $40;
 var $_045;
 var $41;
 var $42=(($41+($39<<2))|0);
 var $43=(($41+($_045<<2))|0);
 var $44=($42|0)==0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $46=HEAP32[(($__x)>>2)];
 HEAP32[(($42)>>2)]=$46;
 label=9;break;
 case 9: 
 var $_sum=((($39)+(1))|0);
 var $47=(($41+($_sum<<2))|0);
 var $48=$41;
 var $49=$14;
 assert($40 % 1 === 0);(_memcpy($48, $49, $40)|0);
 HEAP32[(($3)>>2)]=$41;
 HEAP32[(($1)>>2)]=$47;
 HEAP32[(($15)>>2)]=$43;
 var $50=($14|0)==0;
 if($50){label=11;break;}else{label=10;break;}
 case 10: 
 __ZdlPv($49);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib17PolyOffsetBuilderC2ERKNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEERS8_dNS_8JoinTypeEdb($this,$in_polys,$out_polys,$delta,$jointype,$MiterLimit,$CheckInputs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__t_i_i_i_i_i625=sp;
 var $__t_i_i_i_i_i=(sp)+(16);
 var $arc=(sp)+(32);
 var $1=(sp)+(48);
 var $clpr=(sp)+(64);
 var $r=(sp)+(168);
 var $outer=(sp)+(200);
 var $2=(($this)|0);
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+4)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($this+16)|0);
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($this+20)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($this+24)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$delta>(-1e-20);
 var $11=$delta<(1e-20);
 var $or_cond=$10&$11;
 if($or_cond){label=2;break;}else{label=8;break;}
 case 2: 
 var $13=($out_polys|0)==($in_polys|0);
 if($13){label=196;break;}else{label=3;break;}
 case 3: 
 var $15=(($in_polys)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($in_polys+4)|0);
 var $18=HEAP32[(($17)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($out_polys,$16,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=6;break; }
 case 4: 
 var $lpad_loopexit741$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit741$1 = tempRet0;
 var $eh_lpad_body667$1=$lpad_loopexit741$1;var $eh_lpad_body667$0=$lpad_loopexit741$0;label=7;break;
 case 5: 
 var $lpad_loopexit747$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit747$1 = tempRet0;
 var $eh_lpad_body667$1=$lpad_loopexit747$1;var $eh_lpad_body667$0=$lpad_loopexit747$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit748$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit748$1 = tempRet0;
 var $eh_lpad_body667$1=$lpad_nonloopexit748$1;var $eh_lpad_body667$0=$lpad_nonloopexit748$0;label=7;break;
 case 7: 
 var $eh_lpad_body667$0;
 var $eh_lpad_body667$1;
 var $19=$eh_lpad_body667$0;
 var $20=$eh_lpad_body667$1;
 var $_2=$19;var $_2484=$20;label=201;break;
 case 8: 
 var $22=($2|0)==($in_polys|0);
 if($22){label=10;break;}else{label=9;break;}
 case 9: 
 var $24=(($in_polys)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($in_polys+4)|0);
 var $27=HEAP32[(($26)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE6assignIPS5_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($2,$25,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=6;break; }
 case 10: 
 var $28=(($this+32)|0);
 HEAPF64[(($28)>>3)]=$delta;
 var $29=(($this+68)|0);
 HEAP32[(($29)>>2)]=$jointype;
 if($CheckInputs){label=11;break;}else{label=45;break;}
 case 11: 
 var $31=HEAP32[(($4)>>2)];
 var $32=HEAP32[(($3)>>2)];
 var $33=$31;
 var $34=$32;
 var $35=((($33)-($34))|0);
 var $36=(((($35|0))/(12))&-1);
 var $botI_0=0;label=12;break;
 case 12: 
 var $botI_0;
 var $38=($botI_0>>>0)<($36>>>0);
 if($38){label=13;break;}else{label=14;break;}
 case 13: 
 var $40=(($32+((($botI_0)*(12))&-1)+4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($32+((($botI_0)*(12))&-1))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 var $45=((($botI_0)+(1))|0);
 if($44){var $botI_0=$45;label=12;break;}else{label=14;break;}
 case 14: 
 var $46=($botI_0|0)==($36|0);
 if($46){label=196;break;}else{label=15;break;}
 case 15: 
 var $48=(($32+((($botI_0)*(12))&-1))|0);
 var $49=HEAP32[(($48)>>2)];
 if($38){label=16;break;}else{var $botI_1_lcssa=$botI_0;var $_lcssa786=$32;label=36;break;}
 case 16: 
 var $botPt_sroa_1_8__idx694=(($49+8)|0);
 var $botPt_sroa_0_0__idx688=(($49)|0);
 var $ld$0$0=(($botPt_sroa_1_8__idx694)|0);
 var $botPt_sroa_1_8_copyload695$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($botPt_sroa_1_8__idx694+4)|0);
 var $botPt_sroa_1_8_copyload695$1=HEAP32[(($ld$1$1)>>2)];
 var $ld$2$0=(($botPt_sroa_0_0__idx688)|0);
 var $botPt_sroa_0_0_copyload689$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($botPt_sroa_0_0__idx688+4)|0);
 var $botPt_sroa_0_0_copyload689$1=HEAP32[(($ld$3$1)>>2)];
 var $botPt_sroa_1_8_copyload695711787$1=$botPt_sroa_1_8_copyload695$1;var $botPt_sroa_1_8_copyload695711787$0=$botPt_sroa_1_8_copyload695$0;var $botPt_sroa_0_0_copyload689706788$1=$botPt_sroa_0_0_copyload689$1;var $botPt_sroa_0_0_copyload689706788$0=$botPt_sroa_0_0_copyload689$0;var $botI_1789=$botI_0;var $i_0790=$botI_0;var $52=$32;var $51=$49;label=17;break;
 case 17: 
 var $51;
 var $52;
 var $i_0790;
 var $botI_1789;
 var $botPt_sroa_0_0_copyload689706788$0;
 var $botPt_sroa_0_0_copyload689706788$1;
 var $botPt_sroa_1_8_copyload695711787$0;
 var $botPt_sroa_1_8_copyload695711787$1;
 var $53=(($52+((($i_0790)*(12))&-1)+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$54;
 var $56=$51;
 var $57=((($55)-($56))|0);
 var $58=$57>>4;
 var $59=($58>>>0)<3;
 if($59){var $botI_5=$botI_1789;var $botPt_sroa_0_0_copyload689705$1=$botPt_sroa_0_0_copyload689706788$1;var $botPt_sroa_0_0_copyload689705$0=$botPt_sroa_0_0_copyload689706788$0;var $botPt_sroa_1_8_copyload695710$1=$botPt_sroa_1_8_copyload695711787$1;var $botPt_sroa_1_8_copyload695710$0=$botPt_sroa_1_8_copyload695711787$0;var $121=$52;label=34;break;}else{label=18;break;}
 case 18: 
 var $61=(($51+8)|0);
 var $ld$4$0=(($61)|0);
 var $62$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$5$1)>>2)];
 var $63=(($62$1|0) > ($botPt_sroa_1_8_copyload695711787$1|0)) | (((($62$1|0) == ($botPt_sroa_1_8_copyload695711787$1|0) & ($62$0>>>0) >  ($botPt_sroa_1_8_copyload695711787$0>>>0))));
 if($63){label=19;break;}else{label=20;break;}
 case 19: 
 var $botPt_sroa_0_0__idx685_phi_trans_insert=(($51)|0);
 var $ld$6$0=(($botPt_sroa_0_0__idx685_phi_trans_insert)|0);
 var $botPt_sroa_0_0_copyload686_pre$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($botPt_sroa_0_0__idx685_phi_trans_insert+4)|0);
 var $botPt_sroa_0_0_copyload686_pre$1=HEAP32[(($ld$7$1)>>2)];
 var $botPt_sroa_0_0_copyload686$1=$botPt_sroa_0_0_copyload686_pre$1;var $botPt_sroa_0_0_copyload686$0=$botPt_sroa_0_0_copyload686_pre$0;label=22;break;
 case 20: 
 var $65=(($62$0|0) == ($botPt_sroa_1_8_copyload695711787$0|0)) & (($62$1|0) == ($botPt_sroa_1_8_copyload695711787$1|0));
 if($65){label=21;break;}else{var $_0_i=$botI_1789;var $botPt_sroa_0_0_copyload689704$1=$botPt_sroa_0_0_copyload689706788$1;var $botPt_sroa_0_0_copyload689704$0=$botPt_sroa_0_0_copyload689706788$0;var $botPt_sroa_1_8_copyload695709$1=$botPt_sroa_1_8_copyload695711787$1;var $botPt_sroa_1_8_copyload695709$0=$botPt_sroa_1_8_copyload695711787$0;label=23;break;}
 case 21: 
 var $67=(($51)|0);
 var $ld$8$0=(($67)|0);
 var $68$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($67+4)|0);
 var $68$1=HEAP32[(($ld$9$1)>>2)];
 var $69=(($68$1|0) < ($botPt_sroa_0_0_copyload689706788$1|0)) | (((($68$1|0) == ($botPt_sroa_0_0_copyload689706788$1|0) & ($68$0>>>0) <  ($botPt_sroa_0_0_copyload689706788$0>>>0))));
 if($69){var $botPt_sroa_0_0_copyload686$1=$68$1;var $botPt_sroa_0_0_copyload686$0=$68$0;label=22;break;}else{var $_0_i=$botI_1789;var $botPt_sroa_0_0_copyload689704$1=$botPt_sroa_0_0_copyload689706788$1;var $botPt_sroa_0_0_copyload689704$0=$botPt_sroa_0_0_copyload689706788$0;var $botPt_sroa_1_8_copyload695709$1=$botPt_sroa_1_8_copyload695711787$1;var $botPt_sroa_1_8_copyload695709$0=$botPt_sroa_1_8_copyload695711787$0;label=23;break;}
 case 22: 
 var $botPt_sroa_0_0_copyload686$0;
 var $botPt_sroa_0_0_copyload686$1;
 var $_0_i=$i_0790;var $botPt_sroa_0_0_copyload689704$1=$botPt_sroa_0_0_copyload686$1;var $botPt_sroa_0_0_copyload689704$0=$botPt_sroa_0_0_copyload686$0;var $botPt_sroa_1_8_copyload695709$1=$62$1;var $botPt_sroa_1_8_copyload695709$0=$62$0;label=23;break;
 case 23: 
 var $botPt_sroa_1_8_copyload695709$0;
 var $botPt_sroa_1_8_copyload695709$1;
 var $botPt_sroa_0_0_copyload689704$0;
 var $botPt_sroa_0_0_copyload689704$1;
 var $_0_i;
 var $71=(($51+16)|0);
 var $72=($71|0)==($54|0);
 if($72){var $botI_5=$_0_i;var $botPt_sroa_0_0_copyload689705$1=$botPt_sroa_0_0_copyload689704$1;var $botPt_sroa_0_0_copyload689705$0=$botPt_sroa_0_0_copyload689704$0;var $botPt_sroa_1_8_copyload695710$1=$botPt_sroa_1_8_copyload695709$1;var $botPt_sroa_1_8_copyload695710$0=$botPt_sroa_1_8_copyload695709$0;var $121=$52;label=34;break;}else{var $botPt_sroa_1_8_copyload695708_ph779$1=$botPt_sroa_1_8_copyload695709$1;var $botPt_sroa_1_8_copyload695708_ph779$0=$botPt_sroa_1_8_copyload695709$0;var $botPt_sroa_0_0_copyload689703_ph780$1=$botPt_sroa_0_0_copyload689704$1;var $botPt_sroa_0_0_copyload689703_ph780$0=$botPt_sroa_0_0_copyload689704$0;var $it_sroa_0_0_ph781=$71;var $botI_3_ph782=$_0_i;var $73=$52;label=24;break;}
 case 24: 
 var $73;
 var $botI_3_ph782;
 var $it_sroa_0_0_ph781;
 var $botPt_sroa_0_0_copyload689703_ph780$0;
 var $botPt_sroa_0_0_copyload689703_ph780$1;
 var $botPt_sroa_1_8_copyload695708_ph779$0;
 var $botPt_sroa_1_8_copyload695708_ph779$1;
 var $it_sroa_0_0771=$it_sroa_0_0_ph781;var $79=$73;label=26;break;
 case 25: 
 var $74=HEAP32[(($3)>>2)];
 var $75=(($74+((($i_0790)*(12))&-1)+4)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($97|0)==($76|0);
 if($77){var $botI_5=$botI_3_ph782;var $botPt_sroa_0_0_copyload689705$1=$botPt_sroa_0_0_copyload689703_ph780$1;var $botPt_sroa_0_0_copyload689705$0=$botPt_sroa_0_0_copyload689703_ph780$0;var $botPt_sroa_1_8_copyload695710$1=$botPt_sroa_1_8_copyload695708_ph779$1;var $botPt_sroa_1_8_copyload695710$0=$botPt_sroa_1_8_copyload695708_ph779$0;var $121=$74;label=34;break;}else{var $it_sroa_0_0771=$97;var $79=$74;label=26;break;}
 case 26: 
 var $79;
 var $it_sroa_0_0771;
 var $80=(($it_sroa_0_0771)|0);
 var $ld$10$0=(($80)|0);
 var $81$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($80+4)|0);
 var $81$1=HEAP32[(($ld$11$1)>>2)];
 var $82=((($it_sroa_0_0771)-(16))|0);
 var $ld$12$0=(($82)|0);
 var $83$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($82+4)|0);
 var $83$1=HEAP32[(($ld$13$1)>>2)];
 var $84=(($81$0|0) == ($83$0|0)) & (($81$1|0) == ($83$1|0));
 var $85=(($it_sroa_0_0771+8)|0);
 var $ld$14$0=(($85)|0);
 var $86$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($85+4)|0);
 var $86$1=HEAP32[(($ld$15$1)>>2)];
 if($84){label=27;break;}else{label=30;break;}
 case 27: 
 var $87=((($it_sroa_0_0771)-(16)+8)|0);
 var $ld$16$0=(($87)|0);
 var $88$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($87+4)|0);
 var $88$1=HEAP32[(($ld$17$1)>>2)];
 var $89=(($86$0|0) == ($88$0|0)) & (($86$1|0) == ($88$1|0));
 if($89){label=28;break;}else{label=30;break;}
 case 28: 
 var $91=(($79+((($i_0790)*(12))&-1))|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$it_sroa_0_0771;
 var $94=$92;
 var $95=((($93)-($94))|0);
 var $96=$95>>4;
 var $97=(($92+($96<<4))|0);
 var $_sum=((($96)+(1))|0);
 var $98=(($92+($_sum<<4))|0);
 var $99=(($79+((($i_0790)*(12))&-1)+4)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$100;
 var $102=$98;
 var $103=((($101)-($102))|0);
 var $104=$103>>4;
 var $105=$97;
 var $106=$98;
 _memmove($105,$106,$103,8,0);
 var $_sum519=((($104)+($96))|0);
 var $107=(($92+($_sum519<<4))|0);
 var $108=HEAP32[(($99)>>2)];
 var $109=($107|0)==($108|0);
 if($109){label=25;break;}else{label=29;break;}
 case 29: 
 var $scevgep810=((($108)-(16))|0);
 var $scevgep810811=$scevgep810;
 var $scevgep812813=$107;
 var $110=(((-$scevgep812813))|0);
 var $uglygep814=(($scevgep810811+$110)|0);
 var $uglygep814815=$uglygep814;
 var $111=$uglygep814815>>>4;
 var $scevgep810_sum=$111^-1;
 var $scevgep816=(($108+($scevgep810_sum<<4))|0);
 HEAP32[(($99)>>2)]=$scevgep816;
 label=25;break;
 case 30: 
 var $112=(($86$1|0) > ($botPt_sroa_1_8_copyload695708_ph779$1|0)) | (((($86$1|0) == ($botPt_sroa_1_8_copyload695708_ph779$1|0) & ($86$0>>>0) >  ($botPt_sroa_1_8_copyload695708_ph779$0>>>0))));
 if($112){label=32;break;}else{label=31;break;}
 case 31: 
 var $114=(($86$0|0) == ($botPt_sroa_1_8_copyload695708_ph779$0|0)) & (($86$1|0) == ($botPt_sroa_1_8_copyload695708_ph779$1|0));
 var $115=(($81$1|0) < ($botPt_sroa_0_0_copyload689703_ph780$1|0)) | (((($81$1|0) == ($botPt_sroa_0_0_copyload689703_ph780$1|0) & ($81$0>>>0) <  ($botPt_sroa_0_0_copyload689703_ph780$0>>>0))));
 var $or_cond848=$114&$115;
 if($or_cond848){label=32;break;}else{var $_0_i521=$botI_3_ph782;var $botPt_sroa_0_0_copyload689702$1=$botPt_sroa_0_0_copyload689703_ph780$1;var $botPt_sroa_0_0_copyload689702$0=$botPt_sroa_0_0_copyload689703_ph780$0;var $botPt_sroa_1_8_copyload695707$1=$botPt_sroa_1_8_copyload695708_ph779$1;var $botPt_sroa_1_8_copyload695707$0=$botPt_sroa_1_8_copyload695708_ph779$0;label=33;break;}
 case 32: 
 var $_0_i521=$i_0790;var $botPt_sroa_0_0_copyload689702$1=$81$1;var $botPt_sroa_0_0_copyload689702$0=$81$0;var $botPt_sroa_1_8_copyload695707$1=$86$1;var $botPt_sroa_1_8_copyload695707$0=$86$0;label=33;break;
 case 33: 
 var $botPt_sroa_1_8_copyload695707$0;
 var $botPt_sroa_1_8_copyload695707$1;
 var $botPt_sroa_0_0_copyload689702$0;
 var $botPt_sroa_0_0_copyload689702$1;
 var $_0_i521;
 var $117=(($it_sroa_0_0771+16)|0);
 var $118=(($79+((($i_0790)*(12))&-1)+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($117|0)==($119|0);
 if($120){var $botI_5=$_0_i521;var $botPt_sroa_0_0_copyload689705$1=$botPt_sroa_0_0_copyload689702$1;var $botPt_sroa_0_0_copyload689705$0=$botPt_sroa_0_0_copyload689702$0;var $botPt_sroa_1_8_copyload695710$1=$botPt_sroa_1_8_copyload695707$1;var $botPt_sroa_1_8_copyload695710$0=$botPt_sroa_1_8_copyload695707$0;var $121=$79;label=34;break;}else{var $botPt_sroa_1_8_copyload695708_ph779$1=$botPt_sroa_1_8_copyload695707$1;var $botPt_sroa_1_8_copyload695708_ph779$0=$botPt_sroa_1_8_copyload695707$0;var $botPt_sroa_0_0_copyload689703_ph780$1=$botPt_sroa_0_0_copyload689702$1;var $botPt_sroa_0_0_copyload689703_ph780$0=$botPt_sroa_0_0_copyload689702$0;var $it_sroa_0_0_ph781=$117;var $botI_3_ph782=$_0_i521;var $73=$79;label=24;break;}
 case 34: 
 var $121;
 var $botPt_sroa_1_8_copyload695710$0;
 var $botPt_sroa_1_8_copyload695710$1;
 var $botPt_sroa_0_0_copyload689705$0;
 var $botPt_sroa_0_0_copyload689705$1;
 var $botI_5;
 var $122=((($i_0790)+(1))|0);
 var $123=($122>>>0)<($36>>>0);
 if($123){label=35;break;}else{var $botI_1_lcssa=$botI_5;var $_lcssa786=$121;label=36;break;}
 case 35: 
 var $_phi_trans_insert=(($121+((($122)*(12))&-1))|0);
 var $_pre842=HEAP32[(($_phi_trans_insert)>>2)];
 var $botPt_sroa_1_8_copyload695711787$1=$botPt_sroa_1_8_copyload695710$1;var $botPt_sroa_1_8_copyload695711787$0=$botPt_sroa_1_8_copyload695710$0;var $botPt_sroa_0_0_copyload689706788$1=$botPt_sroa_0_0_copyload689705$1;var $botPt_sroa_0_0_copyload689706788$0=$botPt_sroa_0_0_copyload689705$0;var $botI_1789=$botI_5;var $i_0790=$122;var $52=$121;var $51=$_pre842;label=17;break;
 case 36: 
 var $_lcssa786;
 var $botI_1_lcssa;
 var $124=(($_lcssa786+((($botI_1_lcssa)*(12))&-1))|0);
 var $125=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11OrientationERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=6;break; }
 case 37: 
 if($125){label=45;break;}else{label=38;break;}
 case 38: 
 var $128=HEAP32[(($4)>>2)];
 var $129=HEAP32[(($3)>>2)];
 var $130=($128|0)==($129|0);
 if($130){label=45;break;}else{label=39;break;}
 case 39: 
 var $__t_i_i_i_i_0_cast7_i=$__t_i_i_i_i_i;
 var $i_08_i=0;var $133=$129;var $132=$128;label=40;break;
 case 40: 
 var $132;
 var $133;
 var $i_08_i;
 var $$etemp$18$0=16;
 var $$etemp$18$1=0;
 var $134=(($133+((($i_08_i)*(12))&-1))|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($133+((($i_08_i)*(12))&-1)+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){var $148=$132;var $147=$133;label=44;break;}else{label=41;break;}
 case 41: 
 var $139=((($137)-(16))|0);
 var $140=($135>>>0)<($139>>>0);
 if($140){var $_sroa_044_053_i_i=$135;var $141=$139;label=42;break;}else{var $148=$132;var $147=$133;label=44;break;}
 case 42: 
 var $141;
 var $_sroa_044_053_i_i;
 var $142=$_sroa_044_053_i_i;
 assert(16 % 1 === 0);HEAP32[(($__t_i_i_i_i_0_cast7_i)>>2)]=HEAP32[(($142)>>2)];HEAP32[((($__t_i_i_i_i_0_cast7_i)+(4))>>2)]=HEAP32[((($142)+(4))>>2)];HEAP32[((($__t_i_i_i_i_0_cast7_i)+(8))>>2)]=HEAP32[((($142)+(8))>>2)];HEAP32[((($__t_i_i_i_i_0_cast7_i)+(12))>>2)]=HEAP32[((($142)+(12))>>2)];
 var $143=$141;
 assert(16 % 1 === 0);HEAP32[(($142)>>2)]=HEAP32[(($143)>>2)];HEAP32[((($142)+(4))>>2)]=HEAP32[((($143)+(4))>>2)];HEAP32[((($142)+(8))>>2)]=HEAP32[((($143)+(8))>>2)];HEAP32[((($142)+(12))>>2)]=HEAP32[((($143)+(12))>>2)];
 assert(16 % 1 === 0);HEAP32[(($143)>>2)]=HEAP32[(($__t_i_i_i_i_0_cast7_i)>>2)];HEAP32[((($143)+(4))>>2)]=HEAP32[((($__t_i_i_i_i_0_cast7_i)+(4))>>2)];HEAP32[((($143)+(8))>>2)]=HEAP32[((($__t_i_i_i_i_0_cast7_i)+(8))>>2)];HEAP32[((($143)+(12))>>2)]=HEAP32[((($__t_i_i_i_i_0_cast7_i)+(12))>>2)];
 var $144=(($_sroa_044_053_i_i+16)|0);
 var $145=((($141)-(16))|0);
 var $146=($144>>>0)<($145>>>0);
 if($146){var $_sroa_044_053_i_i=$144;var $141=$145;label=42;break;}else{label=43;break;}
 case 43: 
 var $_pre_i=HEAP32[(($4)>>2)];
 var $_pre9_i=HEAP32[(($3)>>2)];
 var $148=$_pre_i;var $147=$_pre9_i;label=44;break;
 case 44: 
 var $147;
 var $148;
 var $$etemp$19$0=16;
 var $$etemp$19$1=0;
 var $149=((($i_08_i)+(1))|0);
 var $150=$148;
 var $151=$147;
 var $152=((($150)-($151))|0);
 var $153=(((($152|0))/(12))&-1);
 var $154=($149>>>0)<($153>>>0);
 if($154){var $i_08_i=$149;var $133=$147;var $132=$148;label=40;break;}else{label=45;break;}
 case 45: 
 var $155=$MiterLimit>1;
 var $_0480=$155?$MiterLimit:1;
 var $156=($_0480)*($_0480);
 var $157=(2)/($156);
 var $158=(($this+40)|0);
 HEAPF64[(($158)>>3)]=$157;
 var $159=($delta)*($delta);
 var $160=(($out_polys)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($out_polys+4)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){var $180=$161;label=52;break;}else{var $165=$163;label=46;break;}
 case 46: 
 var $165;
 var $166=((($165)-(12))|0);
 HEAP32[(($162)>>2)]=$166;
 var $167=(($166)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$168;
 var $170=($168|0)==0;
 if($170){var $171=$166;label=47;break;}else{label=48;break;}
 case 47: 
 var $171;
 var $172=($161|0)==($171|0);
 if($172){label=51;break;}else{var $165=$171;label=46;break;}
 case 48: 
 var $173=((($165)-(12)+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($168|0)==($174|0);
 if($175){label=50;break;}else{label=49;break;}
 case 49: 
 var $scevgep_i_i_i525=((($174)-(16))|0);
 var $scevgep28_i_i_i526=$scevgep_i_i_i525;
 var $176=(((-$169))|0);
 var $uglygep_i_i_i527=(($scevgep28_i_i_i526+$176)|0);
 var $uglygep29_i_i_i528=$uglygep_i_i_i527;
 var $177=$uglygep29_i_i_i528>>>4;
 var $178=$177^-1;
 var $scevgep30_i_i_i529=(($174+($178<<4))|0);
 HEAP32[(($173)>>2)]=$scevgep30_i_i_i529;
 label=50;break;
 case 50: 
 var $179=$168;
 __ZdlPv($179);
 var $_pre831=HEAP32[(($162)>>2)];
 var $171=$_pre831;label=47;break;
 case 51: 
 var $_pre=HEAP32[(($160)>>2)];
 var $180=$_pre;label=52;break;
 case 52: 
 var $180;
 var $181=HEAP32[(($4)>>2)];
 var $182=HEAP32[(($3)>>2)];
 var $183=$181;
 var $184=$182;
 var $185=((($183)-($184))|0);
 var $186=(((($185|0))/(12))&-1);
 var $187=$161;
 var $188=$180;
 var $189=((($187)-($188))|0);
 var $190=(((($189|0))/(12))&-1);
 var $191=($190>>>0)<($186>>>0);
 if($191){label=53;break;}else{label=54;break;}
 case 53: 
 var $193=((($186)-($190))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEj($out_polys,$193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=6;break; }
 case 54: 
 var $195=($190>>>0)>($186>>>0);
 if($195){label=55;break;}else{label=61;break;}
 case 55: 
 var $197=(($180+((($186)*(12))&-1))|0);
 var $198=($197|0)==($161|0);
 if($198){label=61;break;}else{var $199=$161;label=56;break;}
 case 56: 
 var $199;
 var $200=((($199)-(12))|0);
 HEAP32[(($162)>>2)]=$200;
 var $201=(($200)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$202;
 var $204=($202|0)==0;
 if($204){var $205=$200;label=57;break;}else{label=58;break;}
 case 57: 
 var $205;
 var $206=($197|0)==($205|0);
 if($206){label=61;break;}else{var $199=$205;label=56;break;}
 case 58: 
 var $207=((($199)-(12)+4)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($202|0)==($208|0);
 if($209){label=60;break;}else{label=59;break;}
 case 59: 
 var $scevgep_i_i_i_i=((($208)-(16))|0);
 var $scevgep28_i_i_i_i=$scevgep_i_i_i_i;
 var $210=(((-$203))|0);
 var $uglygep_i_i_i_i=(($scevgep28_i_i_i_i+$210)|0);
 var $uglygep29_i_i_i_i=$uglygep_i_i_i_i;
 var $211=$uglygep29_i_i_i_i>>>4;
 var $212=$211^-1;
 var $scevgep30_i_i_i_i=(($208+($212<<4))|0);
 HEAP32[(($207)>>2)]=$scevgep30_i_i_i_i;
 label=60;break;
 case 60: 
 var $213=$202;
 __ZdlPv($213);
 var $_pre_i532=HEAP32[(($162)>>2)];
 var $205=$_pre_i532;label=57;break;
 case 61: 
 var $214=(($this+56)|0);
 HEAP32[(($214)>>2)]=0;
 var $215=HEAP32[(($4)>>2)];
 var $216=HEAP32[(($3)>>2)];
 var $217=($215|0)==($216|0);
 if($217){label=118;break;}else{label=62;break;}
 case 62: 
 var $218=(($this+12)|0);
 var $219=$delta<0;
 var $220=($159)*((3.141592653589793));
 var $221=$delta>0;
 var $222=(($arc)|0);
 var $223=(($arc+4)|0);
 var $224=(($arc+8)|0);
 var $225=(($1)|0);
 var $226=(($1+4)|0);
 var $227=(($this+60)|0);
 var $228=(($this+64)|0);
 var $229=(($this+48)|0);
 var $232=0;var $231=$216;label=63;break;
 case 63: 
 var $231;
 var $232;
 var $233=HEAP32[(($160)>>2)];
 var $234=(($233+((($232)*(12))&-1))|0);
 HEAP32[(($218)>>2)]=$234;
 var $235=(($231+((($232)*(12))&-1)+4)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(($231+((($232)*(12))&-1))|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=$236;
 var $240=$238;
 var $241=((($239)-($240))|0);
 var $242=$241>>4;
 var $243=($242>>>0)>1;
 if($243){label=64;break;}else{var $len_0=$242;label=66;break;}
 case 64: 
 var $245=(($238)|0);
 var $ld$20$0=(($245)|0);
 var $246$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($245+4)|0);
 var $246$1=HEAP32[(($ld$21$1)>>2)];
 var $247=((($242)-(1))|0);
 var $248=(($238+($247<<4))|0);
 var $ld$22$0=(($248)|0);
 var $249$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($248+4)|0);
 var $249$1=HEAP32[(($ld$23$1)>>2)];
 var $250=(($246$0|0) == ($249$0|0)) & (($246$1|0) == ($249$1|0));
 if($250){label=65;break;}else{var $len_0=$242;label=66;break;}
 case 65: 
 var $252=(($238+8)|0);
 var $ld$24$0=(($252)|0);
 var $253$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($252+4)|0);
 var $253$1=HEAP32[(($ld$25$1)>>2)];
 var $254=(($238+($247<<4)+8)|0);
 var $ld$26$0=(($254)|0);
 var $255$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($254+4)|0);
 var $255$1=HEAP32[(($ld$27$1)>>2)];
 var $256=(($253$0|0) == ($255$0|0)) & (($253$1|0) == ($255$1|0));
 var $_=$256?$247:$242;
 var $len_0=$_;label=66;break;
 case 66: 
 var $len_0;
 var $258=(($231+((($232)*(12))&-1))|0);
 var $259=(function() { try { __THREW__ = 0; return __ZN10ClipperLib4AreaERKNSt3__16vectorINS_8IntPointENS0_9allocatorIS2_EEEE($258) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=5;break; }
 case 67: 
 if($219){label=68;break;}else{label=70;break;}
 case 68: 
 var $262=$259>0;
 if($262){label=69;break;}else{label=72;break;}
 case 69: 
 var $notlhs855=$259>=$220;
 var $notrhs856=($len_0|0)!=0;
 var $or_cond717_not=$notrhs856&$notlhs855;
 var $264=($len_0>>>0)>2;
 var $or_cond520=$264|$221;
 var $or_cond850=$or_cond717_not&$or_cond520;
 if($or_cond850){label=73;break;}else{label=117;break;}
 case 70: 
 var $266=$259<0;
 if($266){label=71;break;}else{label=72;break;}
 case 71: 
 var $268=((-.0))-($259);
 var $notlhs=$220<=$268;
 var $notrhs=($len_0|0)!=0;
 var $or_cond716_not=$notrhs&$notlhs;
 var $_old849=($len_0>>>0)>2;
 var $or_cond520_old=$_old849|$221;
 var $or_cond852=$or_cond716_not&$or_cond520_old;
 if($or_cond852){label=73;break;}else{label=117;break;}
 case 72: 
 var $_old_old=($len_0|0)!=0;
 var $_old851=($len_0>>>0)>2;
 var $or_cond520_old_old=$_old851|$221;
 var $or_cond854=$_old_old&$or_cond520_old_old;
 if($or_cond854){label=73;break;}else{label=117;break;}
 case 73: 
 var $271=($len_0|0)==1;
 if($271){label=74;break;}else{label=95;break;}
 case 74: 
 HEAP32[(($222)>>2)]=0;
 HEAP32[(($223)>>2)]=0;
 HEAP32[(($224)>>2)]=0;
 var $273=HEAP32[(($214)>>2)];
 var $274=HEAP32[(($3)>>2)];
 var $275=(($274+((($273)*(12))&-1))|0);
 var $276=HEAP32[(($275)>>2)];
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib8BuildArcERKNS_8IntPointEddd($1,$276,0,6.283185307179586,$delta) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=86;break; }
 case 75: 
 var $278=HEAP32[(($225)>>2)];
 var $279=HEAP32[(($226)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($arc,$278,$279) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=87;break; }
 case 76: 
 var $280=HEAP32[(($225)>>2)];
 var $281=$280;
 var $282=($280|0)==0;
 if($282){label=80;break;}else{label=77;break;}
 case 77: 
 var $283=HEAP32[(($226)>>2)];
 var $284=($280|0)==($283|0);
 if($284){label=79;break;}else{label=78;break;}
 case 78: 
 var $scevgep_i_i_i534=((($283)-(16))|0);
 var $scevgep28_i_i_i535=$scevgep_i_i_i534;
 var $285=(((-$281))|0);
 var $uglygep_i_i_i536=(($scevgep28_i_i_i535+$285)|0);
 var $uglygep29_i_i_i537=$uglygep_i_i_i536;
 var $286=$uglygep29_i_i_i537>>>4;
 var $287=$286^-1;
 var $scevgep30_i_i_i538=(($283+($287<<4))|0);
 HEAP32[(($226)>>2)]=$scevgep30_i_i_i538;
 label=79;break;
 case 79: 
 var $288=$280;
 __ZdlPv($288);
 label=80;break;
 case 80: 
 var $289=HEAP32[(($214)>>2)];
 var $290=HEAP32[(($160)>>2)];
 var $291=(($290+((($289)*(12))&-1))|0);
 var $292=($291|0)==($arc|0);
 if($292){label=82;break;}else{label=81;break;}
 case 81: 
 var $294=HEAP32[(($222)>>2)];
 var $295=HEAP32[(($223)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($291,$294,$295) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=86;break; }
 case 82: 
 var $296=HEAP32[(($222)>>2)];
 var $297=$296;
 var $298=($296|0)==0;
 if($298){label=117;break;}else{label=83;break;}
 case 83: 
 var $299=HEAP32[(($223)>>2)];
 var $300=($296|0)==($299|0);
 if($300){label=85;break;}else{label=84;break;}
 case 84: 
 var $scevgep_i_i_i543=((($299)-(16))|0);
 var $scevgep28_i_i_i544=$scevgep_i_i_i543;
 var $301=(((-$297))|0);
 var $uglygep_i_i_i545=(($scevgep28_i_i_i544+$301)|0);
 var $uglygep29_i_i_i546=$uglygep_i_i_i545;
 var $302=$uglygep29_i_i_i546>>>4;
 var $303=$302^-1;
 var $scevgep30_i_i_i547=(($299+($303<<4))|0);
 HEAP32[(($223)>>2)]=$scevgep30_i_i_i547;
 label=85;break;
 case 85: 
 var $304=$296;
 __ZdlPv($304);
 label=117;break;
 case 86: 
 var $306$0 = ___cxa_find_matching_catch(-1, -1); var $306$1 = tempRet0;
 var $307=$306$0;
 var $308=$306$1;
 var $_0481=$307;var $_0482=$308;label=91;break;
 case 87: 
 var $310$0 = ___cxa_find_matching_catch(-1, -1); var $310$1 = tempRet0;
 var $311=$310$0;
 var $312=$310$1;
 var $313=HEAP32[(($225)>>2)];
 var $314=$313;
 var $315=($313|0)==0;
 if($315){var $_0481=$311;var $_0482=$312;label=91;break;}else{label=88;break;}
 case 88: 
 var $316=HEAP32[(($226)>>2)];
 var $317=($313|0)==($316|0);
 if($317){label=90;break;}else{label=89;break;}
 case 89: 
 var $scevgep_i_i_i552=((($316)-(16))|0);
 var $scevgep28_i_i_i553=$scevgep_i_i_i552;
 var $318=(((-$314))|0);
 var $uglygep_i_i_i554=(($scevgep28_i_i_i553+$318)|0);
 var $uglygep29_i_i_i555=$uglygep_i_i_i554;
 var $319=$uglygep29_i_i_i555>>>4;
 var $320=$319^-1;
 var $scevgep30_i_i_i556=(($316+($320<<4))|0);
 HEAP32[(($226)>>2)]=$scevgep30_i_i_i556;
 label=90;break;
 case 90: 
 var $321=$313;
 __ZdlPv($321);
 var $_0481=$311;var $_0482=$312;label=91;break;
 case 91: 
 var $_0482;
 var $_0481;
 var $322=HEAP32[(($222)>>2)];
 var $323=$322;
 var $324=($322|0)==0;
 if($324){var $_2=$_0481;var $_2484=$_0482;label=201;break;}else{label=92;break;}
 case 92: 
 var $325=HEAP32[(($223)>>2)];
 var $326=($322|0)==($325|0);
 if($326){label=94;break;}else{label=93;break;}
 case 93: 
 var $scevgep_i_i_i561=((($325)-(16))|0);
 var $scevgep28_i_i_i562=$scevgep_i_i_i561;
 var $327=(((-$323))|0);
 var $uglygep_i_i_i563=(($scevgep28_i_i_i562+$327)|0);
 var $uglygep29_i_i_i564=$uglygep_i_i_i563;
 var $328=$uglygep29_i_i_i564>>>4;
 var $329=$328^-1;
 var $scevgep30_i_i_i565=(($325+($329<<4))|0);
 HEAP32[(($223)>>2)]=$scevgep30_i_i_i565;
 label=94;break;
 case 94: 
 var $330=$322;
 __ZdlPv($330);
 var $_2=$_0481;var $_2484=$_0482;label=201;break;
 case 95: 
 var $332=HEAP32[(($7)>>2)];
 var $333=$332;
 var $334=HEAP32[(($8)>>2)];
 var $335=($332|0)==($334|0);
 if($335){var $338=$332;label=97;break;}else{label=96;break;}
 case 96: 
 var $scevgep803=((($334)-(16))|0);
 var $scevgep803804=$scevgep803;
 var $336=(((-$333))|0);
 var $uglygep=(($scevgep803804+$336)|0);
 var $uglygep805=$uglygep;
 var $337=$uglygep805>>>4;
 var $scevgep803_sum=$337^-1;
 var $scevgep806=(($334+($scevgep803_sum<<4))|0);
 HEAP32[(($8)>>2)]=$scevgep806;
 var $338=$scevgep806;label=97;break;
 case 97: 
 var $338;
 var $339=$338;
 var $340=((($339)-($333))|0);
 var $341=$340>>4;
 var $342=($341>>>0)<($len_0>>>0);
 if($342){label=98;break;}else{label=100;break;}
 case 98: 
 var $344=((($len_0)-($341))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib11DoublePointENS_9allocatorIS2_EEE8__appendEj($6,$344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=5;break; }
 case 99: 
 var $_pre846=HEAP32[(($7)>>2)];
 var $353=$_pre846;label=103;break;
 case 100: 
 var $346=($341>>>0)>($len_0>>>0);
 if($346){label=101;break;}else{var $353=$332;label=103;break;}
 case 101: 
 var $348=(($332+($len_0<<4))|0);
 var $349=($348|0)==($338|0);
 if($349){var $353=$332;label=103;break;}else{label=102;break;}
 case 102: 
 var $scevgep_i=((($338)-(16))|0);
 var $scevgep20_i=$scevgep_i;
 var $scevgep2122_i=$348;
 var $350=(((-$scevgep2122_i))|0);
 var $uglygep_i=(($scevgep20_i+$350)|0);
 var $uglygep23_i=$uglygep_i;
 var $351=$uglygep23_i>>>4;
 var $352=$351^-1;
 var $scevgep24_i=(($338+($352<<4))|0);
 HEAP32[(($8)>>2)]=$scevgep24_i;
 var $353=$332;label=103;break;
 case 103: 
 var $353;
 var $354=((($len_0)-(1))|0);
 var $355=HEAP32[(($214)>>2)];
 var $356=HEAP32[(($3)>>2)];
 var $357=(($356+((($355)*(12))&-1))|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(($358)|0);
 var $ld$28$0=(($359)|0);
 var $360$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($359+4)|0);
 var $360$1=HEAP32[(($ld$29$1)>>2)];
 var $361=(($358+($354<<4))|0);
 var $ld$30$0=(($361)|0);
 var $362$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($361+4)|0);
 var $362$1=HEAP32[(($ld$31$1)>>2)];
 var $363=(($360$0|0) == ($362$0|0)) & (($360$1|0) == ($362$1|0));
 var $364=(($358+8)|0);
 var $ld$32$0=(($364)|0);
 var $365$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($364+4)|0);
 var $365$1=HEAP32[(($ld$33$1)>>2)];
 var $366=(($358+($354<<4)+8)|0);
 var $ld$34$0=(($366)|0);
 var $367$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($366+4)|0);
 var $367$1=HEAP32[(($ld$35$1)>>2)];
 var $368=(($365$0|0) == ($367$0|0)) & (($365$1|0) == ($367$1|0));
 var $or_cond_i=$363&$368;
 if($or_cond_i){var $_sroa_0682_0_copyload700=0;var $_sroa_1683_8_copyload701=0;label=105;break;}else{label=104;break;}
 case 104: 
 var $369$0=_i64Subtract($360$0,$360$1,$362$0,$362$1);var $369$1=tempRet0;
 var $370=(($369$0>>>0)+(($369$1|0)*4294967296));
 var $371$0=_i64Subtract($365$0,$365$1,$367$0,$367$1);var $371$1=tempRet0;
 var $372=(($371$0>>>0)+(($371$1|0)*4294967296));
 var $373=($370)*($370);
 var $374=($372)*($372);
 var $375=($373)+($374);
 var $376=Math_sqrt($375);
 var $377=(1)/($376);
 var $378=($370)*($377);
 var $379=($372)*($377);
 var $380=((-.0))-($378);
 var $_sroa_0682_0_copyload700=$379;var $_sroa_1683_8_copyload701=$380;label=105;break;
 case 105: 
 var $_sroa_1683_8_copyload701;
 var $_sroa_0682_0_copyload700;
 var $_sroa_0682_0__idx=(($353+($354<<4))|0);
 HEAPF64[(($_sroa_0682_0__idx)>>3)]=$_sroa_0682_0_copyload700;
 var $_sroa_1683_8__idx684=(($353+($354<<4)+8)|0);
 HEAPF64[(($_sroa_1683_8__idx684)>>3)]=$_sroa_1683_8_copyload701;
 HEAP32[(($227)>>2)]=0;
 var $381=($354|0)==0;
 if($381){label=109;break;}else{var $storemerge517737=0;label=106;break;}
 case 106: 
 var $storemerge517737;
 var $382=HEAP32[(($7)>>2)];
 var $383=HEAP32[(($214)>>2)];
 var $384=HEAP32[(($3)>>2)];
 var $385=(($384+((($383)*(12))&-1))|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=((($storemerge517737)+(1))|0);
 var $388=(($386+($387<<4))|0);
 var $ld$36$0=(($388)|0);
 var $389$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($388+4)|0);
 var $389$1=HEAP32[(($ld$37$1)>>2)];
 var $390=(($386+($storemerge517737<<4))|0);
 var $ld$38$0=(($390)|0);
 var $391$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($390+4)|0);
 var $391$1=HEAP32[(($ld$39$1)>>2)];
 var $392=(($389$0|0) == ($391$0|0)) & (($389$1|0) == ($391$1|0));
 var $393=(($386+($387<<4)+8)|0);
 var $ld$40$0=(($393)|0);
 var $394$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($393+4)|0);
 var $394$1=HEAP32[(($ld$41$1)>>2)];
 var $395=(($386+($storemerge517737<<4)+8)|0);
 var $ld$42$0=(($395)|0);
 var $396$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($395+4)|0);
 var $396$1=HEAP32[(($ld$43$1)>>2)];
 var $397=(($394$0|0) == ($396$0|0)) & (($394$1|0) == ($396$1|0));
 var $or_cond_i571=$392&$397;
 if($or_cond_i571){var $_sroa_0679_0_copyload698=0;var $_sroa_1680_8_copyload699=0;label=108;break;}else{label=107;break;}
 case 107: 
 var $398$0=_i64Subtract($389$0,$389$1,$391$0,$391$1);var $398$1=tempRet0;
 var $399=(($398$0>>>0)+(($398$1|0)*4294967296));
 var $400$0=_i64Subtract($394$0,$394$1,$396$0,$396$1);var $400$1=tempRet0;
 var $401=(($400$0>>>0)+(($400$1|0)*4294967296));
 var $402=($399)*($399);
 var $403=($401)*($401);
 var $404=($402)+($403);
 var $405=Math_sqrt($404);
 var $406=(1)/($405);
 var $407=($399)*($406);
 var $408=($401)*($406);
 var $409=((-.0))-($407);
 var $_sroa_0679_0_copyload698=$408;var $_sroa_1680_8_copyload699=$409;label=108;break;
 case 108: 
 var $_sroa_1680_8_copyload699;
 var $_sroa_0679_0_copyload698;
 var $_sroa_0679_0__idx=(($382+($storemerge517737<<4))|0);
 HEAPF64[(($_sroa_0679_0__idx)>>3)]=$_sroa_0679_0_copyload698;
 var $_sroa_1680_8__idx681=(($382+($storemerge517737<<4)+8)|0);
 HEAPF64[(($_sroa_1680_8__idx681)>>3)]=$_sroa_1680_8_copyload699;
 var $410=HEAP32[(($227)>>2)];
 var $411=((($410)+(1))|0);
 HEAP32[(($227)>>2)]=$411;
 var $412=($411>>>0)<($354>>>0);
 if($412){var $storemerge517737=$411;label=106;break;}else{label=109;break;}
 case 109: 
 HEAP32[(($228)>>2)]=$354;
 HEAP32[(($227)>>2)]=0;
 var $413=($len_0|0)==0;
 if($413){label=117;break;}else{var $storemerge518744=0;var $414=$354;label=110;break;}
 case 110: 
 var $414;
 var $storemerge518744;
 if(($jointype|0)==2){ label=111;break;}else if(($jointype|0)==0){ label=114;break;}else if(($jointype|0)==1){ label=115;break;}else{label=116;break;}
 case 111: 
 var $416=HEAP32[(($7)>>2)];
 var $417=(($416+($storemerge518744<<4))|0);
 var $418=HEAPF64[(($417)>>3)];
 var $419=(($416+($414<<4))|0);
 var $420=HEAPF64[(($419)>>3)];
 var $421=($418)*($420);
 var $422=(($416+($storemerge518744<<4)+8)|0);
 var $423=HEAPF64[(($422)>>3)];
 var $424=(($416+($414<<4)+8)|0);
 var $425=HEAPF64[(($424)>>3)];
 var $426=($423)*($425);
 var $427=($421)+($426);
 var $428=($427)+(1);
 HEAPF64[(($229)>>3)]=$428;
 var $429=HEAPF64[(($158)>>3)];
 var $430=$428<$429;
 if($430){label=113;break;}else{label=112;break;}
 case 112: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib17PolyOffsetBuilder7DoMiterEv($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=4;break; }
 case 113: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib17PolyOffsetBuilder8DoSquareEd($this,$_0480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=4;break; }
 case 114: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib17PolyOffsetBuilder8DoSquareEd($this,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=4;break; }
 case 115: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib17PolyOffsetBuilder7DoRoundEv($this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=4;break; }
 case 116: 
 var $435=HEAP32[(($227)>>2)];
 HEAP32[(($228)>>2)]=$435;
 var $436=((($435)+(1))|0);
 HEAP32[(($227)>>2)]=$436;
 var $437=($436>>>0)<($len_0>>>0);
 if($437){var $storemerge518744=$436;var $414=$435;label=110;break;}else{label=117;break;}
 case 117: 
 var $438=HEAP32[(($214)>>2)];
 var $439=((($438)+(1))|0);
 HEAP32[(($214)>>2)]=$439;
 var $440=HEAP32[(($4)>>2)];
 var $441=HEAP32[(($3)>>2)];
 var $442=$440;
 var $443=$441;
 var $444=((($442)-($443))|0);
 var $445=(((($444|0))/(12))&-1);
 var $446=($439>>>0)<($445>>>0);
 if($446){var $232=$439;var $231=$441;label=63;break;}else{label=118;break;}
 case 118: 
 var $447=(($clpr+76)|0);
 var $448=(($clpr+92)|0);
 HEAP32[(($448)>>2)]=0;
 var $449=(($clpr+96)|0);
 HEAP32[(($449)>>2)]=0;
 var $450=(($clpr+100)|0);
 HEAP32[(($450)>>2)]=0;
 var $451=(($clpr+84)|0);
 HEAP32[(($451)>>2)]=0;
 var $452=(($clpr+80)|0);
 HEAP32[(($452)>>2)]=0;
 var $453=(($clpr)|0);
 HEAP32[(($453)>>2)]=9332;
 HEAP32[(($447)>>2)]=9372;
 var $454=(($clpr+4)|0);
 var $455=(($clpr+44)|0);
 var $456=(($clpr+88)|0);
 var $457=$454;
 _memset($457, 0, 36);
 var $458=$455;
 HEAP32[(($458)>>2)]=0; HEAP32[((($458)+(4))>>2)]=0; HEAP32[((($458)+(8))>>2)]=0; HEAP32[((($458)+(12))>>2)]=0; ; HEAP8[((($458)+(16))|0)]=0;
 HEAP8[($456)]=0;
 var $459=(($clpr+72)|0);
 HEAP8[($459)]=0;
 var $460=$clpr;
 var $461=$clpr;
 var $462=(($clpr+76)|0);
 var $463=HEAP32[(($162)>>2)];
 var $464=HEAP32[(($160)>>2)];
 var $465=($463|0)==($464|0);
 if($465){var $478=$463;var $477=$463;label=121;break;}else{var $i_011_i=0;var $466=$464;label=119;break;}
 case 119: 
 var $466;
 var $i_011_i;
 var $467=(($466+((($i_011_i)*(12))&-1))|0);
 var $468=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($462,$467,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { label=140;break; }
 case 120: 
 var $469=((($i_011_i)+(1))|0);
 var $470=HEAP32[(($162)>>2)];
 var $471=HEAP32[(($160)>>2)];
 var $472=$470;
 var $473=$471;
 var $474=((($472)-($473))|0);
 var $475=(((($474|0))/(12))&-1);
 var $476=($469>>>0)<($475>>>0);
 if($476){var $i_011_i=$469;var $466=$471;label=119;break;}else{var $478=$470;var $477=$471;label=121;break;}
 case 121: 
 var $477;
 var $478;
 var $479=$delta>0;
 if($479){label=122;break;}else{label=143;break;}
 case 122: 
 var $481=(($clpr+60)|0);
 var $482=HEAP8[($481)];
 var $483=$482&1;
 var $484=(($483<<24)>>24)==0;
 if($484){label=123;break;}else{var $512=$477;var $511=$478;label=134;break;}
 case 123: 
 HEAP8[($481)]=1;
 var $486=($477|0)==($478|0);
 if($486){label=129;break;}else{var $487=$478;label=124;break;}
 case 124: 
 var $487;
 var $488=((($487)-(12))|0);
 HEAP32[(($162)>>2)]=$488;
 var $489=(($488)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=$490;
 var $492=($490|0)==0;
 if($492){var $493=$488;label=125;break;}else{label=126;break;}
 case 125: 
 var $493;
 var $494=($477|0)==($493|0);
 if($494){label=129;break;}else{var $487=$493;label=124;break;}
 case 126: 
 var $495=((($487)-(12)+4)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($490|0)==($496|0);
 if($497){label=128;break;}else{label=127;break;}
 case 127: 
 var $scevgep_i_i_i_i_i=((($496)-(16))|0);
 var $scevgep28_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $498=(((-$491))|0);
 var $uglygep_i_i_i_i_i=(($scevgep28_i_i_i_i_i+$498)|0);
 var $uglygep29_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $499=$uglygep29_i_i_i_i_i>>>4;
 var $500=$499^-1;
 var $scevgep30_i_i_i_i_i=(($496+($500<<4))|0);
 HEAP32[(($495)>>2)]=$scevgep30_i_i_i_i_i;
 label=128;break;
 case 128: 
 var $501=$490;
 __ZdlPv($501);
 var $_pre_i_i=HEAP32[(($162)>>2)];
 var $493=$_pre_i_i;label=125;break;
 case 129: 
 var $502=(($clpr+68)|0);
 HEAP32[(($502)>>2)]=2;
 var $503=(($clpr+64)|0);
 HEAP32[(($503)>>2)]=2;
 var $504=(($clpr+40)|0);
 HEAP32[(($504)>>2)]=1;
 var $505=$clpr;
 var $506=HEAP32[(($505)>>2)];
 var $507=(($506+16)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$508]($clpr,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=141;break; }
 case 130: 
 if($509){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP8[($481)]=0;
 var $_pre825=HEAP32[(($160)>>2)];
 var $_pre826=HEAP32[(($162)>>2)];
 var $512=$_pre825;var $511=$_pre826;label=134;break;
 case 132: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper11BuildResultERNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEE($clpr,$out_polys) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=141;break; }
 case 133: 
 HEAP8[($481)]=0;
 label=192;break;
 case 134: 
 var $511;
 var $512;
 var $513=($512|0)==($511|0);
 if($513){label=192;break;}else{var $514=$511;label=135;break;}
 case 135: 
 var $514;
 var $515=((($514)-(12))|0);
 HEAP32[(($162)>>2)]=$515;
 var $516=(($515)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=$517;
 var $519=($517|0)==0;
 if($519){var $520=$515;label=136;break;}else{label=137;break;}
 case 136: 
 var $520;
 var $521=($512|0)==($520|0);
 if($521){label=192;break;}else{var $514=$520;label=135;break;}
 case 137: 
 var $522=((($514)-(12)+4)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=($517|0)==($523|0);
 if($524){label=139;break;}else{label=138;break;}
 case 138: 
 var $scevgep_i_i_i582=((($523)-(16))|0);
 var $scevgep28_i_i_i583=$scevgep_i_i_i582;
 var $525=(((-$518))|0);
 var $uglygep_i_i_i584=(($scevgep28_i_i_i583+$525)|0);
 var $uglygep29_i_i_i585=$uglygep_i_i_i584;
 var $526=$uglygep29_i_i_i585>>>4;
 var $527=$526^-1;
 var $scevgep30_i_i_i586=(($523+($527<<4))|0);
 HEAP32[(($522)>>2)]=$scevgep30_i_i_i586;
 label=139;break;
 case 139: 
 var $528=$517;
 __ZdlPv($528);
 var $_pre827=HEAP32[(($162)>>2)];
 var $520=$_pre827;label=136;break;
 case 140: 
 var $lpad_loopexit731$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit731$1 = tempRet0;
 var $eh_lpad_body599$1=$lpad_loopexit731$1;var $eh_lpad_body599$0=$lpad_loopexit731$0;label=142;break;
 case 141: 
 var $lpad_nonloopexit732$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit732$1 = tempRet0;
 var $eh_lpad_body599$1=$lpad_nonloopexit732$1;var $eh_lpad_body599$0=$lpad_nonloopexit732$0;label=142;break;
 case 142: 
 var $eh_lpad_body599$0;
 var $eh_lpad_body599$1;
 var $529=$eh_lpad_body599$0;
 var $530=$eh_lpad_body599$1;
 var $_1=$529;var $_1483=$530;label=197;break;
 case 143: 
 var $532=HEAP32[(($460)>>2)];
 var $533=((($532)-(12))|0);
 var $534=$533;
 var $535=HEAP32[(($534)>>2)];
 var $536=(($461+$535)|0);
 var $537=$536;
 __ZN10ClipperLib11ClipperBase9GetBoundsEv($r,$537);
 var $538=(($outer)|0);
 HEAP32[(($538)>>2)]=0;
 var $539=(($outer+4)|0);
 HEAP32[(($539)>>2)]=0;
 var $540=(($outer+8)|0);
 HEAP32[(($540)>>2)]=0;
 var $541=(function() { try { __THREW__ = 0; return __Znwj(64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=144;break; } else { label=147;break; }
 case 144: 
 var $543=$541;
 HEAP32[(($539)>>2)]=$543;
 HEAP32[(($538)>>2)]=$543;
 var $544=(($541+64)|0);
 var $545=$544;
 HEAP32[(($540)>>2)]=$545;
 var $546=($541|0)==0;
 if($546){var $548=0;label=146;break;}else{label=145;break;}
 case 145: 
 HEAP32[(($541)>>2)]=0; HEAP32[((($541)+(4))>>2)]=0; HEAP32[((($541)+(8))>>2)]=0; HEAP32[((($541)+(12))>>2)]=0;
 var $548=$543;label=146;break;
 case 146: 
 var $548;
 var $549=(($548+16)|0);
 var $550=($549|0)==0;
 if($550){var $727=0;label=218;break;}else{label=217;break;}
 case 147: 
 var $552$0 = ___cxa_find_matching_catch(-1, -1); var $552$1 = tempRet0;
 var $eh_lpad_body599$1=$552$1;var $eh_lpad_body599$0=$552$0;label=142;break;
 case 148: 
 var $554=(($clpr+60)|0);
 var $555=HEAP8[($554)];
 var $556=$555&1;
 var $557=(($556<<24)>>24)==0;
 if($557){label=149;break;}else{label=158;break;}
 case 149: 
 HEAP8[($554)]=1;
 var $559=HEAP32[(($162)>>2)];
 var $560=HEAP32[(($160)>>2)];
 var $561=($560|0)==($559|0);
 if($561){label=155;break;}else{var $562=$559;label=150;break;}
 case 150: 
 var $562;
 var $563=((($562)-(12))|0);
 HEAP32[(($162)>>2)]=$563;
 var $564=(($563)|0);
 var $565=HEAP32[(($564)>>2)];
 var $566=$565;
 var $567=($565|0)==0;
 if($567){var $568=$563;label=151;break;}else{label=152;break;}
 case 151: 
 var $568;
 var $569=($560|0)==($568|0);
 if($569){label=155;break;}else{var $562=$568;label=150;break;}
 case 152: 
 var $570=((($562)-(12)+4)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=($565|0)==($571|0);
 if($572){label=154;break;}else{label=153;break;}
 case 153: 
 var $scevgep_i_i_i_i_i603=((($571)-(16))|0);
 var $scevgep28_i_i_i_i_i604=$scevgep_i_i_i_i_i603;
 var $573=(((-$566))|0);
 var $uglygep_i_i_i_i_i605=(($scevgep28_i_i_i_i_i604+$573)|0);
 var $uglygep29_i_i_i_i_i606=$uglygep_i_i_i_i_i605;
 var $574=$uglygep29_i_i_i_i_i606>>>4;
 var $575=$574^-1;
 var $scevgep30_i_i_i_i_i607=(($571+($575<<4))|0);
 HEAP32[(($570)>>2)]=$scevgep30_i_i_i_i_i607;
 label=154;break;
 case 154: 
 var $576=$565;
 __ZdlPv($576);
 var $_pre_i_i609=HEAP32[(($162)>>2)];
 var $568=$_pre_i_i609;label=151;break;
 case 155: 
 var $577=(($clpr+68)|0);
 HEAP32[(($577)>>2)]=3;
 var $578=(($clpr+64)|0);
 HEAP32[(($578)>>2)]=3;
 var $579=(($clpr+40)|0);
 HEAP32[(($579)>>2)]=1;
 var $580=$clpr;
 var $581=HEAP32[(($580)>>2)];
 var $582=(($581+16)|0);
 var $583=HEAP32[(($582)>>2)];
 var $584=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$583]($clpr,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=178;break; }
 case 156: 
 if($584){label=159;break;}else{label=157;break;}
 case 157: 
 HEAP8[($554)]=0;
 label=158;break;
 case 158: 
 var $_ph=HEAP32[(($160)>>2)];
 var $585=HEAP32[(($162)>>2)];
 var $586=($_ph|0)==($585|0);
 if($586){label=188;break;}else{var $653=$585;label=183;break;}
 case 159: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7Clipper11BuildResultERNSt3__16vectorINS2_INS_8IntPointENS1_9allocatorIS3_EEEENS4_IS6_EEEE($clpr,$out_polys) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=160;break; } else { label=178;break; }
 case 160: 
 HEAP8[($554)]=0;
 var $589=HEAP32[(($160)>>2)];
 var $590=HEAP32[(($162)>>2)];
 var $_0720=(($589+12)|0);
 var $591=($_0720|0)==($590|0);
 if($591){var $_0479_lcssa=$589;var $592=$590;label=162;break;}else{var $_0479721=$589;var $_0723=$_0720;label=163;break;}
 case 161: 
 var $_pre828=HEAP32[(($162)>>2)];
 var $_0479_lcssa=$598;var $592=$_pre828;label=162;break;
 case 162: 
 var $592;
 var $_0479_lcssa;
 var $593=($_0479_lcssa|0)==($592|0);
 if($593){var $_lcssa=$592;label=170;break;}else{var $600=$592;label=165;break;}
 case 163: 
 var $_0723;
 var $_0479721;
 var $594=(($_0723)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=(($_0479721+16)|0);
 var $597=HEAP32[(($596)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($_0479721,$595,$597) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=164;break; } else { label=177;break; }
 case 164: 
 var $598=(($_0479721+12)|0);
 var $_0=(($_0723+12)|0);
 var $599=($_0|0)==($590|0);
 if($599){label=161;break;}else{var $_0479721=$598;var $_0723=$_0;label=163;break;}
 case 165: 
 var $600;
 var $601=((($600)-(12))|0);
 HEAP32[(($162)>>2)]=$601;
 var $602=(($601)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=$603;
 var $605=($603|0)==0;
 if($605){var $606=$601;label=166;break;}else{label=167;break;}
 case 166: 
 var $606;
 var $607=($_0479_lcssa|0)==($606|0);
 if($607){var $_lcssa=$_0479_lcssa;label=170;break;}else{var $600=$606;label=165;break;}
 case 167: 
 var $608=((($600)-(12)+4)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=($603|0)==($609|0);
 if($610){label=169;break;}else{label=168;break;}
 case 168: 
 var $scevgep_i_i_i617=((($609)-(16))|0);
 var $scevgep28_i_i_i618=$scevgep_i_i_i617;
 var $611=(((-$604))|0);
 var $uglygep_i_i_i619=(($scevgep28_i_i_i618+$611)|0);
 var $uglygep29_i_i_i620=$uglygep_i_i_i619;
 var $612=$uglygep29_i_i_i620>>>4;
 var $613=$612^-1;
 var $scevgep30_i_i_i621=(($609+($613<<4))|0);
 HEAP32[(($608)>>2)]=$scevgep30_i_i_i621;
 label=169;break;
 case 169: 
 var $614=$603;
 __ZdlPv($614);
 var $_pre829=HEAP32[(($162)>>2)];
 var $606=$_pre829;label=166;break;
 case 170: 
 var $_lcssa;
 var $615=HEAP32[(($160)>>2)];
 var $616=($_lcssa|0)==($615|0);
 if($616){label=188;break;}else{label=171;break;}
 case 171: 
 var $__t_i_i_i_i_0_cast7_i626=$__t_i_i_i_i_i625;
 var $i_08_i628=0;var $619=$615;var $618=$_lcssa;label=172;break;
 case 172: 
 var $618;
 var $619;
 var $i_08_i628;
 var $$etemp$44$0=16;
 var $$etemp$44$1=0;
 var $620=(($619+((($i_08_i628)*(12))&-1))|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=(($619+((($i_08_i628)*(12))&-1)+4)|0);
 var $623=HEAP32[(($622)>>2)];
 var $624=($621|0)==($623|0);
 if($624){var $634=$618;var $633=$619;label=176;break;}else{label=173;break;}
 case 173: 
 var $625=((($623)-(16))|0);
 var $626=($621>>>0)<($625>>>0);
 if($626){var $_sroa_044_053_i_i630=$621;var $627=$625;label=174;break;}else{var $634=$618;var $633=$619;label=176;break;}
 case 174: 
 var $627;
 var $_sroa_044_053_i_i630;
 var $628=$_sroa_044_053_i_i630;
 assert(16 % 1 === 0);HEAP32[(($__t_i_i_i_i_0_cast7_i626)>>2)]=HEAP32[(($628)>>2)];HEAP32[((($__t_i_i_i_i_0_cast7_i626)+(4))>>2)]=HEAP32[((($628)+(4))>>2)];HEAP32[((($__t_i_i_i_i_0_cast7_i626)+(8))>>2)]=HEAP32[((($628)+(8))>>2)];HEAP32[((($__t_i_i_i_i_0_cast7_i626)+(12))>>2)]=HEAP32[((($628)+(12))>>2)];
 var $629=$627;
 assert(16 % 1 === 0);HEAP32[(($628)>>2)]=HEAP32[(($629)>>2)];HEAP32[((($628)+(4))>>2)]=HEAP32[((($629)+(4))>>2)];HEAP32[((($628)+(8))>>2)]=HEAP32[((($629)+(8))>>2)];HEAP32[((($628)+(12))>>2)]=HEAP32[((($629)+(12))>>2)];
 assert(16 % 1 === 0);HEAP32[(($629)>>2)]=HEAP32[(($__t_i_i_i_i_0_cast7_i626)>>2)];HEAP32[((($629)+(4))>>2)]=HEAP32[((($__t_i_i_i_i_0_cast7_i626)+(4))>>2)];HEAP32[((($629)+(8))>>2)]=HEAP32[((($__t_i_i_i_i_0_cast7_i626)+(8))>>2)];HEAP32[((($629)+(12))>>2)]=HEAP32[((($__t_i_i_i_i_0_cast7_i626)+(12))>>2)];
 var $630=(($_sroa_044_053_i_i630+16)|0);
 var $631=((($627)-(16))|0);
 var $632=($630>>>0)<($631>>>0);
 if($632){var $_sroa_044_053_i_i630=$630;var $627=$631;label=174;break;}else{label=175;break;}
 case 175: 
 var $_pre_i632=HEAP32[(($162)>>2)];
 var $_pre9_i633=HEAP32[(($160)>>2)];
 var $634=$_pre_i632;var $633=$_pre9_i633;label=176;break;
 case 176: 
 var $633;
 var $634;
 var $$etemp$45$0=16;
 var $$etemp$45$1=0;
 var $635=((($i_08_i628)+(1))|0);
 var $636=$634;
 var $637=$633;
 var $638=((($636)-($637))|0);
 var $639=(((($638|0))/(12))&-1);
 var $640=($635>>>0)<($639>>>0);
 if($640){var $i_08_i628=$635;var $619=$633;var $618=$634;label=172;break;}else{label=188;break;}
 case 177: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=179;break;
 case 178: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=179;break;
 case 179: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $642=$lpad_phi$0;
 var $643=$lpad_phi$1;
 var $644=HEAP32[(($538)>>2)];
 var $645=$644;
 var $646=($644|0)==0;
 if($646){var $_1=$642;var $_1483=$643;label=197;break;}else{label=180;break;}
 case 180: 
 var $647=HEAP32[(($539)>>2)];
 var $648=($644|0)==($647|0);
 if($648){label=182;break;}else{label=181;break;}
 case 181: 
 var $scevgep_i_i_i639=((($647)-(16))|0);
 var $scevgep28_i_i_i640=$scevgep_i_i_i639;
 var $649=(((-$645))|0);
 var $uglygep_i_i_i641=(($scevgep28_i_i_i640+$649)|0);
 var $uglygep29_i_i_i642=$uglygep_i_i_i641;
 var $650=$uglygep29_i_i_i642>>>4;
 var $651=$650^-1;
 var $scevgep30_i_i_i643=(($647+($651<<4))|0);
 HEAP32[(($539)>>2)]=$scevgep30_i_i_i643;
 label=182;break;
 case 182: 
 var $652=$644;
 __ZdlPv($652);
 var $_1=$642;var $_1483=$643;label=197;break;
 case 183: 
 var $653;
 var $654=((($653)-(12))|0);
 HEAP32[(($162)>>2)]=$654;
 var $655=(($654)|0);
 var $656=HEAP32[(($655)>>2)];
 var $657=$656;
 var $658=($656|0)==0;
 if($658){var $659=$654;label=184;break;}else{label=185;break;}
 case 184: 
 var $659;
 var $660=($_ph|0)==($659|0);
 if($660){label=188;break;}else{var $653=$659;label=183;break;}
 case 185: 
 var $661=((($653)-(12)+4)|0);
 var $662=HEAP32[(($661)>>2)];
 var $663=($656|0)==($662|0);
 if($663){label=187;break;}else{label=186;break;}
 case 186: 
 var $scevgep_i_i_i648=((($662)-(16))|0);
 var $scevgep28_i_i_i649=$scevgep_i_i_i648;
 var $664=(((-$657))|0);
 var $uglygep_i_i_i650=(($scevgep28_i_i_i649+$664)|0);
 var $uglygep29_i_i_i651=$uglygep_i_i_i650;
 var $665=$uglygep29_i_i_i651>>>4;
 var $666=$665^-1;
 var $scevgep30_i_i_i652=(($662+($666<<4))|0);
 HEAP32[(($661)>>2)]=$scevgep30_i_i_i652;
 label=187;break;
 case 187: 
 var $667=$656;
 __ZdlPv($667);
 var $_pre830=HEAP32[(($162)>>2)];
 var $659=$_pre830;label=184;break;
 case 188: 
 var $668=HEAP32[(($538)>>2)];
 var $669=$668;
 var $670=($668|0)==0;
 if($670){label=192;break;}else{label=189;break;}
 case 189: 
 var $671=HEAP32[(($539)>>2)];
 var $672=($668|0)==($671|0);
 if($672){label=191;break;}else{label=190;break;}
 case 190: 
 var $scevgep_i_i_i657=((($671)-(16))|0);
 var $scevgep28_i_i_i658=$scevgep_i_i_i657;
 var $673=(((-$669))|0);
 var $uglygep_i_i_i659=(($scevgep28_i_i_i658+$673)|0);
 var $uglygep29_i_i_i660=$uglygep_i_i_i659;
 var $674=$uglygep29_i_i_i660>>>4;
 var $675=$674^-1;
 var $scevgep30_i_i_i661=(($671+($675<<4))|0);
 HEAP32[(($539)>>2)]=$scevgep30_i_i_i661;
 label=191;break;
 case 191: 
 var $676=$668;
 __ZdlPv($676);
 label=192;break;
 case 192: 
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD2Ev($clpr,9464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { label=194;break; }
 case 193: 
 var $678=(($clpr+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($678) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=6;break; }
 case 194: 
 var $680$0 = ___cxa_find_matching_catch(-1, -1); var $680$1 = tempRet0;
 var $681=(($clpr+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($681) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body667$1=$680$1;var $eh_lpad_body667$0=$680$0;label=7;break; } else { label=195;break; }
 case 195: 
 var $683$0 = ___cxa_find_matching_catch(-1, -1,0); var $683$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 196: 
 STACKTOP=sp;return;
 case 197: 
 var $_1483;
 var $_1;
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib7ClipperD2Ev($clpr,9464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=198;break; } else { label=199;break; }
 case 198: 
 var $685=(($clpr+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($685) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_2=$_1;var $_2484=$_1483;label=201;break; } else { label=215;break; }
 case 199: 
 var $687$0 = ___cxa_find_matching_catch(-1, -1,0); var $687$1 = tempRet0;
 var $688=(($clpr+76)|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBaseD2Ev($688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=216;break; } else { label=200;break; }
 case 200: 
 var $690$0 = ___cxa_find_matching_catch(-1, -1,0); var $690$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 201: 
 var $_2484;
 var $_2;
 var $691=HEAP32[(($7)>>2)];
 var $692=$691;
 var $693=($691|0)==0;
 if($693){label=205;break;}else{label=202;break;}
 case 202: 
 var $694=HEAP32[(($8)>>2)];
 var $695=($691|0)==($694|0);
 if($695){label=204;break;}else{label=203;break;}
 case 203: 
 var $scevgep_i_i_i=((($694)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $696=(((-$692))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$696)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $697=$uglygep29_i_i_i>>>4;
 var $698=$697^-1;
 var $scevgep30_i_i_i=(($694+($698<<4))|0);
 HEAP32[(($8)>>2)]=$scevgep30_i_i_i;
 label=204;break;
 case 204: 
 var $699=$691;
 __ZdlPv($699);
 label=205;break;
 case 205: 
 var $700=HEAP32[(($3)>>2)];
 var $701=($700|0)==0;
 if($701){label=214;break;}else{label=206;break;}
 case 206: 
 var $702=HEAP32[(($4)>>2)];
 var $703=($700|0)==($702|0);
 if($703){var $719=$700;label=213;break;}else{var $704=$702;label=207;break;}
 case 207: 
 var $704;
 var $705=((($704)-(12))|0);
 HEAP32[(($4)>>2)]=$705;
 var $706=(($705)|0);
 var $707=HEAP32[(($706)>>2)];
 var $708=$707;
 var $709=($707|0)==0;
 if($709){var $710=$705;label=208;break;}else{label=209;break;}
 case 208: 
 var $710;
 var $711=($700|0)==($710|0);
 if($711){label=212;break;}else{var $704=$710;label=207;break;}
 case 209: 
 var $712=((($704)-(12)+4)|0);
 var $713=HEAP32[(($712)>>2)];
 var $714=($707|0)==($713|0);
 if($714){label=211;break;}else{label=210;break;}
 case 210: 
 var $scevgep_i_i_i_i_i_i=((($713)-(16))|0);
 var $scevgep28_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i;
 var $715=(((-$708))|0);
 var $uglygep_i_i_i_i_i_i=(($scevgep28_i_i_i_i_i_i+$715)|0);
 var $uglygep29_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i;
 var $716=$uglygep29_i_i_i_i_i_i>>>4;
 var $717=$716^-1;
 var $scevgep30_i_i_i_i_i_i=(($713+($717<<4))|0);
 HEAP32[(($712)>>2)]=$scevgep30_i_i_i_i_i_i;
 label=211;break;
 case 211: 
 var $718=$707;
 __ZdlPv($718);
 var $_pre29_i_i_i=HEAP32[(($4)>>2)];
 var $710=$_pre29_i_i_i;label=208;break;
 case 212: 
 var $_pre_i_i_i=HEAP32[(($3)>>2)];
 var $719=$_pre_i_i_i;label=213;break;
 case 213: 
 var $719;
 var $720=$719;
 __ZdlPv($720);
 label=214;break;
 case 214: 
 var $721$0=$_2;
 var $721$1=0;
 var $722$0=$721$0;
 var $722$1=$_2484;
 ___resumeException($722$0)
 case 215: 
 var $724$0 = ___cxa_find_matching_catch(-1, -1,0); var $724$1 = tempRet0;
 label=216;break;
 case 216: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 217: 
 var $726=$549;
 HEAP32[(($726)>>2)]=0; HEAP32[((($726)+(4))>>2)]=0; HEAP32[((($726)+(8))>>2)]=0; HEAP32[((($726)+(12))>>2)]=0;
 var $727=$549;label=218;break;
 case 218: 
 var $727;
 var $728=(($727+16)|0);
 var $729=($728|0)==0;
 if($729){var $732=0;label=220;break;}else{label=219;break;}
 case 219: 
 var $731=$728;
 HEAP32[(($731)>>2)]=0; HEAP32[((($731)+(4))>>2)]=0; HEAP32[((($731)+(8))>>2)]=0; HEAP32[((($731)+(12))>>2)]=0;
 var $732=$728;label=220;break;
 case 220: 
 var $732;
 var $733=(($732+16)|0);
 var $734=($733|0)==0;
 if($734){var $737=0;label=222;break;}else{label=221;break;}
 case 221: 
 var $736=$733;
 HEAP32[(($736)>>2)]=0; HEAP32[((($736)+(4))>>2)]=0; HEAP32[((($736)+(8))>>2)]=0; HEAP32[((($736)+(12))>>2)]=0;
 var $737=$733;label=222;break;
 case 222: 
 var $737;
 var $738=(($737+16)|0);
 HEAP32[(($539)>>2)]=$738;
 var $739=(($r)|0);
 var $ld$46$0=(($739)|0);
 var $740$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($739+4)|0);
 var $740$1=HEAP32[(($ld$47$1)>>2)];
 var $$etemp$48$0=-10;
 var $$etemp$48$1=-1;
 var $741$0=_i64Add($740$0,$740$1,$$etemp$48$0,$$etemp$48$1);var $741$1=tempRet0;
 var $742=(($r+24)|0);
 var $ld$49$0=(($742)|0);
 var $743$0=HEAP32[(($ld$49$0)>>2)];
 var $ld$50$1=(($742+4)|0);
 var $743$1=HEAP32[(($ld$50$1)>>2)];
 var $$etemp$51$0=10;
 var $$etemp$51$1=0;
 var $744$0=_i64Add($743$0,$743$1,$$etemp$51$0,$$etemp$51$1);var $744$1=tempRet0;
 var $_sroa_0676_0__idx=$541;
 var $st$52$0=(($_sroa_0676_0__idx)|0);
 HEAP32[(($st$52$0)>>2)]=$741$0;
 var $st$53$1=(($_sroa_0676_0__idx+4)|0);
 HEAP32[(($st$53$1)>>2)]=$741$1;
 var $_sroa_1677_8__idx678=(($541+8)|0);
 var $745=$_sroa_1677_8__idx678;
 var $st$54$0=(($745)|0);
 HEAP32[(($st$54$0)>>2)]=$744$0;
 var $st$55$1=(($745+4)|0);
 HEAP32[(($st$55$1)>>2)]=$744$1;
 var $746=(($r+16)|0);
 var $ld$56$0=(($746)|0);
 var $747$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($746+4)|0);
 var $747$1=HEAP32[(($ld$57$1)>>2)];
 var $$etemp$58$0=10;
 var $$etemp$58$1=0;
 var $748$0=_i64Add($747$0,$747$1,$$etemp$58$0,$$etemp$58$1);var $748$1=tempRet0;
 var $_sroa_0673_0__idx=(($541+16)|0);
 var $749=$_sroa_0673_0__idx;
 var $st$59$0=(($749)|0);
 HEAP32[(($st$59$0)>>2)]=$748$0;
 var $st$60$1=(($749+4)|0);
 HEAP32[(($st$60$1)>>2)]=$748$1;
 var $_sroa_1674_8__idx675=(($541+24)|0);
 var $750=$_sroa_1674_8__idx675;
 var $st$61$0=(($750)|0);
 HEAP32[(($st$61$0)>>2)]=$744$0;
 var $st$62$1=(($750+4)|0);
 HEAP32[(($st$62$1)>>2)]=$744$1;
 var $751=(($r+8)|0);
 var $ld$63$0=(($751)|0);
 var $752$0=HEAP32[(($ld$63$0)>>2)];
 var $ld$64$1=(($751+4)|0);
 var $752$1=HEAP32[(($ld$64$1)>>2)];
 var $$etemp$65$0=-10;
 var $$etemp$65$1=-1;
 var $753$0=_i64Add($752$0,$752$1,$$etemp$65$0,$$etemp$65$1);var $753$1=tempRet0;
 var $_sroa_0670_0__idx=(($541+32)|0);
 var $754=$_sroa_0670_0__idx;
 var $st$66$0=(($754)|0);
 HEAP32[(($st$66$0)>>2)]=$748$0;
 var $st$67$1=(($754+4)|0);
 HEAP32[(($st$67$1)>>2)]=$748$1;
 var $_sroa_1671_8__idx672=(($541+40)|0);
 var $755=$_sroa_1671_8__idx672;
 var $st$68$0=(($755)|0);
 HEAP32[(($st$68$0)>>2)]=$753$0;
 var $st$69$1=(($755+4)|0);
 HEAP32[(($st$69$1)>>2)]=$753$1;
 var $_sroa_0_0__idx=(($541+48)|0);
 var $756=$_sroa_0_0__idx;
 var $st$70$0=(($756)|0);
 HEAP32[(($st$70$0)>>2)]=$741$0;
 var $st$71$1=(($756+4)|0);
 HEAP32[(($st$71$1)>>2)]=$741$1;
 var $_sroa_1_8__idx669=(($541+56)|0);
 var $757=$_sroa_1_8__idx669;
 var $st$72$0=(($757)|0);
 HEAP32[(($st$72$0)>>2)]=$753$0;
 var $st$73$1=(($757+4)|0);
 HEAP32[(($st$73$1)>>2)]=$753$1;
 var $758=HEAP32[(($460)>>2)];
 var $759=((($758)-(12))|0);
 var $760=$759;
 var $761=HEAP32[(($760)>>2)];
 var $762=(($461+$761)|0);
 var $763=$762;
 var $764=(function() { try { __THREW__ = 0; return __ZN10ClipperLib11ClipperBase10AddPolygonERKNSt3__16vectorINS_8IntPointENS1_9allocatorIS3_EEEENS_8PolyTypeE($763,$outer,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=178;break; }
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib17PolyOffsetBuilder7DoMiterEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $pt1=(sp)+(16);
 var $pt2=(sp)+(32);
 var $2=(($this+64)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+($3<<4))|0);
 var $7=HEAPF64[(($6)>>3)];
 var $8=(($this+60)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($5+($9<<4)+8)|0);
 var $11=HEAPF64[(($10)>>3)];
 var $12=($7)*($11);
 var $13=(($5+($9<<4))|0);
 var $14=HEAPF64[(($13)>>3)];
 var $15=(($5+($3<<4)+8)|0);
 var $16=HEAPF64[(($15)>>3)];
 var $17=($14)*($16);
 var $18=($12)-($17);
 var $19=(($this+32)|0);
 var $20=HEAPF64[(($19)>>3)];
 var $21=($20)*($18);
 var $22=$21<0;
 if($22){label=9;break;}else{label=2;break;}
 case 2: 
 var $24=(($this+48)|0);
 var $25=HEAPF64[(($24)>>3)];
 var $26=($20)/($25);
 var $27=(($this+56)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+((($28)*(12))&-1))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+($9<<4))|0);
 var $ld$0$0=(($33)|0);
 var $34$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($33+4)|0);
 var $34$1=HEAP32[(($ld$1$1)>>2)];
 var $35=(($34$0>>>0)+(($34$1|0)*4294967296));
 var $36=($7)+($14);
 var $37=($36)*($26);
 var $38=($37)+($35);
 var $39=$38<0;
 if($39){label=3;break;}else{label=4;break;}
 case 3: 
 var $41=($38)+((-0.5));
 var $_sink_i=$41;label=5;break;
 case 4: 
 var $43=($38)+((0.5));
 var $_sink_i=$43;label=5;break;
 case 5: 
 var $_sink_i;
 var $44$0=$_sink_i>>>0;var $44$1=(Math_abs($_sink_i) >= 1 ? ($_sink_i > 0 ? Math_min(Math_floor(($_sink_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i - +(((~~($_sink_i)))>>>0))/4294967296)))>>>0) : 0);
 var $45=(($32+($9<<4)+8)|0);
 var $ld$2$0=(($45)|0);
 var $46$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($45+4)|0);
 var $46$1=HEAP32[(($ld$3$1)>>2)];
 var $47=(($46$0>>>0)+(($46$1|0)*4294967296));
 var $48=($16)+($11);
 var $49=($26)*($48);
 var $50=($47)+($49);
 var $51=$50<0;
 if($51){label=6;break;}else{label=7;break;}
 case 6: 
 var $53=($50)+((-0.5));
 var $_sink_i54=$53;label=8;break;
 case 7: 
 var $55=($50)+((0.5));
 var $_sink_i54=$55;label=8;break;
 case 8: 
 var $_sink_i54;
 var $56$0=$_sink_i54>>>0;var $56$1=(Math_abs($_sink_i54) >= 1 ? ($_sink_i54 > 0 ? Math_min(Math_floor(($_sink_i54)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i54 - +(((~~($_sink_i54)))>>>0))/4294967296)))>>>0) : 0);
 var $57=(($1)|0);
 var $st$4$0=(($57)|0);
 HEAP32[(($st$4$0)>>2)]=$44$0;
 var $st$5$1=(($57+4)|0);
 HEAP32[(($st$5$1)>>2)]=$44$1;
 var $58=(($1+8)|0);
 var $st$6$0=(($58)|0);
 HEAP32[(($st$6$0)>>2)]=$56$0;
 var $st$7$1=(($58+4)|0);
 HEAP32[(($st$7$1)>>2)]=$56$1;
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$1);
 label=22;break;
 case 9: 
 var $60=(($this+56)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($this)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+((($61)*(12))&-1))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+($9<<4))|0);
 var $ld$8$0=(($66)|0);
 var $67$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($66+4)|0);
 var $67$1=HEAP32[(($ld$9$1)>>2)];
 var $68=(($67$0>>>0)+(($67$1|0)*4294967296));
 var $69=($7)*($20);
 var $70=($69)+($68);
 var $71=$70<0;
 if($71){label=10;break;}else{label=11;break;}
 case 10: 
 var $73=($70)+((-0.5));
 var $_sink_i56=$73;label=12;break;
 case 11: 
 var $75=($70)+((0.5));
 var $_sink_i56=$75;label=12;break;
 case 12: 
 var $_sink_i56;
 var $76$0=$_sink_i56>>>0;var $76$1=(Math_abs($_sink_i56) >= 1 ? ($_sink_i56 > 0 ? Math_min(Math_floor(($_sink_i56)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i56 - +(((~~($_sink_i56)))>>>0))/4294967296)))>>>0) : 0);
 var $77=(($65+($9<<4)+8)|0);
 var $ld$10$0=(($77)|0);
 var $78$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($77+4)|0);
 var $78$1=HEAP32[(($ld$11$1)>>2)];
 var $79=(($78$0>>>0)+(($78$1|0)*4294967296));
 var $80=($16)*($20);
 var $81=($79)+($80);
 var $82=$81<0;
 if($82){label=13;break;}else{label=14;break;}
 case 13: 
 var $84=($81)+((-0.5));
 var $_sink_i62=$84;label=15;break;
 case 14: 
 var $86=($81)+((0.5));
 var $_sink_i62=$86;label=15;break;
 case 15: 
 var $_sink_i62;
 var $87$0=$_sink_i62>>>0;var $87$1=(Math_abs($_sink_i62) >= 1 ? ($_sink_i62 > 0 ? Math_min(Math_floor(($_sink_i62)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i62 - +(((~~($_sink_i62)))>>>0))/4294967296)))>>>0) : 0);
 var $88=(($pt1)|0);
 var $st$12$0=(($88)|0);
 HEAP32[(($st$12$0)>>2)]=$76$0;
 var $st$13$1=(($88+4)|0);
 HEAP32[(($st$13$1)>>2)]=$76$1;
 var $89=(($pt1+8)|0);
 var $st$14$0=(($89)|0);
 HEAP32[(($st$14$0)>>2)]=$87$0;
 var $st$15$1=(($89+4)|0);
 HEAP32[(($st$15$1)>>2)]=$87$1;
 var $90=($14)*($20);
 var $91=($68)+($90);
 var $92=$91<0;
 if($92){label=16;break;}else{label=17;break;}
 case 16: 
 var $94=($91)+((-0.5));
 var $_sink_i60=$94;label=18;break;
 case 17: 
 var $96=($91)+((0.5));
 var $_sink_i60=$96;label=18;break;
 case 18: 
 var $_sink_i60;
 var $97$0=$_sink_i60>>>0;var $97$1=(Math_abs($_sink_i60) >= 1 ? ($_sink_i60 > 0 ? Math_min(Math_floor(($_sink_i60)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i60 - +(((~~($_sink_i60)))>>>0))/4294967296)))>>>0) : 0);
 var $98=($11)*($20);
 var $99=($79)+($98);
 var $100=$99<0;
 if($100){label=19;break;}else{label=20;break;}
 case 19: 
 var $102=($99)+((-0.5));
 var $_sink_i58=$102;label=21;break;
 case 20: 
 var $104=($99)+((0.5));
 var $_sink_i58=$104;label=21;break;
 case 21: 
 var $_sink_i58;
 var $105$0=$_sink_i58>>>0;var $105$1=(Math_abs($_sink_i58) >= 1 ? ($_sink_i58 > 0 ? Math_min(Math_floor(($_sink_i58)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i58 - +(((~~($_sink_i58)))>>>0))/4294967296)))>>>0) : 0);
 var $106=(($pt2)|0);
 var $st$16$0=(($106)|0);
 HEAP32[(($st$16$0)>>2)]=$97$0;
 var $st$17$1=(($106+4)|0);
 HEAP32[(($st$17$1)>>2)]=$97$1;
 var $107=(($pt2+8)|0);
 var $st$18$0=(($107)|0);
 HEAP32[(($st$18$0)>>2)]=$105$0;
 var $st$19$1=(($107+4)|0);
 HEAP32[(($st$19$1)>>2)]=$105$1;
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt1);
 var $108=HEAP32[(($60)>>2)];
 var $109=HEAP32[(($62)>>2)];
 var $110=HEAP32[(($8)>>2)];
 var $111=(($109+((($108)*(12))&-1))|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+($110<<4))|0);
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$113);
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt2);
 label=22;break;
 case 22: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib17PolyOffsetBuilder8DoSquareEd($this,$mul){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $pt1=sp;
 var $pt2=(sp)+(16);
 var $1=(($this+56)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this+60)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($4+((($2)*(12))&-1))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+($6<<4))|0);
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $11=(($10$0>>>0)+(($10$1|0)*4294967296));
 var $12=(($this+64)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($this+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+($13<<4))|0);
 var $17=HEAPF64[(($16)>>3)];
 var $18=(($this+32)|0);
 var $19=HEAPF64[(($18)>>3)];
 var $20=($17)*($19);
 var $21=($11)+($20);
 var $22=$21<0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=($21)+((-0.5));
 var $_sink_i=$24;label=4;break;
 case 3: 
 var $26=($21)+((0.5));
 var $_sink_i=$26;label=4;break;
 case 4: 
 var $_sink_i;
 var $27$0=$_sink_i>>>0;var $27$1=(Math_abs($_sink_i) >= 1 ? ($_sink_i > 0 ? Math_min(Math_floor(($_sink_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i - +(((~~($_sink_i)))>>>0))/4294967296)))>>>0) : 0);
 var $28=(($8+($6<<4)+8)|0);
 var $ld$2$0=(($28)|0);
 var $29$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$3$1)>>2)];
 var $30=(($29$0>>>0)+(($29$1|0)*4294967296));
 var $31=(($15+($13<<4)+8)|0);
 var $32=HEAPF64[(($31)>>3)];
 var $33=($32)*($19);
 var $34=($30)+($33);
 var $35=$34<0;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=($34)+((-0.5));
 var $_sink_i60=$37;label=7;break;
 case 6: 
 var $39=($34)+((0.5));
 var $_sink_i60=$39;label=7;break;
 case 7: 
 var $_sink_i60;
 var $40$0=$_sink_i60>>>0;var $40$1=(Math_abs($_sink_i60) >= 1 ? ($_sink_i60 > 0 ? Math_min(Math_floor(($_sink_i60)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i60 - +(((~~($_sink_i60)))>>>0))/4294967296)))>>>0) : 0);
 var $41=(($pt1)|0);
 var $st$4$0=(($41)|0);
 HEAP32[(($st$4$0)>>2)]=$27$0;
 var $st$5$1=(($41+4)|0);
 HEAP32[(($st$5$1)>>2)]=$27$1;
 var $42=(($pt1+8)|0);
 var $st$6$0=(($42)|0);
 HEAP32[(($st$6$0)>>2)]=$40$0;
 var $st$7$1=(($42+4)|0);
 HEAP32[(($st$7$1)>>2)]=$40$1;
 var $43=(($15+($6<<4))|0);
 var $44=HEAPF64[(($43)>>3)];
 var $45=($44)*($19);
 var $46=($11)+($45);
 var $47=$46<0;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=($46)+((-0.5));
 var $_sink_i62=$49;label=10;break;
 case 9: 
 var $51=($46)+((0.5));
 var $_sink_i62=$51;label=10;break;
 case 10: 
 var $_sink_i62;
 var $52$0=$_sink_i62>>>0;var $52$1=(Math_abs($_sink_i62) >= 1 ? ($_sink_i62 > 0 ? Math_min(Math_floor(($_sink_i62)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i62 - +(((~~($_sink_i62)))>>>0))/4294967296)))>>>0) : 0);
 var $53=(($15+($6<<4)+8)|0);
 var $54=HEAPF64[(($53)>>3)];
 var $55=($54)*($19);
 var $56=($30)+($55);
 var $57=$56<0;
 if($57){label=11;break;}else{label=12;break;}
 case 11: 
 var $59=($56)+((-0.5));
 var $_sink_i64=$59;label=13;break;
 case 12: 
 var $61=($56)+((0.5));
 var $_sink_i64=$61;label=13;break;
 case 13: 
 var $_sink_i64;
 var $62$0=$_sink_i64>>>0;var $62$1=(Math_abs($_sink_i64) >= 1 ? ($_sink_i64 > 0 ? Math_min(Math_floor(($_sink_i64)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i64 - +(((~~($_sink_i64)))>>>0))/4294967296)))>>>0) : 0);
 var $63=(($pt2)|0);
 var $st$8$0=(($63)|0);
 HEAP32[(($st$8$0)>>2)]=$52$0;
 var $st$9$1=(($63+4)|0);
 HEAP32[(($st$9$1)>>2)]=$52$1;
 var $64=(($pt2+8)|0);
 var $st$10$0=(($64)|0);
 HEAP32[(($st$10$0)>>2)]=$62$0;
 var $st$11$1=(($64+4)|0);
 HEAP32[(($st$11$1)>>2)]=$62$1;
 var $65=($17)*($54);
 var $66=($44)*($32);
 var $67=($65)-($66);
 var $68=($19)*($67);
 var $69=$68<0;
 if($69){label=17;break;}else{label=14;break;}
 case 14: 
 var $71=Math_atan2($32,$17);
 var $72=((-.0))-($54);
 var $73=((-.0))-($44);
 var $74=Math_atan2($72,$73);
 var $75=($74)-($71);
 var $76=Math_abs($75);
 var $77=$76>(3.141592653589793);
 if($77){label=15;break;}else{var $a1_0=$76;label=16;break;}
 case 15: 
 var $79=((6.283185307179586))-($76);
 var $a1_0=$79;label=16;break;
 case 16: 
 var $a1_0;
 var $81=((3.141592653589793))-($a1_0);
 var $82=($81)*((0.25));
 var $83=Math_tan($82);
 var $84=($19)*($mul);
 var $85=Math_abs($84);
 var $86=($83)*($85);
 var $87=(($27$0>>>0)+(($27$1|0)*4294967296));
 var $88=($86)*($32);
 var $89=($87)-($88);
 var $90$0=$89>>>0;var $90$1=(Math_abs($89) >= 1 ? ($89 > 0 ? Math_min(Math_floor(($89)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($89 - +(((~~($89)))>>>0))/4294967296)))>>>0) : 0);
 var $91=(($40$0>>>0)+(($40$1|0)*4294967296));
 var $92=($86)*($17);
 var $93=($91)+($92);
 var $94$0=$93>>>0;var $94$1=(Math_abs($93) >= 1 ? ($93 > 0 ? Math_min(Math_floor(($93)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($93 - +(((~~($93)))>>>0))/4294967296)))>>>0) : 0);
 var $st$12$0=(($41)|0);
 HEAP32[(($st$12$0)>>2)]=$90$0;
 var $st$13$1=(($41+4)|0);
 HEAP32[(($st$13$1)>>2)]=$90$1;
 var $st$14$0=(($42)|0);
 HEAP32[(($st$14$0)>>2)]=$94$0;
 var $st$15$1=(($42+4)|0);
 HEAP32[(($st$15$1)>>2)]=$94$1;
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt1);
 var $95=(($52$0>>>0)+(($52$1|0)*4294967296));
 var $96=HEAP32[(($5)>>2)];
 var $97=HEAP32[(($14)>>2)];
 var $98=(($97+($96<<4)+8)|0);
 var $99=HEAPF64[(($98)>>3)];
 var $100=($86)*($99);
 var $101=($95)+($100);
 var $102$0=$101>>>0;var $102$1=(Math_abs($101) >= 1 ? ($101 > 0 ? Math_min(Math_floor(($101)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($101 - +(((~~($101)))>>>0))/4294967296)))>>>0) : 0);
 var $103=(($62$0>>>0)+(($62$1|0)*4294967296));
 var $104=(($97+($96<<4))|0);
 var $105=HEAPF64[(($104)>>3)];
 var $106=($86)*($105);
 var $107=($103)-($106);
 var $108$0=$107>>>0;var $108$1=(Math_abs($107) >= 1 ? ($107 > 0 ? Math_min(Math_floor(($107)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($107 - +(((~~($107)))>>>0))/4294967296)))>>>0) : 0);
 var $st$16$0=(($63)|0);
 HEAP32[(($st$16$0)>>2)]=$102$0;
 var $st$17$1=(($63+4)|0);
 HEAP32[(($st$17$1)>>2)]=$102$1;
 var $st$18$0=(($64)|0);
 HEAP32[(($st$18$0)>>2)]=$108$0;
 var $st$19$1=(($64+4)|0);
 HEAP32[(($st$19$1)>>2)]=$108$1;
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt2);
 label=18;break;
 case 17: 
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt1);
 var $110=HEAP32[(($1)>>2)];
 var $111=HEAP32[(($3)>>2)];
 var $112=HEAP32[(($5)>>2)];
 var $113=(($111+((($110)*(12))&-1))|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+($112<<4))|0);
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$115);
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt2);
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib17PolyOffsetBuilder7DoRoundEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $pt1=sp;
 var $pt2=(sp)+(16);
 var $arc=(sp)+(32);
 var $1=(($this+56)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this+60)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($4+((($2)*(12))&-1))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+($6<<4))|0);
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $11=(($10$0>>>0)+(($10$1|0)*4294967296));
 var $12=(($this+64)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($this+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+($13<<4))|0);
 var $17=HEAPF64[(($16)>>3)];
 var $18=(($this+32)|0);
 var $19=HEAPF64[(($18)>>3)];
 var $20=($17)*($19);
 var $21=($11)+($20);
 var $22=$21<0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=($21)+((-0.5));
 var $_sink_i=$24;label=4;break;
 case 3: 
 var $26=($21)+((0.5));
 var $_sink_i=$26;label=4;break;
 case 4: 
 var $_sink_i;
 var $27$0=$_sink_i>>>0;var $27$1=(Math_abs($_sink_i) >= 1 ? ($_sink_i > 0 ? Math_min(Math_floor(($_sink_i)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i - +(((~~($_sink_i)))>>>0))/4294967296)))>>>0) : 0);
 var $28=(($8+($6<<4)+8)|0);
 var $ld$2$0=(($28)|0);
 var $29$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$3$1)>>2)];
 var $30=(($29$0>>>0)+(($29$1|0)*4294967296));
 var $31=(($15+($13<<4)+8)|0);
 var $32=HEAPF64[(($31)>>3)];
 var $33=($32)*($19);
 var $34=($30)+($33);
 var $35=$34<0;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=($34)+((-0.5));
 var $_sink_i71=$37;label=7;break;
 case 6: 
 var $39=($34)+((0.5));
 var $_sink_i71=$39;label=7;break;
 case 7: 
 var $_sink_i71;
 var $40$0=$_sink_i71>>>0;var $40$1=(Math_abs($_sink_i71) >= 1 ? ($_sink_i71 > 0 ? Math_min(Math_floor(($_sink_i71)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i71 - +(((~~($_sink_i71)))>>>0))/4294967296)))>>>0) : 0);
 var $41=(($pt1)|0);
 var $st$4$0=(($41)|0);
 HEAP32[(($st$4$0)>>2)]=$27$0;
 var $st$5$1=(($41+4)|0);
 HEAP32[(($st$5$1)>>2)]=$27$1;
 var $42=(($pt1+8)|0);
 var $st$6$0=(($42)|0);
 HEAP32[(($st$6$0)>>2)]=$40$0;
 var $st$7$1=(($42+4)|0);
 HEAP32[(($st$7$1)>>2)]=$40$1;
 var $43=(($15+($6<<4))|0);
 var $44=HEAPF64[(($43)>>3)];
 var $45=($44)*($19);
 var $46=($11)+($45);
 var $47=$46<0;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=($46)+((-0.5));
 var $_sink_i73=$49;label=10;break;
 case 9: 
 var $51=($46)+((0.5));
 var $_sink_i73=$51;label=10;break;
 case 10: 
 var $_sink_i73;
 var $52$0=$_sink_i73>>>0;var $52$1=(Math_abs($_sink_i73) >= 1 ? ($_sink_i73 > 0 ? Math_min(Math_floor(($_sink_i73)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i73 - +(((~~($_sink_i73)))>>>0))/4294967296)))>>>0) : 0);
 var $53=(($15+($6<<4)+8)|0);
 var $54=HEAPF64[(($53)>>3)];
 var $55=($54)*($19);
 var $56=($30)+($55);
 var $57=$56<0;
 if($57){label=11;break;}else{label=12;break;}
 case 11: 
 var $59=($56)+((-0.5));
 var $_sink_i84=$59;label=13;break;
 case 12: 
 var $61=($56)+((0.5));
 var $_sink_i84=$61;label=13;break;
 case 13: 
 var $_sink_i84;
 var $62$0=$_sink_i84>>>0;var $62$1=(Math_abs($_sink_i84) >= 1 ? ($_sink_i84 > 0 ? Math_min(Math_floor(($_sink_i84)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($_sink_i84 - +(((~~($_sink_i84)))>>>0))/4294967296)))>>>0) : 0);
 var $63=(($pt2)|0);
 var $st$8$0=(($63)|0);
 HEAP32[(($st$8$0)>>2)]=$52$0;
 var $st$9$1=(($63+4)|0);
 HEAP32[(($st$9$1)>>2)]=$52$1;
 var $64=(($pt2+8)|0);
 var $st$10$0=(($64)|0);
 HEAP32[(($st$10$0)>>2)]=$62$0;
 var $st$11$1=(($64+4)|0);
 HEAP32[(($st$11$1)>>2)]=$62$1;
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt1);
 var $65=HEAP32[(($12)>>2)];
 var $66=HEAP32[(($14)>>2)];
 var $67=(($66+($65<<4))|0);
 var $68=HEAPF64[(($67)>>3)];
 var $69=HEAP32[(($5)>>2)];
 var $70=(($66+($69<<4)+8)|0);
 var $71=HEAPF64[(($70)>>3)];
 var $72=($68)*($71);
 var $73=(($66+($69<<4))|0);
 var $74=HEAPF64[(($73)>>3)];
 var $75=(($66+($65<<4)+8)|0);
 var $76=HEAPF64[(($75)>>3)];
 var $77=($74)*($76);
 var $78=($72)-($77);
 var $79=HEAPF64[(($18)>>3)];
 var $80=($79)*($78);
 var $81=$80<0;
 if($81){label=30;break;}else{label=14;break;}
 case 14: 
 var $83=($68)*($74);
 var $84=($71)*($76);
 var $85=($83)+($84);
 var $86=$85<(0.985);
 if($86){label=15;break;}else{label=31;break;}
 case 15: 
 var $88=Math_atan2($76,$68);
 var $89=Math_atan2($71,$74);
 var $90=$79>0;
 var $91=$89<$88;
 var $or_cond=$90&$91;
 if($or_cond){label=16;break;}else{label=17;break;}
 case 16: 
 var $93=($89)+((6.283185307179586));
 var $a2_0=$93;label=19;break;
 case 17: 
 var $95=$79<0;
 var $96=$89>$88;
 var $or_cond70=$95&$96;
 if($or_cond70){label=18;break;}else{var $a2_0=$89;label=19;break;}
 case 18: 
 var $98=($89)+((-6.283185307179586));
 var $a2_0=$98;label=19;break;
 case 19: 
 var $a2_0;
 var $100=HEAP32[(($1)>>2)];
 var $101=HEAP32[(($3)>>2)];
 var $102=(($101+((($100)*(12))&-1))|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+($69<<4))|0);
 __ZN10ClipperLib8BuildArcERKNS_8IntPointEddd($arc,$104,$88,$a2_0,$79);
 var $105=(($arc+4)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($arc)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=$108;
 var $110=($106|0)==($108|0);
 if($110){var $_lcssa87=$106;var $_lcssa91=$106;var $_lcssa93=$109;label=26;break;}else{var $m_095=0;var $111=$108;label=20;break;}
 case 20: 
 var $111;
 var $m_095;
 var $112=(($111+($m_095<<4))|0);
 (function() { try { __THREW__ = 0; return __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=22;break; }
 case 21: 
 var $114=((($m_095)+(1))|0);
 var $115=HEAP32[(($105)>>2)];
 var $116=HEAP32[(($107)>>2)];
 var $117=$115;
 var $118=$116;
 var $119=((($117)-($118))|0);
 var $120=$119>>4;
 var $121=($114>>>0)<($120>>>0);
 if($121){var $m_095=$114;var $111=$116;label=20;break;}else{var $_lcssa87=$115;var $_lcssa91=$116;var $_lcssa93=$118;label=26;break;}
 case 22: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1); var $123$1 = tempRet0;
 var $124=HEAP32[(($107)>>2)];
 var $125=$124;
 var $126=($124|0)==0;
 if($126){label=32;break;}else{label=23;break;}
 case 23: 
 var $127=HEAP32[(($105)>>2)];
 var $128=($124|0)==($127|0);
 if($128){label=25;break;}else{label=24;break;}
 case 24: 
 var $scevgep_i_i_i76=((($127)-(16))|0);
 var $scevgep28_i_i_i77=$scevgep_i_i_i76;
 var $129=(((-$125))|0);
 var $uglygep_i_i_i78=(($scevgep28_i_i_i77+$129)|0);
 var $uglygep29_i_i_i79=$uglygep_i_i_i78;
 var $130=$uglygep29_i_i_i79>>>4;
 var $131=$130^-1;
 var $scevgep30_i_i_i80=(($127+($131<<4))|0);
 HEAP32[(($105)>>2)]=$scevgep30_i_i_i80;
 label=25;break;
 case 25: 
 var $132=$124;
 __ZdlPv($132);
 label=32;break;
 case 26: 
 var $_lcssa93;
 var $_lcssa91;
 var $_lcssa87;
 var $133=($_lcssa91|0)==0;
 if($133){label=31;break;}else{label=27;break;}
 case 27: 
 var $134=($_lcssa91|0)==($_lcssa87|0);
 if($134){label=29;break;}else{label=28;break;}
 case 28: 
 var $scevgep_i_i_i=((($_lcssa87)-(16))|0);
 var $scevgep28_i_i_i=$scevgep_i_i_i;
 var $135=(((-$_lcssa93))|0);
 var $uglygep_i_i_i=(($scevgep28_i_i_i+$135)|0);
 var $uglygep29_i_i_i=$uglygep_i_i_i;
 var $136=$uglygep29_i_i_i>>>4;
 var $137=$136^-1;
 var $scevgep30_i_i_i=(($_lcssa87+($137<<4))|0);
 HEAP32[(($105)>>2)]=$scevgep30_i_i_i;
 label=29;break;
 case 29: 
 var $138=$_lcssa91;
 __ZdlPv($138);
 label=31;break;
 case 30: 
 var $140=HEAP32[(($1)>>2)];
 var $141=HEAP32[(($3)>>2)];
 var $142=(($141+((($140)*(12))&-1))|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($143+($69<<4))|0);
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$144);
 label=31;break;
 case 31: 
 __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt2);
 STACKTOP=sp;return;
 case 32: 
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib17PolyOffsetBuilder8AddPointERKNS_8IntPointE($this,$pt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>4;
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=$14>>4;
 var $16=($10|0)==($15|0);
 if($16){label=2;break;}else{label=7;break;}
 case 2: 
 var $18=((($10)+(128))|0);
 var $19=($10>>>0)<4294967168;
 if($19){label=3;break;}else{label=7;break;}
 case 3: 
 var $21=($18|0)==0;
 if($21){var $26=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=$18<<4;
 var $24=__Znwj($23);
 var $25=$24;
 var $26=$25;label=5;break;
 case 5: 
 var $26;
 var $27=(($26+($10<<4))|0);
 var $28=(($26+($18<<4))|0);
 var $29=$26;
 var $30=$6;
 assert($9 % 1 === 0);(_memcpy($29, $30, $9)|0);
 HEAP32[(($5)>>2)]=$26;
 HEAP32[(($3)>>2)]=$27;
 HEAP32[(($11)>>2)]=$28;
 var $31=($6|0)==0;
 if($31){label=7;break;}else{label=6;break;}
 case 6: 
 __ZdlPv($30);
 label=7;break;
 case 7: 
 var $33=HEAP32[(($1)>>2)];
 var $34=(($33+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($33+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=11;break;}else{label=8;break;}
 case 8: 
 var $40=($35|0)==0;
 if($40){var $44=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $42=$35;
 var $43=$pt;
 assert(16 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];HEAP32[((($42)+(12))>>2)]=HEAP32[((($43)+(12))>>2)];
 var $_pre=HEAP32[(($34)>>2)];
 var $44=$_pre;label=10;break;
 case 10: 
 var $44;
 var $45=(($44+16)|0);
 HEAP32[(($34)>>2)]=$45;
 label=12;break;
 case 11: 
 __ZNSt3__16vectorIN10ClipperLib8IntPointENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($33,$pt);
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIN10ClipperLib11DoublePointENS_9allocatorIS2_EEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>4;
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $14=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$10;
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0; HEAP32[((($13)+(12))>>2)]=0;
 var $_pre8_i=HEAP32[(($3)>>2)];
 var $14=$_pre8_i;label=4;break;
 case 4: 
 var $14;
 var $15=(($14+16)|0);
 HEAP32[(($3)>>2)]=$15;
 var $16=((($_0_i)-(1))|0);
 var $17=($16|0)==0;
 if($17){label=17;break;}else{var $_0_i=$16;var $10=$15;label=2;break;}
 case 5: 
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=$22>>4;
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>268435455;
 if($25){label=6;break;}else{var $30=$2;var $29=$20;label=7;break;}
 case 6: 
 var $27=$this;
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($27);
 var $_pre=HEAP32[(($1)>>2)];
 var $_pre48=HEAP32[(($19)>>2)];
 var $30=$_pre;var $29=$_pre48;label=7;break;
 case 7: 
 var $29;
 var $30;
 var $31=$30;
 var $32=$29;
 var $33=((($31)-($32))|0);
 var $34=$33>>4;
 var $35=($34>>>0)>134217726;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=HEAP32[(($3)>>2)];
 var $37=$36;
 var $38=((($37)-($32))|0);
 var $39=$38>>4;
 var $_049=268435455;var $48=$39;label=10;break;
 case 9: 
 var $40=$33>>3;
 var $41=($40>>>0)<($24>>>0);
 var $_sroa_speculated=$41?$24:$40;
 var $42=HEAP32[(($3)>>2)];
 var $43=$42;
 var $44=((($43)-($32))|0);
 var $45=$44>>4;
 var $46=($_sroa_speculated|0)==0;
 if($46){var $53=0;var $_050=0;var $52=$45;label=11;break;}else{var $_049=$_sroa_speculated;var $48=$45;label=10;break;}
 case 10: 
 var $48;
 var $_049;
 var $49=$_049<<4;
 var $50=__Znwj($49);
 var $51=$50;
 var $53=$51;var $_050=$_049;var $52=$48;label=11;break;
 case 11: 
 var $52;
 var $_050;
 var $53;
 var $54=(($53+($52<<4))|0);
 var $_0_i39=$__n;var $56=$54;label=12;break;
 case 12: 
 var $56;
 var $_0_i39;
 var $57=($56|0)==0;
 if($57){var $60=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $59=$56;
 HEAP32[(($59)>>2)]=0; HEAP32[((($59)+(4))>>2)]=0; HEAP32[((($59)+(8))>>2)]=0; HEAP32[((($59)+(12))>>2)]=0;
 var $60=$56;label=14;break;
 case 14: 
 var $60;
 var $61=(($60+16)|0);
 var $62=((($_0_i39)-(1))|0);
 var $63=($62|0)==0;
 if($63){label=15;break;}else{var $_0_i39=$62;var $56=$61;label=12;break;}
 case 15: 
 var $64=(($53+($_050<<4))|0);
 var $65=HEAP32[(($19)>>2)];
 var $66=HEAP32[(($3)>>2)];
 var $67=$66;
 var $68=$65;
 var $69=((($67)-($68))|0);
 var $70=$69>>4;
 var $_sum=((($52)-($70))|0);
 var $71=(($53+($_sum<<4))|0);
 var $72=$71;
 var $73=$65;
 assert($69 % 1 === 0);(_memcpy($72, $73, $69)|0);
 HEAP32[(($19)>>2)]=$71;
 HEAP32[(($3)>>2)]=$61;
 HEAP32[(($1)>>2)]=$64;
 var $74=($65|0)==0;
 if($74){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($73);
 label=17;break;
 case 17: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10ClipperLib16clipperExceptionD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=9408;
 var $2=(($this+4)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$0;
 ___cxa_call_unexpected($5);
 throw "Reached an unreachable!";
 case 3: 
 var $6=$this;
 __ZdlPv($6);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10ClipperLib16clipperException4whatEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=$1;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$1;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base4InitC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(24);
 var $5=HEAP32[((_stdin)>>2)];
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(17312,$5,17440);
 HEAP32[((18304)>>2)]=8620;
 HEAP32[((18312)>>2)]=8640;
 HEAP32[((18308)>>2)]=0;
 var $6=HEAP32[((8608)>>2)];
 var $7=((18304+$6)|0);
 var $8=$7;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($8,17312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(18312);
 ___resumeException($10$0)
 case 3: 
 var $_sum=((($6)+(72))|0);
 var $11=((18304+$_sum)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=0;
 var $_sum91=((($6)+(76))|0);
 var $13=((18304+$_sum91)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=-1;
 var $15=HEAP32[((_stdout)>>2)];
 var $16=$4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(17216);
 HEAP32[((17216)>>2)]=8768;
 HEAP32[((17248)>>2)]=$15;
 __ZNSt3__16localeC2ERKS0_($4,17220);
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($4,17640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 __ZNSt3__16localeD2Ev($4);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(17216);
 ___resumeException($19$0)
 case 5: 
 var $20=$17;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[((17252)>>2)]=$20;
 HEAP32[((17256)>>2)]=17448;
 var $21=$17;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=FUNCTION_TABLE[$24]($20);
 var $26=($25&1);
 HEAP8[(17260)]=$26;
 HEAP32[((18040)>>2)]=8524;
 HEAP32[((18044)>>2)]=8544;
 var $27=HEAP32[((8512)>>2)];
 var $28=((18040+$27)|0);
 var $29=$28;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($29,17216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(18044);
 ___resumeException($31$0)
 case 7: 
 var $_sum92=((($27)+(72))|0);
 var $32=((18040+$_sum92)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=0;
 var $_sum93=((($27)+(76))|0);
 var $34=((18040+$_sum93)|0);
 var $35=$34;
 HEAP32[(($35)>>2)]=-1;
 var $36=HEAP32[((_stderr)>>2)];
 var $37=$3;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(17264);
 HEAP32[((17264)>>2)]=8768;
 HEAP32[((17296)>>2)]=$36;
 __ZNSt3__16localeC2ERKS0_($3,17268);
 var $38=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($3,17640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 __ZNSt3__16localeD2Ev($3);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(17264);
 ___resumeException($40$0)
 case 9: 
 var $41=$38;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((17300)>>2)]=$41;
 HEAP32[((17304)>>2)]=17456;
 var $42=$38;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+28)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($41);
 var $47=($46&1);
 HEAP8[(17308)]=$47;
 HEAP32[((18216)>>2)]=8524;
 HEAP32[((18220)>>2)]=8544;
 var $48=((18216+$27)|0);
 var $49=$48;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($49,17264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(18220);
 ___resumeException($51$0)
 case 11: 
 var $52=((18216+$_sum92)|0);
 var $53=$52;
 HEAP32[(($53)>>2)]=0;
 var $54=((18216+$_sum93)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=-1;
 var $56=HEAP32[((18216)>>2)];
 var $57=((($56)-(12))|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $_sum96=((($59)+(24))|0);
 var $60=((18216+$_sum96)|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 HEAP32[((18128)>>2)]=8524;
 HEAP32[((18132)>>2)]=8544;
 var $63=((18128+$27)|0);
 var $64=$63;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($64,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(18132);
 ___resumeException($66$0)
 case 13: 
 var $67=((18128+$_sum92)|0);
 var $68=$67;
 HEAP32[(($68)>>2)]=0;
 var $69=((18128+$_sum93)|0);
 var $70=$69;
 HEAP32[(($70)>>2)]=-1;
 var $71=HEAP32[((18304)>>2)];
 var $72=((($71)-(12))|0);
 var $73=$72;
 var $74=HEAP32[(($73)>>2)];
 var $_sum99=((($74)+(72))|0);
 var $75=((18304+$_sum99)|0);
 var $76=$75;
 HEAP32[(($76)>>2)]=18040;
 var $77=HEAP32[((18216)>>2)];
 var $78=((($77)-(12))|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $_sum100=((($80)+(4))|0);
 var $81=((18216+$_sum100)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=$83|8192;
 HEAP32[(($82)>>2)]=$84;
 var $85=HEAP32[((18216)>>2)];
 var $86=((($85)-(12))|0);
 var $87=$86;
 var $88=HEAP32[(($87)>>2)];
 var $_sum101=((($88)+(72))|0);
 var $89=((18216+$_sum101)|0);
 var $90=$89;
 HEAP32[(($90)>>2)]=18040;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(17160,$5,17464);
 HEAP32[((17952)>>2)]=8572;
 HEAP32[((17960)>>2)]=8592;
 HEAP32[((17956)>>2)]=0;
 var $91=HEAP32[((8560)>>2)];
 var $92=((17952+$91)|0);
 var $93=$92;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($93,17160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $95$0 = ___cxa_find_matching_catch(-1, -1); var $95$1 = tempRet0;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(17960);
 ___resumeException($95$0)
 case 15: 
 var $_sum102=((($91)+(72))|0);
 var $96=((17952+$_sum102)|0);
 var $97=$96;
 HEAP32[(($97)>>2)]=0;
 var $_sum103=((($91)+(76))|0);
 var $98=((17952+$_sum103)|0);
 var $99=$98;
 HEAP32[(($99)>>2)]=-1;
 var $100=$2;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(17064);
 HEAP32[((17064)>>2)]=8696;
 HEAP32[((17096)>>2)]=$15;
 __ZNSt3__16localeC2ERKS0_($2,17068);
 var $101=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,17632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 __ZNSt3__16localeD2Ev($2);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(17064);
 ___resumeException($103$0)
 case 17: 
 var $104=$101;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((17100)>>2)]=$104;
 HEAP32[((17104)>>2)]=17472;
 var $105=$101;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+28)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($104);
 var $110=($109&1);
 HEAP8[(17108)]=$110;
 HEAP32[((17672)>>2)]=8476;
 HEAP32[((17676)>>2)]=8496;
 var $111=HEAP32[((8464)>>2)];
 var $112=((17672+$111)|0);
 var $113=$112;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($113,17064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $115$0 = ___cxa_find_matching_catch(-1, -1); var $115$1 = tempRet0;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(17676);
 ___resumeException($115$0)
 case 19: 
 var $_sum104=((($111)+(72))|0);
 var $116=((17672+$_sum104)|0);
 var $117=$116;
 HEAP32[(($117)>>2)]=0;
 var $_sum105=((($111)+(76))|0);
 var $118=((17672+$_sum105)|0);
 var $119=$118;
 HEAP32[(($119)>>2)]=-1;
 var $120=$1;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(17112);
 HEAP32[((17112)>>2)]=8696;
 HEAP32[((17144)>>2)]=$36;
 __ZNSt3__16localeC2ERKS0_($1,17116);
 var $121=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,17632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1); var $123$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(17112);
 ___resumeException($123$0)
 case 21: 
 var $124=$121;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((17148)>>2)]=$124;
 HEAP32[((17152)>>2)]=17480;
 var $125=$121;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+28)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($124);
 var $130=($129&1);
 HEAP8[(17156)]=$130;
 HEAP32[((17848)>>2)]=8476;
 HEAP32[((17852)>>2)]=8496;
 var $131=((17848+$111)|0);
 var $132=$131;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($132,17112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(17852);
 ___resumeException($134$0)
 case 23: 
 var $135=((17848+$_sum104)|0);
 var $136=$135;
 HEAP32[(($136)>>2)]=0;
 var $137=((17848+$_sum105)|0);
 var $138=$137;
 HEAP32[(($138)>>2)]=-1;
 var $139=HEAP32[((17848)>>2)];
 var $140=((($139)-(12))|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $_sum108=((($142)+(24))|0);
 var $143=((17848+$_sum108)|0);
 var $144=$143;
 var $145=HEAP32[(($144)>>2)];
 HEAP32[((17760)>>2)]=8476;
 HEAP32[((17764)>>2)]=8496;
 var $146=((17760+$111)|0);
 var $147=$146;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($147,$145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(17764);
 ___resumeException($149$0)
 case 25: 
 var $150=((17760+$_sum104)|0);
 var $151=$150;
 HEAP32[(($151)>>2)]=0;
 var $152=((17760+$_sum105)|0);
 var $153=$152;
 HEAP32[(($153)>>2)]=-1;
 var $154=HEAP32[((17952)>>2)];
 var $155=((($154)-(12))|0);
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $_sum111=((($157)+(72))|0);
 var $158=((17952+$_sum111)|0);
 var $159=$158;
 HEAP32[(($159)>>2)]=17672;
 var $160=HEAP32[((17848)>>2)];
 var $161=((($160)-(12))|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $_sum112=((($163)+(4))|0);
 var $164=((17848+$_sum112)|0);
 var $165=$164;
 var $166=HEAP32[(($165)>>2)];
 var $167=$166|8192;
 HEAP32[(($165)>>2)]=$167;
 var $168=HEAP32[((17848)>>2)];
 var $169=((($168)-(12))|0);
 var $170=$169;
 var $171=HEAP32[(($170)>>2)];
 var $_sum113=((($171)+(72))|0);
 var $172=((17848+$_sum113)|0);
 var $173=$172;
 HEAP32[(($173)>>2)]=17672;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(18040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(18128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(17672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(17760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17632);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=$__1buf;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+4)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$pbase_0;
 var $35=HEAP32[(($20)>>2)];
 var $36=_fwrite($34,1,1,$35);
 var $37=($36|0)==1;
 if($37){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $39=($28|0)==1;
 var $40=($28>>>0)<2;
 if($40){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $42=HEAP32[(($__extbe)>>2)];
 var $43=$42;
 var $44=((($43)-($19))|0);
 var $45=HEAP32[(($20)>>2)];
 var $46=_fwrite($14,1,$44,$45);
 var $47=($46|0)==($44|0);
 if($47){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $49=HEAP32[(($__e)>>2)];
 var $_pbase_0=$39?$49:$pbase_0;
 if($39){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $50=$1?0:$__c;
 var $_0=$50;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($2);
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=9096;
 var $4=(($this+32)|0);
 HEAP32[(($4)>>2)]=$__fp;
 var $5=(($this+40)|0);
 HEAP32[(($5)>>2)]=$__st;
 var $6=(($this+48)|0);
 HEAP32[(($6)>>2)]=-1;
 var $7=(($this+52)|0);
 HEAP8[($7)]=0;
 var $8=(($this+4)|0);
 __ZNSt3__16localeC2ERKS0_($1,$8);
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,17632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $10=$9;
 var $11=(($this+36)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($10);
 var $17=(($this+44)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=HEAP32[(($11)>>2)];
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+28)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$22]($18);
 var $24=(($this+53)|0);
 var $25=($23&1);
 HEAP8[($24)]=$25;
 var $26=HEAP32[(($17)>>2)];
 var $27=($26|0)>8;
 if($27){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($2);
 ___resumeException($30$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17632);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(352);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_019=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_019=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 HEAP32[(($__ci)>>2)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+4)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_019=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($13)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($21>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($32)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_019=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_019=$__c;label=11;break;
 case 11: 
 var $_019;
 STACKTOP=sp;return $_019;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=22;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $_sroa_speculated=$11?$10:1;
 var $12=($_sroa_speculated|0)>0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=(($this+32)|0);
 var $__i_044=0;label=6;break;
 case 6: 
 var $__i_044;
 var $15=HEAP32[(($13)>>2)];
 var $16=_fgetc($15);
 var $17=($16|0)==-1;
 if($17){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $19=(($16)&255);
 var $20=(($__extbuf+$__i_044)|0);
 HEAP8[($20)]=$19;
 var $21=((($__i_044)+(1))|0);
 var $22=($21|0)<($_sroa_speculated|0);
 if($22){var $__i_044=$21;label=6;break;}else{label=8;break;}
 case 8: 
 var $23=(($this+53)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($29)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[($41)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17640);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($__1buf,1,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+1)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=HEAP32[(($20)>>2)];
 var $35=_fwrite($pbase_0,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($28|0)==1;
 var $39=($28>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($19))|0);
 var $44=HEAP32[(($20)>>2)];
 var $45=_fwrite($14,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=$38?$48:$pbase_0;
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $49=$1?0:$__c;
 var $_0=$49;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($2);
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=9168;
 var $4=(($this+32)|0);
 HEAP32[(($4)>>2)]=$__fp;
 var $5=(($this+40)|0);
 HEAP32[(($5)>>2)]=$__st;
 var $6=(($this+48)|0);
 HEAP32[(($6)>>2)]=-1;
 var $7=(($this+52)|0);
 HEAP8[($7)]=0;
 var $8=(($this+4)|0);
 __ZNSt3__16localeC2ERKS0_($1,$8);
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($1,17640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $10=$9;
 var $11=(($this+36)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($10);
 var $17=(($this+44)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=HEAP32[(($11)>>2)];
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+28)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$22]($18);
 var $24=(($this+53)|0);
 var $25=($23&1);
 HEAP8[($24)]=$25;
 var $26=HEAP32[(($17)>>2)];
 var $27=($26|0)>8;
 if($27){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($1);
 STACKTOP=sp;return;
 case 5: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 __ZNSt3__16localeD2Ev($1);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($2);
 ___resumeException($30$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17640);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(352);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_019=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_019=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 var $16=(($15)&255);
 HEAP8[($__ci)]=$16;
 var $17=(($this+36)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($this+40)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($__ci+1)|0);
 var $22=(($__extbuf)|0);
 var $23=(($__extbuf+8)|0);
 var $24=$18;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($18,$20,$__ci,$21,$__inxt,$22,$23,$__enxt);
 if(($28|0)==2|($28|0)==1){ var $_019=-1;label=11;break;}else if(($28|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $30=HEAP32[(($13)>>2)];
 var $31=(($30)&255);
 HEAP8[($22)]=$31;
 var $32=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$32;
 label=7;break;
 case 7: 
 var $33=(($this+32)|0);
 label=8;break;
 case 8: 
 var $34=HEAP32[(($__enxt)>>2)];
 var $35=($34>>>0)>($22>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=((($34)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$37;
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=HEAP32[(($33)>>2)];
 var $41=_ungetc($39,$40);
 var $42=($41|0)==-1;
 if($42){var $_019=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_019=$__c;label=11;break;
 case 11: 
 var $_019;
 STACKTOP=sp;return $_019;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=23;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $_sroa_speculated=$11?$10:1;
 var $12=($_sroa_speculated|0)>0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=(($this+32)|0);
 var $__i_044=0;label=6;break;
 case 6: 
 var $__i_044;
 var $15=HEAP32[(($13)>>2)];
 var $16=_fgetc($15);
 var $17=($16|0)==-1;
 if($17){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $19=(($16)&255);
 var $20=(($__extbuf+$__i_044)|0);
 HEAP8[($20)]=$19;
 var $21=((($__i_044)+(1))|0);
 var $22=($21|0)<($_sroa_speculated|0);
 if($22){var $__i_044=$21;label=6;break;}else{label=8;break;}
 case 8: 
 var $23=(($this+53)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 HEAP8[($__1buf)]=$34;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_fgetc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[($29)];
 HEAP8[($__1buf)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[($40)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[($__1buf)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a244(){
 var label=0;
 __ZNSt3__18ios_base4InitC2Ev(0);
 var $1=_atexit((390),18392,___dso_handle);
 return;
}
function __ZNSt3__114__shared_countD2Ev($this){
 var label=0;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+1,tempValue);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_0=0;label=3;break;}
 case 2: 
 var $5=$this;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+8)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($this);
 var $_0=1;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorC2EPKc($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6656;
 var $2=(($this+4)|0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=_strlen($msg);
 var $5=((($4)+(1))|0);
 var $6=((($4)+(13))|0);
 var $7=__Znaj($6);
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$4;
 HEAP32[(($8)>>2)]=$4;
 var $11=(($7+12)|0);
 HEAP32[(($2)>>2)]=$11;
 var $12=(($7+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($5 % 1 === 0);(_memcpy($11, $msg, $5)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6656;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6656;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt11logic_error4whatEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6592;
 var $2=(($this+4)|0);
 var $3=($2|0)==0;
 if($3){label=6;break;}else{label=2;break;}
 case 2: 
 var $5=$msg;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($msg+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=5;break;
 case 4: 
 var $13=$msg;
 var $14=(($13+1)|0);
 var $15=$14;label=5;break;
 case 5: 
 var $15;
 var $16=_strlen($15);
 var $17=((($16)+(1))|0);
 var $18=((($16)+(13))|0);
 var $19=__Znaj($18);
 var $20=$19;
 var $21=(($19+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=$16;
 HEAP32[(($20)>>2)]=$16;
 var $23=(($19+12)|0);
 HEAP32[(($2)>>2)]=$23;
 var $24=(($19+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 assert($17 % 1 === 0);(_memcpy($23, $15, $17)|0);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6592;
 var $2=(($this+4)|0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=_strlen($msg);
 var $5=((($4)+(1))|0);
 var $6=((($4)+(13))|0);
 var $7=__Znaj($6);
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$4;
 HEAP32[(($8)>>2)]=$4;
 var $11=(($7+12)|0);
 HEAP32[(($2)>>2)]=$11;
 var $12=(($7+8)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 assert($5 % 1 === 0);(_memcpy($11, $msg, $5)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6592;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6592;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt13runtime_error4whatEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt12length_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6656;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($10);
 label=4;break;
 case 4: 
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114error_categoryC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8424;
 return;
}
function __ZNSt3__114error_categoryD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__112__do_message7messageEi($agg_result,$this,$ev){
 var label=0;
 var $1=_strerror($ev);
 var $2=_strlen($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,$1,$2);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$what_arg;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($ec)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=16;break;}else{label=2;break;}
 case 2: 
 var $7=HEAP8[($1)];
 var $8=($7&255);
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 var $12=(($what_arg+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $16=$13;label=5;break;
 case 4: 
 var $15=$8>>>1;
 var $16=$15;label=5;break;
 case 5: 
 var $16;
 var $17=($16|0)==0;
 if($17){var $21=$4;label=7;break;}else{label=6;break;}
 case 6: 
 var $19=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,4496);
 var $_pre=HEAP32[(($3)>>2)];
 var $21=$_pre;label=7;break;
 case 7: 
 var $21;
 var $22=(($ec+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+24)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($2,$23,$21);
 var $28=$2;
 var $29=HEAP8[($28)];
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($2+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $38=$34;label=10;break;
 case 9: 
 var $36=$2;
 var $37=(($36+1)|0);
 var $38=$37;label=10;break;
 case 10: 
 var $38;
 var $39=($29&255);
 var $40=$39&1;
 var $41=($40|0)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($2+4)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=13;break;
 case 12: 
 var $46=$39>>>1;
 var $47=$46;label=13;break;
 case 13: 
 var $47;
 var $48=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$38,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 label=16;break;
 case 15: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1); var $50$1 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 ___resumeException($50$0)
 case 16: 
 var $51=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=_strlen($what_arg);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,$what_arg,$3);
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$ec,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 var $5=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($5,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $7=(($this)|0);
 HEAP32[(($7)>>2)]=8664;
 var $8=(($this+8)|0);
 var $9=$ec;
 var $10=$8;
 var $ld$0$0=(($9)|0);
 var $11$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $11$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($10)|0);
 HEAP32[(($st$2$0)>>2)]=$11$0;
 var $st$3$1=(($10+4)|0);
 HEAP32[(($st$3$1)>>2)]=$11$1;
 STACKTOP=sp;return;
 case 4: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=$13$0;
 var $15=$13$1;
 var $_0=$15;var $_014=$14;label=6;break;
 case 5: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $18=$17$0;
 var $19=$17$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 var $_0=$19;var $_014=$18;label=6;break;
 case 6: 
 var $_014;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $21$0=$_014;
 var $21$1=0;
 var $22$0=$21$0;
 var $22$1=$_0;
 ___resumeException($22$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__112system_errorD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt13runtime_errorD2Ev($1);
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(17392,17368);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=14;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(17368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(17368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($flag)>>2)]=-1;
 var $15=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(17368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $17=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(17392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 9: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $20=$19$0;
 var $21=___cxa_begin_catch($20);
 var $22=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(17368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=0;
 var $24=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(17368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $26=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(17392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 13: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 14: 
 var $31;
 label=15;break;
 case 15: 
 return;
 case 16: 
 ___resumeException($29$0)
 case 17: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 18: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=$1;
 HEAP32[(($3)>>2)]=6624;
 ___cxa_throw($1,12776,(72));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=9;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 5: 
 var $15=($11>>>0)<11;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=$11<<1;
 var $18=(($17)&255);
 var $19=$this;
 var $20=$this;
 HEAP8[($20)]=$18;
 var $21=(($19+1)|0);
 var $__p_0_i_i=$21;label=8;break;
 case 7: 
 var $22=((($11)+(16))|0);
 var $23=$22&-16;
 var $24=__Znwj($23);
 var $25=(($this+8)|0);
 HEAP32[(($25)>>2)]=$24;
 var $26=$23|1;
 var $27=(($this)|0);
 HEAP32[(($27)>>2)]=$26;
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$11;
 var $__p_0_i_i=$24;label=8;break;
 case 8: 
 var $__p_0_i_i;
 assert($11 % 1 === 0);(_memcpy($__p_0_i_i, $9, $11)|0);
 var $29=(($__p_0_i_i+$11)|0);
 HEAP8[($29)]=0;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz|0)==-1;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 var $9=$this;
 HEAP8[($9)]=$7;
 var $10=(($8+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__sz;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $19=(($__p_0+$__sz)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==-1;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 var $9=$this;
 HEAP8[($9)]=$7;
 var $10=(($8+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__n)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__n;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n);
 var $19=(($__p_0+$__n)|0);
 HEAP8[($19)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 __ZdlPv($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){var $13=10;var $12=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9&-2;
 var $phitmp_i=((($10)-(1))|0);
 var $11=(($9)&255);
 var $13=$phitmp_i;var $12=$11;label=3;break;
 case 3: 
 var $12;
 var $13;
 var $14=($13>>>0)<($1>>>0);
 if($14){label=10;break;}else{label=4;break;}
 case 4: 
 var $16=$12&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=(($2+1)|0);
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 _memmove($23,$__s,$1,1,0);
 var $24=(($23+$1)|0);
 HEAP8[($24)]=0;
 var $25=HEAP8[($3)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($3)]=$32;
 label=14;break;
 case 10: 
 var $34=($12&255);
 var $35=$34&1;
 var $36=($35|0)==0;
 if($36){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $42=$39;label=13;break;
 case 12: 
 var $41=$34>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=((($1)-($13))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$43,$42,0,$42,$1,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12>>>0)<($__n>>>0);
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=((($__n)-($12))|0);
 var $16=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$15,$__c);
 label=9;break;
 case 6: 
 var $18=$3&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($this+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+$__n)|0);
 HEAP8[($23)]=0;
 var $24=(($this+4)|0);
 HEAP32[(($24)>>2)]=$__n;
 label=9;break;
 case 8: 
 var $26=(($1+1+$__n)|0);
 HEAP8[($26)]=0;
 var $27=$__n<<1;
 var $28=(($27)&255);
 HEAP8[($2)]=$28;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==0;
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=10;var $13=$5;label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=$15>>>1;
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 var $24=((($14)-($23))|0);
 var $25=($24>>>0)<($__n>>>0);
 if($25){label=8;break;}else{var $30=$13;label=9;break;}
 case 8: 
 var $27=((($__n)-($14))|0);
 var $28=((($27)+($23))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$14,$28,$23,$23,0,0);
 var $_pre=HEAP8[($4)];
 var $30=$_pre;label=9;break;
 case 9: 
 var $30;
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=(($this+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=12;break;
 case 11: 
 var $37=(($3+1)|0);
 var $38=$37;label=12;break;
 case 12: 
 var $38;
 var $39=(($38+$23)|0);
 _memset($39, $__c, $__n);
 var $40=((($23)+($__n))|0);
 var $41=HEAP8[($4)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($43){label=14;break;}else{label=13;break;}
 case 13: 
 var $45=(($this+4)|0);
 HEAP32[(($45)>>2)]=$40;
 label=15;break;
 case 14: 
 var $47=$40<<1;
 var $48=(($47)&255);
 HEAP8[($4)]=$48;
 label=15;break;
 case 15: 
 var $49=(($38+$40)|0);
 HEAP8[($49)]=0;
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg|0)==-1;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){var $15=10;var $14=$6;label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $phitmp=((($12)-(1))|0);
 var $13=(($11)&255);
 var $15=$phitmp;var $14=$13;label=5;break;
 case 5: 
 var $14;
 var $15;
 var $16=($14&255);
 var $17=$16&1;
 var $18=($17|0)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($this+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $24=$21;label=8;break;
 case 7: 
 var $23=$16>>>1;
 var $24=$23;label=8;break;
 case 8: 
 var $24;
 var $25=($24>>>0)>($__res_arg>>>0);
 var $_sroa_speculated=$25?$24:$__res_arg;
 var $26=($_sroa_speculated>>>0)<11;
 if($26){var $30=11;label=10;break;}else{label=9;break;}
 case 9: 
 var $28=((($_sroa_speculated)+(16))|0);
 var $29=$28&-16;
 var $30=$29;label=10;break;
 case 10: 
 var $30;
 var $31=((($30)-(1))|0);
 var $32=($31|0)==($15|0);
 if($32){label=29;break;}else{label=11;break;}
 case 11: 
 var $34=($31|0)==10;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=(($4+1)|0);
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $40=($31>>>0)>($15>>>0);
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $42=__Znwj($30);
 var $__new_data_0=$42;label=17;break;
 case 15: 
 var $44=(function() { try { __THREW__ = 0; return __Znwj($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$44;label=17;break; } else { label=16;break; }
 case 16: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1,0); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=___cxa_begin_catch($47);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0;
 var $49=$14&1;
 var $50=(($49<<24)>>24)==0;
 if($50){label=19;break;}else{label=18;break;}
 case 18: 
 var $52=(($this+8)|0);
 var $53=HEAP32[(($52)>>2)];
 var $56=$53;label=20;break;
 case 19: 
 var $55=(($4+1)|0);
 var $56=$55;label=20;break;
 case 20: 
 var $56;
 var $extract_t=(($49<<24)>>24)!=0;
 var $__new_data_1=$__new_data_0;var $__p_0=$56;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $58=($14&255);
 var $59=$58&1;
 var $60=($59|0)==0;
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $62=(($this+4)|0);
 var $63=HEAP32[(($62)>>2)];
 var $66=$63;label=24;break;
 case 23: 
 var $65=$58>>>1;
 var $66=$65;label=24;break;
 case 24: 
 var $66;
 var $67=((($66)+(1))|0);
 assert($67 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $67)|0);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 __ZdlPv($__p_0);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $71=$30|1;
 var $72=(($this)|0);
 HEAP32[(($72)>>2)]=$71;
 var $73=(($this+4)|0);
 HEAP32[(($73)>>2)]=$24;
 var $74=(($this+8)|0);
 HEAP32[(($74)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $76=$24<<1;
 var $77=(($76)&255);
 HEAP8[($5)]=$77;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s){
 var label=0;
 var $1=_strlen($__s);
 var $2=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$1);
 return $2;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($3&255);
 var $8=$7>>>1;
 var $__sz_0=$8;var $__cap_0=10;label=4;break;
 case 3: 
 var $10=(($this)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11&-2;
 var $13=((($12)-(1))|0);
 var $14=(($this+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $__sz_0=$15;var $__cap_0=$13;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $17=($__sz_0|0)==($__cap_0|0);
 if($17){label=5;break;}else{var $__is_short_0_off0_in_in=$3;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $19=HEAP8[($2)];
 var $__is_short_0_off0_in_in=$19;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $22=(($1+1)|0);
 var $23=$__sz_0<<1;
 var $24=((($23)+(2))|0);
 var $25=(($24)&255);
 HEAP8[($2)]=$25;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$22;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($__sz_0)+(1))|0);
 var $30=(($this+4)|0);
 HEAP32[(($30)>>2)]=$29;
 var $_pn=$28;var $__p_0_sum_pre_phi=$29;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[($__p_0)]=$__c;
 var $32=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[($32)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($11&255);
 var $14=$13&1;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=6;break;
 case 5: 
 var $20=$13>>>1;
 var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22=((($12)-($21))|0);
 var $23=($22>>>0)<($__n>>>0);
 if($23){label=15;break;}else{label=7;break;}
 case 7: 
 var $25=($__n|0)==0;
 if($25){label=16;break;}else{label=8;break;}
 case 8: 
 var $27=$11&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($this+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $34=$31;label=11;break;
 case 10: 
 var $33=(($1+1)|0);
 var $34=$33;label=11;break;
 case 11: 
 var $34;
 var $35=(($34+$21)|0);
 assert($__n % 1 === 0);(_memcpy($35, $__s, $__n)|0);
 var $36=((($21)+($__n))|0);
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($this+4)|0);
 HEAP32[(($41)>>2)]=$36;
 label=14;break;
 case 13: 
 var $43=$36<<1;
 var $44=(($43)&255);
 HEAP8[($2)]=$44;
 label=14;break;
 case 14: 
 var $45=(($34+$36)|0);
 HEAP8[($45)]=0;
 label=16;break;
 case 15: 
 var $47=((($__n)-($12))|0);
 var $48=((($47)+($21))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$48,$21,$21,0,$__n,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-3)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483631;
 if($16){label=7;break;}else{var $_sink=-2;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $_sroa_speculated=$19?$18:$17;
 var $20=($_sroa_speculated>>>0)<11;
 if($20){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($_sroa_speculated)+(16))|0);
 var $23=$22&-16;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=__Znwj($_sink);
 var $25=($__n_copy|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($24, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $28=($__n_add|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 var $30=(($24+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($30, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $32=((($__old_sz)-($__n_del))|0);
 var $33=($32|0)==($__n_copy|0);
 if($33){label=15;break;}else{label=14;break;}
 case 14: 
 var $35=((($32)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $36=(($24+$_sum)|0);
 var $_sum118=((($__n_del)+($__n_copy))|0);
 var $37=(($15+$_sum118)|0);
 assert($35 % 1 === 0);(_memcpy($36, $37, $35)|0);
 label=15;break;
 case 15: 
 var $39=($__old_cap|0)==10;
 if($39){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($15);
 label=17;break;
 case 17: 
 var $42=(($this+8)|0);
 HEAP32[(($42)>>2)]=$24;
 var $43=$_sink|1;
 var $44=(($this)|0);
 HEAP32[(($44)>>2)]=$43;
 var $45=((($32)+($__n_add))|0);
 var $46=(($this+4)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($24+$45)|0);
 HEAP8[($47)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-3)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483631;
 if($16){label=7;break;}else{var $_sink=-2;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $_sroa_speculated=$19?$18:$17;
 var $20=($_sroa_speculated>>>0)<11;
 if($20){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($_sroa_speculated)+(16))|0);
 var $23=$22&-16;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=__Znwj($_sink);
 var $25=($__n_copy|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($24, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $28=((($__old_sz)-($__n_del))|0);
 var $29=($28|0)==($__n_copy|0);
 if($29){label=13;break;}else{label=12;break;}
 case 12: 
 var $31=((($28)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $32=(($24+$_sum)|0);
 var $_sum96=((($__n_del)+($__n_copy))|0);
 var $33=(($15+$_sum96)|0);
 assert($31 % 1 === 0);(_memcpy($32, $33, $31)|0);
 label=13;break;
 case 13: 
 var $35=($__old_cap|0)==10;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($15);
 label=15;break;
 case 15: 
 var $38=(($this+8)|0);
 HEAP32[(($38)>>2)]=$24;
 var $39=$_sink|1;
 var $40=(($this)|0);
 HEAP32[(($40)>>2)]=$39;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741822;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__sz)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemcpy($__p_0,$__s,$__sz);
 var $21=(($__p_0+($__sz<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741822;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__n)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=_wmemset($__p_0,$__c,$__n);
 var $21=(($__p_0+($__n<<2))|0);
 HEAP32[(($21)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZdlPv($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;
 var $1=_wcslen($__s);
 var $2=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$1);
 return $2;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 var $14=$10&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=7;break;
 case 6: 
 var $20=(($this+4)|0);
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=_wmemmove($21,$__s,$__n);
 var $23=(($21+($__n<<2))|0);
 HEAP32[(($23)>>2)]=0;
 var $24=HEAP8[($1)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[($1)]=$31;
 label=14;break;
 case 10: 
 var $33=($10&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($this+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=13;break;
 case 12: 
 var $40=$33>>>1;
 var $41=$40;label=13;break;
 case 13: 
 var $41;
 var $42=((($__n)-($11))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$11,$42,$41,0,$41,$__n,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__res_arg>>>0)>1073741822;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=1;var $13=$5;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=5;break;
 case 5: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=8;break;
 case 7: 
 var $22=$15>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=($23>>>0)>($__res_arg>>>0);
 var $_sroa_speculated=$24?$23:$__res_arg;
 var $25=($_sroa_speculated>>>0)<2;
 if($25){var $29=2;label=10;break;}else{label=9;break;}
 case 9: 
 var $27=((($_sroa_speculated)+(4))|0);
 var $28=$27&-4;
 var $29=$28;label=10;break;
 case 10: 
 var $29;
 var $30=((($29)-(1))|0);
 var $31=($30|0)==($14|0);
 if($31){label=29;break;}else{label=11;break;}
 case 11: 
 var $33=($30|0)==1;
 if($33){label=12;break;}else{label=13;break;}
 case 12: 
 var $35=(($this+4)|0);
 var $36=$35;
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $__new_data_1_in=$36;var $__p_0=$38;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $40=($30>>>0)>($14>>>0);
 var $41=$29<<2;
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=__Znwj($41);
 var $__new_data_0_in=$43;label=17;break;
 case 15: 
 var $45=(function() { try { __THREW__ = 0; return __Znwj($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0_in=$45;label=17;break; } else { label=16;break; }
 case 16: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $49=___cxa_begin_catch($48);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0_in;
 var $50=$13&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=(($this+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $57=$54;label=20;break;
 case 19: 
 var $56=(($this+4)|0);
 var $57=$56;label=20;break;
 case 20: 
 var $57;
 var $extract_t=(($50<<24)>>24)!=0;
 var $__new_data_1_in=$__new_data_0_in;var $__p_0=$57;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1_in;
 var $__new_data_1=$__new_data_1_in;
 var $59=($13&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=23;break;}else{label=22;break;}
 case 22: 
 var $63=(($this+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=24;break;
 case 23: 
 var $66=$59>>>1;
 var $67=$66;label=24;break;
 case 24: 
 var $67;
 var $68=((($67)+(1))|0);
 var $69=_wmemcpy($__new_data_1,$__p_0,$68);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 var $71=$__p_0;
 __ZdlPv($71);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $74=$29|1;
 var $75=(($this)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=(($this+4)|0);
 HEAP32[(($76)>>2)]=$23;
 var $77=(($this+8)|0);
 HEAP32[(($77)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $79=$23<<1;
 var $80=(($79)&255);
 HEAP8[($4)]=$80;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{var $__is_short_0_off0_in_in=$2;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[($1)];
 var $__is_short_0_off0_in_in=$18;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=(($this+4)|0);
 var $22=$__sz_0<<1;
 var $23=((($22)+(2))|0);
 var $24=(($23)&255);
 HEAP8[($1)]=$24;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$21;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $26=(($this+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($__sz_0)+(1))|0);
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$28;
 var $_pn=$27;var $__p_0_sum_pre_phi=$28;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $31=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($31)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741821)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870895;
 if($15){label=7;break;}else{var $_sink=1073741822;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $_sroa_speculated=$18?$17:$16;
 var $19=($_sroa_speculated>>>0)<2;
 if($19){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $21=((($_sroa_speculated)+(4))|0);
 var $22=$21&-4;
 var $_sink=$22;label=9;break;
 case 9: 
 var $_sink;
 var $23=$_sink<<2;
 var $24=__Znwj($23);
 var $25=$24;
 var $26=($__n_copy|0)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=_wmemcpy($25,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $30=($__n_add|0)==0;
 if($30){label=13;break;}else{label=12;break;}
 case 12: 
 var $32=(($25+($__n_copy<<2))|0);
 var $33=_wmemcpy($32,$__p_new_stuff,$__n_add);
 label=13;break;
 case 13: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=15;break;}else{label=14;break;}
 case 14: 
 var $38=((($35)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $39=(($25+($_sum<<2))|0);
 var $_sum118=((($__n_del)+($__n_copy))|0);
 var $40=(($14+($_sum118<<2))|0);
 var $41=_wmemcpy($39,$40,$38);
 label=15;break;
 case 15: 
 var $43=($__old_cap|0)==1;
 if($43){label=17;break;}else{label=16;break;}
 case 16: 
 var $45=$14;
 __ZdlPv($45);
 label=17;break;
 case 17: 
 var $47=(($this+8)|0);
 HEAP32[(($47)>>2)]=$25;
 var $48=$_sink|1;
 var $49=(($this)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=((($35)+($__n_add))|0);
 var $51=(($this+4)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($25+($50<<2))|0);
 HEAP32[(($52)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741821)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870895;
 if($15){label=7;break;}else{var $_sink=1073741822;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $_sroa_speculated=$18?$17:$16;
 var $19=($_sroa_speculated>>>0)<2;
 if($19){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $21=((($_sroa_speculated)+(4))|0);
 var $22=$21&-4;
 var $_sink=$22;label=9;break;
 case 9: 
 var $_sink;
 var $23=$_sink<<2;
 var $24=__Znwj($23);
 var $25=$24;
 var $26=($__n_copy|0)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=_wmemcpy($25,$14,$__n_copy);
 label=11;break;
 case 11: 
 var $30=((($__old_sz)-($__n_del))|0);
 var $31=($30|0)==($__n_copy|0);
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=((($30)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $34=(($25+($_sum<<2))|0);
 var $_sum96=((($__n_del)+($__n_copy))|0);
 var $35=(($14+($_sum96<<2))|0);
 var $36=_wmemcpy($34,$35,$33);
 label=13;break;
 case 13: 
 var $38=($__old_cap|0)==1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $40=$14;
 __ZdlPv($40);
 label=15;break;
 case 15: 
 var $42=(($this+8)|0);
 HEAP32[(($42)>>2)]=$25;
 var $43=$_sink|1;
 var $44=(($this)|0);
 HEAP32[(($44)>>2)]=$43;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+24)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+16)|0);
 HEAP32[(($6)>>2)]=$state;
 label=4;break;
 case 3: 
 var $8=$state|1;
 var $9=(($this+16)|0);
 HEAP32[(($9)>>2)]=$8;
 label=4;break;
 case 4: 
 var $11=($4&1);
 var $12=$11|$state;
 var $13=(($this+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12&$14;
 var $16=($15|0)==0;
 if($16){label=11;break;}else{label=5;break;}
 case 5: 
 var $18=___cxa_allocate_exception(16);
 var $19=HEAP8[(18512)];
 var $20=(($19<<24)>>24)==0;
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=___cxa_guard_acquire(18512);
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 __ZNSt3__114error_categoryC2Ev(16512);
 HEAP32[((16512)>>2)]=8120;
 var $25=_atexit((186),16512,___dso_handle);
 label=8;break;
 case 8: 
 var $26=$1;
 var $tmpcast_i=$1;
 var $27=$18;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $$etemp$4$0=0;
 var $$etemp$4$1=-1;
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;
 var $$etemp$7=16512;
 var $$etemp$5$0=$$etemp$7;
 var $$etemp$5$1=0;
 var $$etemp$3$0=_bitshift64Shl($$etemp$5$0,$$etemp$5$1,$$etemp$6$0);var $$etemp$3$1=tempRet0;
 var $$etemp$1$0=$$etemp$3$0&$$etemp$4$0;
 var $$etemp$1$1=$$etemp$3$1&$$etemp$4$1;
 var $$etemp$0$0=$$etemp$1$0|$$etemp$2$0;
 var $$etemp$0$1=$$etemp$1$1|$$etemp$2$1;
 var $st$8$0=(($1)|0);
 HEAP32[(($st$8$0)>>2)]=$$etemp$0$0;
 var $st$9$1=(($1+4)|0);
 HEAP32[(($st$9$1)>>2)]=$$etemp$0$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($27,$tmpcast_i,4592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $29=$18;
 HEAP32[(($29)>>2)]=7304;
 ___cxa_throw($18,13336,(64));
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___cxa_free_exception($18);
 ___resumeException($31$0)
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7280;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_05_i=$3;label=2;break;}
 case 2: 
 var $i_05_i;
 var $5=((($i_05_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_05_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=$13;
 __ZNSt3__16localeD2Ev($14);
 var $15=HEAP32[(($_pre)>>2)];
 var $16=$15;
 _free($16);
 var $17=HEAP32[(($_pre1)>>2)];
 var $18=$17;
 _free($18);
 var $19=(($this+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 _free($21);
 var $22=(($this+60)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 _free($24);
 return;
 case 5: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZNKSt3__18ios_base6getlocEv($agg_result,$this){
 var label=0;
 var $1=(($this+28)|0);
 var $2=$1;
 __ZNSt3__16localeC2ERKS0_($agg_result,$2);
 return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$sb;
 var $not_=($sb|0)==0;
 var $2=($not_&1);
 var $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=4098;
 var $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=6;
 var $8=(($this+32)|0);
 var $9=(($this+28)|0);
 var $10=($9|0)==0;
 var $11=$8;
 _memset($11, 0, 40);
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=$9;
 __ZNSt3__16localeC2Ev($13);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8352;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8352;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8352;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8352;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_08=$__s;var $__i_09=0;label=3;break;
 case 3: 
 var $__i_09;
 var $_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_09;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_08)]=$storemerge;
 var $21=((($__i_09)+(1))|0);
 var $22=(($_08+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_08=$22;var $__i_09=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_08=0;var $_09=$__s;label=3;break;
 case 3: 
 var $_09;
 var $__i_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_09)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_09)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_08;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_09+1)|0);
 var $22=((($__i_08)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_08=$22;var $_09=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8280;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 var $3=$this;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8280;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8280;
 var $2=(($this+4)|0);
 __ZNSt3__16localeD2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8280;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_08=$__s;var $__i_09=0;label=3;break;
 case 3: 
 var $__i_09;
 var $_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_09;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_08)>>2)]=$storemerge;
 var $19=((($__i_09)+(1))|0);
 var $20=(($_08+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_08=$20;var $__i_09=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_08=0;var $_09=$__s;label=3;break;
 case 3: 
 var $_09;
 var $__i_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_09)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_09)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_08;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_09+4)|0);
 var $21=((($__i_08)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_08=$21;var $_09=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum9_i=((($5)+(72))|0);
 var $19=(($6+$_sum9_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($12)]=1;
 var $26=HEAP32[(($1)>>2)];
 var $27=((($26)-(12))|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum14=((($29)+(24))|0);
 var $30=(($6+$_sum14)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 var $34=$32;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $39=($38|0)==-1;
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 var $41=HEAP32[(($1)>>2)];
 var $42=((($41)-(12))|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($6+$44)|0);
 var $46=$45;
 var $_sum15=((($44)+(16))|0);
 var $47=(($6+$_sum15)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 var $_0=$53;label=10;break;
 case 9: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$56;label=10;break;
 case 10: 
 var $_0;
 var $58=___cxa_begin_catch($_0);
 var $59=HEAP32[(($1)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum18=((($62)+(16))|0);
 var $63=(($6+$_sum18)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65|1;
 HEAP32[(($64)>>2)]=$66;
 var $_sum19=((($62)+(20))|0);
 var $67=(($6+$_sum19)|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&1;
 var $71=($70|0)==0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($75$0)
 case 18: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum9_i=((($5)+(72))|0);
 var $19=(($6+$_sum9_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($12)]=1;
 var $26=HEAP32[(($1)>>2)];
 var $27=((($26)-(12))|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum14=((($29)+(24))|0);
 var $30=(($6+$_sum14)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 var $34=$32;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $39=($38|0)==-1;
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 var $41=HEAP32[(($1)>>2)];
 var $42=((($41)-(12))|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($6+$44)|0);
 var $46=$45;
 var $_sum15=((($44)+(16))|0);
 var $47=(($6+$_sum15)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($46,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 var $_0=$53;label=10;break;
 case 9: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1,0); var $55$1 = tempRet0;
 var $56=$55$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$56;label=10;break;
 case 10: 
 var $_0;
 var $58=___cxa_begin_catch($_0);
 var $59=HEAP32[(($1)>>2)];
 var $60=((($59)-(12))|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $_sum18=((($62)+(16))|0);
 var $63=(($6+$_sum18)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65|1;
 HEAP32[(($64)>>2)]=$66;
 var $_sum19=((($62)+(20))|0);
 var $67=(($6+$_sum19)|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&1;
 var $71=($70|0)==0;
 if($71){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($75$0)
 case 18: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1,0); var $78$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum14=((($7)+(16))|0);
 var $14=(($8+$_sum14)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum15=((($7)+(4))|0);
 var $19=(($8+$_sum15)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum16=((($32)+(24))|0);
 var $34=(($33+$_sum16)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum17=((($50)+(16))|0);
 var $54=(($51+$_sum17)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum14=((($7)+(16))|0);
 var $14=(($8+$_sum14)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum15=((($7)+(4))|0);
 var $19=(($8+$_sum15)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum16=((($32)+(24))|0);
 var $34=(($33+$_sum16)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum17=((($50)+(16))|0);
 var $54=(($51+$_sum17)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;
 return 5160;
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($this)|0);
 __ZNKSt3__112__do_message7messageEi($agg_result,$3,$ev);
 label=4;break;
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,5568,35);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__112system_errorD2Ev($1);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;
 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_013_lcssa=$__lo1;label=6;break;}else{var $_01315=$__lo1;var $_01216=$__lo2;label=2;break;}
 case 2: 
 var $_01216;
 var $_01315;
 var $2=($_01315|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_01315)];
 var $5=HEAP8[($_01216)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_01315+1)|0);
 var $11=(($_01216+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_013_lcssa=$10;label=6;break;}else{var $_01315=$10;var $_01216=$11;label=2;break;}
 case 6: 
 var $_013_lcssa;
 var $13=($_013_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3|0)==-1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
 label=5;break;
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$agg_result;
 var $12=$agg_result;
 HEAP8[($12)]=$10;
 var $13=(($11+1)|0);
 var $__p_0_ph_i=$13;label=6;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=__Znwj($15);
 var $17=(($agg_result+8)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$15|1;
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($agg_result+4)|0);
 HEAP32[(($20)>>2)]=$3;
 var $__p_0_ph_i=$16;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $21=($__lo|0)==($__hi|0);
 if($21){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $22=(((-$1))|0);
 var $scevgep_i=(($__hi+$22)|0);
 var $__p_062_i=$__p_0_ph_i;var $_063_i=$__lo;label=8;break;
 case 8: 
 var $_063_i;
 var $__p_062_i;
 var $24=HEAP8[($_063_i)];
 HEAP8[($__p_062_i)]=$24;
 var $25=(($_063_i+1)|0);
 var $26=(($__p_062_i+1)|0);
 var $27=($25|0)==($__hi|0);
 if($27){label=9;break;}else{var $__p_062_i=$26;var $_063_i=$25;label=8;break;}
 case 9: 
 var $scevgep64_i=$scevgep_i;
 var $scevgep65_i=(($__p_0_ph_i+$scevgep64_i)|0);
 var $__p_0_lcssa_i=$scevgep65_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP8[($__p_0_lcssa_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_08=$__lo;var $__h_09=0;label=2;break;}
 case 2: 
 var $__h_09;
 var $__p_08;
 var $2=$__h_09<<4;
 var $3=HEAP8[($__p_08)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_08+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_08=$10;var $__h_09=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17collateIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_013_lcssa=$__lo1;label=6;break;}else{var $_01315=$__lo1;var $_01216=$__lo2;label=2;break;}
 case 2: 
 var $_01216;
 var $_01315;
 var $2=($_01315|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_01315)>>2)];
 var $5=HEAP32[(($_01216)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_01315+4)|0);
 var $11=(($_01216+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_013_lcssa=$10;label=6;break;}else{var $_01315=$10;var $_01216=$11;label=2;break;}
 case 6: 
 var $_013_lcssa;
 var $13=($_013_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741822;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($7);
 label=3;break;
 case 3: 
 var $9=($4>>>0)<2;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$3>>>1;
 var $12=(($11)&255);
 var $13=$agg_result;
 HEAP8[($13)]=$12;
 var $14=(($agg_result+4)|0);
 var $__p_0_ph_i=$14;label=6;break;
 case 5: 
 var $15=((($4)+(4))|0);
 var $16=$15&-4;
 var $17=$16<<2;
 var $18=__Znwj($17);
 var $19=$18;
 var $20=(($agg_result+8)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=$16|1;
 var $22=(($agg_result)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($agg_result+4)|0);
 HEAP32[(($23)>>2)]=$4;
 var $__p_0_ph_i=$19;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $24=($__lo|0)==($__hi|0);
 if($24){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($__hi)-(4))|0);
 var $scevgep64_i=$scevgep_i;
 var $25=(((-$1))|0);
 var $uglygep_i=(($scevgep64_i+$25)|0);
 var $uglygep65_i=$uglygep_i;
 var $26=$uglygep65_i>>>2;
 var $__p_062_i=$__p_0_ph_i;var $_063_i=$__lo;label=8;break;
 case 8: 
 var $_063_i;
 var $__p_062_i;
 var $28=HEAP32[(($_063_i)>>2)];
 HEAP32[(($__p_062_i)>>2)]=$28;
 var $29=(($_063_i+4)|0);
 var $30=(($__p_062_i+4)|0);
 var $31=($29|0)==($__hi|0);
 if($31){label=9;break;}else{var $__p_062_i=$30;var $_063_i=$29;label=8;break;}
 case 9: 
 var $32=((($26)+(1))|0);
 var $scevgep66_i=(($__p_0_ph_i+($32<<2))|0);
 var $__p_0_lcssa_i=$scevgep66_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_08=$__lo;var $__h_09=0;label=2;break;}
 case 2: 
 var $__h_09;
 var $__p_08;
 var $2=$__h_09<<4;
 var $3=HEAP32[(($__p_08)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_08+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_08=$9;var $__h_09=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i24=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i;
 var $34=HEAP32[((17944)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$33,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $37=HEAP32[((17948)>>2)];
 var $38=((($37)-(1))|0);
 var $39=(($32+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($32+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$40;
 var $44=$42;
 var $45=((($43)-($44))|0);
 var $46=$45>>2;
 var $47=($46>>>0)>($38>>>0);
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=(($42+($38<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)==0;
 if($50){label=11;break;}else{label=13;break;}
 case 11: 
 var $51=___cxa_allocate_exception(4);
 var $52=$51;
 __ZNSt8bad_castC2Ev($52);
 (function() { try { __THREW__ = 0; return ___cxa_throw($51,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $53=$49;
 var $54=HEAP32[(($31)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $57=(($5)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$__p_i_i_i24;
 var $60=HEAP32[((17560)>>2)];
 var $61=($60|0)==-1;
 if($61){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i25=(($__p_i_i_i24)|0);
 HEAP32[(($_sroa_016_0__idx_i_i25)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i26=(($__p_i_i_i24+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i26)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i27=(($__p_i_i_i24+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$59,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $63=HEAP32[((17564)>>2)];
 var $64=((($63)-(1))|0);
 var $65=(($58+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($58+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$66;
 var $70=$68;
 var $71=((($69)-($70))|0);
 var $72=$71>>2;
 var $73=($72>>>0)>($64>>>0);
 if($73){label=16;break;}else{label=17;break;}
 case 16: 
 var $74=(($68+($64<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==0;
 if($76){label=17;break;}else{label=19;break;}
 case 17: 
 var $77=___cxa_allocate_exception(4);
 var $78=$77;
 __ZNSt8bad_castC2Ev($78);
 (function() { try { __THREW__ = 0; return ___cxa_throw($77,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $79=$75;
 var $80=HEAP32[(($57)>>2)];
 var $81=(($80)|0);
 var $82=__ZNSt3__114__shared_count16__release_sharedEv($81);
 var $83=(($__names)|0);
 var $84=$75;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+24)|0);
 var $87=HEAP32[(($86)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($83,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_022=$83;label=25;break; }
 case 20: 
 var $88=(($__names+12)|0);
 var $89=HEAP32[(($84)>>2)];
 var $90=(($89+28)|0);
 var $91=HEAP32[(($90)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($88,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_022=$88;label=25;break; }
 case 21: 
 var $92=(($__e)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($6)|0);
 HEAP32[(($94)>>2)]=$93;
 var $95=(($__names+24)|0);
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$83,$95,$53,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $97=($96|0)==($83|0);
 var $98=($97&1);
 HEAP8[($__v)]=$98;
 var $99=(($__b)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($agg_result)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($102);
 var $103=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
 label=28;break;
 case 23: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP32[(($31)>>2)];
 var $109=(($108)|0);
 var $110=__ZNSt3__114__shared_count16__release_sharedEv($109);
 var $_0=$106;var $_021=$107;label=29;break;
 case 24: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $113=$112$0;
 var $114=$112$1;
 var $115=HEAP32[(($57)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $_0=$113;var $_021=$114;label=29;break;
 case 25: 
 var $_022;
 var $119$0 = ___cxa_find_matching_catch(-1, -1); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $122=($83|0)==($_022|0);
 if($122){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$_022;label=26;break;}
 case 26: 
 var $123;
 var $124=((($123)-(12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($124);
 var $125=($124|0)==($83|0);
 if($125){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$124;label=26;break;}
 case 27: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($128);
 var $129=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($129);
 var $130=$126$1;
 var $_0=$127;var $_021=$130;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_021;
 var $_0;
 var $132$0=$_0;
 var $132$1=0;
 var $133$0=$132$0;
 var $133$1=$_021;
 ___resumeException($133$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $266$1=$11$1;var $266$0=$11$0;label=104;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit253$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit253$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit253$1;var $lpad_phi$0=$lpad_nonloopexit253$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($__stat_hold_sroa_0_1|0)==0;
 if($12){var $266$1=$lpad_phi$1;var $266$0=$lpad_phi$0;label=104;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $266$1=$lpad_phi$1;var $266$0=$lpad_phi$0;label=104;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $14=($__kb|0)==($__ke|0);
 if($14){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_0263=$4;var $__n_does_match_0264=0;var $__st_0265=$__status_0;var $__ky_0266=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $15=(($__b)|0);
 var $16=(($__e)|0);
 var $17=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_0266;
 var $__st_0265;
 var $__n_does_match_0264;
 var $__n_might_match_0263;
 var $18=$__ky_0266;
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=14;break;}else{label=13;break;}
 case 13: 
 var $24=(($__ky_0266+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $28=$25;label=15;break;
 case 14: 
 var $27=$20>>>1;
 var $28=$27;label=15;break;
 case 15: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_0265)]=1;
 var $__n_does_match_1=$__n_does_match_0264;var $__n_might_match_1=$__n_might_match_0263;label=18;break;
 case 17: 
 HEAP8[($__st_0265)]=2;
 var $32=((($__n_might_match_0263)-(1))|0);
 var $33=((($__n_does_match_0264)+(1))|0);
 var $__n_does_match_1=$33;var $__n_might_match_1=$32;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $35=(($__ky_0266+12)|0);
 var $36=(($__st_0265+1)|0);
 var $37=($35|0)==($__ke|0);
 if($37){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_0263=$__n_might_match_1;var $__n_does_match_0264=$__n_does_match_1;var $__st_0265=$36;var $__ky_0266=$35;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){var $55=0;label=25;break;}else{label=20;break;}
 case 20: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=21;break;}else{var $55=$39;label=25;break;}
 case 21: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=6;break; }
 case 22: 
 var $53=($52|0)==-1;
 if($53){label=24;break;}else{label=23;break;}
 case 23: 
 var $_pre=HEAP32[(($15)>>2)];
 var $55=$_pre;label=25;break;
 case 24: 
 HEAP32[(($15)>>2)]=0;
 var $55=0;label=25;break;
 case 25: 
 var $55;
 var $56=($55|0)==0;
 var $57=HEAP32[(($16)>>2)];
 var $58=($57|0)==0;
 if($58){var $75=$55;var $74=0;label=31;break;}else{label=26;break;}
 case 26: 
 var $60=(($57+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($57+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61|0)==($63|0);
 if($64){label=27;break;}else{var $73=$57;label=30;break;}
 case 27: 
 var $66=$57;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=6;break; }
 case 28: 
 var $71=($70|0)==-1;
 if($71){label=29;break;}else{var $73=$57;label=30;break;}
 case 29: 
 HEAP32[(($16)>>2)]=0;
 var $73=0;label=30;break;
 case 30: 
 var $73;
 var $_pr=HEAP32[(($15)>>2)];
 var $75=$_pr;var $74=$73;label=31;break;
 case 31: 
 var $74;
 var $75;
 var $76=($74|0)==0;
 var $77=$56^$76;
 var $78=($__n_might_match_2|0)!=0;
 var $_=$77&$78;
 if($_){label=32;break;}else{label=81;break;}
 case 32: 
 var $80=(($75+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($75+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=33;break;}else{label=35;break;}
 case 33: 
 var $86=$75;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=6;break; }
 case 34: 
 var $extract_t=(($90)&255);
 var $_0206_off0=$extract_t;label=36;break;
 case 35: 
 var $92=HEAP8[($81)];
 var $_0206_off0=$92;label=36;break;
 case 36: 
 var $_0206_off0;
 if($__case_sensitive){var $__c_0=$_0206_off0;label=38;break;}else{label=37;break;}
 case 37: 
 var $94=HEAP32[(($17)>>2)];
 var $95=(($94+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,$_0206_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$97;label=38;break; } else { label=6;break; }
 case 38: 
 var $__c_0;
 if($14){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa279=$__n_might_match_2;label=80;break;}else{label=39;break;}
 case 39: 
 var $98=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_3233_us=$__n_might_match_2;var $__n_does_match_3234_us=$__n_does_match_2;var $__st_1235_us=$__status_0;var $__consume_0_off0237_us=0;var $__ky1_0238_us=$__kb;label=40;break;}else{var $__n_might_match_3233=$__n_might_match_2;var $__n_does_match_3234=$__n_does_match_2;var $__st_1235=$__status_0;var $__consume_0_off0237=0;var $__ky1_0238=$__kb;label=53;break;}
 case 40: 
 var $__ky1_0238_us;
 var $__consume_0_off0237_us;
 var $__st_1235_us;
 var $__n_does_match_3234_us;
 var $__n_might_match_3233_us;
 var $99=HEAP8[($__st_1235_us)];
 var $100=(($99<<24)>>24)==1;
 if($100){label=41;break;}else{var $__consume_1_off0_us=$__consume_0_off0237_us;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$__n_might_match_3233_us;label=51;break;}
 case 41: 
 var $102=$__ky1_0238_us;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=43;break;}else{label=42;break;}
 case 42: 
 var $107=(($__ky1_0238_us+8)|0);
 var $108=HEAP32[(($107)>>2)];
 var $112=$108;label=44;break;
 case 43: 
 var $110=$__ky1_0238_us;
 var $111=(($110+1)|0);
 var $112=$111;label=44;break;
 case 44: 
 var $112;
 var $113=(($112+$__indx_0)|0);
 var $114=HEAP8[($113)];
 var $115=(($__c_0<<24)>>24)==(($114<<24)>>24);
 if($115){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP8[($__st_1235_us)]=0;
 var $117=((($__n_might_match_3233_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off0237_us;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$117;label=51;break;
 case 46: 
 var $119=HEAP8[($102)];
 var $120=($119&255);
 var $121=$120&1;
 var $122=($121|0)==0;
 if($122){label=48;break;}else{label=47;break;}
 case 47: 
 var $124=(($__ky1_0238_us+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $128=$125;label=49;break;
 case 48: 
 var $127=$120>>>1;
 var $128=$127;label=49;break;
 case 49: 
 var $128;
 var $129=($128|0)==($98|0);
 if($129){label=50;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$__n_might_match_3233_us;label=51;break;}
 case 50: 
 HEAP8[($__st_1235_us)]=2;
 var $131=((($__n_might_match_3233_us)-(1))|0);
 var $132=((($__n_does_match_3234_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$132;var $__n_might_match_4_us=$131;label=51;break;
 case 51: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $134=(($__ky1_0238_us+12)|0);
 var $135=($134|0)==($__ke|0);
 if($135){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{label=52;break;}
 case 52: 
 var $136=(($__st_1235_us+1)|0);
 var $__n_might_match_3233_us=$__n_might_match_4_us;var $__n_does_match_3234_us=$__n_does_match_4_us;var $__st_1235_us=$136;var $__consume_0_off0237_us=$__consume_1_off0_us;var $__ky1_0238_us=$134;label=40;break;
 case 53: 
 var $__ky1_0238;
 var $__consume_0_off0237;
 var $__st_1235;
 var $__n_does_match_3234;
 var $__n_might_match_3233;
 var $137=HEAP8[($__st_1235)];
 var $138=(($137<<24)>>24)==1;
 if($138){label=54;break;}else{var $__consume_1_off0=$__consume_0_off0237;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$__n_might_match_3233;label=65;break;}
 case 54: 
 var $140=$__ky1_0238;
 var $141=HEAP8[($140)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=56;break;}else{label=55;break;}
 case 55: 
 var $145=(($__ky1_0238+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $151=$146;label=57;break;
 case 56: 
 var $148=$__ky1_0238;
 var $149=(($148+1)|0);
 var $151=$149;label=57;break;
 case 57: 
 var $151;
 var $152=(($151+$__indx_0)|0);
 var $153=HEAP8[($152)];
 var $154=HEAP32[(($17)>>2)];
 var $155=(($154+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($__ct,$153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=5;break; }
 case 58: 
 var $158=(($__c_0<<24)>>24)==(($157<<24)>>24);
 if($158){label=59;break;}else{label=64;break;}
 case 59: 
 var $160=HEAP8[($140)];
 var $161=($160&255);
 var $162=$161&1;
 var $163=($162|0)==0;
 if($163){label=61;break;}else{label=60;break;}
 case 60: 
 var $165=(($__ky1_0238+4)|0);
 var $166=HEAP32[(($165)>>2)];
 var $169=$166;label=62;break;
 case 61: 
 var $168=$161>>>1;
 var $169=$168;label=62;break;
 case 62: 
 var $169;
 var $170=($169|0)==($98|0);
 if($170){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$__n_might_match_3233;label=65;break;}
 case 63: 
 HEAP8[($__st_1235)]=2;
 var $172=((($__n_might_match_3233)-(1))|0);
 var $173=((($__n_does_match_3234)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$173;var $__n_might_match_4=$172;label=65;break;
 case 64: 
 HEAP8[($__st_1235)]=0;
 var $175=((($__n_might_match_3233)-(1))|0);
 var $__consume_1_off0=$__consume_0_off0237;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$175;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $177=(($__ky1_0238+12)|0);
 var $178=($177|0)==($__ke|0);
 if($178){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{label=66;break;}
 case 66: 
 var $179=(($__st_1235+1)|0);
 var $__n_might_match_3233=$__n_might_match_4;var $__n_does_match_3234=$__n_does_match_4;var $__st_1235=$179;var $__consume_0_off0237=$__consume_1_off0;var $__ky1_0238=$177;label=53;break;
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa279=$__n_might_match_3_lcssa;label=80;break;}
 case 68: 
 var $181=HEAP32[(($15)>>2)];
 var $182=(($181+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($181+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=69;break;}else{label=70;break;}
 case 69: 
 var $188=$181;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+40)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=6;break; }
 case 70: 
 var $194=(($183+1)|0);
 HEAP32[(($182)>>2)]=$194;
 label=71;break;
 case 71: 
 var $195=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($195>>>0)<2;
 var $brmerge=$_not|$14;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa279=$__n_might_match_3_lcssa;label=80;break;}else{label=72;break;}
 case 72: 
 var $196=((($__indx_0)+(1))|0);
 var $__n_does_match_5247=$__n_does_match_3_lcssa;var $__st_2248=$__status_0;var $__ky2_0249=$__kb;label=73;break;
 case 73: 
 var $__ky2_0249;
 var $__st_2248;
 var $__n_does_match_5247;
 var $198=HEAP8[($__st_2248)];
 var $199=(($198<<24)>>24)==2;
 if($199){label=74;break;}else{var $__n_does_match_6=$__n_does_match_5247;label=79;break;}
 case 74: 
 var $201=$__ky2_0249;
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 if($205){label=76;break;}else{label=75;break;}
 case 75: 
 var $207=(($__ky2_0249+4)|0);
 var $208=HEAP32[(($207)>>2)];
 var $211=$208;label=77;break;
 case 76: 
 var $210=$203>>>1;
 var $211=$210;label=77;break;
 case 77: 
 var $211;
 var $212=($211|0)==($196|0);
 if($212){var $__n_does_match_6=$__n_does_match_5247;label=79;break;}else{label=78;break;}
 case 78: 
 HEAP8[($__st_2248)]=0;
 var $214=((($__n_does_match_5247)-(1))|0);
 var $__n_does_match_6=$214;label=79;break;
 case 79: 
 var $__n_does_match_6;
 var $216=(($__ky2_0249+12)|0);
 var $217=(($__st_2248+1)|0);
 var $218=($216|0)==($__ke|0);
 if($218){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa279=$__n_might_match_3_lcssa;label=80;break;}else{var $__n_does_match_5247=$__n_does_match_6;var $__st_2248=$217;var $__ky2_0249=$216;label=73;break;}
 case 80: 
 var $__n_might_match_3_lcssa279;
 var $__n_does_match_7;
 var $219=((($__indx_0)+(1))|0);
 var $__indx_0=$219;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa279;label=19;break;
 case 81: 
 var $221=($75|0)==0;
 if($221){var $236=0;label=87;break;}else{label=82;break;}
 case 82: 
 var $223=(($75+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($75+16)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($224|0)==($226|0);
 if($227){label=83;break;}else{var $236=$75;label=87;break;}
 case 83: 
 var $229=$75;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+36)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$232]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=7;break; }
 case 84: 
 var $234=($233|0)==-1;
 if($234){label=86;break;}else{label=85;break;}
 case 85: 
 var $_pre278=HEAP32[(($15)>>2)];
 var $236=$_pre278;label=87;break;
 case 86: 
 HEAP32[(($15)>>2)]=0;
 var $236=0;label=87;break;
 case 87: 
 var $236;
 var $237=($236|0)==0;
 if($76){label=93;break;}else{label=88;break;}
 case 88: 
 var $239=(($74+12)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($74+16)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($240|0)==($242|0);
 if($243){label=90;break;}else{label=89;break;}
 case 89: 
 if($237){label=96;break;}else{label=95;break;}
 case 90: 
 var $245=$74;
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+36)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=7;break; }
 case 91: 
 var $250=($249|0)==-1;
 if($250){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($16)>>2)]=0;
 label=93;break;
 case 93: 
 if($237){label=95;break;}else{label=96;break;}
 case 94: 
 var $252=($74|0)==0;
 var $tmp218=$237^$252;
 if($tmp218){label=96;break;}else{label=95;break;}
 case 95: 
 var $254=HEAP32[(($__err)>>2)];
 var $255=$254|2;
 HEAP32[(($__err)>>2)]=$255;
 label=96;break;
 case 96: 
 if($14){label=100;break;}else{var $_0209227=$__kb;var $__st_3228=$__status_0;label=97;break;}
 case 97: 
 var $__st_3228;
 var $_0209227;
 var $256=HEAP8[($__st_3228)];
 var $257=(($256<<24)>>24)==2;
 if($257){var $_0209226=$_0209227;label=101;break;}else{label=98;break;}
 case 98: 
 var $259=(($_0209227+12)|0);
 var $260=($259|0)==($__ke|0);
 if($260){label=100;break;}else{label=99;break;}
 case 99: 
 var $261=(($__st_3228+1)|0);
 var $_0209227=$259;var $__st_3228=$261;label=97;break;
 case 100: 
 var $262=HEAP32[(($__err)>>2)];
 var $263=$262|4;
 HEAP32[(($__err)>>2)]=$263;
 var $_0209226=$__ke;label=101;break;
 case 101: 
 var $_0209226;
 var $264=($__stat_hold_sroa_0_1|0)==0;
 if($264){label=103;break;}else{label=102;break;}
 case 102: 
 _free($__stat_hold_sroa_0_1);
 label=103;break;
 case 103: 
 STACKTOP=sp;return $_0209226;
 case 104: 
 var $266$0;
 var $266$1;
 ___resumeException($266$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=$70?$72:$71;
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i15=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17944)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$3,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $7=HEAP32[((17948)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,14408,14434,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i15;
 var $31=HEAP32[((17560)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i16=(($__p_i_i_i15)|0);
 HEAP32[(($_sroa_016_0__idx_i_i16)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i17=(($__p_i_i_i15+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i17)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i18=(($__p_i_i_i15+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$30,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $34=HEAP32[((17564)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$55;
 var $56=$46;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+20)|0);
 var $59=HEAP32[(($58)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $60=HEAP32[(($1)>>2)];
 var $61=(($60)|0);
 var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
 STACKTOP=sp;return;
 case 17: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65)|0);
 var $67=__ZNSt3__114__shared_count16__release_sharedEv($66);
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$6?43:45;
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_049=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_0=$__atoms;label=12;break;
 case 12: 
 var $_0;
 var $40=($_0|0)==($38|0);
 if($40){var $_0_lcssa=$38;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP8[($_0)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_0+1)|0);
 if($43){var $_0_lcssa=$_0;label=14;break;}else{var $_0=$44;label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $45=$_0_lcssa;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_049=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_049=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_049=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_049=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_049=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((14408+$47)|0);
 var $66=HEAP8[($65)];
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=(($67+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($67)]=$66;
 var $_049=0;label=23;break;
 case 22: 
 var $70=((14408+$47)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_049=0;label=23;break;
 case 23: 
 var $_049;
 return $_049;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((16504)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $26=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 var $or_cond=$25|$26;
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $27=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 var $or_cond13=$or_cond|$27;
 if($or_cond13){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $29=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 var $_=$29?2147483647:-2147483648;
 var $_0=$_;label=15;break;
 case 13: 
 var $31$0=$16$0;
 var $31=$31$0;
 var $_0=$31;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=$__grouping;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__grouping+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12|0)==0;
 if($13){label=24;break;}else{label=5;break;}
 case 5: 
 var $15=($__g|0)==($__g_end|0);
 if($15){var $24=$3;label=9;break;}else{label=6;break;}
 case 6: 
 var $16=((($__g_end)-(4))|0);
 var $17=($16>>>0)>($__g>>>0);
 if($17){var $_086=$__g;var $18=$16;label=7;break;}else{var $24=$3;label=9;break;}
 case 7: 
 var $18;
 var $_086;
 var $19=HEAP32[(($_086)>>2)];
 var $20=HEAP32[(($18)>>2)];
 HEAP32[(($_086)>>2)]=$20;
 HEAP32[(($18)>>2)]=$19;
 var $21=(($_086+4)|0);
 var $22=((($18)-(4))|0);
 var $23=($21>>>0)<($22>>>0);
 if($23){var $_086=$21;var $18=$22;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre_pre=HEAP8[($2)];
 var $24=$_pre_pre;label=9;break;
 case 9: 
 var $24;
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=(($__grouping+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $32=$29;label=12;break;
 case 11: 
 var $31=(($1+1)|0);
 var $32=$31;label=12;break;
 case 12: 
 var $32;
 var $33=($24&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=15;break;
 case 14: 
 var $40=$33>>>1;
 var $41=$40;label=15;break;
 case 15: 
 var $41;
 var $42=((($__g_end)-(4))|0);
 var $43=($42>>>0)>($__g>>>0);
 var $44=HEAP8[($32)];
 var $45=(($44<<24)>>24);
 var $_not79=(($44<<24)>>24)<1;
 var $46=(($44<<24)>>24)==127;
 var $or_cond80=$_not79|$46;
 if($43){label=16;break;}else{var $_lcssa76=$45;var $or_cond_lcssa=$or_cond80;label=21;break;}
 case 16: 
 var $47=(($32+$41)|0);
 var $48=$47;
 var $__ig_081=$32;var $__r_082=$__g;var $50=$45;var $or_cond83=$or_cond80;label=17;break;
 case 17: 
 var $or_cond83;
 var $50;
 var $__r_082;
 var $__ig_081;
 if($or_cond83){label=20;break;}else{label=18;break;}
 case 18: 
 var $52=HEAP32[(($__r_082)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 20: 
 var $56=$__ig_081;
 var $57=((($48)-($56))|0);
 var $58=($57|0)>1;
 var $59=(($__ig_081+1)|0);
 var $___ig_0=$58?$59:$__ig_081;
 var $60=(($__r_082+4)|0);
 var $61=($60>>>0)<($42>>>0);
 var $62=HEAP8[($___ig_0)];
 var $63=(($62<<24)>>24);
 var $_not=(($62<<24)>>24)<1;
 var $64=(($62<<24)>>24)==127;
 var $or_cond=$_not|$64;
 if($61){var $__ig_081=$___ig_0;var $__r_082=$60;var $50=$63;var $or_cond83=$or_cond;label=17;break;}else{var $_lcssa76=$63;var $or_cond_lcssa=$or_cond;label=21;break;}
 case 21: 
 var $or_cond_lcssa;
 var $_lcssa76;
 if($or_cond_lcssa){label=24;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[(($42)>>2)];
 var $67=($_lcssa76>>>0)<($66>>>0);
 var $68=($66|0)==0;
 var $or_cond74=$67|$68;
 if($or_cond74){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=$70?$72:$71;
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0=$152$r;var $152$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$152$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$152$1;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((16504)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=$27?$$etemp$1$0:$$etemp$2$0;
 var $_$1=$27?$$etemp$1$1:$$etemp$2$1;
 var $_0$1=$_$1;var $_0$0=$_$0;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=$70?$72:$71;
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18504)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18504);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((16504)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((16504)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=$70?$72:$71;
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18504)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18504);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((16504)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((16504)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=$70?$72:$71;
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$152;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18504)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18504);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((16504)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((16504)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre163=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre163;var $_pre_phi165=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre164=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi165=$_pre164;label=9;break;
 case 9: 
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $41=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{var $41=$25;label=15;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $39=($38|0)==-1;
 if($39){label=14;break;}else{var $41=$25;label=15;break;}
 case 14: 
 HEAP32[(($20)>>2)]=0;
 var $41=0;label=15;break;
 case 15: 
 var $41;
 var $42=($41|0)==0;
 var $43=HEAP32[(($21)>>2)];
 var $44=($43|0)==0;
 if($44){label=21;break;}else{label=16;break;}
 case 16: 
 var $46=(($43+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($43+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 if($42){var $62=$43;var $61=0;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=0;label=45;break;}
 case 18: 
 var $52=$43;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $57=($56|0)==-1;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($21)>>2)]=0;
 label=21;break;
 case 21: 
 if($42){var $__a_2=$__a_0;var $129=0;var $128=1;label=45;break;}else{var $62=0;var $61=1;label=23;break;}
 case 22: 
 var $59=($43|0)==0;
 var $60=$42^$59;
 if($60){var $62=$43;var $61=$59;label=23;break;}else{var $__a_2=$__a_0;var $129=$43;var $128=$59;label=45;break;}
 case 23: 
 var $61;
 var $62;
 var $63=HEAP32[(($__a_end)>>2)];
 var $64=$63;
 var $65=$__a_0;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($1)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($23)>>2)];
 var $72=$68>>>1;
 var $73=$70?$72:$71;
 var $74=($66|0)==($73|0);
 if($74){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($70){label=26;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($23)>>2)];
 var $82=$77;var $81=$77;label=27;break;
 case 26: 
 var $79=$68>>>1;
 var $80=$68>>>1;
 var $82=$80;var $81=$79;label=27;break;
 case 27: 
 var $81;
 var $82;
 var $83=$82<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$83,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $84=HEAP8[($1)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $90=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($22)>>2)];
 var $89=$88&-2;
 var $phitmp160=((($89)-(1))|0);
 var $90=$phitmp160;label=30;break;
 case 30: 
 var $90;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$90,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $91=HEAP8[($1)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $96=$_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $95=HEAP32[(($_pre_phi165)>>2)];
 var $96=$95;label=33;break;
 case 33: 
 var $96;
 var $97=(($96+$81)|0);
 HEAP32[(($__a_end)>>2)]=$97;
 var $__a_1=$96;label=37;break;
 case 34: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $99=(($41+12)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($41+16)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($100|0)==($102|0);
 if($103){label=38;break;}else{label=40;break;}
 case 38: 
 var $105=$41;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($109)&255);
 var $_0_off0=$extract_t;label=41;break;
 case 40: 
 var $111=HEAP8[($100)];
 var $_0_off0=$111;label=41;break;
 case 41: 
 var $_0_off0;
 var $113=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $114=($113|0)==0;
 if($114){label=42;break;}else{var $__a_2=$__a_1;var $129=$62;var $128=$61;label=45;break;}
 case 42: 
 var $116=HEAP32[(($99)>>2)];
 var $117=HEAP32[(($101)>>2)];
 var $118=($116|0)==($117|0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=$41;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+40)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$41;label=10;break; } else { label=34;break; }
 case 44: 
 var $126=(($116+1)|0);
 HEAP32[(($99)>>2)]=$126;
 var $__a_0=$__a_1;var $25=$41;label=10;break;
 case 45: 
 var $128;
 var $129;
 var $__a_2;
 var $130=$__grouping;
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$132&1;
 var $134=($133|0)==0;
 if($134){label=47;break;}else{label=46;break;}
 case 46: 
 var $136=(($__grouping+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $140=$137;label=48;break;
 case 47: 
 var $139=$132>>>1;
 var $140=$139;label=48;break;
 case 48: 
 var $140;
 var $141=($140|0)==0;
 if($141){label=51;break;}else{label=49;break;}
 case 49: 
 var $143=HEAP32[(($__g_end)>>2)];
 var $144=$143;
 var $145=$__g;
 var $146=((($144)-($145))|0);
 var $147=($146|0)<160;
 if($147){label=50;break;}else{label=51;break;}
 case 50: 
 var $149=HEAP32[(($__dc)>>2)];
 var $150=(($143+4)|0);
 HEAP32[(($__g_end)>>2)]=$150;
 HEAP32[(($143)>>2)]=$149;
 label=51;break;
 case 51: 
 var $151=HEAP32[(($__a_end)>>2)];
 var $152$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$151,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $152$0=$152$r;var $152$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$152$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$152$1;
 var $154=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$154,$__err);
 if($42){var $169=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $156=(($41+12)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($41+16)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($157|0)==($159|0);
 if($160){label=54;break;}else{var $169=$41;label=57;break;}
 case 54: 
 var $162=$41;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+36)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $167=($166|0)==-1;
 if($167){label=56;break;}else{var $169=$41;label=57;break;}
 case 56: 
 HEAP32[(($20)>>2)]=0;
 var $169=0;label=57;break;
 case 57: 
 var $169;
 var $170=($169|0)==0;
 if($128){label=62;break;}else{label=58;break;}
 case 58: 
 var $172=(($129+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($129+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=59;break;}else{label=63;break;}
 case 59: 
 var $178=$129;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $183=($182|0)==-1;
 if($183){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($21)>>2)]=0;
 label=62;break;
 case 62: 
 if($170){label=64;break;}else{label=65;break;}
 case 63: 
 var $185=($129|0)==0;
 var $tmp158=$170^$185;
 if($tmp158){label=65;break;}else{label=64;break;}
 case 64: 
 var $187=HEAP32[(($__err)>>2)];
 var $188=$187|2;
 HEAP32[(($__err)>>2)]=$188;
 label=65;break;
 case 65: 
 var $190=(($agg_result)|0);
 HEAP32[(($190)>>2)]=$169;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(18504)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(18504);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((16504)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((16504)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre162=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre162;var $_pre_phi164=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi164=$_pre163;label=5;break;
 case 5: 
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=$64?$66:$65;
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp158=((($83)-(1))|0);
 var $84=$phitmp158;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi164)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp156=$168^$183;
 if($tmp156){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i18=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17944)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$3,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $7=HEAP32[((17948)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,14408,14440,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i18;
 var $31=HEAP32[((17560)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i19=(($__p_i_i_i18)|0);
 HEAP32[(($_sroa_016_0__idx_i_i19)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i20=(($__p_i_i_i18+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i20)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i21=(($__p_i_i_i18+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i21)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$30,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $34=HEAP32[((17564)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$55;
 var $56=HEAP32[(($51)>>2)];
 var $57=(($56+16)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$59;
 var $60=$46;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+20)|0);
 var $63=HEAP32[(($62)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $64=HEAP32[(($1)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 STACKTOP=sp;return;
 case 18: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $69=HEAP32[(($1)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($68$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_082=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_082=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_082=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_082=0;label=36;break;
 case 9: 
 var $31=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_082=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_082=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_082=0;label=36;break;
 case 17: 
 var $59=(($__atoms+32)|0);
 var $_0=$__atoms;label=18;break;
 case 18: 
 var $_0;
 var $61=($_0|0)==($59|0);
 if($61){var $_0_lcssa=$59;label=20;break;}else{label=19;break;}
 case 19: 
 var $63=HEAP8[($_0)];
 var $64=(($63<<24)>>24)==(($__ct<<24)>>24);
 var $65=(($_0+1)|0);
 if($64){var $_0_lcssa=$_0;label=20;break;}else{var $_0=$65;label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $66=$_0_lcssa;
 var $67=$__atoms;
 var $68=((($66)-($67))|0);
 var $69=($68|0)>31;
 if($69){var $_082=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $71=((14408+$68)|0);
 var $72=HEAP8[($71)];
 if(($68|0)==25|($68|0)==24){ label=22;break;}else if(($68|0)==22|($68|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $74=HEAP32[(($__a_end)>>2)];
 var $75=($74|0)==($__a|0);
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=((($74)-(1))|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79&95;
 var $81=HEAP8[($__exp)];
 var $82=($81&255);
 var $83=$82&127;
 var $84=($80|0)==($83|0);
 if($84){label=24;break;}else{var $_082=-1;label=36;break;}
 case 24: 
 var $86=(($74+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($74)]=$72;
 var $_082=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $87=HEAP32[(($__a_end)>>2)];
 var $88=(($87+1)|0);
 HEAP32[(($__a_end)>>2)]=$88;
 HEAP8[($87)]=$72;
 var $_082=0;label=36;break;
 case 26: 
 var $90=($72&255);
 var $91=$90&95;
 var $92=HEAP8[($__exp)];
 var $93=(($92<<24)>>24);
 var $94=($91|0)==($93|0);
 if($94){label=27;break;}else{label=34;break;}
 case 27: 
 var $96=$92|-128;
 HEAP8[($__exp)]=$96;
 var $97=HEAP8[($__in_units)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $101=$__grouping;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 var $107=(($__grouping+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $111=$108;label=31;break;
 case 30: 
 var $110=$103>>>1;
 var $111=$110;label=31;break;
 case 31: 
 var $111;
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=32;break;}
 case 32: 
 var $114=HEAP32[(($__g_end)>>2)];
 var $115=$114;
 var $116=$__g;
 var $117=((($115)-($116))|0);
 var $118=($117|0)<160;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 var $120=HEAP32[(($__dc)>>2)];
 var $121=(($114+4)|0);
 HEAP32[(($__g_end)>>2)]=$121;
 HEAP32[(($114)>>2)]=$120;
 label=34;break;
 case 34: 
 var $123=HEAP32[(($__a_end)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 HEAP8[($123)]=$72;
 var $125=($68|0)>21;
 if($125){var $_082=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $127=HEAP32[(($__dc)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($__dc)>>2)]=$128;
 var $_082=0;label=36;break;
 case 36: 
 var $_082;
 return $_082;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((16504)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $28=$16;
 var $_0=$28;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre162=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre162;var $_pre_phi164=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi164=$_pre163;label=5;break;
 case 5: 
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=$64?$66:$65;
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp158=((($83)-(1))|0);
 var $84=$phitmp158;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi164)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp156=$168^$183;
 if($tmp156){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((16504)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre162=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre162;var $_pre_phi164=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi164=$_pre163;label=5;break;
 case 5: 
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP8[($__decimal_point)];
 var $18=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $35=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{var $35=$19;label=11;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $33=($32|0)==-1;
 if($33){label=10;break;}else{var $35=$19;label=11;break;}
 case 10: 
 HEAP32[(($13)>>2)]=0;
 var $35=0;label=11;break;
 case 11: 
 var $35;
 var $36=($35|0)==0;
 var $37=HEAP32[(($14)>>2)];
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=(($37+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($37+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=13;break;}
 case 13: 
 if($36){var $56=$37;var $55=0;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=0;label=41;break;}
 case 14: 
 var $46=$37;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $51=($50|0)==-1;
 if($51){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($14)>>2)]=0;
 label=17;break;
 case 17: 
 if($36){var $__a_2=$__a_0;var $123=0;var $122=1;label=41;break;}else{var $56=0;var $55=1;label=19;break;}
 case 18: 
 var $53=($37|0)==0;
 var $54=$36^$53;
 if($54){var $56=$37;var $55=$53;label=19;break;}else{var $__a_2=$__a_0;var $123=$37;var $122=$53;label=41;break;}
 case 19: 
 var $55;
 var $56;
 var $57=HEAP32[(($__a_end)>>2)];
 var $58=$57;
 var $59=$__a_0;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($0)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($16)>>2)];
 var $66=$62>>>1;
 var $67=$64?$66:$65;
 var $68=($60|0)==($67|0);
 if($68){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $71=HEAP32[(($16)>>2)];
 var $76=$71;var $75=$71;label=23;break;
 case 22: 
 var $73=$62>>>1;
 var $74=$62>>>1;
 var $76=$74;var $75=$73;label=23;break;
 case 23: 
 var $75;
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$77,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $78=HEAP8[($0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($15)>>2)];
 var $83=$82&-2;
 var $phitmp158=((($83)-(1))|0);
 var $84=$phitmp158;label=26;break;
 case 26: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $85=HEAP8[($0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $89=HEAP32[(($_pre_phi164)>>2)];
 var $90=$89;label=29;break;
 case 29: 
 var $90;
 var $91=(($90+$75)|0);
 HEAP32[(($__a_end)>>2)]=$91;
 var $__a_1=$90;label=33;break;
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $93=(($35+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($35+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=34;break;}else{label=36;break;}
 case 34: 
 var $99=$35;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($103)&255);
 var $_0_off0=$extract_t;label=37;break;
 case 36: 
 var $105=HEAP8[($94)];
 var $_0_off0=$105;label=37;break;
 case 37: 
 var $_0_off0;
 var $107=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{var $__a_2=$__a_1;var $123=$56;var $122=$55;label=41;break;}
 case 38: 
 var $110=HEAP32[(($93)>>2)];
 var $111=HEAP32[(($95)>>2)];
 var $112=($110|0)==($111|0);
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$35;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+40)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$35;label=6;break; } else { label=30;break; }
 case 40: 
 var $120=(($110+1)|0);
 HEAP32[(($93)>>2)]=$120;
 var $__a_0=$__a_1;var $19=$35;label=6;break;
 case 41: 
 var $122;
 var $123;
 var $__a_2;
 var $124=$__grouping;
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$126&1;
 var $128=($127|0)==0;
 if($128){label=43;break;}else{label=42;break;}
 case 42: 
 var $130=(($__grouping+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $134=$131;label=44;break;
 case 43: 
 var $133=$126>>>1;
 var $134=$133;label=44;break;
 case 44: 
 var $134;
 var $135=($134|0)==0;
 if($135){label=48;break;}else{label=45;break;}
 case 45: 
 var $137=HEAP8[($__in_units)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=48;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($__g_end)>>2)];
 var $142=$141;
 var $143=$__g;
 var $144=((($142)-($143))|0);
 var $145=($144|0)<160;
 if($145){label=47;break;}else{label=48;break;}
 case 47: 
 var $147=HEAP32[(($__dc)>>2)];
 var $148=(($141+4)|0);
 HEAP32[(($__g_end)>>2)]=$148;
 HEAP32[(($141)>>2)]=$147;
 label=48;break;
 case 48: 
 var $149=HEAP32[(($__a_end)>>2)];
 var $150=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$149,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$150;
 var $152=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$152,$__err);
 if($36){var $167=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $154=(($35+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($35+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=51;break;}else{var $167=$35;label=54;break;}
 case 51: 
 var $160=$35;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+36)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $165=($164|0)==-1;
 if($165){label=53;break;}else{var $167=$35;label=54;break;}
 case 53: 
 HEAP32[(($13)>>2)]=0;
 var $167=0;label=54;break;
 case 54: 
 var $167;
 var $168=($167|0)==0;
 if($122){label=59;break;}else{label=55;break;}
 case 55: 
 var $170=(($123+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($123+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=56;break;}else{label=60;break;}
 case 56: 
 var $176=$123;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $181=($180|0)==-1;
 if($181){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($14)>>2)]=0;
 label=59;break;
 case 59: 
 if($168){label=61;break;}else{label=62;break;}
 case 60: 
 var $183=($123|0)==0;
 var $tmp156=$168^$183;
 if($tmp156){label=62;break;}else{label=61;break;}
 case 61: 
 var $185=HEAP32[(($__err)>>2)];
 var $186=$185|2;
 HEAP32[(($__err)>>2)]=$186;
 label=62;break;
 case 62: 
 var $188=(($agg_result)|0);
 HEAP32[(($188)>>2)]=$167;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((16504)>>2)];
 var $16=_strtold_l($__a,$__p2,$15);
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0=$16;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$16;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $__grouping171=$__grouping;
 var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping171)>>2)]=0; HEAP32[((($__grouping171)+(4))>>2)]=0; HEAP32[((($__grouping171)+(8))>>2)]=0;
 var $1=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17944)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=39;break; }
 case 4: 
 var $9=HEAP32[((17948)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=39;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $25=$21;
 var $26=(($__atoms)|0);
 var $27=$21;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($25,14408,14434,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=39;break; }
 case 9: 
 var $32=HEAP32[(($3)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $35=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=41;break; }
 case 10: 
 var $36=HEAP8[($1)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=(($__buf+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $_pre172=(($35+1)|0);
 var $44=$41;var $_pre_phi=$_pre172;var $_pre_phi174=$40;label=13;break;
 case 12: 
 var $43=(($35+1)|0);
 var $_pre173=(($__buf+8)|0);
 var $44=$43;var $_pre_phi=$43;var $_pre_phi174=$_pre173;label=13;break;
 case 13: 
 var $_pre_phi174;
 var $_pre_phi;
 var $44;
 HEAP32[(($__a_end)>>2)]=$44;
 var $45=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$45;
 HEAP32[(($__dc)>>2)]=0;
 var $46=(($__b)|0);
 var $47=(($__e)|0);
 var $48=(($__buf)|0);
 var $49=(($__buf+4)|0);
 var $_pre=HEAP32[(($46)>>2)];
 var $__a_0=$44;var $50=$_pre;label=14;break;
 case 14: 
 var $50;
 var $__a_0;
 var $51=($50|0)==0;
 if($51){var $66=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=16;break;}else{var $66=$50;label=19;break;}
 case 16: 
 var $59=$50;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+36)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 17: 
 var $64=($63|0)==-1;
 if($64){label=18;break;}else{var $66=$50;label=19;break;}
 case 18: 
 HEAP32[(($46)>>2)]=0;
 var $66=0;label=19;break;
 case 19: 
 var $66;
 var $67=($66|0)==0;
 var $68=HEAP32[(($47)>>2)];
 var $69=($68|0)==0;
 if($69){label=25;break;}else{label=20;break;}
 case 20: 
 var $71=(($68+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($68+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=22;break;}else{label=21;break;}
 case 21: 
 if($67){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 22: 
 var $77=$68;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=40;break; }
 case 23: 
 var $82=($81|0)==-1;
 if($82){label=24;break;}else{label=26;break;}
 case 24: 
 HEAP32[(($47)>>2)]=0;
 label=25;break;
 case 25: 
 if($67){var $__a_2=$__a_0;label=51;break;}else{label=27;break;}
 case 26: 
 var $84=($68|0)==0;
 var $85=$67^$84;
 if($85){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 27: 
 var $86=HEAP32[(($__a_end)>>2)];
 var $87=$86;
 var $88=$__a_0;
 var $89=((($87)-($88))|0);
 var $90=HEAP8[($1)];
 var $91=($90&255);
 var $92=$91&1;
 var $93=($92|0)==0;
 var $94=HEAP32[(($49)>>2)];
 var $95=$91>>>1;
 var $96=$93?$95:$94;
 var $97=($89|0)==($96|0);
 if($97){label=28;break;}else{var $__a_1=$__a_0;label=43;break;}
 case 28: 
 if($93){label=30;break;}else{label=29;break;}
 case 29: 
 var $100=HEAP32[(($49)>>2)];
 var $105=$100;var $104=$100;label=31;break;
 case 30: 
 var $102=$91>>>1;
 var $103=$91>>>1;
 var $105=$103;var $104=$102;label=31;break;
 case 31: 
 var $104;
 var $105;
 var $106=$105<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$106,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $107=HEAP8[($1)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){var $113=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $111=HEAP32[(($48)>>2)];
 var $112=$111&-2;
 var $phitmp166=((($112)-(1))|0);
 var $113=$phitmp166;label=34;break;
 case 34: 
 var $113;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$113,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=40;break; }
 case 35: 
 var $114=HEAP8[($1)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){var $119=$_pre_phi;label=37;break;}else{label=36;break;}
 case 36: 
 var $118=HEAP32[(($_pre_phi174)>>2)];
 var $119=$118;label=37;break;
 case 37: 
 var $119;
 var $120=(($119+$104)|0);
 HEAP32[(($__a_end)>>2)]=$120;
 var $__a_1=$119;label=43;break;
 case 38: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1); var $122$1 = tempRet0;
 var $123=$122$0;
 var $124=$122$1;
 var $_0158=$124;var $_0159=$123;label=74;break;
 case 39: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $129=HEAP32[(($3)>>2)];
 var $130=(($129)|0);
 var $131=__ZNSt3__114__shared_count16__release_sharedEv($130);
 var $_0158=$128;var $_0159=$127;label=74;break;
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=42;break;
 case 42: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $132=$eh_lpad_body$0;
 var $133=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0158=$133;var $_0159=$132;label=74;break;
 case 43: 
 var $__a_1;
 var $134=(($66+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($66+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=44;break;}else{label=46;break;}
 case 44: 
 var $140=$66;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=40;break; }
 case 45: 
 var $extract_t=(($144)&255);
 var $_0_off0=$extract_t;label=47;break;
 case 46: 
 var $146=HEAP8[($135)];
 var $_0_off0=$146;label=47;break;
 case 47: 
 var $_0_off0;
 var $148=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$45,$__g_end,$26);
 var $149=($148|0)==0;
 if($149){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $151=HEAP32[(($134)>>2)];
 var $152=HEAP32[(($136)>>2)];
 var $153=($151|0)==($152|0);
 if($153){label=49;break;}else{label=50;break;}
 case 49: 
 var $155=$66;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+40)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $50=$66;label=14;break; } else { label=40;break; }
 case 50: 
 var $161=(($151+1)|0);
 HEAP32[(($134)>>2)]=$161;
 var $__a_0=$__a_1;var $50=$66;label=14;break;
 case 51: 
 var $__a_2;
 var $163=(($__a_2+3)|0);
 HEAP8[($163)]=0;
 var $164=HEAP8[(18504)];
 var $165=(($164<<24)>>24)==0;
 if($165){label=52;break;}else{label=56;break;}
 case 52: 
 var $167=___cxa_guard_acquire(18504);
 var $168=($167|0)==0;
 if($168){label=56;break;}else{label=53;break;}
 case 53: 
 var $170=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((16504)>>2)]=$170;
 label=56;break;
 case 55: 
 var $173$0 = ___cxa_find_matching_catch(-1, -1); var $173$1 = tempRet0;
 var $eh_lpad_body$1=$173$1;var $eh_lpad_body$0=$173$0;label=42;break;
 case 56: 
 var $175=HEAP32[((16504)>>2)];
 var $176=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$175,4712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=41;break; }
 case 57: 
 var $178=($176|0)==1;
 if($178){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $181=HEAP32[(($46)>>2)];
 var $182=($181|0)==0;
 if($182){var $197=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $184=(($181+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($181+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=61;break;}else{var $197=$181;label=64;break;}
 case 61: 
 var $190=$181;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+36)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=41;break; }
 case 62: 
 var $195=($194|0)==-1;
 if($195){label=63;break;}else{var $197=$181;label=64;break;}
 case 63: 
 HEAP32[(($46)>>2)]=0;
 var $197=0;label=64;break;
 case 64: 
 var $197;
 var $198=($197|0)==0;
 var $199=HEAP32[(($47)>>2)];
 var $200=($199|0)==0;
 if($200){label=70;break;}else{label=65;break;}
 case 65: 
 var $202=(($199+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($199+16)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($203|0)==($205|0);
 if($206){label=67;break;}else{label=66;break;}
 case 66: 
 if($198){label=73;break;}else{label=72;break;}
 case 67: 
 var $208=$199;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+36)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($199) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=41;break; }
 case 68: 
 var $213=($212|0)==-1;
 if($213){label=69;break;}else{label=71;break;}
 case 69: 
 HEAP32[(($47)>>2)]=0;
 label=70;break;
 case 70: 
 if($198){label=72;break;}else{label=73;break;}
 case 71: 
 var $215=($199|0)==0;
 var $tmp164=$198^$215;
 if($tmp164){label=73;break;}else{label=72;break;}
 case 72: 
 var $217=HEAP32[(($__err)>>2)];
 var $218=$217|2;
 HEAP32[(($__err)>>2)]=$218;
 label=73;break;
 case 73: 
 var $220=(($agg_result)|0);
 HEAP32[(($220)>>2)]=$197;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 74: 
 var $_0159;
 var $_0158;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $222$0=$_0159;
 var $222$1=0;
 var $223$0=$222$0;
 var $223$1=$_0158;
 ___resumeException($223$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,$__format,$1);
 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i24=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $4=(sp)+(64);
 var $5=(sp)+(72);
 var $__names=(sp)+(80);
 var $6=(sp)+(104);
 var $7=(($__iob+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&1;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $12=$this;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($__b)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($3)|0);
 HEAP32[(($21)>>2)]=$20;
 FUNCTION_TABLE[$15]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $22=(($1)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($16)>>2)]=$23;
 var $24=HEAP32[(($__lv)>>2)];
 if(($24|0)==0){ label=3;break;}else if(($24|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $29=(($agg_result)|0);
 HEAP32[(($29)>>2)]=$23;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 var $31=(($4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$__p_i_i_i;
 var $34=HEAP32[((17936)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$33,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $37=HEAP32[((17940)>>2)];
 var $38=((($37)-(1))|0);
 var $39=(($32+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($32+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$40;
 var $44=$42;
 var $45=((($43)-($44))|0);
 var $46=$45>>2;
 var $47=($46>>>0)>($38>>>0);
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=(($42+($38<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)==0;
 if($50){label=11;break;}else{label=13;break;}
 case 11: 
 var $51=___cxa_allocate_exception(4);
 var $52=$51;
 __ZNSt8bad_castC2Ev($52);
 (function() { try { __THREW__ = 0; return ___cxa_throw($51,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $53=$49;
 var $54=HEAP32[(($31)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 __ZNKSt3__18ios_base6getlocEv($5,$__iob);
 var $57=(($5)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$__p_i_i_i24;
 var $60=HEAP32[((17552)>>2)];
 var $61=($60|0)==-1;
 if($61){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i25=(($__p_i_i_i24)|0);
 HEAP32[(($_sroa_016_0__idx_i_i25)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i26=(($__p_i_i_i24+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i26)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i27=(($__p_i_i_i24+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$59,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $63=HEAP32[((17556)>>2)];
 var $64=((($63)-(1))|0);
 var $65=(($58+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($58+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$66;
 var $70=$68;
 var $71=((($69)-($70))|0);
 var $72=$71>>2;
 var $73=($72>>>0)>($64>>>0);
 if($73){label=16;break;}else{label=17;break;}
 case 16: 
 var $74=(($68+($64<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==0;
 if($76){label=17;break;}else{label=19;break;}
 case 17: 
 var $77=___cxa_allocate_exception(4);
 var $78=$77;
 __ZNSt8bad_castC2Ev($78);
 (function() { try { __THREW__ = 0; return ___cxa_throw($77,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $79=$75;
 var $80=HEAP32[(($57)>>2)];
 var $81=(($80)|0);
 var $82=__ZNSt3__114__shared_count16__release_sharedEv($81);
 var $83=(($__names)|0);
 var $84=$75;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+24)|0);
 var $87=HEAP32[(($86)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($83,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $_022=$83;label=25;break; }
 case 20: 
 var $88=(($__names+12)|0);
 var $89=HEAP32[(($84)>>2)];
 var $90=(($89+28)|0);
 var $91=HEAP32[(($90)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($88,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $_022=$88;label=25;break; }
 case 21: 
 var $92=(($__e)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(($6)|0);
 HEAP32[(($94)>>2)]=$93;
 var $95=(($__names+24)|0);
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$6,$83,$95,$53,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $97=($96|0)==($83|0);
 var $98=($97&1);
 HEAP8[($__v)]=$98;
 var $99=(($__b)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($agg_result)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($102);
 var $103=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($103);
 label=28;break;
 case 23: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP32[(($31)>>2)];
 var $109=(($108)|0);
 var $110=__ZNSt3__114__shared_count16__release_sharedEv($109);
 var $_0=$106;var $_021=$107;label=29;break;
 case 24: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $113=$112$0;
 var $114=$112$1;
 var $115=HEAP32[(($57)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $_0=$113;var $_021=$114;label=29;break;
 case 25: 
 var $_022;
 var $119$0 = ___cxa_find_matching_catch(-1, -1); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $122=($83|0)==($_022|0);
 if($122){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$_022;label=26;break;}
 case 26: 
 var $123;
 var $124=((($123)-(12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($124);
 var $125=($124|0)==($83|0);
 if($125){var $_0=$120;var $_021=$121;label=29;break;}else{var $123=$124;label=26;break;}
 case 27: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($128);
 var $129=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($129);
 var $130=$126$1;
 var $_0=$127;var $_021=$130;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $_021;
 var $_0;
 var $132$0=$_0;
 var $132$1=0;
 var $133$0=$132$0;
 var $133$1=$_021;
 ___resumeException($133$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $271$1=$11$1;var $271$0=$11$0;label=106;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit251$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit251$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit251$1;var $lpad_phi$0=$lpad_nonloopexit251$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $12=($__stat_hold_sroa_0_1|0)==0;
 if($12){var $271$1=$lpad_phi$1;var $271$0=$lpad_phi$0;label=106;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $271$1=$lpad_phi$1;var $271$0=$lpad_phi$0;label=106;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $14=($__kb|0)==($__ke|0);
 if($14){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_0261=$4;var $__n_does_match_0262=0;var $__st_0263=$__status_0;var $__ky_0264=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $15=(($__b)|0);
 var $16=(($__e)|0);
 var $17=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_0264;
 var $__st_0263;
 var $__n_does_match_0262;
 var $__n_might_match_0261;
 var $18=$__ky_0264;
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=14;break;}else{label=13;break;}
 case 13: 
 var $24=(($__ky_0264+4)|0);
 var $25=HEAP32[(($24)>>2)];
 var $28=$25;label=15;break;
 case 14: 
 var $27=$20>>>1;
 var $28=$27;label=15;break;
 case 15: 
 var $28;
 var $29=($28|0)==0;
 if($29){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_0263)]=1;
 var $__n_does_match_1=$__n_does_match_0262;var $__n_might_match_1=$__n_might_match_0261;label=18;break;
 case 17: 
 HEAP8[($__st_0263)]=2;
 var $32=((($__n_might_match_0261)-(1))|0);
 var $33=((($__n_does_match_0262)+(1))|0);
 var $__n_does_match_1=$33;var $__n_might_match_1=$32;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $35=(($__ky_0264+12)|0);
 var $36=(($__st_0263+1)|0);
 var $37=($35|0)==($__ke|0);
 if($37){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_0261=$__n_might_match_1;var $__n_does_match_0262=$__n_does_match_1;var $__st_0263=$36;var $__ky_0264=$35;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($15)>>2)];
 var $40=($39|0)==0;
 if($40){var $57=0;label=26;break;}else{label=20;break;}
 case 20: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=21;break;}else{label=22;break;}
 case 21: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0208=$52;label=23;break; } else { label=6;break; }
 case 22: 
 var $54=HEAP32[(($43)>>2)];
 var $_0208=$54;label=23;break;
 case 23: 
 var $_0208;
 var $55=($_0208|0)==-1;
 if($55){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre=HEAP32[(($15)>>2)];
 var $57=$_pre;label=26;break;
 case 25: 
 HEAP32[(($15)>>2)]=0;
 var $57=0;label=26;break;
 case 26: 
 var $57;
 var $58=($57|0)==0;
 var $59=HEAP32[(($16)>>2)];
 var $60=($59|0)==0;
 if($60){var $79=$57;var $78=0;label=33;break;}else{label=27;break;}
 case 27: 
 var $62=(($59+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($59+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=28;break;}else{label=29;break;}
 case 28: 
 var $68=$59;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+36)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0207=$72;label=30;break; } else { label=6;break; }
 case 29: 
 var $74=HEAP32[(($63)>>2)];
 var $_0207=$74;label=30;break;
 case 30: 
 var $_0207;
 var $75=($_0207|0)==-1;
 if($75){label=31;break;}else{var $77=$59;label=32;break;}
 case 31: 
 HEAP32[(($16)>>2)]=0;
 var $77=0;label=32;break;
 case 32: 
 var $77;
 var $_pr=HEAP32[(($15)>>2)];
 var $79=$_pr;var $78=$77;label=33;break;
 case 33: 
 var $78;
 var $79;
 var $80=($78|0)==0;
 var $81=$58^$80;
 var $82=($__n_might_match_2|0)!=0;
 var $_=$81&$82;
 if($_){label=34;break;}else{label=82;break;}
 case 34: 
 var $84=(($79+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($79+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=35;break;}else{label=36;break;}
 case 35: 
 var $90=$79;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0206=$94;label=37;break; } else { label=6;break; }
 case 36: 
 var $96=HEAP32[(($85)>>2)];
 var $_0206=$96;label=37;break;
 case 37: 
 var $_0206;
 if($__case_sensitive){var $__c_0=$_0206;label=39;break;}else{label=38;break;}
 case 38: 
 var $98=HEAP32[(($17)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($__ct,$_0206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$101;label=39;break; } else { label=6;break; }
 case 39: 
 var $__c_0;
 if($14){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa276=$__n_might_match_2;label=81;break;}else{label=40;break;}
 case 40: 
 var $102=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_3231_us=$__n_might_match_2;var $__n_does_match_3232_us=$__n_does_match_2;var $__st_1233_us=$__status_0;var $__consume_0_off0235_us=0;var $__ky1_0236_us=$__kb;label=41;break;}else{var $__n_might_match_3231=$__n_might_match_2;var $__n_does_match_3232=$__n_does_match_2;var $__st_1233=$__status_0;var $__consume_0_off0235=0;var $__ky1_0236=$__kb;label=54;break;}
 case 41: 
 var $__ky1_0236_us;
 var $__consume_0_off0235_us;
 var $__st_1233_us;
 var $__n_does_match_3232_us;
 var $__n_might_match_3231_us;
 var $103=HEAP8[($__st_1233_us)];
 var $104=(($103<<24)>>24)==1;
 if($104){label=42;break;}else{var $__consume_1_off0_us=$__consume_0_off0235_us;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$__n_might_match_3231_us;label=52;break;}
 case 42: 
 var $106=$__ky1_0236_us;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=44;break;}else{label=43;break;}
 case 43: 
 var $111=(($__ky1_0236_us+8)|0);
 var $112=HEAP32[(($111)>>2)];
 var $115=$112;label=45;break;
 case 44: 
 var $114=(($__ky1_0236_us+4)|0);
 var $115=$114;label=45;break;
 case 45: 
 var $115;
 var $116=(($115+($__indx_0<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($__c_0|0)==($117|0);
 if($118){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP8[($__st_1233_us)]=0;
 var $120=((($__n_might_match_3231_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off0235_us;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$120;label=52;break;
 case 47: 
 var $122=HEAP8[($106)];
 var $123=($122&255);
 var $124=$123&1;
 var $125=($124|0)==0;
 if($125){label=49;break;}else{label=48;break;}
 case 48: 
 var $127=(($__ky1_0236_us+4)|0);
 var $128=HEAP32[(($127)>>2)];
 var $131=$128;label=50;break;
 case 49: 
 var $130=$123>>>1;
 var $131=$130;label=50;break;
 case 50: 
 var $131;
 var $132=($131|0)==($102|0);
 if($132){label=51;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$__n_might_match_3231_us;label=52;break;}
 case 51: 
 HEAP8[($__st_1233_us)]=2;
 var $134=((($__n_might_match_3231_us)-(1))|0);
 var $135=((($__n_does_match_3232_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$135;var $__n_might_match_4_us=$134;label=52;break;
 case 52: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $137=(($__ky1_0236_us+12)|0);
 var $138=($137|0)==($__ke|0);
 if($138){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=68;break;}else{label=53;break;}
 case 53: 
 var $139=(($__st_1233_us+1)|0);
 var $__n_might_match_3231_us=$__n_might_match_4_us;var $__n_does_match_3232_us=$__n_does_match_4_us;var $__st_1233_us=$139;var $__consume_0_off0235_us=$__consume_1_off0_us;var $__ky1_0236_us=$137;label=41;break;
 case 54: 
 var $__ky1_0236;
 var $__consume_0_off0235;
 var $__st_1233;
 var $__n_does_match_3232;
 var $__n_might_match_3231;
 var $140=HEAP8[($__st_1233)];
 var $141=(($140<<24)>>24)==1;
 if($141){label=55;break;}else{var $__consume_1_off0=$__consume_0_off0235;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$__n_might_match_3231;label=66;break;}
 case 55: 
 var $143=$__ky1_0236;
 var $144=HEAP8[($143)];
 var $145=$144&1;
 var $146=(($145<<24)>>24)==0;
 if($146){label=57;break;}else{label=56;break;}
 case 56: 
 var $148=(($__ky1_0236+8)|0);
 var $149=HEAP32[(($148)>>2)];
 var $153=$149;label=58;break;
 case 57: 
 var $151=(($__ky1_0236+4)|0);
 var $153=$151;label=58;break;
 case 58: 
 var $153;
 var $154=(($153+($__indx_0<<2))|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=HEAP32[(($17)>>2)];
 var $157=(($156+28)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($__ct,$155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=5;break; }
 case 59: 
 var $160=($__c_0|0)==($159|0);
 if($160){label=60;break;}else{label=65;break;}
 case 60: 
 var $162=HEAP8[($143)];
 var $163=($162&255);
 var $164=$163&1;
 var $165=($164|0)==0;
 if($165){label=62;break;}else{label=61;break;}
 case 61: 
 var $167=(($__ky1_0236+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $171=$168;label=63;break;
 case 62: 
 var $170=$163>>>1;
 var $171=$170;label=63;break;
 case 63: 
 var $171;
 var $172=($171|0)==($102|0);
 if($172){label=64;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$__n_might_match_3231;label=66;break;}
 case 64: 
 HEAP8[($__st_1233)]=2;
 var $174=((($__n_might_match_3231)-(1))|0);
 var $175=((($__n_does_match_3232)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$175;var $__n_might_match_4=$174;label=66;break;
 case 65: 
 HEAP8[($__st_1233)]=0;
 var $177=((($__n_might_match_3231)-(1))|0);
 var $__consume_1_off0=$__consume_0_off0235;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$177;label=66;break;
 case 66: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $179=(($__ky1_0236+12)|0);
 var $180=($179|0)==($__ke|0);
 if($180){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=68;break;}else{label=67;break;}
 case 67: 
 var $181=(($__st_1233+1)|0);
 var $__n_might_match_3231=$__n_might_match_4;var $__n_does_match_3232=$__n_does_match_4;var $__st_1233=$181;var $__consume_0_off0235=$__consume_1_off0;var $__ky1_0236=$179;label=54;break;
 case 68: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=69;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa276=$__n_might_match_3_lcssa;label=81;break;}
 case 69: 
 var $183=HEAP32[(($15)>>2)];
 var $184=(($183+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($183+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=70;break;}else{label=71;break;}
 case 70: 
 var $190=$183;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+40)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=6;break; }
 case 71: 
 var $196=(($185+4)|0);
 HEAP32[(($184)>>2)]=$196;
 label=72;break;
 case 72: 
 var $197=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($197>>>0)<2;
 var $brmerge=$_not|$14;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa276=$__n_might_match_3_lcssa;label=81;break;}else{label=73;break;}
 case 73: 
 var $198=((($__indx_0)+(1))|0);
 var $__n_does_match_5245=$__n_does_match_3_lcssa;var $__st_2246=$__status_0;var $__ky2_0247=$__kb;label=74;break;
 case 74: 
 var $__ky2_0247;
 var $__st_2246;
 var $__n_does_match_5245;
 var $200=HEAP8[($__st_2246)];
 var $201=(($200<<24)>>24)==2;
 if($201){label=75;break;}else{var $__n_does_match_6=$__n_does_match_5245;label=80;break;}
 case 75: 
 var $203=$__ky2_0247;
 var $204=HEAP8[($203)];
 var $205=($204&255);
 var $206=$205&1;
 var $207=($206|0)==0;
 if($207){label=77;break;}else{label=76;break;}
 case 76: 
 var $209=(($__ky2_0247+4)|0);
 var $210=HEAP32[(($209)>>2)];
 var $213=$210;label=78;break;
 case 77: 
 var $212=$205>>>1;
 var $213=$212;label=78;break;
 case 78: 
 var $213;
 var $214=($213|0)==($198|0);
 if($214){var $__n_does_match_6=$__n_does_match_5245;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP8[($__st_2246)]=0;
 var $216=((($__n_does_match_5245)-(1))|0);
 var $__n_does_match_6=$216;label=80;break;
 case 80: 
 var $__n_does_match_6;
 var $218=(($__ky2_0247+12)|0);
 var $219=(($__st_2246+1)|0);
 var $220=($218|0)==($__ke|0);
 if($220){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa276=$__n_might_match_3_lcssa;label=81;break;}else{var $__n_does_match_5245=$__n_does_match_6;var $__st_2246=$219;var $__ky2_0247=$218;label=74;break;}
 case 81: 
 var $__n_might_match_3_lcssa276;
 var $__n_does_match_7;
 var $221=((($__indx_0)+(1))|0);
 var $__indx_0=$221;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa276;label=19;break;
 case 82: 
 var $223=($79|0)==0;
 if($223){var $240=1;label=89;break;}else{label=83;break;}
 case 83: 
 var $225=(($79+12)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($79+16)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($226|0)==($228|0);
 if($229){label=84;break;}else{label=85;break;}
 case 84: 
 var $231=$79;
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$234]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0204=$235;label=86;break; } else { label=7;break; }
 case 85: 
 var $237=HEAP32[(($226)>>2)];
 var $_0204=$237;label=86;break;
 case 86: 
 var $_0204;
 var $238=($_0204|0)==-1;
 if($238){label=88;break;}else{label=87;break;}
 case 87: 
 var $_pre275=HEAP32[(($15)>>2)];
 var $phitmp=($_pre275|0)==0;
 var $240=$phitmp;label=89;break;
 case 88: 
 HEAP32[(($15)>>2)]=0;
 var $240=1;label=89;break;
 case 89: 
 var $240;
 if($80){label=95;break;}else{label=90;break;}
 case 90: 
 var $242=(($78+12)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(($78+16)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($243|0)==($245|0);
 if($246){label=91;break;}else{label=92;break;}
 case 91: 
 var $248=$78;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+36)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$251]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$252;label=93;break; } else { label=7;break; }
 case 92: 
 var $254=HEAP32[(($243)>>2)];
 var $_0=$254;label=93;break;
 case 93: 
 var $_0;
 var $255=($_0|0)==-1;
 if($255){label=94;break;}else{label=96;break;}
 case 94: 
 HEAP32[(($16)>>2)]=0;
 label=95;break;
 case 95: 
 if($240){label=97;break;}else{label=98;break;}
 case 96: 
 var $257=($78|0)==0;
 var $tmp218=$240^$257;
 if($tmp218){label=98;break;}else{label=97;break;}
 case 97: 
 var $259=HEAP32[(($__err)>>2)];
 var $260=$259|2;
 HEAP32[(($__err)>>2)]=$260;
 label=98;break;
 case 98: 
 if($14){label=102;break;}else{var $_0209225=$__kb;var $__st_3226=$__status_0;label=99;break;}
 case 99: 
 var $__st_3226;
 var $_0209225;
 var $261=HEAP8[($__st_3226)];
 var $262=(($261<<24)>>24)==2;
 if($262){var $_0209224=$_0209225;label=103;break;}else{label=100;break;}
 case 100: 
 var $264=(($_0209225+12)|0);
 var $265=($264|0)==($__ke|0);
 if($265){label=102;break;}else{label=101;break;}
 case 101: 
 var $266=(($__st_3226+1)|0);
 var $_0209225=$264;var $__st_3226=$266;label=99;break;
 case 102: 
 var $267=HEAP32[(($__err)>>2)];
 var $268=$267|4;
 HEAP32[(($__err)>>2)]=$268;
 var $_0209224=$__ke;label=103;break;
 case 103: 
 var $_0209224;
 var $269=($__stat_hold_sroa_0_1|0)==0;
 if($269){label=105;break;}else{label=104;break;}
 case 104: 
 _free($__stat_hold_sroa_0_1);
 label=105;break;
 case 105: 
 STACKTOP=sp;return $_0209224;
 case 106: 
 var $271$0;
 var $271$1;
 ___resumeException($271$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=$74?$76:$75;
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i15=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17936)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$3,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $7=HEAP32[((17940)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+48)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,14408,14434,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i15;
 var $31=HEAP32[((17552)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i16=(($__p_i_i_i15)|0);
 HEAP32[(($_sroa_016_0__idx_i_i16)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i17=(($__p_i_i_i15+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i17)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i18=(($__p_i_i_i15+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$30,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $34=HEAP32[((17556)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+16)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$55;
 var $56=$46;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+20)|0);
 var $59=HEAP32[(($58)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $60=HEAP32[(($1)>>2)];
 var $61=(($60)|0);
 var $62=__ZNSt3__114__shared_count16__release_sharedEv($61);
 STACKTOP=sp;return;
 case 17: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65)|0);
 var $67=__ZNSt3__114__shared_count16__release_sharedEv($66);
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$6?43:45;
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_049=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_0=$__atoms;label=12;break;
 case 12: 
 var $_0;
 var $40=($_0|0)==($38|0);
 if($40){var $_0_lcssa=$38;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP32[(($_0)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_0+4)|0);
 if($43){var $_0_lcssa=$_0;label=14;break;}else{var $_0=$44;label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $45=$_0_lcssa;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_049=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_049=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_049=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_049=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_049=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((14408+$48)|0);
 var $67=HEAP8[($66)];
 var $68=HEAP32[(($__a_end)>>2)];
 var $69=(($68+1)|0);
 HEAP32[(($__a_end)>>2)]=$69;
 HEAP8[($68)]=$67;
 var $_049=0;label=23;break;
 case 22: 
 var $71=((14408+$48)|0);
 var $72=HEAP8[($71)];
 var $73=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$73;
 HEAP8[($1)]=$72;
 var $74=HEAP32[(($__dc)>>2)];
 var $75=((($74)+(1))|0);
 HEAP32[(($__dc)>>2)]=$75;
 var $_049=0;label=23;break;
 case 23: 
 var $_049;
 return $_049;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=$74?$76:$75;
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$156$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=$74?$76:$75;
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=$74?$76:$75;
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=$74?$76:$75;
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$156;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $1=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&74;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==0){ label=3;break;}else if(($4|0)==64){ var $_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i=16;label=5;break;
 case 3: 
 var $_0_i=0;label=5;break;
 case 4: 
 var $_0_i=10;label=5;break;
 case 5: 
 var $_0_i;
 var $8=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$8,$__thousands_sep);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $9=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $10=HEAP8[($1)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=8;break;}else{label=7;break;}
 case 7: 
 var $14=(($__buf+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162=(($9+1)|0);
 var $18=$15;var $_pre_phi=$_pre162;var $_pre_phi164=$14;label=9;break;
 case 8: 
 var $17=(($9+1)|0);
 var $_pre163=(($__buf+8)|0);
 var $18=$17;var $_pre_phi=$17;var $_pre_phi164=$_pre163;label=9;break;
 case 9: 
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[(($__a_end)>>2)]=$18;
 var $19=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$19;
 HEAP32[(($__dc)>>2)]=0;
 var $20=(($__b)|0);
 var $21=(($__e)|0);
 var $22=(($__buf)|0);
 var $23=(($__buf+4)|0);
 var $24=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($20)>>2)];
 var $__a_0=$18;var $25=$_pre;label=10;break;
 case 10: 
 var $25;
 var $__a_0;
 var $26=($25|0)==0;
 if($26){var $43=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$38;label=14;break; } else { label=35;break; }
 case 13: 
 var $40=HEAP32[(($29)>>2)];
 var $_0155=$40;label=14;break;
 case 14: 
 var $_0155;
 var $41=($_0155|0)==-1;
 if($41){label=15;break;}else{var $43=$25;label=16;break;}
 case 15: 
 HEAP32[(($20)>>2)]=0;
 var $43=0;label=16;break;
 case 16: 
 var $43;
 var $44=($43|0)==0;
 var $45=HEAP32[(($21)>>2)];
 var $46=($45|0)==0;
 if($46){label=22;break;}else{label=17;break;}
 case 17: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$45;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$58;label=20;break; } else { label=35;break; }
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_0154=$60;label=20;break;
 case 20: 
 var $_0154;
 var $61=($_0154|0)==-1;
 if($61){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($21)>>2)]=0;
 label=22;break;
 case 22: 
 if($44){var $__a_2=$__a_0;var $133=0;var $132=1;label=45;break;}else{var $66=0;var $65=1;label=24;break;}
 case 23: 
 var $63=($45|0)==0;
 var $64=$44^$63;
 if($64){var $66=$45;var $65=$63;label=24;break;}else{var $__a_2=$__a_0;var $133=$45;var $132=$63;label=45;break;}
 case 24: 
 var $65;
 var $66;
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=$67;
 var $69=$__a_0;
 var $70=((($68)-($69))|0);
 var $71=HEAP8[($1)];
 var $72=($71&255);
 var $73=$72&1;
 var $74=($73|0)==0;
 var $75=HEAP32[(($23)>>2)];
 var $76=$72>>>1;
 var $77=$74?$76:$75;
 var $78=($70|0)==($77|0);
 if($78){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $86=$81;var $85=$81;label=28;break;
 case 27: 
 var $83=$72>>>1;
 var $84=$72>>>1;
 var $86=$84;var $85=$83;label=28;break;
 case 28: 
 var $85;
 var $86;
 var $87=$86<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $88=HEAP8[($1)];
 var $89=$88&1;
 var $90=(($89<<24)>>24)==0;
 if($90){var $94=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($22)>>2)];
 var $93=$92&-2;
 var $phitmp159=((($93)-(1))|0);
 var $94=$phitmp159;label=31;break;
 case 31: 
 var $94;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$94,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $95=HEAP8[($1)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $100=$_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $99=HEAP32[(($_pre_phi164)>>2)];
 var $100=$99;label=34;break;
 case 34: 
 var $100;
 var $101=(($100+$85)|0);
 HEAP32[(($__a_end)>>2)]=$101;
 var $__a_1=$100;label=38;break;
 case 35: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $103=(($43+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($43+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($104|0)==($106|0);
 if($107){label=39;break;}else{label=40;break;}
 case 39: 
 var $109=$43;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$113;label=41;break; } else { label=35;break; }
 case 40: 
 var $115=HEAP32[(($104)>>2)];
 var $_0=$115;label=41;break;
 case 41: 
 var $_0;
 var $117=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,$_0_i,$__a_1,$__a_end,$__dc,$24,$__grouping,$19,$__g_end,$8);
 var $118=($117|0)==0;
 if($118){label=42;break;}else{var $__a_2=$__a_1;var $133=$66;var $132=$65;label=45;break;}
 case 42: 
 var $120=HEAP32[(($103)>>2)];
 var $121=HEAP32[(($105)>>2)];
 var $122=($120|0)==($121|0);
 if($122){label=43;break;}else{label=44;break;}
 case 43: 
 var $124=$43;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+40)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $25=$43;label=10;break; } else { label=35;break; }
 case 44: 
 var $130=(($120+4)|0);
 HEAP32[(($103)>>2)]=$130;
 var $__a_0=$__a_1;var $25=$43;label=10;break;
 case 45: 
 var $132;
 var $133;
 var $__a_2;
 var $134=$__grouping;
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$136&1;
 var $138=($137|0)==0;
 if($138){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($__grouping+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $144=$141;label=48;break;
 case 47: 
 var $143=$136>>>1;
 var $144=$143;label=48;break;
 case 48: 
 var $144;
 var $145=($144|0)==0;
 if($145){label=51;break;}else{label=49;break;}
 case 49: 
 var $147=HEAP32[(($__g_end)>>2)];
 var $148=$147;
 var $149=$__g;
 var $150=((($148)-($149))|0);
 var $151=($150|0)<160;
 if($151){label=50;break;}else{label=51;break;}
 case 50: 
 var $153=HEAP32[(($__dc)>>2)];
 var $154=(($147+4)|0);
 HEAP32[(($__g_end)>>2)]=$154;
 HEAP32[(($147)>>2)]=$153;
 label=51;break;
 case 51: 
 var $155=HEAP32[(($__a_end)>>2)];
 var $156$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$155,$__err,$_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $156$0=$156$r;var $156$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$156$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$156$1;
 var $158=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$19,$158,$__err);
 if($44){var $175=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $160=(($43+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($43+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=54;break;}else{label=55;break;}
 case 54: 
 var $166=$43;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157=$170;label=56;break; } else { label=36;break; }
 case 55: 
 var $172=HEAP32[(($161)>>2)];
 var $_0157=$172;label=56;break;
 case 56: 
 var $_0157;
 var $173=($_0157|0)==-1;
 if($173){label=57;break;}else{var $175=$43;label=58;break;}
 case 57: 
 HEAP32[(($20)>>2)]=0;
 var $175=0;label=58;break;
 case 58: 
 var $175;
 var $176=($175|0)==0;
 if($132){label=64;break;}else{label=59;break;}
 case 59: 
 var $178=(($133+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($133+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=60;break;}else{label=61;break;}
 case 60: 
 var $184=$133;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156=$188;label=62;break; } else { label=36;break; }
 case 61: 
 var $190=HEAP32[(($179)>>2)];
 var $_0156=$190;label=62;break;
 case 62: 
 var $_0156;
 var $191=($_0156|0)==-1;
 if($191){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($21)>>2)]=0;
 label=64;break;
 case 64: 
 if($176){label=66;break;}else{label=67;break;}
 case 65: 
 var $193=($133|0)==0;
 var $tmp158=$176^$193;
 if($tmp158){label=67;break;}else{label=66;break;}
 case 66: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=67;break;
 case 67: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$175;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre161=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre161;var $_pre_phi163=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre162=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi163=$_pre162;label=5;break;
 case 5: 
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0153=$34;label=10;break;
 case 10: 
 var $_0153;
 var $35=($_0153|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0152=$54;label=16;break;
 case 16: 
 var $_0152;
 var $55=($_0152|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=$68?$70:$69;
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp157=((($87)-(1))|0);
 var $88=$phitmp157;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi163)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_0155=$170;label=53;break;
 case 53: 
 var $_0155;
 var $171=($_0155|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_0154=$188;label=59;break;
 case 59: 
 var $_0154;
 var $189=($_0154|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp156=$174^$191;
 if($tmp156){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i18=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17936)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$3,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $7=HEAP32[((17940)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 (function() { try { __THREW__ = 0; return ___cxa_throw($21,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $23=$19;
 var $24=$19;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+48)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23,14408,14440,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$__p_i_i_i18;
 var $31=HEAP32[((17552)>>2)];
 var $32=($31|0)==-1;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i19=(($__p_i_i_i18)|0);
 HEAP32[(($_sroa_016_0__idx_i_i19)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i20=(($__p_i_i_i18+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i20)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i21=(($__p_i_i_i18+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i21)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$30,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $34=HEAP32[((17556)>>2)];
 var $35=((($34)-(1))|0);
 var $36=(($29+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$37;
 var $41=$39;
 var $42=((($40)-($41))|0);
 var $43=$42>>2;
 var $44=($43>>>0)>($35>>>0);
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=(($39+($35<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 __ZNSt8bad_castC2Ev($49);
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $50=$46;
 var $51=$46;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$55;
 var $56=HEAP32[(($51)>>2)];
 var $57=(($56+16)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$59;
 var $60=$46;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+20)|0);
 var $63=HEAP32[(($62)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($agg_result,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $64=HEAP32[(($1)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 STACKTOP=sp;return;
 case 18: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $69=HEAP32[(($1)>>2)];
 var $70=(($69)|0);
 var $71=__ZNSt3__114__shared_count16__release_sharedEv($70);
 ___resumeException($68$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_082=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_082=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_082=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_082=0;label=36;break;
 case 9: 
 var $31=($__ct|0)==($__thousands_sep|0);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_082=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_082=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_082=0;label=36;break;
 case 17: 
 var $59=(($__atoms+128)|0);
 var $_0=$__atoms;label=18;break;
 case 18: 
 var $_0;
 var $61=($_0|0)==($59|0);
 if($61){var $_0_lcssa=$59;label=20;break;}else{label=19;break;}
 case 19: 
 var $63=HEAP32[(($_0)>>2)];
 var $64=($63|0)==($__ct|0);
 var $65=(($_0+4)|0);
 if($64){var $_0_lcssa=$_0;label=20;break;}else{var $_0=$65;label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $66=$_0_lcssa;
 var $67=$__atoms;
 var $68=((($66)-($67))|0);
 var $69=$68>>2;
 var $70=($68|0)>124;
 if($70){var $_082=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $72=((14408+$69)|0);
 var $73=HEAP8[($72)];
 if(($69|0)==25|($69|0)==24){ label=22;break;}else if(($69|0)==22|($69|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $75=HEAP32[(($__a_end)>>2)];
 var $76=($75|0)==($__a|0);
 if($76){label=24;break;}else{label=23;break;}
 case 23: 
 var $78=((($75)-(1))|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$80&95;
 var $82=HEAP8[($__exp)];
 var $83=($82&255);
 var $84=$83&127;
 var $85=($81|0)==($84|0);
 if($85){label=24;break;}else{var $_082=-1;label=36;break;}
 case 24: 
 var $87=(($75+1)|0);
 HEAP32[(($__a_end)>>2)]=$87;
 HEAP8[($75)]=$73;
 var $_082=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $90=($73&255);
 var $91=$90&95;
 var $92=HEAP8[($__exp)];
 var $93=(($92<<24)>>24);
 var $94=($91|0)==($93|0);
 if($94){label=27;break;}else{label=34;break;}
 case 27: 
 var $96=$92|-128;
 HEAP8[($__exp)]=$96;
 var $97=HEAP8[($__in_units)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $101=$__grouping;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 var $107=(($__grouping+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $111=$108;label=31;break;
 case 30: 
 var $110=$103>>>1;
 var $111=$110;label=31;break;
 case 31: 
 var $111;
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=32;break;}
 case 32: 
 var $114=HEAP32[(($__g_end)>>2)];
 var $115=$114;
 var $116=$__g;
 var $117=((($115)-($116))|0);
 var $118=($117|0)<160;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 var $120=HEAP32[(($__dc)>>2)];
 var $121=(($114+4)|0);
 HEAP32[(($__g_end)>>2)]=$121;
 HEAP32[(($114)>>2)]=$120;
 label=34;break;
 case 34: 
 var $123=HEAP32[(($__a_end)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 HEAP8[($123)]=$73;
 var $125=($68|0)>84;
 if($125){var $_082=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $127=HEAP32[(($__dc)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($__dc)>>2)]=$128;
 var $_082=0;label=36;break;
 case 36: 
 var $_082;
 return $_082;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre161=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre161;var $_pre_phi163=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre162=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi163=$_pre162;label=5;break;
 case 5: 
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0153=$34;label=10;break;
 case 10: 
 var $_0153;
 var $35=($_0153|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0152=$54;label=16;break;
 case 16: 
 var $_0152;
 var $55=($_0152|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=$68?$70:$69;
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp157=((($87)-(1))|0);
 var $88=$phitmp157;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi163)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_0155=$170;label=53;break;
 case 53: 
 var $_0155;
 var $171=($_0155|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_0154=$188;label=59;break;
 case 59: 
 var $_0154;
 var $189=($_0154|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp156=$174^$191;
 if($tmp156){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $0=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $3=HEAP8[($0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=(($__buf+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $_pre161=(($2+1)|0);
 var $11=$8;var $_pre_phi=$_pre161;var $_pre_phi163=$7;label=5;break;
 case 4: 
 var $10=(($2+1)|0);
 var $_pre162=(($__buf+8)|0);
 var $11=$10;var $_pre_phi=$10;var $_pre_phi163=$_pre162;label=5;break;
 case 5: 
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[(($__a_end)>>2)]=$11;
 var $12=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $13=(($__b)|0);
 var $14=(($__e)|0);
 var $15=(($__buf)|0);
 var $16=(($__buf+4)|0);
 var $17=HEAP32[(($__decimal_point)>>2)];
 var $18=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($13)>>2)];
 var $__a_0=$11;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $__a_0;
 var $20=($19|0)==0;
 if($20){var $37=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $22=(($19+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($19+16)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$19;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153=$32;label=10;break; } else { label=31;break; }
 case 9: 
 var $34=HEAP32[(($23)>>2)];
 var $_0153=$34;label=10;break;
 case 10: 
 var $_0153;
 var $35=($_0153|0)==-1;
 if($35){label=11;break;}else{var $37=$19;label=12;break;}
 case 11: 
 HEAP32[(($13)>>2)]=0;
 var $37=0;label=12;break;
 case 12: 
 var $37;
 var $38=($37|0)==0;
 var $39=HEAP32[(($14)>>2)];
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=13;break;}
 case 13: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152=$52;label=16;break; } else { label=31;break; }
 case 15: 
 var $54=HEAP32[(($43)>>2)];
 var $_0152=$54;label=16;break;
 case 16: 
 var $_0152;
 var $55=($_0152|0)==-1;
 if($55){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($14)>>2)]=0;
 label=18;break;
 case 18: 
 if($38){var $__a_2=$__a_0;var $127=0;var $126=1;label=41;break;}else{var $60=0;var $59=1;label=20;break;}
 case 19: 
 var $57=($39|0)==0;
 var $58=$38^$57;
 if($58){var $60=$39;var $59=$57;label=20;break;}else{var $__a_2=$__a_0;var $127=$39;var $126=$57;label=41;break;}
 case 20: 
 var $59;
 var $60;
 var $61=HEAP32[(($__a_end)>>2)];
 var $62=$61;
 var $63=$__a_0;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($0)];
 var $66=($65&255);
 var $67=$66&1;
 var $68=($67|0)==0;
 var $69=HEAP32[(($16)>>2)];
 var $70=$66>>>1;
 var $71=$68?$70:$69;
 var $72=($64|0)==($71|0);
 if($72){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($68){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=HEAP32[(($16)>>2)];
 var $80=$75;var $79=$75;label=24;break;
 case 23: 
 var $77=$66>>>1;
 var $78=$66>>>1;
 var $80=$78;var $79=$77;label=24;break;
 case 24: 
 var $79;
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$81,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $82=HEAP8[($0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $86=HEAP32[(($15)>>2)];
 var $87=$86&-2;
 var $phitmp157=((($87)-(1))|0);
 var $88=$phitmp157;label=27;break;
 case 27: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$88,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $89=HEAP8[($0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($_pre_phi163)>>2)];
 var $94=$93;label=30;break;
 case 30: 
 var $94;
 var $95=(($94+$79)|0);
 HEAP32[(($__a_end)>>2)]=$95;
 var $__a_1=$94;label=34;break;
 case 31: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $97=(($37+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($37+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=35;break;}else{label=36;break;}
 case 35: 
 var $103=$37;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$107;label=37;break; } else { label=31;break; }
 case 36: 
 var $109=HEAP32[(($98)>>2)];
 var $_0=$109;label=37;break;
 case 37: 
 var $_0;
 var $111=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0,$__in_units,$__exp,$__a_1,$__a_end,$17,$18,$__grouping,$12,$__g_end,$__dc,$1);
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $__a_2=$__a_1;var $127=$60;var $126=$59;label=41;break;}
 case 38: 
 var $114=HEAP32[(($97)>>2)];
 var $115=HEAP32[(($99)>>2)];
 var $116=($114|0)==($115|0);
 if($116){label=39;break;}else{label=40;break;}
 case 39: 
 var $118=$37;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+40)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $19=$37;label=6;break; } else { label=31;break; }
 case 40: 
 var $124=(($114+4)|0);
 HEAP32[(($97)>>2)]=$124;
 var $__a_0=$__a_1;var $19=$37;label=6;break;
 case 41: 
 var $126;
 var $127;
 var $__a_2;
 var $128=$__grouping;
 var $129=HEAP8[($128)];
 var $130=($129&255);
 var $131=$130&1;
 var $132=($131|0)==0;
 if($132){label=43;break;}else{label=42;break;}
 case 42: 
 var $134=(($__grouping+4)|0);
 var $135=HEAP32[(($134)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$130>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){label=48;break;}else{label=45;break;}
 case 45: 
 var $141=HEAP8[($__in_units)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=HEAP32[(($__g_end)>>2)];
 var $146=$145;
 var $147=$__g;
 var $148=((($146)-($147))|0);
 var $149=($148|0)<160;
 if($149){label=47;break;}else{label=48;break;}
 case 47: 
 var $151=HEAP32[(($__dc)>>2)];
 var $152=(($145+4)|0);
 HEAP32[(($__g_end)>>2)]=$152;
 HEAP32[(($145)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($__a_end)>>2)];
 var $154=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$153,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$154;
 var $156=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$12,$156,$__err);
 if($38){var $173=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $158=(($37+12)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($37+16)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($159|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$37;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+36)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155=$168;label=53;break; } else { label=32;break; }
 case 52: 
 var $170=HEAP32[(($159)>>2)];
 var $_0155=$170;label=53;break;
 case 53: 
 var $_0155;
 var $171=($_0155|0)==-1;
 if($171){label=54;break;}else{var $173=$37;label=55;break;}
 case 54: 
 HEAP32[(($13)>>2)]=0;
 var $173=0;label=55;break;
 case 55: 
 var $173;
 var $174=($173|0)==0;
 if($126){label=61;break;}else{label=56;break;}
 case 56: 
 var $176=(($127+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($127+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=57;break;}else{label=58;break;}
 case 57: 
 var $182=$127;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154=$186;label=59;break; } else { label=32;break; }
 case 58: 
 var $188=HEAP32[(($177)>>2)];
 var $_0154=$188;label=59;break;
 case 59: 
 var $_0154;
 var $189=($_0154|0)==-1;
 if($189){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($14)>>2)]=0;
 label=61;break;
 case 61: 
 if($174){label=63;break;}else{label=64;break;}
 case 62: 
 var $191=($127|0)==0;
 var $tmp156=$174^$191;
 if($tmp156){label=64;break;}else{label=63;break;}
 case 63: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=64;break;
 case 64: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$173;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $__grouping170=$__grouping;
 var $0=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping170)>>2)]=0; HEAP32[((($__grouping170)+(4))>>2)]=0; HEAP32[((($__grouping170)+(8))>>2)]=0;
 var $1=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($0,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17936)>>2)];
 var $7=($6|0)==-1;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $9=HEAP32[((17940)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $25=$21;
 var $26=(($__atoms)|0);
 var $27=$21;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($25,14408,14434,$26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 var $32=HEAP32[(($3)>>2)];
 var $33=(($32)|0);
 var $34=__ZNSt3__114__shared_count16__release_sharedEv($33);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $35=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=42;break; }
 case 10: 
 var $36=HEAP8[($1)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 if($38){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=(($__buf+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $_pre171=(($35+1)|0);
 var $44=$41;var $_pre_phi=$_pre171;var $_pre_phi173=$40;label=13;break;
 case 12: 
 var $43=(($35+1)|0);
 var $_pre172=(($__buf+8)|0);
 var $44=$43;var $_pre_phi=$43;var $_pre_phi173=$_pre172;label=13;break;
 case 13: 
 var $_pre_phi173;
 var $_pre_phi;
 var $44;
 HEAP32[(($__a_end)>>2)]=$44;
 var $45=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$45;
 HEAP32[(($__dc)>>2)]=0;
 var $46=(($__b)|0);
 var $47=(($__e)|0);
 var $48=(($__buf)|0);
 var $49=(($__buf+4)|0);
 var $_pre=HEAP32[(($46)>>2)];
 var $__a_0=$44;var $50=$_pre;label=14;break;
 case 14: 
 var $50;
 var $__a_0;
 var $51=($50|0)==0;
 if($51){var $68=0;label=20;break;}else{label=15;break;}
 case 15: 
 var $53=(($50+12)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($50+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($54|0)==($56|0);
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $59=$50;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+36)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0161=$63;label=18;break; } else { label=41;break; }
 case 17: 
 var $65=HEAP32[(($54)>>2)];
 var $_0161=$65;label=18;break;
 case 18: 
 var $_0161;
 var $66=($_0161|0)==-1;
 if($66){label=19;break;}else{var $68=$50;label=20;break;}
 case 19: 
 HEAP32[(($46)>>2)]=0;
 var $68=0;label=20;break;
 case 20: 
 var $68;
 var $69=($68|0)==0;
 var $70=HEAP32[(($47)>>2)];
 var $71=($70|0)==0;
 if($71){label=26;break;}else{label=21;break;}
 case 21: 
 var $73=(($70+12)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($70+16)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($74|0)==($76|0);
 if($77){label=22;break;}else{label=23;break;}
 case 22: 
 var $79=$70;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0160=$83;label=24;break; } else { label=41;break; }
 case 23: 
 var $85=HEAP32[(($74)>>2)];
 var $_0160=$85;label=24;break;
 case 24: 
 var $_0160;
 var $86=($_0160|0)==-1;
 if($86){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($47)>>2)]=0;
 label=26;break;
 case 26: 
 if($69){var $__a_2=$__a_0;label=51;break;}else{label=28;break;}
 case 27: 
 var $88=($70|0)==0;
 var $89=$69^$88;
 if($89){label=28;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 28: 
 var $90=HEAP32[(($__a_end)>>2)];
 var $91=$90;
 var $92=$__a_0;
 var $93=((($91)-($92))|0);
 var $94=HEAP8[($1)];
 var $95=($94&255);
 var $96=$95&1;
 var $97=($96|0)==0;
 var $98=HEAP32[(($49)>>2)];
 var $99=$95>>>1;
 var $100=$97?$99:$98;
 var $101=($93|0)==($100|0);
 if($101){label=29;break;}else{var $__a_1=$__a_0;label=44;break;}
 case 29: 
 if($97){label=31;break;}else{label=30;break;}
 case 30: 
 var $104=HEAP32[(($49)>>2)];
 var $109=$104;var $108=$104;label=32;break;
 case 31: 
 var $106=$95>>>1;
 var $107=$95>>>1;
 var $109=$107;var $108=$106;label=32;break;
 case 32: 
 var $108;
 var $109;
 var $110=$109<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$110,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=41;break; }
 case 33: 
 var $111=HEAP8[($1)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){var $117=10;label=35;break;}else{label=34;break;}
 case 34: 
 var $115=HEAP32[(($48)>>2)];
 var $116=$115&-2;
 var $phitmp165=((($116)-(1))|0);
 var $117=$phitmp165;label=35;break;
 case 35: 
 var $117;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$117,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $118=HEAP8[($1)];
 var $119=$118&1;
 var $120=(($119<<24)>>24)==0;
 if($120){var $123=$_pre_phi;label=38;break;}else{label=37;break;}
 case 37: 
 var $122=HEAP32[(($_pre_phi173)>>2)];
 var $123=$122;label=38;break;
 case 38: 
 var $123;
 var $124=(($123+$108)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 var $__a_1=$123;label=44;break;
 case 39: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0158=$128;var $_0159=$127;label=75;break;
 case 40: 
 var $130$0 = ___cxa_find_matching_catch(-1, -1); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $133=HEAP32[(($3)>>2)];
 var $134=(($133)|0);
 var $135=__ZNSt3__114__shared_count16__release_sharedEv($134);
 var $_0158=$132;var $_0159=$131;label=75;break;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=43;break;
 case 43: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $136=$eh_lpad_body$0;
 var $137=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $_0158=$137;var $_0159=$136;label=75;break;
 case 44: 
 var $__a_1;
 var $138=(($68+12)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($68+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($139|0)==($141|0);
 if($142){label=45;break;}else{label=46;break;}
 case 45: 
 var $144=$68;
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+36)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$148;label=47;break; } else { label=41;break; }
 case 46: 
 var $150=HEAP32[(($139)>>2)];
 var $_0=$150;label=47;break;
 case 47: 
 var $_0;
 var $152=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$45,$__g_end,$26);
 var $153=($152|0)==0;
 if($153){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $155=HEAP32[(($138)>>2)];
 var $156=HEAP32[(($140)>>2)];
 var $157=($155|0)==($156|0);
 if($157){label=49;break;}else{label=50;break;}
 case 49: 
 var $159=$68;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+40)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $50=$68;label=14;break; } else { label=41;break; }
 case 50: 
 var $165=(($155+4)|0);
 HEAP32[(($138)>>2)]=$165;
 var $__a_0=$__a_1;var $50=$68;label=14;break;
 case 51: 
 var $__a_2;
 var $167=(($__a_2+3)|0);
 HEAP8[($167)]=0;
 var $168=HEAP8[(18504)];
 var $169=(($168<<24)>>24)==0;
 if($169){label=52;break;}else{label=56;break;}
 case 52: 
 var $171=___cxa_guard_acquire(18504);
 var $172=($171|0)==0;
 if($172){label=56;break;}else{label=53;break;}
 case 53: 
 var $174=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((16504)>>2)]=$174;
 label=56;break;
 case 55: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1); var $177$1 = tempRet0;
 var $eh_lpad_body$1=$177$1;var $eh_lpad_body$0=$177$0;label=43;break;
 case 56: 
 var $179=HEAP32[((16504)>>2)];
 var $180=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$179,4712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=42;break; }
 case 57: 
 var $182=($180|0)==1;
 if($182){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $185=HEAP32[(($46)>>2)];
 var $186=($185|0)==0;
 if($186){var $203=0;label=65;break;}else{label=60;break;}
 case 60: 
 var $188=(($185+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($185+16)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($189|0)==($191|0);
 if($192){label=61;break;}else{label=62;break;}
 case 61: 
 var $194=$185;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+36)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0163=$198;label=63;break; } else { label=42;break; }
 case 62: 
 var $200=HEAP32[(($189)>>2)];
 var $_0163=$200;label=63;break;
 case 63: 
 var $_0163;
 var $201=($_0163|0)==-1;
 if($201){label=64;break;}else{var $203=$185;label=65;break;}
 case 64: 
 HEAP32[(($46)>>2)]=0;
 var $203=0;label=65;break;
 case 65: 
 var $203;
 var $204=($203|0)==0;
 var $205=HEAP32[(($47)>>2)];
 var $206=($205|0)==0;
 if($206){label=71;break;}else{label=66;break;}
 case 66: 
 var $208=(($205+12)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($205+16)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=($209|0)==($211|0);
 if($212){label=67;break;}else{label=68;break;}
 case 67: 
 var $214=$205;
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+36)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]($205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0162=$218;label=69;break; } else { label=42;break; }
 case 68: 
 var $220=HEAP32[(($209)>>2)];
 var $_0162=$220;label=69;break;
 case 69: 
 var $_0162;
 var $221=($_0162|0)==-1;
 if($221){label=70;break;}else{label=72;break;}
 case 70: 
 HEAP32[(($47)>>2)]=0;
 label=71;break;
 case 71: 
 if($204){label=73;break;}else{label=74;break;}
 case 72: 
 var $223=($205|0)==0;
 var $tmp164=$204^$223;
 if($tmp164){label=74;break;}else{label=73;break;}
 case 73: 
 var $225=HEAP32[(($__err)>>2)];
 var $226=$225|2;
 HEAP32[(($__err)>>2)]=$226;
 label=74;break;
 case 74: 
 var $228=(($agg_result)|0);
 HEAP32[(($228)>>2)]=$203;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 75: 
 var $_0159;
 var $_0158;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $230$0=$_0159;
 var $230$1=0;
 var $231$0=$230$0;
 var $231$1=$_0158;
 ___resumeException($231$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=29;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i;
 var $20=HEAP32[((17560)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$19,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; }
 case 5: 
 var $23=HEAP32[((17564)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($18+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($18+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=26;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $39=$35;
 var $40=HEAP32[(($17)>>2)];
 var $41=(($40)|0);
 var $42=__ZNSt3__114__shared_count16__release_sharedEv($41);
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=(($44+24)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($__nm,$39);
 label=12;break;
 case 11: 
 var $49=(($44+28)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($__nm,$39);
 label=12;break;
 case 12: 
 var $52=$__nm;
 var $53=$__nm;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=14;break;}else{label=13;break;}
 case 13: 
 var $58=(($__nm+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $_pre83=(($52+1)|0);
 var $__i_sroa_0_0_ph=$59;var $_pre_phi=$_pre83;var $_pre_phi85=$58;label=15;break;
 case 14: 
 var $61=(($52+1)|0);
 var $_pre84=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$61;var $_pre_phi=$61;var $_pre_phi85=$_pre84;label=15;break;
 case 15: 
 var $_pre_phi85;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $62=(($__s)|0);
 var $63=(($__nm+4)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $64=$54;label=16;break;
 case 16: 
 var $64;
 var $__i_sroa_0_0;
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){var $69=$_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $68=HEAP32[(($_pre_phi85)>>2)];
 var $69=$68;label=18;break;
 case 18: 
 var $69;
 var $70=($64&255);
 var $71=$70&1;
 var $72=($71|0)==0;
 var $73=HEAP32[(($63)>>2)];
 var $74=$70>>>1;
 var $75=$72?$74:$73;
 var $76=(($69+$75)|0);
 var $77=($__i_sroa_0_0|0)==($76|0);
 if($77){label=28;break;}else{label=19;break;}
 case 19: 
 var $79=HEAP8[($__i_sroa_0_0)];
 var $80=HEAP32[(($62)>>2)];
 var $81=($80|0)==0;
 if($81){label=25;break;}else{label=20;break;}
 case 20: 
 var $83=(($80+24)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($80+28)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($84|0)==($86|0);
 if($87){label=21;break;}else{label=22;break;}
 case 21: 
 var $89=$80;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+52)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($79&255);
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($80,$93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=27;break; }
 case 22: 
 var $95=(($84+1)|0);
 HEAP32[(($83)>>2)]=$95;
 HEAP8[($84)]=$79;
 label=25;break;
 case 23: 
 var $96=($94|0)==-1;
 if($96){label=24;break;}else{label=25;break;}
 case 24: 
 HEAP32[(($62)>>2)]=0;
 label=25;break;
 case 25: 
 var $98=(($__i_sroa_0_0+1)|0);
 var $_pre=HEAP8[($53)];
 var $__i_sroa_0_0=$98;var $64=$_pre;label=16;break;
 case 26: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $101=$100$0;
 var $102=$100$1;
 var $103=HEAP32[(($17)>>2)];
 var $104=(($103)|0);
 var $105=__ZNSt3__114__shared_count16__release_sharedEv($104);
 var $_078=$102;var $_079=$101;label=30;break;
 case 27: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 var $_078=$109;var $_079=$108;label=30;break;
 case 28: 
 var $111=HEAP32[(($62)>>2)];
 var $112=(($agg_result)|0);
 HEAP32[(($112)>>2)]=$111;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 label=29;break;
 case 29: 
 STACKTOP=sp;return;
 case 30: 
 var $_079;
 var $_078;
 var $115$0=$_079;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_078;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(6504)];HEAP8[((($3)+(1))|0)]=HEAP8[(6505)];HEAP8[((($3)+(2))|0)]=HEAP8[(6506)];HEAP8[((($3)+(3))|0)]=HEAP8[(6507)];HEAP8[((($3)+(4))|0)]=HEAP8[(6508)];HEAP8[((($3)+(5))|0)]=HEAP8[(6509)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18504)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18504);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((16504)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);
 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i158=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17944)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$3,270);
 label=3;break;
 case 3: 
 var $7=HEAP32[((17948)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,12744,(374));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i158;
 var $26=HEAP32[((17560)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i159=(($__p_i_i_i158)|0);
 HEAP32[(($_sroa_016_0__idx_i_i159)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i160=(($__p_i_i_i158+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i160)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i161=(($__p_i_i_i158+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i161)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$25,270);
 label=8;break;
 case 8: 
 var $29=HEAP32[((17564)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,12744,(374));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 var $50=$__grouping;
 var $51=$__grouping;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($__grouping+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $61=$58;label=14;break;
 case 13: 
 var $60=$53>>>1;
 var $61=$60;label=14;break;
 case 14: 
 var $61;
 var $62=($61|0)==0;
 if($62){label=15;break;}else{label=20;break;}
 case 15: 
 var $64=$19;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+32)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($23,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $69=$__ne;
 var $70=$__nb;
 var $71=((($69)-($70))|0);
 var $72=(($__ob+$71)|0);
 HEAP32[(($__oe)>>2)]=$72;
 label=43;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $75=HEAP8[($__nb)];
 if((($75<<24)>>24)==45|(($75<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $77=$19;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+28)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($23,$75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $82=(($__nb+1)|0);
 var $83=HEAP32[(($__oe)>>2)];
 var $84=(($83+1)|0);
 HEAP32[(($__oe)>>2)]=$84;
 HEAP8[($83)]=$81;
 var $__nf_0=$82;label=23;break;
 case 23: 
 var $__nf_0;
 var $86=$__ne;
 var $87=$__nf_0;
 var $88=((($86)-($87))|0);
 var $89=($88|0)>1;
 if($89){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $91=HEAP8[($__nf_0)];
 var $92=(($91<<24)>>24)==48;
 if($92){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $94=(($__nf_0+1)|0);
 var $95=HEAP8[($94)];
 if((($95<<24)>>24)==120|(($95<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $97=$19;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+28)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $102=HEAP32[(($__oe)>>2)];
 var $103=(($102+1)|0);
 HEAP32[(($__oe)>>2)]=$103;
 HEAP8[($102)]=$101;
 var $104=HEAP8[($94)];
 var $105=HEAP32[(($97)>>2)];
 var $106=(($105+28)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($23,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $109=(($__nf_0+2)|0);
 var $110=HEAP32[(($__oe)>>2)];
 var $111=(($110+1)|0);
 HEAP32[(($__oe)>>2)]=$111;
 HEAP8[($110)]=$108;
 var $__nf_1=$109;label=29;break;
 case 29: 
 var $__nf_1;
 var $113=($__nf_1|0)==($__ne|0);
 if($113){label=32;break;}else{label=30;break;}
 case 30: 
 var $114=((($__ne)-(1))|0);
 var $115=($__nf_1>>>0)<($114>>>0);
 if($115){var $_0172=$__nf_1;var $116=$114;label=31;break;}else{label=32;break;}
 case 31: 
 var $116;
 var $_0172;
 var $117=HEAP8[($_0172)];
 var $118=HEAP8[($116)];
 HEAP8[($_0172)]=$118;
 HEAP8[($116)]=$117;
 var $119=(($_0172+1)|0);
 var $120=((($116)-(1))|0);
 var $121=($119>>>0)<($120>>>0);
 if($121){var $_0172=$119;var $116=$120;label=31;break;}else{label=32;break;}
 case 32: 
 var $122=$41;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $127=($__nf_1>>>0)<($__ne>>>0);
 if($127){label=34;break;}else{label=40;break;}
 case 34: 
 var $128=(($50+1)|0);
 var $129=$19;
 var $130=(($__grouping+4)|0);
 var $131=(($__grouping+8)|0);
 var $__dc_0167=0;var $__dg_0168=0;var $__p_0169=$__nf_1;label=35;break;
 case 35: 
 var $__p_0169;
 var $__dg_0168;
 var $__dc_0167;
 var $132=HEAP8[($51)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 var $135=HEAP32[(($131)>>2)];
 var $_=$134?$128:$135;
 var $136=(($_+$__dg_0168)|0);
 var $137=HEAP8[($136)];
 var $138=(($137<<24)>>24)==0;
 if($138){var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}else{label=36;break;}
 case 36: 
 var $139=HEAP32[(($131)>>2)];
 var $_174=$134?$128:$139;
 var $140=(($_174+$__dg_0168)|0);
 var $141=HEAP8[($140)];
 var $142=(($141<<24)>>24);
 var $143=($__dc_0167|0)==($142|0);
 if($143){label=37;break;}else{var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}
 case 37: 
 var $144=HEAP32[(($__oe)>>2)];
 var $145=(($144+1)|0);
 HEAP32[(($__oe)>>2)]=$145;
 HEAP8[($144)]=$126;
 var $146=HEAP8[($51)];
 var $147=($146&255);
 var $148=$147&1;
 var $149=($148|0)==0;
 var $150=HEAP32[(($130)>>2)];
 var $151=$147>>>1;
 var $152=$149?$151:$150;
 var $153=((($152)-(1))|0);
 var $154=($__dg_0168>>>0)<($153>>>0);
 var $155=($154&1);
 var $___dg_0=((($155)+($__dg_0168))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $157=HEAP8[($__p_0169)];
 var $158=HEAP32[(($129)>>2)];
 var $159=(($158+28)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$160]($23,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $162=HEAP32[(($__oe)>>2)];
 var $163=(($162+1)|0);
 HEAP32[(($__oe)>>2)]=$163;
 HEAP8[($162)]=$161;
 var $164=((($__dc_1)+(1))|0);
 var $165=(($__p_0169+1)|0);
 var $166=($165>>>0)<($__ne>>>0);
 if($166){var $__dc_0167=$164;var $__dg_0168=$__dg_1;var $__p_0169=$165;label=35;break;}else{label=40;break;}
 case 40: 
 var $167=$__nf_1;
 var $168=$__nb;
 var $169=((($167)-($168))|0);
 var $170=(($__ob+$169)|0);
 var $171=HEAP32[(($__oe)>>2)];
 var $172=($170|0)==($171|0);
 if($172){label=43;break;}else{label=41;break;}
 case 41: 
 var $173=((($171)-(1))|0);
 var $174=($170>>>0)<($173>>>0);
 if($174){var $_0156166=$170;var $175=$173;label=42;break;}else{label=43;break;}
 case 42: 
 var $175;
 var $_0156166;
 var $176=HEAP8[($_0156166)];
 var $177=HEAP8[($175)];
 HEAP8[($_0156166)]=$177;
 HEAP8[($175)]=$176;
 var $178=(($_0156166+1)|0);
 var $179=((($175)-(1))|0);
 var $180=($178>>>0)<($179>>>0);
 if($180){var $_0156166=$178;var $175=$179;label=42;break;}else{label=43;break;}
 case 43: 
 var $181=($__np|0)==($__ne|0);
 if($181){label=44;break;}else{label=45;break;}
 case 44: 
 var $183=HEAP32[(($__oe)>>2)];
 var $storemerge=$183;label=46;break;
 case 45: 
 var $185=$__np;
 var $186=$__nb;
 var $187=((($185)-($186))|0);
 var $188=(($__ob+$187)|0);
 var $storemerge=$188;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18504)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18504);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((16504)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(sp)+(72);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(6504)];HEAP8[((($3)+(1))|0)]=HEAP8[(6505)];HEAP8[((($3)+(2))|0)]=HEAP8[(6506)];HEAP8[((($3)+(3))|0)]=HEAP8[(6507)];HEAP8[((($3)+(4))|0)]=HEAP8[(6508)];HEAP8[((($3)+(5))|0)]=HEAP8[(6509)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18504)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18504);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((16504)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $2=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18504)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18504);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((16504)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i144;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18504)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18504);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((16504)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((16504)>>2)];
 if($specify_precision_0_off0_ph_i144){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre151=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $102=$_pre151;label=47;break;
 case 29: 
 var $64=HEAP8[(18504)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i144){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18504);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((16504)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((16504)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1121149=$83;var $_1150=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18504);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((16504)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((16504)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $103=(($102+$__nc_2)|0);
 var $104=HEAP32[(($6)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i143=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($102)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($102+1)|0);
 var $_0_i143=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($102+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($102+2)|0);
 var $_0_i143=$117;label=54;break;
 case 53: 
 var $_0_i143=$102;label=54;break;
 case 54: 
 var $_0_i143;
 var $119=(($__o)|0);
 var $120=($102|0)==($43|0);
 if($120){var $__ob_0=$119;var $__obh_sroa_0_1=0;var $130=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<1;
 var $123=_malloc($122);
 var $124=($123|0)==0;
 if($124){label=56;break;}else{var $__ob_0=$123;var $__obh_sroa_0_1=$123;var $130=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre152=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $130=$_pre152;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_0120=$129;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $130;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($130,$_0_i143,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $133=(($1)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134)|0);
 var $136=__ZNSt3__114__shared_count16__release_sharedEv($135);
 var $137=(($__s)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($3)|0);
 HEAP32[(($139)>>2)]=$138;
 var $140=HEAP32[(($__op)>>2)];
 var $141=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$140,$141,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $143=(($2)|0);
 var $144=HEAP32[(($143)>>2)];
 HEAP32[(($137)>>2)]=$144;
 var $145=(($agg_result)|0);
 HEAP32[(($145)>>2)]=$144;
 var $146=($__obh_sroa_0_1|0)==0;
 if($146){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $148=($__nbh_sroa_0_1|0)==0;
 if($148){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=(($1)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $_0=$152;var $_0120=$153;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0120;
 var $_0;
 var $159=($__obh_sroa_0_2|0)==0;
 if($159){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $161=($__nbh_sroa_0_1|0)==0;
 if($161){var $_1121149=$_0120;var $_1150=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1121149=$_0120;var $_1150=$_0;label=72;break;
 case 72: 
 var $_1150;
 var $_1121149;
 var $163$0=$_1150;
 var $163$1=0;
 var $164$0=$163$0;
 var $164$1=$_1121149;
 ___resumeException($164$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=($3|0)==0;
 if($13){label=9;break;}else{label=7;break;}
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i191=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17944)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$3,270);
 label=3;break;
 case 3: 
 var $7=HEAP32[((17948)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,12744,(374));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i191;
 var $26=HEAP32[((17560)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i192=(($__p_i_i_i191)|0);
 HEAP32[(($_sroa_016_0__idx_i_i192)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i193=(($__p_i_i_i191+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i193)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i194=(($__p_i_i_i191+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i194)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$25,270);
 label=8;break;
 case 8: 
 var $29=HEAP32[((17564)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,12744,(374));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $50=HEAP8[($__nb)];
 if((($50<<24)>>24)==45|(($50<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $52=$19;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($23,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $57=(($__nb+1)|0);
 var $58=HEAP32[(($__oe)>>2)];
 var $59=(($58+1)|0);
 HEAP32[(($__oe)>>2)]=$59;
 HEAP8[($58)]=$56;
 var $__nf_0=$57;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit208$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit208$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit208$1;var $eh_lpad_body$0=$lpad_loopexit208$0;label=19;break;
 case 16: 
 var $lpad_loopexit220$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit220$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit220$1;var $eh_lpad_body$0=$lpad_loopexit220$0;label=19;break;
 case 17: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit225$1;var $eh_lpad_body$0=$lpad_loopexit225$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit226$1;var $eh_lpad_body$0=$lpad_nonloopexit226$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $61=$__ne;
 var $62=$__nf_0;
 var $63=((($61)-($62))|0);
 var $64=($63|0)>1;
 if($64){label=21;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 21: 
 var $66=HEAP8[($__nf_0)];
 var $67=(($66<<24)>>24)==48;
 if($67){label=22;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 22: 
 var $69=(($__nf_0+1)|0);
 var $70=HEAP8[($69)];
 if((($70<<24)>>24)==120|(($70<<24)>>24)==88){ label=23;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 23: 
 var $72=$19;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=18;break; }
 case 24: 
 var $77=HEAP32[(($__oe)>>2)];
 var $78=(($77+1)|0);
 HEAP32[(($__oe)>>2)]=$78;
 HEAP8[($77)]=$76;
 var $79=(($__nf_0+2)|0);
 var $80=HEAP8[($69)];
 var $81=HEAP32[(($72)>>2)];
 var $82=(($81+28)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($23,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $85=HEAP32[(($__oe)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__oe)>>2)]=$86;
 HEAP8[($85)]=$84;
 var $__ns_0=$79;label=26;break;
 case 26: 
 var $__ns_0;
 var $88=($__ns_0>>>0)<($__ne>>>0);
 if($88){label=27;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}
 case 27: 
 var $90=HEAP8[($__ns_0)];
 var $91=HEAP8[(18504)];
 var $92=(($91<<24)>>24)==0;
 if($92){label=28;break;}else{label=32;break;}
 case 28: 
 var $94=___cxa_guard_acquire(18504);
 var $95=($94|0)==0;
 if($95){label=32;break;}else{label=29;break;}
 case 29: 
 var $97=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=31;break; }
 case 30: 
 HEAP32[((16504)>>2)]=$97;
 label=32;break;
 case 31: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $eh_lpad_body$1=$100$1;var $eh_lpad_body$0=$100$0;label=19;break;
 case 32: 
 var $102=HEAP32[((16504)>>2)];
 var $103=(($90<<24)>>24);
 var $104=(function() { try { __THREW__ = 0; return _isxdigit($103,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=17;break; }
 case 33: 
 var $106=($104|0)==0;
 var $107=(($__ns_0+1)|0);
 if($106){var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}else{var $__ns_0=$107;label=26;break;}
 case 34: 
 var $__ns_1;
 var $108=($__ns_1>>>0)<($__ne>>>0);
 if($108){label=35;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}
 case 35: 
 var $110=HEAP8[($__ns_1)];
 var $111=HEAP8[(18504)];
 var $112=(($111<<24)>>24)==0;
 if($112){label=36;break;}else{label=40;break;}
 case 36: 
 var $114=___cxa_guard_acquire(18504);
 var $115=($114|0)==0;
 if($115){label=40;break;}else{label=37;break;}
 case 37: 
 var $117=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 HEAP32[((16504)>>2)]=$117;
 label=40;break;
 case 39: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $eh_lpad_body$1=$120$1;var $eh_lpad_body$0=$120$0;label=19;break;
 case 40: 
 var $122=HEAP32[((16504)>>2)];
 var $123=(($110<<24)>>24);
 var $124=(function() { try { __THREW__ = 0; return _isdigit($123,$122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=16;break; }
 case 41: 
 var $126=($124|0)==0;
 var $127=(($__ns_1+1)|0);
 if($126){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}else{var $__ns_1=$127;label=34;break;}
 case 42: 
 var $__nf_1;
 var $__ns_2;
 var $128=$__grouping;
 var $129=$__grouping;
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$131&1;
 var $133=($132|0)==0;
 if($133){label=44;break;}else{label=43;break;}
 case 43: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $139=$136;label=45;break;
 case 44: 
 var $138=$131>>>1;
 var $139=$138;label=45;break;
 case 45: 
 var $139;
 var $140=($139|0)==0;
 if($140){label=46;break;}else{label=50;break;}
 case 46: 
 var $142=HEAP32[(($__oe)>>2)];
 var $143=$19;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+32)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($23,$__nf_1,$__ns_2,$142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=18;break; }
 case 47: 
 var $148=$__ns_2;
 var $149=$__nf_1;
 var $150=((($148)-($149))|0);
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+$150)|0);
 HEAP32[(($__oe)>>2)]=$152;
 label=48;break;
 case 48: 
 var $153=($__ns_2>>>0)<($__ne>>>0);
 if($153){label=49;break;}else{var $__nf_3=$__ns_2;label=69;break;}
 case 49: 
 var $154=$19;
 var $__nf_2205=$__ns_2;label=64;break;
 case 50: 
 var $156=($__nf_1|0)==($__ns_2|0);
 if($156){label=53;break;}else{label=51;break;}
 case 51: 
 var $157=((($__ns_2)-(1))|0);
 var $158=($__nf_1>>>0)<($157>>>0);
 if($158){var $_0189216=$__nf_1;var $159=$157;label=52;break;}else{label=53;break;}
 case 52: 
 var $159;
 var $_0189216;
 var $160=HEAP8[($_0189216)];
 var $161=HEAP8[($159)];
 HEAP8[($_0189216)]=$161;
 HEAP8[($159)]=$160;
 var $162=(($_0189216+1)|0);
 var $163=((($159)-(1))|0);
 var $164=($162>>>0)<($163>>>0);
 if($164){var $_0189216=$162;var $159=$163;label=52;break;}else{label=53;break;}
 case 53: 
 var $165=$41;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=18;break; }
 case 54: 
 var $170=($__nf_1>>>0)<($__ns_2>>>0);
 if($170){label=55;break;}else{label=61;break;}
 case 55: 
 var $171=(($128+1)|0);
 var $172=(($__grouping+4)|0);
 var $173=(($__grouping+8)|0);
 var $174=$19;
 var $__dc_0211=0;var $__dg_0212=0;var $__p_0213=$__nf_1;label=56;break;
 case 56: 
 var $__p_0213;
 var $__dg_0212;
 var $__dc_0211;
 var $175=HEAP8[($129)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 var $178=HEAP32[(($173)>>2)];
 var $_=$177?$171:$178;
 var $179=(($_+$__dg_0212)|0);
 var $180=HEAP8[($179)];
 var $181=(($180<<24)>>24)>0;
 if($181){label=57;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 57: 
 var $182=HEAP32[(($173)>>2)];
 var $_236=$177?$171:$182;
 var $183=(($_236+$__dg_0212)|0);
 var $184=HEAP8[($183)];
 var $185=(($184<<24)>>24);
 var $186=($__dc_0211|0)==($185|0);
 if($186){label=58;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 58: 
 var $187=HEAP32[(($__oe)>>2)];
 var $188=(($187+1)|0);
 HEAP32[(($__oe)>>2)]=$188;
 HEAP8[($187)]=$169;
 var $189=HEAP8[($129)];
 var $190=($189&255);
 var $191=$190&1;
 var $192=($191|0)==0;
 var $193=HEAP32[(($172)>>2)];
 var $194=$190>>>1;
 var $195=$192?$194:$193;
 var $196=((($195)-(1))|0);
 var $197=($__dg_0212>>>0)<($196>>>0);
 var $198=($197&1);
 var $___dg_0=((($198)+($__dg_0212))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=59;break;
 case 59: 
 var $__dc_1;
 var $__dg_1;
 var $200=HEAP8[($__p_0213)];
 var $201=HEAP32[(($174)>>2)];
 var $202=(($201+28)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($23,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=15;break; }
 case 60: 
 var $205=HEAP32[(($__oe)>>2)];
 var $206=(($205+1)|0);
 HEAP32[(($__oe)>>2)]=$206;
 HEAP8[($205)]=$204;
 var $207=((($__dc_1)+(1))|0);
 var $208=(($__p_0213+1)|0);
 var $209=($208>>>0)<($__ns_2>>>0);
 if($209){var $__dc_0211=$207;var $__dg_0212=$__dg_1;var $__p_0213=$208;label=56;break;}else{label=61;break;}
 case 61: 
 var $210=$__nf_1;
 var $211=$__nb;
 var $212=((($210)-($211))|0);
 var $213=(($__ob+$212)|0);
 var $214=HEAP32[(($__oe)>>2)];
 var $215=($213|0)==($214|0);
 if($215){label=48;break;}else{label=62;break;}
 case 62: 
 var $216=((($214)-(1))|0);
 var $217=($213>>>0)<($216>>>0);
 if($217){var $_0206=$213;var $218=$216;label=63;break;}else{label=48;break;}
 case 63: 
 var $218;
 var $_0206;
 var $219=HEAP8[($_0206)];
 var $220=HEAP8[($218)];
 HEAP8[($_0206)]=$220;
 HEAP8[($218)]=$219;
 var $221=(($_0206+1)|0);
 var $222=((($218)-(1))|0);
 var $223=($221>>>0)<($222>>>0);
 if($223){var $_0206=$221;var $218=$222;label=63;break;}else{label=48;break;}
 case 64: 
 var $__nf_2205;
 var $225=HEAP8[($__nf_2205)];
 var $226=(($225<<24)>>24)==46;
 if($226){label=65;break;}else{label=67;break;}
 case 65: 
 var $228=$41;
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=18;break; }
 case 66: 
 var $233=HEAP32[(($__oe)>>2)];
 var $234=(($233+1)|0);
 HEAP32[(($__oe)>>2)]=$234;
 HEAP8[($233)]=$232;
 var $235=(($__nf_2205+1)|0);
 var $__nf_3=$235;label=69;break;
 case 67: 
 var $237=HEAP32[(($154)>>2)];
 var $238=(($237+28)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($23,$225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=14;break; }
 case 68: 
 var $241=HEAP32[(($__oe)>>2)];
 var $242=(($241+1)|0);
 HEAP32[(($__oe)>>2)]=$242;
 HEAP8[($241)]=$240;
 var $243=(($__nf_2205+1)|0);
 var $244=($243>>>0)<($__ne>>>0);
 if($244){var $__nf_2205=$243;label=64;break;}else{var $__nf_3=$243;label=69;break;}
 case 69: 
 var $__nf_3;
 var $245=HEAP32[(($__oe)>>2)];
 var $246=$19;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+32)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($23,$__nf_3,$__ne,$245) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $251=$__nf_3;
 var $252=((($61)-($251))|0);
 var $253=HEAP32[(($__oe)>>2)];
 var $254=(($253+$252)|0);
 HEAP32[(($__oe)>>2)]=$254;
 var $255=($__np|0)==($__ne|0);
 if($255){var $storemerge=$254;label=72;break;}else{label=71;break;}
 case 71: 
 var $257=$__np;
 var $258=$__nb;
 var $259=((($257)-($258))|0);
 var $260=(($__ob+$259)|0);
 var $storemerge=$260;label=72;break;
 case 72: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep146=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep146)]=65;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 15: 
 HEAP8[($scevgep146)]=97;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i147;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18504)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18504);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((16504)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((16504)>>2)];
 if($specify_precision_0_off0_ph_i147){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre144=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $100=$_pre144;label=47;break;
 case 29: 
 var $64=HEAP8[(18504)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i147){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18504);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((16504)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((16504)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1119142=$83;var $_1143=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18504);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((16504)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((16504)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $101=(($100+$__nc_2)|0);
 var $102=HEAP32[(($6)>>2)];
 var $103=$102&176;
 if(($103|0)==16){ label=48;break;}else if(($103|0)==32){ var $_0_i141=$101;label=54;break;}else{label=53;break;}
 case 48: 
 var $105=HEAP8[($100)];
 if((($105<<24)>>24)==45|(($105<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $107=(($100+1)|0);
 var $_0_i141=$107;label=54;break;
 case 50: 
 var $109=($__nc_2|0)>1;
 var $110=(($105<<24)>>24)==48;
 var $or_cond_i=$109&$110;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $112=(($100+1)|0);
 var $113=HEAP8[($112)];
 if((($113<<24)>>24)==120|(($113<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $115=(($100+2)|0);
 var $_0_i141=$115;label=54;break;
 case 53: 
 var $_0_i141=$100;label=54;break;
 case 54: 
 var $_0_i141;
 var $117=(($__o)|0);
 var $118=($100|0)==($43|0);
 if($118){var $__ob_0=$117;var $__obh_sroa_0_1=0;var $128=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $120=$__nc_2<<1;
 var $121=_malloc($120);
 var $122=($121|0)==0;
 if($122){label=56;break;}else{var $__ob_0=$121;var $__obh_sroa_0_1=$121;var $128=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre145=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $128=$_pre145;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $_0=$126;var $_0118=$127;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $128;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($128,$_0_i141,$101,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $131=(($1)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132)|0);
 var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
 var $135=(($__s)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($3)|0);
 HEAP32[(($137)>>2)]=$136;
 var $138=HEAP32[(($__op)>>2)];
 var $139=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$138,$139,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $141=(($2)|0);
 var $142=HEAP32[(($141)>>2)];
 HEAP32[(($135)>>2)]=$142;
 var $143=(($agg_result)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=($__obh_sroa_0_1|0)==0;
 if($144){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $146=($__nbh_sroa_0_1|0)==0;
 if($146){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 var $151=$149$1;
 var $152=(($1)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153)|0);
 var $155=__ZNSt3__114__shared_count16__release_sharedEv($154);
 var $_0=$150;var $_0118=$151;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0118;
 var $_0;
 var $157=($__obh_sroa_0_2|0)==0;
 if($157){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $159=($__nbh_sroa_0_1|0)==0;
 if($159){var $_1119142=$_0118;var $_1143=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1119142=$_0118;var $_1143=$_0;label=72;break;
 case 72: 
 var $_1143;
 var $_1119142;
 var $161$0=$_1143;
 var $161$1=0;
 var $162$0=$161$0;
 var $162$1=$_1119142;
 ___resumeException($162$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(88);
 var $2=(sp)+(96);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(6512)];HEAP8[((($3)+(1))|0)]=HEAP8[(6513)];HEAP8[((($3)+(2))|0)]=HEAP8[(6514)];HEAP8[((($3)+(3))|0)]=HEAP8[(6515)];HEAP8[((($3)+(4))|0)]=HEAP8[(6516)];HEAP8[((($3)+(5))|0)]=HEAP8[(6517)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$11;
 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((16504)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $34=(($1)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$__p_i_i_i;
 var $37=HEAP32[((17944)>>2)];
 var $38=($37|0)==-1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$36,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $40=HEAP32[((17948)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($35+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($35+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=16;break;}else{label=17;break;}
 case 16: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=17;break;}else{label=19;break;}
 case 17: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $56=$52;
 var $57=HEAP32[(($34)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__o)|0);
 var $61=$52;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($56,$4,$17,$60);
 var $66=(($__o+$16)|0);
 var $67=($_0_i|0)==($17|0);
 if($67){var $__op_0=$66;label=22;break;}else{label=21;break;}
 case 20: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($34)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 21: 
 var $74=$__nar;
 var $75=$_0_i;
 var $76=((($75)-($74))|0);
 var $77=(($__o+$76)|0);
 var $__op_0=$77;label=22;break;
 case 22: 
 var $__op_0;
 var $79=(($__s)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($2)|0);
 HEAP32[(($81)>>2)]=$80;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$60,$__op_0,$66,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $__nm=(sp)+(32);
 var $3=(($__iob+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$this;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__s)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($1)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=($__v&1);
 FUNCTION_TABLE[$11]($agg_result,$this,$1,$__iob,$__fl,$15);
 label=32;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $17=(($2)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$__p_i_i_i;
 var $20=HEAP32[((17552)>>2)];
 var $21=($20|0)==-1;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$19,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=29;break; }
 case 5: 
 var $23=HEAP32[((17556)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($18+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($18+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$26;
 var $30=$28;
 var $31=((($29)-($30))|0);
 var $32=$31>>2;
 var $33=($32>>>0)>($24>>>0);
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=(($28+($24<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 __ZNSt8bad_castC2Ev($38);
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=29;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $39=$35;
 var $40=HEAP32[(($17)>>2)];
 var $41=(($40)|0);
 var $42=__ZNSt3__114__shared_count16__release_sharedEv($41);
 var $43=$35;
 var $44=HEAP32[(($43)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=(($44+24)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($__nm,$39);
 label=12;break;
 case 11: 
 var $49=(($44+28)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($__nm,$39);
 label=12;break;
 case 12: 
 var $52=$__nm;
 var $53=HEAP8[($52)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=(($__nm+8)|0);
 var $58=HEAP32[(($57)>>2)];
 var $_pre83=(($__nm+4)|0);
 var $__i_sroa_0_0_ph=$58;var $_pre_phi=$_pre83;var $_pre_phi85=$57;label=15;break;
 case 14: 
 var $60=(($__nm+4)|0);
 var $_pre84=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$60;var $_pre_phi=$60;var $_pre_phi85=$_pre84;label=15;break;
 case 15: 
 var $_pre_phi85;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $61=(($__s)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $62=$53;label=16;break;
 case 16: 
 var $62;
 var $__i_sroa_0_0;
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){var $67=$_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $66=HEAP32[(($_pre_phi85)>>2)];
 var $67=$66;label=18;break;
 case 18: 
 var $67;
 var $68=($62&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 if($70){label=20;break;}else{label=19;break;}
 case 19: 
 var $72=HEAP32[(($_pre_phi)>>2)];
 var $75=$72;label=21;break;
 case 20: 
 var $74=$68>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($67+($75<<2))|0);
 var $77=($__i_sroa_0_0|0)==($76|0);
 if($77){label=31;break;}else{label=22;break;}
 case 22: 
 var $79=HEAP32[(($__i_sroa_0_0)>>2)];
 var $80=HEAP32[(($61)>>2)];
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=23;break;}
 case 23: 
 var $83=(($80+24)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($80+28)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($84|0)==($86|0);
 if($87){label=24;break;}else{label=25;break;}
 case 24: 
 var $89=$80;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+52)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($80,$79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$93;label=26;break; } else { label=30;break; }
 case 25: 
 var $95=(($84+4)|0);
 HEAP32[(($83)>>2)]=$95;
 HEAP32[(($84)>>2)]=$79;
 var $_0=$79;label=26;break;
 case 26: 
 var $_0;
 var $96=($_0|0)==-1;
 if($96){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($61)>>2)]=0;
 label=28;break;
 case 28: 
 var $98=(($__i_sroa_0_0+4)|0);
 var $_pre=HEAP8[($52)];
 var $__i_sroa_0_0=$98;var $62=$_pre;label=16;break;
 case 29: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $101=$100$0;
 var $102=$100$1;
 var $103=HEAP32[(($17)>>2)];
 var $104=(($103)|0);
 var $105=__ZNSt3__114__shared_count16__release_sharedEv($104);
 var $_078=$102;var $_079=$101;label=33;break;
 case 30: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 var $_078=$109;var $_079=$108;label=33;break;
 case 31: 
 var $111=HEAP32[(($61)>>2)];
 var $112=(($agg_result)|0);
 HEAP32[(($112)>>2)]=$111;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 label=32;break;
 case 32: 
 STACKTOP=sp;return;
 case 33: 
 var $_079;
 var $_078;
 var $115$0=$_079;
 var $115$1=0;
 var $116$0=$115$0;
 var $116$1=$_078;
 ___resumeException($116$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(6504)];HEAP8[((($3)+(1))|0)]=HEAP8[(6505)];HEAP8[((($3)+(2))|0)]=HEAP8[(6506)];HEAP8[((($3)+(3))|0)]=HEAP8[(6507)];HEAP8[((($3)+(4))|0)]=HEAP8[(6508)];HEAP8[((($3)+(5))|0)]=HEAP8[(6509)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18504)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18504);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((16504)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i158=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17936)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$3,270);
 label=3;break;
 case 3: 
 var $7=HEAP32[((17940)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,12744,(374));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i158;
 var $26=HEAP32[((17552)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i159=(($__p_i_i_i158)|0);
 HEAP32[(($_sroa_016_0__idx_i_i159)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i160=(($__p_i_i_i158+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i160)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i161=(($__p_i_i_i158+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i161)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$25,270);
 label=8;break;
 case 8: 
 var $29=HEAP32[((17556)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,12744,(374));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 var $50=$__grouping;
 var $51=$__grouping;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($__grouping+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $61=$58;label=14;break;
 case 13: 
 var $60=$53>>>1;
 var $61=$60;label=14;break;
 case 14: 
 var $61;
 var $62=($61|0)==0;
 if($62){label=15;break;}else{label=20;break;}
 case 15: 
 var $64=$19;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+48)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($23,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $69=$__ne;
 var $70=$__nb;
 var $71=((($69)-($70))|0);
 var $72=(($__ob+($71<<2))|0);
 HEAP32[(($__oe)>>2)]=$72;
 label=43;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $75=HEAP8[($__nb)];
 if((($75<<24)>>24)==45|(($75<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $77=$19;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+44)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($23,$75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $82=(($__nb+1)|0);
 var $83=HEAP32[(($__oe)>>2)];
 var $84=(($83+4)|0);
 HEAP32[(($__oe)>>2)]=$84;
 HEAP32[(($83)>>2)]=$81;
 var $__nf_0=$82;label=23;break;
 case 23: 
 var $__nf_0;
 var $86=$__ne;
 var $87=$__nf_0;
 var $88=((($86)-($87))|0);
 var $89=($88|0)>1;
 if($89){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $91=HEAP8[($__nf_0)];
 var $92=(($91<<24)>>24)==48;
 if($92){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $94=(($__nf_0+1)|0);
 var $95=HEAP8[($94)];
 if((($95<<24)>>24)==120|(($95<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $97=$19;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+44)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $102=HEAP32[(($__oe)>>2)];
 var $103=(($102+4)|0);
 HEAP32[(($__oe)>>2)]=$103;
 HEAP32[(($102)>>2)]=$101;
 var $104=HEAP8[($94)];
 var $105=HEAP32[(($97)>>2)];
 var $106=(($105+44)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($23,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $109=(($__nf_0+2)|0);
 var $110=HEAP32[(($__oe)>>2)];
 var $111=(($110+4)|0);
 HEAP32[(($__oe)>>2)]=$111;
 HEAP32[(($110)>>2)]=$108;
 var $__nf_1=$109;label=29;break;
 case 29: 
 var $__nf_1;
 var $113=($__nf_1|0)==($__ne|0);
 if($113){label=32;break;}else{label=30;break;}
 case 30: 
 var $114=((($__ne)-(1))|0);
 var $115=($__nf_1>>>0)<($114>>>0);
 if($115){var $_0172=$__nf_1;var $116=$114;label=31;break;}else{label=32;break;}
 case 31: 
 var $116;
 var $_0172;
 var $117=HEAP8[($_0172)];
 var $118=HEAP8[($116)];
 HEAP8[($_0172)]=$118;
 HEAP8[($116)]=$117;
 var $119=(($_0172+1)|0);
 var $120=((($116)-(1))|0);
 var $121=($119>>>0)<($120>>>0);
 if($121){var $_0172=$119;var $116=$120;label=31;break;}else{label=32;break;}
 case 32: 
 var $122=$41;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $127=($__nf_1>>>0)<($__ne>>>0);
 if($127){label=34;break;}else{label=40;break;}
 case 34: 
 var $128=(($50+1)|0);
 var $129=$19;
 var $130=(($__grouping+4)|0);
 var $131=(($__grouping+8)|0);
 var $__dc_0167=0;var $__dg_0168=0;var $__p_0169=$__nf_1;label=35;break;
 case 35: 
 var $__p_0169;
 var $__dg_0168;
 var $__dc_0167;
 var $132=HEAP8[($51)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 var $135=HEAP32[(($131)>>2)];
 var $_=$134?$128:$135;
 var $136=(($_+$__dg_0168)|0);
 var $137=HEAP8[($136)];
 var $138=(($137<<24)>>24)==0;
 if($138){var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}else{label=36;break;}
 case 36: 
 var $139=HEAP32[(($131)>>2)];
 var $_174=$134?$128:$139;
 var $140=(($_174+$__dg_0168)|0);
 var $141=HEAP8[($140)];
 var $142=(($141<<24)>>24);
 var $143=($__dc_0167|0)==($142|0);
 if($143){label=37;break;}else{var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=38;break;}
 case 37: 
 var $144=HEAP32[(($__oe)>>2)];
 var $145=(($144+4)|0);
 HEAP32[(($__oe)>>2)]=$145;
 HEAP32[(($144)>>2)]=$126;
 var $146=HEAP8[($51)];
 var $147=($146&255);
 var $148=$147&1;
 var $149=($148|0)==0;
 var $150=HEAP32[(($130)>>2)];
 var $151=$147>>>1;
 var $152=$149?$151:$150;
 var $153=((($152)-(1))|0);
 var $154=($__dg_0168>>>0)<($153>>>0);
 var $155=($154&1);
 var $___dg_0=((($155)+($__dg_0168))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $157=HEAP8[($__p_0169)];
 var $158=HEAP32[(($129)>>2)];
 var $159=(($158+44)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$160]($23,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $162=HEAP32[(($__oe)>>2)];
 var $163=(($162+4)|0);
 HEAP32[(($__oe)>>2)]=$163;
 HEAP32[(($162)>>2)]=$161;
 var $164=((($__dc_1)+(1))|0);
 var $165=(($__p_0169+1)|0);
 var $166=($165>>>0)<($__ne>>>0);
 if($166){var $__dc_0167=$164;var $__dg_0168=$__dg_1;var $__p_0169=$165;label=35;break;}else{label=40;break;}
 case 40: 
 var $167=$__nf_1;
 var $168=$__nb;
 var $169=((($167)-($168))|0);
 var $170=(($__ob+($169<<2))|0);
 var $171=HEAP32[(($__oe)>>2)];
 var $172=($170|0)==($171|0);
 if($172){label=43;break;}else{label=41;break;}
 case 41: 
 var $173=((($171)-(4))|0);
 var $174=($170>>>0)<($173>>>0);
 if($174){var $_0156166=$170;var $175=$173;label=42;break;}else{label=43;break;}
 case 42: 
 var $175;
 var $_0156166;
 var $176=HEAP32[(($_0156166)>>2)];
 var $177=HEAP32[(($175)>>2)];
 HEAP32[(($_0156166)>>2)]=$177;
 HEAP32[(($175)>>2)]=$176;
 var $178=(($_0156166+4)|0);
 var $179=((($175)-(4))|0);
 var $180=($178>>>0)<($179>>>0);
 if($180){var $_0156166=$178;var $175=$179;label=42;break;}else{label=43;break;}
 case 43: 
 var $181=($__np|0)==($__ne|0);
 if($181){label=44;break;}else{label=45;break;}
 case 44: 
 var $183=HEAP32[(($__oe)>>2)];
 var $storemerge=$183;label=46;break;
 case 45: 
 var $185=$__np;
 var $186=$__nb;
 var $187=((($185)-($186))|0);
 var $188=(($__ob+($187<<2))|0);
 var $storemerge=$188;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=(($__s)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 3: 
 var $7=$__oe;
 var $8=$__ob;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=(($__iob+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)>($10|0);
 var $14=((($12)-($10))|0);
 var $__ns_0=$13?$14:0;
 var $15=$__op;
 var $16=((($15)-($8))|0);
 var $17=$16>>2;
 var $18=($16|0)>0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$2;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+48)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=FUNCTION_TABLE[$23]($2,$__ob,$17);
 var $25=($24|0)==($17|0);
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $27=(($agg_result)|0);
 HEAP32[(($27)>>2)]=0;
 label=19;break;
 case 6: 
 var $29=($__ns_0|0)>0;
 if($29){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $31=$__sp;
 var $32=HEAP8[($31)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=(($__sp+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $40=$37;label=10;break;
 case 9: 
 var $39=(($__sp+4)|0);
 var $40=$39;label=10;break;
 case 10: 
 var $40;
 var $41=$2;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+48)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($2,$40,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $46=($45|0)==($__ns_0|0);
 if($46){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=0;
 var $47=(($agg_result)|0);
 HEAP32[(($47)>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 ___resumeException($49$0)
 case 14: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $52=((($7)-($15))|0);
 var $53=$52>>2;
 var $54=($52|0)>0;
 if($54){label=16;break;}else{label=18;break;}
 case 16: 
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+48)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($2,$__op,$53);
 var $61=($60|0)==($53|0);
 if($61){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($1)>>2)]=0;
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($11)>>2)]=0;
 var $65=(($agg_result)|0);
 HEAP32[(($65)>>2)]=$2;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $2=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18504)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18504);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((16504)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,22,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(6504)];HEAP8[((($3)+(1))|0)]=HEAP8[(6505)];HEAP8[((($3)+(2))|0)]=HEAP8[(6506)];HEAP8[((($3)+(3))|0)]=HEAP8[(6507)];HEAP8[((($3)+(4))|0)]=HEAP8[(6508)];HEAP8[((($3)+(5))|0)]=HEAP8[(6509)];
 var $4=(($__fmt+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__fmt+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $16=$6&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$6&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(18504)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(18504);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((16504)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,12,$35,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($5)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $55=(($1)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=__ZNSt3__114__shared_count16__release_sharedEv($57);
 var $59=(($__s)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($2)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=HEAP32[(($__op)>>2)];
 var $63=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$53,$62,$63,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($1)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67)|0);
 var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&512;
 var $13=($12|0)==0;
 if($13){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$15;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $16=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($16)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $17=$6&74;
 if(($17|0)==64){ label=6;break;}else if(($17|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $20=$6&16384;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $25=(($__nar)|0);
 var $26=HEAP8[(18504)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=12;break;}else{label=16;break;}
 case 12: 
 var $29=___cxa_guard_acquire(18504);
 var $30=($29|0)==0;
 if($30){label=16;break;}else{label=13;break;}
 case 13: 
 var $32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((16504)>>2)]=$32;
 label=16;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 ___resumeException($35$0)
 case 16: 
 var $36=HEAP32[((16504)>>2)];
 var $37=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($25,23,$36,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($__nar+$37)|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=$39&176;
 if(($40|0)==16){ label=17;break;}else if(($40|0)==32){ var $_0_i11=$38;label=23;break;}else{label=22;break;}
 case 17: 
 var $42=HEAP8[($25)];
 if((($42<<24)>>24)==45|(($42<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $44=(($__nar+1)|0);
 var $_0_i11=$44;label=23;break;
 case 19: 
 var $46=($37|0)>1;
 var $47=(($42<<24)>>24)==48;
 var $or_cond_i=$46&$47;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $49=(($__nar+1)|0);
 var $50=HEAP8[($49)];
 if((($50<<24)>>24)==120|(($50<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $52=(($__nar+2)|0);
 var $_0_i11=$52;label=23;break;
 case 22: 
 var $_0_i11=$25;label=23;break;
 case 23: 
 var $_0_i11;
 var $54=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($25,$_0_i11,$38,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $56=(($1)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__s)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($2)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=HEAP32[(($__op)>>2)];
 var $64=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$54,$63,$64,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $67=(($1)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=__ZNSt3__114__shared_count16__release_sharedEv($69);
 ___resumeException($66$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($22)]=70;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 9: 
 HEAP8[($22)]=102;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($22)]=69;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 12: 
 HEAP8[($22)]=101;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 13: 
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($22)]=71;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 18: 
 HEAP8[($22)]=103;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i144;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18504)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18504);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((16504)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((16504)>>2)];
 if($specify_precision_0_off0_ph_i144){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre151=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $102=$_pre151;label=47;break;
 case 29: 
 var $64=HEAP8[(18504)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i144){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18504);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((16504)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((16504)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1121149=$83;var $_1150=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18504);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((16504)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((16504)>>2)];
 var $95=(($__iob+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$96,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$97;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $99=HEAP32[(($__nb)>>2)];
 var $100=($99|0)==0;
 if($100){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$99;var $102=$99;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $102=$_pre;label=47;break;
 case 47: 
 var $102;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $103=(($102+$__nc_2)|0);
 var $104=HEAP32[(($6)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i143=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($102)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($102+1)|0);
 var $_0_i143=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($102+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($102+2)|0);
 var $_0_i143=$117;label=54;break;
 case 53: 
 var $_0_i143=$102;label=54;break;
 case 54: 
 var $_0_i143;
 var $119=(($__o)|0);
 var $120=($102|0)==($43|0);
 if($120){var $__ob_0=$119;var $__obh_sroa_0_1=0;var $131=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<3;
 var $123=_malloc($122);
 var $124=$123;
 var $125=($123|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $131=$102;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre152=HEAP32[(($__nb)>>2)];
 var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $131=$_pre152;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $_0=$129;var $_0120=$130;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $131;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($131,$_0_i143,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $134=(($1)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135)|0);
 var $137=__ZNSt3__114__shared_count16__release_sharedEv($136);
 var $138=(($__s)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($3)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=HEAP32[(($__op)>>2)];
 var $142=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$141,$142,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $144=(($2)|0);
 var $145=HEAP32[(($144)>>2)];
 HEAP32[(($138)>>2)]=$145;
 var $146=(($agg_result)|0);
 HEAP32[(($146)>>2)]=$145;
 var $147=($__obh_sroa_0_1|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 var $149=$__obh_sroa_0_1;
 _free($149);
 label=64;break;
 case 64: 
 var $150=($__nbh_sroa_0_1|0)==0;
 if($150){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $154=$153$0;
 var $155=$153$1;
 var $156=(($1)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157)|0);
 var $159=__ZNSt3__114__shared_count16__release_sharedEv($158);
 var $_0=$154;var $_0120=$155;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0120;
 var $_0;
 var $161=($__obh_sroa_0_2|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 var $163=$__obh_sroa_0_2;
 _free($163);
 label=70;break;
 case 70: 
 var $164=($__nbh_sroa_0_1|0)==0;
 if($164){var $_1121149=$_0120;var $_1150=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1121149=$_0120;var $_1150=$_0;label=72;break;
 case 72: 
 var $_1150;
 var $_1121149;
 var $166$0=$_1150;
 var $166$1=0;
 var $167$0=$166$0;
 var $167$1=$_1121149;
 ___resumeException($167$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i191=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((17936)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$3,270);
 label=3;break;
 case 3: 
 var $7=HEAP32[((17940)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 __ZNSt8bad_castC2Ev($22);
 ___cxa_throw($21,12744,(374));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i191;
 var $26=HEAP32[((17552)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i192=(($__p_i_i_i191)|0);
 HEAP32[(($_sroa_016_0__idx_i_i192)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i193=(($__p_i_i_i191+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i193)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i194=(($__p_i_i_i191+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i194)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$25,270);
 label=8;break;
 case 8: 
 var $29=HEAP32[((17556)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 __ZNSt8bad_castC2Ev($44);
 ___cxa_throw($43,12744,(374));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $50=HEAP8[($__nb)];
 if((($50<<24)>>24)==45|(($50<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $52=$19;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+44)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($23,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $57=(($__nb+1)|0);
 var $58=HEAP32[(($__oe)>>2)];
 var $59=(($58+4)|0);
 HEAP32[(($__oe)>>2)]=$59;
 HEAP32[(($58)>>2)]=$56;
 var $__nf_0=$57;label=20;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit208$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit208$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit208$1;var $eh_lpad_body$0=$lpad_loopexit208$0;label=19;break;
 case 16: 
 var $lpad_loopexit220$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit220$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit220$1;var $eh_lpad_body$0=$lpad_loopexit220$0;label=19;break;
 case 17: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit225$1;var $eh_lpad_body$0=$lpad_loopexit225$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit226$1;var $eh_lpad_body$0=$lpad_nonloopexit226$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $61=$__ne;
 var $62=$__nf_0;
 var $63=((($61)-($62))|0);
 var $64=($63|0)>1;
 if($64){label=21;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 21: 
 var $66=HEAP8[($__nf_0)];
 var $67=(($66<<24)>>24)==48;
 if($67){label=22;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 22: 
 var $69=(($__nf_0+1)|0);
 var $70=HEAP8[($69)];
 if((($70<<24)>>24)==120|(($70<<24)>>24)==88){ label=23;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 23: 
 var $72=$19;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+44)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=18;break; }
 case 24: 
 var $77=HEAP32[(($__oe)>>2)];
 var $78=(($77+4)|0);
 HEAP32[(($__oe)>>2)]=$78;
 HEAP32[(($77)>>2)]=$76;
 var $79=(($__nf_0+2)|0);
 var $80=HEAP8[($69)];
 var $81=HEAP32[(($72)>>2)];
 var $82=(($81+44)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($23,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $85=HEAP32[(($__oe)>>2)];
 var $86=(($85+4)|0);
 HEAP32[(($__oe)>>2)]=$86;
 HEAP32[(($85)>>2)]=$84;
 var $__ns_0=$79;label=26;break;
 case 26: 
 var $__ns_0;
 var $88=($__ns_0>>>0)<($__ne>>>0);
 if($88){label=27;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}
 case 27: 
 var $90=HEAP8[($__ns_0)];
 var $91=HEAP8[(18504)];
 var $92=(($91<<24)>>24)==0;
 if($92){label=28;break;}else{label=32;break;}
 case 28: 
 var $94=___cxa_guard_acquire(18504);
 var $95=($94|0)==0;
 if($95){label=32;break;}else{label=29;break;}
 case 29: 
 var $97=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=31;break; }
 case 30: 
 HEAP32[((16504)>>2)]=$97;
 label=32;break;
 case 31: 
 var $100$0 = ___cxa_find_matching_catch(-1, -1); var $100$1 = tempRet0;
 var $eh_lpad_body$1=$100$1;var $eh_lpad_body$0=$100$0;label=19;break;
 case 32: 
 var $102=HEAP32[((16504)>>2)];
 var $103=(($90<<24)>>24);
 var $104=(function() { try { __THREW__ = 0; return _isxdigit($103,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=17;break; }
 case 33: 
 var $106=($104|0)==0;
 var $107=(($__ns_0+1)|0);
 if($106){var $__ns_2=$__ns_0;var $__nf_1=$79;label=42;break;}else{var $__ns_0=$107;label=26;break;}
 case 34: 
 var $__ns_1;
 var $108=($__ns_1>>>0)<($__ne>>>0);
 if($108){label=35;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}
 case 35: 
 var $110=HEAP8[($__ns_1)];
 var $111=HEAP8[(18504)];
 var $112=(($111<<24)>>24)==0;
 if($112){label=36;break;}else{label=40;break;}
 case 36: 
 var $114=___cxa_guard_acquire(18504);
 var $115=($114|0)==0;
 if($115){label=40;break;}else{label=37;break;}
 case 37: 
 var $117=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 HEAP32[((16504)>>2)]=$117;
 label=40;break;
 case 39: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1); var $120$1 = tempRet0;
 var $eh_lpad_body$1=$120$1;var $eh_lpad_body$0=$120$0;label=19;break;
 case 40: 
 var $122=HEAP32[((16504)>>2)];
 var $123=(($110<<24)>>24);
 var $124=(function() { try { __THREW__ = 0; return _isdigit($123,$122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=16;break; }
 case 41: 
 var $126=($124|0)==0;
 var $127=(($__ns_1+1)|0);
 if($126){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}else{var $__ns_1=$127;label=34;break;}
 case 42: 
 var $__nf_1;
 var $__ns_2;
 var $128=$__grouping;
 var $129=$__grouping;
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$131&1;
 var $133=($132|0)==0;
 if($133){label=44;break;}else{label=43;break;}
 case 43: 
 var $135=(($__grouping+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $139=$136;label=45;break;
 case 44: 
 var $138=$131>>>1;
 var $139=$138;label=45;break;
 case 45: 
 var $139;
 var $140=($139|0)==0;
 if($140){label=46;break;}else{label=50;break;}
 case 46: 
 var $142=HEAP32[(($__oe)>>2)];
 var $143=$19;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+48)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($23,$__nf_1,$__ns_2,$142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=18;break; }
 case 47: 
 var $148=$__ns_2;
 var $149=$__nf_1;
 var $150=((($148)-($149))|0);
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+($150<<2))|0);
 HEAP32[(($__oe)>>2)]=$152;
 label=48;break;
 case 48: 
 var $153=($__ns_2>>>0)<($__ne>>>0);
 if($153){label=49;break;}else{var $__nf_3=$__ns_2;label=69;break;}
 case 49: 
 var $154=$19;
 var $__nf_2205=$__ns_2;label=64;break;
 case 50: 
 var $156=($__nf_1|0)==($__ns_2|0);
 if($156){label=53;break;}else{label=51;break;}
 case 51: 
 var $157=((($__ns_2)-(1))|0);
 var $158=($__nf_1>>>0)<($157>>>0);
 if($158){var $_0189216=$__nf_1;var $159=$157;label=52;break;}else{label=53;break;}
 case 52: 
 var $159;
 var $_0189216;
 var $160=HEAP8[($_0189216)];
 var $161=HEAP8[($159)];
 HEAP8[($_0189216)]=$161;
 HEAP8[($159)]=$160;
 var $162=(($_0189216+1)|0);
 var $163=((($159)-(1))|0);
 var $164=($162>>>0)<($163>>>0);
 if($164){var $_0189216=$162;var $159=$163;label=52;break;}else{label=53;break;}
 case 53: 
 var $165=$41;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=18;break; }
 case 54: 
 var $170=($__nf_1>>>0)<($__ns_2>>>0);
 if($170){label=55;break;}else{label=61;break;}
 case 55: 
 var $171=(($128+1)|0);
 var $172=(($__grouping+4)|0);
 var $173=(($__grouping+8)|0);
 var $174=$19;
 var $__dc_0211=0;var $__dg_0212=0;var $__p_0213=$__nf_1;label=56;break;
 case 56: 
 var $__p_0213;
 var $__dg_0212;
 var $__dc_0211;
 var $175=HEAP8[($129)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 var $178=HEAP32[(($173)>>2)];
 var $_=$177?$171:$178;
 var $179=(($_+$__dg_0212)|0);
 var $180=HEAP8[($179)];
 var $181=(($180<<24)>>24)>0;
 if($181){label=57;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 57: 
 var $182=HEAP32[(($173)>>2)];
 var $_236=$177?$171:$182;
 var $183=(($_236+$__dg_0212)|0);
 var $184=HEAP8[($183)];
 var $185=(($184<<24)>>24);
 var $186=($__dc_0211|0)==($185|0);
 if($186){label=58;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=59;break;}
 case 58: 
 var $187=HEAP32[(($__oe)>>2)];
 var $188=(($187+4)|0);
 HEAP32[(($__oe)>>2)]=$188;
 HEAP32[(($187)>>2)]=$169;
 var $189=HEAP8[($129)];
 var $190=($189&255);
 var $191=$190&1;
 var $192=($191|0)==0;
 var $193=HEAP32[(($172)>>2)];
 var $194=$190>>>1;
 var $195=$192?$194:$193;
 var $196=((($195)-(1))|0);
 var $197=($__dg_0212>>>0)<($196>>>0);
 var $198=($197&1);
 var $___dg_0=((($198)+($__dg_0212))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=59;break;
 case 59: 
 var $__dc_1;
 var $__dg_1;
 var $200=HEAP8[($__p_0213)];
 var $201=HEAP32[(($174)>>2)];
 var $202=(($201+44)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($23,$200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=15;break; }
 case 60: 
 var $205=HEAP32[(($__oe)>>2)];
 var $206=(($205+4)|0);
 HEAP32[(($__oe)>>2)]=$206;
 HEAP32[(($205)>>2)]=$204;
 var $207=((($__dc_1)+(1))|0);
 var $208=(($__p_0213+1)|0);
 var $209=($208>>>0)<($__ns_2>>>0);
 if($209){var $__dc_0211=$207;var $__dg_0212=$__dg_1;var $__p_0213=$208;label=56;break;}else{label=61;break;}
 case 61: 
 var $210=$__nf_1;
 var $211=$__nb;
 var $212=((($210)-($211))|0);
 var $213=(($__ob+($212<<2))|0);
 var $214=HEAP32[(($__oe)>>2)];
 var $215=($213|0)==($214|0);
 if($215){label=48;break;}else{label=62;break;}
 case 62: 
 var $216=((($214)-(4))|0);
 var $217=($213>>>0)<($216>>>0);
 if($217){var $_0206=$213;var $218=$216;label=63;break;}else{label=48;break;}
 case 63: 
 var $218;
 var $_0206;
 var $219=HEAP32[(($_0206)>>2)];
 var $220=HEAP32[(($218)>>2)];
 HEAP32[(($_0206)>>2)]=$220;
 HEAP32[(($218)>>2)]=$219;
 var $221=(($_0206+4)|0);
 var $222=((($218)-(4))|0);
 var $223=($221>>>0)<($222>>>0);
 if($223){var $_0206=$221;var $218=$222;label=63;break;}else{label=48;break;}
 case 64: 
 var $__nf_2205;
 var $225=HEAP8[($__nf_2205)];
 var $226=(($225<<24)>>24)==46;
 if($226){label=65;break;}else{label=67;break;}
 case 65: 
 var $228=$41;
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=18;break; }
 case 66: 
 var $233=HEAP32[(($__oe)>>2)];
 var $234=(($233+4)|0);
 HEAP32[(($__oe)>>2)]=$234;
 HEAP32[(($233)>>2)]=$232;
 var $235=(($__nf_2205+1)|0);
 var $__nf_3=$235;label=69;break;
 case 67: 
 var $237=HEAP32[(($154)>>2)];
 var $238=(($237+44)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($23,$225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=14;break; }
 case 68: 
 var $241=HEAP32[(($__oe)>>2)];
 var $242=(($241+4)|0);
 HEAP32[(($__oe)>>2)]=$242;
 HEAP32[(($241)>>2)]=$240;
 var $243=(($__nf_2205+1)|0);
 var $244=($243>>>0)<($__ne>>>0);
 if($244){var $__nf_2205=$243;label=64;break;}else{var $__nf_3=$243;label=69;break;}
 case 69: 
 var $__nf_3;
 var $245=HEAP32[(($__oe)>>2)];
 var $246=$19;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+48)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]($23,$__nf_3,$__ne,$245) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $251=$__nf_3;
 var $252=((($61)-($251))|0);
 var $253=HEAP32[(($__oe)>>2)];
 var $254=(($253+($252<<2))|0);
 HEAP32[(($__oe)>>2)]=$254;
 var $255=($__np|0)==($__ne|0);
 if($255){var $storemerge=$254;label=72;break;}else{label=71;break;}
 case 71: 
 var $257=$__np;
 var $258=$__nb;
 var $259=((($257)-($258))|0);
 var $260=(($__ob+($259<<2))|0);
 var $storemerge=$260;label=72;break;
 case 72: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $3=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$__fmt;
 var $5=(($4+1)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&2048;
 var $9=($8|0)==0;
 if($9){var $_0_i=$5;label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($4+2)|0);
 HEAP8[($5)]=43;
 var $_0_i=$11;label=3;break;
 case 3: 
 var $_0_i;
 var $13=$7&1024;
 var $14=($13|0)==0;
 if($14){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$16;label=5;break;
 case 5: 
 var $_1_i;
 var $18=$7&260;
 var $19=$7>>>14;
 var $20=($18|0)==260;
 if($20){label=13;break;}else{label=6;break;}
 case 6: 
 var $21=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $22=(($_1_i+2)|0);
 HEAP8[($21)]=42;
 HEAP8[($22)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($18|0)==256){ label=10;break;}else if(($18|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $24=$19&1;
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 10: 
 var $29=$19&1;
 var $30=($29|0)==0;
 if($30){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep146=(($_1_i+1)|0);
 var $34=$19&1;
 var $35=($34|0)==0;
 if($35){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep146)]=65;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 15: 
 HEAP8[($scevgep146)]=97;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 16: 
 var $39=$19&1;
 var $40=($39|0)==0;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i147;
 var $43=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$43;
 var $44=HEAP8[(18504)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=20;break;}else{label=24;break;}
 case 20: 
 var $47=___cxa_guard_acquire(18504);
 var $48=($47|0)==0;
 if($48){label=24;break;}else{label=21;break;}
 case 21: 
 var $50=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((16504)>>2)]=$50;
 label=24;break;
 case 23: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 ___resumeException($53$0)
 case 24: 
 var $54=HEAP32[((16504)>>2)];
 if($specify_precision_0_off0_ph_i147){label=25;break;}else{label=26;break;}
 case 25: 
 var $56=(($__iob+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$58;label=27;break;
 case 26: 
 var $60=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($43,30,$54,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$60;label=27;break;
 case 27: 
 var $__nc_0;
 var $62=($__nc_0|0)>29;
 if($62){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre144=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $100=$_pre144;label=47;break;
 case 29: 
 var $64=HEAP8[(18504)];
 var $65=(($64<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i147){label=30;break;}else{label=38;break;}
 case 30: 
 if($65){label=31;break;}else{label=35;break;}
 case 31: 
 var $68=___cxa_guard_acquire(18504);
 var $69=($68|0)==0;
 if($69){label=35;break;}else{label=32;break;}
 case 32: 
 var $71=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((16504)>>2)]=$71;
 label=35;break;
 case 34: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=37;break;
 case 35: 
 var $76=HEAP32[((16504)>>2)];
 var $77=(($__iob+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$76,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$78,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$79;label=44;break; } else { label=36;break; }
 case 36: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $eh_lpad_body$1=$81$1;var $eh_lpad_body$0=$81$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $82=$eh_lpad_body$0;
 var $83=$eh_lpad_body$1;
 var $_1119142=$83;var $_1143=$82;label=72;break;
 case 38: 
 if($65){label=39;break;}else{label=43;break;}
 case 39: 
 var $86=___cxa_guard_acquire(18504);
 var $87=($86|0)==0;
 if($87){label=43;break;}else{label=40;break;}
 case 40: 
 var $89=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((16504)>>2)]=$89;
 label=43;break;
 case 42: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $eh_lpad_body$1=$92$1;var $eh_lpad_body$0=$92$0;label=37;break;
 case 43: 
 var $94=HEAP32[((16504)>>2)];
 var $95=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$94,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$95;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $97=HEAP32[(($__nb)>>2)];
 var $98=($97|0)==0;
 if($98){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$97;var $100=$97;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $100=$_pre;label=47;break;
 case 47: 
 var $100;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $101=(($100+$__nc_2)|0);
 var $102=HEAP32[(($6)>>2)];
 var $103=$102&176;
 if(($103|0)==16){ label=48;break;}else if(($103|0)==32){ var $_0_i141=$101;label=54;break;}else{label=53;break;}
 case 48: 
 var $105=HEAP8[($100)];
 if((($105<<24)>>24)==45|(($105<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $107=(($100+1)|0);
 var $_0_i141=$107;label=54;break;
 case 50: 
 var $109=($__nc_2|0)>1;
 var $110=(($105<<24)>>24)==48;
 var $or_cond_i=$109&$110;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $112=(($100+1)|0);
 var $113=HEAP8[($112)];
 if((($113<<24)>>24)==120|(($113<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $115=(($100+2)|0);
 var $_0_i141=$115;label=54;break;
 case 53: 
 var $_0_i141=$100;label=54;break;
 case 54: 
 var $_0_i141;
 var $117=(($__o)|0);
 var $118=($100|0)==($43|0);
 if($118){var $__ob_0=$117;var $__obh_sroa_0_1=0;var $129=$43;label=59;break;}else{label=55;break;}
 case 55: 
 var $120=$__nc_2<<3;
 var $121=_malloc($120);
 var $122=$121;
 var $123=($121|0)==0;
 if($123){label=56;break;}else{var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $129=$100;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre145=HEAP32[(($__nb)>>2)];
 var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $129=$_pre145;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0=$127;var $_0118=$128;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $129;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($1,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($129,$_0_i141,$101,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $132=(($1)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133)|0);
 var $135=__ZNSt3__114__shared_count16__release_sharedEv($134);
 var $136=(($__s)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(($3)|0);
 HEAP32[(($138)>>2)]=$137;
 var $139=HEAP32[(($__op)>>2)];
 var $140=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$3,$__ob_0,$139,$140,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $142=(($2)|0);
 var $143=HEAP32[(($142)>>2)];
 HEAP32[(($136)>>2)]=$143;
 var $144=(($agg_result)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=($__obh_sroa_0_1|0)==0;
 if($145){label=64;break;}else{label=63;break;}
 case 63: 
 var $147=$__obh_sroa_0_1;
 _free($147);
 label=64;break;
 case 64: 
 var $148=($__nbh_sroa_0_1|0)==0;
 if($148){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=(($1)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155)|0);
 var $157=__ZNSt3__114__shared_count16__release_sharedEv($156);
 var $_0=$152;var $_0118=$153;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $_0118;
 var $_0;
 var $159=($__obh_sroa_0_2|0)==0;
 if($159){label=70;break;}else{label=69;break;}
 case 69: 
 var $161=$__obh_sroa_0_2;
 _free($161);
 label=70;break;
 case 70: 
 var $162=($__nbh_sroa_0_1|0)==0;
 if($162){var $_1119142=$_0118;var $_1143=$_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $_1119142=$_0118;var $_1143=$_0;label=72;break;
 case 72: 
 var $_1143;
 var $_1119142;
 var $164$0=$_1143;
 var $164$1=0;
 var $165$0=$164$0;
 var $165$1=$_1119142;
 ___resumeException($165$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(sp)+(200);
 var $2=(sp)+(208);
 var $3=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($3)]=HEAP8[(6512)];HEAP8[((($3)+(1))|0)]=HEAP8[(6513)];HEAP8[((($3)+(2))|0)]=HEAP8[(6514)];HEAP8[((($3)+(3))|0)]=HEAP8[(6515)];HEAP8[((($3)+(4))|0)]=HEAP8[(6516)];HEAP8[((($3)+(5))|0)]=HEAP8[(6517)];
 var $4=(($__nar)|0);
 var $5=HEAP8[(18504)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=___cxa_guard_acquire(18504);
 var $9=($8|0)==0;
 if($9){label=6;break;}else{label=3;break;}
 case 3: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$11;
 label=6;break;
 case 5: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 6: 
 var $15=HEAP32[((16504)>>2)];
 var $16=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$15,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=(($__nar+$16)|0);
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&176;
 if(($20|0)==32){ var $_0_i=$17;label=13;break;}else if(($20|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $22=HEAP8[($4)];
 if((($22<<24)>>24)==45|(($22<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $24=(($__nar+1)|0);
 var $_0_i=$24;label=13;break;
 case 9: 
 var $26=($16|0)>1;
 var $27=(($22<<24)>>24)==48;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $29=(($__nar+1)|0);
 var $30=HEAP8[($29)];
 if((($30<<24)>>24)==120|(($30<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $32=(($__nar+2)|0);
 var $_0_i=$32;label=13;break;
 case 12: 
 var $_0_i=$4;label=13;break;
 case 13: 
 var $_0_i;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $34=(($1)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$__p_i_i_i;
 var $37=HEAP32[((17936)>>2)];
 var $38=($37|0)==-1;
 if($38){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$36,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $40=HEAP32[((17940)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($35+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($35+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$43;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=$48>>2;
 var $50=($49>>>0)>($41>>>0);
 if($50){label=16;break;}else{label=17;break;}
 case 16: 
 var $51=(($45+($41<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=17;break;}else{label=19;break;}
 case 17: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 __ZNSt8bad_castC2Ev($55);
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $56=$52;
 var $57=HEAP32[(($34)>>2)];
 var $58=(($57)|0);
 var $59=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $60=(($__o)|0);
 var $61=$52;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+48)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($56,$4,$17,$60);
 var $66=(($__o+($16<<2))|0);
 var $67=($_0_i|0)==($17|0);
 if($67){var $__op_0=$66;label=22;break;}else{label=21;break;}
 case 20: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($34)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 21: 
 var $74=$__nar;
 var $75=$_0_i;
 var $76=((($75)-($74))|0);
 var $77=(($__o+($76<<2))|0);
 var $__op_0=$77;label=22;break;
 case 22: 
 var $__op_0;
 var $79=(($__s)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($2)|0);
 HEAP32[(($81)>>2)]=$80;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$2,$60,$__op_0,$66,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i;
 var $8=HEAP32[((17944)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$7,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $11=HEAP32[((17948)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($6+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($6+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$23;
 var $28=HEAP32[(($5)>>2)];
 var $29=(($28)|0);
 var $30=__ZNSt3__114__shared_count16__release_sharedEv($29);
 HEAP32[(($__err)>>2)]=0;
 var $31=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($31){label=67;break;}else{label=8;break;}
 case 8: 
 var $32=(($__e)|0);
 var $33=$23;
 var $34=$23;
 var $35=(($23+8)|0);
 var $36=$35;
 var $37=$this;
 var $38=(($3)|0);
 var $39=(($4)|0);
 var $40=(($2)|0);
 var $_0137_ph167=$__fmtb;var $_pre168=0;label=9;break;
 case 9: 
 var $_pre168;
 var $_0137_ph167;
 var $42=$_pre168;label=10;break;
 case 10: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=67;break;}
 case 11: 
 var $45=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $46=($45|0)==0;
 if($46){var $60=0;label=15;break;}else{label=12;break;}
 case 12: 
 var $48=(($45+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($45+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=13;break;}else{var $60=$45;label=15;break;}
 case 13: 
 var $53=$45;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($45);
 var $58=($57|0)==-1;
 if($58){label=14;break;}else{var $60=$45;label=15;break;}
 case 14: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $60=0;label=15;break;
 case 15: 
 var $60;
 var $61=($60|0)==0;
 var $62=HEAP32[(($32)>>2)];
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=16;break;}
 case 16: 
 var $65=(($62+12)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($62+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($66|0)==($68|0);
 if($69){label=17;break;}else{label=19;break;}
 case 17: 
 var $70=$62;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+36)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=FUNCTION_TABLE[$73]($62);
 var $75=($74|0)==-1;
 if($75){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($32)>>2)]=0;
 label=20;break;
 case 19: 
 if($61){var $84=$62;label=23;break;}else{label=21;break;}
 case 20: 
 if($61){label=21;break;}else{var $84=0;label=23;break;}
 case 21: 
 HEAP32[(($__err)>>2)]=4;
 var $237=$60;label=68;break;
 case 22: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=HEAP32[(($5)>>2)];
 var $81=(($80)|0);
 var $82=__ZNSt3__114__shared_count16__release_sharedEv($81);
 ___resumeException($79$0)
 case 23: 
 var $84;
 var $85=HEAP8[($_0137_ph167)];
 var $86=HEAP32[(($33)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=FUNCTION_TABLE[$88]($27,$85,0);
 var $90=(($89<<24)>>24)==37;
 if($90){label=24;break;}else{label=33;break;}
 case 24: 
 var $92=(($_0137_ph167+1)|0);
 var $93=($92|0)==($__fmte|0);
 if($93){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $237=$60;label=68;break;
 case 26: 
 var $96=HEAP8[($92)];
 var $97=HEAP32[(($33)>>2)];
 var $98=(($97+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=FUNCTION_TABLE[$99]($27,$96,0);
 if((($100<<24)>>24)==69|(($100<<24)>>24)==48){ label=27;break;}else{var $__opt_0=0;var $__cmd_0=$100;var $_1=$92;label=30;break;}
 case 27: 
 var $102=(($_0137_ph167+2)|0);
 var $103=($102|0)==($__fmte|0);
 if($103){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($__err)>>2)]=4;
 var $237=$60;label=68;break;
 case 29: 
 var $106=HEAP8[($102)];
 var $107=HEAP32[(($33)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($27,$106,0);
 var $__opt_0=$100;var $__cmd_0=$110;var $_1=$102;label=30;break;
 case 30: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $112=HEAP32[(($37)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 HEAP32[(($38)>>2)]=$60;
 HEAP32[(($39)>>2)]=$84;
 FUNCTION_TABLE[$114]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $115=HEAP32[(($40)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$115;
 var $116=(($_1+1)|0);
 var $_0137_ph_be=$116;label=31;break;
 case 31: 
 var $_0137_ph_be;
 var $117=($_0137_ph_be|0)==($__fmte|0);
 if($117){label=67;break;}else{label=32;break;}
 case 32: 
 var $_pre168_pre=HEAP32[(($__err)>>2)];
 var $_0137_ph167=$_0137_ph_be;var $_pre168=$_pre168_pre;label=9;break;
 case 33: 
 var $119=HEAP8[($_0137_ph167)];
 var $120=(($119<<24)>>24)<0;
 if($120){label=58;break;}else{label=34;break;}
 case 34: 
 var $121=(($119<<24)>>24);
 var $122=HEAP32[(($36)>>2)];
 var $123=(($122+($121<<1))|0);
 var $124=HEAP16[(($123)>>1)];
 var $125=$124&8192;
 var $phitmp=(($125<<16)>>16)==0;
 if($phitmp){label=58;break;}else{var $_0137_pn=$_0137_ph167;label=35;break;}
 case 35: 
 var $_0137_pn;
 var $_2=(($_0137_pn+1)|0);
 var $126=($_2|0)==($__fmte|0);
 if($126){var $_2_lcssa=$__fmte;label=38;break;}else{label=36;break;}
 case 36: 
 var $128=HEAP8[($_2)];
 var $129=(($128<<24)>>24)<0;
 if($129){var $_2_lcssa=$_2;label=38;break;}else{label=37;break;}
 case 37: 
 var $130=(($128<<24)>>24);
 var $131=(($122+($130<<1))|0);
 var $132=HEAP16[(($131)>>1)];
 var $133=$132&8192;
 var $phitmp150=(($133<<16)>>16)==0;
 if($phitmp150){var $_2_lcssa=$_2;label=38;break;}else{var $_0137_pn=$_2;label=35;break;}
 case 38: 
 var $_2_lcssa;
 var $135=$60;var $134=$84;label=39;break;
 case 39: 
 var $134;
 var $135;
 var $136=($135|0)==0;
 if($136){var $150=0;label=43;break;}else{label=40;break;}
 case 40: 
 var $138=(($135+12)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($135+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($139|0)==($141|0);
 if($142){label=41;break;}else{var $150=$135;label=43;break;}
 case 41: 
 var $143=$135;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+36)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=FUNCTION_TABLE[$146]($135);
 var $148=($147|0)==-1;
 if($148){label=42;break;}else{var $150=$135;label=43;break;}
 case 42: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $150=0;label=43;break;
 case 43: 
 var $150;
 var $151=($150|0)==0;
 var $152=($134|0)==0;
 if($152){label=48;break;}else{label=44;break;}
 case 44: 
 var $154=(($134+12)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($134+16)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($155|0)==($157|0);
 if($158){label=46;break;}else{label=45;break;}
 case 45: 
 if($151){var $169=$134;label=50;break;}else{var $_0137_ph_be=$_2_lcssa;label=31;break;}
 case 46: 
 var $159=$134;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=FUNCTION_TABLE[$162]($134);
 var $164=($163|0)==-1;
 if($164){label=47;break;}else{label=49;break;}
 case 47: 
 HEAP32[(($32)>>2)]=0;
 label=48;break;
 case 48: 
 if($151){var $_0137_ph_be=$_2_lcssa;label=31;break;}else{var $169=0;label=50;break;}
 case 49: 
 var $166=($134|0)==0;
 var $167=$151^$166;
 if($167){var $169=$134;label=50;break;}else{var $_0137_ph_be=$_2_lcssa;label=31;break;}
 case 50: 
 var $169;
 var $170=(($150+12)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($150+16)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($171|0)==($173|0);
 if($174){label=51;break;}else{label=52;break;}
 case 51: 
 var $176=$150;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+36)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=FUNCTION_TABLE[$179]($150);
 var $extract_t147=(($180)&255);
 var $_0139_off0=$extract_t147;label=53;break;
 case 52: 
 var $182=HEAP8[($171)];
 var $_0139_off0=$182;label=53;break;
 case 53: 
 var $_0139_off0;
 var $183=(($_0139_off0<<24)>>24)<0;
 if($183){var $_0137_ph_be=$_2_lcssa;label=31;break;}else{label=54;break;}
 case 54: 
 var $184=(($_0139_off0<<24)>>24);
 var $185=HEAP32[(($36)>>2)];
 var $186=(($185+($184<<1))|0);
 var $187=HEAP16[(($186)>>1)];
 var $188=$187&8192;
 var $phitmp149=(($188<<16)>>16)==0;
 if($phitmp149){var $_0137_ph_be=$_2_lcssa;label=31;break;}else{label=55;break;}
 case 55: 
 var $190=HEAP32[(($170)>>2)];
 var $191=HEAP32[(($172)>>2)];
 var $192=($190|0)==($191|0);
 if($192){label=56;break;}else{label=57;break;}
 case 56: 
 var $194=$150;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+40)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=FUNCTION_TABLE[$197]($150);
 var $135=$150;var $134=$169;label=39;break;
 case 57: 
 var $200=(($190+1)|0);
 HEAP32[(($170)>>2)]=$200;
 var $135=$150;var $134=$169;label=39;break;
 case 58: 
 var $201=(($60+12)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($60+16)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($202|0)==($204|0);
 if($205){label=59;break;}else{label=60;break;}
 case 59: 
 var $207=$60;
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+36)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=FUNCTION_TABLE[$210]($60);
 var $extract_t=(($211)&255);
 var $_0136_off0=$extract_t;label=61;break;
 case 60: 
 var $213=HEAP8[($202)];
 var $_0136_off0=$213;label=61;break;
 case 61: 
 var $_0136_off0;
 var $214=HEAP32[(($34)>>2)];
 var $215=(($214+12)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=FUNCTION_TABLE[$216]($27,$_0136_off0);
 var $218=HEAP8[($_0137_ph167)];
 var $219=HEAP32[(($34)>>2)];
 var $220=(($219+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($27,$218);
 var $223=(($217<<24)>>24)==(($222<<24)>>24);
 if($223){label=62;break;}else{label=66;break;}
 case 62: 
 var $225=HEAP32[(($201)>>2)];
 var $226=HEAP32[(($203)>>2)];
 var $227=($225|0)==($226|0);
 if($227){label=63;break;}else{label=64;break;}
 case 63: 
 var $229=$60;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+40)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=FUNCTION_TABLE[$232]($60);
 label=65;break;
 case 64: 
 var $235=(($225+1)|0);
 HEAP32[(($201)>>2)]=$235;
 label=65;break;
 case 65: 
 var $236=(($_0137_ph167+1)|0);
 var $_0137_ph_be=$236;label=31;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $42=4;label=10;break;
 case 67: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $237=$_pre;label=68;break;
 case 68: 
 var $237;
 var $238=(($__b)|0);
 var $239=($237|0)==0;
 if($239){label=72;break;}else{label=69;break;}
 case 69: 
 var $241=(($237+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($237+16)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=($242|0)==($244|0);
 if($245){label=70;break;}else{label=72;break;}
 case 70: 
 var $246=$237;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($237);
 var $251=($250|0)==-1;
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 HEAP32[(($238)>>2)]=0;
 label=72;break;
 case 72: 
 var $253=HEAP32[(($238)>>2)];
 var $254=($253|0)==0;
 var $255=(($__e)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)==0;
 if($257){label=77;break;}else{label=73;break;}
 case 73: 
 var $259=(($256+12)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($256+16)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($260|0)==($262|0);
 if($263){label=74;break;}else{label=76;break;}
 case 74: 
 var $264=$256;
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+36)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=FUNCTION_TABLE[$267]($256);
 var $269=($268|0)==-1;
 if($269){label=75;break;}else{label=76;break;}
 case 75: 
 HEAP32[(($255)>>2)]=0;
 label=77;break;
 case 76: 
 if($254){label=79;break;}else{label=78;break;}
 case 77: 
 if($254){label=78;break;}else{label=79;break;}
 case 78: 
 var $272=HEAP32[(($__err)>>2)];
 var $273=$272|2;
 HEAP32[(($__err)>>2)]=$273;
 label=79;break;
 case 79: 
 var $275=(($agg_result)|0);
 HEAP32[(($275)>>2)]=$253;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,6496,6504);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=$8;
 var $17=HEAP8[($16)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=3;break;}else{label=2;break;}
 case 2: 
 var $21=(($8+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $27=$22;var $26=$22;label=4;break;
 case 3: 
 var $24=(($15+1)|0);
 var $25=(($15+1)|0);
 var $27=$25;var $26=$24;label=4;break;
 case 4: 
 var $26;
 var $27;
 var $28=($17&255);
 var $29=$28&1;
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($8+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $36=$33;label=7;break;
 case 6: 
 var $35=$28>>>1;
 var $36=$35;label=7;break;
 case 7: 
 var $36;
 var $37=(($27+$36)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$26,$37);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17944)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((17948)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($32);
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$30;
 var $38=(($36+168)|0);
 var $39=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$36,$38,$25,$__err,0);
 var $40=$39;
 var $41=$36;
 var $42=((($40)-($41))|0);
 var $43=($42|0)<168;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=(($__tm+24)|0);
 var $46=(((($42|0))/(12))&-1);
 var $47=(((($46|0))%(7))&-1);
 HEAP32[(($45)>>2)]=$47;
 label=9;break;
 case 9: 
 var $48=(($__b)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$49;
 STACKTOP=sp;return;
 case 10: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=HEAP32[(($3)>>2)];
 var $54=(($53)|0);
 var $55=__ZNSt3__114__shared_count16__release_sharedEv($54);
 ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17944)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((17948)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=FUNCTION_TABLE[$36]($32);
 var $38=(($1)|0);
 HEAP32[(($38)>>2)]=$30;
 var $39=(($37+288)|0);
 var $40=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$37,$39,$25,$__err,0);
 var $41=$40;
 var $42=$37;
 var $43=((($41)-($42))|0);
 var $44=($43|0)<288;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=(($__tm+16)|0);
 var $47=(((($43|0))/(12))&-1);
 var $48=(((($47|0))%(12))&-1);
 HEAP32[(($46)>>2)]=$48;
 label=9;break;
 case 9: 
 var $49=(($__b)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($agg_result)|0);
 HEAP32[(($51)>>2)]=$50;
 STACKTOP=sp;return;
 case 10: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=HEAP32[(($3)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 ___resumeException($53$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17944)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $9=HEAP32[((17948)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__tm+20)|0);
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$1;
 var $33=(($1)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$25,4);
 var $35=HEAP32[(($__err)>>2)];
 var $36=$35&4;
 var $37=($36|0)==0;
 if($37){label=8;break;}else{label=12;break;}
 case 8: 
 var $39=($34|0)<69;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=((($34)+(2000))|0);
 var $__t_0_i=$41;label=11;break;
 case 10: 
 var $_off_i=((($34)-(69))|0);
 var $43=($_off_i>>>0)<31;
 var $44=((($34)+(1900))|0);
 var $__i=$43?$44:$34;
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $46=((($__t_0_i)-(1900))|0);
 HEAP32[(($29)>>2)]=$46;
 label=12;break;
 case 12: 
 var $47=(($__b)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($agg_result)|0);
 HEAP32[(($49)>>2)]=$48;
 STACKTOP=sp;return;
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP32[(($3)>>2)];
 var $53=(($52)|0);
 var $54=__ZNSt3__114__shared_count16__release_sharedEv($53);
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i;
 var $44=HEAP32[((17944)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$43,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $47=HEAP32[((17948)>>2)];
 var $48=((($47)-(1))|0);
 var $49=(($42+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($42+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$50;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($48>>>0);
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 var $58=(($52+($48<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=5;break;}else{label=7;break;}
 case 5: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 __ZNSt8bad_castC2Ev($62);
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $63=$59;
 var $64=HEAP32[(($41)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 var $67=(($__fmt<<24)>>24);
 switch(($67|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($41)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 9: 
 var $74=(($__e)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$13;
 var $77=(($this+8)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($77);
 var $82=(($13)|0);
 HEAP32[(($82)>>2)]=$75;
 var $83=(($81+168)|0);
 var $84=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$81,$83,$63,$__err,0);
 var $85=$84;
 var $86=$81;
 var $87=((($85)-($86))|0);
 var $88=($87|0)<168;
 if($88){label=10;break;}else{label=70;break;}
 case 10: 
 var $90=(($__tm+24)|0);
 var $91=(((($87|0))/(12))&-1);
 var $92=(((($91|0))%(7))&-1);
 HEAP32[(($90)>>2)]=$92;
 label=70;break;
 case 11: 
 var $94=(($__e)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$12;
 var $97=(($this+8)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=FUNCTION_TABLE[$101]($97);
 var $103=(($12)|0);
 HEAP32[(($103)>>2)]=$95;
 var $104=(($102+288)|0);
 var $105=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$102,$104,$63,$__err,0);
 var $106=$105;
 var $107=$102;
 var $108=((($106)-($107))|0);
 var $109=($108|0)<288;
 if($109){label=12;break;}else{label=70;break;}
 case 12: 
 var $111=(($__tm+16)|0);
 var $112=(((($108|0))/(12))&-1);
 var $113=(((($112|0))%(12))&-1);
 HEAP32[(($111)>>2)]=$113;
 label=70;break;
 case 13: 
 var $115=(($this+8)|0);
 var $116=$115;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($115);
 var $121=(($__b)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($16)|0);
 HEAP32[(($123)>>2)]=$122;
 var $124=(($__e)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($17)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=$120;
 var $128=$120;
 var $129=HEAP8[($128)];
 var $130=$129&1;
 var $131=(($130<<24)>>24)==0;
 if($131){label=15;break;}else{label=14;break;}
 case 14: 
 var $133=(($120+8)|0);
 var $134=HEAP32[(($133)>>2)];
 var $139=$134;var $138=$134;label=16;break;
 case 15: 
 var $136=(($127+1)|0);
 var $137=(($127+1)|0);
 var $139=$137;var $138=$136;label=16;break;
 case 16: 
 var $138;
 var $139;
 var $140=($129&255);
 var $141=$140&1;
 var $142=($141|0)==0;
 if($142){label=18;break;}else{label=17;break;}
 case 17: 
 var $144=(($120+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $148=$145;label=19;break;
 case 18: 
 var $147=$140>>>1;
 var $148=$147;label=19;break;
 case 19: 
 var $148;
 var $149=(($139+$148)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$138,$149);
 var $150=(($15)|0);
 var $151=HEAP32[(($150)>>2)];
 HEAP32[(($121)>>2)]=$151;
 label=70;break;
 case 20: 
 var $153=(($__tm+12)|0);
 var $154=(($__e)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=$11;
 var $157=(($11)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$63,2);
 var $159=HEAP32[(($__err)>>2)];
 var $160=$159&4;
 var $161=($160|0)==0;
 if($161){label=21;break;}else{label=23;break;}
 case 21: 
 var $_off_i=((($158)-(1))|0);
 var $163=($_off_i>>>0)<31;
 if($163){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($153)>>2)]=$158;
 label=70;break;
 case 23: 
 var $166=$159|4;
 HEAP32[(($__err)>>2)]=$166;
 label=70;break;
 case 24: 
 var $168=(($__b)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($19)|0);
 HEAP32[(($170)>>2)]=$169;
 var $171=(($__e)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($20)|0);
 HEAP32[(($173)>>2)]=$172;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$19,$20,$__iob,$__err,$__tm,6488,6496);
 var $174=(($18)|0);
 var $175=HEAP32[(($174)>>2)];
 HEAP32[(($168)>>2)]=$175;
 label=70;break;
 case 25: 
 var $177=(($__b)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($22)|0);
 HEAP32[(($179)>>2)]=$178;
 var $180=(($__e)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($23)|0);
 HEAP32[(($182)>>2)]=$181;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$22,$23,$__iob,$__err,$__tm,6480,6488);
 var $183=(($21)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP32[(($177)>>2)]=$184;
 label=70;break;
 case 26: 
 var $186=(($__e)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$10;
 var $189=(($10)|0);
 HEAP32[(($189)>>2)]=$187;
 var $190=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$63,2);
 var $191=HEAP32[(($__err)>>2)];
 var $192=$191&4;
 var $193=($192|0)==0;
 var $194=($190|0)<24;
 var $or_cond_i=$193&$194;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $196=(($__tm+8)|0);
 HEAP32[(($196)>>2)]=$190;
 label=70;break;
 case 28: 
 var $198=$191|4;
 HEAP32[(($__err)>>2)]=$198;
 label=70;break;
 case 29: 
 var $200=(($__tm+8)|0);
 var $201=(($__e)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=$9;
 var $204=(($9)|0);
 HEAP32[(($204)>>2)]=$202;
 var $205=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$63,2);
 var $206=HEAP32[(($__err)>>2)];
 var $207=$206&4;
 var $208=($207|0)==0;
 if($208){label=30;break;}else{label=32;break;}
 case 30: 
 var $_off_i164=((($205)-(1))|0);
 var $210=($_off_i164>>>0)<12;
 if($210){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($200)>>2)]=$205;
 label=70;break;
 case 32: 
 var $213=$206|4;
 HEAP32[(($__err)>>2)]=$213;
 label=70;break;
 case 33: 
 var $215=(($__e)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=$8;
 var $218=(($8)|0);
 HEAP32[(($218)>>2)]=$216;
 var $219=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$63,3);
 var $220=HEAP32[(($__err)>>2)];
 var $221=$220&4;
 var $222=($221|0)==0;
 var $223=($219|0)<366;
 var $or_cond_i167=$222&$223;
 if($or_cond_i167){label=34;break;}else{label=35;break;}
 case 34: 
 var $225=(($__tm+28)|0);
 HEAP32[(($225)>>2)]=$219;
 label=70;break;
 case 35: 
 var $227=$220|4;
 HEAP32[(($__err)>>2)]=$227;
 label=70;break;
 case 36: 
 var $229=(($__e)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=$7;
 var $232=(($7)|0);
 HEAP32[(($232)>>2)]=$230;
 var $233=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$63,2);
 var $234=((($233)-(1))|0);
 var $235=HEAP32[(($__err)>>2)];
 var $236=$235&4;
 var $237=($236|0)==0;
 var $238=($234|0)<12;
 var $or_cond_i170=$237&$238;
 if($or_cond_i170){label=37;break;}else{label=38;break;}
 case 37: 
 var $240=(($__tm+16)|0);
 HEAP32[(($240)>>2)]=$234;
 label=70;break;
 case 38: 
 var $242=$235|4;
 HEAP32[(($__err)>>2)]=$242;
 label=70;break;
 case 39: 
 var $244=(($__e)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=$6;
 var $247=(($6)|0);
 HEAP32[(($247)>>2)]=$245;
 var $248=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$63,2);
 var $249=HEAP32[(($__err)>>2)];
 var $250=$249&4;
 var $251=($250|0)==0;
 var $252=($248|0)<60;
 var $or_cond_i173=$251&$252;
 if($or_cond_i173){label=40;break;}else{label=41;break;}
 case 40: 
 var $254=(($__tm+4)|0);
 HEAP32[(($254)>>2)]=$248;
 label=70;break;
 case 41: 
 var $256=$249|4;
 HEAP32[(($__err)>>2)]=$256;
 label=70;break;
 case 42: 
 var $258=(($__e)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($24)|0);
 HEAP32[(($260)>>2)]=$259;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$24,$__err,$63);
 label=70;break;
 case 43: 
 var $262=(($__tm+8)|0);
 var $263=(($__e)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($25)|0);
 HEAP32[(($265)>>2)]=$264;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$262,$__b,$25,$__err,$63);
 label=70;break;
 case 44: 
 var $267=(($__b)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($27)|0);
 HEAP32[(($269)>>2)]=$268;
 var $270=(($__e)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($28)|0);
 HEAP32[(($272)>>2)]=$271;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($26,$this,$27,$28,$__iob,$__err,$__tm,6464,6475);
 var $273=(($26)|0);
 var $274=HEAP32[(($273)>>2)];
 HEAP32[(($267)>>2)]=$274;
 label=70;break;
 case 45: 
 var $276=(($__b)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($30)|0);
 HEAP32[(($278)>>2)]=$277;
 var $279=(($__e)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($31)|0);
 HEAP32[(($281)>>2)]=$280;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($29,$this,$30,$31,$__iob,$__err,$__tm,6456,6461);
 var $282=(($29)|0);
 var $283=HEAP32[(($282)>>2)];
 HEAP32[(($276)>>2)]=$283;
 label=70;break;
 case 46: 
 var $285=(($__e)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=$5;
 var $288=(($5)|0);
 HEAP32[(($288)>>2)]=$286;
 var $289=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$63,2);
 var $290=HEAP32[(($__err)>>2)];
 var $291=$290&4;
 var $292=($291|0)==0;
 var $293=($289|0)<61;
 var $or_cond_i176=$292&$293;
 if($or_cond_i176){label=47;break;}else{label=48;break;}
 case 47: 
 var $295=(($__tm)|0);
 HEAP32[(($295)>>2)]=$289;
 label=70;break;
 case 48: 
 var $297=$290|4;
 HEAP32[(($__err)>>2)]=$297;
 label=70;break;
 case 49: 
 var $299=(($__b)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=(($33)|0);
 HEAP32[(($301)>>2)]=$300;
 var $302=(($__e)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=(($34)|0);
 HEAP32[(($304)>>2)]=$303;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($32,$this,$33,$34,$__iob,$__err,$__tm,6448,6456);
 var $305=(($32)|0);
 var $306=HEAP32[(($305)>>2)];
 HEAP32[(($299)>>2)]=$306;
 label=70;break;
 case 50: 
 var $308=(($__e)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=$4;
 var $311=(($4)|0);
 HEAP32[(($311)>>2)]=$309;
 var $312=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$63,1);
 var $313=HEAP32[(($__err)>>2)];
 var $314=$313&4;
 var $315=($314|0)==0;
 var $316=($312|0)<7;
 var $or_cond_i179=$315&$316;
 if($or_cond_i179){label=51;break;}else{label=52;break;}
 case 51: 
 var $318=(($__tm+24)|0);
 HEAP32[(($318)>>2)]=$312;
 label=70;break;
 case 52: 
 var $320=$313|4;
 HEAP32[(($__err)>>2)]=$320;
 label=70;break;
 case 53: 
 var $322=$this;
 var $323=HEAP32[(($322)>>2)];
 var $324=(($323+20)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=(($__b)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($35)|0);
 HEAP32[(($328)>>2)]=$327;
 var $329=(($__e)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($36)|0);
 HEAP32[(($331)>>2)]=$330;
 FUNCTION_TABLE[$325]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $333=(($this+8)|0);
 var $334=$333;
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+24)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=FUNCTION_TABLE[$337]($333);
 var $339=(($__b)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=(($38)|0);
 HEAP32[(($341)>>2)]=$340;
 var $342=(($__e)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=(($39)|0);
 HEAP32[(($344)>>2)]=$343;
 var $345=$338;
 var $346=$338;
 var $347=HEAP8[($346)];
 var $348=$347&1;
 var $349=(($348<<24)>>24)==0;
 if($349){label=56;break;}else{label=55;break;}
 case 55: 
 var $351=(($338+8)|0);
 var $352=HEAP32[(($351)>>2)];
 var $357=$352;var $356=$352;label=57;break;
 case 56: 
 var $354=(($345+1)|0);
 var $355=(($345+1)|0);
 var $357=$355;var $356=$354;label=57;break;
 case 57: 
 var $356;
 var $357;
 var $358=($347&255);
 var $359=$358&1;
 var $360=($359|0)==0;
 if($360){label=59;break;}else{label=58;break;}
 case 58: 
 var $362=(($338+4)|0);
 var $363=HEAP32[(($362)>>2)];
 var $366=$363;label=60;break;
 case 59: 
 var $365=$358>>>1;
 var $366=$365;label=60;break;
 case 60: 
 var $366;
 var $367=(($357+$366)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$356,$367);
 var $368=(($37)|0);
 var $369=HEAP32[(($368)>>2)];
 HEAP32[(($339)>>2)]=$369;
 label=70;break;
 case 61: 
 var $371=(($__tm+20)|0);
 var $372=(($__e)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=$3;
 var $375=(($3)|0);
 HEAP32[(($375)>>2)]=$373;
 var $376=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$63,4);
 var $377=HEAP32[(($__err)>>2)];
 var $378=$377&4;
 var $379=($378|0)==0;
 if($379){label=62;break;}else{label=70;break;}
 case 62: 
 var $381=($376|0)<69;
 if($381){label=63;break;}else{label=64;break;}
 case 63: 
 var $383=((($376)+(2000))|0);
 var $__t_0_i=$383;label=65;break;
 case 64: 
 var $_off_i182=((($376)-(69))|0);
 var $385=($_off_i182>>>0)<31;
 var $386=((($376)+(1900))|0);
 var $__i=$385?$386:$376;
 var $__t_0_i=$__i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $388=((($__t_0_i)-(1900))|0);
 HEAP32[(($371)>>2)]=$388;
 label=70;break;
 case 66: 
 var $390=(($__e)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=$2;
 var $393=(($2)|0);
 HEAP32[(($393)>>2)]=$391;
 var $394=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$63,4);
 var $395=HEAP32[(($__err)>>2)];
 var $396=$395&4;
 var $397=($396|0)==0;
 if($397){label=67;break;}else{label=70;break;}
 case 67: 
 var $399=(($__tm+20)|0);
 var $400=((($394)-(1900))|0);
 HEAP32[(($399)>>2)]=$400;
 label=70;break;
 case 68: 
 var $402=(($__e)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($40)|0);
 HEAP32[(($404)>>2)]=$403;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$40,$__err,$63);
 label=70;break;
 case 69: 
 var $406=HEAP32[(($__err)>>2)];
 var $407=$406|4;
 HEAP32[(($__err)>>2)]=$407;
 label=70;break;
 case 70: 
 var $408=(($__b)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($agg_result)|0);
 HEAP32[(($410)>>2)]=$409;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=(($__ct+8)|0);
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $19=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{var $19=$4;label=7;break;}
 case 4: 
 var $12=$4;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($4);
 var $17=($16|0)==-1;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre=HEAP32[(($1)>>2)];
 var $19=$_pre;label=7;break;
 case 6: 
 HEAP32[(($1)>>2)]=0;
 var $19=0;label=7;break;
 case 7: 
 var $19;
 var $20=($19|0)==0;
 var $21=HEAP32[(($2)>>2)];
 var $22=($21|0)==0;
 if($22){label=12;break;}else{label=8;break;}
 case 8: 
 var $24=(($21+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($21+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($25|0)==($27|0);
 if($28){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=$21;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($21);
 var $34=($33|0)==-1;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($2)>>2)]=0;
 label=12;break;
 case 11: 
 if($20){var $38=$21;var $37=0;label=13;break;}else{var $75=$21;var $74=0;label=21;break;}
 case 12: 
 if($20){var $75=0;var $74=1;label=21;break;}else{var $38=0;var $37=1;label=13;break;}
 case 13: 
 var $37;
 var $38;
 var $39=HEAP32[(($1)>>2)];
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($39+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($41|0)==($43|0);
 if($44){label=14;break;}else{label=15;break;}
 case 14: 
 var $46=$39;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+36)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($39);
 var $extract_t=(($50)&255);
 var $_053_off0=$extract_t;label=16;break;
 case 15: 
 var $52=HEAP8[($41)];
 var $_053_off0=$52;label=16;break;
 case 16: 
 var $_053_off0;
 var $53=(($_053_off0<<24)>>24)<0;
 if($53){var $75=$38;var $74=$37;label=21;break;}else{label=17;break;}
 case 17: 
 var $54=(($_053_off0<<24)>>24);
 var $55=HEAP32[(($3)>>2)];
 var $56=(($55+($54<<1))|0);
 var $57=HEAP16[(($56)>>1)];
 var $58=$57&8192;
 var $phitmp=(($58<<16)>>16)==0;
 if($phitmp){var $75=$38;var $74=$37;label=21;break;}else{label=18;break;}
 case 18: 
 var $60=HEAP32[(($1)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($60+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){label=19;break;}else{label=20;break;}
 case 19: 
 var $67=$60;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+40)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=FUNCTION_TABLE[$70]($60);
 label=2;break;
 case 20: 
 var $73=(($62+1)|0);
 HEAP32[(($61)>>2)]=$73;
 label=2;break;
 case 21: 
 var $74;
 var $75;
 var $76=HEAP32[(($1)>>2)];
 var $77=($76|0)==0;
 if($77){var $91=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $79=(($76+12)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($76+16)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($80|0)==($82|0);
 if($83){label=23;break;}else{var $91=$76;label=26;break;}
 case 23: 
 var $84=$76;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+36)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($76);
 var $89=($88|0)==-1;
 if($89){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre60=HEAP32[(($1)>>2)];
 var $91=$_pre60;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $91=0;label=26;break;
 case 26: 
 var $91;
 var $92=($91|0)==0;
 if($74){label=31;break;}else{label=27;break;}
 case 27: 
 var $94=(($75+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($75+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=28;break;}else{label=32;break;}
 case 28: 
 var $99=$75;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($75);
 var $104=($103|0)==-1;
 if($104){label=30;break;}else{label=29;break;}
 case 29: 
 if($92){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($2)>>2)]=0;
 label=31;break;
 case 31: 
 if($92){label=33;break;}else{label=34;break;}
 case 32: 
 var $106=($75|0)==0;
 var $tmp56=$92^$106;
 if($tmp56){label=34;break;}else{label=33;break;}
 case 33: 
 var $108=HEAP32[(($__err)>>2)];
 var $109=$108|2;
 HEAP32[(($__err)>>2)]=$109;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10&1;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$10>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($7+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $40=$20;var $39=0;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $40=0;var $39=1;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 label=34;break;
 case 13: 
 var $39;
 var $40;
 var $41=HEAP32[(($1)>>2)];
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($41+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$41;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=FUNCTION_TABLE[$51]($41);
 var $extract_t=(($52)&255);
 var $_053_off0=$extract_t;label=16;break;
 case 15: 
 var $54=HEAP8[($43)];
 var $_053_off0=$54;label=16;break;
 case 16: 
 var $_053_off0;
 var $55=$__ct;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=FUNCTION_TABLE[$58]($__ct,$_053_off0,0);
 var $60=(($59<<24)>>24)==37;
 if($60){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($__err)>>2)];
 var $63=$62|4;
 HEAP32[(($__err)>>2)]=$63;
 label=34;break;
 case 18: 
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($65+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=$65;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+40)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($65);
 label=21;break;
 case 20: 
 var $78=(($67+1)|0);
 HEAP32[(($66)>>2)]=$78;
 label=21;break;
 case 21: 
 var $79=HEAP32[(($1)>>2)];
 var $80=($79|0)==0;
 if($80){var $94=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $82=(($79+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($79+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($83|0)==($85|0);
 if($86){label=23;break;}else{var $94=$79;label=26;break;}
 case 23: 
 var $87=$79;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=FUNCTION_TABLE[$90]($79);
 var $92=($91|0)==-1;
 if($92){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre58=HEAP32[(($1)>>2)];
 var $94=$_pre58;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $94=0;label=26;break;
 case 26: 
 var $94;
 var $95=($94|0)==0;
 if($39){label=31;break;}else{label=27;break;}
 case 27: 
 var $97=(($40+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($40+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=28;break;}else{label=32;break;}
 case 28: 
 var $102=$40;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+36)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($40);
 var $107=($106|0)==-1;
 if($107){label=30;break;}else{label=29;break;}
 case 29: 
 if($95){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 label=31;break;
 case 31: 
 if($95){label=33;break;}else{label=34;break;}
 case 32: 
 var $109=($40|0)==0;
 var $tmp57=$95^$109;
 if($tmp57){label=34;break;}else{label=33;break;}
 case 33: 
 var $111=HEAP32[(($__err)>>2)];
 var $112=$111|2;
 HEAP32[(($__err)>>2)]=$112;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=(($__e)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=(($20+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($20+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $28=$20;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($20);
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($19)>>2)]=0;
 label=11;break;
 case 10: 
 if($18){var $39=$20;label=13;break;}else{label=12;break;}
 case 11: 
 if($18){label=12;break;}else{var $39=0;label=13;break;}
 case 12: 
 var $36=HEAP32[(($__err)>>2)];
 var $37=$36|6;
 HEAP32[(($__err)>>2)]=$37;
 var $_0102=0;label=53;break;
 case 13: 
 var $39;
 var $40=HEAP32[(($1)>>2)];
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($42|0)==($44|0);
 if($45){label=14;break;}else{label=15;break;}
 case 14: 
 var $47=$40;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+36)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=FUNCTION_TABLE[$50]($40);
 var $extract_t=(($51)&255);
 var $_0107_off0=$extract_t;label=16;break;
 case 15: 
 var $53=HEAP8[($42)];
 var $_0107_off0=$53;label=16;break;
 case 16: 
 var $_0107_off0;
 var $54=(($_0107_off0<<24)>>24)<0;
 if($54){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=(($_0107_off0<<24)>>24);
 var $56=(($__ct+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+($55<<1))|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=$59&2048;
 var $phitmp=(($60<<16)>>16)==0;
 if($phitmp){label=18;break;}else{label=19;break;}
 case 18: 
 var $61=HEAP32[(($__err)>>2)];
 var $62=$61|4;
 HEAP32[(($__err)>>2)]=$62;
 var $_0102=0;label=53;break;
 case 19: 
 var $64=$__ct;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+36)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($__ct,$_0107_off0,0);
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=20;break;}else{label=21;break;}
 case 20: 
 var $77=$70;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+40)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($70);
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;label=22;break;
 case 21: 
 var $83=(($72+1)|0);
 HEAP32[(($71)>>2)]=$83;
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$39;label=22;break;
 case 22: 
 var $84;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $100=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=24;break;}else{var $100=$85;label=27;break;}
 case 24: 
 var $93=$85;
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($85);
 var $98=($97|0)==-1;
 if($98){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre124=HEAP32[(($1)>>2)];
 var $100=$_pre124;label=27;break;
 case 26: 
 HEAP32[(($1)>>2)]=0;
 var $100=0;label=27;break;
 case 27: 
 var $100;
 var $101=($100|0)==0;
 var $102=($84|0)==0;
 if($102){var $118=$100;var $117=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $104=(($84+12)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($84+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=29;break;}else{var $116=$84;label=31;break;}
 case 29: 
 var $109=$84;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=FUNCTION_TABLE[$112]($84);
 var $114=($113|0)==-1;
 if($114){label=30;break;}else{var $116=$84;label=31;break;}
 case 30: 
 HEAP32[(($19)>>2)]=0;
 var $116=0;label=31;break;
 case 31: 
 var $116;
 var $_pr=HEAP32[(($1)>>2)];
 var $118=$_pr;var $117=$116;label=32;break;
 case 32: 
 var $117;
 var $118;
 var $119=($117|0)==0;
 var $120=$101^$119;
 var $121=($_0|0)>0;
 var $_=$120&$121;
 if($_){label=33;break;}else{label=41;break;}
 case 33: 
 var $123=(($118+12)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($118+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($124|0)==($126|0);
 if($127){label=34;break;}else{label=35;break;}
 case 34: 
 var $129=$118;
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+36)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=FUNCTION_TABLE[$132]($118);
 var $extract_t113=(($133)&255);
 var $_0103_off0=$extract_t113;label=36;break;
 case 35: 
 var $135=HEAP8[($124)];
 var $_0103_off0=$135;label=36;break;
 case 36: 
 var $_0103_off0;
 var $136=(($_0103_off0<<24)>>24)<0;
 if($136){var $_0102=$__r_0;label=53;break;}else{label=37;break;}
 case 37: 
 var $137=(($_0103_off0<<24)>>24);
 var $138=HEAP32[(($56)>>2)];
 var $139=(($138+($137<<1))|0);
 var $140=HEAP16[(($139)>>1)];
 var $141=$140&2048;
 var $phitmp115=(($141<<16)>>16)==0;
 if($phitmp115){var $_0102=$__r_0;label=53;break;}else{label=38;break;}
 case 38: 
 var $143=((($__r_0)*(10))&-1);
 var $144=HEAP32[(($64)>>2)];
 var $145=(($144+36)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=FUNCTION_TABLE[$146]($__ct,$_0103_off0,0);
 var $148=(($147<<24)>>24);
 var $149=((($148)+($143))|0);
 var $150=HEAP32[(($1)>>2)];
 var $151=(($150+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($150+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=39;break;}else{label=40;break;}
 case 39: 
 var $157=$150;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+40)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($150);
 var $__r_0_in=$149;var $_0_in=$_0;var $84=$117;label=22;break;
 case 40: 
 var $163=(($152+1)|0);
 HEAP32[(($151)>>2)]=$163;
 var $__r_0_in=$149;var $_0_in=$_0;var $84=$117;label=22;break;
 case 41: 
 var $165=($118|0)==0;
 if($165){var $179=0;label=46;break;}else{label=42;break;}
 case 42: 
 var $167=(($118+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($118+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=43;break;}else{var $179=$118;label=46;break;}
 case 43: 
 var $172=$118;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=FUNCTION_TABLE[$175]($118);
 var $177=($176|0)==-1;
 if($177){label=45;break;}else{label=44;break;}
 case 44: 
 var $_pre125=HEAP32[(($1)>>2)];
 var $179=$_pre125;label=46;break;
 case 45: 
 HEAP32[(($1)>>2)]=0;
 var $179=0;label=46;break;
 case 46: 
 var $179;
 var $180=($179|0)==0;
 if($119){label=51;break;}else{label=47;break;}
 case 47: 
 var $182=(($117+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($117+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=48;break;}else{label=50;break;}
 case 48: 
 var $187=$117;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+36)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=FUNCTION_TABLE[$190]($117);
 var $192=($191|0)==-1;
 if($192){label=49;break;}else{label=50;break;}
 case 49: 
 HEAP32[(($19)>>2)]=0;
 label=51;break;
 case 50: 
 if($180){var $_0102=$__r_0;label=53;break;}else{label=52;break;}
 case 51: 
 if($180){label=52;break;}else{var $_0102=$__r_0;label=53;break;}
 case 52: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 var $_0102=$__r_0;label=53;break;
 case 53: 
 var $_0102;
 STACKTOP=sp;return $_0102;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 var $5=(($1)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$__p_i_i_i;
 var $8=HEAP32[((17936)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$7,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $11=HEAP32[((17940)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($6+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($6+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14;
 var $18=$16;
 var $19=((($17)-($18))|0);
 var $20=$19>>2;
 var $21=($20>>>0)>($12>>>0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=(($16+($12<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 __ZNSt8bad_castC2Ev($26);
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $27=$23;
 var $28=HEAP32[(($5)>>2)];
 var $29=(($28)|0);
 var $30=__ZNSt3__114__shared_count16__release_sharedEv($29);
 HEAP32[(($__err)>>2)]=0;
 var $31=($__fmtb|0)==($__fmte|0);
 var $_phi_trans_insert_pre_pre=(($__b)|0);
 if($31){label=71;break;}else{label=8;break;}
 case 8: 
 var $32=(($__e)|0);
 var $33=$23;
 var $34=$23;
 var $35=$23;
 var $36=$this;
 var $37=(($3)|0);
 var $38=(($4)|0);
 var $39=(($2)|0);
 var $_0134_ph154=$__fmtb;var $_pre155=0;label=9;break;
 case 9: 
 var $_pre155;
 var $_0134_ph154;
 var $41=$_pre155;label=10;break;
 case 10: 
 var $41;
 var $42=($41|0)==0;
 if($42){label=11;break;}else{label=71;break;}
 case 11: 
 var $44=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $45=($44|0)==0;
 if($45){var $62=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $47=(($44+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($44+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=13;break;}else{label=14;break;}
 case 13: 
 var $53=$44;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($44);
 var $_0140=$57;label=15;break;
 case 14: 
 var $59=HEAP32[(($48)>>2)];
 var $_0140=$59;label=15;break;
 case 15: 
 var $_0140;
 var $60=($_0140|0)==-1;
 if($60){label=16;break;}else{var $62=$44;label=17;break;}
 case 16: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $62=0;label=17;break;
 case 17: 
 var $62;
 var $63=($62|0)==0;
 var $64=HEAP32[(($32)>>2)];
 var $65=($64|0)==0;
 if($65){label=23;break;}else{label=18;break;}
 case 18: 
 var $67=(($64+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($64+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($68|0)==($70|0);
 if($71){label=19;break;}else{label=20;break;}
 case 19: 
 var $73=$64;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+36)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=FUNCTION_TABLE[$76]($64);
 var $_0139=$77;label=21;break;
 case 20: 
 var $79=HEAP32[(($68)>>2)];
 var $_0139=$79;label=21;break;
 case 21: 
 var $_0139;
 var $80=($_0139|0)==-1;
 if($80){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($32)>>2)]=0;
 label=23;break;
 case 23: 
 if($63){label=25;break;}else{var $90=0;label=27;break;}
 case 24: 
 var $82=($64|0)==0;
 var $tmp141=$63^$82;
 if($tmp141){var $90=$64;label=27;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $245=$62;label=72;break;
 case 26: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $86=HEAP32[(($5)>>2)];
 var $87=(($86)|0);
 var $88=__ZNSt3__114__shared_count16__release_sharedEv($87);
 ___resumeException($85$0)
 case 27: 
 var $90;
 var $91=HEAP32[(($_0134_ph154)>>2)];
 var $92=HEAP32[(($33)>>2)];
 var $93=(($92+52)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($27,$91,0);
 var $96=(($95<<24)>>24)==37;
 if($96){label=28;break;}else{label=37;break;}
 case 28: 
 var $98=(($_0134_ph154+4)|0);
 var $99=($98|0)==($__fmte|0);
 if($99){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($__err)>>2)]=4;
 var $245=$62;label=72;break;
 case 30: 
 var $102=HEAP32[(($98)>>2)];
 var $103=HEAP32[(($33)>>2)];
 var $104=(($103+52)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($27,$102,0);
 if((($106<<24)>>24)==69|(($106<<24)>>24)==48){ label=31;break;}else{var $__opt_0=0;var $__cmd_0=$106;var $_1=$98;label=34;break;}
 case 31: 
 var $108=(($_0134_ph154+8)|0);
 var $109=($108|0)==($__fmte|0);
 if($109){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($__err)>>2)]=4;
 var $245=$62;label=72;break;
 case 33: 
 var $112=HEAP32[(($108)>>2)];
 var $113=HEAP32[(($33)>>2)];
 var $114=(($113+52)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=FUNCTION_TABLE[$115]($27,$112,0);
 var $__opt_0=$106;var $__cmd_0=$116;var $_1=$108;label=34;break;
 case 34: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $118=HEAP32[(($36)>>2)];
 var $119=(($118+36)|0);
 var $120=HEAP32[(($119)>>2)];
 HEAP32[(($37)>>2)]=$62;
 HEAP32[(($38)>>2)]=$90;
 FUNCTION_TABLE[$120]($2,$this,$3,$4,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $121=HEAP32[(($39)>>2)];
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=$121;
 var $122=(($_1+4)|0);
 var $_0134_ph_be=$122;label=35;break;
 case 35: 
 var $_0134_ph_be;
 var $123=($_0134_ph_be|0)==($__fmte|0);
 if($123){label=71;break;}else{label=36;break;}
 case 36: 
 var $_pre155_pre=HEAP32[(($__err)>>2)];
 var $_0134_ph154=$_0134_ph_be;var $_pre155=$_pre155_pre;label=9;break;
 case 37: 
 var $125=HEAP32[(($_0134_ph154)>>2)];
 var $126=HEAP32[(($34)>>2)];
 var $127=(($126+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($27,8192,$125);
 if($129){var $_0134_pn=$_0134_ph154;label=38;break;}else{label=62;break;}
 case 38: 
 var $_0134_pn;
 var $_2=(($_0134_pn+4)|0);
 var $130=($_2|0)==($__fmte|0);
 if($130){var $_2_lcssa=$__fmte;label=40;break;}else{label=39;break;}
 case 39: 
 var $132=HEAP32[(($_2)>>2)];
 var $133=HEAP32[(($34)>>2)];
 var $134=(($133+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=FUNCTION_TABLE[$135]($27,8192,$132);
 if($136){var $_0134_pn=$_2;label=38;break;}else{var $_2_lcssa=$_2;label=40;break;}
 case 40: 
 var $_2_lcssa;
 var $138=$62;var $137=$90;label=41;break;
 case 41: 
 var $137;
 var $138;
 var $139=($138|0)==0;
 if($139){var $156=0;label=47;break;}else{label=42;break;}
 case 42: 
 var $141=(($138+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($138+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=43;break;}else{label=44;break;}
 case 43: 
 var $147=$138;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+36)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=FUNCTION_TABLE[$150]($138);
 var $_0138=$151;label=45;break;
 case 44: 
 var $153=HEAP32[(($142)>>2)];
 var $_0138=$153;label=45;break;
 case 45: 
 var $_0138;
 var $154=($_0138|0)==-1;
 if($154){label=46;break;}else{var $156=$138;label=47;break;}
 case 46: 
 HEAP32[(($_phi_trans_insert_pre_pre)>>2)]=0;
 var $156=0;label=47;break;
 case 47: 
 var $156;
 var $157=($156|0)==0;
 var $158=($137|0)==0;
 if($158){label=53;break;}else{label=48;break;}
 case 48: 
 var $160=(($137+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($137+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=49;break;}else{label=50;break;}
 case 49: 
 var $166=$137;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($137);
 var $_0137=$170;label=51;break;
 case 50: 
 var $172=HEAP32[(($161)>>2)];
 var $_0137=$172;label=51;break;
 case 51: 
 var $_0137;
 var $173=($_0137|0)==-1;
 if($173){label=52;break;}else{label=54;break;}
 case 52: 
 HEAP32[(($32)>>2)]=0;
 label=53;break;
 case 53: 
 if($157){var $_0134_ph_be=$_2_lcssa;label=35;break;}else{var $178=0;label=55;break;}
 case 54: 
 var $175=($137|0)==0;
 var $176=$157^$175;
 if($176){var $178=$137;label=55;break;}else{var $_0134_ph_be=$_2_lcssa;label=35;break;}
 case 55: 
 var $178;
 var $179=(($156+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($156+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)==($182|0);
 if($183){label=56;break;}else{label=57;break;}
 case 56: 
 var $185=$156;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=FUNCTION_TABLE[$188]($156);
 var $_0136=$189;label=58;break;
 case 57: 
 var $191=HEAP32[(($180)>>2)];
 var $_0136=$191;label=58;break;
 case 58: 
 var $_0136;
 var $192=HEAP32[(($34)>>2)];
 var $193=(($192+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=FUNCTION_TABLE[$194]($27,8192,$_0136);
 if($195){label=59;break;}else{var $_0134_ph_be=$_2_lcssa;label=35;break;}
 case 59: 
 var $197=HEAP32[(($179)>>2)];
 var $198=HEAP32[(($181)>>2)];
 var $199=($197|0)==($198|0);
 if($199){label=60;break;}else{label=61;break;}
 case 60: 
 var $201=$156;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+40)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($156);
 var $138=$156;var $137=$178;label=41;break;
 case 61: 
 var $207=(($197+4)|0);
 HEAP32[(($179)>>2)]=$207;
 var $138=$156;var $137=$178;label=41;break;
 case 62: 
 var $209=(($62+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($62+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=63;break;}else{label=64;break;}
 case 63: 
 var $215=$62;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($62);
 var $_0133=$219;label=65;break;
 case 64: 
 var $221=HEAP32[(($210)>>2)];
 var $_0133=$221;label=65;break;
 case 65: 
 var $_0133;
 var $222=HEAP32[(($35)>>2)];
 var $223=(($222+28)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=FUNCTION_TABLE[$224]($27,$_0133);
 var $226=HEAP32[(($_0134_ph154)>>2)];
 var $227=HEAP32[(($35)>>2)];
 var $228=(($227+28)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($27,$226);
 var $231=($225|0)==($230|0);
 if($231){label=66;break;}else{label=70;break;}
 case 66: 
 var $233=HEAP32[(($209)>>2)];
 var $234=HEAP32[(($211)>>2)];
 var $235=($233|0)==($234|0);
 if($235){label=67;break;}else{label=68;break;}
 case 67: 
 var $237=$62;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+40)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=FUNCTION_TABLE[$240]($62);
 label=69;break;
 case 68: 
 var $243=(($233+4)|0);
 HEAP32[(($209)>>2)]=$243;
 label=69;break;
 case 69: 
 var $244=(($_0134_ph154+4)|0);
 var $_0134_ph_be=$244;label=35;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $41=4;label=10;break;
 case 71: 
 var $_pre=HEAP32[(($_phi_trans_insert_pre_pre)>>2)];
 var $245=$_pre;label=72;break;
 case 72: 
 var $245;
 var $246=(($__b)|0);
 var $247=($245|0)==0;
 if($247){label=78;break;}else{label=73;break;}
 case 73: 
 var $249=(($245+12)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($245+16)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($250|0)==($252|0);
 if($253){label=74;break;}else{label=75;break;}
 case 74: 
 var $255=$245;
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+36)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=FUNCTION_TABLE[$258]($245);
 var $_0131=$259;label=76;break;
 case 75: 
 var $261=HEAP32[(($250)>>2)];
 var $_0131=$261;label=76;break;
 case 76: 
 var $_0131;
 var $262=($_0131|0)==-1;
 if($262){label=77;break;}else{label=78;break;}
 case 77: 
 HEAP32[(($246)>>2)]=0;
 label=78;break;
 case 78: 
 var $264=HEAP32[(($246)>>2)];
 var $265=($264|0)==0;
 var $266=(($__e)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==0;
 if($268){label=84;break;}else{label=79;break;}
 case 79: 
 var $270=(($267+12)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($267+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($271|0)==($273|0);
 if($274){label=80;break;}else{label=81;break;}
 case 80: 
 var $276=$267;
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+36)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=FUNCTION_TABLE[$279]($267);
 var $_0=$280;label=82;break;
 case 81: 
 var $282=HEAP32[(($271)>>2)];
 var $_0=$282;label=82;break;
 case 82: 
 var $_0;
 var $283=($_0|0)==-1;
 if($283){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($266)>>2)]=0;
 label=84;break;
 case 84: 
 if($265){label=86;break;}else{label=87;break;}
 case 85: 
 var $285=($267|0)==0;
 var $tmp=$265^$285;
 if($tmp){label=87;break;}else{label=86;break;}
 case 86: 
 var $287=HEAP32[(($__err)>>2)];
 var $288=$287|2;
 HEAP32[(($__err)>>2)]=$288;
 label=87;break;
 case 87: 
 var $290=(($agg_result)|0);
 HEAP32[(($290)>>2)]=$264;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($1)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($2)|0);
 HEAP32[(($8)>>2)]=$7;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,6416,6448);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(($this+8)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($3);
 var $9=(($__b)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($1)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($__e)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$8;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($8+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $26=$21;var $25=$21;label=4;break;
 case 3: 
 var $23=(($8+4)|0);
 var $24=(($8+4)|0);
 var $26=$24;var $25=$23;label=4;break;
 case 4: 
 var $25;
 var $26;
 var $27=($16&255);
 var $28=$27&1;
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=5;break;}
 case 5: 
 var $31=(($8+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $35=$32;label=7;break;
 case 6: 
 var $34=$27>>>1;
 var $35=$34;label=7;break;
 case 7: 
 var $35;
 var $36=(($26+($35<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$1,$2,$__iob,$__err,$__tm,$25,$36);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17936)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((17940)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($32);
 var $37=(($1)|0);
 HEAP32[(($37)>>2)]=$30;
 var $38=(($36+168)|0);
 var $39=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$36,$38,$25,$__err,0);
 var $40=$39;
 var $41=$36;
 var $42=((($40)-($41))|0);
 var $43=($42|0)<168;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=(($__tm+24)|0);
 var $46=(((($42|0))/(12))&-1);
 var $47=(((($46|0))%(7))&-1);
 HEAP32[(($45)>>2)]=$47;
 label=9;break;
 case 9: 
 var $48=(($__b)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$49;
 STACKTOP=sp;return;
 case 10: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 var $53=HEAP32[(($3)>>2)];
 var $54=(($53)|0);
 var $55=__ZNSt3__114__shared_count16__release_sharedEv($54);
 ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17936)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $9=HEAP32[((17940)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__e)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$1;
 var $32=(($this+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=FUNCTION_TABLE[$36]($32);
 var $38=(($1)|0);
 HEAP32[(($38)>>2)]=$30;
 var $39=(($37+288)|0);
 var $40=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$37,$39,$25,$__err,0);
 var $41=$40;
 var $42=$37;
 var $43=((($41)-($42))|0);
 var $44=($43|0)<288;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=(($__tm+16)|0);
 var $47=(((($43|0))/(12))&-1);
 var $48=(((($47|0))%(12))&-1);
 HEAP32[(($46)>>2)]=$48;
 label=9;break;
 case 9: 
 var $49=(($__b)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($agg_result)|0);
 HEAP32[(($51)>>2)]=$50;
 STACKTOP=sp;return;
 case 10: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=HEAP32[(($3)>>2)];
 var $55=(($54)|0);
 var $56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 ___resumeException($53$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__p_i_i_i=(sp)+(8);
 var $2=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__p_i_i_i;
 var $6=HEAP32[((17936)>>2)];
 var $7=($6|0)==-1;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$5,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $9=HEAP32[((17940)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($4+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($4+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $25=$21;
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26)|0);
 var $28=__ZNSt3__114__shared_count16__release_sharedEv($27);
 var $29=(($__tm+20)|0);
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$1;
 var $33=(($1)|0);
 HEAP32[(($33)>>2)]=$31;
 var $34=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$1,$__err,$25,4);
 var $35=HEAP32[(($__err)>>2)];
 var $36=$35&4;
 var $37=($36|0)==0;
 if($37){label=8;break;}else{label=12;break;}
 case 8: 
 var $39=($34|0)<69;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=((($34)+(2000))|0);
 var $__t_0_i=$41;label=11;break;
 case 10: 
 var $_off_i=((($34)-(69))|0);
 var $43=($_off_i>>>0)<31;
 var $44=((($34)+(1900))|0);
 var $__i=$43?$44:$34;
 var $__t_0_i=$__i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $46=((($__t_0_i)-(1900))|0);
 HEAP32[(($29)>>2)]=$46;
 label=12;break;
 case 12: 
 var $47=(($__b)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($agg_result)|0);
 HEAP32[(($49)>>2)]=$48;
 STACKTOP=sp;return;
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=HEAP32[(($3)>>2)];
 var $53=(($52)|0);
 var $54=__ZNSt3__114__shared_count16__release_sharedEv($53);
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 var $11=(sp)+(72);
 var $12=(sp)+(80);
 var $13=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $14=(sp)+(112);
 var $15=(sp)+(120);
 var $16=(sp)+(128);
 var $17=(sp)+(136);
 var $18=(sp)+(144);
 var $19=(sp)+(152);
 var $20=(sp)+(160);
 var $21=(sp)+(168);
 var $22=(sp)+(176);
 var $23=(sp)+(184);
 var $24=(sp)+(192);
 var $25=(sp)+(200);
 var $26=(sp)+(208);
 var $27=(sp)+(216);
 var $28=(sp)+(224);
 var $29=(sp)+(232);
 var $30=(sp)+(240);
 var $31=(sp)+(248);
 var $32=(sp)+(256);
 var $33=(sp)+(264);
 var $34=(sp)+(272);
 var $35=(sp)+(280);
 var $36=(sp)+(288);
 var $37=(sp)+(296);
 var $38=(sp)+(304);
 var $39=(sp)+(312);
 var $40=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 var $41=(($14)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$__p_i_i_i;
 var $44=HEAP32[((17936)>>2)];
 var $45=($44|0)==-1;
 if($45){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$43,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $47=HEAP32[((17940)>>2)];
 var $48=((($47)-(1))|0);
 var $49=(($42+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($42+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=$50;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($48>>>0);
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 var $58=(($52+($48<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=5;break;}else{label=7;break;}
 case 5: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 __ZNSt8bad_castC2Ev($62);
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $63=$59;
 var $64=HEAP32[(($41)>>2)];
 var $65=(($64)|0);
 var $66=__ZNSt3__114__shared_count16__release_sharedEv($65);
 var $67=(($__fmt<<24)>>24);
 switch(($67|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1); var $69$1 = tempRet0;
 var $70=HEAP32[(($41)>>2)];
 var $71=(($70)|0);
 var $72=__ZNSt3__114__shared_count16__release_sharedEv($71);
 ___resumeException($69$0)
 case 9: 
 var $74=(($__e)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$13;
 var $77=(($this+8)|0);
 var $78=$77;
 var $79=HEAP32[(($78)>>2)];
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($77);
 var $82=(($13)|0);
 HEAP32[(($82)>>2)]=$75;
 var $83=(($81+168)|0);
 var $84=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$13,$81,$83,$63,$__err,0);
 var $85=$84;
 var $86=$81;
 var $87=((($85)-($86))|0);
 var $88=($87|0)<168;
 if($88){label=10;break;}else{label=70;break;}
 case 10: 
 var $90=(($__tm+24)|0);
 var $91=(((($87|0))/(12))&-1);
 var $92=(((($91|0))%(7))&-1);
 HEAP32[(($90)>>2)]=$92;
 label=70;break;
 case 11: 
 var $94=(($__e)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$12;
 var $97=(($this+8)|0);
 var $98=$97;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=FUNCTION_TABLE[$101]($97);
 var $103=(($12)|0);
 HEAP32[(($103)>>2)]=$95;
 var $104=(($102+288)|0);
 var $105=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$12,$102,$104,$63,$__err,0);
 var $106=$105;
 var $107=$102;
 var $108=((($106)-($107))|0);
 var $109=($108|0)<288;
 if($109){label=12;break;}else{label=70;break;}
 case 12: 
 var $111=(($__tm+16)|0);
 var $112=(((($108|0))/(12))&-1);
 var $113=(((($112|0))%(12))&-1);
 HEAP32[(($111)>>2)]=$113;
 label=70;break;
 case 13: 
 var $115=(($this+8)|0);
 var $116=$115;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($115);
 var $121=(($__b)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($16)|0);
 HEAP32[(($123)>>2)]=$122;
 var $124=(($__e)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($17)|0);
 HEAP32[(($126)>>2)]=$125;
 var $127=$120;
 var $128=HEAP8[($127)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=15;break;}else{label=14;break;}
 case 14: 
 var $132=(($120+8)|0);
 var $133=HEAP32[(($132)>>2)];
 var $138=$133;var $137=$133;label=16;break;
 case 15: 
 var $135=(($120+4)|0);
 var $136=(($120+4)|0);
 var $138=$136;var $137=$135;label=16;break;
 case 16: 
 var $137;
 var $138;
 var $139=($128&255);
 var $140=$139&1;
 var $141=($140|0)==0;
 if($141){label=18;break;}else{label=17;break;}
 case 17: 
 var $143=(($120+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $147=$144;label=19;break;
 case 18: 
 var $146=$139>>>1;
 var $147=$146;label=19;break;
 case 19: 
 var $147;
 var $148=(($138+($147<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$16,$17,$__iob,$__err,$__tm,$137,$148);
 var $149=(($15)|0);
 var $150=HEAP32[(($149)>>2)];
 HEAP32[(($121)>>2)]=$150;
 label=70;break;
 case 20: 
 var $152=(($__tm+12)|0);
 var $153=(($__e)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=$11;
 var $156=(($11)|0);
 HEAP32[(($156)>>2)]=$154;
 var $157=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$11,$__err,$63,2);
 var $158=HEAP32[(($__err)>>2)];
 var $159=$158&4;
 var $160=($159|0)==0;
 if($160){label=21;break;}else{label=23;break;}
 case 21: 
 var $_off_i=((($157)-(1))|0);
 var $162=($_off_i>>>0)<31;
 if($162){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($152)>>2)]=$157;
 label=70;break;
 case 23: 
 var $165=$158|4;
 HEAP32[(($__err)>>2)]=$165;
 label=70;break;
 case 24: 
 var $167=(($__b)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($19)|0);
 HEAP32[(($169)>>2)]=$168;
 var $170=(($__e)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($20)|0);
 HEAP32[(($172)>>2)]=$171;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$19,$20,$__iob,$__err,$__tm,6384,6416);
 var $173=(($18)|0);
 var $174=HEAP32[(($173)>>2)];
 HEAP32[(($167)>>2)]=$174;
 label=70;break;
 case 25: 
 var $176=(($__b)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($22)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=(($__e)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($23)|0);
 HEAP32[(($181)>>2)]=$180;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$22,$23,$__iob,$__err,$__tm,6248,6280);
 var $182=(($21)|0);
 var $183=HEAP32[(($182)>>2)];
 HEAP32[(($176)>>2)]=$183;
 label=70;break;
 case 26: 
 var $185=(($__e)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=$10;
 var $188=(($10)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$10,$__err,$63,2);
 var $190=HEAP32[(($__err)>>2)];
 var $191=$190&4;
 var $192=($191|0)==0;
 var $193=($189|0)<24;
 var $or_cond_i=$192&$193;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $195=(($__tm+8)|0);
 HEAP32[(($195)>>2)]=$189;
 label=70;break;
 case 28: 
 var $197=$190|4;
 HEAP32[(($__err)>>2)]=$197;
 label=70;break;
 case 29: 
 var $199=(($__tm+8)|0);
 var $200=(($__e)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$9;
 var $203=(($9)|0);
 HEAP32[(($203)>>2)]=$201;
 var $204=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$9,$__err,$63,2);
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205&4;
 var $207=($206|0)==0;
 if($207){label=30;break;}else{label=32;break;}
 case 30: 
 var $_off_i164=((($204)-(1))|0);
 var $209=($_off_i164>>>0)<12;
 if($209){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($199)>>2)]=$204;
 label=70;break;
 case 32: 
 var $212=$205|4;
 HEAP32[(($__err)>>2)]=$212;
 label=70;break;
 case 33: 
 var $214=(($__e)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=$8;
 var $217=(($8)|0);
 HEAP32[(($217)>>2)]=$215;
 var $218=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$8,$__err,$63,3);
 var $219=HEAP32[(($__err)>>2)];
 var $220=$219&4;
 var $221=($220|0)==0;
 var $222=($218|0)<366;
 var $or_cond_i167=$221&$222;
 if($or_cond_i167){label=34;break;}else{label=35;break;}
 case 34: 
 var $224=(($__tm+28)|0);
 HEAP32[(($224)>>2)]=$218;
 label=70;break;
 case 35: 
 var $226=$219|4;
 HEAP32[(($__err)>>2)]=$226;
 label=70;break;
 case 36: 
 var $228=(($__e)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=$7;
 var $231=(($7)|0);
 HEAP32[(($231)>>2)]=$229;
 var $232=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$7,$__err,$63,2);
 var $233=((($232)-(1))|0);
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234&4;
 var $236=($235|0)==0;
 var $237=($233|0)<12;
 var $or_cond_i170=$236&$237;
 if($or_cond_i170){label=37;break;}else{label=38;break;}
 case 37: 
 var $239=(($__tm+16)|0);
 HEAP32[(($239)>>2)]=$233;
 label=70;break;
 case 38: 
 var $241=$234|4;
 HEAP32[(($__err)>>2)]=$241;
 label=70;break;
 case 39: 
 var $243=(($__e)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=$6;
 var $246=(($6)|0);
 HEAP32[(($246)>>2)]=$244;
 var $247=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$6,$__err,$63,2);
 var $248=HEAP32[(($__err)>>2)];
 var $249=$248&4;
 var $250=($249|0)==0;
 var $251=($247|0)<60;
 var $or_cond_i173=$250&$251;
 if($or_cond_i173){label=40;break;}else{label=41;break;}
 case 40: 
 var $253=(($__tm+4)|0);
 HEAP32[(($253)>>2)]=$247;
 label=70;break;
 case 41: 
 var $255=$248|4;
 HEAP32[(($__err)>>2)]=$255;
 label=70;break;
 case 42: 
 var $257=(($__e)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(($24)|0);
 HEAP32[(($259)>>2)]=$258;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$24,$__err,$63);
 label=70;break;
 case 43: 
 var $261=(($__tm+8)|0);
 var $262=(($__e)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($25)|0);
 HEAP32[(($264)>>2)]=$263;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$261,$__b,$25,$__err,$63);
 label=70;break;
 case 44: 
 var $266=(($__b)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($27)|0);
 HEAP32[(($268)>>2)]=$267;
 var $269=(($__e)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(($28)|0);
 HEAP32[(($271)>>2)]=$270;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($26,$this,$27,$28,$__iob,$__err,$__tm,6336,6380);
 var $272=(($26)|0);
 var $273=HEAP32[(($272)>>2)];
 HEAP32[(($266)>>2)]=$273;
 label=70;break;
 case 45: 
 var $275=(($__b)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(($30)|0);
 HEAP32[(($277)>>2)]=$276;
 var $278=(($__e)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($31)|0);
 HEAP32[(($280)>>2)]=$279;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($29,$this,$30,$31,$__iob,$__err,$__tm,6312,6332);
 var $281=(($29)|0);
 var $282=HEAP32[(($281)>>2)];
 HEAP32[(($275)>>2)]=$282;
 label=70;break;
 case 46: 
 var $284=(($__e)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=$5;
 var $287=(($5)|0);
 HEAP32[(($287)>>2)]=$285;
 var $288=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$5,$__err,$63,2);
 var $289=HEAP32[(($__err)>>2)];
 var $290=$289&4;
 var $291=($290|0)==0;
 var $292=($288|0)<61;
 var $or_cond_i176=$291&$292;
 if($or_cond_i176){label=47;break;}else{label=48;break;}
 case 47: 
 var $294=(($__tm)|0);
 HEAP32[(($294)>>2)]=$288;
 label=70;break;
 case 48: 
 var $296=$289|4;
 HEAP32[(($__err)>>2)]=$296;
 label=70;break;
 case 49: 
 var $298=(($__b)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($33)|0);
 HEAP32[(($300)>>2)]=$299;
 var $301=(($__e)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(($34)|0);
 HEAP32[(($303)>>2)]=$302;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($32,$this,$33,$34,$__iob,$__err,$__tm,6280,6312);
 var $304=(($32)|0);
 var $305=HEAP32[(($304)>>2)];
 HEAP32[(($298)>>2)]=$305;
 label=70;break;
 case 50: 
 var $307=(($__e)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=$4;
 var $310=(($4)|0);
 HEAP32[(($310)>>2)]=$308;
 var $311=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$4,$__err,$63,1);
 var $312=HEAP32[(($__err)>>2)];
 var $313=$312&4;
 var $314=($313|0)==0;
 var $315=($311|0)<7;
 var $or_cond_i179=$314&$315;
 if($or_cond_i179){label=51;break;}else{label=52;break;}
 case 51: 
 var $317=(($__tm+24)|0);
 HEAP32[(($317)>>2)]=$311;
 label=70;break;
 case 52: 
 var $319=$312|4;
 HEAP32[(($__err)>>2)]=$319;
 label=70;break;
 case 53: 
 var $321=$this;
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+20)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=(($__b)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=(($35)|0);
 HEAP32[(($327)>>2)]=$326;
 var $328=(($__e)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($36)|0);
 HEAP32[(($330)>>2)]=$329;
 FUNCTION_TABLE[$324]($agg_result,$this,$35,$36,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $332=(($this+8)|0);
 var $333=$332;
 var $334=HEAP32[(($333)>>2)];
 var $335=(($334+24)|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=FUNCTION_TABLE[$336]($332);
 var $338=(($__b)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($38)|0);
 HEAP32[(($340)>>2)]=$339;
 var $341=(($__e)|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($39)|0);
 HEAP32[(($343)>>2)]=$342;
 var $344=$337;
 var $345=HEAP8[($344)];
 var $346=$345&1;
 var $347=(($346<<24)>>24)==0;
 if($347){label=56;break;}else{label=55;break;}
 case 55: 
 var $349=(($337+8)|0);
 var $350=HEAP32[(($349)>>2)];
 var $355=$350;var $354=$350;label=57;break;
 case 56: 
 var $352=(($337+4)|0);
 var $353=(($337+4)|0);
 var $355=$353;var $354=$352;label=57;break;
 case 57: 
 var $354;
 var $355;
 var $356=($345&255);
 var $357=$356&1;
 var $358=($357|0)==0;
 if($358){label=59;break;}else{label=58;break;}
 case 58: 
 var $360=(($337+4)|0);
 var $361=HEAP32[(($360)>>2)];
 var $364=$361;label=60;break;
 case 59: 
 var $363=$356>>>1;
 var $364=$363;label=60;break;
 case 60: 
 var $364;
 var $365=(($355+($364<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($37,$this,$38,$39,$__iob,$__err,$__tm,$354,$365);
 var $366=(($37)|0);
 var $367=HEAP32[(($366)>>2)];
 HEAP32[(($338)>>2)]=$367;
 label=70;break;
 case 61: 
 var $369=(($__tm+20)|0);
 var $370=(($__e)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=$3;
 var $373=(($3)|0);
 HEAP32[(($373)>>2)]=$371;
 var $374=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$3,$__err,$63,4);
 var $375=HEAP32[(($__err)>>2)];
 var $376=$375&4;
 var $377=($376|0)==0;
 if($377){label=62;break;}else{label=70;break;}
 case 62: 
 var $379=($374|0)<69;
 if($379){label=63;break;}else{label=64;break;}
 case 63: 
 var $381=((($374)+(2000))|0);
 var $__t_0_i=$381;label=65;break;
 case 64: 
 var $_off_i182=((($374)-(69))|0);
 var $383=($_off_i182>>>0)<31;
 var $384=((($374)+(1900))|0);
 var $__i=$383?$384:$374;
 var $__t_0_i=$__i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $386=((($__t_0_i)-(1900))|0);
 HEAP32[(($369)>>2)]=$386;
 label=70;break;
 case 66: 
 var $388=(($__e)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=$2;
 var $391=(($2)|0);
 HEAP32[(($391)>>2)]=$389;
 var $392=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$2,$__err,$63,4);
 var $393=HEAP32[(($__err)>>2)];
 var $394=$393&4;
 var $395=($394|0)==0;
 if($395){label=67;break;}else{label=70;break;}
 case 67: 
 var $397=(($__tm+20)|0);
 var $398=((($392)-(1900))|0);
 HEAP32[(($397)>>2)]=$398;
 label=70;break;
 case 68: 
 var $400=(($__e)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=(($40)|0);
 HEAP32[(($402)>>2)]=$401;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$40,$__err,$63);
 label=70;break;
 case 69: 
 var $404=HEAP32[(($__err)>>2)];
 var $405=$404|4;
 HEAP32[(($__err)>>2)]=$405;
 label=70;break;
 case 70: 
 var $406=(($__b)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=(($agg_result)|0);
 HEAP32[(($408)>>2)]=$407;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=(($__e)|0);
 var $3=$__ct;
 label=2;break;
 case 2: 
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 if($5){var $22=1;label=9;break;}else{label=3;break;}
 case 3: 
 var $7=(($4+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($4+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$4;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($4);
 var $_054=$17;label=6;break;
 case 5: 
 var $19=HEAP32[(($8)>>2)];
 var $_054=$19;label=6;break;
 case 6: 
 var $_054;
 var $20=($_054|0)==-1;
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $22=$phitmp;label=9;break;
 case 8: 
 HEAP32[(($1)>>2)]=0;
 var $22=1;label=9;break;
 case 9: 
 var $22;
 var $23=HEAP32[(($2)>>2)];
 var $24=($23|0)==0;
 if($24){label=15;break;}else{label=10;break;}
 case 10: 
 var $26=(($23+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($23+16)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($27|0)==($29|0);
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 var $32=$23;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=FUNCTION_TABLE[$35]($23);
 var $_053=$36;label=13;break;
 case 12: 
 var $38=HEAP32[(($27)>>2)];
 var $_053=$38;label=13;break;
 case 13: 
 var $_053;
 var $39=($_053|0)==-1;
 if($39){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($2)>>2)]=0;
 label=15;break;
 case 15: 
 if($22){var $80=0;var $79=1;label=24;break;}else{var $45=0;var $44=1;label=17;break;}
 case 16: 
 var $41=($23|0)==0;
 var $42=$22^$41;
 if($42){var $45=$23;var $44=$41;label=17;break;}else{var $80=$23;var $79=$41;label=24;break;}
 case 17: 
 var $44;
 var $45;
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($46+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=$46;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($46);
 var $_052=$57;label=20;break;
 case 19: 
 var $59=HEAP32[(($48)>>2)];
 var $_052=$59;label=20;break;
 case 20: 
 var $_052;
 var $60=HEAP32[(($3)>>2)];
 var $61=(($60+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__ct,8192,$_052);
 if($63){label=21;break;}else{var $80=$45;var $79=$44;label=24;break;}
 case 21: 
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($65+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=$65;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+40)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=FUNCTION_TABLE[$75]($65);
 label=2;break;
 case 23: 
 var $78=(($67+4)|0);
 HEAP32[(($66)>>2)]=$78;
 label=2;break;
 case 24: 
 var $79;
 var $80;
 var $81=HEAP32[(($1)>>2)];
 var $82=($81|0)==0;
 if($82){var $99=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $84=(($81+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($81+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=26;break;}else{label=27;break;}
 case 26: 
 var $90=$81;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($81);
 var $_050=$94;label=28;break;
 case 27: 
 var $96=HEAP32[(($85)>>2)];
 var $_050=$96;label=28;break;
 case 28: 
 var $_050;
 var $97=($_050|0)==-1;
 if($97){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre57=HEAP32[(($1)>>2)];
 var $phitmp58=($_pre57|0)==0;
 var $99=$phitmp58;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $99=1;label=31;break;
 case 31: 
 var $99;
 if($79){label=37;break;}else{label=32;break;}
 case 32: 
 var $101=(($80+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($80+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=33;break;}else{label=34;break;}
 case 33: 
 var $107=$80;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+36)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=FUNCTION_TABLE[$110]($80);
 var $_0=$111;label=35;break;
 case 34: 
 var $113=HEAP32[(($102)>>2)];
 var $_0=$113;label=35;break;
 case 35: 
 var $_0;
 var $114=($_0|0)==-1;
 if($114){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($2)>>2)]=0;
 label=37;break;
 case 37: 
 if($99){label=39;break;}else{label=40;break;}
 case 38: 
 var $116=($80|0)==0;
 var $tmp55=$99^$116;
 if($tmp55){label=40;break;}else{label=39;break;}
 case 39: 
 var $118=HEAP32[(($__err)>>2)];
 var $119=$118|2;
 HEAP32[(($__err)>>2)]=$119;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($this+8)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=FUNCTION_TABLE[$6]($2);
 var $8=$7;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10&1;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$10>>>1;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 var $19=(($7+12)|0);
 var $20=$19;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($7+16)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(((-$30))|0);
 var $32=($18|0)==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=HEAP32[(($__err)>>2)];
 var $35=$34|4;
 HEAP32[(($__err)>>2)]=$35;
 label=15;break;
 case 9: 
 var $37=(($__e)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($1)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($7+24)|0);
 var $41=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$1,$7,$40,$__ct,$__err,0);
 var $42=$41;
 var $43=$7;
 var $44=((($42)-($43))|0);
 var $45=($41|0)==($7|0);
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[(($__h)>>2)];
 var $48=($47|0)==12;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $51=($44|0)==12;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 var $53=HEAP32[(($__h)>>2)];
 var $54=($53|0)<12;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=((($53)+(12))|0);
 HEAP32[(($__h)>>2)]=$56;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_055=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_055=$17;label=5;break;
 case 5: 
 var $_055;
 var $18=($_055|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_054=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_054=$37;label=12;break;
 case 12: 
 var $_054;
 var $38=($_054|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $46=0;var $45=1;label=17;break;}
 case 15: 
 var $40=($22|0)==0;
 var $tmp=$20^$40;
 if($tmp){var $46=$22;var $45=$40;label=17;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__err)>>2)];
 var $43=$42|6;
 HEAP32[(($__err)>>2)]=$43;
 label=41;break;
 case 17: 
 var $45;
 var $46;
 var $47=HEAP32[(($1)>>2)];
 var $48=(($47+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($47+16)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($49|0)==($51|0);
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$47;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($47);
 var $_053=$58;label=20;break;
 case 19: 
 var $60=HEAP32[(($49)>>2)];
 var $_053=$60;label=20;break;
 case 20: 
 var $_053;
 var $61=$__ct;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+52)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($__ct,$_053,0);
 var $66=(($65<<24)>>24)==37;
 if($66){label=22;break;}else{label=21;break;}
 case 21: 
 var $68=HEAP32[(($__err)>>2)];
 var $69=$68|4;
 HEAP32[(($__err)>>2)]=$69;
 label=41;break;
 case 22: 
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($71+16)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($73|0)==($75|0);
 if($76){label=23;break;}else{label=24;break;}
 case 23: 
 var $78=$71;
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+40)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=FUNCTION_TABLE[$81]($71);
 label=25;break;
 case 24: 
 var $84=(($73+4)|0);
 HEAP32[(($72)>>2)]=$84;
 label=25;break;
 case 25: 
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $103=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 var $94=$85;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($85);
 var $_051=$98;label=29;break;
 case 28: 
 var $100=HEAP32[(($89)>>2)];
 var $_051=$100;label=29;break;
 case 29: 
 var $_051;
 var $101=($_051|0)==-1;
 if($101){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre57=HEAP32[(($1)>>2)];
 var $phitmp58=($_pre57|0)==0;
 var $103=$phitmp58;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $103=1;label=32;break;
 case 32: 
 var $103;
 if($45){label=38;break;}else{label=33;break;}
 case 33: 
 var $105=(($46+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($46+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=34;break;}else{label=35;break;}
 case 34: 
 var $111=$46;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=FUNCTION_TABLE[$114]($46);
 var $_0=$115;label=36;break;
 case 35: 
 var $117=HEAP32[(($106)>>2)];
 var $_0=$117;label=36;break;
 case 36: 
 var $_0;
 var $118=($_0|0)==-1;
 if($118){label=37;break;}else{label=39;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 label=38;break;
 case 38: 
 if($103){label=40;break;}else{label=41;break;}
 case 39: 
 var $120=($46|0)==0;
 var $tmp56=$103^$120;
 if($tmp56){label=41;break;}else{label=40;break;}
 case 40: 
 var $122=HEAP32[(($__err)>>2)];
 var $123=$122|2;
 HEAP32[(($__err)>>2)]=$123;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0107=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0107=$17;label=5;break;
 case 5: 
 var $_0107;
 var $18=($_0107|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=(($22+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($22+16)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($26|0)==($28|0);
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=$22;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+36)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($22);
 var $_0106=$35;label=12;break;
 case 11: 
 var $37=HEAP32[(($26)>>2)];
 var $_0106=$37;label=12;break;
 case 12: 
 var $_0106;
 var $38=($_0106|0)==-1;
 if($38){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($21)>>2)]=0;
 label=14;break;
 case 14: 
 if($20){label=16;break;}else{var $45=0;label=17;break;}
 case 15: 
 var $40=($22|0)==0;
 var $tmp=$20^$40;
 if($tmp){var $45=$22;label=17;break;}else{label=16;break;}
 case 16: 
 var $42=HEAP32[(($__err)>>2)];
 var $43=$42|6;
 HEAP32[(($__err)>>2)]=$43;
 var $_0100=0;label=63;break;
 case 17: 
 var $45;
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+12)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($46+16)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($48|0)==($50|0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=$46;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=FUNCTION_TABLE[$56]($46);
 var $_0105=$57;label=20;break;
 case 19: 
 var $59=HEAP32[(($48)>>2)];
 var $_0105=$59;label=20;break;
 case 20: 
 var $_0105;
 var $60=$__ct;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=FUNCTION_TABLE[$63]($__ct,2048,$_0105);
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $66=HEAP32[(($__err)>>2)];
 var $67=$66|4;
 HEAP32[(($__err)>>2)]=$67;
 var $_0100=0;label=63;break;
 case 22: 
 var $69=$__ct;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+52)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($__ct,$_0105,0);
 var $74=(($73<<24)>>24);
 var $75=HEAP32[(($1)>>2)];
 var $76=(($75+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($75+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=23;break;}else{label=24;break;}
 case 23: 
 var $82=$75;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+40)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=FUNCTION_TABLE[$85]($75);
 var $__r_0_in=$74;var $_0_in=$__n;var $89=$45;label=25;break;
 case 24: 
 var $88=(($77+4)|0);
 HEAP32[(($76)>>2)]=$88;
 var $__r_0_in=$74;var $_0_in=$__n;var $89=$45;label=25;break;
 case 25: 
 var $89;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $90=HEAP32[(($1)>>2)];
 var $91=($90|0)==0;
 if($91){var $108=0;label=32;break;}else{label=26;break;}
 case 26: 
 var $93=(($90+12)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($90+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($94|0)==($96|0);
 if($97){label=27;break;}else{label=28;break;}
 case 27: 
 var $99=$90;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+36)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=FUNCTION_TABLE[$102]($90);
 var $_0103=$103;label=29;break;
 case 28: 
 var $105=HEAP32[(($94)>>2)];
 var $_0103=$105;label=29;break;
 case 29: 
 var $_0103;
 var $106=($_0103|0)==-1;
 if($106){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre114=HEAP32[(($1)>>2)];
 var $108=$_pre114;label=32;break;
 case 31: 
 HEAP32[(($1)>>2)]=0;
 var $108=0;label=32;break;
 case 32: 
 var $108;
 var $109=($108|0)==0;
 var $110=($89|0)==0;
 if($110){var $129=$108;var $128=0;label=39;break;}else{label=33;break;}
 case 33: 
 var $112=(($89+12)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($89+16)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($113|0)==($115|0);
 if($116){label=34;break;}else{label=35;break;}
 case 34: 
 var $118=$89;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+36)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=FUNCTION_TABLE[$121]($89);
 var $_0102=$122;label=36;break;
 case 35: 
 var $124=HEAP32[(($113)>>2)];
 var $_0102=$124;label=36;break;
 case 36: 
 var $_0102;
 var $125=($_0102|0)==-1;
 if($125){label=37;break;}else{var $127=$89;label=38;break;}
 case 37: 
 HEAP32[(($21)>>2)]=0;
 var $127=0;label=38;break;
 case 38: 
 var $127;
 var $_pr=HEAP32[(($1)>>2)];
 var $129=$_pr;var $128=$127;label=39;break;
 case 39: 
 var $128;
 var $129;
 var $130=($128|0)==0;
 var $131=$109^$130;
 var $132=($_0|0)>0;
 var $_=$131&$132;
 if($_){label=40;break;}else{label=47;break;}
 case 40: 
 var $134=(($129+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($129+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=41;break;}else{label=42;break;}
 case 41: 
 var $140=$129;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=FUNCTION_TABLE[$143]($129);
 var $_0101=$144;label=43;break;
 case 42: 
 var $146=HEAP32[(($135)>>2)];
 var $_0101=$146;label=43;break;
 case 43: 
 var $_0101;
 var $147=HEAP32[(($60)>>2)];
 var $148=(($147+12)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=FUNCTION_TABLE[$149]($__ct,2048,$_0101);
 if($150){label=44;break;}else{var $_0100=$__r_0;label=63;break;}
 case 44: 
 var $152=((($__r_0)*(10))&-1);
 var $153=HEAP32[(($69)>>2)];
 var $154=(($153+52)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=FUNCTION_TABLE[$155]($__ct,$_0101,0);
 var $157=(($156<<24)>>24);
 var $158=((($157)+($152))|0);
 var $159=HEAP32[(($1)>>2)];
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=45;break;}else{label=46;break;}
 case 45: 
 var $166=$159;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+40)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($159);
 var $__r_0_in=$158;var $_0_in=$_0;var $89=$128;label=25;break;
 case 46: 
 var $172=(($161+4)|0);
 HEAP32[(($160)>>2)]=$172;
 var $__r_0_in=$158;var $_0_in=$_0;var $89=$128;label=25;break;
 case 47: 
 var $174=($129|0)==0;
 if($174){var $191=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $176=(($129+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($129+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=49;break;}else{label=50;break;}
 case 49: 
 var $182=$129;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=FUNCTION_TABLE[$185]($129);
 var $_098=$186;label=51;break;
 case 50: 
 var $188=HEAP32[(($177)>>2)];
 var $_098=$188;label=51;break;
 case 51: 
 var $_098;
 var $189=($_098|0)==-1;
 if($189){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre115=HEAP32[(($1)>>2)];
 var $phitmp116=($_pre115|0)==0;
 var $191=$phitmp116;label=54;break;
 case 53: 
 HEAP32[(($1)>>2)]=0;
 var $191=1;label=54;break;
 case 54: 
 var $191;
 if($130){label=60;break;}else{label=55;break;}
 case 55: 
 var $193=(($128+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(($128+16)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($194|0)==($196|0);
 if($197){label=56;break;}else{label=57;break;}
 case 56: 
 var $199=$128;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+36)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=FUNCTION_TABLE[$202]($128);
 var $_097=$203;label=58;break;
 case 57: 
 var $205=HEAP32[(($194)>>2)];
 var $_097=$205;label=58;break;
 case 58: 
 var $_097;
 var $206=($_097|0)==-1;
 if($206){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($21)>>2)]=0;
 label=60;break;
 case 60: 
 if($191){label=62;break;}else{var $_0100=$__r_0;label=63;break;}
 case 61: 
 var $208=($128|0)==0;
 var $tmp109=$191^$208;
 if($tmp109){var $_0100=$__r_0;label=63;break;}else{label=62;break;}
 case 62: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 var $_0100=$__r_0;label=63;break;
 case 63: 
 var $_0100;
 STACKTOP=sp;return $_0100;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(18504)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(18504);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((16504)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZdlPv($1);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(18504)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(18504);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 label=9;break;
 case 6: 
 var $14=HEAP32[((16504)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $20=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($20);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $4=(($fmt_i)|0);
 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $_sroa_0_0__idx=(($__s)|0);
 var $_sroa_0_0_copyload1=HEAP32[(($_sroa_0_0__idx)>>2)];
 var $14=($12|0)==0;
 if($14){var $_sroa_0_0_lcssa=$_sroa_0_0_copyload1;label=10;break;}else{var $_sroa_0_037=$_sroa_0_0_copyload1;var $_03338=$3;label=4;break;}
 case 4: 
 var $_03338;
 var $_sroa_0_037;
 var $15=HEAP8[($_03338)];
 var $16=($_sroa_0_037|0)==0;
 if($16){var $_sroa_0_1=0;label=9;break;}else{label=5;break;}
 case 5: 
 var $18=(($_sroa_0_037+24)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($_sroa_0_037+28)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($19|0)==($21|0);
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$_sroa_0_037;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+52)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($15&255);
 var $29=FUNCTION_TABLE[$27]($_sroa_0_037,$28);
 var $_0=$29;label=8;break;
 case 7: 
 var $31=(($19+1)|0);
 HEAP32[(($18)>>2)]=$31;
 HEAP8[($19)]=$15;
 var $32=($15&255);
 var $_0=$32;label=8;break;
 case 8: 
 var $_0;
 var $33=($_0|0)==-1;
 var $__sroa_0_0=$33?0:$_sroa_0_037;
 var $_sroa_0_1=$__sroa_0_0;label=9;break;
 case 9: 
 var $_sroa_0_1;
 var $34=(($_03338+1)|0);
 var $35=($34|0)==($13|0);
 if($35){var $_sroa_0_0_lcssa=$_sroa_0_1;label=10;break;}else{var $_sroa_0_037=$_sroa_0_1;var $_03338=$34;label=4;break;}
 case 10: 
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35=(($agg_result)|0);
 HEAP32[(($_sroa_0_0__idx35)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(18504)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(18504);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((16504)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZdlPv($1);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(18504)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(18504);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 label=9;break;
 case 6: 
 var $14=HEAP32[((16504)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $20=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($20);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(400);
 var $3=(($__nar)|0);
 var $4=(($__nar+400)|0);
 HEAP32[(($__ne)>>2)]=$4;
 var $5=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($5,$3,$__ne,$__tm,$__fmt,$__mod);
 var $6=HEAP32[(($__ne)>>2)];
 var $_sroa_0_0__idx=(($__s)|0);
 var $_sroa_0_0_copyload1=HEAP32[(($_sroa_0_0__idx)>>2)];
 var $7=($3|0)==($6|0);
 if($7){var $_sroa_0_0_lcssa=$_sroa_0_0_copyload1;label=8;break;}else{var $_sroa_0_036=$_sroa_0_0_copyload1;var $_03337=$3;label=2;break;}
 case 2: 
 var $_03337;
 var $_sroa_0_036;
 var $8=HEAP32[(($_03337)>>2)];
 var $9=($_sroa_0_036|0)==0;
 if($9){var $_sroa_0_1=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $11=(($_sroa_0_036+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($_sroa_0_036+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($12|0)==($14|0);
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$_sroa_0_036;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+52)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=FUNCTION_TABLE[$20]($_sroa_0_036,$8);
 var $_0=$21;label=6;break;
 case 5: 
 var $23=(($12+4)|0);
 HEAP32[(($11)>>2)]=$23;
 HEAP32[(($12)>>2)]=$8;
 var $_0=$8;label=6;break;
 case 6: 
 var $_0;
 var $24=($_0|0)==-1;
 var $__sroa_0_0=$24?0:$_sroa_0_036;
 var $_sroa_0_1=$__sroa_0_0;label=7;break;
 case 7: 
 var $_sroa_0_1;
 var $25=(($_03337+4)|0);
 var $26=($25|0)==($6|0);
 if($26){var $_sroa_0_0_lcssa=$_sroa_0_1;label=8;break;}else{var $_sroa_0_036=$_sroa_0_1;var $_03337=$25;label=2;break;}
 case 8: 
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35=(($agg_result)|0);
 HEAP32[(($_sroa_0_0__idx35)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $mb=(sp)+(112);
 var $tmpcast=$mb;
 var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__nar)|0);
 var $2=(($fmt_i)|0);
 HEAP8[($2)]=37;
 var $3=(($fmt_i+1)|0);
 HEAP8[($3)]=$__fmt;
 var $4=(($fmt_i+2)|0);
 HEAP8[($4)]=$__mod;
 var $5=(($fmt_i+3)|0);
 HEAP8[($5)]=0;
 var $6=(($__mod<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($3)]=$__mod;
 HEAP8[($4)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_strftime($1,100,$2,$__tm,$9);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($mb)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($mb+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 HEAP32[(($__nb)>>2)]=$1;
 var $11=HEAP32[(($__we)>>2)];
 var $12=$11;
 var $13=$__wb;
 var $14=((($12)-($13))|0);
 var $15=$14>>2;
 var $16=HEAP32[(($8)>>2)];
 var $17=_uselocale($16);
 var $18=(function() { try { __THREW__ = 0; return _mbsrtowcs($__wb,$__nb,$15,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $20=($17|0)==0;
 if($20){label=11;break;}else{label=5;break;}
 case 5: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 7: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=($17|0)==0;
 if($27){label=10;break;}else{label=8;break;}
 case 8: 
 var $29=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($26$0)
 case 11: 
 var $32=($18|0)==-1;
 if($32){label=12;break;}else{label=13;break;}
 case 12: 
 __ZNSt3__121__throw_runtime_errorEPKc(3424);
 throw "Reached an unreachable!";
 case 13: 
 var $35=(($__wb+($18<<2))|0);
 HEAP32[(($__we)>>2)]=$35;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $__atoms=(sp)+(160);
 var $__nbuf=(sp)+(176);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=446;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((17944)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$9,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $13=HEAP32[((17948)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($35){label=10;break;}else{label=34;break;}
 case 10: 
 var $38=(($__atoms)|0);
 var $39=$25;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($29,6232,6242,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $44=(($__nbuf)|0);
 var $45=HEAP32[(($__wn)>>2)];
 var $46=HEAP32[(($3)>>2)];
 var $47=$45;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=($49|0)>98;
 if($50){label=12;break;}else{var $__nc_0=$44;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $51=((($49)+(2))|0);
 var $52=_malloc($51);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{var $__nc_0=$52;var $__h_sroa_0_1=$52;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=$55$0;
 var $57=$55$1;
 HEAP32[(($3)>>2)]=0;
 var $161=$2;var $_1147170=$56;var $_1172=$57;label=53;break;
 case 15: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=$59$1;
 var $_0145=$61;var $_0146=$60;label=52;break;
 case 16: 
 var $__h_sroa_0_0;
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $eh_lpad_body$1=$63$1;var $eh_lpad_body$0=$63$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $64=$eh_lpad_body$0;
 var $65=$eh_lpad_body$1;
 var $66=($__h_sroa_0_0_lpad_body|0)==0;
 if($66){var $_0145=$65;var $_0146=$64;label=52;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $_0145=$65;var $_0146=$64;label=52;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $69=HEAP8[($__neg)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $73=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$73;label=21;break;
 case 21: 
 var $__nc_1;
 var $75=($46>>>0)<($45>>>0);
 if($75){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $76=(($__atoms+10)|0);
 var $77=$__atoms;
 var $__nc_2166=$__nc_1;var $__w_0167=$46;label=23;break;
 case 23: 
 var $__w_0167;
 var $__nc_2166;
 var $_0=$38;label=24;break;
 case 24: 
 var $_0;
 var $80=($_0|0)==($76|0);
 if($80){var $_0_lcssa=$76;label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP8[($_0)];
 var $83=HEAP8[($__w_0167)];
 var $84=(($82<<24)>>24)==(($83<<24)>>24);
 var $85=(($_0+1)|0);
 if($84){var $_0_lcssa=$_0;label=26;break;}else{var $_0=$85;label=24;break;}
 case 26: 
 var $_0_lcssa;
 var $86=$_0_lcssa;
 var $87=((($86)-($77))|0);
 var $88=((6232+$87)|0);
 var $89=HEAP8[($88)];
 HEAP8[($__nc_2166)]=$89;
 var $90=(($__w_0167+1)|0);
 var $91=(($__nc_2166+1)|0);
 var $92=HEAP32[(($__wn)>>2)];
 var $93=($90>>>0)<($92>>>0);
 if($93){var $__nc_2166=$91;var $__w_0167=$90;label=23;break;}else{var $__nc_2_lcssa=$91;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $94=_sscanf($44,5152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $95=($94|0)==1;
 if($95){label=32;break;}else{label=28;break;}
 case 28: 
 var $97=___cxa_allocate_exception(8);
 var $98=$97;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($98,5048) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($97,12760,(42)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 ___cxa_free_exception($97);
 var $eh_lpad_body$1=$101$1;var $eh_lpad_body$0=$101$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $103=($__h_sroa_0_1|0)==0;
 if($103){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $105=(($__b)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==0;
 if($107){var $122=0;label=39;break;}else{label=35;break;}
 case 35: 
 var $109=(($106+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($106+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=36;break;}else{var $122=$106;label=39;break;}
 case 36: 
 var $115=$106;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=15;break; }
 case 37: 
 var $120=($119|0)==-1;
 if($120){label=38;break;}else{var $122=$106;label=39;break;}
 case 38: 
 HEAP32[(($105)>>2)]=0;
 var $122=0;label=39;break;
 case 39: 
 var $122;
 var $123=($122|0)==0;
 var $124=HEAP32[(($30)>>2)];
 var $125=($124|0)==0;
 if($125){label=45;break;}else{label=40;break;}
 case 40: 
 var $127=(($124+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($124+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=42;break;}else{label=41;break;}
 case 41: 
 if($123){label=48;break;}else{label=47;break;}
 case 42: 
 var $133=$124;
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134+36)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$136]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=15;break; }
 case 43: 
 var $138=($137|0)==-1;
 if($138){label=44;break;}else{label=46;break;}
 case 44: 
 HEAP32[(($30)>>2)]=0;
 label=45;break;
 case 45: 
 if($123){label=47;break;}else{label=48;break;}
 case 46: 
 var $140=($124|0)==0;
 var $tmp=$123^$140;
 if($tmp){label=48;break;}else{label=47;break;}
 case 47: 
 var $142=HEAP32[(($__err)>>2)];
 var $143=$142|2;
 HEAP32[(($__err)>>2)]=$143;
 label=48;break;
 case 48: 
 var $145=(($agg_result)|0);
 HEAP32[(($145)>>2)]=$122;
 var $146=HEAP32[(($7)>>2)];
 var $147=(($146)|0);
 var $148=__ZNSt3__114__shared_count16__release_sharedEv($147);
 var $149=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $150=($149|0)==0;
 if($150){label=51;break;}else{label=49;break;}
 case 49: 
 var $152=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $154$0 = ___cxa_find_matching_catch(-1, -1,0); var $154$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 51: 
 STACKTOP=sp;return;
 case 52: 
 var $_0146;
 var $_0145;
 var $156=HEAP32[(($7)>>2)];
 var $157=(($156)|0);
 var $158=__ZNSt3__114__shared_count16__release_sharedEv($157);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $159=($_pre|0)==0;
 if($159){var $_1147171=$_0146;var $_1173=$_0145;label=55;break;}else{var $161=$_pre;var $_1147170=$_0146;var $_1172=$_0145;label=53;break;}
 case 53: 
 var $_1172;
 var $_1147170;
 var $161;
 var $162=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1147171=$_1147170;var $_1173=$_1172;label=55;break; } else { label=54;break; }
 case 54: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1,0); var $164$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 55: 
 var $_1173;
 var $_1147171;
 var $165$0=$_1147171;
 var $165$1=0;
 var $166$0=$165$0;
 var $166$1=$_1173;
 ___resumeException($166$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__do_nothingEPv($0){
 var label=0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $__dp=(sp)+(408);
 var $__ts=(sp)+(416);
 var $__grp=(sp)+(424);
 var $0=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__gbuf)|0);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $2=$__sym;
 var $3=$__psn;
 var $4=$__nsn;
 var $5=$__spaces;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=25;break; }
 case 2: 
 var $7=(($__gbuf+400)|0);
 var $8=(($__wb)|0);
 var $9=HEAP32[(($8)>>2)];
 HEAP32[(($__wn)>>2)]=$9;
 var $10=(($__b)|0);
 var $11=(($__e)|0);
 var $12=(($__ct+8)|0);
 var $13=$__psn;
 var $14=$__nsn;
 var $15=(($14+1)|0);
 var $16=(($__nsn+4)|0);
 var $17=(($__nsn+8)|0);
 var $18=(($13+1)|0);
 var $19=(($__psn+4)|0);
 var $20=(($__psn+8)|0);
 var $21=$__flags&512;
 var $22=($21|0)!=0;
 var $23=$__sym;
 var $24=(($23+1)|0);
 var $25=(($__sym+4)|0);
 var $26=(($__sym+8)|0);
 var $27=$__spaces;
 var $28=(($27+1)|0);
 var $29=(($__spaces+4)|0);
 var $30=(($__spaces+8)|0);
 var $31=(($__pat+3)|0);
 var $32=(($__grp+4)|0);
 var $33=(($__wb+4)|0);
 var $__we10841217=$__we;var $__gb_sroa_1_4_load105910781220=446;var $35=$1;var $__gb_sroa_0_0_load104910631223=$1;var $34=$7;var $__trailing_sign_01226=0;var $__p_01228=0;label=3;break;
 case 3: 
 var $__p_01228;
 var $__trailing_sign_01226;
 var $34;
 var $__gb_sroa_0_0_load104910631223;
 var $35;
 var $__gb_sroa_1_4_load105910781220;
 var $__we10841217;
 var $36=HEAP32[(($10)>>2)];
 var $37=($36|0)==0;
 if($37){var $52=0;label=9;break;}else{label=4;break;}
 case 4: 
 var $39=(($36+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($36+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=5;break;}else{var $52=$36;label=9;break;}
 case 5: 
 var $45=$36;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+36)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 6: 
 var $50=($49|0)==-1;
 if($50){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre1308=HEAP32[(($10)>>2)];
 var $52=$_pre1308;label=9;break;
 case 8: 
 HEAP32[(($10)>>2)]=0;
 var $52=0;label=9;break;
 case 9: 
 var $52;
 var $53=($52|0)==0;
 var $54=HEAP32[(($11)>>2)];
 var $55=($54|0)==0;
 if($55){label=15;break;}else{label=10;break;}
 case 10: 
 var $57=(($54+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($54+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($58|0)==($60|0);
 if($61){label=12;break;}else{label=11;break;}
 case 11: 
 if($53){var $71=$54;label=17;break;}else{var $__gb_sroa_1_4_load10591078_lcssa=$__gb_sroa_1_4_load105910781220;var $_lcssa=$35;var $__gb_sroa_0_0_load10491063_lcssa=$__gb_sroa_0_0_load104910631223;var $__trailing_sign_0_lcssa=$__trailing_sign_01226;label=274;break;}
 case 12: 
 var $63=$54;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+36)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 13: 
 var $68=($67|0)==-1;
 if($68){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($11)>>2)]=0;
 label=15;break;
 case 15: 
 if($53){var $__gb_sroa_1_4_load10591078_lcssa=$__gb_sroa_1_4_load105910781220;var $_lcssa=$35;var $__gb_sroa_0_0_load10491063_lcssa=$__gb_sroa_0_0_load104910631223;var $__trailing_sign_0_lcssa=$__trailing_sign_01226;label=274;break;}else{var $71=0;label=17;break;}
 case 16: 
 if($53){var $71=$54;label=17;break;}else{var $__gb_sroa_1_4_load10591078_lcssa=$__gb_sroa_1_4_load105910781220;var $_lcssa=$35;var $__gb_sroa_0_0_load10491063_lcssa=$__gb_sroa_0_0_load104910631223;var $__trailing_sign_0_lcssa=$__trailing_sign_01226;label=274;break;}
 case 17: 
 var $71;
 var $72=(($__pat+$__p_01228)|0);
 var $73=HEAP8[($72)];
 var $74=(($73<<24)>>24);
 switch(($74|0)){case 2:{ label=111;break;}case 4:{ var $__ng_0=0;var $553=$34;var $__gb_sroa_0_0_load10491066=$__gb_sroa_0_0_load104910631223;var $552=$35;var $__gb_sroa_1_4_load10591076=$__gb_sroa_1_4_load105910781220;var $__we1089=$__we10841217;label=155;break;}case 1:{ label=29;break;}case 0:{ label=43;break;}case 3:{ label=70;break;}default:{var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}}break;
 case 18: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $75=$_lcssa;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load10591078_lcssa;label=26;break;
 case 19: 
 var $__gb_sroa_1_4_load10591071_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit1098$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1098$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1098$1;var $lpad_phi$0=$lpad_loopexit1098$0;var $75=$_ph_ph;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load10591071_ph_ph;label=26;break;
 case 20: 
 var $lpad_loopexit1120$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1120$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1120$1;var $lpad_phi$0=$lpad_loopexit1120$0;var $75=$721;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load10591073;label=26;break;
 case 21: 
 var $lpad_loopexit1126$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1126$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1126$1;var $lpad_phi$0=$lpad_loopexit1126$0;var $75=$35;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load105910781220;label=26;break;
 case 22: 
 var $lpad_loopexit1133$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1133$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1133$1;var $lpad_phi$0=$lpad_loopexit1133$0;var $75=$35;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load105910781220;label=26;break;
 case 23: 
 var $lpad_loopexit1137$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1137$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1137$1;var $lpad_phi$0=$lpad_loopexit1137$0;var $75=$35;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load105910781220;label=26;break;
 case 24: 
 var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph;
 var $_ph_ph1097_ph_ph_ph_ph_ph;
 var $lpad_loopexit1140$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1140$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1140$1;var $lpad_phi$0=$lpad_loopexit1140$0;var $75=$_ph_ph1097_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load10591071=$__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph;label=26;break;
 case 25: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $75=$1;var $__gb_sroa_1_4_load10591071=446;label=26;break;
 case 26: 
 var $__gb_sroa_1_4_load10591071;
 var $75;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $76=($75|0)==0;
 if($76){label=312;break;}else{label=27;break;}
 case 27: 
 var $78=$75;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10591071]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=28;break; }
 case 28: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1,0); var $80$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 29: 
 var $cond=($__p_01228|0)==3;
 if($cond){var $__gb_sroa_1_4_load10591078_lcssa=$__gb_sroa_1_4_load105910781220;var $_lcssa=$35;var $__gb_sroa_0_0_load10491063_lcssa=$__gb_sroa_0_0_load104910631223;var $__trailing_sign_0_lcssa=$__trailing_sign_01226;label=274;break;}else{label=30;break;}
 case 30: 
 var $83=HEAP32[(($10)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($83+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=31;break;}else{label=33;break;}
 case 31: 
 var $90=$83;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 32: 
 var $extract_t1001=(($94)&255);
 var $_0929_off0=$extract_t1001;label=34;break;
 case 33: 
 var $96=HEAP8[($85)];
 var $_0929_off0=$96;label=34;break;
 case 34: 
 var $_0929_off0;
 var $97=(($_0929_off0<<24)>>24);
 var $98=(function() { try { __THREW__ = 0; return _isascii($97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 35: 
 var $99=($98|0)==0;
 if($99){label=42;break;}else{label=36;break;}
 case 36: 
 var $100=HEAP32[(($12)>>2)];
 var $101=(($100+($97<<1))|0);
 var $102=HEAP16[(($101)>>1)];
 var $103=$102&8192;
 var $phitmp1003=(($103<<16)>>16)==0;
 if($phitmp1003){label=42;break;}else{label=37;break;}
 case 37: 
 var $105=HEAP32[(($10)>>2)];
 var $106=(($105+12)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($105+16)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($107|0)==($109|0);
 if($110){label=38;break;}else{label=40;break;}
 case 38: 
 var $112=$105;
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+40)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 39: 
 var $extract_t1004=(($116)&255);
 var $_0928_off0=$extract_t1004;label=41;break;
 case 40: 
 var $118=(($107+1)|0);
 HEAP32[(($106)>>2)]=$118;
 var $119=HEAP8[($107)];
 var $_0928_off0=$119;label=41;break;
 case 41: 
 var $_0928_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0928_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 42: 
 var $120=HEAP32[(($__err)>>2)];
 var $121=$120|4;
 HEAP32[(($__err)>>2)]=$121;
 var $_0914=0;var $1025=$35;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load105910781220;label=308;break;
 case 43: 
 var $123=($__p_01228|0)==3;
 if($123){var $__gb_sroa_1_4_load10591078_lcssa=$__gb_sroa_1_4_load105910781220;var $_lcssa=$35;var $__gb_sroa_0_0_load10491063_lcssa=$__gb_sroa_0_0_load104910631223;var $__trailing_sign_0_lcssa=$__trailing_sign_01226;label=274;break;}else{var $124=$71;label=44;break;}
 case 44: 
 var $124;
 var $125=HEAP32[(($10)>>2)];
 var $126=($125|0)==0;
 if($126){var $141=0;label=50;break;}else{label=45;break;}
 case 45: 
 var $128=(($125+12)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($125+16)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($129|0)==($131|0);
 if($132){label=46;break;}else{var $141=$125;label=50;break;}
 case 46: 
 var $134=$125;
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+36)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]($125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=23;break; }
 case 47: 
 var $139=($138|0)==-1;
 if($139){label=49;break;}else{label=48;break;}
 case 48: 
 var $_pre1309=HEAP32[(($10)>>2)];
 var $141=$_pre1309;label=50;break;
 case 49: 
 HEAP32[(($10)>>2)]=0;
 var $141=0;label=50;break;
 case 50: 
 var $141;
 var $142=($141|0)==0;
 var $143=($124|0)==0;
 if($143){label=56;break;}else{label=51;break;}
 case 51: 
 var $145=(($124+12)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($124+16)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($146|0)==($148|0);
 if($149){label=53;break;}else{label=52;break;}
 case 52: 
 if($142){var $158=$124;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}
 case 53: 
 var $151=$124;
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+36)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$154]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=23;break; }
 case 54: 
 var $156=($155|0)==-1;
 if($156){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($11)>>2)]=0;
 label=56;break;
 case 56: 
 if($142){var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}else{var $158=0;label=58;break;}
 case 57: 
 if($142){var $158=$124;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}
 case 58: 
 var $158;
 var $159=HEAP32[(($10)>>2)];
 var $160=(($159+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($159+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=59;break;}else{label=61;break;}
 case 59: 
 var $166=$159;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=23;break; }
 case 60: 
 var $extract_t996=(($170)&255);
 var $_0925_off0=$extract_t996;label=62;break;
 case 61: 
 var $172=HEAP8[($161)];
 var $_0925_off0=$172;label=62;break;
 case 62: 
 var $_0925_off0;
 var $173=(($_0925_off0<<24)>>24);
 var $174=(function() { try { __THREW__ = 0; return _isascii($173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=23;break; }
 case 63: 
 var $175=($174|0)==0;
 if($175){var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}else{label=64;break;}
 case 64: 
 var $176=HEAP32[(($12)>>2)];
 var $177=(($176+($173<<1))|0);
 var $178=HEAP16[(($177)>>1)];
 var $179=$178&8192;
 var $phitmp998=(($179<<16)>>16)==0;
 if($phitmp998){var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}else{label=65;break;}
 case 65: 
 var $181=HEAP32[(($10)>>2)];
 var $182=(($181+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($181+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=66;break;}else{label=68;break;}
 case 66: 
 var $188=$181;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+40)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=23;break; }
 case 67: 
 var $extract_t999=(($192)&255);
 var $_0924_off0=$extract_t999;label=69;break;
 case 68: 
 var $194=(($183+1)|0);
 HEAP32[(($182)>>2)]=$194;
 var $195=HEAP8[($183)];
 var $_0924_off0=$195;label=69;break;
 case 69: 
 var $_0924_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0924_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $124=$158;label=44;break; } else { label=23;break; }
 case 70: 
 var $196=HEAP8[($3)];
 var $197=($196&255);
 var $198=$197&1;
 var $199=($198|0)==0;
 var $200=HEAP32[(($19)>>2)];
 var $201=$197>>>1;
 var $202=$199?$201:$200;
 var $203=HEAP8[($4)];
 var $204=($203&255);
 var $205=$204&1;
 var $206=($205|0)==0;
 var $207=HEAP32[(($16)>>2)];
 var $208=$204>>>1;
 var $209=$206?$208:$207;
 var $210=(((-$209))|0);
 var $211=($202|0)==($210|0);
 if($211){var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}else{label=71;break;}
 case 71: 
 var $212=($202|0)==0;
 var $213=($209|0)==0;
 var $or_cond1334=$212|$213;
 var $214=HEAP32[(($10)>>2)];
 var $215=(($214+12)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(($214+16)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($216|0)==($218|0);
 if($or_cond1334){label=72;break;}else{label=92;break;}
 case 72: 
 if($212){label=83;break;}else{label=73;break;}
 case 73: 
 if($219){label=74;break;}else{label=76;break;}
 case 74: 
 var $222=$214;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+36)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$225]($214) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 75: 
 var $extract_t993=(($226)&255);
 var $_pre1299=HEAP8[($3)];
 var $_0921_off0=$extract_t993;var $229=$_pre1299;label=77;break;
 case 76: 
 var $228=HEAP8[($216)];
 var $_0921_off0=$228;var $229=$196;label=77;break;
 case 77: 
 var $229;
 var $_0921_off0;
 var $230=$229&1;
 var $231=(($230<<24)>>24)==0;
 var $232=HEAP32[(($20)>>2)];
 var $_=$231?$18:$232;
 var $233=HEAP8[($_)];
 var $234=(($_0921_off0<<24)>>24)==(($233<<24)>>24);
 if($234){label=78;break;}else{label=82;break;}
 case 78: 
 var $236=HEAP32[(($10)>>2)];
 var $237=(($236+12)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($236+16)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=($238|0)==($240|0);
 if($241){label=79;break;}else{label=80;break;}
 case 79: 
 var $243=$236;
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+40)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$246]($236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 80: 
 var $249=(($238+1)|0);
 HEAP32[(($237)>>2)]=$249;
 label=81;break;
 case 81: 
 var $250=HEAP8[($3)];
 var $251=($250&255);
 var $252=$251&1;
 var $253=($252|0)==0;
 var $254=HEAP32[(($19)>>2)];
 var $255=$251>>>1;
 var $256=$253?$255:$254;
 var $257=($256>>>0)>1;
 var $__psn___trailing_sign_0=$257?$__psn:$__trailing_sign_01226;
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;
 case 82: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;
 case 83: 
 if($219){label=84;break;}else{label=86;break;}
 case 84: 
 var $261=$214;
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+36)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$264]($214) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 85: 
 var $extract_t991=(($265)&255);
 var $_pre=HEAP8[($4)];
 var $_0917_off0=$extract_t991;var $268=$_pre;label=87;break;
 case 86: 
 var $267=HEAP8[($216)];
 var $_0917_off0=$267;var $268=$203;label=87;break;
 case 87: 
 var $268;
 var $_0917_off0;
 var $269=$268&1;
 var $270=(($269<<24)>>24)==0;
 var $271=HEAP32[(($17)>>2)];
 var $_1322=$270?$15:$271;
 var $272=HEAP8[($_1322)];
 var $273=(($_0917_off0<<24)>>24)==(($272<<24)>>24);
 if($273){label=88;break;}else{var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}
 case 88: 
 var $275=HEAP32[(($10)>>2)];
 var $276=(($275+12)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($275+16)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($277|0)==($279|0);
 if($280){label=89;break;}else{label=90;break;}
 case 89: 
 var $282=$275;
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283+40)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$285]($275) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 90: 
 var $288=(($277+1)|0);
 HEAP32[(($276)>>2)]=$288;
 label=91;break;
 case 91: 
 HEAP8[($__neg)]=1;
 var $289=HEAP8[($4)];
 var $290=($289&255);
 var $291=$290&1;
 var $292=($291|0)==0;
 var $293=HEAP32[(($16)>>2)];
 var $294=$290>>>1;
 var $295=$292?$294:$293;
 var $296=($295>>>0)>1;
 var $__nsn___trailing_sign_0=$296?$__nsn:$__trailing_sign_01226;
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;
 case 92: 
 if($219){label=93;break;}else{label=95;break;}
 case 93: 
 var $299=$214;
 var $300=HEAP32[(($299)>>2)];
 var $301=(($300+36)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$302]($214) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 94: 
 var $extract_t987=(($303)&255);
 var $_pre1300=HEAP8[($3)];
 var $_pre1454=HEAP32[(($10)>>2)];
 var $_phi_trans_insert=(($_pre1454+12)|0);
 var $_pre1455=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert1456=(($_pre1454+16)|0);
 var $_pre1457=HEAP32[(($_phi_trans_insert1456)>>2)];
 var $_0912_off0=$extract_t987;var $309=$_pre1300;var $308=$_pre1454;var $307=$_pre1455;var $306=$_pre1457;label=96;break;
 case 95: 
 var $305=HEAP8[($216)];
 var $_0912_off0=$305;var $309=$196;var $308=$214;var $307=$216;var $306=$218;label=96;break;
 case 96: 
 var $306;
 var $307;
 var $308;
 var $309;
 var $_0912_off0;
 var $310=$309&1;
 var $311=(($310<<24)>>24)==0;
 var $312=HEAP32[(($20)>>2)];
 var $_1323=$311?$18:$312;
 var $313=HEAP8[($_1323)];
 var $314=(($_0912_off0<<24)>>24)==(($313<<24)>>24);
 var $315=(($308+12)|0);
 var $316=($307|0)==($306|0);
 if($314){label=97;break;}else{label=101;break;}
 case 97: 
 if($316){label=98;break;}else{label=99;break;}
 case 98: 
 var $319=$308;
 var $320=HEAP32[(($319)>>2)];
 var $321=(($320+40)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$322]($308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 99: 
 var $325=(($307+1)|0);
 HEAP32[(($315)>>2)]=$325;
 label=100;break;
 case 100: 
 var $326=HEAP8[($3)];
 var $327=($326&255);
 var $328=$327&1;
 var $329=($328|0)==0;
 var $330=HEAP32[(($19)>>2)];
 var $331=$327>>>1;
 var $332=$329?$331:$330;
 var $333=($332>>>0)>1;
 var $__psn___trailing_sign_01007=$333?$__psn:$__trailing_sign_01226;
 var $__trailing_sign_1=$__psn___trailing_sign_01007;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;
 case 101: 
 if($316){label=102;break;}else{label=104;break;}
 case 102: 
 var $336=$308;
 var $337=HEAP32[(($336)>>2)];
 var $338=(($337+36)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$339]($308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 103: 
 var $extract_t989=(($340)&255);
 var $_0908_off0=$extract_t989;label=105;break;
 case 104: 
 var $342=HEAP8[($307)];
 var $_0908_off0=$342;label=105;break;
 case 105: 
 var $_0908_off0;
 var $343=HEAP8[($4)];
 var $344=$343&1;
 var $345=(($344<<24)>>24)==0;
 var $346=HEAP32[(($17)>>2)];
 var $_1324=$345?$15:$346;
 var $347=HEAP8[($_1324)];
 var $348=(($_0908_off0<<24)>>24)==(($347<<24)>>24);
 if($348){label=106;break;}else{label=110;break;}
 case 106: 
 var $350=HEAP32[(($10)>>2)];
 var $351=(($350+12)|0);
 var $352=HEAP32[(($351)>>2)];
 var $353=(($350+16)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=($352|0)==($354|0);
 if($355){label=107;break;}else{label=108;break;}
 case 107: 
 var $357=$350;
 var $358=HEAP32[(($357)>>2)];
 var $359=(($358+40)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$360]($350) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$35;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105910781220;label=24;break; }
 case 108: 
 var $363=(($352+1)|0);
 HEAP32[(($351)>>2)]=$363;
 label=109;break;
 case 109: 
 HEAP8[($__neg)]=1;
 var $364=HEAP8[($4)];
 var $365=($364&255);
 var $366=$365&1;
 var $367=($366|0)==0;
 var $368=HEAP32[(($16)>>2)];
 var $369=$365>>>1;
 var $370=$367?$369:$368;
 var $371=($370>>>0)>1;
 var $__nsn___trailing_sign_01008=$371?$__nsn:$__trailing_sign_01226;
 var $__trailing_sign_1=$__nsn___trailing_sign_01008;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;
 case 110: 
 var $373=HEAP32[(($__err)>>2)];
 var $374=$373|4;
 HEAP32[(($__err)>>2)]=$374;
 var $_0914=0;var $1025=$35;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load105910781220;label=308;break;
 case 111: 
 var $376=($__trailing_sign_01226|0)!=0;
 var $377=($__p_01228>>>0)<2;
 var $or_cond=$376|$377;
 if($or_cond){label=115;break;}else{label=112;break;}
 case 112: 
 var $379=($__p_01228|0)==2;
 if($379){label=113;break;}else{var $384=0;label=114;break;}
 case 113: 
 var $381=HEAP8[($31)];
 var $382=(($381<<24)>>24)!=0;
 var $384=$382;label=114;break;
 case 114: 
 var $384;
 var $brmerge=$22|$384;
 if($brmerge){label=115;break;}else{var $__trailing_sign_1=0;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}
 case 115: 
 var $385=HEAP8[($2)];
 var $386=$385&1;
 var $387=(($386<<24)>>24)==0;
 var $388=HEAP32[(($26)>>2)];
 var $_1325=$387?$24:$388;
 var $389=($__p_01228|0)==0;
 if($389){var $__sym_curr_char_sroa_0_0_ph=$_1325;var $_ph=$385;var $448=$388;label=128;break;}else{label=116;break;}
 case 116: 
 var $391=((($__p_01228)-(1))|0);
 var $392=(($__pat+$391)|0);
 var $393=HEAP8[($392)];
 var $switch=($393&255)<2;
 if($switch){label=117;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_1325;var $_ph=$385;var $448=$388;label=128;break;}
 case 117: 
 var $394=($385&255);
 var $395=$394&1;
 var $396=($395|0)==0;
 var $397=HEAP32[(($25)>>2)];
 var $398=$394>>>1;
 var $399=$396?$398:$397;
 var $400=($399|0)==0;
 if($400){var $__sym_space_end_sroa_0_0_lcssa=$_1325;var $422=$385;var $421=$388;label=123;break;}else{var $__sym_space_end_sroa_0_01351=$_1325;label=118;break;}
 case 118: 
 var $__sym_space_end_sroa_0_01351;
 var $401=HEAP8[($__sym_space_end_sroa_0_01351)];
 var $402=(($401<<24)>>24);
 var $403=(function() { try { __THREW__ = 0; return _isascii($402) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=21;break; }
 case 119: 
 var $404=($403|0)==0;
 if($404){label=122;break;}else{label=120;break;}
 case 120: 
 var $405=HEAP32[(($12)>>2)];
 var $406=(($405+($402<<1))|0);
 var $407=HEAP16[(($406)>>1)];
 var $408=$407&8192;
 var $phitmp986=(($408<<16)>>16)==0;
 if($phitmp986){label=122;break;}else{label=121;break;}
 case 121: 
 var $409=(($__sym_space_end_sroa_0_01351+1)|0);
 var $_pre1310=HEAP8[($2)];
 var $410=$_pre1310&1;
 var $411=(($410<<24)>>24)==0;
 var $412=HEAP32[(($26)>>2)];
 var $_1326=$411?$24:$412;
 var $413=($_pre1310&255);
 var $414=$413&1;
 var $415=($414|0)==0;
 var $416=HEAP32[(($25)>>2)];
 var $417=$413>>>1;
 var $418=$415?$417:$416;
 var $419=(($_1326+$418)|0);
 var $420=($409|0)==($419|0);
 if($420){var $__sym_space_end_sroa_0_0_lcssa=$409;var $422=$_pre1310;var $421=$412;label=123;break;}else{var $__sym_space_end_sroa_0_01351=$409;label=118;break;}
 case 122: 
 var $_pre1458=HEAP8[($2)];
 var $_pre1459=HEAP32[(($26)>>2)];
 var $__sym_space_end_sroa_0_0_lcssa=$__sym_space_end_sroa_0_01351;var $422=$_pre1458;var $421=$_pre1459;label=123;break;
 case 123: 
 var $421;
 var $422;
 var $__sym_space_end_sroa_0_0_lcssa;
 var $423=$422&1;
 var $424=(($423<<24)>>24)==0;
 var $_1327=$424?$24:$421;
 var $425=$__sym_space_end_sroa_0_0_lcssa;
 var $426=$_1327;
 var $427=((($425)-($426))|0);
 var $428=HEAP8[($5)];
 var $429=($428&255);
 var $430=$429&1;
 var $431=($430|0)==0;
 var $432=HEAP32[(($29)>>2)];
 var $433=$429>>>1;
 var $434=$431?$433:$432;
 var $435=($427>>>0)>($434>>>0);
 if($435){var $__sym_curr_char_sroa_0_0_ph=$_1327;var $_ph=$422;var $448=$421;label=128;break;}else{label=124;break;}
 case 124: 
 var $436=$428&1;
 var $437=(($436<<24)>>24)==0;
 var $438=HEAP32[(($30)>>2)];
 var $_1328=$437?$28:$438;
 var $439=(($_1328+$434)|0);
 var $440=($__sym_space_end_sroa_0_0_lcssa|0)==($_1327|0);
 if($440){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$422;var $448=$421;label=128;break;}else{label=125;break;}
 case 125: 
 var $_sum=((($434)-($427))|0);
 var $441=(($_1328+$_sum)|0);
 var $_sroa_0941_01130=$441;var $_sroa_0939_01131=$_1327;label=126;break;
 case 126: 
 var $_sroa_0939_01131;
 var $_sroa_0941_01130;
 var $442=HEAP8[($_sroa_0941_01130)];
 var $443=HEAP8[($_sroa_0939_01131)];
 var $444=(($442<<24)>>24)==(($443<<24)>>24);
 if($444){label=127;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_1327;var $_ph=$422;var $448=$421;label=128;break;}
 case 127: 
 var $445=(($_sroa_0941_01130+1)|0);
 var $446=(($_sroa_0939_01131+1)|0);
 var $447=($445|0)==($439|0);
 if($447){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$422;var $448=$421;label=128;break;}else{var $_sroa_0941_01130=$445;var $_sroa_0939_01131=$446;label=126;break;}
 case 128: 
 var $448;
 var $_ph;
 var $__sym_curr_char_sroa_0_0_ph;
 var $449=$_ph&1;
 var $450=(($449<<24)>>24)==0;
 var $_13321354=$450?$24:$448;
 var $451=($_ph&255);
 var $452=$451&1;
 var $453=($452|0)==0;
 var $454=HEAP32[(($25)>>2)];
 var $455=$451>>>1;
 var $456=$453?$455:$454;
 var $457=(($_13321354+$456)|0);
 var $458=($__sym_curr_char_sroa_0_0_ph|0)==($457|0);
 if($458){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0_ph;label=152;break;}else{var $459=$71;var $__sym_curr_char_sroa_0_01355=$__sym_curr_char_sroa_0_0_ph;label=129;break;}
 case 129: 
 var $__sym_curr_char_sroa_0_01355;
 var $459;
 var $460=HEAP32[(($10)>>2)];
 var $461=($460|0)==0;
 if($461){var $476=0;label=135;break;}else{label=130;break;}
 case 130: 
 var $463=(($460+12)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=(($460+16)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=($464|0)==($466|0);
 if($467){label=131;break;}else{var $476=$460;label=135;break;}
 case 131: 
 var $469=$460;
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+36)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$472]($460) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=22;break; }
 case 132: 
 var $474=($473|0)==-1;
 if($474){label=134;break;}else{label=133;break;}
 case 133: 
 var $_pre1311=HEAP32[(($10)>>2)];
 var $476=$_pre1311;label=135;break;
 case 134: 
 HEAP32[(($10)>>2)]=0;
 var $476=0;label=135;break;
 case 135: 
 var $476;
 var $477=($476|0)==0;
 var $478=($459|0)==0;
 if($478){label=141;break;}else{label=136;break;}
 case 136: 
 var $480=(($459+12)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=(($459+16)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($481|0)==($483|0);
 if($484){label=138;break;}else{label=137;break;}
 case 137: 
 if($477){var $493=$459;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01355;label=152;break;}
 case 138: 
 var $486=$459;
 var $487=HEAP32[(($486)>>2)];
 var $488=(($487+36)|0);
 var $489=HEAP32[(($488)>>2)];
 var $490=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$489]($459) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=22;break; }
 case 139: 
 var $491=($490|0)==-1;
 if($491){label=140;break;}else{label=142;break;}
 case 140: 
 HEAP32[(($11)>>2)]=0;
 label=141;break;
 case 141: 
 if($477){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01355;label=152;break;}else{var $493=0;label=143;break;}
 case 142: 
 if($477){var $493=$459;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01355;label=152;break;}
 case 143: 
 var $493;
 var $494=HEAP32[(($10)>>2)];
 var $495=(($494+12)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($494+16)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($496|0)==($498|0);
 if($499){label=144;break;}else{label=146;break;}
 case 144: 
 var $501=$494;
 var $502=HEAP32[(($501)>>2)];
 var $503=(($502+36)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$504]($494) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=22;break; }
 case 145: 
 var $extract_t984=(($505)&255);
 var $_0901_off0=$extract_t984;label=147;break;
 case 146: 
 var $507=HEAP8[($496)];
 var $_0901_off0=$507;label=147;break;
 case 147: 
 var $_0901_off0;
 var $508=HEAP8[($__sym_curr_char_sroa_0_01355)];
 var $509=(($_0901_off0<<24)>>24)==(($508<<24)>>24);
 if($509){label=148;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01355;label=152;break;}
 case 148: 
 var $511=HEAP32[(($10)>>2)];
 var $512=(($511+12)|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=(($511+16)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=($513|0)==($515|0);
 if($516){label=149;break;}else{label=150;break;}
 case 149: 
 var $518=$511;
 var $519=HEAP32[(($518)>>2)];
 var $520=(($519+40)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$521]($511) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=22;break; }
 case 150: 
 var $524=(($513+1)|0);
 HEAP32[(($512)>>2)]=$524;
 label=151;break;
 case 151: 
 var $525=(($__sym_curr_char_sroa_0_01355+1)|0);
 var $_pre1301=HEAP8[($2)];
 var $526=$_pre1301&1;
 var $527=(($526<<24)>>24)==0;
 var $528=HEAP32[(($26)>>2)];
 var $_1332=$527?$24:$528;
 var $529=($_pre1301&255);
 var $530=$529&1;
 var $531=($530|0)==0;
 var $532=HEAP32[(($25)>>2)];
 var $533=$529>>>1;
 var $534=$531?$533:$532;
 var $535=(($_1332+$534)|0);
 var $536=($525|0)==($535|0);
 if($536){var $__sym_curr_char_sroa_0_0_lcssa=$525;label=152;break;}else{var $459=$493;var $__sym_curr_char_sroa_0_01355=$525;label=129;break;}
 case 152: 
 var $__sym_curr_char_sroa_0_0_lcssa;
 if($22){label=153;break;}else{var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}
 case 153: 
 var $537=HEAP8[($2)];
 var $538=$537&1;
 var $539=(($538<<24)>>24)==0;
 var $540=HEAP32[(($26)>>2)];
 var $_1333=$539?$24:$540;
 var $541=($537&255);
 var $542=$541&1;
 var $543=($542|0)==0;
 var $544=HEAP32[(($25)>>2)];
 var $545=$541>>>1;
 var $546=$543?$545:$544;
 var $547=(($_1333+$546)|0);
 var $548=($__sym_curr_char_sroa_0_0_lcssa|0)==($547|0);
 if($548){var $__trailing_sign_1=$__trailing_sign_01226;var $921=$34;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load104910631223;var $920=$35;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load105910781220;var $__we1085=$__we10841217;label=273;break;}else{label=154;break;}
 case 154: 
 var $550=HEAP32[(($__err)>>2)];
 var $551=$550|4;
 HEAP32[(($__err)>>2)]=$551;
 var $_0914=0;var $1025=$35;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load105910781220;label=308;break;
 case 155: 
 var $__we1089;
 var $__gb_sroa_1_4_load10591076;
 var $552;
 var $__gb_sroa_0_0_load10491066;
 var $553;
 var $__ng_0;
 var $554=HEAP32[(($10)>>2)];
 var $555=($554|0)==0;
 if($555){var $570=0;label=161;break;}else{label=156;break;}
 case 156: 
 var $557=(($554+12)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=(($554+16)|0);
 var $560=HEAP32[(($559)>>2)];
 var $561=($558|0)==($560|0);
 if($561){label=157;break;}else{var $570=$554;label=161;break;}
 case 157: 
 var $563=$554;
 var $564=HEAP32[(($563)>>2)];
 var $565=(($564+36)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$566]($554) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=158;break; } else { var $_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591076;label=19;break; }
 case 158: 
 var $568=($567|0)==-1;
 if($568){label=160;break;}else{label=159;break;}
 case 159: 
 var $_pre1312=HEAP32[(($10)>>2)];
 var $570=$_pre1312;label=161;break;
 case 160: 
 HEAP32[(($10)>>2)]=0;
 var $570=0;label=161;break;
 case 161: 
 var $570;
 var $571=($570|0)==0;
 var $572=HEAP32[(($11)>>2)];
 var $573=($572|0)==0;
 if($573){label=167;break;}else{label=162;break;}
 case 162: 
 var $575=(($572+12)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=(($572+16)|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($576|0)==($578|0);
 if($579){label=164;break;}else{label=163;break;}
 case 163: 
 if($571){label=169;break;}else{label=199;break;}
 case 164: 
 var $581=$572;
 var $582=HEAP32[(($581)>>2)];
 var $583=(($582+36)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$584]($572) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { var $_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591076;label=19;break; }
 case 165: 
 var $586=($585|0)==-1;
 if($586){label=166;break;}else{label=168;break;}
 case 166: 
 HEAP32[(($11)>>2)]=0;
 label=167;break;
 case 167: 
 if($571){label=199;break;}else{label=169;break;}
 case 168: 
 if($571){label=169;break;}else{label=199;break;}
 case 169: 
 var $588=HEAP32[(($10)>>2)];
 var $589=(($588+12)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(($588+16)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=($590|0)==($592|0);
 if($593){label=170;break;}else{label=172;break;}
 case 170: 
 var $595=$588;
 var $596=HEAP32[(($595)>>2)];
 var $597=(($596+36)|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$598]($588) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { var $_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591076;label=19;break; }
 case 171: 
 var $extract_t980=(($599)&255);
 var $_0905_off0=$extract_t980;label=173;break;
 case 172: 
 var $601=HEAP8[($590)];
 var $_0905_off0=$601;label=173;break;
 case 173: 
 var $_0905_off0;
 var $602=(($_0905_off0<<24)>>24);
 var $603=(function() { try { __THREW__ = 0; return _isascii($602) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=174;break; } else { var $_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591076;label=19;break; }
 case 174: 
 var $604=($603|0)==0;
 if($604){label=187;break;}else{label=175;break;}
 case 175: 
 var $605=HEAP32[(($12)>>2)];
 var $606=(($605+($602<<1))|0);
 var $607=HEAP16[(($606)>>1)];
 var $608=$607&2048;
 var $phitmp982=(($608<<16)>>16)==0;
 if($phitmp982){label=187;break;}else{label=176;break;}
 case 176: 
 var $610=HEAP32[(($__wn)>>2)];
 var $611=($610|0)==($__we1089|0);
 if($611){label=177;break;}else{var $__we1091=$__we1089;var $636=$610;label=186;break;}
 case 177: 
 var $613=HEAP32[(($33)>>2)];
 var $614=($613|0)!=((446)|0);
 var $615=HEAP32[(($8)>>2)];
 var $616=$__we1089;
 var $617=$615;
 var $618=((($616)-($617))|0);
 var $619=($618>>>0)<2147483647;
 var $620=$618<<1;
 var $621=$619?$620:-1;
 var $__i=$614?$615:0;
 var $622=_realloc($__i,$621);
 var $623=($622|0)==0;
 if($623){label=178;break;}else{label=179;break;}
 case 178: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { var $_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591076;label=19;break; }
 case 179: 
 if($614){label=180;break;}else{label=181;break;}
 case 180: 
 HEAP32[(($8)>>2)]=$622;
 var $631=$622;label=185;break;
 case 181: 
 var $_pr_i=HEAP32[(($8)>>2)];
 HEAP32[(($8)>>2)]=$622;
 var $626=($_pr_i|0)==0;
 if($626){var $631=$622;label=185;break;}else{label=182;break;}
 case 182: 
 var $628=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$628]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=184;break; }
 case 183: 
 var $_pre_i=HEAP32[(($8)>>2)];
 var $631=$_pre_i;label=185;break;
 case 184: 
 var $630$0 = ___cxa_find_matching_catch(-1, -1,0); var $630$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 185: 
 var $631;
 HEAP32[(($33)>>2)]=228;
 var $632=(($631+$618)|0);
 HEAP32[(($__wn)>>2)]=$632;
 var $633=HEAP32[(($8)>>2)];
 var $634=(($633+$621)|0);
 var $__we1091=$634;var $636=$632;label=186;break;
 case 186: 
 var $636;
 var $__we1091;
 var $637=(($636+1)|0);
 HEAP32[(($__wn)>>2)]=$637;
 HEAP8[($636)]=$_0905_off0;
 var $638=((($__ng_0)+(1))|0);
 var $__ng_1=$638;var $678=$553;var $__gb_sroa_0_0_load10491067=$__gb_sroa_0_0_load10491066;var $677=$552;var $__gb_sroa_1_4_load10591074=$__gb_sroa_1_4_load10591076;var $__we1090=$__we1091;label=196;break;
 case 187: 
 var $639=HEAP8[($0)];
 var $640=($639&255);
 var $641=$640&1;
 var $642=($641|0)==0;
 var $643=HEAP32[(($32)>>2)];
 var $644=$640>>>1;
 var $645=$642?$644:$643;
 var $646=($645|0)==0;
 var $647=($__ng_0|0)==0;
 var $or_cond1011=$646|$647;
 if($or_cond1011){label=199;break;}else{label=188;break;}
 case 188: 
 var $649=HEAP8[($__ts)];
 var $650=(($_0905_off0<<24)>>24)==(($649<<24)>>24);
 if($650){label=189;break;}else{label=199;break;}
 case 189: 
 var $652=($__gb_sroa_0_0_load10491066|0)==($553|0);
 if($652){label=190;break;}else{var $674=$553;var $__gb_sroa_0_0_load10491068=$__gb_sroa_0_0_load10491066;var $673=$552;var $__gb_sroa_1_4_load10591075=$__gb_sroa_1_4_load10591076;label=195;break;}
 case 190: 
 var $654=($__gb_sroa_1_4_load10591076|0)==((446)|0);
 var $655=$__gb_sroa_0_0_load10491066;
 var $656=$552;
 var $657=((($655)-($656))|0);
 var $658=($657>>>0)<2147483647;
 var $659=$657<<1;
 var $660=$658?$659:-1;
 var $661=$657>>2;
 if($654){var $664=0;label=192;break;}else{label=191;break;}
 case 191: 
 var $phitmp_i=$552;
 var $664=$phitmp_i;label=192;break;
 case 192: 
 var $664;
 var $665=_realloc($664,$660);
 var $666=$665;
 var $667=($665|0)==0;
 if($667){label=193;break;}else{label=194;break;}
 case 193: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { var $_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591076;label=19;break; }
 case 194: 
 var $669=$660>>>2;
 var $670=(($666+($661<<2))|0);
 var $671=(($666+($669<<2))|0);
 var $674=$671;var $__gb_sroa_0_0_load10491068=$670;var $673=$666;var $__gb_sroa_1_4_load10591075=228;label=195;break;
 case 195: 
 var $__gb_sroa_1_4_load10591075;
 var $673;
 var $__gb_sroa_0_0_load10491068;
 var $674;
 var $675=(($__gb_sroa_0_0_load10491068+4)|0);
 HEAP32[(($__gb_sroa_0_0_load10491068)>>2)]=$__ng_0;
 var $__ng_1=0;var $678=$674;var $__gb_sroa_0_0_load10491067=$675;var $677=$673;var $__gb_sroa_1_4_load10591074=$__gb_sroa_1_4_load10591075;var $__we1090=$__we1089;label=196;break;
 case 196: 
 var $__we1090;
 var $__gb_sroa_1_4_load10591074;
 var $677;
 var $__gb_sroa_0_0_load10491067;
 var $678;
 var $__ng_1;
 var $679=HEAP32[(($10)>>2)];
 var $680=(($679+12)|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=(($679+16)|0);
 var $683=HEAP32[(($682)>>2)];
 var $684=($681|0)==($683|0);
 if($684){label=197;break;}else{label=198;break;}
 case 197: 
 var $686=$679;
 var $687=HEAP32[(($686)>>2)];
 var $688=(($687+40)|0);
 var $689=HEAP32[(($688)>>2)];
 var $690=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$689]($679) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $553=$678;var $__gb_sroa_0_0_load10491066=$__gb_sroa_0_0_load10491067;var $552=$677;var $__gb_sroa_1_4_load10591076=$__gb_sroa_1_4_load10591074;var $__we1089=$__we1090;label=155;break; } else { var $_ph_ph=$677;var $__gb_sroa_1_4_load10591071_ph_ph=$__gb_sroa_1_4_load10591074;label=19;break; }
 case 198: 
 var $692=(($681+1)|0);
 HEAP32[(($680)>>2)]=$692;
 var $__ng_0=$__ng_1;var $553=$678;var $__gb_sroa_0_0_load10491066=$__gb_sroa_0_0_load10491067;var $552=$677;var $__gb_sroa_1_4_load10591076=$__gb_sroa_1_4_load10591074;var $__we1089=$__we1090;label=155;break;
 case 199: 
 var $694=($552|0)==($__gb_sroa_0_0_load10491066|0);
 var $695=($__ng_0|0)==0;
 var $or_cond1012=$694|$695;
 if($or_cond1012){var $722=$553;var $__gb_sroa_0_0_load10491065=$__gb_sroa_0_0_load10491066;var $721=$552;var $__gb_sroa_1_4_load10591073=$__gb_sroa_1_4_load10591076;label=207;break;}else{label=200;break;}
 case 200: 
 var $697=($__gb_sroa_0_0_load10491066|0)==($553|0);
 if($697){label=201;break;}else{var $719=$553;var $__gb_sroa_0_0_load10491069=$__gb_sroa_0_0_load10491066;var $718=$552;var $__gb_sroa_1_4_load10591072=$__gb_sroa_1_4_load10591076;label=206;break;}
 case 201: 
 var $699=($__gb_sroa_1_4_load10591076|0)==((446)|0);
 var $700=$__gb_sroa_0_0_load10491066;
 var $701=$552;
 var $702=((($700)-($701))|0);
 var $703=($702>>>0)<2147483647;
 var $704=$702<<1;
 var $705=$703?$704:-1;
 var $706=$702>>2;
 if($699){var $709=0;label=203;break;}else{label=202;break;}
 case 202: 
 var $phitmp_i1018=$552;
 var $709=$phitmp_i1018;label=203;break;
 case 203: 
 var $709;
 var $710=_realloc($709,$705);
 var $711=$710;
 var $712=($710|0)==0;
 if($712){label=204;break;}else{label=205;break;}
 case 204: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$552;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10591076;label=24;break; }
 case 205: 
 var $714=$705>>>2;
 var $715=(($711+($706<<2))|0);
 var $716=(($711+($714<<2))|0);
 var $719=$716;var $__gb_sroa_0_0_load10491069=$715;var $718=$711;var $__gb_sroa_1_4_load10591072=228;label=206;break;
 case 206: 
 var $__gb_sroa_1_4_load10591072;
 var $718;
 var $__gb_sroa_0_0_load10491069;
 var $719;
 var $720=(($__gb_sroa_0_0_load10491069+4)|0);
 HEAP32[(($__gb_sroa_0_0_load10491069)>>2)]=$__ng_0;
 var $722=$719;var $__gb_sroa_0_0_load10491065=$720;var $721=$718;var $__gb_sroa_1_4_load10591073=$__gb_sroa_1_4_load10591072;label=207;break;
 case 207: 
 var $__gb_sroa_1_4_load10591073;
 var $721;
 var $__gb_sroa_0_0_load10491065;
 var $722;
 var $723=HEAP32[(($__fd)>>2)];
 var $724=($723|0)>0;
 if($724){label=208;break;}else{var $__we1086=$__we1089;label=271;break;}
 case 208: 
 var $726=HEAP32[(($10)>>2)];
 var $727=($726|0)==0;
 if($727){var $742=0;label=214;break;}else{label=209;break;}
 case 209: 
 var $729=(($726+12)|0);
 var $730=HEAP32[(($729)>>2)];
 var $731=(($726+16)|0);
 var $732=HEAP32[(($731)>>2)];
 var $733=($730|0)==($732|0);
 if($733){label=210;break;}else{var $742=$726;label=214;break;}
 case 210: 
 var $735=$726;
 var $736=HEAP32[(($735)>>2)];
 var $737=(($736+36)|0);
 var $738=HEAP32[(($737)>>2)];
 var $739=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$738]($726) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10591073;label=24;break; }
 case 211: 
 var $740=($739|0)==-1;
 if($740){label=213;break;}else{label=212;break;}
 case 212: 
 var $_pre1313=HEAP32[(($10)>>2)];
 var $742=$_pre1313;label=214;break;
 case 213: 
 HEAP32[(($10)>>2)]=0;
 var $742=0;label=214;break;
 case 214: 
 var $742;
 var $743=($742|0)==0;
 var $744=HEAP32[(($11)>>2)];
 var $745=($744|0)==0;
 if($745){label=220;break;}else{label=215;break;}
 case 215: 
 var $747=(($744+12)|0);
 var $748=HEAP32[(($747)>>2)];
 var $749=(($744+16)|0);
 var $750=HEAP32[(($749)>>2)];
 var $751=($748|0)==($750|0);
 if($751){label=217;break;}else{label=216;break;}
 case 216: 
 if($743){var $760=$744;label=222;break;}else{label=227;break;}
 case 217: 
 var $753=$744;
 var $754=HEAP32[(($753)>>2)];
 var $755=(($754+36)|0);
 var $756=HEAP32[(($755)>>2)];
 var $757=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$756]($744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10591073;label=24;break; }
 case 218: 
 var $758=($757|0)==-1;
 if($758){label=219;break;}else{label=221;break;}
 case 219: 
 HEAP32[(($11)>>2)]=0;
 label=220;break;
 case 220: 
 if($743){label=227;break;}else{var $760=0;label=222;break;}
 case 221: 
 if($743){var $760=$744;label=222;break;}else{label=227;break;}
 case 222: 
 var $760;
 var $761=HEAP32[(($10)>>2)];
 var $762=(($761+12)|0);
 var $763=HEAP32[(($762)>>2)];
 var $764=(($761+16)|0);
 var $765=HEAP32[(($764)>>2)];
 var $766=($763|0)==($765|0);
 if($766){label=223;break;}else{label=225;break;}
 case 223: 
 var $768=$761;
 var $769=HEAP32[(($768)>>2)];
 var $770=(($769+36)|0);
 var $771=HEAP32[(($770)>>2)];
 var $772=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$771]($761) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10591073;label=24;break; }
 case 224: 
 var $extract_t973=(($772)&255);
 var $_0913_off0=$extract_t973;label=226;break;
 case 225: 
 var $774=HEAP8[($763)];
 var $_0913_off0=$774;label=226;break;
 case 226: 
 var $_0913_off0;
 var $775=HEAP8[($__dp)];
 var $776=(($_0913_off0<<24)>>24)==(($775<<24)>>24);
 if($776){label=228;break;}else{label=227;break;}
 case 227: 
 var $778=HEAP32[(($__err)>>2)];
 var $779=$778|4;
 HEAP32[(($__err)>>2)]=$779;
 var $_0914=0;var $1025=$721;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591073;label=308;break;
 case 228: 
 var $781=HEAP32[(($10)>>2)];
 var $782=(($781+12)|0);
 var $783=HEAP32[(($782)>>2)];
 var $784=(($781+16)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=($783|0)==($785|0);
 if($786){label=229;break;}else{label=230;break;}
 case 229: 
 var $788=$781;
 var $789=HEAP32[(($788)>>2)];
 var $790=(($789+40)|0);
 var $791=HEAP32[(($790)>>2)];
 var $792=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$791]($781) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__we10881125=$__we1089;var $795=$760;label=231;break; } else { var $_ph_ph1097_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10591071_ph_ph1096_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10591073;label=24;break; }
 case 230: 
 var $794=(($783+1)|0);
 HEAP32[(($782)>>2)]=$794;
 var $__we10881125=$__we1089;var $795=$760;label=231;break;
 case 231: 
 var $795;
 var $__we10881125;
 var $796=HEAP32[(($10)>>2)];
 var $797=($796|0)==0;
 if($797){var $812=0;label=237;break;}else{label=232;break;}
 case 232: 
 var $799=(($796+12)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($796+16)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=($800|0)==($802|0);
 if($803){label=233;break;}else{var $812=$796;label=237;break;}
 case 233: 
 var $805=$796;
 var $806=HEAP32[(($805)>>2)];
 var $807=(($806+36)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$808]($796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=20;break; }
 case 234: 
 var $810=($809|0)==-1;
 if($810){label=236;break;}else{label=235;break;}
 case 235: 
 var $_pre1314=HEAP32[(($10)>>2)];
 var $812=$_pre1314;label=237;break;
 case 236: 
 HEAP32[(($10)>>2)]=0;
 var $812=0;label=237;break;
 case 237: 
 var $812;
 var $813=($812|0)==0;
 var $814=($795|0)==0;
 if($814){label=243;break;}else{label=238;break;}
 case 238: 
 var $816=(($795+12)|0);
 var $817=HEAP32[(($816)>>2)];
 var $818=(($795+16)|0);
 var $819=HEAP32[(($818)>>2)];
 var $820=($817|0)==($819|0);
 if($820){label=240;break;}else{label=239;break;}
 case 239: 
 if($813){var $829=$795;label=245;break;}else{label=252;break;}
 case 240: 
 var $822=$795;
 var $823=HEAP32[(($822)>>2)];
 var $824=(($823+36)|0);
 var $825=HEAP32[(($824)>>2)];
 var $826=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$825]($795) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=20;break; }
 case 241: 
 var $827=($826|0)==-1;
 if($827){label=242;break;}else{label=244;break;}
 case 242: 
 HEAP32[(($11)>>2)]=0;
 label=243;break;
 case 243: 
 if($813){label=252;break;}else{var $829=0;label=245;break;}
 case 244: 
 if($813){var $829=$795;label=245;break;}else{label=252;break;}
 case 245: 
 var $829;
 var $830=HEAP32[(($10)>>2)];
 var $831=(($830+12)|0);
 var $832=HEAP32[(($831)>>2)];
 var $833=(($830+16)|0);
 var $834=HEAP32[(($833)>>2)];
 var $835=($832|0)==($834|0);
 if($835){label=246;break;}else{label=248;break;}
 case 246: 
 var $837=$830;
 var $838=HEAP32[(($837)>>2)];
 var $839=(($838+36)|0);
 var $840=HEAP32[(($839)>>2)];
 var $841=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$840]($830) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=20;break; }
 case 247: 
 var $extract_t976=(($841)&255);
 var $_0922_off0=$extract_t976;label=249;break;
 case 248: 
 var $843=HEAP8[($832)];
 var $_0922_off0=$843;label=249;break;
 case 249: 
 var $_0922_off0;
 var $844=(($_0922_off0<<24)>>24);
 var $845=(function() { try { __THREW__ = 0; return _isascii($844) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=20;break; }
 case 250: 
 var $846=($845|0)==0;
 if($846){label=252;break;}else{label=251;break;}
 case 251: 
 var $847=HEAP32[(($12)>>2)];
 var $848=(($847+($844<<1))|0);
 var $849=HEAP16[(($848)>>1)];
 var $850=$849&2048;
 var $phitmp=(($850<<16)>>16)==0;
 if($phitmp){label=252;break;}else{label=253;break;}
 case 252: 
 var $851=HEAP32[(($__err)>>2)];
 var $852=$851|4;
 HEAP32[(($__err)>>2)]=$852;
 var $_0914=0;var $1025=$721;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591073;label=308;break;
 case 253: 
 var $854=HEAP32[(($__wn)>>2)];
 var $855=($854|0)==($__we10881125|0);
 if($855){label=254;break;}else{var $__we1087=$__we10881125;var $880=$854;label=263;break;}
 case 254: 
 var $857=HEAP32[(($33)>>2)];
 var $858=($857|0)!=((446)|0);
 var $859=HEAP32[(($8)>>2)];
 var $860=$__we10881125;
 var $861=$859;
 var $862=((($860)-($861))|0);
 var $863=($862>>>0)<2147483647;
 var $864=$862<<1;
 var $865=$863?$864:-1;
 var $__i1025=$858?$859:0;
 var $866=_realloc($__i1025,$865);
 var $867=($866|0)==0;
 if($867){label=255;break;}else{label=256;break;}
 case 255: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=20;break; }
 case 256: 
 if($858){label=257;break;}else{label=258;break;}
 case 257: 
 HEAP32[(($8)>>2)]=$866;
 var $875=$866;label=262;break;
 case 258: 
 var $_pr_i1027=HEAP32[(($8)>>2)];
 HEAP32[(($8)>>2)]=$866;
 var $870=($_pr_i1027|0)==0;
 if($870){var $875=$866;label=262;break;}else{label=259;break;}
 case 259: 
 var $872=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$872]($_pr_i1027) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=261;break; }
 case 260: 
 var $_pre_i1028=HEAP32[(($8)>>2)];
 var $875=$_pre_i1028;label=262;break;
 case 261: 
 var $874$0 = ___cxa_find_matching_catch(-1, -1,0); var $874$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 262: 
 var $875;
 HEAP32[(($33)>>2)]=228;
 var $876=(($875+$862)|0);
 HEAP32[(($__wn)>>2)]=$876;
 var $877=HEAP32[(($8)>>2)];
 var $878=(($877+$865)|0);
 var $__we1087=$878;var $880=$876;label=263;break;
 case 263: 
 var $880;
 var $__we1087;
 var $881=HEAP32[(($10)>>2)];
 var $882=(($881+12)|0);
 var $883=HEAP32[(($882)>>2)];
 var $884=(($881+16)|0);
 var $885=HEAP32[(($884)>>2)];
 var $886=($883|0)==($885|0);
 if($886){label=264;break;}else{label=266;break;}
 case 264: 
 var $888=$881;
 var $889=HEAP32[(($888)>>2)];
 var $890=(($889+36)|0);
 var $891=HEAP32[(($890)>>2)];
 var $892=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$891]($881) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=265;break; } else { label=20;break; }
 case 265: 
 var $extract_t978=(($892)&255);
 var $_pre1302=HEAP32[(($__wn)>>2)];
 var $_0923_off0=$extract_t978;var $895=$_pre1302;label=267;break;
 case 266: 
 var $894=HEAP8[($883)];
 var $_0923_off0=$894;var $895=$880;label=267;break;
 case 267: 
 var $895;
 var $_0923_off0;
 var $896=(($895+1)|0);
 HEAP32[(($__wn)>>2)]=$896;
 HEAP8[($895)]=$_0923_off0;
 var $897=HEAP32[(($__fd)>>2)];
 var $898=((($897)-(1))|0);
 HEAP32[(($__fd)>>2)]=$898;
 var $899=HEAP32[(($10)>>2)];
 var $900=(($899+12)|0);
 var $901=HEAP32[(($900)>>2)];
 var $902=(($899+16)|0);
 var $903=HEAP32[(($902)>>2)];
 var $904=($901|0)==($903|0);
 if($904){label=268;break;}else{label=270;break;}
 case 268: 
 var $906=$899;
 var $907=HEAP32[(($906)>>2)];
 var $908=(($907+40)|0);
 var $909=HEAP32[(($908)>>2)];
 var $910=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$909]($899) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=269;break; } else { label=20;break; }
 case 269: 
 var $911=($898|0)>0;
 if($911){var $__we10881125=$__we1087;var $795=$829;label=231;break;}else{var $__we1086=$__we1087;label=271;break;}
 case 270: 
 var $913=(($901+1)|0);
 HEAP32[(($900)>>2)]=$913;
 label=269;break;
 case 271: 
 var $__we1086;
 var $914=HEAP32[(($__wn)>>2)];
 var $915=HEAP32[(($8)>>2)];
 var $916=($914|0)==($915|0);
 if($916){label=272;break;}else{var $__trailing_sign_1=$__trailing_sign_01226;var $921=$722;var $__gb_sroa_0_0_load10491064=$__gb_sroa_0_0_load10491065;var $920=$721;var $__gb_sroa_1_4_load10591077=$__gb_sroa_1_4_load10591073;var $__we1085=$__we1086;label=273;break;}
 case 272: 
 var $918=HEAP32[(($__err)>>2)];
 var $919=$918|4;
 HEAP32[(($__err)>>2)]=$919;
 var $_0914=0;var $1025=$721;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591073;label=308;break;
 case 273: 
 var $__we1085;
 var $__gb_sroa_1_4_load10591077;
 var $920;
 var $__gb_sroa_0_0_load10491064;
 var $921;
 var $__trailing_sign_1;
 var $922=((($__p_01228)+(1))|0);
 var $923=($922>>>0)<4;
 if($923){var $__we10841217=$__we1085;var $__gb_sroa_1_4_load105910781220=$__gb_sroa_1_4_load10591077;var $35=$920;var $__gb_sroa_0_0_load104910631223=$__gb_sroa_0_0_load10491064;var $34=$921;var $__trailing_sign_01226=$__trailing_sign_1;var $__p_01228=$922;label=3;break;}else{var $__gb_sroa_1_4_load10591078_lcssa=$__gb_sroa_1_4_load10591077;var $_lcssa=$920;var $__gb_sroa_0_0_load10491063_lcssa=$__gb_sroa_0_0_load10491064;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=274;break;}
 case 274: 
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load10491063_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load10591078_lcssa;
 var $924=($__trailing_sign_0_lcssa|0)==0;
 if($924){label=305;break;}else{label=275;break;}
 case 275: 
 var $925=$__trailing_sign_0_lcssa;
 var $926=$__trailing_sign_0_lcssa;
 var $927=(($925+1)|0);
 var $928=(($__trailing_sign_0_lcssa+8)|0);
 var $929=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;label=276;break;
 case 276: 
 var $__i_0;
 var $930=HEAP8[($926)];
 var $931=($930&255);
 var $932=$931&1;
 var $933=($932|0)==0;
 if($933){label=278;break;}else{label=277;break;}
 case 277: 
 var $935=HEAP32[(($929)>>2)];
 var $938=$935;label=279;break;
 case 278: 
 var $937=$931>>>1;
 var $938=$937;label=279;break;
 case 279: 
 var $938;
 var $939=($__i_0>>>0)<($938>>>0);
 if($939){label=280;break;}else{label=305;break;}
 case 280: 
 var $941=HEAP32[(($10)>>2)];
 var $942=($941|0)==0;
 if($942){var $957=0;label=286;break;}else{label=281;break;}
 case 281: 
 var $944=(($941+12)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=(($941+16)|0);
 var $947=HEAP32[(($946)>>2)];
 var $948=($945|0)==($947|0);
 if($948){label=282;break;}else{var $957=$941;label=286;break;}
 case 282: 
 var $950=$941;
 var $951=HEAP32[(($950)>>2)];
 var $952=(($951+36)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$953]($941) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=283;break; } else { label=18;break; }
 case 283: 
 var $955=($954|0)==-1;
 if($955){label=285;break;}else{label=284;break;}
 case 284: 
 var $_pre1315=HEAP32[(($10)>>2)];
 var $957=$_pre1315;label=286;break;
 case 285: 
 HEAP32[(($10)>>2)]=0;
 var $957=0;label=286;break;
 case 286: 
 var $957;
 var $958=($957|0)==0;
 var $959=HEAP32[(($11)>>2)];
 var $960=($959|0)==0;
 if($960){label=292;break;}else{label=287;break;}
 case 287: 
 var $962=(($959+12)|0);
 var $963=HEAP32[(($962)>>2)];
 var $964=(($959+16)|0);
 var $965=HEAP32[(($964)>>2)];
 var $966=($963|0)==($965|0);
 if($966){label=289;break;}else{label=288;break;}
 case 288: 
 if($958){label=294;break;}else{label=301;break;}
 case 289: 
 var $968=$959;
 var $969=HEAP32[(($968)>>2)];
 var $970=(($969+36)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$971]($959) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=290;break; } else { label=18;break; }
 case 290: 
 var $973=($972|0)==-1;
 if($973){label=291;break;}else{label=293;break;}
 case 291: 
 HEAP32[(($11)>>2)]=0;
 label=292;break;
 case 292: 
 if($958){label=301;break;}else{label=294;break;}
 case 293: 
 if($958){label=294;break;}else{label=301;break;}
 case 294: 
 var $975=HEAP32[(($10)>>2)];
 var $976=(($975+12)|0);
 var $977=HEAP32[(($976)>>2)];
 var $978=(($975+16)|0);
 var $979=HEAP32[(($978)>>2)];
 var $980=($977|0)==($979|0);
 if($980){label=295;break;}else{label=297;break;}
 case 295: 
 var $982=$975;
 var $983=HEAP32[(($982)>>2)];
 var $984=(($983+36)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$985]($975) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=18;break; }
 case 296: 
 var $extract_t=(($986)&255);
 var $_0935_off0=$extract_t;label=298;break;
 case 297: 
 var $988=HEAP8[($977)];
 var $_0935_off0=$988;label=298;break;
 case 298: 
 var $_0935_off0;
 var $989=HEAP8[($926)];
 var $990=$989&1;
 var $991=(($990<<24)>>24)==0;
 if($991){var $994=$927;label=300;break;}else{label=299;break;}
 case 299: 
 var $993=HEAP32[(($928)>>2)];
 var $994=$993;label=300;break;
 case 300: 
 var $994;
 var $995=(($994+$__i_0)|0);
 var $996=HEAP8[($995)];
 var $997=(($_0935_off0<<24)>>24)==(($996<<24)>>24);
 if($997){label=302;break;}else{label=301;break;}
 case 301: 
 var $999=HEAP32[(($__err)>>2)];
 var $1000=$999|4;
 HEAP32[(($__err)>>2)]=$1000;
 var $_0914=0;var $1025=$_lcssa;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591078_lcssa;label=308;break;
 case 302: 
 var $1002=((($__i_0)+(1))|0);
 var $1003=HEAP32[(($10)>>2)];
 var $1004=(($1003+12)|0);
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=(($1003+16)|0);
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=($1005|0)==($1007|0);
 if($1008){label=303;break;}else{label=304;break;}
 case 303: 
 var $1010=$1003;
 var $1011=HEAP32[(($1010)>>2)];
 var $1012=(($1011+40)|0);
 var $1013=HEAP32[(($1012)>>2)];
 var $1014=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1013]($1003) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1002;label=276;break; } else { label=18;break; }
 case 304: 
 var $1016=(($1005+1)|0);
 HEAP32[(($1004)>>2)]=$1016;
 var $__i_0=$1002;label=276;break;
 case 305: 
 var $1017=($_lcssa|0)==($__gb_sroa_0_0_load10491063_lcssa|0);
 if($1017){var $_0914=1;var $1025=$__gb_sroa_0_0_load10491063_lcssa;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591078_lcssa;label=308;break;}else{label=306;break;}
 case 306: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load10491063_lcssa,$__et);
 var $1019=HEAP32[(($__et)>>2)];
 var $1020=($1019|0)==0;
 if($1020){var $_0914=1;var $1025=$_lcssa;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591078_lcssa;label=308;break;}else{label=307;break;}
 case 307: 
 var $1022=HEAP32[(($__err)>>2)];
 var $1023=$1022|4;
 HEAP32[(($__err)>>2)]=$1023;
 var $_0914=0;var $1025=$_lcssa;var $__gb_sroa_1_4_load10591079=$__gb_sroa_1_4_load10591078_lcssa;label=308;break;
 case 308: 
 var $__gb_sroa_1_4_load10591079;
 var $1025;
 var $_0914;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1026=($1025|0)==0;
 if($1026){label=311;break;}else{label=309;break;}
 case 309: 
 var $1028=$1025;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10591079]($1028) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=311;break; } else { label=310;break; }
 case 310: 
 var $1030$0 = ___cxa_find_matching_catch(-1, -1,0); var $1030$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 311: 
 STACKTOP=sp;return $_0914;
 case 312: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($2,$msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($1,12760,(42));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $1=(sp)+(152);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=446;
 var $5=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((17944)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$9,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $13=HEAP32[((17948)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 if($35){label=10;break;}else{label=22;break;}
 case 10: 
 var $38=$__v;
 var $39=HEAP8[($38)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__v+8)|0);
 var $44=HEAP32[(($43)>>2)];
 HEAP8[($44)]=0;
 var $45=(($__v+4)|0);
 HEAP32[(($45)>>2)]=0;
 label=13;break;
 case 12: 
 var $47=$__v;
 var $48=(($47+1)|0);
 HEAP8[($48)]=0;
 HEAP8[($38)]=0;
 label=13;break;
 case 13: 
 var $49=HEAP8[($__neg)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 var $_pre114=$25;
 if($51){label=17;break;}else{label=14;break;}
 case 14: 
 var $53=HEAP32[(($_pre114)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($29,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=40;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 16: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $59=$57$1;
 HEAP32[(($3)>>2)]=0;
 var $133=$2;var $_0106117=$59;var $_0105119=$58;label=41;break;
 case 17: 
 var $60=HEAP32[(($_pre114)>>2)];
 var $61=(($60+28)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$62]($29,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $64=HEAP32[(($3)>>2)];
 var $65=HEAP32[(($__wn)>>2)];
 var $66=((($65)-(1))|0);
 var $__w_0=$64;label=19;break;
 case 19: 
 var $__w_0;
 var $68=($__w_0>>>0)<($66>>>0);
 if($68){label=20;break;}else{label=21;break;}
 case 20: 
 var $70=HEAP8[($__w_0)];
 var $71=(($70<<24)>>24)==(($63<<24)>>24);
 var $72=(($__w_0+1)|0);
 if($71){var $__w_0=$72;label=19;break;}else{label=21;break;}
 case 21: 
 var $74=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0,$65) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=40;break; }
 case 22: 
 var $76=(($__b)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==0;
 if($78){var $93=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $80=(($77+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($77+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=24;break;}else{var $93=$77;label=27;break;}
 case 24: 
 var $86=$77;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=40;break; }
 case 25: 
 var $91=($90|0)==-1;
 if($91){label=26;break;}else{var $93=$77;label=27;break;}
 case 26: 
 HEAP32[(($76)>>2)]=0;
 var $93=0;label=27;break;
 case 27: 
 var $93;
 var $94=($93|0)==0;
 var $95=($31|0)==0;
 if($95){label=33;break;}else{label=28;break;}
 case 28: 
 var $97=(($31+12)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($31+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($98|0)==($100|0);
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 if($94){label=36;break;}else{label=35;break;}
 case 30: 
 var $103=$31;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+36)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 var $108=($107|0)==-1;
 if($108){label=32;break;}else{label=34;break;}
 case 32: 
 HEAP32[(($30)>>2)]=0;
 label=33;break;
 case 33: 
 if($94){label=35;break;}else{label=36;break;}
 case 34: 
 var $110=($31|0)==0;
 var $tmp=$94^$110;
 if($tmp){label=36;break;}else{label=35;break;}
 case 35: 
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112|2;
 HEAP32[(($__err)>>2)]=$113;
 label=36;break;
 case 36: 
 var $114=(($agg_result)|0);
 HEAP32[(($114)>>2)]=$93;
 var $115=HEAP32[(($7)>>2)];
 var $116=(($115)|0);
 var $117=__ZNSt3__114__shared_count16__release_sharedEv($116);
 var $118=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $119=($118|0)==0;
 if($119){label=39;break;}else{label=37;break;}
 case 37: 
 var $121=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=38;break; }
 case 38: 
 var $123$0 = ___cxa_find_matching_catch(-1, -1,0); var $123$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 39: 
 STACKTOP=sp;return;
 case 40: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $128=HEAP32[(($7)>>2)];
 var $129=(($128)|0);
 var $130=__ZNSt3__114__shared_count16__release_sharedEv($129);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $131=($_pre|0)==0;
 if($131){var $_0106118=$127;var $_0105120=$126;label=43;break;}else{var $133=$_pre;var $_0106117=$127;var $_0105119=$126;label=41;break;}
 case 41: 
 var $_0105119;
 var $_0106117;
 var $133;
 var $134=HEAP32[(($4)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0106118=$_0106117;var $_0105120=$_0105119;label=43;break; } else { label=42;break; }
 case 42: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1,0); var $136$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 var $_0105120;
 var $_0106118;
 var $137$0=$_0105120;
 var $137$1=0;
 var $138$0=$137$0;
 var $138$1=$_0106118;
 ___resumeException($138$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=$__first;
 var $4=HEAP8[($2)];
 var $5=($4&255);
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $13=$10;label=4;break;
 case 3: 
 var $12=$5>>>1;
 var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14=$4&1;
 var $15=(($14<<24)>>24)==0;
 if($15){var $22=10;var $21=$4;label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&-2;
 var $phitmp=((($19)-(1))|0);
 var $20=(($18)&255);
 var $22=$phitmp;var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22;
 var $23=$__last;
 var $24=((($23)-($3))|0);
 var $25=($__last|0)==($__first|0);
 if($25){label=17;break;}else{label=7;break;}
 case 7: 
 var $27=((($22)-($13))|0);
 var $28=($27>>>0)<($24>>>0);
 if($28){label=8;break;}else{var $33=$21;label=9;break;}
 case 8: 
 var $30=((($13)+($24))|0);
 var $31=((($30)-($22))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$22,$31,$13,$13,0,0);
 var $_pre=HEAP8[($2)];
 var $33=$_pre;label=9;break;
 case 9: 
 var $33;
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=12;break;
 case 11: 
 var $40=(($1+1)|0);
 var $41=$40;label=12;break;
 case 12: 
 var $41;
 var $42=(($41+$13)|0);
 var $43=((($13)-($3))|0);
 var $scevgep=(($__last+$43)|0);
 var $scevgep71=$scevgep;
 var $_069=$__first;var $__p_070=$42;label=13;break;
 case 13: 
 var $__p_070;
 var $_069;
 var $45=HEAP8[($_069)];
 HEAP8[($__p_070)]=$45;
 var $46=(($__p_070+1)|0);
 var $47=(($_069+1)|0);
 var $48=($47|0)==($__last|0);
 if($48){label=14;break;}else{var $_069=$47;var $__p_070=$46;label=13;break;}
 case 14: 
 var $scevgep72=(($41+$scevgep71)|0);
 HEAP8[($scevgep72)]=0;
 var $50=((($13)+($24))|0);
 var $51=HEAP8[($2)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=16;break;}else{label=15;break;}
 case 15: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=17;break;
 case 16: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[($2)]=$58;
 label=17;break;
 case 17: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i513=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$4;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$6;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=$8;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=$11;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=$13;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast512=$1;
 var $20=(($__loc)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$__p_i_i_i;
 var $23=HEAP32[((18416)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18416;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18416,$22,270);
 label=4;break;
 case 4: 
 var $26=HEAP32[((18420)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($21+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($21+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 ___cxa_throw($40,12744,(374));
 throw "Reached an unreachable!";
 case 7: 
 var $42=$38;
 var $43=$38;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+44)|0);
 var $46=HEAP32[(($45)>>2)];
 FUNCTION_TABLE[$46]($tmpcast512,$42);
 var $47=$__pat;
 var $48=HEAP32[(($1)>>2)];
 tempBigInt=$48;HEAP8[($47)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(3))|0)]=tempBigInt&0xff;
 var $49=$38;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+32)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($2,$42);
 var $53=$__nsn;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=9;break;}else{label=8;break;}
 case 8: 
 var $58=(($__nsn+8)|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP8[($59)]=0;
 var $60=(($__nsn+4)|0);
 HEAP32[(($60)>>2)]=0;
 label=10;break;
 case 9: 
 var $62=$__nsn;
 var $63=(($62+1)|0);
 HEAP8[($63)]=0;
 HEAP8[($53)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $66=HEAP32[(($49)>>2)];
 var $67=(($66+28)|0);
 var $68=HEAP32[(($67)>>2)];
 FUNCTION_TABLE[$68]($4,$42);
 var $69=$__psn;
 var $70=HEAP8[($69)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=14;break;}else{label=13;break;}
 case 13: 
 var $74=(($__psn+8)|0);
 var $75=HEAP32[(($74)>>2)];
 HEAP8[($75)]=0;
 var $76=(($__psn+4)|0);
 HEAP32[(($76)>>2)]=0;
 label=15;break;
 case 14: 
 var $78=$__psn;
 var $79=(($78+1)|0);
 HEAP8[($79)]=0;
 HEAP8[($69)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1,0); var $81$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $82=$38;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=FUNCTION_TABLE[$85]($42);
 HEAP8[($__dp)]=$86;
 var $87=HEAP32[(($82)>>2)];
 var $88=(($87+16)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=FUNCTION_TABLE[$89]($42);
 HEAP8[($__ts)]=$90;
 var $91=HEAP32[(($49)>>2)];
 var $92=(($91+20)|0);
 var $93=HEAP32[(($92)>>2)];
 FUNCTION_TABLE[$93]($6,$42);
 var $94=$__grp;
 var $95=HEAP8[($94)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){label=19;break;}else{label=18;break;}
 case 18: 
 var $99=(($__grp+8)|0);
 var $100=HEAP32[(($99)>>2)];
 HEAP8[($100)]=0;
 var $101=(($__grp+4)|0);
 HEAP32[(($101)>>2)]=0;
 label=20;break;
 case 19: 
 var $103=$__grp;
 var $104=(($103+1)|0);
 HEAP8[($104)]=0;
 HEAP8[($94)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $106$0 = ___cxa_find_matching_catch(-1, -1,0); var $106$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($94)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $107=HEAP32[(($49)>>2)];
 var $108=(($107+24)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($8,$42);
 var $110=$__sym;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=24;break;}else{label=23;break;}
 case 23: 
 var $115=(($__sym+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP8[($116)]=0;
 var $117=(($__sym+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=25;break;
 case 24: 
 var $119=$__sym;
 var $120=(($119+1)|0);
 HEAP8[($120)]=0;
 HEAP8[($110)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
 var $123=$38;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=FUNCTION_TABLE[$126]($42);
 var $storemerge=$127;label=54;break;
 case 28: 
 var $tmpcast=$10;
 var $129=(($__loc)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$__p_i_i_i513;
 var $132=HEAP32[((18424)>>2)];
 var $133=($132|0)==-1;
 if($133){label=30;break;}else{label=29;break;}
 case 29: 
 var $_sroa_016_0__idx_i_i514=(($__p_i_i_i513)|0);
 HEAP32[(($_sroa_016_0__idx_i_i514)>>2)]=18424;
 var $_sroa_117_4__idx18_i_i515=(($__p_i_i_i513+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i515)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i516=(($__p_i_i_i513+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i516)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18424,$131,270);
 label=30;break;
 case 30: 
 var $135=HEAP32[((18428)>>2)];
 var $136=((($135)-(1))|0);
 var $137=(($130+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($130+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=$138;
 var $142=$140;
 var $143=((($141)-($142))|0);
 var $144=$143>>2;
 var $145=($144>>>0)>($136>>>0);
 if($145){label=31;break;}else{label=32;break;}
 case 31: 
 var $146=(($140+($136<<2))|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=32;break;}else{label=33;break;}
 case 32: 
 var $149=___cxa_allocate_exception(4);
 var $150=$149;
 __ZNSt8bad_castC2Ev($150);
 ___cxa_throw($149,12744,(374));
 throw "Reached an unreachable!";
 case 33: 
 var $151=$147;
 var $152=$147;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+44)|0);
 var $155=HEAP32[(($154)>>2)];
 FUNCTION_TABLE[$155]($tmpcast,$151);
 var $156=$__pat;
 var $157=HEAP32[(($10)>>2)];
 tempBigInt=$157;HEAP8[($156)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($156)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($156)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($156)+(3))|0)]=tempBigInt&0xff;
 var $158=$147;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+32)|0);
 var $161=HEAP32[(($160)>>2)];
 FUNCTION_TABLE[$161]($11,$151);
 var $162=$__nsn;
 var $163=HEAP8[($162)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=35;break;}else{label=34;break;}
 case 34: 
 var $167=(($__nsn+8)|0);
 var $168=HEAP32[(($167)>>2)];
 HEAP8[($168)]=0;
 var $169=(($__nsn+4)|0);
 HEAP32[(($169)>>2)]=0;
 label=36;break;
 case 35: 
 var $171=$__nsn;
 var $172=(($171+1)|0);
 HEAP8[($172)]=0;
 HEAP8[($162)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $174$0 = ___cxa_find_matching_catch(-1, -1,0); var $174$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($162)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($162)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($162)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
 var $175=HEAP32[(($158)>>2)];
 var $176=(($175+28)|0);
 var $177=HEAP32[(($176)>>2)];
 FUNCTION_TABLE[$177]($13,$151);
 var $178=$__psn;
 var $179=HEAP8[($178)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=40;break;}else{label=39;break;}
 case 39: 
 var $183=(($__psn+8)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP8[($184)]=0;
 var $185=(($__psn+4)|0);
 HEAP32[(($185)>>2)]=0;
 label=41;break;
 case 40: 
 var $187=$__psn;
 var $188=(($187+1)|0);
 HEAP8[($188)]=0;
 HEAP8[($178)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1,0); var $190$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($178)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
 var $191=$147;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=FUNCTION_TABLE[$194]($151);
 HEAP8[($__dp)]=$195;
 var $196=HEAP32[(($191)>>2)];
 var $197=(($196+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=FUNCTION_TABLE[$198]($151);
 HEAP8[($__ts)]=$199;
 var $200=HEAP32[(($158)>>2)];
 var $201=(($200+20)|0);
 var $202=HEAP32[(($201)>>2)];
 FUNCTION_TABLE[$202]($15,$151);
 var $203=$__grp;
 var $204=HEAP8[($203)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){label=45;break;}else{label=44;break;}
 case 44: 
 var $208=(($__grp+8)|0);
 var $209=HEAP32[(($208)>>2)];
 HEAP8[($209)]=0;
 var $210=(($__grp+4)|0);
 HEAP32[(($210)>>2)]=0;
 label=46;break;
 case 45: 
 var $212=$__grp;
 var $213=(($212+1)|0);
 HEAP8[($213)]=0;
 HEAP8[($203)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $215$0 = ___cxa_find_matching_catch(-1, -1,0); var $215$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($203)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($203)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($203)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 var $216=HEAP32[(($158)>>2)];
 var $217=(($216+24)|0);
 var $218=HEAP32[(($217)>>2)];
 FUNCTION_TABLE[$218]($17,$151);
 var $219=$__sym;
 var $220=HEAP8[($219)];
 var $221=$220&1;
 var $222=(($221<<24)>>24)==0;
 if($222){label=50;break;}else{label=49;break;}
 case 49: 
 var $224=(($__sym+8)|0);
 var $225=HEAP32[(($224)>>2)];
 HEAP8[($225)]=0;
 var $226=(($__sym+4)|0);
 HEAP32[(($226)>>2)]=0;
 label=51;break;
 case 50: 
 var $228=$__sym;
 var $229=(($228+1)|0);
 HEAP8[($229)]=0;
 HEAP8[($219)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $231$0 = ___cxa_find_matching_catch(-1, -1,0); var $231$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($219)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($219)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($219)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $232=$147;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+36)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=FUNCTION_TABLE[$235]($151);
 var $storemerge=$236;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $__atoms=(sp)+(456);
 var $__nbuf=(sp)+(496);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=446;
 var $5=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((17936)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$9,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $13=HEAP32[((17940)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($35){label=10;break;}else{label=34;break;}
 case 10: 
 var $38=(($__atoms)|0);
 var $39=$25;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+48)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($29,6216,6226,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $44=(($__nbuf)|0);
 var $45=HEAP32[(($__wn)>>2)];
 var $46=HEAP32[(($3)>>2)];
 var $47=$45;
 var $48=$46;
 var $49=((($47)-($48))|0);
 var $50=($49|0)>392;
 if($50){label=12;break;}else{var $__nc_0=$44;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $51=$49>>2;
 var $52=((($51)+(2))|0);
 var $53=_malloc($52);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{var $__nc_0=$53;var $__h_sroa_0_1=$53;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 var $58=$56$1;
 HEAP32[(($3)>>2)]=0;
 var $168=$2;var $_1147169=$57;var $_1171=$58;label=54;break;
 case 15: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 var $_0145=$62;var $_0146=$61;label=53;break;
 case 16: 
 var $__h_sroa_0_0;
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $eh_lpad_body$1=$64$1;var $eh_lpad_body$0=$64$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $65=$eh_lpad_body$0;
 var $66=$eh_lpad_body$1;
 var $67=($__h_sroa_0_0_lpad_body|0)==0;
 if($67){var $_0145=$66;var $_0146=$65;label=53;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $_0145=$66;var $_0146=$65;label=53;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $70=HEAP8[($__neg)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $74=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$74;label=21;break;
 case 21: 
 var $__nc_1;
 var $76=($46>>>0)<($45>>>0);
 if($76){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $77=(($__atoms+40)|0);
 var $78=$__atoms;
 var $__nc_2166=$__nc_1;var $__w_0167=$46;label=23;break;
 case 23: 
 var $__w_0167;
 var $__nc_2166;
 var $_0=$38;label=24;break;
 case 24: 
 var $_0;
 var $81=($_0|0)==($77|0);
 if($81){var $_0_lcssa=$77;label=26;break;}else{label=25;break;}
 case 25: 
 var $83=HEAP32[(($_0)>>2)];
 var $84=HEAP32[(($__w_0167)>>2)];
 var $85=($83|0)==($84|0);
 var $86=(($_0+4)|0);
 if($85){var $_0_lcssa=$_0;label=26;break;}else{var $_0=$86;label=24;break;}
 case 26: 
 var $_0_lcssa;
 var $87=$_0_lcssa;
 var $88=((($87)-($78))|0);
 var $89=$88>>2;
 var $90=((6216+$89)|0);
 var $91=HEAP8[($90)];
 HEAP8[($__nc_2166)]=$91;
 var $92=(($__w_0167+4)|0);
 var $93=(($__nc_2166+1)|0);
 var $94=HEAP32[(($__wn)>>2)];
 var $95=($92>>>0)<($94>>>0);
 if($95){var $__nc_2166=$93;var $__w_0167=$92;label=23;break;}else{var $__nc_2_lcssa=$93;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $96=_sscanf($44,5152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $97=($96|0)==1;
 if($97){label=32;break;}else{label=28;break;}
 case 28: 
 var $99=___cxa_allocate_exception(8);
 var $100=$99;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($100,5048) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,12760,(42)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $103$0 = ___cxa_find_matching_catch(-1, -1); var $103$1 = tempRet0;
 ___cxa_free_exception($99);
 var $eh_lpad_body$1=$103$1;var $eh_lpad_body$0=$103$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $105=($__h_sroa_0_1|0)==0;
 if($105){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){var $126=0;label=40;break;}else{label=35;break;}
 case 35: 
 var $111=(($108+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($108+16)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($112|0)==($114|0);
 if($115){label=36;break;}else{label=37;break;}
 case 36: 
 var $117=$108;
 var $118=HEAP32[(($117)>>2)];
 var $119=(($118+36)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0148=$121;label=38;break; } else { label=15;break; }
 case 37: 
 var $123=HEAP32[(($112)>>2)];
 var $_0148=$123;label=38;break;
 case 38: 
 var $_0148;
 var $124=($_0148|0)==-1;
 if($124){label=39;break;}else{var $126=$108;label=40;break;}
 case 39: 
 HEAP32[(($107)>>2)]=0;
 var $126=0;label=40;break;
 case 40: 
 var $126;
 var $127=($126|0)==0;
 var $128=HEAP32[(($30)>>2)];
 var $129=($128|0)==0;
 if($129){label=46;break;}else{label=41;break;}
 case 41: 
 var $131=(($128+12)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($128+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($132|0)==($134|0);
 if($135){label=42;break;}else{label=43;break;}
 case 42: 
 var $137=$128;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$140]($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0144=$141;label=44;break; } else { label=15;break; }
 case 43: 
 var $143=HEAP32[(($132)>>2)];
 var $_0144=$143;label=44;break;
 case 44: 
 var $_0144;
 var $144=($_0144|0)==-1;
 if($144){label=45;break;}else{label=47;break;}
 case 45: 
 HEAP32[(($30)>>2)]=0;
 label=46;break;
 case 46: 
 if($127){label=48;break;}else{label=49;break;}
 case 47: 
 var $146=($128|0)==0;
 var $tmp=$127^$146;
 if($tmp){label=49;break;}else{label=48;break;}
 case 48: 
 var $148=HEAP32[(($__err)>>2)];
 var $149=$148|2;
 HEAP32[(($__err)>>2)]=$149;
 label=49;break;
 case 49: 
 var $151=(($agg_result)|0);
 HEAP32[(($151)>>2)]=$126;
 var $152=HEAP32[(($7)>>2)];
 var $153=(($152)|0);
 var $154=__ZNSt3__114__shared_count16__release_sharedEv($153);
 var $155=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $156=($155|0)==0;
 if($156){label=52;break;}else{label=50;break;}
 case 50: 
 var $158=HEAP32[(($4)>>2)];
 var $159=$155;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=51;break; }
 case 51: 
 var $161$0 = ___cxa_find_matching_catch(-1, -1,0); var $161$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 var $_0146;
 var $_0145;
 var $163=HEAP32[(($7)>>2)];
 var $164=(($163)|0);
 var $165=__ZNSt3__114__shared_count16__release_sharedEv($164);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $166=($_pre|0)==0;
 if($166){var $_1147170=$_0146;var $_1172=$_0145;label=56;break;}else{var $168=$_pre;var $_1147169=$_0146;var $_1171=$_0145;label=54;break;}
 case 54: 
 var $_1171;
 var $_1147169;
 var $168;
 var $169=HEAP32[(($4)>>2)];
 var $170=$168;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_1147170=$_1147169;var $_1172=$_1171;label=56;break; } else { label=55;break; }
 case 55: 
 var $172$0 = ___cxa_find_matching_catch(-1, -1,0); var $172$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 56: 
 var $_1172;
 var $_1147170;
 var $173$0=$_1147170;
 var $173$1=0;
 var $174$0=$173$0;
 var $174$1=$_1172;
 ___resumeException($174$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $__gbuf=(sp)+(8);
 var $__pat=(sp)+(408);
 var $__dp=(sp)+(416);
 var $__ts=(sp)+(424);
 var $__grp=(sp)+(432);
 var $1=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=$__we;
 var $2=(($__gbuf)|0);
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $3=$__sym;
 var $4=$__psn;
 var $5=$__nsn;
 var $6=$__spaces;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=26;break; }
 case 2: 
 var $8=(($__gbuf+400)|0);
 var $9=(($__wb)|0);
 var $10=HEAP32[(($9)>>2)];
 HEAP32[(($__wn)>>2)]=$10;
 var $11=(($__b)|0);
 var $12=(($__e)|0);
 var $13=$__ct;
 var $14=(($__nsn+4)|0);
 var $15=(($__nsn+8)|0);
 var $16=(($__psn+4)|0);
 var $17=(($__psn+8)|0);
 var $18=$__flags&512;
 var $19=($18|0)!=0;
 var $20=(($__sym+4)|0);
 var $21=(($__sym+8)|0);
 var $22=(($__spaces+4)|0);
 var $23=(($__spaces+8)|0);
 var $24=(($__pat+3)|0);
 var $25=(($__grp+4)|0);
 var $__gb_sroa_1_4_load100910251134=446;var $27=$2;var $__gb_sroa_0_0_load99910101137=$2;var $26=$8;var $__trailing_sign_01140=0;var $__p_01142=0;label=3;break;
 case 3: 
 var $__p_01142;
 var $__trailing_sign_01140;
 var $26;
 var $__gb_sroa_0_0_load99910101137;
 var $27;
 var $__gb_sroa_1_4_load100910251134;
 var $28=HEAP32[(($11)>>2)];
 var $29=($28|0)==0;
 if($29){var $46=1;label=10;break;}else{label=4;break;}
 case 4: 
 var $31=(($28+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($28+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=$28;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0926=$41;label=7;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 6: 
 var $43=HEAP32[(($32)>>2)];
 var $_0926=$43;label=7;break;
 case 7: 
 var $_0926;
 var $44=($_0926|0)==-1;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 var $_pre1202=HEAP32[(($11)>>2)];
 var $phitmp=($_pre1202|0)==0;
 var $46=$phitmp;label=10;break;
 case 9: 
 HEAP32[(($11)>>2)]=0;
 var $46=1;label=10;break;
 case 10: 
 var $46;
 var $47=HEAP32[(($12)>>2)];
 var $48=($47|0)==0;
 if($48){label=16;break;}else{label=11;break;}
 case 11: 
 var $50=(($47+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($47+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=$47;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0925=$60;label=14;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 13: 
 var $62=HEAP32[(($51)>>2)];
 var $_0925=$62;label=14;break;
 case 14: 
 var $_0925;
 var $63=($_0925|0)==-1;
 if($63){label=15;break;}else{label=17;break;}
 case 15: 
 HEAP32[(($12)>>2)]=0;
 label=16;break;
 case 16: 
 if($46){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}else{var $68=0;label=18;break;}
 case 17: 
 var $65=($47|0)==0;
 var $66=$46^$65;
 if($66){var $68=$47;label=18;break;}else{var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}
 case 18: 
 var $68;
 var $69=(($__pat+$__p_01142)|0);
 var $70=HEAP8[($69)];
 var $71=(($70<<24)>>24);
 switch(($71|0)){case 2:{ label=107;break;}case 4:{ var $__ng_0=0;var $567=$26;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load99910101137;var $566=$27;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load100910251134;label=151;break;}case 1:{ label=30;break;}case 0:{ label=41;break;}case 3:{ label=66;break;}default:{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}}break;
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $72=$_lcssa;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091025_lcssa;label=27;break;
 case 20: 
 var $__gb_sroa_1_4_load10091018_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit1037$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1037$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1037$1;var $lpad_phi$0=$lpad_loopexit1037$0;var $72=$_ph_ph;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091018_ph_ph;label=27;break;
 case 21: 
 var $lpad_loopexit1051$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1051$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1051$1;var $lpad_phi$0=$lpad_loopexit1051$0;var $72=$721;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091020;label=27;break;
 case 22: 
 var $lpad_loopexit1053$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1053$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1053$1;var $lpad_phi$0=$lpad_loopexit1053$0;var $72=$27;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=27;break;
 case 23: 
 var $lpad_loopexit1060$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1060$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1060$1;var $lpad_phi$0=$lpad_loopexit1060$0;var $72=$27;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=27;break;
 case 24: 
 var $lpad_loopexit1064$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1064$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1064$1;var $lpad_phi$0=$lpad_loopexit1064$0;var $72=$27;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=27;break;
 case 25: 
 var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph;
 var $_ph_ph1036_ph_ph_ph_ph_ph;
 var $lpad_loopexit1067$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1067$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1067$1;var $lpad_phi$0=$lpad_loopexit1067$0;var $72=$_ph_ph1036_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph;label=27;break;
 case 26: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $72=$2;var $__gb_sroa_1_4_load10091018=446;label=27;break;
 case 27: 
 var $__gb_sroa_1_4_load10091018;
 var $72;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $73=($72|0)==0;
 if($73){label=294;break;}else{label=28;break;}
 case 28: 
 var $75=$72;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10091018]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=29;break; }
 case 29: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1,0); var $77$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 var $cond=($__p_01142|0)==3;
 if($cond){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}else{label=31;break;}
 case 31: 
 var $80=HEAP32[(($11)>>2)];
 var $81=(($80+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($80+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($82|0)==($84|0);
 if($85){label=32;break;}else{label=33;break;}
 case 32: 
 var $87=$80;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0924=$91;label=34;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 33: 
 var $93=HEAP32[(($82)>>2)];
 var $_0924=$93;label=34;break;
 case 34: 
 var $_0924;
 var $94=HEAP32[(($13)>>2)];
 var $95=(($94+12)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,8192,$_0924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 35: 
 if($97){label=36;break;}else{label=40;break;}
 case 36: 
 var $99=HEAP32[(($11)>>2)];
 var $100=(($99+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($99+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=37;break;}else{label=38;break;}
 case 37: 
 var $106=$99;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+40)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$109]($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0923=$110;label=39;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 38: 
 var $112=(($101+4)|0);
 HEAP32[(($100)>>2)]=$112;
 var $113=HEAP32[(($101)>>2)];
 var $_0923=$113;label=39;break;
 case 39: 
 var $_0923;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0923) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 40: 
 var $115=HEAP32[(($__err)>>2)];
 var $116=$115|4;
 HEAP32[(($__err)>>2)]=$116;
 var $_0909=0;var $1014=$27;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=290;break;
 case 41: 
 var $118=($__p_01142|0)==3;
 if($118){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$27;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;label=256;break;}else{var $119=$68;label=42;break;}
 case 42: 
 var $119;
 var $120=HEAP32[(($11)>>2)];
 var $121=($120|0)==0;
 if($121){var $138=1;label=49;break;}else{label=43;break;}
 case 43: 
 var $123=(($120+12)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(($120+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($124|0)==($126|0);
 if($127){label=44;break;}else{label=45;break;}
 case 44: 
 var $129=$120;
 var $130=HEAP32[(($129)>>2)];
 var $131=(($130+36)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$132]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0922=$133;label=46;break; } else { label=24;break; }
 case 45: 
 var $135=HEAP32[(($124)>>2)];
 var $_0922=$135;label=46;break;
 case 46: 
 var $_0922;
 var $136=($_0922|0)==-1;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre1203=HEAP32[(($11)>>2)];
 var $phitmp1220=($_pre1203|0)==0;
 var $138=$phitmp1220;label=49;break;
 case 48: 
 HEAP32[(($11)>>2)]=0;
 var $138=1;label=49;break;
 case 49: 
 var $138;
 var $139=($119|0)==0;
 if($139){label=55;break;}else{label=50;break;}
 case 50: 
 var $141=(($119+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($119+16)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($142|0)==($144|0);
 if($145){label=51;break;}else{label=52;break;}
 case 51: 
 var $147=$119;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+36)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0921=$151;label=53;break; } else { label=24;break; }
 case 52: 
 var $153=HEAP32[(($142)>>2)];
 var $_0921=$153;label=53;break;
 case 53: 
 var $_0921;
 var $154=($_0921|0)==-1;
 if($154){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($12)>>2)]=0;
 label=55;break;
 case 55: 
 if($138){var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}else{var $159=0;label=57;break;}
 case 56: 
 var $156=($119|0)==0;
 var $157=$138^$156;
 if($157){var $159=$119;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 57: 
 var $159;
 var $160=HEAP32[(($11)>>2)];
 var $161=(($160+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($160+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=58;break;}else{label=59;break;}
 case 58: 
 var $167=$160;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0920=$171;label=60;break; } else { label=24;break; }
 case 59: 
 var $173=HEAP32[(($162)>>2)];
 var $_0920=$173;label=60;break;
 case 60: 
 var $_0920;
 var $174=HEAP32[(($13)>>2)];
 var $175=(($174+12)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($__ct,8192,$_0920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=24;break; }
 case 61: 
 if($177){label=62;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 62: 
 var $179=HEAP32[(($11)>>2)];
 var $180=(($179+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($179+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=63;break;}else{label=64;break;}
 case 63: 
 var $186=$179;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+40)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0919=$190;label=65;break; } else { label=24;break; }
 case 64: 
 var $192=(($181+4)|0);
 HEAP32[(($180)>>2)]=$192;
 var $193=HEAP32[(($181)>>2)];
 var $_0919=$193;label=65;break;
 case 65: 
 var $_0919;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0919) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $119=$159;label=42;break; } else { label=24;break; }
 case 66: 
 var $194=HEAP8[($4)];
 var $195=($194&255);
 var $196=$195&1;
 var $197=($196|0)==0;
 var $198=HEAP32[(($16)>>2)];
 var $199=$195>>>1;
 var $200=$197?$199:$198;
 var $201=HEAP8[($5)];
 var $202=($201&255);
 var $203=$202&1;
 var $204=($203|0)==0;
 var $205=HEAP32[(($14)>>2)];
 var $206=$202>>>1;
 var $207=$204?$206:$205;
 var $208=(((-$207))|0);
 var $209=($200|0)==($208|0);
 if($209){var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}else{label=67;break;}
 case 67: 
 var $210=HEAP32[(($16)>>2)];
 var $211=$195>>>1;
 var $212=$197?$211:$210;
 var $213=($212|0)==0;
 if($213){label=69;break;}else{label=68;break;}
 case 68: 
 var $214=HEAP32[(($14)>>2)];
 var $215=$202>>>1;
 var $216=$204?$215:$214;
 var $217=($216|0)==0;
 if($217){label=69;break;}else{label=89;break;}
 case 69: 
 var $218=HEAP32[(($16)>>2)];
 var $219=$195>>>1;
 var $220=$197?$219:$218;
 var $221=($220|0)==0;
 var $222=HEAP32[(($11)>>2)];
 var $223=(($222+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($222+16)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($224|0)==($226|0);
 if($221){label=80;break;}else{label=70;break;}
 case 70: 
 if($227){label=71;break;}else{label=73;break;}
 case 71: 
 var $230=$222;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+36)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$233]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 72: 
 var $_pre1205=HEAP8[($4)];
 var $_0916=$234;var $237=$_pre1205;label=74;break;
 case 73: 
 var $236=HEAP32[(($224)>>2)];
 var $_0916=$236;var $237=$194;label=74;break;
 case 74: 
 var $237;
 var $_0916;
 var $238=$237&1;
 var $239=(($238<<24)>>24)==0;
 var $240=HEAP32[(($17)>>2)];
 var $_=$239?$16:$240;
 var $241=HEAP32[(($_)>>2)];
 var $242=($_0916|0)==($241|0);
 if($242){label=75;break;}else{label=79;break;}
 case 75: 
 var $244=HEAP32[(($11)>>2)];
 var $245=(($244+12)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($244+16)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($246|0)==($248|0);
 if($249){label=76;break;}else{label=77;break;}
 case 76: 
 var $251=$244;
 var $252=HEAP32[(($251)>>2)];
 var $253=(($252+40)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$254]($244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 77: 
 var $257=(($246+4)|0);
 HEAP32[(($245)>>2)]=$257;
 label=78;break;
 case 78: 
 var $258=HEAP8[($4)];
 var $259=($258&255);
 var $260=$259&1;
 var $261=($260|0)==0;
 var $262=HEAP32[(($16)>>2)];
 var $263=$259>>>1;
 var $264=$261?$263:$262;
 var $265=($264>>>0)>1;
 var $__psn___trailing_sign_0=$265?$__psn:$__trailing_sign_01140;
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 79: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 80: 
 if($227){label=81;break;}else{label=83;break;}
 case 81: 
 var $269=$222;
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+36)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$272]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 82: 
 var $_pre1204=HEAP8[($5)];
 var $_0912=$273;var $276=$_pre1204;label=84;break;
 case 83: 
 var $275=HEAP32[(($224)>>2)];
 var $_0912=$275;var $276=$201;label=84;break;
 case 84: 
 var $276;
 var $_0912;
 var $277=$276&1;
 var $278=(($277<<24)>>24)==0;
 var $279=HEAP32[(($15)>>2)];
 var $_1224=$278?$14:$279;
 var $280=HEAP32[(($_1224)>>2)];
 var $281=($_0912|0)==($280|0);
 if($281){label=85;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 85: 
 var $283=HEAP32[(($11)>>2)];
 var $284=(($283+12)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($283+16)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=($285|0)==($287|0);
 if($288){label=86;break;}else{label=87;break;}
 case 86: 
 var $290=$283;
 var $291=HEAP32[(($290)>>2)];
 var $292=(($291+40)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$293]($283) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 87: 
 var $296=(($285+4)|0);
 HEAP32[(($284)>>2)]=$296;
 label=88;break;
 case 88: 
 HEAP8[($__neg)]=1;
 var $297=HEAP8[($5)];
 var $298=($297&255);
 var $299=$298&1;
 var $300=($299|0)==0;
 var $301=HEAP32[(($14)>>2)];
 var $302=$298>>>1;
 var $303=$300?$302:$301;
 var $304=($303>>>0)>1;
 var $__nsn___trailing_sign_0=$304?$__nsn:$__trailing_sign_01140;
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 89: 
 var $306=HEAP32[(($11)>>2)];
 var $307=(($306+12)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=(($306+16)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=($308|0)==($310|0);
 if($311){label=90;break;}else{label=92;break;}
 case 90: 
 var $313=$306;
 var $314=HEAP32[(($313)>>2)];
 var $315=(($314+36)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$316]($306) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 91: 
 var $_pre1206=HEAP8[($4)];
 var $_0907=$317;var $320=$_pre1206;label=93;break;
 case 92: 
 var $319=HEAP32[(($308)>>2)];
 var $_0907=$319;var $320=$194;label=93;break;
 case 93: 
 var $320;
 var $_0907;
 var $321=$320&1;
 var $322=(($321<<24)>>24)==0;
 var $323=HEAP32[(($17)>>2)];
 var $_1225=$322?$16:$323;
 var $324=HEAP32[(($_1225)>>2)];
 var $325=($_0907|0)==($324|0);
 var $326=HEAP32[(($11)>>2)];
 var $327=(($326+12)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=(($326+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($328|0)==($330|0);
 if($325){label=94;break;}else{label=98;break;}
 case 94: 
 if($331){label=95;break;}else{label=96;break;}
 case 95: 
 var $334=$326;
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+40)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$337]($326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 96: 
 var $340=(($328+4)|0);
 HEAP32[(($327)>>2)]=$340;
 label=97;break;
 case 97: 
 var $341=HEAP8[($4)];
 var $342=($341&255);
 var $343=$342&1;
 var $344=($343|0)==0;
 var $345=HEAP32[(($16)>>2)];
 var $346=$342>>>1;
 var $347=$344?$346:$345;
 var $348=($347>>>0)>1;
 var $__psn___trailing_sign_0970=$348?$__psn:$__trailing_sign_01140;
 var $__trailing_sign_1=$__psn___trailing_sign_0970;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 98: 
 if($331){label=99;break;}else{label=100;break;}
 case 99: 
 var $351=$326;
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352+36)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$354]($326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0903=$355;label=101;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 100: 
 var $357=HEAP32[(($328)>>2)];
 var $_0903=$357;label=101;break;
 case 101: 
 var $_0903;
 var $358=HEAP8[($5)];
 var $359=$358&1;
 var $360=(($359<<24)>>24)==0;
 var $361=HEAP32[(($15)>>2)];
 var $_1226=$360?$14:$361;
 var $362=HEAP32[(($_1226)>>2)];
 var $363=($_0903|0)==($362|0);
 if($363){label=102;break;}else{label=106;break;}
 case 102: 
 var $365=HEAP32[(($11)>>2)];
 var $366=(($365+12)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($365+16)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=($367|0)==($369|0);
 if($370){label=103;break;}else{label=104;break;}
 case 103: 
 var $372=$365;
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373+40)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$375]($365) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$27;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=25;break; }
 case 104: 
 var $378=(($367+4)|0);
 HEAP32[(($366)>>2)]=$378;
 label=105;break;
 case 105: 
 HEAP8[($__neg)]=1;
 var $379=HEAP8[($5)];
 var $380=($379&255);
 var $381=$380&1;
 var $382=($381|0)==0;
 var $383=HEAP32[(($14)>>2)];
 var $384=$380>>>1;
 var $385=$382?$384:$383;
 var $386=($385>>>0)>1;
 var $__nsn___trailing_sign_0971=$386?$__nsn:$__trailing_sign_01140;
 var $__trailing_sign_1=$__nsn___trailing_sign_0971;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;
 case 106: 
 var $388=HEAP32[(($__err)>>2)];
 var $389=$388|4;
 HEAP32[(($__err)>>2)]=$389;
 var $_0909=0;var $1014=$27;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=290;break;
 case 107: 
 var $391=($__trailing_sign_01140|0)!=0;
 var $392=($__p_01142>>>0)<2;
 var $or_cond=$391|$392;
 if($or_cond){label=111;break;}else{label=108;break;}
 case 108: 
 var $394=($__p_01142|0)==2;
 if($394){label=109;break;}else{var $399=0;label=110;break;}
 case 109: 
 var $396=HEAP8[($24)];
 var $397=(($396<<24)>>24)!=0;
 var $399=$397;label=110;break;
 case 110: 
 var $399;
 var $brmerge=$19|$399;
 if($brmerge){label=111;break;}else{var $__trailing_sign_1=0;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 111: 
 var $400=HEAP8[($3)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 var $403=HEAP32[(($21)>>2)];
 var $_1227=$402?$20:$403;
 var $404=($__p_01142|0)==0;
 if($404){var $__sym_curr_char_sroa_0_0=$_1227;var $466=$400;var $465=$68;label=124;break;}else{label=112;break;}
 case 112: 
 var $406=((($__p_01142)-(1))|0);
 var $407=(($__pat+$406)|0);
 var $408=HEAP8[($407)];
 var $switch=($408&255)<2;
 if($switch){var $__sym_space_end_sroa_0_0=$_1227;var $409=$400;label=113;break;}else{var $__sym_curr_char_sroa_0_0=$_1227;var $466=$400;var $465=$68;label=124;break;}
 case 113: 
 var $409;
 var $__sym_space_end_sroa_0_0;
 var $410=$409&1;
 var $411=(($410<<24)>>24)==0;
 var $412=HEAP32[(($21)>>2)];
 var $_1228=$411?$20:$412;
 var $413=($409&255);
 var $414=$413&1;
 var $415=($414|0)==0;
 var $416=HEAP32[(($20)>>2)];
 var $417=$413>>>1;
 var $418=$415?$417:$416;
 var $419=(($_1228+($418<<2))|0);
 var $420=($__sym_space_end_sroa_0_0|0)==($419|0);
 if($420){var $428=$409;label=118;break;}else{label=114;break;}
 case 114: 
 var $422=HEAP32[(($__sym_space_end_sroa_0_0)>>2)];
 var $423=HEAP32[(($13)>>2)];
 var $424=(($423+12)|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$425]($__ct,8192,$422) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=22;break; }
 case 115: 
 if($426){label=116;break;}else{label=117;break;}
 case 116: 
 var $427=(($__sym_space_end_sroa_0_0+4)|0);
 var $_pre1207=HEAP8[($3)];
 var $__sym_space_end_sroa_0_0=$427;var $409=$_pre1207;label=113;break;
 case 117: 
 var $_pre1208=HEAP8[($3)];
 var $428=$_pre1208;label=118;break;
 case 118: 
 var $428;
 var $429=$428&1;
 var $430=(($429<<24)>>24)==0;
 var $431=HEAP32[(($21)>>2)];
 var $_1229=$430?$20:$431;
 var $432=$__sym_space_end_sroa_0_0;
 var $433=$_1229;
 var $434=((($432)-($433))|0);
 var $435=$434>>2;
 var $436=HEAP8[($6)];
 var $437=($436&255);
 var $438=$437&1;
 var $439=($438|0)==0;
 var $440=HEAP32[(($22)>>2)];
 var $441=$437>>>1;
 var $442=$439?$441:$440;
 var $443=($435>>>0)>($442>>>0);
 if($443){label=123;break;}else{label=119;break;}
 case 119: 
 var $444=$436&1;
 var $445=(($444<<24)>>24)==0;
 var $446=HEAP32[(($23)>>2)];
 var $_1230=$445?$22:$446;
 var $447=HEAP32[(($22)>>2)];
 var $448=$437>>>1;
 var $449=$439?$448:$447;
 var $_sum=((($449)-($435))|0);
 var $450=(($_1230+($_sum<<2))|0);
 var $451=HEAP32[(($23)>>2)];
 var $_1231=$445?$22:$451;
 var $452=HEAP32[(($22)>>2)];
 var $453=$437>>>1;
 var $454=$439?$453:$452;
 var $455=(($_1231+($454<<2))|0);
 var $456=HEAP32[(($21)>>2)];
 var $_1232=$430?$20:$456;
 var $457=($450|0)==($455|0);
 if($457){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $466=$428;var $465=$68;label=124;break;}else{var $_sroa_0936_01057=$450;var $_sroa_0934_01058=$_1232;label=120;break;}
 case 120: 
 var $_sroa_0934_01058;
 var $_sroa_0936_01057;
 var $458=HEAP32[(($_sroa_0936_01057)>>2)];
 var $459=HEAP32[(($_sroa_0934_01058)>>2)];
 var $460=($458|0)==($459|0);
 if($460){label=121;break;}else{label=123;break;}
 case 121: 
 var $461=(($_sroa_0936_01057+4)|0);
 var $462=($461|0)==($455|0);
 if($462){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $466=$428;var $465=$68;label=124;break;}else{label=122;break;}
 case 122: 
 var $463=(($_sroa_0934_01058+4)|0);
 var $_sroa_0936_01057=$461;var $_sroa_0934_01058=$463;label=120;break;
 case 123: 
 var $464=HEAP32[(($21)>>2)];
 var $_1233=$430?$20:$464;
 var $__sym_curr_char_sroa_0_0=$_1233;var $466=$428;var $465=$68;label=124;break;
 case 124: 
 var $465;
 var $466;
 var $__sym_curr_char_sroa_0_0;
 var $467=$466&1;
 var $468=(($467<<24)>>24)==0;
 var $469=HEAP32[(($21)>>2)];
 var $_1234=$468?$20:$469;
 var $470=($466&255);
 var $471=$470&1;
 var $472=($471|0)==0;
 var $473=HEAP32[(($20)>>2)];
 var $474=$470>>>1;
 var $475=$472?$474:$473;
 var $476=(($_1234+($475<<2))|0);
 var $477=($__sym_curr_char_sroa_0_0|0)==($476|0);
 if($477){label=148;break;}else{label=125;break;}
 case 125: 
 var $479=HEAP32[(($11)>>2)];
 var $480=($479|0)==0;
 if($480){var $497=1;label=132;break;}else{label=126;break;}
 case 126: 
 var $482=(($479+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=(($479+16)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($483|0)==($485|0);
 if($486){label=127;break;}else{label=128;break;}
 case 127: 
 var $488=$479;
 var $489=HEAP32[(($488)>>2)];
 var $490=(($489+36)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$491]($479) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0895=$492;label=129;break; } else { label=23;break; }
 case 128: 
 var $494=HEAP32[(($483)>>2)];
 var $_0895=$494;label=129;break;
 case 129: 
 var $_0895;
 var $495=($_0895|0)==-1;
 if($495){label=131;break;}else{label=130;break;}
 case 130: 
 var $_pre1209=HEAP32[(($11)>>2)];
 var $phitmp1219=($_pre1209|0)==0;
 var $497=$phitmp1219;label=132;break;
 case 131: 
 HEAP32[(($11)>>2)]=0;
 var $497=1;label=132;break;
 case 132: 
 var $497;
 var $498=($465|0)==0;
 if($498){label=138;break;}else{label=133;break;}
 case 133: 
 var $500=(($465+12)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=(($465+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($501|0)==($503|0);
 if($504){label=134;break;}else{label=135;break;}
 case 134: 
 var $506=$465;
 var $507=HEAP32[(($506)>>2)];
 var $508=(($507+36)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$509]($465) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0894=$510;label=136;break; } else { label=23;break; }
 case 135: 
 var $512=HEAP32[(($501)>>2)];
 var $_0894=$512;label=136;break;
 case 136: 
 var $_0894;
 var $513=($_0894|0)==-1;
 if($513){label=137;break;}else{label=139;break;}
 case 137: 
 HEAP32[(($12)>>2)]=0;
 label=138;break;
 case 138: 
 if($497){label=148;break;}else{var $518=0;label=140;break;}
 case 139: 
 var $515=($465|0)==0;
 var $516=$497^$515;
 if($516){var $518=$465;label=140;break;}else{label=148;break;}
 case 140: 
 var $518;
 var $519=HEAP32[(($11)>>2)];
 var $520=(($519+12)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($519+16)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=($521|0)==($523|0);
 if($524){label=141;break;}else{label=142;break;}
 case 141: 
 var $526=$519;
 var $527=HEAP32[(($526)>>2)];
 var $528=(($527+36)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$529]($519) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0896=$530;label=143;break; } else { label=23;break; }
 case 142: 
 var $532=HEAP32[(($521)>>2)];
 var $_0896=$532;label=143;break;
 case 143: 
 var $_0896;
 var $533=HEAP32[(($__sym_curr_char_sroa_0_0)>>2)];
 var $534=($_0896|0)==($533|0);
 if($534){label=144;break;}else{label=148;break;}
 case 144: 
 var $536=HEAP32[(($11)>>2)];
 var $537=(($536+12)|0);
 var $538=HEAP32[(($537)>>2)];
 var $539=(($536+16)|0);
 var $540=HEAP32[(($539)>>2)];
 var $541=($538|0)==($540|0);
 if($541){label=145;break;}else{label=146;break;}
 case 145: 
 var $543=$536;
 var $544=HEAP32[(($543)>>2)];
 var $545=(($544+40)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$546]($536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=23;break; }
 case 146: 
 var $549=(($538+4)|0);
 HEAP32[(($537)>>2)]=$549;
 label=147;break;
 case 147: 
 var $550=(($__sym_curr_char_sroa_0_0+4)|0);
 var $_pre=HEAP8[($3)];
 var $__sym_curr_char_sroa_0_0=$550;var $466=$_pre;var $465=$518;label=124;break;
 case 148: 
 if($19){label=149;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}
 case 149: 
 var $551=HEAP8[($3)];
 var $552=$551&1;
 var $553=(($552<<24)>>24)==0;
 var $554=HEAP32[(($21)>>2)];
 var $_1235=$553?$20:$554;
 var $555=($551&255);
 var $556=$555&1;
 var $557=($556|0)==0;
 var $558=HEAP32[(($20)>>2)];
 var $559=$555>>>1;
 var $560=$557?$559:$558;
 var $561=(($_1235+($560<<2))|0);
 var $562=($__sym_curr_char_sroa_0_0|0)==($561|0);
 if($562){var $__trailing_sign_1=$__trailing_sign_01140;var $907=$26;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $906=$27;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;label=255;break;}else{label=150;break;}
 case 150: 
 var $564=HEAP32[(($__err)>>2)];
 var $565=$564|4;
 HEAP32[(($__err)>>2)]=$565;
 var $_0909=0;var $1014=$27;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=290;break;
 case 151: 
 var $__gb_sroa_1_4_load10091023;
 var $566;
 var $__gb_sroa_0_0_load9991013;
 var $567;
 var $__ng_0;
 var $568=HEAP32[(($11)>>2)];
 var $569=($568|0)==0;
 if($569){var $586=1;label=158;break;}else{label=152;break;}
 case 152: 
 var $571=(($568+12)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=(($568+16)|0);
 var $574=HEAP32[(($573)>>2)];
 var $575=($572|0)==($574|0);
 if($575){label=153;break;}else{label=154;break;}
 case 153: 
 var $577=$568;
 var $578=HEAP32[(($577)>>2)];
 var $579=(($578+36)|0);
 var $580=HEAP32[(($579)>>2)];
 var $581=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$580]($568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0899=$581;label=155;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 154: 
 var $583=HEAP32[(($572)>>2)];
 var $_0899=$583;label=155;break;
 case 155: 
 var $_0899;
 var $584=($_0899|0)==-1;
 if($584){label=157;break;}else{label=156;break;}
 case 156: 
 var $_pre1210=HEAP32[(($11)>>2)];
 var $phitmp1216=($_pre1210|0)==0;
 var $586=$phitmp1216;label=158;break;
 case 157: 
 HEAP32[(($11)>>2)]=0;
 var $586=1;label=158;break;
 case 158: 
 var $586;
 var $587=HEAP32[(($12)>>2)];
 var $588=($587|0)==0;
 if($588){label=164;break;}else{label=159;break;}
 case 159: 
 var $590=(($587+12)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=(($587+16)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=($591|0)==($593|0);
 if($594){label=160;break;}else{label=161;break;}
 case 160: 
 var $596=$587;
 var $597=HEAP32[(($596)>>2)];
 var $598=(($597+36)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$599]($587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0898=$600;label=162;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 161: 
 var $602=HEAP32[(($591)>>2)];
 var $_0898=$602;label=162;break;
 case 162: 
 var $_0898;
 var $603=($_0898|0)==-1;
 if($603){label=163;break;}else{label=165;break;}
 case 163: 
 HEAP32[(($12)>>2)]=0;
 label=164;break;
 case 164: 
 if($586){label=189;break;}else{label=166;break;}
 case 165: 
 var $605=($587|0)==0;
 var $606=$586^$605;
 if($606){label=166;break;}else{label=189;break;}
 case 166: 
 var $608=HEAP32[(($11)>>2)];
 var $609=(($608+12)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=(($608+16)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=($610|0)==($612|0);
 if($613){label=167;break;}else{label=168;break;}
 case 167: 
 var $615=$608;
 var $616=HEAP32[(($615)>>2)];
 var $617=(($616+36)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$618]($608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0900=$619;label=169;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 168: 
 var $621=HEAP32[(($610)>>2)];
 var $_0900=$621;label=169;break;
 case 169: 
 var $_0900;
 var $622=HEAP32[(($13)>>2)];
 var $623=(($622+12)|0);
 var $624=HEAP32[(($623)>>2)];
 var $625=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$624]($__ct,2048,$_0900) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 170: 
 if($625){label=171;break;}else{label=175;break;}
 case 171: 
 var $627=HEAP32[(($__wn)>>2)];
 var $628=HEAP32[(($0)>>2)];
 var $629=($627|0)==($628|0);
 if($629){label=172;break;}else{var $632=$627;label=174;break;}
 case 172: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 173: 
 var $_pre1211=HEAP32[(($__wn)>>2)];
 var $632=$_pre1211;label=174;break;
 case 174: 
 var $632;
 var $633=(($632+4)|0);
 HEAP32[(($__wn)>>2)]=$633;
 HEAP32[(($632)>>2)]=$_0900;
 var $634=((($__ng_0)+(1))|0);
 var $__ng_1=$634;var $676=$567;var $__gb_sroa_0_0_load9991014=$__gb_sroa_0_0_load9991013;var $675=$566;var $__gb_sroa_1_4_load10091021=$__gb_sroa_1_4_load10091023;label=186;break;
 case 175: 
 var $635=HEAP8[($1)];
 var $636=($635&255);
 var $637=$636&1;
 var $638=($637|0)==0;
 var $639=HEAP32[(($25)>>2)];
 var $640=$636>>>1;
 var $641=$638?$640:$639;
 var $642=($641|0)==0;
 var $643=($__ng_0|0)==0;
 var $or_cond973=$642|$643;
 if($or_cond973){label=189;break;}else{label=176;break;}
 case 176: 
 var $645=HEAP32[(($__ts)>>2)];
 var $646=($_0900|0)==($645|0);
 if($646){label=177;break;}else{label=189;break;}
 case 177: 
 var $648=($__gb_sroa_0_0_load9991013|0)==($567|0);
 if($648){label=178;break;}else{var $672=$567;var $__gb_sroa_0_0_load9991015=$__gb_sroa_0_0_load9991013;var $671=$566;var $__gb_sroa_1_4_load10091022=$__gb_sroa_1_4_load10091023;label=185;break;}
 case 178: 
 var $650=($__gb_sroa_1_4_load10091023|0)!=((446)|0);
 var $651=$__gb_sroa_0_0_load9991013;
 var $652=$566;
 var $653=((($651)-($652))|0);
 var $654=($653>>>0)<2147483647;
 var $655=$653<<1;
 var $656=$654?$655:-1;
 var $657=$653>>2;
 if($650){label=179;break;}else{var $660=0;label=180;break;}
 case 179: 
 var $phitmp_i=$566;
 var $660=$phitmp_i;label=180;break;
 case 180: 
 var $660;
 var $661=_realloc($660,$656);
 var $662=$661;
 var $663=($661|0)==0;
 if($663){label=181;break;}else{label=182;break;}
 case 181: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { var $_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091023;label=20;break; }
 case 182: 
 var $665=($566|0)==0;
 var $or_cond1032=$650|$665;
 if($or_cond1032){label=184;break;}else{label=183;break;}
 case 183: 
 label=184;break;
 case 184: 
 var $667=$656>>>2;
 var $668=(($662+($657<<2))|0);
 var $669=(($662+($667<<2))|0);
 var $672=$669;var $__gb_sroa_0_0_load9991015=$668;var $671=$662;var $__gb_sroa_1_4_load10091022=228;label=185;break;
 case 185: 
 var $__gb_sroa_1_4_load10091022;
 var $671;
 var $__gb_sroa_0_0_load9991015;
 var $672;
 var $673=(($__gb_sroa_0_0_load9991015+4)|0);
 HEAP32[(($__gb_sroa_0_0_load9991015)>>2)]=$__ng_0;
 var $__ng_1=0;var $676=$672;var $__gb_sroa_0_0_load9991014=$673;var $675=$671;var $__gb_sroa_1_4_load10091021=$__gb_sroa_1_4_load10091022;label=186;break;
 case 186: 
 var $__gb_sroa_1_4_load10091021;
 var $675;
 var $__gb_sroa_0_0_load9991014;
 var $676;
 var $__ng_1;
 var $677=HEAP32[(($11)>>2)];
 var $678=(($677+12)|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=(($677+16)|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=($679|0)==($681|0);
 if($682){label=187;break;}else{label=188;break;}
 case 187: 
 var $684=$677;
 var $685=HEAP32[(($684)>>2)];
 var $686=(($685+40)|0);
 var $687=HEAP32[(($686)>>2)];
 var $688=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$687]($677) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $567=$676;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load9991014;var $566=$675;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load10091021;label=151;break; } else { var $_ph_ph=$675;var $__gb_sroa_1_4_load10091018_ph_ph=$__gb_sroa_1_4_load10091021;label=20;break; }
 case 188: 
 var $690=(($679+4)|0);
 HEAP32[(($678)>>2)]=$690;
 var $__ng_0=$__ng_1;var $567=$676;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load9991014;var $566=$675;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load10091021;label=151;break;
 case 189: 
 var $692=($566|0)==($__gb_sroa_0_0_load9991013|0);
 var $693=($__ng_0|0)==0;
 var $or_cond974=$692|$693;
 if($or_cond974){var $722=$567;var $__gb_sroa_0_0_load9991012=$__gb_sroa_0_0_load9991013;var $721=$566;var $__gb_sroa_1_4_load10091020=$__gb_sroa_1_4_load10091023;label=199;break;}else{label=190;break;}
 case 190: 
 var $695=($__gb_sroa_0_0_load9991013|0)==($567|0);
 if($695){label=191;break;}else{var $719=$567;var $__gb_sroa_0_0_load9991016=$__gb_sroa_0_0_load9991013;var $718=$566;var $__gb_sroa_1_4_load10091019=$__gb_sroa_1_4_load10091023;label=198;break;}
 case 191: 
 var $697=($__gb_sroa_1_4_load10091023|0)!=((446)|0);
 var $698=$__gb_sroa_0_0_load9991013;
 var $699=$566;
 var $700=((($698)-($699))|0);
 var $701=($700>>>0)<2147483647;
 var $702=$700<<1;
 var $703=$701?$702:-1;
 var $704=$700>>2;
 if($697){label=192;break;}else{var $707=0;label=193;break;}
 case 192: 
 var $phitmp_i975=$566;
 var $707=$phitmp_i975;label=193;break;
 case 193: 
 var $707;
 var $708=_realloc($707,$703);
 var $709=$708;
 var $710=($708|0)==0;
 if($710){label=194;break;}else{label=195;break;}
 case 194: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$566;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=25;break; }
 case 195: 
 var $712=($566|0)==0;
 var $or_cond1033=$697|$712;
 if($or_cond1033){label=197;break;}else{label=196;break;}
 case 196: 
 label=197;break;
 case 197: 
 var $714=$703>>>2;
 var $715=(($709+($704<<2))|0);
 var $716=(($709+($714<<2))|0);
 var $719=$716;var $__gb_sroa_0_0_load9991016=$715;var $718=$709;var $__gb_sroa_1_4_load10091019=228;label=198;break;
 case 198: 
 var $__gb_sroa_1_4_load10091019;
 var $718;
 var $__gb_sroa_0_0_load9991016;
 var $719;
 var $720=(($__gb_sroa_0_0_load9991016+4)|0);
 HEAP32[(($__gb_sroa_0_0_load9991016)>>2)]=$__ng_0;
 var $722=$719;var $__gb_sroa_0_0_load9991012=$720;var $721=$718;var $__gb_sroa_1_4_load10091020=$__gb_sroa_1_4_load10091019;label=199;break;
 case 199: 
 var $__gb_sroa_1_4_load10091020;
 var $721;
 var $__gb_sroa_0_0_load9991012;
 var $722;
 var $723=HEAP32[(($__fd)>>2)];
 var $724=($723|0)>0;
 if($724){label=200;break;}else{label=253;break;}
 case 200: 
 var $726=HEAP32[(($11)>>2)];
 var $727=($726|0)==0;
 if($727){var $744=1;label=207;break;}else{label=201;break;}
 case 201: 
 var $729=(($726+12)|0);
 var $730=HEAP32[(($729)>>2)];
 var $731=(($726+16)|0);
 var $732=HEAP32[(($731)>>2)];
 var $733=($730|0)==($732|0);
 if($733){label=202;break;}else{label=203;break;}
 case 202: 
 var $735=$726;
 var $736=HEAP32[(($735)>>2)];
 var $737=(($736+36)|0);
 var $738=HEAP32[(($737)>>2)];
 var $739=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$738]($726) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0906=$739;label=204;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 203: 
 var $741=HEAP32[(($730)>>2)];
 var $_0906=$741;label=204;break;
 case 204: 
 var $_0906;
 var $742=($_0906|0)==-1;
 if($742){label=206;break;}else{label=205;break;}
 case 205: 
 var $_pre1212=HEAP32[(($11)>>2)];
 var $phitmp1217=($_pre1212|0)==0;
 var $744=$phitmp1217;label=207;break;
 case 206: 
 HEAP32[(($11)>>2)]=0;
 var $744=1;label=207;break;
 case 207: 
 var $744;
 var $745=HEAP32[(($12)>>2)];
 var $746=($745|0)==0;
 if($746){label=213;break;}else{label=208;break;}
 case 208: 
 var $748=(($745+12)|0);
 var $749=HEAP32[(($748)>>2)];
 var $750=(($745+16)|0);
 var $751=HEAP32[(($750)>>2)];
 var $752=($749|0)==($751|0);
 if($752){label=209;break;}else{label=210;break;}
 case 209: 
 var $754=$745;
 var $755=HEAP32[(($754)>>2)];
 var $756=(($755+36)|0);
 var $757=HEAP32[(($756)>>2)];
 var $758=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$757]($745) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0905=$758;label=211;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 210: 
 var $760=HEAP32[(($749)>>2)];
 var $_0905=$760;label=211;break;
 case 211: 
 var $_0905;
 var $761=($_0905|0)==-1;
 if($761){label=212;break;}else{label=214;break;}
 case 212: 
 HEAP32[(($12)>>2)]=0;
 label=213;break;
 case 213: 
 if($744){label=219;break;}else{var $765=0;label=215;break;}
 case 214: 
 var $763=($745|0)==0;
 var $tmp966=$744^$763;
 if($tmp966){var $765=$745;label=215;break;}else{label=219;break;}
 case 215: 
 var $765;
 var $766=HEAP32[(($11)>>2)];
 var $767=(($766+12)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($766+16)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($768|0)==($770|0);
 if($771){label=216;break;}else{label=217;break;}
 case 216: 
 var $773=$766;
 var $774=HEAP32[(($773)>>2)];
 var $775=(($774+36)|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$776]($766) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0908=$777;label=218;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 217: 
 var $779=HEAP32[(($768)>>2)];
 var $_0908=$779;label=218;break;
 case 218: 
 var $_0908;
 var $780=HEAP32[(($__dp)>>2)];
 var $781=($_0908|0)==($780|0);
 if($781){label=220;break;}else{label=219;break;}
 case 219: 
 var $783=HEAP32[(($__err)>>2)];
 var $784=$783|4;
 HEAP32[(($__err)>>2)]=$784;
 var $_0909=0;var $1014=$721;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=290;break;
 case 220: 
 var $786=HEAP32[(($11)>>2)];
 var $787=(($786+12)|0);
 var $788=HEAP32[(($787)>>2)];
 var $789=(($786+16)|0);
 var $790=HEAP32[(($789)>>2)];
 var $791=($788|0)==($790|0);
 if($791){label=221;break;}else{label=222;break;}
 case 221: 
 var $793=$786;
 var $794=HEAP32[(($793)>>2)];
 var $795=(($794+40)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$796]($786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $801=$765;var $800=$723;label=223;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph=$721;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=25;break; }
 case 222: 
 var $799=(($788+4)|0);
 HEAP32[(($787)>>2)]=$799;
 var $801=$765;var $800=$723;label=223;break;
 case 223: 
 var $800;
 var $801;
 var $802=HEAP32[(($11)>>2)];
 var $803=($802|0)==0;
 if($803){var $820=1;label=230;break;}else{label=224;break;}
 case 224: 
 var $805=(($802+12)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(($802+16)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=($806|0)==($808|0);
 if($809){label=225;break;}else{label=226;break;}
 case 225: 
 var $811=$802;
 var $812=HEAP32[(($811)>>2)];
 var $813=(($812+36)|0);
 var $814=HEAP32[(($813)>>2)];
 var $815=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$814]($802) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0915=$815;label=227;break; } else { label=21;break; }
 case 226: 
 var $817=HEAP32[(($806)>>2)];
 var $_0915=$817;label=227;break;
 case 227: 
 var $_0915;
 var $818=($_0915|0)==-1;
 if($818){label=229;break;}else{label=228;break;}
 case 228: 
 var $_pre1213=HEAP32[(($11)>>2)];
 var $phitmp1218=($_pre1213|0)==0;
 var $820=$phitmp1218;label=230;break;
 case 229: 
 HEAP32[(($11)>>2)]=0;
 var $820=1;label=230;break;
 case 230: 
 var $820;
 var $821=($801|0)==0;
 if($821){label=236;break;}else{label=231;break;}
 case 231: 
 var $823=(($801+12)|0);
 var $824=HEAP32[(($823)>>2)];
 var $825=(($801+16)|0);
 var $826=HEAP32[(($825)>>2)];
 var $827=($824|0)==($826|0);
 if($827){label=232;break;}else{label=233;break;}
 case 232: 
 var $829=$801;
 var $830=HEAP32[(($829)>>2)];
 var $831=(($830+36)|0);
 var $832=HEAP32[(($831)>>2)];
 var $833=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$832]($801) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0914=$833;label=234;break; } else { label=21;break; }
 case 233: 
 var $835=HEAP32[(($824)>>2)];
 var $_0914=$835;label=234;break;
 case 234: 
 var $_0914;
 var $836=($_0914|0)==-1;
 if($836){label=235;break;}else{label=237;break;}
 case 235: 
 HEAP32[(($12)>>2)]=0;
 label=236;break;
 case 236: 
 if($820){label=243;break;}else{var $840=0;label=238;break;}
 case 237: 
 var $838=($801|0)==0;
 var $tmp967=$820^$838;
 if($tmp967){var $840=$801;label=238;break;}else{label=243;break;}
 case 238: 
 var $840;
 var $841=HEAP32[(($11)>>2)];
 var $842=(($841+12)|0);
 var $843=HEAP32[(($842)>>2)];
 var $844=(($841+16)|0);
 var $845=HEAP32[(($844)>>2)];
 var $846=($843|0)==($845|0);
 if($846){label=239;break;}else{label=240;break;}
 case 239: 
 var $848=$841;
 var $849=HEAP32[(($848)>>2)];
 var $850=(($849+36)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$851]($841) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0917=$852;label=241;break; } else { label=21;break; }
 case 240: 
 var $854=HEAP32[(($843)>>2)];
 var $_0917=$854;label=241;break;
 case 241: 
 var $_0917;
 var $855=HEAP32[(($13)>>2)];
 var $856=(($855+12)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$857]($__ct,2048,$_0917) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=21;break; }
 case 242: 
 if($858){label=244;break;}else{label=243;break;}
 case 243: 
 var $860=HEAP32[(($__err)>>2)];
 var $861=$860|4;
 HEAP32[(($__err)>>2)]=$861;
 var $_0909=0;var $1014=$721;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=290;break;
 case 244: 
 var $863=HEAP32[(($__wn)>>2)];
 var $864=HEAP32[(($0)>>2)];
 var $865=($863|0)==($864|0);
 if($865){label=245;break;}else{label=246;break;}
 case 245: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=21;break; }
 case 246: 
 var $868=HEAP32[(($11)>>2)];
 var $869=(($868+12)|0);
 var $870=HEAP32[(($869)>>2)];
 var $871=(($868+16)|0);
 var $872=HEAP32[(($871)>>2)];
 var $873=($870|0)==($872|0);
 if($873){label=247;break;}else{label=248;break;}
 case 247: 
 var $875=$868;
 var $876=HEAP32[(($875)>>2)];
 var $877=(($876+36)|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$878]($868) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0918=$879;label=249;break; } else { label=21;break; }
 case 248: 
 var $881=HEAP32[(($870)>>2)];
 var $_0918=$881;label=249;break;
 case 249: 
 var $_0918;
 var $882=HEAP32[(($__wn)>>2)];
 var $883=(($882+4)|0);
 HEAP32[(($__wn)>>2)]=$883;
 HEAP32[(($882)>>2)]=$_0918;
 var $884=((($800)-(1))|0);
 HEAP32[(($__fd)>>2)]=$884;
 var $885=HEAP32[(($11)>>2)];
 var $886=(($885+12)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=(($885+16)|0);
 var $889=HEAP32[(($888)>>2)];
 var $890=($887|0)==($889|0);
 if($890){label=250;break;}else{label=252;break;}
 case 250: 
 var $892=$885;
 var $893=HEAP32[(($892)>>2)];
 var $894=(($893+40)|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$895]($885) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=21;break; }
 case 251: 
 var $897=($884|0)>0;
 if($897){var $801=$840;var $800=$884;label=223;break;}else{label=253;break;}
 case 252: 
 var $899=(($887+4)|0);
 HEAP32[(($886)>>2)]=$899;
 label=251;break;
 case 253: 
 var $900=HEAP32[(($__wn)>>2)];
 var $901=HEAP32[(($9)>>2)];
 var $902=($900|0)==($901|0);
 if($902){label=254;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $907=$722;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load9991012;var $906=$721;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load10091020;label=255;break;}
 case 254: 
 var $904=HEAP32[(($__err)>>2)];
 var $905=$904|4;
 HEAP32[(($__err)>>2)]=$905;
 var $_0909=0;var $1014=$721;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=290;break;
 case 255: 
 var $__gb_sroa_1_4_load10091024;
 var $906;
 var $__gb_sroa_0_0_load9991011;
 var $907;
 var $__trailing_sign_1;
 var $908=((($__p_01142)+(1))|0);
 var $909=($908>>>0)<4;
 if($909){var $__gb_sroa_1_4_load100910251134=$__gb_sroa_1_4_load10091024;var $27=$906;var $__gb_sroa_0_0_load99910101137=$__gb_sroa_0_0_load9991011;var $26=$907;var $__trailing_sign_01140=$__trailing_sign_1;var $__p_01142=$908;label=3;break;}else{var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load10091024;var $_lcssa=$906;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load9991011;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=256;break;}
 case 256: 
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load9991010_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load10091025_lcssa;
 var $910=($__trailing_sign_0_lcssa|0)==0;
 if($910){label=287;break;}else{label=257;break;}
 case 257: 
 var $911=$__trailing_sign_0_lcssa;
 var $912=(($__trailing_sign_0_lcssa+4)|0);
 var $913=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;label=258;break;
 case 258: 
 var $__i_0;
 var $914=HEAP8[($911)];
 var $915=($914&255);
 var $916=$915&1;
 var $917=($916|0)==0;
 if($917){label=260;break;}else{label=259;break;}
 case 259: 
 var $919=HEAP32[(($912)>>2)];
 var $922=$919;label=261;break;
 case 260: 
 var $921=$915>>>1;
 var $922=$921;label=261;break;
 case 261: 
 var $922;
 var $923=($__i_0>>>0)<($922>>>0);
 if($923){label=262;break;}else{label=287;break;}
 case 262: 
 var $925=HEAP32[(($11)>>2)];
 var $926=($925|0)==0;
 if($926){var $943=1;label=269;break;}else{label=263;break;}
 case 263: 
 var $928=(($925+12)|0);
 var $929=HEAP32[(($928)>>2)];
 var $930=(($925+16)|0);
 var $931=HEAP32[(($930)>>2)];
 var $932=($929|0)==($931|0);
 if($932){label=264;break;}else{label=265;break;}
 case 264: 
 var $934=$925;
 var $935=HEAP32[(($934)>>2)];
 var $936=(($935+36)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$937]($925) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0929=$938;label=266;break; } else { label=19;break; }
 case 265: 
 var $940=HEAP32[(($929)>>2)];
 var $_0929=$940;label=266;break;
 case 266: 
 var $_0929;
 var $941=($_0929|0)==-1;
 if($941){label=268;break;}else{label=267;break;}
 case 267: 
 var $_pre1214=HEAP32[(($11)>>2)];
 var $phitmp1215=($_pre1214|0)==0;
 var $943=$phitmp1215;label=269;break;
 case 268: 
 HEAP32[(($11)>>2)]=0;
 var $943=1;label=269;break;
 case 269: 
 var $943;
 var $944=HEAP32[(($12)>>2)];
 var $945=($944|0)==0;
 if($945){label=275;break;}else{label=270;break;}
 case 270: 
 var $947=(($944+12)|0);
 var $948=HEAP32[(($947)>>2)];
 var $949=(($944+16)|0);
 var $950=HEAP32[(($949)>>2)];
 var $951=($948|0)==($950|0);
 if($951){label=271;break;}else{label=272;break;}
 case 271: 
 var $953=$944;
 var $954=HEAP32[(($953)>>2)];
 var $955=(($954+36)|0);
 var $956=HEAP32[(($955)>>2)];
 var $957=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$956]($944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0928=$957;label=273;break; } else { label=19;break; }
 case 272: 
 var $959=HEAP32[(($948)>>2)];
 var $_0928=$959;label=273;break;
 case 273: 
 var $_0928;
 var $960=($_0928|0)==-1;
 if($960){label=274;break;}else{label=276;break;}
 case 274: 
 HEAP32[(($12)>>2)]=0;
 label=275;break;
 case 275: 
 if($943){label=283;break;}else{label=277;break;}
 case 276: 
 var $962=($944|0)==0;
 var $tmp=$943^$962;
 if($tmp){label=277;break;}else{label=283;break;}
 case 277: 
 var $964=HEAP32[(($11)>>2)];
 var $965=(($964+12)|0);
 var $966=HEAP32[(($965)>>2)];
 var $967=(($964+16)|0);
 var $968=HEAP32[(($967)>>2)];
 var $969=($966|0)==($968|0);
 if($969){label=278;break;}else{label=279;break;}
 case 278: 
 var $971=$964;
 var $972=HEAP32[(($971)>>2)];
 var $973=(($972+36)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$974]($964) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0930=$975;label=280;break; } else { label=19;break; }
 case 279: 
 var $977=HEAP32[(($966)>>2)];
 var $_0930=$977;label=280;break;
 case 280: 
 var $_0930;
 var $978=HEAP8[($911)];
 var $979=$978&1;
 var $980=(($979<<24)>>24)==0;
 if($980){var $983=$912;label=282;break;}else{label=281;break;}
 case 281: 
 var $982=HEAP32[(($913)>>2)];
 var $983=$982;label=282;break;
 case 282: 
 var $983;
 var $984=(($983+($__i_0<<2))|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=($_0930|0)==($985|0);
 if($986){label=284;break;}else{label=283;break;}
 case 283: 
 var $988=HEAP32[(($__err)>>2)];
 var $989=$988|4;
 HEAP32[(($__err)>>2)]=$989;
 var $_0909=0;var $1014=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;
 case 284: 
 var $991=((($__i_0)+(1))|0);
 var $992=HEAP32[(($11)>>2)];
 var $993=(($992+12)|0);
 var $994=HEAP32[(($993)>>2)];
 var $995=(($992+16)|0);
 var $996=HEAP32[(($995)>>2)];
 var $997=($994|0)==($996|0);
 if($997){label=285;break;}else{label=286;break;}
 case 285: 
 var $999=$992;
 var $1000=HEAP32[(($999)>>2)];
 var $1001=(($1000+40)|0);
 var $1002=HEAP32[(($1001)>>2)];
 var $1003=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1002]($992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$991;label=258;break; } else { label=19;break; }
 case 286: 
 var $1005=(($994+4)|0);
 HEAP32[(($993)>>2)]=$1005;
 var $__i_0=$991;label=258;break;
 case 287: 
 var $1006=($_lcssa|0)==($__gb_sroa_0_0_load9991010_lcssa|0);
 if($1006){var $_0909=1;var $1014=$__gb_sroa_0_0_load9991010_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;}else{label=288;break;}
 case 288: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load9991010_lcssa,$__et);
 var $1008=HEAP32[(($__et)>>2)];
 var $1009=($1008|0)==0;
 if($1009){var $_0909=1;var $1014=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;}else{label=289;break;}
 case 289: 
 var $1011=HEAP32[(($__err)>>2)];
 var $1012=$1011|4;
 HEAP32[(($__err)>>2)]=$1012;
 var $_0909=0;var $1014=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=290;break;
 case 290: 
 var $__gb_sroa_1_4_load10091026;
 var $1014;
 var $_0909;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $1015=($1014|0)==0;
 if($1015){label=293;break;}else{label=291;break;}
 case 291: 
 var $1017=$1014;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10091026]($1017) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=293;break; } else { label=292;break; }
 case 292: 
 var $1019$0 = ___cxa_find_matching_catch(-1, -1,0); var $1019$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 293: 
 STACKTOP=sp;return $_0909;
 case 294: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $1=(sp)+(448);
 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=446;
 var $5=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $7=(($__loc)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((17936)>>2)];
 var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$9,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=41;break; }
 case 4: 
 var $13=HEAP32[((17940)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($8+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($8+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$16;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($14>>>0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($18+($14<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=8;break;}
 case 6: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 __ZNSt8bad_castC2Ev($28);
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $29=$25;
 HEAP8[($__neg)]=0;
 var $30=(($__e)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($1)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($__iob+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$1,$__intl,$__loc,$34,$__err,$__neg,$29,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=41;break; }
 case 9: 
 if($35){label=10;break;}else{label=22;break;}
 case 10: 
 var $38=$__v;
 var $39=HEAP8[($38)];
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=(($__v+8)|0);
 var $44=HEAP32[(($43)>>2)];
 HEAP32[(($44)>>2)]=0;
 var $45=(($__v+4)|0);
 HEAP32[(($45)>>2)]=0;
 label=13;break;
 case 12: 
 var $47=(($__v+4)|0);
 HEAP32[(($47)>>2)]=0;
 HEAP8[($38)]=0;
 label=13;break;
 case 13: 
 var $48=HEAP8[($__neg)];
 var $49=$48&1;
 var $50=(($49<<24)>>24)==0;
 var $_pre114=$25;
 if($50){label=17;break;}else{label=14;break;}
 case 14: 
 var $52=HEAP32[(($_pre114)>>2)];
 var $53=(($52+44)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($29,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=41;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=41;break; }
 case 16: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=$56$0;
 var $58=$56$1;
 HEAP32[(($3)>>2)]=0;
 var $137=$2;var $_0106116=$58;var $_0105118=$57;label=42;break;
 case 17: 
 var $59=HEAP32[(($_pre114)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($29,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=41;break; }
 case 18: 
 var $63=HEAP32[(($3)>>2)];
 var $64=HEAP32[(($__wn)>>2)];
 var $65=((($64)-(4))|0);
 var $__w_0=$63;label=19;break;
 case 19: 
 var $__w_0;
 var $67=($__w_0>>>0)<($65>>>0);
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 var $69=HEAP32[(($__w_0)>>2)];
 var $70=($69|0)==($62|0);
 var $71=(($__w_0+4)|0);
 if($70){var $__w_0=$71;label=19;break;}else{label=21;break;}
 case 21: 
 var $73=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0,$64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=41;break; }
 case 22: 
 var $75=(($__b)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($76|0)==0;
 if($77){var $94=0;label=28;break;}else{label=23;break;}
 case 23: 
 var $79=(($76+12)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($76+16)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($80|0)==($82|0);
 if($83){label=24;break;}else{label=25;break;}
 case 24: 
 var $85=$76;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+36)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0104=$89;label=26;break; } else { label=41;break; }
 case 25: 
 var $91=HEAP32[(($80)>>2)];
 var $_0104=$91;label=26;break;
 case 26: 
 var $_0104;
 var $92=($_0104|0)==-1;
 if($92){label=27;break;}else{var $94=$76;label=28;break;}
 case 27: 
 HEAP32[(($75)>>2)]=0;
 var $94=0;label=28;break;
 case 28: 
 var $94;
 var $95=($94|0)==0;
 var $96=($31|0)==0;
 if($96){label=34;break;}else{label=29;break;}
 case 29: 
 var $98=(($31+12)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($31+16)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=30;break;}else{label=31;break;}
 case 30: 
 var $104=$31;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+36)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$108;label=32;break; } else { label=41;break; }
 case 31: 
 var $110=HEAP32[(($99)>>2)];
 var $_0=$110;label=32;break;
 case 32: 
 var $_0;
 var $111=($_0|0)==-1;
 if($111){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($30)>>2)]=0;
 label=34;break;
 case 34: 
 if($95){label=36;break;}else{label=37;break;}
 case 35: 
 var $113=($31|0)==0;
 var $tmp=$95^$113;
 if($tmp){label=37;break;}else{label=36;break;}
 case 36: 
 var $115=HEAP32[(($__err)>>2)];
 var $116=$115|2;
 HEAP32[(($__err)>>2)]=$116;
 label=37;break;
 case 37: 
 var $117=(($agg_result)|0);
 HEAP32[(($117)>>2)]=$94;
 var $118=HEAP32[(($7)>>2)];
 var $119=(($118)|0);
 var $120=__ZNSt3__114__shared_count16__release_sharedEv($119);
 var $121=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $122=($121|0)==0;
 if($122){label=40;break;}else{label=38;break;}
 case 38: 
 var $124=HEAP32[(($4)>>2)];
 var $125=$121;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$124]($125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1,0); var $127$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 40: 
 STACKTOP=sp;return;
 case 41: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $132=HEAP32[(($7)>>2)];
 var $133=(($132)|0);
 var $134=__ZNSt3__114__shared_count16__release_sharedEv($133);
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $135=($_pre|0)==0;
 if($135){var $_0106117=$131;var $_0105119=$130;label=44;break;}else{var $137=$_pre;var $_0106116=$131;var $_0105118=$130;label=42;break;}
 case 42: 
 var $_0105118;
 var $_0106116;
 var $137;
 var $138=HEAP32[(($4)>>2)];
 var $139=$137;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0106117=$_0106116;var $_0105119=$_0105118;label=44;break; } else { label=43;break; }
 case 43: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1,0); var $141$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 44: 
 var $_0105119;
 var $_0106117;
 var $142$0=$_0105119;
 var $142$1=0;
 var $143$0=$142$0;
 var $143$1=$_0106117;
 ___resumeException($143$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$__first;
 var $3=HEAP8[($1)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=$3&1;
 var $14=(($13<<24)>>24)==0;
 if($14){var $21=1;var $20=$3;label=6;break;}else{label=5;break;}
 case 5: 
 var $16=(($this)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&-2;
 var $phitmp=((($18)-(1))|0);
 var $19=(($17)&255);
 var $21=$phitmp;var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21;
 var $22=$__last;
 var $23=((($22)-($2))|0);
 var $24=$23>>2;
 var $25=($24|0)==0;
 if($25){label=19;break;}else{label=7;break;}
 case 7: 
 var $27=((($21)-($12))|0);
 var $28=($27>>>0)<($24>>>0);
 if($28){label=8;break;}else{var $33=$20;label=9;break;}
 case 8: 
 var $30=((($12)+($24))|0);
 var $31=((($30)-($21))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$21,$31,$12,$12,0,0);
 var $_pre=HEAP8[($1)];
 var $33=$_pre;label=9;break;
 case 9: 
 var $33;
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=(($this+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=12;break;
 case 11: 
 var $40=(($this+4)|0);
 var $41=$40;label=12;break;
 case 12: 
 var $41;
 var $42=(($41+($12<<2))|0);
 var $43=($__first|0)==($__last|0);
 if($43){var $__p_0_lcssa=$42;label=16;break;}else{label=13;break;}
 case 13: 
 var $scevgep=((($__last)-(4))|0);
 var $scevgep71=$scevgep;
 var $44=(((-$2))|0);
 var $uglygep=(($scevgep71+$44)|0);
 var $uglygep72=$uglygep;
 var $45=$uglygep72>>>2;
 var $46=((($12)+($45))|0);
 var $47=((($46)+(1))|0);
 var $_069=$__first;var $__p_070=$42;label=14;break;
 case 14: 
 var $__p_070;
 var $_069;
 var $49=HEAP32[(($_069)>>2)];
 HEAP32[(($__p_070)>>2)]=$49;
 var $50=(($__p_070+4)|0);
 var $51=(($_069+4)|0);
 var $52=($51|0)==($__last|0);
 if($52){label=15;break;}else{var $_069=$51;var $__p_070=$50;label=14;break;}
 case 15: 
 var $scevgep73=(($41+($47<<2))|0);
 var $__p_0_lcssa=$scevgep73;label=16;break;
 case 16: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 var $54=((($12)+($24))|0);
 var $55=HEAP8[($1)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+4)|0);
 HEAP32[(($59)>>2)]=$54;
 label=19;break;
 case 18: 
 var $61=$54<<1;
 var $62=(($61)&255);
 HEAP8[($1)]=$62;
 label=19;break;
 case 19: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i513=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$4;
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$6;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=$8;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=$11;
 var $13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=$13;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast512=$1;
 var $20=(($__loc)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$__p_i_i_i;
 var $23=HEAP32[((18400)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18400;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18400,$22,270);
 label=4;break;
 case 4: 
 var $26=HEAP32[((18404)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($21+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($21+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 __ZNSt8bad_castC2Ev($41);
 ___cxa_throw($40,12744,(374));
 throw "Reached an unreachable!";
 case 7: 
 var $42=$38;
 var $43=$38;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+44)|0);
 var $46=HEAP32[(($45)>>2)];
 FUNCTION_TABLE[$46]($tmpcast512,$42);
 var $47=$__pat;
 var $48=HEAP32[(($1)>>2)];
 tempBigInt=$48;HEAP8[($47)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(3))|0)]=tempBigInt&0xff;
 var $49=$38;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+32)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($2,$42);
 var $53=$__nsn;
 var $54=HEAP8[($53)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=9;break;}else{label=8;break;}
 case 8: 
 var $58=(($__nsn+8)|0);
 var $59=HEAP32[(($58)>>2)];
 HEAP32[(($59)>>2)]=0;
 var $60=(($__nsn+4)|0);
 HEAP32[(($60)>>2)]=0;
 label=10;break;
 case 9: 
 var $62=(($__nsn+4)|0);
 HEAP32[(($62)>>2)]=0;
 HEAP8[($53)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1,0); var $64$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 var $65=HEAP32[(($49)>>2)];
 var $66=(($65+28)|0);
 var $67=HEAP32[(($66)>>2)];
 FUNCTION_TABLE[$67]($4,$42);
 var $68=$__psn;
 var $69=HEAP8[($68)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=14;break;}else{label=13;break;}
 case 13: 
 var $73=(($__psn+8)|0);
 var $74=HEAP32[(($73)>>2)];
 HEAP32[(($74)>>2)]=0;
 var $75=(($__psn+4)|0);
 HEAP32[(($75)>>2)]=0;
 label=15;break;
 case 14: 
 var $77=(($__psn+4)|0);
 HEAP32[(($77)>>2)]=0;
 HEAP8[($68)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1,0); var $79$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($68)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($68)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($68)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
 var $80=$38;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+12)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=FUNCTION_TABLE[$83]($42);
 HEAP32[(($__dp)>>2)]=$84;
 var $85=HEAP32[(($80)>>2)];
 var $86=(($85+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($42);
 HEAP32[(($__ts)>>2)]=$88;
 var $89=$38;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+20)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($6,$42);
 var $93=$__grp;
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=19;break;}else{label=18;break;}
 case 18: 
 var $98=(($__grp+8)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP8[($99)]=0;
 var $100=(($__grp+4)|0);
 HEAP32[(($100)>>2)]=0;
 label=20;break;
 case 19: 
 var $102=$__grp;
 var $103=(($102+1)|0);
 HEAP8[($103)]=0;
 HEAP8[($93)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1,0); var $105$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 var $106=HEAP32[(($49)>>2)];
 var $107=(($106+24)|0);
 var $108=HEAP32[(($107)>>2)];
 FUNCTION_TABLE[$108]($8,$42);
 var $109=$__sym;
 var $110=HEAP8[($109)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=24;break;}else{label=23;break;}
 case 23: 
 var $114=(($__sym+8)|0);
 var $115=HEAP32[(($114)>>2)];
 HEAP32[(($115)>>2)]=0;
 var $116=(($__sym+4)|0);
 HEAP32[(($116)>>2)]=0;
 label=25;break;
 case 24: 
 var $118=(($__sym+4)|0);
 HEAP32[(($118)>>2)]=0;
 HEAP8[($109)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $120$0 = ___cxa_find_matching_catch(-1, -1,0); var $120$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($109)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($109)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($109)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
 var $121=HEAP32[(($80)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($42);
 var $storemerge=$124;label=54;break;
 case 28: 
 var $tmpcast=$10;
 var $126=(($__loc)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$__p_i_i_i513;
 var $129=HEAP32[((18408)>>2)];
 var $130=($129|0)==-1;
 if($130){label=30;break;}else{label=29;break;}
 case 29: 
 var $_sroa_016_0__idx_i_i514=(($__p_i_i_i513)|0);
 HEAP32[(($_sroa_016_0__idx_i_i514)>>2)]=18408;
 var $_sroa_117_4__idx18_i_i515=(($__p_i_i_i513+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i515)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i516=(($__p_i_i_i513+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i516)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18408,$128,270);
 label=30;break;
 case 30: 
 var $132=HEAP32[((18412)>>2)];
 var $133=((($132)-(1))|0);
 var $134=(($127+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($127+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$135;
 var $139=$137;
 var $140=((($138)-($139))|0);
 var $141=$140>>2;
 var $142=($141>>>0)>($133>>>0);
 if($142){label=31;break;}else{label=32;break;}
 case 31: 
 var $143=(($137+($133<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=32;break;}else{label=33;break;}
 case 32: 
 var $146=___cxa_allocate_exception(4);
 var $147=$146;
 __ZNSt8bad_castC2Ev($147);
 ___cxa_throw($146,12744,(374));
 throw "Reached an unreachable!";
 case 33: 
 var $148=$144;
 var $149=$144;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+44)|0);
 var $152=HEAP32[(($151)>>2)];
 FUNCTION_TABLE[$152]($tmpcast,$148);
 var $153=$__pat;
 var $154=HEAP32[(($10)>>2)];
 tempBigInt=$154;HEAP8[($153)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($153)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($153)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($153)+(3))|0)]=tempBigInt&0xff;
 var $155=$144;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+32)|0);
 var $158=HEAP32[(($157)>>2)];
 FUNCTION_TABLE[$158]($11,$148);
 var $159=$__nsn;
 var $160=HEAP8[($159)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=35;break;}else{label=34;break;}
 case 34: 
 var $164=(($__nsn+8)|0);
 var $165=HEAP32[(($164)>>2)];
 HEAP32[(($165)>>2)]=0;
 var $166=(($__nsn+4)|0);
 HEAP32[(($166)>>2)]=0;
 label=36;break;
 case 35: 
 var $168=(($__nsn+4)|0);
 HEAP32[(($168)>>2)]=0;
 HEAP8[($159)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $170$0 = ___cxa_find_matching_catch(-1, -1,0); var $170$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($159)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($159)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($159)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
 var $171=HEAP32[(($155)>>2)];
 var $172=(($171+28)|0);
 var $173=HEAP32[(($172)>>2)];
 FUNCTION_TABLE[$173]($13,$148);
 var $174=$__psn;
 var $175=HEAP8[($174)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 if($177){label=40;break;}else{label=39;break;}
 case 39: 
 var $179=(($__psn+8)|0);
 var $180=HEAP32[(($179)>>2)];
 HEAP32[(($180)>>2)]=0;
 var $181=(($__psn+4)|0);
 HEAP32[(($181)>>2)]=0;
 label=41;break;
 case 40: 
 var $183=(($__psn+4)|0);
 HEAP32[(($183)>>2)]=0;
 HEAP8[($174)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $185$0 = ___cxa_find_matching_catch(-1, -1,0); var $185$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($174)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($13);
 var $186=$144;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=FUNCTION_TABLE[$189]($148);
 HEAP32[(($__dp)>>2)]=$190;
 var $191=HEAP32[(($186)>>2)];
 var $192=(($191+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=FUNCTION_TABLE[$193]($148);
 HEAP32[(($__ts)>>2)]=$194;
 var $195=$144;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+20)|0);
 var $198=HEAP32[(($197)>>2)];
 FUNCTION_TABLE[$198]($15,$148);
 var $199=$__grp;
 var $200=HEAP8[($199)];
 var $201=$200&1;
 var $202=(($201<<24)>>24)==0;
 if($202){label=45;break;}else{label=44;break;}
 case 44: 
 var $204=(($__grp+8)|0);
 var $205=HEAP32[(($204)>>2)];
 HEAP8[($205)]=0;
 var $206=(($__grp+4)|0);
 HEAP32[(($206)>>2)]=0;
 label=46;break;
 case 45: 
 var $208=$__grp;
 var $209=(($208+1)|0);
 HEAP8[($209)]=0;
 HEAP8[($199)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $211$0 = ___cxa_find_matching_catch(-1, -1,0); var $211$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($199)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($199)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($199)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 var $212=HEAP32[(($155)>>2)];
 var $213=(($212+24)|0);
 var $214=HEAP32[(($213)>>2)];
 FUNCTION_TABLE[$214]($17,$148);
 var $215=$__sym;
 var $216=HEAP8[($215)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=50;break;}else{label=49;break;}
 case 49: 
 var $220=(($__sym+8)|0);
 var $221=HEAP32[(($220)>>2)];
 HEAP32[(($221)>>2)]=0;
 var $222=(($__sym+4)|0);
 HEAP32[(($222)>>2)]=0;
 label=51;break;
 case 50: 
 var $224=(($__sym+4)|0);
 HEAP32[(($224)>>2)]=0;
 HEAP8[($215)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $226$0 = ___cxa_find_matching_catch(-1, -1,0); var $226$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($215)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($17);
 var $227=HEAP32[(($186)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($148);
 var $storemerge=$230;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((446)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $12=$10?$11:-1;
 var $13=HEAP32[(($__n)>>2)];
 var $14=$13;
 var $15=((($14)-($8))|0);
 var $16=$15>>2;
 if($3){label=2;break;}else{var $19=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $19=$phitmp;label=3;break;
 case 3: 
 var $19;
 var $20=_realloc($19,$12);
 var $21=$20;
 var $22=($20|0)==0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 __ZSt17__throw_bad_allocv();
 label=5;break;
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$21;
 var $32=$21;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$21;
 var $26=($_pr|0)==0;
 if($26){var $32=$21;label=11;break;}else{label=8;break;}
 case 8: 
 var $28=HEAP32[(($1)>>2)];
 var $29=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $32=$_pre;label=11;break;
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 11: 
 var $32;
 HEAP32[(($1)>>2)]=228;
 var $33=$12>>>2;
 var $34=(($32+($16<<2))|0);
 HEAP32[(($__n)>>2)]=$34;
 var $35=HEAP32[(($5)>>2)];
 var $36=(($35+($33<<2))|0);
 HEAP32[(($__e)>>2)]=$36;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(232);
 var $__pat=(sp)+(240);
 var $__dp=(sp)+(248);
 var $__ts=(sp)+(256);
 var $__grp=(sp)+(264);
 var $__grp289=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$4;
 var $5=(($__digits)|0);
 var $6=_snprintf($4,100,4952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6>>>0)>99;
 if($7){label=2;break;}else{var $__db_0=$5;var $__n_0=$6;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $9=HEAP8[(18504)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=___cxa_guard_acquire(18504);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$15;
 label=7;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $eh_lpad_body$1=$18$1;var $eh_lpad_body$0=$18$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $20=HEAP32[((16504)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$20,4952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $23=HEAP32[(($__bb)>>2)];
 var $24=($23|0)==0;
 if($24){label=9;break;}else{var $30=$23;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $30=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $28=$eh_lpad_body$0;
 var $29=$eh_lpad_body$1;
 var $_2=$29;var $_2255=$28;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=60;break;
 case 13: 
 var $30;
 var $31=_malloc($21);
 var $32=($31|0)==0;
 if($32){label=14;break;}else{var $__db_0=$31;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$31;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=0;label=15;break; } else { var $__hn_sroa_0_0=$30;var $__hd_sroa_0_0=0;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $36=(($__loc)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$__p_i_i_i;
 var $39=HEAP32[((17944)>>2)];
 var $40=($39|0)==-1;
 if($40){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$38,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $42=HEAP32[((17948)>>2)];
 var $43=((($42)-(1))|0);
 var $44=(($37+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($37+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$45;
 var $49=$47;
 var $50=((($48)-($49))|0);
 var $51=$50>>2;
 var $52=($51>>>0)>($43>>>0);
 if($52){label=19;break;}else{label=20;break;}
 case 19: 
 var $53=(($47+($43<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==0;
 if($55){label=20;break;}else{label=22;break;}
 case 20: 
 var $56=___cxa_allocate_exception(4);
 var $57=$56;
 __ZNSt8bad_castC2Ev($57);
 (function() { try { __THREW__ = 0; return ___cxa_throw($56,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $58=$54;
 var $59=HEAP32[(($__bb)>>2)];
 var $60=(($59+$__n_0)|0);
 var $61=$54;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+32)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($58,$59,$60,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $66=($__n_0|0)==0;
 if($66){var $71=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $68=HEAP32[(($__bb)>>2)];
 var $69=HEAP8[($68)];
 var $70=(($69<<24)>>24)==45;
 var $71=$70;label=25;break;
 case 25: 
 var $71;
 HEAP32[(($__grp289)>>2)]=0; HEAP32[((($__grp289)+(4))>>2)]=0; HEAP32[((($__grp289)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$71,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $73=(($__mbuf)|0);
 var $74=HEAP32[(($__fd)>>2)];
 var $75=($__n_0|0)>($74|0);
 if($75){label=27;break;}else{label=34;break;}
 case 27: 
 var $77=((($__n_0)-($74))|0);
 var $78=$77<<1;
 var $79=HEAP8[($2)];
 var $80=($79&255);
 var $81=$80&1;
 var $82=($81|0)==0;
 if($82){label=29;break;}else{label=28;break;}
 case 28: 
 var $84=(($__sn+4)|0);
 var $85=HEAP32[(($84)>>2)];
 var $88=$85;label=30;break;
 case 29: 
 var $87=$80>>>1;
 var $88=$87;label=30;break;
 case 30: 
 var $88;
 var $89=HEAP8[($1)];
 var $90=($89&255);
 var $91=$90&1;
 var $92=($91|0)==0;
 if($92){label=32;break;}else{label=31;break;}
 case 31: 
 var $94=(($__sym+4)|0);
 var $95=HEAP32[(($94)>>2)];
 var $98=$95;label=33;break;
 case 32: 
 var $97=$90>>>1;
 var $98=$97;label=33;break;
 case 33: 
 var $98;
 var $99=$78|1;
 var $100=((($99)+($88))|0);
 var $101=((($100)+($98))|0);
 var $_pn=$101;label=41;break;
 case 34: 
 var $103=HEAP8[($2)];
 var $104=($103&255);
 var $105=$104&1;
 var $106=($105|0)==0;
 if($106){label=36;break;}else{label=35;break;}
 case 35: 
 var $108=(($__sn+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $112=$109;label=37;break;
 case 36: 
 var $111=$104>>>1;
 var $112=$111;label=37;break;
 case 37: 
 var $112;
 var $113=HEAP8[($1)];
 var $114=($113&255);
 var $115=$114&1;
 var $116=($115|0)==0;
 if($116){label=39;break;}else{label=38;break;}
 case 38: 
 var $118=(($__sym+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $122=$119;label=40;break;
 case 39: 
 var $121=$114>>>1;
 var $122=$121;label=40;break;
 case 40: 
 var $122;
 var $123=((($112)+(2))|0);
 var $124=((($123)+($122))|0);
 var $_pn=$124;label=41;break;
 case 41: 
 var $_pn;
 var $126=((($_pn)+($74))|0);
 var $127=($126>>>0)>100;
 if($127){label=42;break;}else{var $__mb_0=$73;var $__hw_sroa_0_1=0;label=49;break;}
 case 42: 
 var $128=_malloc($126);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__mb_0=$128;var $__hw_sroa_0_1=$128;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $__hw_sroa_0_1=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 var $_0=$133;var $_0253=$132;label=58;break;
 case 45: 
 var $135$0 = ___cxa_find_matching_catch(-1, -1); var $135$1 = tempRet0;
 var $136=$135$0;
 var $137=$135$1;
 var $_1=$137;var $_1254=$136;label=59;break;
 case 46: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1); var $139$1 = tempRet0;
 var $140=$139$0;
 var $141=$139$1;
 var $_0=$141;var $_0253=$140;label=58;break;
 case 47: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $146=($__hw_sroa_0_1|0)==0;
 if($146){var $_0=$145;var $_0253=$144;label=58;break;}else{label=48;break;}
 case 48: 
 _free($__hw_sroa_0_1);
 var $_0=$145;var $_0253=$144;label=58;break;
 case 49: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $149=(($__iob+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($__db_0+$__n_0)|0);
 var $152=HEAP8[($__dp)];
 var $153=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$150,$__db_0,$151,$58,$71,$__pat,$152,$153,$__grp,$__sym,$__sn,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $155=(($__s)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($3)|0);
 HEAP32[(($157)>>2)]=$156;
 var $158=HEAP32[(($__mi)>>2)];
 var $159=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$158,$159,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $161=($__hw_sroa_0_1|0)==0;
 if($161){label=53;break;}else{label=52;break;}
 case 52: 
 _free($__hw_sroa_0_1);
 label=53;break;
 case 53: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $163=HEAP32[(($36)>>2)];
 var $164=(($163)|0);
 var $165=__ZNSt3__114__shared_count16__release_sharedEv($164);
 var $166=($__hd_sroa_0_1|0)==0;
 if($166){label=55;break;}else{label=54;break;}
 case 54: 
 _free($__hd_sroa_0_1);
 label=55;break;
 case 55: 
 var $168=($__hn_sroa_0_1|0)==0;
 if($168){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__hn_sroa_0_1);
 label=57;break;
 case 57: 
 STACKTOP=sp;return;
 case 58: 
 var $_0253;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1254=$_0253;label=59;break;
 case 59: 
 var $_1254;
 var $_1;
 var $171=HEAP32[(($36)>>2)];
 var $172=(($171)|0);
 var $173=__ZNSt3__114__shared_count16__release_sharedEv($172);
 var $_2=$_1;var $_2255=$_1254;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=60;break;
 case 60: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_2255;
 var $_2;
 var $175=($__hd_sroa_0_2|0)==0;
 if($175){label=62;break;}else{label=61;break;}
 case 61: 
 _free($__hd_sroa_0_2);
 label=62;break;
 case 62: 
 var $177=($__hn_sroa_0_2|0)==0;
 if($177){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__hn_sroa_0_2);
 label=64;break;
 case 64: 
 var $179$0=$_2255;
 var $179$1=0;
 var $180$0=$179$0;
 var $180$1=$_2;
 ___resumeException($180$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i519=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast518=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast517=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast516=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 var $21=(($__loc)|0);
 var $22=HEAP32[(($21)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $24=$__p_i_i_i;
 var $25=HEAP32[((18416)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18416;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18416,$24,270);
 label=4;break;
 case 4: 
 var $28=HEAP32[((18420)>>2)];
 var $29=((($28)-(1))|0);
 var $30=(($22+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($22+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$31;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=$36>>2;
 var $38=($37>>>0)>($29>>>0);
 if($38){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=(($33+($29<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 __ZNSt8bad_castC2Ev($43);
 ___cxa_throw($42,12744,(374));
 throw "Reached an unreachable!";
 case 7: 
 var $44=$40;
 var $45=$40;
 var $46=HEAP32[(($45)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $48=(($46+44)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($tmpcast518,$44);
 var $50=$__pat;
 var $51=HEAP32[(($1)>>2)];
 tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $52=$40;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+32)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($2,$44);
 var $56=$__sn;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=10;break;}else{label=9;break;}
 case 9: 
 var $61=(($__sn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP8[($62)]=0;
 var $63=(($__sn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=11;break;
 case 10: 
 var $65=$__sn;
 var $66=(($65+1)|0);
 HEAP8[($66)]=0;
 HEAP8[($56)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 label=20;break;
 case 14: 
 var $70=(($46+40)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($tmpcast517,$44);
 var $72=$__pat;
 var $73=HEAP32[(($4)>>2)];
 tempBigInt=$73;HEAP8[($72)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($72)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($72)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($72)+(3))|0)]=tempBigInt&0xff;
 var $74=$40;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+28)|0);
 var $77=HEAP32[(($76)>>2)];
 FUNCTION_TABLE[$77]($5,$44);
 var $78=$__sn;
 var $79=HEAP8[($78)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=16;break;}else{label=15;break;}
 case 15: 
 var $83=(($__sn+8)|0);
 var $84=HEAP32[(($83)>>2)];
 HEAP8[($84)]=0;
 var $85=(($__sn+4)|0);
 HEAP32[(($85)>>2)]=0;
 label=17;break;
 case 16: 
 var $87=$__sn;
 var $88=(($87+1)|0);
 HEAP8[($88)]=0;
 HEAP8[($78)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $90$0 = ___cxa_find_matching_catch(-1, -1,0); var $90$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 label=20;break;
 case 20: 
 var $92=$40;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($44);
 HEAP8[($__dp)]=$96;
 var $97=HEAP32[(($92)>>2)];
 var $98=(($97+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=FUNCTION_TABLE[$99]($44);
 HEAP8[($__ts)]=$100;
 var $101=$40;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+20)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($7,$44);
 var $105=$__grp;
 var $106=HEAP8[($105)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=22;break;}else{label=21;break;}
 case 21: 
 var $110=(($__grp+8)|0);
 var $111=HEAP32[(($110)>>2)];
 HEAP8[($111)]=0;
 var $112=(($__grp+4)|0);
 HEAP32[(($112)>>2)]=0;
 label=23;break;
 case 22: 
 var $114=$__grp;
 var $115=(($114+1)|0);
 HEAP8[($115)]=0;
 HEAP8[($105)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $117$0 = ___cxa_find_matching_catch(-1, -1,0); var $117$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($105)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($105)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($105)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $118=HEAP32[(($101)>>2)];
 var $119=(($118+24)|0);
 var $120=HEAP32[(($119)>>2)];
 FUNCTION_TABLE[$120]($9,$44);
 var $121=$__sym;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=27;break;}else{label=26;break;}
 case 26: 
 var $126=(($__sym+8)|0);
 var $127=HEAP32[(($126)>>2)];
 HEAP8[($127)]=0;
 var $128=(($__sym+4)|0);
 HEAP32[(($128)>>2)]=0;
 label=28;break;
 case 27: 
 var $130=$__sym;
 var $131=(($130+1)|0);
 HEAP8[($131)]=0;
 HEAP8[($121)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1,0); var $133$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
 var $134=$40;
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+36)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=FUNCTION_TABLE[$137]($44);
 var $storemerge=$138;label=60;break;
 case 31: 
 var $140=$__p_i_i_i519;
 var $141=HEAP32[((18424)>>2)];
 var $142=($141|0)==-1;
 if($142){label=33;break;}else{label=32;break;}
 case 32: 
 var $_sroa_016_0__idx_i_i520=(($__p_i_i_i519)|0);
 HEAP32[(($_sroa_016_0__idx_i_i520)>>2)]=18424;
 var $_sroa_117_4__idx18_i_i521=(($__p_i_i_i519+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i521)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i522=(($__p_i_i_i519+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i522)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18424,$140,270);
 label=33;break;
 case 33: 
 var $144=HEAP32[((18428)>>2)];
 var $145=((($144)-(1))|0);
 var $146=(($22+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($22+8)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$147;
 var $151=$149;
 var $152=((($150)-($151))|0);
 var $153=$152>>2;
 var $154=($153>>>0)>($145>>>0);
 if($154){label=34;break;}else{label=35;break;}
 case 34: 
 var $155=(($149+($145<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){label=35;break;}else{label=36;break;}
 case 35: 
 var $158=___cxa_allocate_exception(4);
 var $159=$158;
 __ZNSt8bad_castC2Ev($159);
 ___cxa_throw($158,12744,(374));
 throw "Reached an unreachable!";
 case 36: 
 var $160=$156;
 var $161=$156;
 var $162=HEAP32[(($161)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $164=(($162+44)|0);
 var $165=HEAP32[(($164)>>2)];
 FUNCTION_TABLE[$165]($tmpcast516,$160);
 var $166=$__pat;
 var $167=HEAP32[(($11)>>2)];
 tempBigInt=$167;HEAP8[($166)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(3))|0)]=tempBigInt&0xff;
 var $168=$156;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+32)|0);
 var $171=HEAP32[(($170)>>2)];
 FUNCTION_TABLE[$171]($12,$160);
 var $172=$__sn;
 var $173=HEAP8[($172)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){label=39;break;}else{label=38;break;}
 case 38: 
 var $177=(($__sn+8)|0);
 var $178=HEAP32[(($177)>>2)];
 HEAP8[($178)]=0;
 var $179=(($__sn+4)|0);
 HEAP32[(($179)>>2)]=0;
 label=40;break;
 case 39: 
 var $181=$__sn;
 var $182=(($181+1)|0);
 HEAP8[($182)]=0;
 HEAP8[($172)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $184$0 = ___cxa_find_matching_catch(-1, -1,0); var $184$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($172)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($172)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
 label=49;break;
 case 43: 
 var $186=(($162+40)|0);
 var $187=HEAP32[(($186)>>2)];
 FUNCTION_TABLE[$187]($tmpcast,$160);
 var $188=$__pat;
 var $189=HEAP32[(($14)>>2)];
 tempBigInt=$189;HEAP8[($188)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($188)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($188)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($188)+(3))|0)]=tempBigInt&0xff;
 var $190=$156;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+28)|0);
 var $193=HEAP32[(($192)>>2)];
 FUNCTION_TABLE[$193]($15,$160);
 var $194=$__sn;
 var $195=HEAP8[($194)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=45;break;}else{label=44;break;}
 case 44: 
 var $199=(($__sn+8)|0);
 var $200=HEAP32[(($199)>>2)];
 HEAP8[($200)]=0;
 var $201=(($__sn+4)|0);
 HEAP32[(($201)>>2)]=0;
 label=46;break;
 case 45: 
 var $203=$__sn;
 var $204=(($203+1)|0);
 HEAP8[($204)]=0;
 HEAP8[($194)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $206$0 = ___cxa_find_matching_catch(-1, -1,0); var $206$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($194)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($194)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($194)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($15);
 label=49;break;
 case 49: 
 var $208=$156;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=FUNCTION_TABLE[$211]($160);
 HEAP8[($__dp)]=$212;
 var $213=HEAP32[(($208)>>2)];
 var $214=(($213+16)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=FUNCTION_TABLE[$215]($160);
 HEAP8[($__ts)]=$216;
 var $217=$156;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+20)|0);
 var $220=HEAP32[(($219)>>2)];
 FUNCTION_TABLE[$220]($17,$160);
 var $221=$__grp;
 var $222=HEAP8[($221)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=51;break;}else{label=50;break;}
 case 50: 
 var $226=(($__grp+8)|0);
 var $227=HEAP32[(($226)>>2)];
 HEAP8[($227)]=0;
 var $228=(($__grp+4)|0);
 HEAP32[(($228)>>2)]=0;
 label=52;break;
 case 51: 
 var $230=$__grp;
 var $231=(($230+1)|0);
 HEAP8[($231)]=0;
 HEAP8[($221)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $233$0 = ___cxa_find_matching_catch(-1, -1,0); var $233$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($221)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($221)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($221)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $234=HEAP32[(($217)>>2)];
 var $235=(($234+24)|0);
 var $236=HEAP32[(($235)>>2)];
 FUNCTION_TABLE[$236]($19,$160);
 var $237=$__sym;
 var $238=HEAP8[($237)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=56;break;}else{label=55;break;}
 case 55: 
 var $242=(($__sym+8)|0);
 var $243=HEAP32[(($242)>>2)];
 HEAP8[($243)]=0;
 var $244=(($__sym+4)|0);
 HEAP32[(($244)>>2)]=0;
 label=57;break;
 case 56: 
 var $246=$__sym;
 var $247=(($246+1)|0);
 HEAP8[($247)]=0;
 HEAP8[($237)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $249$0 = ___cxa_find_matching_catch(-1, -1,0); var $249$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($237)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($237)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($237)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($19);
 var $250=$156;
 var $251=HEAP32[(($250)>>2)];
 var $252=(($251+36)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=FUNCTION_TABLE[$253]($160);
 var $storemerge=$254;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($2+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__sym;
 var $9=$__flags&512;
 var $10=($9|0)==0;
 var $11=(($7+1)|0);
 var $12=(($__sym+4)|0);
 var $13=(($__sym+8)|0);
 var $14=(($__ct+8)|0);
 var $15=($__fd|0)>0;
 var $16=$__grp;
 var $17=$__grp;
 var $18=(($16+1)|0);
 var $19=(($__grp+8)|0);
 var $20=(($__grp+4)|0);
 var $21=(((-$__fd))|0);
 var $_0362405=$__db;var $__p_0406=0;label=2;break;
 case 2: 
 var $__p_0406;
 var $_0362405;
 var $23=(($__pat+$__p_0406)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_0362405;label=62;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_0362405;label=62;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_0362405;label=62;break;
 case 5: 
 var $37=HEAP8[($3)];
 var $38=($37&255);
 var $39=$38&1;
 var $40=($39|0)==0;
 if($40){label=7;break;}else{label=6;break;}
 case 6: 
 var $42=HEAP32[(($6)>>2)];
 var $45=$42;label=8;break;
 case 7: 
 var $44=$38>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_0362405;label=62;break;}else{label=9;break;}
 case 9: 
 var $48=$37&1;
 var $49=(($48<<24)>>24)==0;
 if($49){var $52=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $51=HEAP32[(($5)>>2)];
 var $52=$51;label=11;break;
 case 11: 
 var $52;
 var $53=HEAP8[($52)];
 var $54=HEAP32[(($__me)>>2)];
 var $55=(($54+1)|0);
 HEAP32[(($__me)>>2)]=$55;
 HEAP8[($54)]=$53;
 var $_2=$_0362405;label=62;break;
 case 12: 
 var $57=HEAP8[($8)];
 var $58=($57&255);
 var $59=$58&1;
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($12)>>2)];
 var $65=$62;label=15;break;
 case 14: 
 var $64=$58>>>1;
 var $65=$64;label=15;break;
 case 15: 
 var $65;
 var $66=($65|0)==0;
 var $brmerge=$66|$10;
 if($brmerge){var $_2=$_0362405;label=62;break;}else{label=16;break;}
 case 16: 
 var $68=$57&1;
 var $69=(($68<<24)>>24)==0;
 if($69){var $73=$11;var $72=$11;label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($13)>>2)];
 var $73=$71;var $72=$71;label=18;break;
 case 18: 
 var $72;
 var $73;
 if($60){label=20;break;}else{label=19;break;}
 case 19: 
 var $75=HEAP32[(($12)>>2)];
 var $78=$75;label=21;break;
 case 20: 
 var $77=$58>>>1;
 var $78=$77;label=21;break;
 case 21: 
 var $78;
 var $79=(($73+$78)|0);
 var $80=HEAP32[(($__me)>>2)];
 var $81=($72|0)==($79|0);
 if($81){var $_0_lcssa=$80;label=23;break;}else{var $_sroa_0363_0401=$72;var $_0402=$80;label=22;break;}
 case 22: 
 var $_0402;
 var $_sroa_0363_0401;
 var $82=HEAP8[($_sroa_0363_0401)];
 HEAP8[($_0402)]=$82;
 var $83=(($_sroa_0363_0401+1)|0);
 var $84=(($_0402+1)|0);
 var $85=($83|0)==($79|0);
 if($85){var $_0_lcssa=$84;label=23;break;}else{var $_sroa_0363_0401=$83;var $_0402=$84;label=22;break;}
 case 23: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_0362405;label=62;break;
 case 24: 
 var $87=HEAP32[(($__me)>>2)];
 var $88=(($_0362405+1)|0);
 var $__0362=$__neg?$88:$_0362405;
 var $__d_0=$__0362;label=25;break;
 case 25: 
 var $__d_0;
 var $90=($__d_0>>>0)<($__de>>>0);
 if($90){label=26;break;}else{label=28;break;}
 case 26: 
 var $92=HEAP8[($__d_0)];
 var $93=(($92<<24)>>24)<0;
 if($93){label=28;break;}else{label=27;break;}
 case 27: 
 var $94=(($92<<24)>>24);
 var $95=HEAP32[(($14)>>2)];
 var $96=(($95+($94<<1))|0);
 var $97=HEAP16[(($96)>>1)];
 var $98=$97&2048;
 var $phitmp=(($98<<16)>>16)==0;
 var $99=(($__d_0+1)|0);
 if($phitmp){label=28;break;}else{var $__d_0=$99;label=25;break;}
 case 28: 
 var $__d_0_lcssa413=$__d_0;
 if($15){label=29;break;}else{var $__d_2=$__d_0;label=38;break;}
 case 29: 
 var $100=($__d_0>>>0)>($__0362>>>0);
 if($100){label=30;break;}else{var $__f_0_lcssa427=$__fd;var $__d_1_lcssa429=$__d_0;label=34;break;}
 case 30: 
 var $101=(((-$__d_0_lcssa413))|0);
 var $scevgep=(($__0362+$101)|0);
 var $scevgep414=$scevgep;
 var $102=($scevgep414>>>0)<($21>>>0);
 var $umax=$102?$21:$scevgep414;
 var $umax415=$umax;
 var $scevgep416=(($umax415+$__fd)|0);
 var $scevgep416417=$scevgep416;
 var $__d_1382=$__d_0;var $__f_0383=$__fd;var $104=$87;label=31;break;
 case 31: 
 var $104;
 var $__f_0383;
 var $__d_1382;
 var $105=((($__d_1382)-(1))|0);
 var $106=HEAP8[($105)];
 var $107=(($104+1)|0);
 HEAP32[(($__me)>>2)]=$107;
 HEAP8[($104)]=$106;
 var $108=((($__f_0383)-(1))|0);
 var $109=($105>>>0)>($__0362>>>0);
 var $110=($108|0)>0;
 var $or_cond=$109&$110;
 if($or_cond){label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_1382=$105;var $__f_0383=$108;var $104=$_pre;label=31;break;
 case 33: 
 var $scevgep418=(($__d_0+$umax)|0);
 if($110){var $__f_0_lcssa427=$scevgep416417;var $__d_1_lcssa429=$scevgep418;label=34;break;}else{var $115=0;var $__f_0_lcssa426=$scevgep416417;var $__d_1_lcssa428=$scevgep418;label=35;break;}
 case 34: 
 var $__d_1_lcssa429;
 var $__f_0_lcssa427;
 var $111=HEAP32[(($1)>>2)];
 var $112=(($111+28)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=FUNCTION_TABLE[$113]($__ct,48);
 var $115=$114;var $__f_0_lcssa426=$__f_0_lcssa427;var $__d_1_lcssa428=$__d_1_lcssa429;label=35;break;
 case 35: 
 var $__d_1_lcssa428;
 var $__f_0_lcssa426;
 var $115;
 var $116=($__f_0_lcssa426|0)>0;
 var $117=HEAP32[(($__me)>>2)];
 var $118=(($117+1)|0);
 HEAP32[(($__me)>>2)]=$118;
 if($116){var $__f_1389=$__f_0_lcssa426;var $119=$117;label=36;break;}else{var $_lcssa388=$117;label=37;break;}
 case 36: 
 var $119;
 var $__f_1389;
 HEAP8[($119)]=$115;
 var $120=((($__f_1389)-(1))|0);
 var $121=($120|0)>0;
 var $122=HEAP32[(($__me)>>2)];
 var $123=(($122+1)|0);
 HEAP32[(($__me)>>2)]=$123;
 if($121){var $__f_1389=$120;var $119=$122;label=36;break;}else{var $_lcssa388=$122;label=37;break;}
 case 37: 
 var $_lcssa388;
 HEAP8[($_lcssa388)]=$__dp;
 var $__d_2=$__d_1_lcssa428;label=38;break;
 case 38: 
 var $__d_2;
 var $125=($__d_2|0)==($__0362|0);
 if($125){label=39;break;}else{label=40;break;}
 case 39: 
 var $127=HEAP32[(($1)>>2)];
 var $128=(($127+28)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=FUNCTION_TABLE[$129]($__ct,48);
 var $131=HEAP32[(($__me)>>2)];
 var $132=(($131+1)|0);
 HEAP32[(($__me)>>2)]=$132;
 HEAP8[($131)]=$130;
 label=59;break;
 case 40: 
 var $134=HEAP8[($17)];
 var $135=($134&255);
 var $136=$135&1;
 var $137=($136|0)==0;
 if($137){label=42;break;}else{label=41;break;}
 case 41: 
 var $139=HEAP32[(($20)>>2)];
 var $142=$139;label=43;break;
 case 42: 
 var $141=$135>>>1;
 var $142=$141;label=43;break;
 case 43: 
 var $142;
 var $143=($142|0)==0;
 if($143){var $__d_3393=$__d_2;var $__ng_0394=0;var $__ig_0395=0;var $__gl_0396=-1;label=47;break;}else{label=44;break;}
 case 44: 
 var $145=$134&1;
 var $146=(($145<<24)>>24)==0;
 if($146){var $149=$18;label=46;break;}else{label=45;break;}
 case 45: 
 var $148=HEAP32[(($19)>>2)];
 var $149=$148;label=46;break;
 case 46: 
 var $149;
 var $150=HEAP8[($149)];
 var $151=(($150<<24)>>24);
 var $__d_3393=$__d_2;var $__ng_0394=0;var $__ig_0395=0;var $__gl_0396=$151;label=47;break;
 case 47: 
 var $__gl_0396;
 var $__ig_0395;
 var $__ng_0394;
 var $__d_3393;
 var $152=($__ng_0394|0)==($__gl_0396|0);
 if($152){label=48;break;}else{var $__gl_1=$__gl_0396;var $__ig_1=$__ig_0395;var $__ng_1=$__ng_0394;label=58;break;}
 case 48: 
 var $154=HEAP32[(($__me)>>2)];
 var $155=(($154+1)|0);
 HEAP32[(($__me)>>2)]=$155;
 HEAP8[($154)]=$__ts;
 var $156=((($__ig_0395)+(1))|0);
 var $157=HEAP8[($17)];
 var $158=($157&255);
 var $159=$158&1;
 var $160=($159|0)==0;
 if($160){label=50;break;}else{label=49;break;}
 case 49: 
 var $162=HEAP32[(($20)>>2)];
 var $165=$162;label=51;break;
 case 50: 
 var $164=$158>>>1;
 var $165=$164;label=51;break;
 case 51: 
 var $165;
 var $166=($156>>>0)<($165>>>0);
 if($166){label=52;break;}else{var $__gl_1=$__gl_0396;var $__ig_1=$156;var $__ng_1=0;label=58;break;}
 case 52: 
 var $168=$157&1;
 var $169=(($168<<24)>>24)==0;
 if($169){var $172=$18;label=54;break;}else{label=53;break;}
 case 53: 
 var $171=HEAP32[(($19)>>2)];
 var $172=$171;label=54;break;
 case 54: 
 var $172;
 var $173=(($172+$156)|0);
 var $174=HEAP8[($173)];
 var $175=(($174<<24)>>24)==127;
 if($175){var $__gl_1=-1;var $__ig_1=$156;var $__ng_1=0;label=58;break;}else{label=55;break;}
 case 55: 
 if($169){var $179=$18;label=57;break;}else{label=56;break;}
 case 56: 
 var $178=HEAP32[(($19)>>2)];
 var $179=$178;label=57;break;
 case 57: 
 var $179;
 var $180=(($179+$156)|0);
 var $181=HEAP8[($180)];
 var $182=(($181<<24)>>24);
 var $__gl_1=$182;var $__ig_1=$156;var $__ng_1=0;label=58;break;
 case 58: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $183=((($__d_3393)-(1))|0);
 var $184=HEAP8[($183)];
 var $185=HEAP32[(($__me)>>2)];
 var $186=(($185+1)|0);
 HEAP32[(($__me)>>2)]=$186;
 HEAP8[($185)]=$184;
 var $187=((($__ng_1)+(1))|0);
 var $188=($183|0)==($__0362|0);
 if($188){label=59;break;}else{var $__d_3393=$183;var $__ng_0394=$187;var $__ig_0395=$__ig_1;var $__gl_0396=$__gl_1;label=47;break;}
 case 59: 
 var $189=HEAP32[(($__me)>>2)];
 var $190=($87|0)==($189|0);
 if($190){var $_2=$__0362;label=62;break;}else{label=60;break;}
 case 60: 
 var $191=((($189)-(1))|0);
 var $192=($87>>>0)<($191>>>0);
 if($192){var $_0359399=$87;var $193=$191;label=61;break;}else{var $_2=$__0362;label=62;break;}
 case 61: 
 var $193;
 var $_0359399;
 var $194=HEAP8[($_0359399)];
 var $195=HEAP8[($193)];
 HEAP8[($_0359399)]=$195;
 HEAP8[($193)]=$194;
 var $196=(($_0359399+1)|0);
 var $197=((($193)-(1))|0);
 var $198=($196>>>0)<($197>>>0);
 if($198){var $_0359399=$196;var $193=$197;label=61;break;}else{var $_2=$__0362;label=62;break;}
 case 62: 
 var $_2;
 var $199=((($__p_0406)+(1))|0);
 var $200=($199>>>0)<4;
 if($200){var $_0362405=$_2;var $__p_0406=$199;label=2;break;}else{label=63;break;}
 case 63: 
 var $202=HEAP8[($3)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 if($205){label=65;break;}else{label=64;break;}
 case 64: 
 var $207=HEAP32[(($6)>>2)];
 var $210=$207;label=66;break;
 case 65: 
 var $209=$203>>>1;
 var $210=$209;label=66;break;
 case 66: 
 var $210;
 var $211=($210>>>0)>1;
 if($211){label=67;break;}else{label=75;break;}
 case 67: 
 var $213=$202&1;
 var $214=(($213<<24)>>24)==0;
 if($214){var $218=$4;var $217=$4;label=69;break;}else{label=68;break;}
 case 68: 
 var $216=HEAP32[(($5)>>2)];
 var $218=$216;var $217=$216;label=69;break;
 case 69: 
 var $217;
 var $218;
 if($205){label=71;break;}else{label=70;break;}
 case 70: 
 var $220=HEAP32[(($6)>>2)];
 var $223=$220;label=72;break;
 case 71: 
 var $222=$203>>>1;
 var $223=$222;label=72;break;
 case 72: 
 var $223;
 var $224=(($218+$223)|0);
 var $225=HEAP32[(($__me)>>2)];
 var $_sroa_0372_0378=(($217+1)|0);
 var $226=($_sroa_0372_0378|0)==($224|0);
 if($226){var $_0361_lcssa=$225;label=74;break;}else{var $_0361379=$225;var $_sroa_0372_0380=$_sroa_0372_0378;label=73;break;}
 case 73: 
 var $_sroa_0372_0380;
 var $_0361379;
 var $227=HEAP8[($_sroa_0372_0380)];
 HEAP8[($_0361379)]=$227;
 var $228=(($_0361379+1)|0);
 var $_sroa_0372_0=(($_sroa_0372_0380+1)|0);
 var $229=($_sroa_0372_0|0)==($224|0);
 if($229){var $_0361_lcssa=$228;label=74;break;}else{var $_0361379=$228;var $_sroa_0372_0380=$_sroa_0372_0;label=73;break;}
 case 74: 
 var $_0361_lcssa;
 HEAP32[(($__me)>>2)]=$_0361_lcssa;
 label=75;break;
 case 75: 
 var $231=$__flags&176;
 if(($231|0)==32){ label=76;break;}else if(($231|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $233=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$233;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $__dp=(sp)+(32);
 var $__ts=(sp)+(40);
 var $__grp=(sp)+(48);
 var $__grp246=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $4=(($__loc)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i;
 var $7=HEAP32[((17944)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$6,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $10=HEAP32[((17948)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($5+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($5+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$__digits;
 var $28=$__digits;
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&1;
 var $32=($31|0)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__digits+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=10;break;
 case 9: 
 var $37=$30>>>1;
 var $38=$37;label=10;break;
 case 10: 
 var $38;
 var $39=($38|0)==0;
 if($39){var $56=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $41=$29&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=13;break;}else{label=12;break;}
 case 12: 
 var $44=(($__digits+8)|0);
 var $45=HEAP32[(($44)>>2)];
 var $48=$45;label=14;break;
 case 13: 
 var $47=(($27+1)|0);
 var $48=$47;label=14;break;
 case 14: 
 var $48;
 var $49=HEAP8[($48)];
 var $50=$22;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+28)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($26,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $55=(($49<<24)>>24)==(($54<<24)>>24);
 var $56=$55;label=16;break;
 case 16: 
 var $56;
 HEAP32[(($__grp246)>>2)]=0; HEAP32[((($__grp246)+(4))>>2)]=0; HEAP32[((($__grp246)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$56,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $58=(($__mbuf)|0);
 var $59=HEAP8[($28)];
 var $60=($59&255);
 var $61=$60&1;
 var $62=($61|0)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=(($__digits+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $68=$65;label=20;break;
 case 19: 
 var $67=$60>>>1;
 var $68=$67;label=20;break;
 case 20: 
 var $68;
 var $69=HEAP32[(($__fd)>>2)];
 var $70=($68|0)>($69|0);
 if($70){label=21;break;}else{label=31;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $73=(($__digits+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $77=$74;label=24;break;
 case 23: 
 var $76=$60>>>1;
 var $77=$76;label=24;break;
 case 24: 
 var $77;
 var $78=((($77)-($69))|0);
 var $79=$78<<1;
 var $80=HEAP8[($2)];
 var $81=($80&255);
 var $82=$81&1;
 var $83=($82|0)==0;
 if($83){label=26;break;}else{label=25;break;}
 case 25: 
 var $85=(($__sn+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $89=$86;label=27;break;
 case 26: 
 var $88=$81>>>1;
 var $89=$88;label=27;break;
 case 27: 
 var $89;
 var $90=HEAP8[($1)];
 var $91=($90&255);
 var $92=$91&1;
 var $93=($92|0)==0;
 if($93){label=29;break;}else{label=28;break;}
 case 28: 
 var $95=(($__sym+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $99=$96;label=30;break;
 case 29: 
 var $98=$91>>>1;
 var $99=$98;label=30;break;
 case 30: 
 var $99;
 var $100=$79|1;
 var $101=((($100)+($89))|0);
 var $102=((($101)+($99))|0);
 var $_pn=$102;label=38;break;
 case 31: 
 var $104=HEAP8[($2)];
 var $105=($104&255);
 var $106=$105&1;
 var $107=($106|0)==0;
 if($107){label=33;break;}else{label=32;break;}
 case 32: 
 var $109=(($__sn+4)|0);
 var $110=HEAP32[(($109)>>2)];
 var $113=$110;label=34;break;
 case 33: 
 var $112=$105>>>1;
 var $113=$112;label=34;break;
 case 34: 
 var $113;
 var $114=HEAP8[($1)];
 var $115=($114&255);
 var $116=$115&1;
 var $117=($116|0)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=(($__sym+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $123=$120;label=37;break;
 case 36: 
 var $122=$115>>>1;
 var $123=$122;label=37;break;
 case 37: 
 var $123;
 var $124=((($113)+(2))|0);
 var $125=((($124)+($123))|0);
 var $_pn=$125;label=38;break;
 case 38: 
 var $_pn;
 var $127=((($_pn)+($69))|0);
 var $128=($127>>>0)>100;
 if($128){label=39;break;}else{var $__mb_0=$58;var $__h_sroa_0_1=0;var $150=$59;label=47;break;}
 case 39: 
 var $129=_malloc($127);
 var $130=($129|0)==0;
 if($130){label=40;break;}else{var $__mb_0=$129;var $__h_sroa_0_1=$129;var $150=$59;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($28)];
 var $__mb_0=0;var $__h_sroa_0_1=0;var $150=$_pre;label=47;break;
 case 42: 
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=$132$1;
 var $_0=$134;var $_0231=$133;label=58;break;
 case 43: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_1=$138;var $_1232=$137;label=59;break;
 case 44: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$142;var $_0231=$141;label=58;break;
 case 45: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $147=($__h_sroa_0_1|0)==0;
 if($147){var $_0=$146;var $_0231=$145;label=58;break;}else{label=46;break;}
 case 46: 
 _free($__h_sroa_0_1);
 var $_0=$146;var $_0231=$145;label=58;break;
 case 47: 
 var $150;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $151=(($__iob+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$150&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=49;break;}else{label=48;break;}
 case 48: 
 var $156=(($__digits+8)|0);
 var $157=HEAP32[(($156)>>2)];
 var $162=$157;var $161=$157;label=50;break;
 case 49: 
 var $159=(($27+1)|0);
 var $160=(($27+1)|0);
 var $162=$160;var $161=$159;label=50;break;
 case 50: 
 var $161;
 var $162;
 var $163=($150&255);
 var $164=$163&1;
 var $165=($164|0)==0;
 if($165){label=52;break;}else{label=51;break;}
 case 51: 
 var $167=(($__digits+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $171=$168;label=53;break;
 case 52: 
 var $170=$163>>>1;
 var $171=$170;label=53;break;
 case 53: 
 var $171;
 var $172=(($162+$171)|0);
 var $173=HEAP8[($__dp)];
 var $174=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$152,$161,$172,$26,$56,$__pat,$173,$174,$__grp,$__sym,$__sn,$69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=45;break; }
 case 54: 
 var $176=(($__s)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($3)|0);
 HEAP32[(($178)>>2)]=$177;
 var $179=HEAP32[(($__mi)>>2)];
 var $180=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$179,$180,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=45;break; }
 case 55: 
 var $182=($__h_sroa_0_1|0)==0;
 if($182){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__h_sroa_0_1);
 label=57;break;
 case 57: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $184=HEAP32[(($4)>>2)];
 var $185=(($184)|0);
 var $186=__ZNSt3__114__shared_count16__release_sharedEv($185);
 STACKTOP=sp;return;
 case 58: 
 var $_0231;
 var $_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1232=$_0231;label=59;break;
 case 59: 
 var $_1232;
 var $_1;
 var $188=HEAP32[(($4)>>2)];
 var $189=(($188)|0);
 var $190=__ZNSt3__114__shared_count16__release_sharedEv($189);
 var $191$0=$_1232;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_1;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(528);
 var $__pat=(sp)+(536);
 var $__dp=(sp)+(544);
 var $__ts=(sp)+(552);
 var $__grp=(sp)+(560);
 var $__grp289=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$4;
 var $5=(($__digits)|0);
 var $6=_snprintf($4,100,4952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=($6>>>0)>99;
 if($7){label=2;break;}else{var $__db_0=$5;var $__n_0=$6;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $9=HEAP8[(18504)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 var $12=___cxa_guard_acquire(18504);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((16504)>>2)]=$15;
 label=7;break;
 case 6: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $eh_lpad_body$1=$18$1;var $eh_lpad_body$0=$18$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $20=HEAP32[((16504)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$20,4952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $23=HEAP32[(($__bb)>>2)];
 var $24=($23|0)==0;
 if($24){label=9;break;}else{var $30=$23;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $30=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $28=$eh_lpad_body$0;
 var $29=$eh_lpad_body$1;
 var $_2=$29;var $_2255=$28;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=59;break;
 case 13: 
 var $30;
 var $31=$21<<2;
 var $32=_malloc($31);
 var $33=$32;
 var $34=($32|0)==0;
 if($34){label=14;break;}else{var $__db_0=$33;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$33;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=$33;var $__n_0=$21;var $__hn_sroa_0_1=$30;var $__hd_sroa_0_1=$33;label=15;break; } else { var $__hn_sroa_0_0=$30;var $__hd_sroa_0_0=$33;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $38=(($__loc)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$__p_i_i_i;
 var $41=HEAP32[((17936)>>2)];
 var $42=($41|0)==-1;
 if($42){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$40,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=44;break; }
 case 18: 
 var $44=HEAP32[((17940)>>2)];
 var $45=((($44)-(1))|0);
 var $46=(($39+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($39+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$47;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=$52>>2;
 var $54=($53>>>0)>($45>>>0);
 if($54){label=19;break;}else{label=20;break;}
 case 19: 
 var $55=(($49+($45<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=20;break;}else{label=22;break;}
 case 20: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 __ZNSt8bad_castC2Ev($59);
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=44;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $60=$56;
 var $61=HEAP32[(($__bb)>>2)];
 var $62=(($61+$__n_0)|0);
 var $63=$56;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+48)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]($60,$61,$62,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=44;break; }
 case 23: 
 var $68=($__n_0|0)==0;
 if($68){var $73=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $70=HEAP32[(($__bb)>>2)];
 var $71=HEAP8[($70)];
 var $72=(($71<<24)>>24)==45;
 var $73=$72;label=25;break;
 case 25: 
 var $73;
 HEAP32[(($__grp289)>>2)]=0; HEAP32[((($__grp289)+(4))>>2)]=0; HEAP32[((($__grp289)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$73,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=45;break; }
 case 26: 
 var $75=(($__mbuf)|0);
 var $76=HEAP32[(($__fd)>>2)];
 var $77=($__n_0|0)>($76|0);
 if($77){label=27;break;}else{label=34;break;}
 case 27: 
 var $79=((($__n_0)-($76))|0);
 var $80=$79<<1;
 var $81=HEAP8[($2)];
 var $82=($81&255);
 var $83=$82&1;
 var $84=($83|0)==0;
 if($84){label=29;break;}else{label=28;break;}
 case 28: 
 var $86=(($__sn+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $90=$87;label=30;break;
 case 29: 
 var $89=$82>>>1;
 var $90=$89;label=30;break;
 case 30: 
 var $90;
 var $91=HEAP8[($1)];
 var $92=($91&255);
 var $93=$92&1;
 var $94=($93|0)==0;
 if($94){label=32;break;}else{label=31;break;}
 case 31: 
 var $96=(($__sym+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $100=$97;label=33;break;
 case 32: 
 var $99=$92>>>1;
 var $100=$99;label=33;break;
 case 33: 
 var $100;
 var $101=$80|1;
 var $102=((($101)+($90))|0);
 var $103=((($102)+($100))|0);
 var $_pn=$103;label=41;break;
 case 34: 
 var $105=HEAP8[($2)];
 var $106=($105&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 if($108){label=36;break;}else{label=35;break;}
 case 35: 
 var $110=(($__sn+4)|0);
 var $111=HEAP32[(($110)>>2)];
 var $114=$111;label=37;break;
 case 36: 
 var $113=$106>>>1;
 var $114=$113;label=37;break;
 case 37: 
 var $114;
 var $115=HEAP8[($1)];
 var $116=($115&255);
 var $117=$116&1;
 var $118=($117|0)==0;
 if($118){label=39;break;}else{label=38;break;}
 case 38: 
 var $120=(($__sym+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $124=$121;label=40;break;
 case 39: 
 var $123=$116>>>1;
 var $124=$123;label=40;break;
 case 40: 
 var $124;
 var $125=((($114)+(2))|0);
 var $126=((($125)+($124))|0);
 var $_pn=$126;label=41;break;
 case 41: 
 var $_pn;
 var $128=((($_pn)+($76))|0);
 var $129=($128>>>0)>100;
 if($129){label=42;break;}else{var $__mb_0=$75;var $__hw_sroa_0_1=0;label=48;break;}
 case 42: 
 var $130=$128<<2;
 var $131=_malloc($130);
 var $132=$131;
 var $133=($131|0)==0;
 if($133){label=43;break;}else{var $__mb_0=$132;var $__hw_sroa_0_1=$132;label=48;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=$132;var $__hw_sroa_0_1=$132;label=48;break; } else { var $__hw_sroa_0_0=$132;label=46;break; }
 case 44: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;
 var $137=$136$0;
 var $138=$136$1;
 var $_1=$138;var $_1254=$137;label=58;break;
 case 45: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$142;var $_0253=$141;label=57;break;
 case 46: 
 var $__hw_sroa_0_0;
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $147=($__hw_sroa_0_0|0)==0;
 if($147){var $_0=$146;var $_0253=$145;label=57;break;}else{label=47;break;}
 case 47: 
 var $149=$__hw_sroa_0_0;
 _free($149);
 var $_0=$146;var $_0253=$145;label=57;break;
 case 48: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $151=(($__iob+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($__db_0+($__n_0<<2))|0);
 var $154=HEAP32[(($__dp)>>2)];
 var $155=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$152,$__db_0,$153,$60,$73,$__pat,$154,$155,$__grp,$__sym,$__sn,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 49: 
 var $157=(($__s)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($3)|0);
 HEAP32[(($159)>>2)]=$158;
 var $160=HEAP32[(($__mi)>>2)];
 var $161=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$160,$161,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 50: 
 var $163=($__hw_sroa_0_1|0)==0;
 if($163){label=52;break;}else{label=51;break;}
 case 51: 
 var $165=$__hw_sroa_0_1;
 _free($165);
 label=52;break;
 case 52: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $166=HEAP32[(($38)>>2)];
 var $167=(($166)|0);
 var $168=__ZNSt3__114__shared_count16__release_sharedEv($167);
 var $169=($__hd_sroa_0_1|0)==0;
 if($169){label=54;break;}else{label=53;break;}
 case 53: 
 var $171=$__hd_sroa_0_1;
 _free($171);
 label=54;break;
 case 54: 
 var $172=($__hn_sroa_0_1|0)==0;
 if($172){label=56;break;}else{label=55;break;}
 case 55: 
 _free($__hn_sroa_0_1);
 label=56;break;
 case 56: 
 STACKTOP=sp;return;
 case 57: 
 var $_0253;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1254=$_0253;label=58;break;
 case 58: 
 var $_1254;
 var $_1;
 var $175=HEAP32[(($38)>>2)];
 var $176=(($175)|0);
 var $177=__ZNSt3__114__shared_count16__release_sharedEv($176);
 var $_2=$_1;var $_2255=$_1254;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=59;break;
 case 59: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_2255;
 var $_2;
 var $179=($__hd_sroa_0_2|0)==0;
 if($179){label=61;break;}else{label=60;break;}
 case 60: 
 var $181=$__hd_sroa_0_2;
 _free($181);
 label=61;break;
 case 61: 
 var $182=($__hn_sroa_0_2|0)==0;
 if($182){label=63;break;}else{label=62;break;}
 case 62: 
 _free($__hn_sroa_0_2);
 label=63;break;
 case 63: 
 var $184$0=$_2255;
 var $184$1=0;
 var $185$0=$184$0;
 var $185$1=$_2;
 ___resumeException($185$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i519=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast518=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast517=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast516=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 var $21=(($__loc)|0);
 var $22=HEAP32[(($21)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $24=$__p_i_i_i;
 var $25=HEAP32[((18400)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18400;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18400,$24,270);
 label=4;break;
 case 4: 
 var $28=HEAP32[((18404)>>2)];
 var $29=((($28)-(1))|0);
 var $30=(($22+12)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($22+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$31;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=$36>>2;
 var $38=($37>>>0)>($29>>>0);
 if($38){label=5;break;}else{label=6;break;}
 case 5: 
 var $39=(($33+($29<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 __ZNSt8bad_castC2Ev($43);
 ___cxa_throw($42,12744,(374));
 throw "Reached an unreachable!";
 case 7: 
 var $44=$40;
 var $45=$40;
 var $46=HEAP32[(($45)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $48=(($46+44)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($tmpcast518,$44);
 var $50=$__pat;
 var $51=HEAP32[(($1)>>2)];
 tempBigInt=$51;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $52=$40;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+32)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($2,$44);
 var $56=$__sn;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=10;break;}else{label=9;break;}
 case 9: 
 var $61=(($__sn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP32[(($62)>>2)]=0;
 var $63=(($__sn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=11;break;
 case 10: 
 var $65=(($__sn+4)|0);
 HEAP32[(($65)>>2)]=0;
 HEAP8[($56)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1,0); var $67$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
 label=20;break;
 case 14: 
 var $69=(($46+40)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($tmpcast517,$44);
 var $71=$__pat;
 var $72=HEAP32[(($4)>>2)];
 tempBigInt=$72;HEAP8[($71)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($71)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($71)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($71)+(3))|0)]=tempBigInt&0xff;
 var $73=$40;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+28)|0);
 var $76=HEAP32[(($75)>>2)];
 FUNCTION_TABLE[$76]($5,$44);
 var $77=$__sn;
 var $78=HEAP8[($77)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=16;break;}else{label=15;break;}
 case 15: 
 var $82=(($__sn+8)|0);
 var $83=HEAP32[(($82)>>2)];
 HEAP32[(($83)>>2)]=0;
 var $84=(($__sn+4)|0);
 HEAP32[(($84)>>2)]=0;
 label=17;break;
 case 16: 
 var $86=(($__sn+4)|0);
 HEAP32[(($86)>>2)]=0;
 HEAP8[($77)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($77)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
 label=20;break;
 case 20: 
 var $90=$40;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($44);
 HEAP32[(($__dp)>>2)]=$94;
 var $95=HEAP32[(($90)>>2)];
 var $96=(($95+16)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($44);
 HEAP32[(($__ts)>>2)]=$98;
 var $99=$40;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+20)|0);
 var $102=HEAP32[(($101)>>2)];
 FUNCTION_TABLE[$102]($7,$44);
 var $103=$__grp;
 var $104=HEAP8[($103)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=22;break;}else{label=21;break;}
 case 21: 
 var $108=(($__grp+8)|0);
 var $109=HEAP32[(($108)>>2)];
 HEAP8[($109)]=0;
 var $110=(($__grp+4)|0);
 HEAP32[(($110)>>2)]=0;
 label=23;break;
 case 22: 
 var $112=$__grp;
 var $113=(($112+1)|0);
 HEAP8[($113)]=0;
 HEAP8[($103)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $115$0 = ___cxa_find_matching_catch(-1, -1,0); var $115$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
 var $116=$40;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+24)|0);
 var $119=HEAP32[(($118)>>2)];
 FUNCTION_TABLE[$119]($9,$44);
 var $120=$__sym;
 var $121=HEAP8[($120)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=27;break;}else{label=26;break;}
 case 26: 
 var $125=(($__sym+8)|0);
 var $126=HEAP32[(($125)>>2)];
 HEAP32[(($126)>>2)]=0;
 var $127=(($__sym+4)|0);
 HEAP32[(($127)>>2)]=0;
 label=28;break;
 case 27: 
 var $129=(($__sym+4)|0);
 HEAP32[(($129)>>2)]=0;
 HEAP8[($120)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1,0); var $131$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($120)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
 var $132=HEAP32[(($90)>>2)];
 var $133=(($132+36)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=FUNCTION_TABLE[$134]($44);
 var $storemerge=$135;label=60;break;
 case 31: 
 var $137=$__p_i_i_i519;
 var $138=HEAP32[((18408)>>2)];
 var $139=($138|0)==-1;
 if($139){label=33;break;}else{label=32;break;}
 case 32: 
 var $_sroa_016_0__idx_i_i520=(($__p_i_i_i519)|0);
 HEAP32[(($_sroa_016_0__idx_i_i520)>>2)]=18408;
 var $_sroa_117_4__idx18_i_i521=(($__p_i_i_i519+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i521)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i522=(($__p_i_i_i519+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i522)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18408,$137,270);
 label=33;break;
 case 33: 
 var $141=HEAP32[((18412)>>2)];
 var $142=((($141)-(1))|0);
 var $143=(($22+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($22+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$144;
 var $148=$146;
 var $149=((($147)-($148))|0);
 var $150=$149>>2;
 var $151=($150>>>0)>($142>>>0);
 if($151){label=34;break;}else{label=35;break;}
 case 34: 
 var $152=(($146+($142<<2))|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==0;
 if($154){label=35;break;}else{label=36;break;}
 case 35: 
 var $155=___cxa_allocate_exception(4);
 var $156=$155;
 __ZNSt8bad_castC2Ev($156);
 ___cxa_throw($155,12744,(374));
 throw "Reached an unreachable!";
 case 36: 
 var $157=$153;
 var $158=$153;
 var $159=HEAP32[(($158)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $161=(($159+44)|0);
 var $162=HEAP32[(($161)>>2)];
 FUNCTION_TABLE[$162]($tmpcast516,$157);
 var $163=$__pat;
 var $164=HEAP32[(($11)>>2)];
 tempBigInt=$164;HEAP8[($163)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(3))|0)]=tempBigInt&0xff;
 var $165=$153;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+32)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($12,$157);
 var $169=$__sn;
 var $170=HEAP8[($169)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=39;break;}else{label=38;break;}
 case 38: 
 var $174=(($__sn+8)|0);
 var $175=HEAP32[(($174)>>2)];
 HEAP32[(($175)>>2)]=0;
 var $176=(($__sn+4)|0);
 HEAP32[(($176)>>2)]=0;
 label=40;break;
 case 39: 
 var $178=(($__sn+4)|0);
 HEAP32[(($178)>>2)]=0;
 HEAP8[($169)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1,0); var $180$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($169)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($169)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($169)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
 label=49;break;
 case 43: 
 var $182=(($159+40)|0);
 var $183=HEAP32[(($182)>>2)];
 FUNCTION_TABLE[$183]($tmpcast,$157);
 var $184=$__pat;
 var $185=HEAP32[(($14)>>2)];
 tempBigInt=$185;HEAP8[($184)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($184)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($184)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($184)+(3))|0)]=tempBigInt&0xff;
 var $186=$153;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+28)|0);
 var $189=HEAP32[(($188)>>2)];
 FUNCTION_TABLE[$189]($15,$157);
 var $190=$__sn;
 var $191=HEAP8[($190)];
 var $192=$191&1;
 var $193=(($192<<24)>>24)==0;
 if($193){label=45;break;}else{label=44;break;}
 case 44: 
 var $195=(($__sn+8)|0);
 var $196=HEAP32[(($195)>>2)];
 HEAP32[(($196)>>2)]=0;
 var $197=(($__sn+4)|0);
 HEAP32[(($197)>>2)]=0;
 label=46;break;
 case 45: 
 var $199=(($__sn+4)|0);
 HEAP32[(($199)>>2)]=0;
 HEAP8[($190)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $201$0 = ___cxa_find_matching_catch(-1, -1,0); var $201$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($190)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($190)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($190)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($15);
 label=49;break;
 case 49: 
 var $203=$153;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($157);
 HEAP32[(($__dp)>>2)]=$207;
 var $208=HEAP32[(($203)>>2)];
 var $209=(($208+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=FUNCTION_TABLE[$210]($157);
 HEAP32[(($__ts)>>2)]=$211;
 var $212=$153;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+20)|0);
 var $215=HEAP32[(($214)>>2)];
 FUNCTION_TABLE[$215]($17,$157);
 var $216=$__grp;
 var $217=HEAP8[($216)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=51;break;}else{label=50;break;}
 case 50: 
 var $221=(($__grp+8)|0);
 var $222=HEAP32[(($221)>>2)];
 HEAP8[($222)]=0;
 var $223=(($__grp+4)|0);
 HEAP32[(($223)>>2)]=0;
 label=52;break;
 case 51: 
 var $225=$__grp;
 var $226=(($225+1)|0);
 HEAP8[($226)]=0;
 HEAP8[($216)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $228$0 = ___cxa_find_matching_catch(-1, -1,0); var $228$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($216)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($216)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($216)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 var $229=$153;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+24)|0);
 var $232=HEAP32[(($231)>>2)];
 FUNCTION_TABLE[$232]($19,$157);
 var $233=$__sym;
 var $234=HEAP8[($233)];
 var $235=$234&1;
 var $236=(($235<<24)>>24)==0;
 if($236){label=56;break;}else{label=55;break;}
 case 55: 
 var $238=(($__sym+8)|0);
 var $239=HEAP32[(($238)>>2)];
 HEAP32[(($239)>>2)]=0;
 var $240=(($__sym+4)|0);
 HEAP32[(($240)>>2)]=0;
 label=57;break;
 case 56: 
 var $242=(($__sym+4)|0);
 HEAP32[(($242)>>2)]=0;
 HEAP8[($233)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $244$0 = ___cxa_find_matching_catch(-1, -1,0); var $244$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($233)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($233)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($233)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($19);
 var $245=HEAP32[(($203)>>2)];
 var $246=(($245+36)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=FUNCTION_TABLE[$247]($157);
 var $storemerge=$248;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=$__ct;
 var $11=($__fd|0)>0;
 var $12=$__grp;
 var $13=$__grp;
 var $14=(($12+1)|0);
 var $15=(($__grp+8)|0);
 var $16=(($__grp+4)|0);
 var $_0361402=$__db;var $__p_0403=0;label=2;break;
 case 2: 
 var $__p_0403;
 var $_0361402;
 var $18=(($__pat+$__p_0403)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=28;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_0361402;label=63;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_0361402;label=63;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_0361402;label=63;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=($32&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=7;break;}else{label=6;break;}
 case 6: 
 var $37=HEAP32[(($3)>>2)];
 var $40=$37;label=8;break;
 case 7: 
 var $39=$33>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_0361402;label=63;break;}else{label=9;break;}
 case 9: 
 var $43=$32&1;
 var $44=(($43<<24)>>24)==0;
 if($44){var $47=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $46=HEAP32[(($4)>>2)];
 var $47=$46;label=11;break;
 case 11: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=HEAP32[(($__me)>>2)];
 var $50=(($49+4)|0);
 HEAP32[(($__me)>>2)]=$50;
 HEAP32[(($49)>>2)]=$48;
 var $_2=$_0361402;label=63;break;
 case 12: 
 var $52=HEAP8[($5)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=HEAP32[(($8)>>2)];
 var $60=$57;label=15;break;
 case 14: 
 var $59=$53>>>1;
 var $60=$59;label=15;break;
 case 15: 
 var $60;
 var $61=($60|0)==0;
 var $brmerge=$61|$7;
 if($brmerge){var $_2=$_0361402;label=63;break;}else{label=16;break;}
 case 16: 
 var $63=$52&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=18;break;}else{label=17;break;}
 case 17: 
 var $66=HEAP32[(($9)>>2)];
 var $69=$66;var $68=$66;var $_in427=$66;label=19;break;
 case 18: 
 var $69=$8;var $68=$8;var $_in427=$8;label=19;break;
 case 19: 
 var $_in427;
 var $68;
 var $69;
 var $70=$_in427;
 if($55){label=21;break;}else{label=20;break;}
 case 20: 
 var $72=HEAP32[(($8)>>2)];
 var $75=$72;label=22;break;
 case 21: 
 var $74=$53>>>1;
 var $75=$74;label=22;break;
 case 22: 
 var $75;
 var $76=(($69+($75<<2))|0);
 var $77=HEAP32[(($__me)>>2)];
 var $78=($68|0)==($76|0);
 if($78){var $_0_lcssa=$77;label=27;break;}else{label=23;break;}
 case 23: 
 var $scevgep414_sum=((($75)-(1))|0);
 var $scevgep415=(($69+($scevgep414_sum<<2))|0);
 var $scevgep415416=$scevgep415;
 var $79=(((-$70))|0);
 var $uglygep417=(($scevgep415416+$79)|0);
 var $uglygep417418=$uglygep417;
 var $80=$uglygep417418>>>2;
 var $_sroa_0362_0398=$68;var $_0399=$77;label=24;break;
 case 24: 
 var $_0399;
 var $_sroa_0362_0398;
 var $82=HEAP32[(($_sroa_0362_0398)>>2)];
 HEAP32[(($_0399)>>2)]=$82;
 var $83=(($_sroa_0362_0398+4)|0);
 var $84=($83|0)==($76|0);
 if($84){label=26;break;}else{label=25;break;}
 case 25: 
 var $85=(($_0399+4)|0);
 var $_sroa_0362_0398=$83;var $_0399=$85;label=24;break;
 case 26: 
 var $scevgep413_sum=((($80)+(1))|0);
 var $scevgep419=(($77+($scevgep413_sum<<2))|0);
 var $_0_lcssa=$scevgep419;label=27;break;
 case 27: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_0361402;label=63;break;
 case 28: 
 var $87=HEAP32[(($__me)>>2)];
 var $88=(($_0361402+4)|0);
 var $__0361=$__neg?$88:$_0361402;
 var $__d_0=$__0361;label=29;break;
 case 29: 
 var $__d_0;
 var $90=($__d_0>>>0)<($__de>>>0);
 if($90){label=30;break;}else{label=31;break;}
 case 30: 
 var $92=HEAP32[(($__d_0)>>2)];
 var $93=HEAP32[(($10)>>2)];
 var $94=(($93+12)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($__ct,2048,$92);
 var $97=(($__d_0+4)|0);
 if($96){var $__d_0=$97;label=29;break;}else{label=31;break;}
 case 31: 
 if($11){label=32;break;}else{var $__d_2=$__d_0;label=39;break;}
 case 32: 
 var $99=($__d_0>>>0)>($__0361>>>0);
 if($99){var $__d_1379=$__d_0;var $__f_0380=$__fd;label=33;break;}else{var $__f_0_lcssa424=$__fd;var $__d_1_lcssa426=$__d_0;label=35;break;}
 case 33: 
 var $__f_0380;
 var $__d_1379;
 var $100=((($__d_1379)-(4))|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=HEAP32[(($__me)>>2)];
 var $103=(($102+4)|0);
 HEAP32[(($__me)>>2)]=$103;
 HEAP32[(($102)>>2)]=$101;
 var $104=((($__f_0380)-(1))|0);
 var $105=($100>>>0)>($__0361>>>0);
 var $106=($104|0)>0;
 var $or_cond=$105&$106;
 if($or_cond){var $__d_1379=$100;var $__f_0380=$104;label=33;break;}else{label=34;break;}
 case 34: 
 if($106){var $__f_0_lcssa424=$104;var $__d_1_lcssa426=$100;label=35;break;}else{var $111=0;var $__f_0_lcssa423=$104;var $__d_1_lcssa425=$100;label=36;break;}
 case 35: 
 var $__d_1_lcssa426;
 var $__f_0_lcssa424;
 var $107=HEAP32[(($1)>>2)];
 var $108=(($107+44)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($__ct,48);
 var $111=$110;var $__f_0_lcssa423=$__f_0_lcssa424;var $__d_1_lcssa425=$__d_1_lcssa426;label=36;break;
 case 36: 
 var $__d_1_lcssa425;
 var $__f_0_lcssa423;
 var $111;
 var $112=($__f_0_lcssa423|0)>0;
 var $113=HEAP32[(($__me)>>2)];
 var $114=(($113+4)|0);
 HEAP32[(($__me)>>2)]=$114;
 if($112){var $__f_1386=$__f_0_lcssa423;var $115=$113;label=37;break;}else{var $_lcssa385=$113;label=38;break;}
 case 37: 
 var $115;
 var $__f_1386;
 HEAP32[(($115)>>2)]=$111;
 var $116=((($__f_1386)-(1))|0);
 var $117=($116|0)>0;
 var $118=HEAP32[(($__me)>>2)];
 var $119=(($118+4)|0);
 HEAP32[(($__me)>>2)]=$119;
 if($117){var $__f_1386=$116;var $115=$118;label=37;break;}else{var $_lcssa385=$118;label=38;break;}
 case 38: 
 var $_lcssa385;
 HEAP32[(($_lcssa385)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa425;label=39;break;
 case 39: 
 var $__d_2;
 var $121=($__d_2|0)==($__0361|0);
 if($121){label=40;break;}else{label=41;break;}
 case 40: 
 var $123=HEAP32[(($1)>>2)];
 var $124=(($123+44)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=FUNCTION_TABLE[$125]($__ct,48);
 var $127=HEAP32[(($__me)>>2)];
 var $128=(($127+4)|0);
 HEAP32[(($__me)>>2)]=$128;
 HEAP32[(($127)>>2)]=$126;
 label=60;break;
 case 41: 
 var $130=HEAP8[($13)];
 var $131=($130&255);
 var $132=$131&1;
 var $133=($132|0)==0;
 if($133){label=43;break;}else{label=42;break;}
 case 42: 
 var $135=HEAP32[(($16)>>2)];
 var $138=$135;label=44;break;
 case 43: 
 var $137=$131>>>1;
 var $138=$137;label=44;break;
 case 44: 
 var $138;
 var $139=($138|0)==0;
 if($139){var $__d_3390=$__d_2;var $__ng_0391=0;var $__ig_0392=0;var $__gl_0393=-1;label=48;break;}else{label=45;break;}
 case 45: 
 var $141=$130&1;
 var $142=(($141<<24)>>24)==0;
 if($142){var $145=$14;label=47;break;}else{label=46;break;}
 case 46: 
 var $144=HEAP32[(($15)>>2)];
 var $145=$144;label=47;break;
 case 47: 
 var $145;
 var $146=HEAP8[($145)];
 var $147=(($146<<24)>>24);
 var $__d_3390=$__d_2;var $__ng_0391=0;var $__ig_0392=0;var $__gl_0393=$147;label=48;break;
 case 48: 
 var $__gl_0393;
 var $__ig_0392;
 var $__ng_0391;
 var $__d_3390;
 var $148=($__ng_0391|0)==($__gl_0393|0);
 if($148){label=49;break;}else{var $__gl_1=$__gl_0393;var $__ig_1=$__ig_0392;var $__ng_1=$__ng_0391;label=59;break;}
 case 49: 
 var $150=HEAP32[(($__me)>>2)];
 var $151=(($150+4)|0);
 HEAP32[(($__me)>>2)]=$151;
 HEAP32[(($150)>>2)]=$__ts;
 var $152=((($__ig_0392)+(1))|0);
 var $153=HEAP8[($13)];
 var $154=($153&255);
 var $155=$154&1;
 var $156=($155|0)==0;
 if($156){label=51;break;}else{label=50;break;}
 case 50: 
 var $158=HEAP32[(($16)>>2)];
 var $161=$158;label=52;break;
 case 51: 
 var $160=$154>>>1;
 var $161=$160;label=52;break;
 case 52: 
 var $161;
 var $162=($152>>>0)<($161>>>0);
 if($162){label=53;break;}else{var $__gl_1=$__gl_0393;var $__ig_1=$152;var $__ng_1=0;label=59;break;}
 case 53: 
 var $164=$153&1;
 var $165=(($164<<24)>>24)==0;
 if($165){var $168=$14;label=55;break;}else{label=54;break;}
 case 54: 
 var $167=HEAP32[(($15)>>2)];
 var $168=$167;label=55;break;
 case 55: 
 var $168;
 var $169=(($168+$152)|0);
 var $170=HEAP8[($169)];
 var $171=(($170<<24)>>24)==127;
 if($171){var $__gl_1=-1;var $__ig_1=$152;var $__ng_1=0;label=59;break;}else{label=56;break;}
 case 56: 
 if($165){var $175=$14;label=58;break;}else{label=57;break;}
 case 57: 
 var $174=HEAP32[(($15)>>2)];
 var $175=$174;label=58;break;
 case 58: 
 var $175;
 var $176=(($175+$152)|0);
 var $177=HEAP8[($176)];
 var $178=(($177<<24)>>24);
 var $__gl_1=$178;var $__ig_1=$152;var $__ng_1=0;label=59;break;
 case 59: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $179=((($__d_3390)-(4))|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=HEAP32[(($__me)>>2)];
 var $182=(($181+4)|0);
 HEAP32[(($__me)>>2)]=$182;
 HEAP32[(($181)>>2)]=$180;
 var $183=((($__ng_1)+(1))|0);
 var $184=($179|0)==($__0361|0);
 if($184){label=60;break;}else{var $__d_3390=$179;var $__ng_0391=$183;var $__ig_0392=$__ig_1;var $__gl_0393=$__gl_1;label=48;break;}
 case 60: 
 var $185=HEAP32[(($__me)>>2)];
 var $186=($87|0)==($185|0);
 if($186){var $_2=$__0361;label=63;break;}else{label=61;break;}
 case 61: 
 var $187=((($185)-(4))|0);
 var $188=($87>>>0)<($187>>>0);
 if($188){var $_0358396=$87;var $189=$187;label=62;break;}else{var $_2=$__0361;label=63;break;}
 case 62: 
 var $189;
 var $_0358396;
 var $190=HEAP32[(($_0358396)>>2)];
 var $191=HEAP32[(($189)>>2)];
 HEAP32[(($_0358396)>>2)]=$191;
 HEAP32[(($189)>>2)]=$190;
 var $192=(($_0358396+4)|0);
 var $193=((($189)-(4))|0);
 var $194=($192>>>0)<($193>>>0);
 if($194){var $_0358396=$192;var $189=$193;label=62;break;}else{var $_2=$__0361;label=63;break;}
 case 63: 
 var $_2;
 var $195=((($__p_0403)+(1))|0);
 var $196=($195>>>0)<4;
 if($196){var $_0361402=$_2;var $__p_0403=$195;label=2;break;}else{label=64;break;}
 case 64: 
 var $198=HEAP8[($2)];
 var $199=($198&255);
 var $200=$199&1;
 var $201=($200|0)==0;
 if($201){label=66;break;}else{label=65;break;}
 case 65: 
 var $203=HEAP32[(($3)>>2)];
 var $206=$203;label=67;break;
 case 66: 
 var $205=$199>>>1;
 var $206=$205;label=67;break;
 case 67: 
 var $206;
 var $207=($206>>>0)>1;
 if($207){label=68;break;}else{label=79;break;}
 case 68: 
 var $209=$198&1;
 var $210=(($209<<24)>>24)==0;
 if($210){label=70;break;}else{label=69;break;}
 case 69: 
 var $212=HEAP32[(($4)>>2)];
 var $215=$212;var $214=$212;var $_in=$212;label=71;break;
 case 70: 
 var $215=$3;var $214=$3;var $_in=$3;label=71;break;
 case 71: 
 var $_in;
 var $214;
 var $215;
 var $216=$_in;
 if($201){label=73;break;}else{label=72;break;}
 case 72: 
 var $218=HEAP32[(($3)>>2)];
 var $221=$218;label=74;break;
 case 73: 
 var $220=$199>>>1;
 var $221=$220;label=74;break;
 case 74: 
 var $221;
 var $222=(($215+($221<<2))|0);
 var $223=HEAP32[(($__me)>>2)];
 var $_sroa_0371_0375=(($214+4)|0);
 var $224=($_sroa_0371_0375|0)==($222|0);
 if($224){var $_0360_lcssa=$223;label=78;break;}else{label=75;break;}
 case 75: 
 var $225=((($221)-(2))|0);
 var $scevgep=(($215+($225<<2))|0);
 var $scevgep405=$scevgep;
 var $226=(((-$216))|0);
 var $uglygep=(($scevgep405+$226)|0);
 var $uglygep406=$uglygep;
 var $227=$uglygep406>>>2;
 var $228=((($227)+(1))|0);
 var $_0360376=$223;var $_sroa_0371_0377=$_sroa_0371_0375;label=76;break;
 case 76: 
 var $_sroa_0371_0377;
 var $_0360376;
 var $230=HEAP32[(($_sroa_0371_0377)>>2)];
 HEAP32[(($_0360376)>>2)]=$230;
 var $231=(($_0360376+4)|0);
 var $_sroa_0371_0=(($_sroa_0371_0377+4)|0);
 var $232=($_sroa_0371_0|0)==($222|0);
 if($232){label=77;break;}else{var $_0360376=$231;var $_sroa_0371_0377=$_sroa_0371_0;label=76;break;}
 case 77: 
 var $scevgep407=(($223+($228<<2))|0);
 var $_0360_lcssa=$scevgep407;label=78;break;
 case 78: 
 var $_0360_lcssa;
 HEAP32[(($__me)>>2)]=$_0360_lcssa;
 label=79;break;
 case 79: 
 var $234=$__flags&176;
 if(($234|0)==32){ label=80;break;}else if(($234|0)==16){ label=82;break;}else{label=81;break;}
 case 80: 
 var $236=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$236;
 label=82;break;
 case 81: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=82;break;
 case 82: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $__dp=(sp)+(32);
 var $__ts=(sp)+(40);
 var $__grp=(sp)+(48);
 var $__grp246=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $4=(($__loc)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$__p_i_i_i;
 var $7=HEAP32[((17936)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$6,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=42;break; }
 case 3: 
 var $10=HEAP32[((17940)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($5+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($5+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 __ZNSt8bad_castC2Ev($25);
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,12744,(374)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $26=$22;
 var $27=$__digits;
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=$29&1;
 var $31=($30|0)==0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=(($__digits+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $37=$34;label=10;break;
 case 9: 
 var $36=$29>>>1;
 var $37=$36;label=10;break;
 case 10: 
 var $37;
 var $38=($37|0)==0;
 if($38){var $55=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $40=$28&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=13;break;}else{label=12;break;}
 case 12: 
 var $43=(($__digits+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $47=$44;label=14;break;
 case 13: 
 var $46=(($__digits+4)|0);
 var $47=$46;label=14;break;
 case 14: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=$22;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+44)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($26,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 var $54=($48|0)==($53|0);
 var $55=$54;label=16;break;
 case 16: 
 var $55;
 HEAP32[(($__grp246)>>2)]=0; HEAP32[((($__grp246)+(4))>>2)]=0; HEAP32[((($__grp246)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$55,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $57=(($__mbuf)|0);
 var $58=HEAP8[($27)];
 var $59=($58&255);
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=19;break;}else{label=18;break;}
 case 18: 
 var $63=(($__digits+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $67=$64;label=20;break;
 case 19: 
 var $66=$59>>>1;
 var $67=$66;label=20;break;
 case 20: 
 var $67;
 var $68=HEAP32[(($__fd)>>2)];
 var $69=($67|0)>($68|0);
 if($69){label=21;break;}else{label=31;break;}
 case 21: 
 if($61){label=23;break;}else{label=22;break;}
 case 22: 
 var $72=(($__digits+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $76=$73;label=24;break;
 case 23: 
 var $75=$59>>>1;
 var $76=$75;label=24;break;
 case 24: 
 var $76;
 var $77=((($76)-($68))|0);
 var $78=$77<<1;
 var $79=HEAP8[($2)];
 var $80=($79&255);
 var $81=$80&1;
 var $82=($81|0)==0;
 if($82){label=26;break;}else{label=25;break;}
 case 25: 
 var $84=(($__sn+4)|0);
 var $85=HEAP32[(($84)>>2)];
 var $88=$85;label=27;break;
 case 26: 
 var $87=$80>>>1;
 var $88=$87;label=27;break;
 case 27: 
 var $88;
 var $89=HEAP8[($1)];
 var $90=($89&255);
 var $91=$90&1;
 var $92=($91|0)==0;
 if($92){label=29;break;}else{label=28;break;}
 case 28: 
 var $94=(($__sym+4)|0);
 var $95=HEAP32[(($94)>>2)];
 var $98=$95;label=30;break;
 case 29: 
 var $97=$90>>>1;
 var $98=$97;label=30;break;
 case 30: 
 var $98;
 var $99=$78|1;
 var $100=((($99)+($88))|0);
 var $101=((($100)+($98))|0);
 var $_pn=$101;label=38;break;
 case 31: 
 var $103=HEAP8[($2)];
 var $104=($103&255);
 var $105=$104&1;
 var $106=($105|0)==0;
 if($106){label=33;break;}else{label=32;break;}
 case 32: 
 var $108=(($__sn+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $112=$109;label=34;break;
 case 33: 
 var $111=$104>>>1;
 var $112=$111;label=34;break;
 case 34: 
 var $112;
 var $113=HEAP8[($1)];
 var $114=($113&255);
 var $115=$114&1;
 var $116=($115|0)==0;
 if($116){label=36;break;}else{label=35;break;}
 case 35: 
 var $118=(($__sym+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $122=$119;label=37;break;
 case 36: 
 var $121=$114>>>1;
 var $122=$121;label=37;break;
 case 37: 
 var $122;
 var $123=((($112)+(2))|0);
 var $124=((($123)+($122))|0);
 var $_pn=$124;label=38;break;
 case 38: 
 var $_pn;
 var $126=((($_pn)+($68))|0);
 var $127=($126>>>0)>100;
 if($127){label=39;break;}else{var $__mb_0=$57;var $__h_sroa_0_1=0;var $149=$58;label=46;break;}
 case 39: 
 var $128=$126<<2;
 var $129=_malloc($128);
 var $130=$129;
 var $131=($129|0)==0;
 if($131){label=40;break;}else{var $__mb_0=$130;var $__h_sroa_0_1=$130;var $149=$58;label=46;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $__h_sroa_0_0=$130;label=44;break; }
 case 41: 
 var $_pre=HEAP8[($27)];
 var $__mb_0=$130;var $__h_sroa_0_1=$130;var $149=$_pre;label=46;break;
 case 42: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_1=$136;var $_1232=$135;label=58;break;
 case 43: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $139=$138$0;
 var $140=$138$1;
 var $_0=$140;var $_0231=$139;label=57;break;
 case 44: 
 var $__h_sroa_0_0;
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$142$1;
 var $145=($__h_sroa_0_0|0)==0;
 if($145){var $_0=$144;var $_0231=$143;label=57;break;}else{label=45;break;}
 case 45: 
 var $147=$__h_sroa_0_0;
 _free($147);
 var $_0=$144;var $_0231=$143;label=57;break;
 case 46: 
 var $149;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $150=(($__iob+4)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$149&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=48;break;}else{label=47;break;}
 case 47: 
 var $155=(($__digits+8)|0);
 var $156=HEAP32[(($155)>>2)];
 var $161=$156;var $160=$156;label=49;break;
 case 48: 
 var $158=(($__digits+4)|0);
 var $159=(($__digits+4)|0);
 var $161=$159;var $160=$158;label=49;break;
 case 49: 
 var $160;
 var $161;
 var $162=($149&255);
 var $163=$162&1;
 var $164=($163|0)==0;
 if($164){label=51;break;}else{label=50;break;}
 case 50: 
 var $166=(($__digits+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $170=$167;label=52;break;
 case 51: 
 var $169=$162>>>1;
 var $170=$169;label=52;break;
 case 52: 
 var $170;
 var $171=(($161+($170<<2))|0);
 var $172=HEAP32[(($__dp)>>2)];
 var $173=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$151,$160,$171,$26,$55,$__pat,$172,$173,$__grp,$__sym,$__sn,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 53: 
 var $175=(($__s)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(($3)|0);
 HEAP32[(($177)>>2)]=$176;
 var $178=HEAP32[(($__mi)>>2)];
 var $179=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$3,$__mb_0,$178,$179,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 54: 
 var $181=($__h_sroa_0_1|0)==0;
 if($181){label=56;break;}else{label=55;break;}
 case 55: 
 var $183=$__h_sroa_0_1;
 _free($183);
 label=56;break;
 case 56: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $184=HEAP32[(($4)>>2)];
 var $185=(($184)|0);
 var $186=__ZNSt3__114__shared_count16__release_sharedEv($185);
 STACKTOP=sp;return;
 case 57: 
 var $_0231;
 var $_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $_1=$_0;var $_1232=$_0231;label=58;break;
 case 58: 
 var $_1232;
 var $_1;
 var $188=HEAP32[(($4)>>2)];
 var $189=(($188)|0);
 var $190=__ZNSt3__114__shared_count16__release_sharedEv($189);
 var $191$0=$_1232;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_1;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $__cat_0=$14>>>($15>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $0=$__ndflt;
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result135=$agg_result;
 var $1=$__dflt;
 var $2=$__dflt;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__dflt+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $13=$8;var $12=$8;label=4;break;
 case 3: 
 var $10=(($1+1)|0);
 var $11=(($1+1)|0);
 var $13=$11;var $12=$10;label=4;break;
 case 4: 
 var $12;
 var $13;
 var $14=($3&255);
 var $15=$14&1;
 var $16=($15|0)==0;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($__dflt+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $22=$19;label=7;break;
 case 6: 
 var $21=$14>>>1;
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23=(($13+$22)|0);
 var $24=($12>>>0)<($23>>>0);
 if($24){var $_0132=$12;label=9;break;}else{label=8;break;}
 case 8: 
 var $25=($__c|0)==-1;
 var $26=$__c<<1;
 var $27=$26;
 var $28=$25?-1:$27;
 var $43=$28;label=16;break;
 case 9: 
 var $_0132;
 var $29=HEAP8[($_0132)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $30=(($_0132+1)|0);
 var $31=($30>>>0)<($23>>>0);
 if($31){var $_0132=$30;label=9;break;}else{label=11;break;}
 case 11: 
 var $_pre=HEAP8[($0)];
 var $phitmp=$_pre&1;
 var $phitmp136=(($phitmp<<24)>>24)==0;
 var $32=($__c|0)==-1;
 var $33=$__c<<1;
 var $34=$33;
 var $35=$32?-1:$34;
 if($phitmp136){var $43=$35;label=16;break;}else{label=15;break;}
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=$lpad_phi$0;
 var $38=$lpad_phi$1;
 var $_0122=$38;var $_0123=$37;label=23;break;
 case 15: 
 var $40=(($__ndflt+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $47=$41;var $46=$35;label=17;break;
 case 16: 
 var $43;
 var $44=$__ndflt;
 var $45=(($44+1)|0);
 var $47=$45;var $46=$43;label=17;break;
 case 17: 
 var $46;
 var $47;
 var $48=(function() { try { __THREW__ = 0; return _catgets($46,$__set,$__msgid,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 18: 
 HEAP32[(($agg_result135)>>2)]=0; HEAP32[((($agg_result135)+(4))>>2)]=0; HEAP32[((($agg_result135)+(8))>>2)]=0;
 var $50=_strlen($48);
 var $51=(($48+$50)|0);
 var $52=($50|0)>0;
 if($52){var $_0120130=$48;label=19;break;}else{label=22;break;}
 case 19: 
 var $_0120130;
 var $53=HEAP8[($_0120130)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 20: 
 var $54=(($_0120130+1)|0);
 var $55=($54>>>0)<($51>>>0);
 if($55){var $_0120130=$54;label=19;break;}else{label=22;break;}
 case 21: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $59=$57$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 var $_0122=$59;var $_0123=$58;label=23;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 23: 
 var $_0123;
 var $_0122;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $61$0=$_0123;
 var $61$1=0;
 var $62$0=$61$0;
 var $62$1=$_0122;
 ___resumeException($62$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;
 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=$1?-1:$3;
 var $5=_catclose($4);
 return;
}
function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $__cat_0=$14>>>($15>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i10=sp;
 var $__buf_i12=(sp)+(8);
 var $__bn_i13=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $0=$__ndflt;
 var $1=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result192=$agg_result;
 var $3=(($1)|0);
 var $4=(($1)|0);
 var $5=(($1+4)|0);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($4)>>2)]=8224;
 var $6=$__dflt;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__dflt+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $17=$12;var $16=$12;label=4;break;
 case 3: 
 var $14=(($__dflt+4)|0);
 var $15=(($__dflt+4)|0);
 var $17=$15;var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=($7&255);
 var $19=$18&1;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 var $22=(($__dflt+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $26=$23;label=7;break;
 case 6: 
 var $25=$18>>>1;
 var $26=$25;label=7;break;
 case 7: 
 var $26;
 var $27=(($17+($26<<2))|0);
 var $28=($16>>>0)<($27>>>0);
 if($28){label=8;break;}else{label=21;break;}
 case 8: 
 var $29=$1;
 var $30=(($__buf_i12)|0);
 var $31=(($__buf_i12+32)|0);
 var $_0189=$16;var $33=8224;label=9;break;
 case 9: 
 var $33;
 var $_0189;
 HEAP32[(($__wn_i)>>2)]=$_0189;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($3,$__mb_i10,$_0189,$27,$__wn_i,$30,$31,$__bn_i13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 var $37=($36|0)==2;
 var $38=HEAP32[(($__wn_i)>>2)];
 var $39=($38|0)==($_0189|0);
 var $or_cond163=$37|$39;
 if($or_cond163){label=12;break;}else{label=11;break;}
 case 11: 
 var $40=HEAP32[(($__bn_i13)>>2)];
 var $41=($30>>>0)<($40>>>0);
 if($41){var $__p_i14_0184=$30;label=16;break;}else{var $53=$38;label=19;break;}
 case 12: 
 var $43=___cxa_allocate_exception(8);
 var $44=$43;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($44,3424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=15;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($43,12760,(42)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=25;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1); var $47$1 = tempRet0;
 ___cxa_free_exception($43);
 var $eh_lpad_body$1=$47$1;var $eh_lpad_body$0=$47$0;label=26;break;
 case 16: 
 var $__p_i14_0184;
 var $48=HEAP8[($__p_i14_0184)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=23;break; }
 case 17: 
 var $49=(($__p_i14_0184+1)|0);
 var $50=HEAP32[(($__bn_i13)>>2)];
 var $51=($49>>>0)<($50>>>0);
 if($51){var $__p_i14_0184=$49;label=16;break;}else{label=18;break;}
 case 18: 
 var $_pre193=HEAP32[(($__wn_i)>>2)];
 var $53=$_pre193;label=19;break;
 case 19: 
 var $53;
 var $54=($53>>>0)<($27>>>0);
 if($54){label=20;break;}else{label=21;break;}
 case 20: 
 var $_pre196=HEAP32[(($29)>>2)];
 var $_0189=$53;var $33=$_pre196;label=9;break;
 case 21: 
 var $55=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($55);
 var $56=($__c|0)==-1;
 var $57=$__c<<1;
 var $58=$57;
 var $59=$56?-1:$58;
 var $60=HEAP8[($0)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=28;break;}else{label=27;break;}
 case 22: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=$64$0;
 var $66=$64$1;
 var $_0153=$66;var $_0154=$65;label=49;break;
 case 23: 
 var $lpad_loopexit182$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit182$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit182$1;var $eh_lpad_body$0=$lpad_loopexit182$0;label=26;break;
 case 24: 
 var $lpad_loopexit186$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit186$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit186$1;var $eh_lpad_body$0=$lpad_loopexit186$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit187$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit187$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit187$1;var $eh_lpad_body$0=$lpad_nonloopexit187$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $67=$eh_lpad_body$0;
 var $68=$eh_lpad_body$1;
 var $69=(($1)|0);
 __ZNSt3__114__shared_countD2Ev($69);
 var $_0153=$68;var $_0154=$67;label=49;break;
 case 27: 
 var $71=(($__ndflt+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $76=$72;label=29;break;
 case 28: 
 var $74=$__ndflt;
 var $75=(($74+1)|0);
 var $76=$75;label=29;break;
 case 29: 
 var $76;
 var $77=(function() { try { __THREW__ = 0; return _catgets($59,$__set,$__msgid,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=22;break; }
 case 30: 
 HEAP32[(($agg_result192)>>2)]=0; HEAP32[((($agg_result192)+(4))>>2)]=0; HEAP32[((($agg_result192)+(8))>>2)]=0;
 var $79=(($2)|0);
 var $80=(($2)|0);
 var $81=(($2+4)|0);
 HEAP32[(($81)>>2)]=0;
 HEAP32[(($80)>>2)]=8168;
 var $82=_strlen($77);
 var $83=(($77+$82)|0);
 var $84=($82|0)<1;
 if($84){label=44;break;}else{label=31;break;}
 case 31: 
 var $85=$2;
 var $86=$83;
 var $87=(($__buf_i)|0);
 var $88=(($__buf_i+128)|0);
 var $_0152177=$77;var $90=8168;label=32;break;
 case 32: 
 var $90;
 var $_0152177;
 HEAP32[(($__nn_i)>>2)]=$_0152177;
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$_0152177;
 var $94=((($86)-($93))|0);
 var $95=($94|0)>32;
 var $96=(($_0152177+32)|0);
 var $97=$95?$96:$83;
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($79,$__mb_i,$_0152177,$97,$__nn_i,$87,$88,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=46;break; }
 case 33: 
 var $99=($98|0)==2;
 var $100=HEAP32[(($__nn_i)>>2)];
 var $101=($100|0)==($_0152177|0);
 var $or_cond166=$99|$101;
 if($or_cond166){label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($__bn_i)>>2)];
 var $103=($87>>>0)<($102>>>0);
 if($103){var $__p_i_0173=$87;label=39;break;}else{var $115=$100;label=42;break;}
 case 35: 
 var $105=___cxa_allocate_exception(8);
 var $106=$105;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($106,3424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=38;break; }
 case 36: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($105,12760,(42)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=47;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 ___cxa_free_exception($105);
 var $eh_lpad_body170$1=$109$1;var $eh_lpad_body170$0=$109$0;label=48;break;
 case 39: 
 var $__p_i_0173;
 var $110=HEAP32[(($__p_i_0173)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=45;break; }
 case 40: 
 var $111=(($__p_i_0173+4)|0);
 var $112=HEAP32[(($__bn_i)>>2)];
 var $113=($111>>>0)<($112>>>0);
 if($113){var $__p_i_0173=$111;label=39;break;}else{label=41;break;}
 case 41: 
 var $_pre=HEAP32[(($__nn_i)>>2)];
 var $115=$_pre;label=42;break;
 case 42: 
 var $115;
 var $116=($115>>>0)<($83>>>0);
 if($116){label=43;break;}else{label=44;break;}
 case 43: 
 var $_pre195=HEAP32[(($85)>>2)];
 var $_0152177=$115;var $90=$_pre195;label=32;break;
 case 44: 
 var $117=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($117);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 45: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_loopexit$1;var $eh_lpad_body170$0=$lpad_loopexit$0;label=48;break;
 case 46: 
 var $lpad_loopexit174$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit174$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_loopexit174$1;var $eh_lpad_body170$0=$lpad_loopexit174$0;label=48;break;
 case 47: 
 var $lpad_nonloopexit175$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit175$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_nonloopexit175$1;var $eh_lpad_body170$0=$lpad_nonloopexit175$0;label=48;break;
 case 48: 
 var $eh_lpad_body170$0;
 var $eh_lpad_body170$1;
 var $118=$eh_lpad_body170$0;
 var $119=$eh_lpad_body170$1;
 var $120=(($2)|0);
 __ZNSt3__114__shared_countD2Ev($120);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
 var $_0153=$119;var $_0154=$118;label=49;break;
 case 49: 
 var $_0154;
 var $_0153;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $122$0=$_0154;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_0153;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;
 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=$1?-1:$3;
 var $5=_catclose($4);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7688;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(18504)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(18504);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((16504)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((16504)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 var $21=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($21);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $23=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($23);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($2,4904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=$1;
 HEAP32[(($3)>>2)]=6624;
 ___cxa_throw($1,12776,(72));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i223=sp;
 var $__p_i_i_i216=(sp)+(16);
 var $__p_i_i_i209=(sp)+(32);
 var $__p_i_i_i199=(sp)+(48);
 var $__p_i_i_i190=(sp)+(64);
 var $__p_i_i_i183=(sp)+(80);
 var $__p_i_i_i176=(sp)+(96);
 var $__p_i_i_i169=(sp)+(112);
 var $__p_i_i_i162=(sp)+(128);
 var $__p_i_i_i155=(sp)+(144);
 var $__p_i_i_i148=(sp)+(160);
 var $__p_i_i_i141=(sp)+(176);
 var $__p_i_i_i134=(sp)+(192);
 var $__p_i_i_i127=(sp)+(208);
 var $__p_i_i_i120=(sp)+(224);
 var $__p_i_i_i113=(sp)+(240);
 var $__p_i_i_i106=(sp)+(256);
 var $__p_i_i_i99=(sp)+(272);
 var $__p_i_i_i92=(sp)+(288);
 var $__p_i_i_i85=(sp)+(304);
 var $__p_i_i_i78=(sp)+(320);
 var $__p_i_i_i71=(sp)+(336);
 var $__p_i_i_i64=(sp)+(352);
 var $__p_i_i_i57=(sp)+(368);
 var $__p_i_i_i50=(sp)+(384);
 var $__p_i_i_i43=(sp)+(400);
 var $__p_i_i_i36=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $1=((($refs)-(1))|0);
 var $2=(($this)|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$1;
 HEAP32[(($2)>>2)]=7944;
 var $4=(($this+8)|0);
 var $5=(($this+12)|0);
 var $6=(($this+16)|0);
 var $7=(($this+136)|0);
 HEAP8[($7)]=1;
 var $8=(($this+24)|0);
 var $9=$8;
 HEAP32[(($5)>>2)]=$9;
 HEAP32[(($4)>>2)]=$9;
 var $10=(($8+112)|0);
 var $11=$10;
 HEAP32[(($6)>>2)]=$11;
 var $_0_i18_i=28;var $13=$9;label=2;break;
 case 2: 
 var $13;
 var $_0_i18_i;
 var $14=($13|0)==0;
 if($14){var $16=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($13)>>2)]=0;
 var $_pre11_i_i=HEAP32[(($5)>>2)];
 var $16=$_pre11_i_i;label=4;break;
 case 4: 
 var $16;
 var $17=(($16+4)|0);
 HEAP32[(($5)>>2)]=$17;
 var $18=((($_0_i18_i)-(1))|0);
 var $19=($18|0)==0;
 if($19){label=5;break;}else{var $_0_i18_i=$18;var $13=$17;label=2;break;}
 case 5: 
 var $20=(($this+144)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($20,4856,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=110;break; }
 case 6: 
 var $21=HEAP32[(($4)>>2)];
 var $22=HEAP32[(($5)>>2)];
 var $23=($21|0)==($22|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $24=$21;
 var $scevgep=((($22)-(4))|0);
 var $scevgep230=$scevgep;
 var $25=(((-$24))|0);
 var $uglygep=(($scevgep230+$25)|0);
 var $uglygep231=$uglygep;
 var $26=$uglygep231>>>2;
 var $27=$26^-1;
 var $scevgep232=(($22+($27<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep232;
 label=8;break;
 case 8: 
 HEAP32[((16636)>>2)]=0;
 HEAP32[((16632)>>2)]=7648;
 var $29=$__p_i_i_i;
 var $30=HEAP32[((17624)>>2)];
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=17624;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17624,$29,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=111;break; }
 case 10: 
 var $33=HEAP32[((17628)>>2)];
 var $34=((($33)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16632,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=111;break; }
 case 11: 
 HEAP32[((16628)>>2)]=0;
 HEAP32[((16624)>>2)]=7608;
 var $36=$__p_i_i_i36;
 var $37=HEAP32[((17616)>>2)];
 var $38=($37|0)==-1;
 if($38){label=13;break;}else{label=12;break;}
 case 12: 
 var $_sroa_016_0__idx_i_i37=(($__p_i_i_i36)|0);
 HEAP32[(($_sroa_016_0__idx_i_i37)>>2)]=17616;
 var $_sroa_117_4__idx18_i_i38=(($__p_i_i_i36+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i38)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i39=(($__p_i_i_i36+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17616,$36,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=111;break; }
 case 13: 
 var $40=HEAP32[((17620)>>2)];
 var $41=((($40)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16624,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=111;break; }
 case 14: 
 HEAP32[((16836)>>2)]=0;
 HEAP32[((16832)>>2)]=8056;
 HEAP32[((16840)>>2)]=0;
 HEAP8[(16844)]=0;
 var $42=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 16: 
 var $46=HEAP32[(($42)>>2)];
 HEAP32[((16840)>>2)]=$46;
 var $47=$__p_i_i_i43;
 var $48=HEAP32[((17944)>>2)];
 var $49=($48|0)==-1;
 if($49){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i44=(($__p_i_i_i43)|0);
 HEAP32[(($_sroa_016_0__idx_i_i44)>>2)]=17944;
 var $_sroa_117_4__idx18_i_i45=(($__p_i_i_i43+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i45)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i46=(($__p_i_i_i43+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i46)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17944,$47,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=111;break; }
 case 18: 
 var $51=HEAP32[((17948)>>2)];
 var $52=((($51)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16832,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=111;break; }
 case 19: 
 HEAP32[((16828)>>2)]=0;
 HEAP32[((16824)>>2)]=7976;
 var $54=$__p_i_i_i50;
 var $55=HEAP32[((17936)>>2)];
 var $56=($55|0)==-1;
 if($56){label=21;break;}else{label=20;break;}
 case 20: 
 var $_sroa_016_0__idx_i_i51=(($__p_i_i_i50)|0);
 HEAP32[(($_sroa_016_0__idx_i_i51)>>2)]=17936;
 var $_sroa_117_4__idx18_i_i52=(($__p_i_i_i50+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i52)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i53=(($__p_i_i_i50+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i53)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17936,$54,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=111;break; }
 case 21: 
 var $58=HEAP32[((17940)>>2)];
 var $59=((($58)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16824,$59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=111;break; }
 case 22: 
 HEAP32[((16644)>>2)]=0;
 HEAP32[((16640)>>2)]=7744;
 var $61=$__p_i_i_i57;
 var $62=HEAP32[((17640)>>2)];
 var $63=($62|0)==-1;
 if($63){label=24;break;}else{label=23;break;}
 case 23: 
 var $_sroa_016_0__idx_i_i58=(($__p_i_i_i57)|0);
 HEAP32[(($_sroa_016_0__idx_i_i58)>>2)]=17640;
 var $_sroa_117_4__idx18_i_i59=(($__p_i_i_i57+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i59)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i60=(($__p_i_i_i57+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i60)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17640,$61,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=111;break; }
 case 24: 
 var $65=HEAP32[((17644)>>2)];
 var $66=((($65)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16640,$66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=111;break; }
 case 25: 
 HEAP32[((6204)>>2)]=0;
 HEAP32[((6200)>>2)]=7688;
 var $67=HEAP8[(18504)];
 var $68=(($67<<24)>>24)==0;
 if($68){label=26;break;}else{label=30;break;}
 case 26: 
 var $70=___cxa_guard_acquire(18504);
 var $71=($70|0)==0;
 if($71){label=30;break;}else{label=27;break;}
 case 27: 
 var $73=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 HEAP32[((16504)>>2)]=$73;
 label=30;break;
 case 29: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(6200);
 var $eh_lpad_body$1=$75$1;var $eh_lpad_body$0=$75$0;label=112;break;
 case 30: 
 var $77=HEAP32[((16504)>>2)];
 HEAP32[((6208)>>2)]=$77;
 var $78=$__p_i_i_i64;
 var $79=HEAP32[((17632)>>2)];
 var $80=($79|0)==-1;
 if($80){label=32;break;}else{label=31;break;}
 case 31: 
 var $_sroa_016_0__idx_i_i65=(($__p_i_i_i64)|0);
 HEAP32[(($_sroa_016_0__idx_i_i65)>>2)]=17632;
 var $_sroa_117_4__idx18_i_i66=(($__p_i_i_i64+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i66)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i67=(($__p_i_i_i64+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i67)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17632,$78,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=111;break; }
 case 32: 
 var $82=HEAP32[((17636)>>2)];
 var $83=((($82)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,6200,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=111;break; }
 case 33: 
 HEAP32[((16652)>>2)]=0;
 HEAP32[((16648)>>2)]=7800;
 var $85=$__p_i_i_i71;
 var $86=HEAP32[((17648)>>2)];
 var $87=($86|0)==-1;
 if($87){label=35;break;}else{label=34;break;}
 case 34: 
 var $_sroa_016_0__idx_i_i72=(($__p_i_i_i71)|0);
 HEAP32[(($_sroa_016_0__idx_i_i72)>>2)]=17648;
 var $_sroa_117_4__idx18_i_i73=(($__p_i_i_i71+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i73)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i74=(($__p_i_i_i71+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i74)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17648,$85,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=111;break; }
 case 35: 
 var $89=HEAP32[((17652)>>2)];
 var $90=((($89)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16648,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=111;break; }
 case 36: 
 HEAP32[((16660)>>2)]=0;
 HEAP32[((16656)>>2)]=7856;
 var $92=$__p_i_i_i78;
 var $93=HEAP32[((17656)>>2)];
 var $94=($93|0)==-1;
 if($94){label=38;break;}else{label=37;break;}
 case 37: 
 var $_sroa_016_0__idx_i_i79=(($__p_i_i_i78)|0);
 HEAP32[(($_sroa_016_0__idx_i_i79)>>2)]=17656;
 var $_sroa_117_4__idx18_i_i80=(($__p_i_i_i78+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i80)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i81=(($__p_i_i_i78+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i81)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17656,$92,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=111;break; }
 case 38: 
 var $96=HEAP32[((17660)>>2)];
 var $97=((($96)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16656,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=111;break; }
 case 39: 
 HEAP32[((16556)>>2)]=0;
 HEAP32[((16552)>>2)]=7152;
 HEAP8[(16560)]=46;
 HEAP8[(16561)]=44;
 HEAP32[((16564)>>2)]=0; HEAP32[((16568)>>2)]=0; HEAP32[((16572)>>2)]=0;
 var $99=$__p_i_i_i85;
 var $100=HEAP32[((17560)>>2)];
 var $101=($100|0)==-1;
 if($101){label=41;break;}else{label=40;break;}
 case 40: 
 var $_sroa_016_0__idx_i_i86=(($__p_i_i_i85)|0);
 HEAP32[(($_sroa_016_0__idx_i_i86)>>2)]=17560;
 var $_sroa_117_4__idx18_i_i87=(($__p_i_i_i85+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i87)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i88=(($__p_i_i_i85+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i88)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17560,$99,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=111;break; }
 case 41: 
 var $103=HEAP32[((17564)>>2)];
 var $104=((($103)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16552,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=111;break; }
 case 42: 
 HEAP32[((6172)>>2)]=0;
 HEAP32[((6168)>>2)]=7104;
 HEAP32[((6176)>>2)]=46;
 HEAP32[((6180)>>2)]=44;
 HEAP32[((6184)>>2)]=0; HEAP32[((6188)>>2)]=0; HEAP32[((6192)>>2)]=0;
 var $106=$__p_i_i_i92;
 var $107=HEAP32[((17552)>>2)];
 var $108=($107|0)==-1;
 if($108){label=44;break;}else{label=43;break;}
 case 43: 
 var $_sroa_016_0__idx_i_i93=(($__p_i_i_i92)|0);
 HEAP32[(($_sroa_016_0__idx_i_i93)>>2)]=17552;
 var $_sroa_117_4__idx18_i_i94=(($__p_i_i_i92+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i94)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i95=(($__p_i_i_i92+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i95)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17552,$106,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=111;break; }
 case 44: 
 var $110=HEAP32[((17556)>>2)];
 var $111=((($110)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,6168,$111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=111;break; }
 case 45: 
 HEAP32[((16620)>>2)]=0;
 HEAP32[((16616)>>2)]=7536;
 var $113=$__p_i_i_i99;
 var $114=HEAP32[((17608)>>2)];
 var $115=($114|0)==-1;
 if($115){label=47;break;}else{label=46;break;}
 case 46: 
 var $_sroa_016_0__idx_i_i100=(($__p_i_i_i99)|0);
 HEAP32[(($_sroa_016_0__idx_i_i100)>>2)]=17608;
 var $_sroa_117_4__idx18_i_i101=(($__p_i_i_i99+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i101)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i102=(($__p_i_i_i99+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i102)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17608,$113,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=111;break; }
 case 47: 
 var $117=HEAP32[((17612)>>2)];
 var $118=((($117)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16616,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=111;break; }
 case 48: 
 HEAP32[((16612)>>2)]=0;
 HEAP32[((16608)>>2)]=7464;
 var $120=$__p_i_i_i106;
 var $121=HEAP32[((17600)>>2)];
 var $122=($121|0)==-1;
 if($122){label=50;break;}else{label=49;break;}
 case 49: 
 var $_sroa_016_0__idx_i_i107=(($__p_i_i_i106)|0);
 HEAP32[(($_sroa_016_0__idx_i_i107)>>2)]=17600;
 var $_sroa_117_4__idx18_i_i108=(($__p_i_i_i106+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i108)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i109=(($__p_i_i_i106+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i109)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17600,$120,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=111;break; }
 case 50: 
 var $124=HEAP32[((17604)>>2)];
 var $125=((($124)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16608,$125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=111;break; }
 case 51: 
 HEAP32[((16604)>>2)]=0;
 HEAP32[((16600)>>2)]=7400;
 var $127=$__p_i_i_i113;
 var $128=HEAP32[((17592)>>2)];
 var $129=($128|0)==-1;
 if($129){label=53;break;}else{label=52;break;}
 case 52: 
 var $_sroa_016_0__idx_i_i114=(($__p_i_i_i113)|0);
 HEAP32[(($_sroa_016_0__idx_i_i114)>>2)]=17592;
 var $_sroa_117_4__idx18_i_i115=(($__p_i_i_i113+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i115)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i116=(($__p_i_i_i113+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i116)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17592,$127,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=111;break; }
 case 53: 
 var $131=HEAP32[((17596)>>2)];
 var $132=((($131)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16600,$132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=111;break; }
 case 54: 
 HEAP32[((16596)>>2)]=0;
 HEAP32[((16592)>>2)]=7336;
 var $134=$__p_i_i_i120;
 var $135=HEAP32[((17584)>>2)];
 var $136=($135|0)==-1;
 if($136){label=56;break;}else{label=55;break;}
 case 55: 
 var $_sroa_016_0__idx_i_i121=(($__p_i_i_i120)|0);
 HEAP32[(($_sroa_016_0__idx_i_i121)>>2)]=17584;
 var $_sroa_117_4__idx18_i_i122=(($__p_i_i_i120+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i122)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i123=(($__p_i_i_i120+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i123)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17584,$134,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=111;break; }
 case 56: 
 var $138=HEAP32[((17588)>>2)];
 var $139=((($138)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16592,$139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=111;break; }
 case 57: 
 HEAP32[((16876)>>2)]=0;
 HEAP32[((16872)>>2)]=9032;
 var $141=$__p_i_i_i127;
 var $142=HEAP32[((18424)>>2)];
 var $143=($142|0)==-1;
 if($143){label=59;break;}else{label=58;break;}
 case 58: 
 var $_sroa_016_0__idx_i_i128=(($__p_i_i_i127)|0);
 HEAP32[(($_sroa_016_0__idx_i_i128)>>2)]=18424;
 var $_sroa_117_4__idx18_i_i129=(($__p_i_i_i127+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i129)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i130=(($__p_i_i_i127+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i130)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18424,$141,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=111;break; }
 case 59: 
 var $145=HEAP32[((18428)>>2)];
 var $146=((($145)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16872,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=111;break; }
 case 60: 
 HEAP32[((16868)>>2)]=0;
 HEAP32[((16864)>>2)]=8968;
 var $148=$__p_i_i_i134;
 var $149=HEAP32[((18416)>>2)];
 var $150=($149|0)==-1;
 if($150){label=62;break;}else{label=61;break;}
 case 61: 
 var $_sroa_016_0__idx_i_i135=(($__p_i_i_i134)|0);
 HEAP32[(($_sroa_016_0__idx_i_i135)>>2)]=18416;
 var $_sroa_117_4__idx18_i_i136=(($__p_i_i_i134+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i136)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i137=(($__p_i_i_i134+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i137)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18416,$148,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=111;break; }
 case 62: 
 var $152=HEAP32[((18420)>>2)];
 var $153=((($152)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16864,$153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=111;break; }
 case 63: 
 HEAP32[((16860)>>2)]=0;
 HEAP32[((16856)>>2)]=8904;
 var $155=$__p_i_i_i141;
 var $156=HEAP32[((18408)>>2)];
 var $157=($156|0)==-1;
 if($157){label=65;break;}else{label=64;break;}
 case 64: 
 var $_sroa_016_0__idx_i_i142=(($__p_i_i_i141)|0);
 HEAP32[(($_sroa_016_0__idx_i_i142)>>2)]=18408;
 var $_sroa_117_4__idx18_i_i143=(($__p_i_i_i141+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i143)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i144=(($__p_i_i_i141+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i144)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18408,$155,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=111;break; }
 case 65: 
 var $159=HEAP32[((18412)>>2)];
 var $160=((($159)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16856,$160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=111;break; }
 case 66: 
 HEAP32[((16852)>>2)]=0;
 HEAP32[((16848)>>2)]=8840;
 var $162=$__p_i_i_i148;
 var $163=HEAP32[((18400)>>2)];
 var $164=($163|0)==-1;
 if($164){label=68;break;}else{label=67;break;}
 case 67: 
 var $_sroa_016_0__idx_i_i149=(($__p_i_i_i148)|0);
 HEAP32[(($_sroa_016_0__idx_i_i149)>>2)]=18400;
 var $_sroa_117_4__idx18_i_i150=(($__p_i_i_i148+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i150)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i151=(($__p_i_i_i148+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i151)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18400,$162,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=111;break; }
 case 68: 
 var $166=HEAP32[((18404)>>2)];
 var $167=((($166)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16848,$167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=111;break; }
 case 69: 
 HEAP32[((16548)>>2)]=0;
 HEAP32[((16544)>>2)]=6808;
 var $169=$__p_i_i_i155;
 var $170=HEAP32[((17512)>>2)];
 var $171=($170|0)==-1;
 if($171){label=71;break;}else{label=70;break;}
 case 70: 
 var $_sroa_016_0__idx_i_i156=(($__p_i_i_i155)|0);
 HEAP32[(($_sroa_016_0__idx_i_i156)>>2)]=17512;
 var $_sroa_117_4__idx18_i_i157=(($__p_i_i_i155+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i157)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i158=(($__p_i_i_i155+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i158)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17512,$169,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=111;break; }
 case 71: 
 var $173=HEAP32[((17516)>>2)];
 var $174=((($173)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16544,$174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=111;break; }
 case 72: 
 HEAP32[((16540)>>2)]=0;
 HEAP32[((16536)>>2)]=6768;
 var $176=$__p_i_i_i162;
 var $177=HEAP32[((17504)>>2)];
 var $178=($177|0)==-1;
 if($178){label=74;break;}else{label=73;break;}
 case 73: 
 var $_sroa_016_0__idx_i_i163=(($__p_i_i_i162)|0);
 HEAP32[(($_sroa_016_0__idx_i_i163)>>2)]=17504;
 var $_sroa_117_4__idx18_i_i164=(($__p_i_i_i162+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i164)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i165=(($__p_i_i_i162+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i165)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17504,$176,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=111;break; }
 case 74: 
 var $180=HEAP32[((17508)>>2)];
 var $181=((($180)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16536,$181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=111;break; }
 case 75: 
 HEAP32[((16532)>>2)]=0;
 HEAP32[((16528)>>2)]=6728;
 var $183=$__p_i_i_i169;
 var $184=HEAP32[((17496)>>2)];
 var $185=($184|0)==-1;
 if($185){label=77;break;}else{label=76;break;}
 case 76: 
 var $_sroa_016_0__idx_i_i170=(($__p_i_i_i169)|0);
 HEAP32[(($_sroa_016_0__idx_i_i170)>>2)]=17496;
 var $_sroa_117_4__idx18_i_i171=(($__p_i_i_i169+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i171)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i172=(($__p_i_i_i169+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i172)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17496,$183,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=111;break; }
 case 77: 
 var $187=HEAP32[((17500)>>2)];
 var $188=((($187)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16528,$188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=111;break; }
 case 78: 
 HEAP32[((16524)>>2)]=0;
 HEAP32[((16520)>>2)]=6688;
 var $190=$__p_i_i_i176;
 var $191=HEAP32[((17488)>>2)];
 var $192=($191|0)==-1;
 if($192){label=80;break;}else{label=79;break;}
 case 79: 
 var $_sroa_016_0__idx_i_i177=(($__p_i_i_i176)|0);
 HEAP32[(($_sroa_016_0__idx_i_i177)>>2)]=17488;
 var $_sroa_117_4__idx18_i_i178=(($__p_i_i_i176+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i178)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i179=(($__p_i_i_i176+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i179)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17488,$190,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=111;break; }
 case 80: 
 var $194=HEAP32[((17492)>>2)];
 var $195=((($194)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16520,$195) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=111;break; }
 case 81: 
 HEAP32[((6156)>>2)]=0;
 HEAP32[((6152)>>2)]=7008;
 HEAP32[((6160)>>2)]=7056;
 var $197=$__p_i_i_i183;
 var $198=HEAP32[((17544)>>2)];
 var $199=($198|0)==-1;
 if($199){label=83;break;}else{label=82;break;}
 case 82: 
 var $_sroa_016_0__idx_i_i184=(($__p_i_i_i183)|0);
 HEAP32[(($_sroa_016_0__idx_i_i184)>>2)]=17544;
 var $_sroa_117_4__idx18_i_i185=(($__p_i_i_i183+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i185)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i186=(($__p_i_i_i183+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i186)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17544,$197,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=111;break; }
 case 83: 
 var $201=HEAP32[((17548)>>2)];
 var $202=((($201)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,6152,$202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=111;break; }
 case 84: 
 HEAP32[((6140)>>2)]=0;
 HEAP32[((6136)>>2)]=6912;
 HEAP32[((6144)>>2)]=6960;
 var $204=$__p_i_i_i190;
 var $205=HEAP32[((17536)>>2)];
 var $206=($205|0)==-1;
 if($206){label=86;break;}else{label=85;break;}
 case 85: 
 var $_sroa_016_0__idx_i_i191=(($__p_i_i_i190)|0);
 HEAP32[(($_sroa_016_0__idx_i_i191)>>2)]=17536;
 var $_sroa_117_4__idx18_i_i192=(($__p_i_i_i190+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i192)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i193=(($__p_i_i_i190+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i193)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17536,$204,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=111;break; }
 case 86: 
 var $208=HEAP32[((17540)>>2)];
 var $209=((($208)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,6136,$209) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=111;break; }
 case 87: 
 HEAP32[((6124)>>2)]=0;
 HEAP32[((6120)>>2)]=7912;
 var $210=HEAP8[(18504)];
 var $211=(($210<<24)>>24)==0;
 if($211){label=88;break;}else{label=92;break;}
 case 88: 
 var $213=___cxa_guard_acquire(18504);
 var $214=($213|0)==0;
 if($214){label=92;break;}else{label=89;break;}
 case 89: 
 var $216=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 90: 
 HEAP32[((16504)>>2)]=$216;
 label=92;break;
 case 91: 
 var $218$0 = ___cxa_find_matching_catch(-1, -1); var $218$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(6120);
 var $eh_lpad_body$1=$218$1;var $eh_lpad_body$0=$218$0;label=112;break;
 case 92: 
 var $220=HEAP32[((16504)>>2)];
 HEAP32[((6128)>>2)]=$220;
 HEAP32[((6120)>>2)]=6880;
 var $221=$__p_i_i_i199;
 var $222=HEAP32[((17528)>>2)];
 var $223=($222|0)==-1;
 if($223){label=94;break;}else{label=93;break;}
 case 93: 
 var $_sroa_016_0__idx_i_i200=(($__p_i_i_i199)|0);
 HEAP32[(($_sroa_016_0__idx_i_i200)>>2)]=17528;
 var $_sroa_117_4__idx18_i_i201=(($__p_i_i_i199+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i201)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i202=(($__p_i_i_i199+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i202)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17528,$221,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=111;break; }
 case 94: 
 var $225=HEAP32[((17532)>>2)];
 var $226=((($225)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,6120,$226) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=111;break; }
 case 95: 
 HEAP32[((6108)>>2)]=0;
 HEAP32[((6104)>>2)]=7912;
 var $227=HEAP8[(18504)];
 var $228=(($227<<24)>>24)==0;
 if($228){label=96;break;}else{label=100;break;}
 case 96: 
 var $230=___cxa_guard_acquire(18504);
 var $231=($230|0)==0;
 if($231){label=100;break;}else{label=97;break;}
 case 97: 
 var $233=(function() { try { __THREW__ = 0; return _newlocale(2147483647,4856,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 HEAP32[((16504)>>2)]=$233;
 label=100;break;
 case 99: 
 var $235$0 = ___cxa_find_matching_catch(-1, -1); var $235$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(6104);
 var $eh_lpad_body$1=$235$1;var $eh_lpad_body$0=$235$0;label=112;break;
 case 100: 
 var $237=HEAP32[((16504)>>2)];
 HEAP32[((6112)>>2)]=$237;
 HEAP32[((6104)>>2)]=6848;
 var $238=$__p_i_i_i209;
 var $239=HEAP32[((17520)>>2)];
 var $240=($239|0)==-1;
 if($240){label=102;break;}else{label=101;break;}
 case 101: 
 var $_sroa_016_0__idx_i_i210=(($__p_i_i_i209)|0);
 HEAP32[(($_sroa_016_0__idx_i_i210)>>2)]=17520;
 var $_sroa_117_4__idx18_i_i211=(($__p_i_i_i209+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i211)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i212=(($__p_i_i_i209+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i212)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17520,$238,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=111;break; }
 case 102: 
 var $242=HEAP32[((17524)>>2)];
 var $243=((($242)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,6104,$243) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=111;break; }
 case 103: 
 HEAP32[((16588)>>2)]=0;
 HEAP32[((16584)>>2)]=7240;
 var $245=$__p_i_i_i216;
 var $246=HEAP32[((17576)>>2)];
 var $247=($246|0)==-1;
 if($247){label=105;break;}else{label=104;break;}
 case 104: 
 var $_sroa_016_0__idx_i_i217=(($__p_i_i_i216)|0);
 HEAP32[(($_sroa_016_0__idx_i_i217)>>2)]=17576;
 var $_sroa_117_4__idx18_i_i218=(($__p_i_i_i216+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i218)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i219=(($__p_i_i_i216+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i219)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17576,$245,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=111;break; }
 case 105: 
 var $249=HEAP32[((17580)>>2)];
 var $250=((($249)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16584,$250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 HEAP32[((16580)>>2)]=0;
 HEAP32[((16576)>>2)]=7200;
 var $252=$__p_i_i_i223;
 var $253=HEAP32[((17568)>>2)];
 var $254=($253|0)==-1;
 if($254){label=108;break;}else{label=107;break;}
 case 107: 
 var $_sroa_016_0__idx_i_i224=(($__p_i_i_i223)|0);
 HEAP32[(($_sroa_016_0__idx_i_i224)>>2)]=17568;
 var $_sroa_117_4__idx18_i_i225=(($__p_i_i_i223+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i225)>>2)]=(24);
 var $_sroa_219_8__idx20_i_i226=(($__p_i_i_i223+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i226)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(17568,$252,270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=111;break; }
 case 108: 
 var $256=HEAP32[((17572)>>2)];
 var $257=((($256)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16576,$257) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $259$0 = ___cxa_find_matching_catch(-1, -1); var $259$1 = tempRet0;
 var $260=$259$0;
 var $261=$259$1;
 var $_0=$261;var $_031=$260;label=113;break;
 case 111: 
 var $263$0 = ___cxa_find_matching_catch(-1, -1); var $263$1 = tempRet0;
 var $eh_lpad_body$1=$263$1;var $eh_lpad_body$0=$263$0;label=112;break;
 case 112: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $264=$eh_lpad_body$0;
 var $265=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($20);
 var $_0=$265;var $_031=$264;label=113;break;
 case 113: 
 var $_031;
 var $_0;
 var $267=HEAP32[(($4)>>2)];
 var $268=$267;
 var $269=($267|0)==0;
 if($269){label=119;break;}else{label=114;break;}
 case 114: 
 var $270=HEAP32[(($5)>>2)];
 var $271=($267|0)==($270|0);
 if($271){label=116;break;}else{label=115;break;}
 case 115: 
 var $scevgep_i_i_i=((($270)-(4))|0);
 var $scevgep25_i_i_i=$scevgep_i_i_i;
 var $272=(((-$268))|0);
 var $uglygep_i_i_i=(($scevgep25_i_i_i+$272)|0);
 var $uglygep26_i_i_i=$uglygep_i_i_i;
 var $273=$uglygep26_i_i_i>>>2;
 var $274=$273^-1;
 var $scevgep27_i_i_i=(($270+($274<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep27_i_i_i;
 label=116;break;
 case 116: 
 var $275=(($this+24)|0);
 var $276=$275;
 var $277=($267|0)==($276|0);
 if($277){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($7)]=0;
 label=119;break;
 case 118: 
 var $280=$267;
 __ZdlPv($280);
 label=119;break;
 case 119: 
 var $281=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($281);
 var $282$0=$_031;
 var $282$1=0;
 var $283$0=$282$0;
 var $283$1=$_0;
 ___resumeException($283$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 var $2=(($this+8)|0);
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=$9>>2;
 var $11=($10>>>0)>($id>>>0);
 if($11){var $30=$6;label=11;break;}else{label=2;break;}
 case 2: 
 var $13=((($id)+(1))|0);
 var $14=($10>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 var $16=((($13)-($10))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($2,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $_pre25=HEAP32[(($5)>>2)];
 var $30=$_pre25;label=11;break;
 case 5: 
 var $18=($10>>>0)>($13>>>0);
 if($18){label=6;break;}else{var $30=$6;label=11;break;}
 case 6: 
 var $20=(($6+($13<<2))|0);
 var $21=($20|0)==($4|0);
 if($21){var $30=$6;label=11;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($4)-(4))|0);
 var $scevgep20_i=$scevgep_i;
 var $scevgep2122_i=$20;
 var $22=(((-$scevgep2122_i))|0);
 var $uglygep_i=(($scevgep20_i+$22)|0);
 var $uglygep23_i=$uglygep_i;
 var $23=$uglygep23_i>>>2;
 var $24=$23^-1;
 var $scevgep24_i=(($4+($24<<2))|0);
 HEAP32[(($3)>>2)]=$scevgep24_i;
 var $30=$6;label=11;break;
 case 8: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=($f|0)==0;
 if($27){label=10;break;}else{label=9;break;}
 case 9: 
 var $29=__ZNSt3__114__shared_count16__release_sharedEv($1);
 label=10;break;
 case 10: 
 ___resumeException($26$0)
 case 11: 
 var $30;
 var $31=(($30+($id<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){var $37=$30;label=13;break;}else{label=12;break;}
 case 12: 
 var $35=(($32)|0);
 var $36=__ZNSt3__114__shared_count16__release_sharedEv($35);
 var $_pre=HEAP32[(($5)>>2)];
 var $37=$_pre;label=13;break;
 case 13: 
 var $37;
 var $38=(($37+($id<<2))|0);
 HEAP32[(($38)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;
 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7944;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){label=5;break;}else{var $i_09=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_09;
 var $9=(($8+($i_09<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $17=$7;var $16=$8;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($10)|0);
 var $14=__ZNSt3__114__shared_count16__release_sharedEv($13);
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre10=HEAP32[(($4)>>2)];
 var $17=$_pre;var $16=$_pre10;label=4;break;
 case 4: 
 var $16;
 var $17;
 var $18=((($i_09)+(1))|0);
 var $19=$17;
 var $20=$16;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($18>>>0)<($22>>>0);
 if($23){var $i_09=$18;var $8=$16;var $7=$17;label=2;break;}else{label=5;break;}
 case 5: 
 var $24=(($this+144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 var $25=HEAP32[(($4)>>2)];
 var $26=$25;
 var $27=($25|0)==0;
 if($27){label=11;break;}else{label=6;break;}
 case 6: 
 var $28=HEAP32[(($2)>>2)];
 var $29=($25|0)==($28|0);
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i_i=((($28)-(4))|0);
 var $scevgep25_i_i_i=$scevgep_i_i_i;
 var $30=(((-$26))|0);
 var $uglygep_i_i_i=(($scevgep25_i_i_i+$30)|0);
 var $uglygep26_i_i_i=$uglygep_i_i_i;
 var $31=$uglygep26_i_i_i>>>2;
 var $32=$31^-1;
 var $scevgep27_i_i_i=(($28+($32<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep27_i_i_i;
 label=8;break;
 case 8: 
 var $33=(($this+24)|0);
 var $34=$33;
 var $35=($25|0)==($34|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=(($this+136)|0);
 HEAP8[($37)]=0;
 label=11;break;
 case 10: 
 var $39=$25;
 __ZdlPv($39);
 label=11;break;
 case 11: 
 var $40=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($40);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale8__globalEv(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18488)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=8;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18488);
 var $5=($4|0)==0;
 if($5){label=8;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18496)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18496);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(16664,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((16488)>>2)]=16664;
 HEAP32[((16480)>>2)]=16488;
 label=7;break;
 case 7: 
 var $15=HEAP32[((16480)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 HEAP32[((16496)>>2)]=$17;
 var $18=(($17)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($18);
 HEAP32[((16472)>>2)]=16496;
 label=8;break;
 case 8: 
 var $20=HEAP32[((16472)>>2)];
 return $20;
 case 9: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $3=(($this)|0);
 var $4=(($1)|0);
 var $5=HEAP32[(($4)>>2)];
 HEAP32[(($3)>>2)]=$5;
 var $6=(($5)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($6);
 return;
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l){
 var label=0;
 var $1=(($this)|0);
 var $2=(($l)|0);
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($1)>>2)]=$3;
 var $4=(($3)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 return;
}
function __ZNSt3__16localeD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=__ZNSt3__114__shared_count16__release_sharedEv($3);
 return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i;
 var $4=(($x)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==-1;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i=(($__p_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i)>>2)]=$x;
 var $_sroa_117_4__idx18_i=(($__p_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i)>>2)]=(24);
 var $_sroa_219_8__idx20_i=(($__p_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,270);
 label=3;break;
 case 3: 
 var $8=(($x+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=((($9)-(1))|0);
 var $11=(($2+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($2+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$12;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $19=($18>>>0)>($10>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=(($14+($10<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 __ZNSt8bad_castC2Ev($24);
 ___cxa_throw($23,12744,(374));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale2id6__initEv($this){
 var label=0;
 var $1=(tempValue=HEAP32[((17664)>>2)],HEAP32[((17664)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<1))|0);
 var $7=HEAP16[(($6)>>1)];
 var $8=$7&$m;
 var $phitmp=(($8<<16)>>16)!=0;
 var $10=$phitmp;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_08_lcssa=$low;label=7;break;}else{var $_0810=$low;var $_011=$vec;label=2;break;}
 case 2: 
 var $_011;
 var $_0810;
 var $2=HEAP32[(($_0810)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $_off0=$9;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_011)>>1)]=$_off0;
 var $11=(($_0810+4)|0);
 var $12=(($_011+2)|0);
 var $13=($11|0)==($high|0);
 if($13){var $_08_lcssa=$high;label=7;break;}else{var $_0810=$11;var $_011=$12;label=2;break;}
 case 7: 
 var $_08_lcssa;
 return $_08_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP32[(($_09)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $10=$9&$m;
 var $11=(($10<<16)>>16)==0;
 if($11){label=6;break;}else{var $_0_lcssa=$_09;label=7;break;}
 case 6: 
 var $13=(($_09+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_09=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$low;label=2;break;
 case 2: 
 var $_0;
 var $2=($_0|0)==($high|0);
 if($2){var $_0_lcssa=$high;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_0)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_0;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $9=HEAP32[(($6)>>2)];
 var $10=(($9+($4<<1))|0);
 var $11=HEAP16[(($10)>>1)];
 var $12=$11&$m;
 var $13=(($12<<16)>>16)==0;
 var $14=(($_0+4)|0);
 if($13){var $_0_lcssa=$_0;label=7;break;}else{var $_0=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $9=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $9=$7;label=5;break;
 case 5: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_08=$low;label=2;break;}
 case 2: 
 var $_08;
 var $2=HEAP32[(($_08)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $11=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $11=$9;label=6;break;
 case 6: 
 var $11;
 HEAP32[(($_08)>>2)]=$11;
 var $12=(($_08+4)|0);
 var $13=($12|0)==($high|0);
 if($13){var $_0_lcssa=$high;label=7;break;}else{var $_08=$12;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $9=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $9=$7;label=5;break;
 case 5: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_08=$low;label=2;break;}
 case 2: 
 var $_08;
 var $2=HEAP32[(($_08)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $11=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $11=$9;label=6;break;
 case 6: 
 var $11;
 HEAP32[(($_08)>>2)]=$11;
 var $12=(($_08+4)|0);
 var $13=($12|0)==($high|0);
 if($13){var $_0_lcssa=$high;label=7;break;}else{var $_08=$12;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;
 var $1=(($c<<24)>>24);
 return $1;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_07_lcssa=$low;label=3;break;}else{var $_078=$low;var $_09=$dest;label=2;break;}
 case 2: 
 var $_09;
 var $_078;
 var $2=HEAP8[($_078)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_09)>>2)]=$3;
 var $4=(($_078+1)|0);
 var $5=(($_09+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_07_lcssa=$high;label=3;break;}else{var $_078=$4;var $_09=$5;label=2;break;}
 case 3: 
 var $_07_lcssa;
 return $_07_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;
 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=$isascii?$1:$dfault;
 return $_0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_010_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low14=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep13=$scevgep;
 var $2=(((-$low14))|0);
 var $uglygep=(($scevgep13+$2)|0);
 var $uglygep15=$uglygep;
 var $3=$uglygep15>>>2;
 var $4=((($3)+(1))|0);
 var $_01011=$low;var $_012=$dest;label=3;break;
 case 3: 
 var $_012;
 var $_01011;
 var $6=HEAP32[(($_01011)>>2)];
 var $isascii=($6>>>0)<128;
 var $7=(($6)&255);
 var $_dfault=$isascii?$7:$dfault;
 HEAP8[($_012)]=$_dfault;
 var $8=(($_01011+4)|0);
 var $9=(($_012+1)|0);
 var $10=($8|0)==($high|0);
 if($10){label=4;break;}else{var $_01011=$8;var $_012=$9;label=3;break;}
 case 4: 
 var $scevgep16=(($low+($4<<2))|0);
 var $_010_lcssa=$scevgep16;label=5;break;
 case 5: 
 var $_010_lcssa;
 return $_010_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8056;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$3;
 __ZdaPv($11);
 label=4;break;
 case 4: 
 var $12=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($12);
 var $13=$this;
 __ZdlPv($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8056;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$3;
 __ZdaPv($11);
 label=4;break;
 case 4: 
 var $13=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c<<24)>>24)<0;
 if($1){var $12=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1,0); var $5$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($3)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP8[($_09)];
 var $3=(($2<<24)>>24)<0;
 if($3){var $14=$2;label=6;break;}else{label=3;break;}
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_09)]=$14;
 var $15=(($_09+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_09=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c<<24)>>24);
 var $2=(($c<<24)>>24)<0;
 if($2){var $12=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($1<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP8[($_09)];
 var $3=(($2<<24)>>24)<0;
 if($3){var $14=$2;label=6;break;}else{label=3;break;}
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_09)]=$14;
 var $15=(($_09+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_09=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;
 return $c;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_07_lcssa=$low;label=3;break;}else{var $_078=$low;var $_09=$dest;label=2;break;}
 case 2: 
 var $_09;
 var $_078;
 var $2=HEAP8[($_078)];
 HEAP8[($_09)]=$2;
 var $3=(($_078+1)|0);
 var $4=(($_09+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_07_lcssa=$high;label=3;break;}else{var $_078=$3;var $_09=$4;label=2;break;}
 case 3: 
 var $_07_lcssa;
 return $_07_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;
 var $1=(($c<<24)>>24)<0;
 var $dfault_c=$1?$dfault:$c;
 return $dfault_c;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_010_lcssa=$low;label=3;break;}else{var $_01012=$low;var $_013=$dest;label=2;break;}
 case 2: 
 var $_013;
 var $_01012;
 var $2=HEAP8[($_01012)];
 var $3=(($2<<24)>>24)<0;
 var $dfault_=$3?$dfault:$2;
 HEAP8[($_013)]=$dfault_;
 var $4=(($_01012+1)|0);
 var $5=(($_013+1)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_010_lcssa=$high;label=3;break;}else{var $_01012=$4;var $_013=$5;label=2;break;}
 case 3: 
 var $_010_lcssa;
 return $_010_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;
 var $1=$end;
 var $2=$frm;
 var $3=((($1)-($2))|0);
 var $4=($3>>>0)<($mx>>>0);
 var $_sroa_speculated=$4?$3:$mx;
 return $_sroa_speculated;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $2=($fend_0|0)==($frm_end|0);
 if($2){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($fend_0)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_0+4)|0);
 if($5){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$6;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $8=($frm|0)==($frm_end|0);
 var $9=($to|0)==($to_end|0);
 var $or_cond251=$8|$9;
 if($or_cond251){var $115=$frm;label=49;break;}else{label=5;break;}
 case 5: 
 var $10=$st;
 var $11=$to_end;
 var $12=(($this+8)|0);
 var $13=(($tmp)|0);
 var $_0194252=$to;var $_0193253=$frm;var $fend_1254=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1254;
 var $_0193253;
 var $_0194252;
 var $ld$0$0=(($10)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$15$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$15$1;
 var $16=$fend_1254;
 var $17=$_0193253;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=$_0194252;
 var $21=((($11)-($20))|0);
 var $22=HEAP32[(($12)>>2)];
 var $23=_uselocale($22);
 var $24=(function() { try { __THREW__ = 0; return _wcsnrtombs($_0194252,$frm_nxt,$19,$21,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $26=($23|0)==0;
 if($26){label=14;break;}else{label=8;break;}
 case 8: 
 var $28=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 9: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=($23|0)==0;
 if($33){label=13;break;}else{label=11;break;}
 case 11: 
 var $35=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $37$0 = ___cxa_find_matching_catch(-1, -1,0); var $37$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 ___resumeException($32$0)
 case 14: 
 if(($24|0)==-1){ label=15;break;}else if(($24|0)==0){ var $_0=1;label=50;break;}else{label=27;break;}
 case 15: 
 HEAP32[(($to_nxt)>>2)]=$_0194252;
 var $39=HEAP32[(($frm_nxt)>>2)];
 var $40=($_0193253|0)==($39|0);
 if($40){var $_1_lcssa=$_0193253;label=26;break;}else{var $_1218=$_0193253;var $41=$_0194252;label=16;break;}
 case 16: 
 var $41;
 var $_1218;
 var $42=HEAP32[(($_1218)>>2)];
 var $43=HEAP32[(($12)>>2)];
 var $44=_uselocale($43);
 var $45=(function() { try { __THREW__ = 0; return _wcrtomb($41,$42,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $47=($44|0)==0;
 if($47){label=24;break;}else{label=18;break;}
 case 18: 
 var $49=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 19: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $54=($44|0)==0;
 if($54){label=23;break;}else{label=21;break;}
 case 21: 
 var $56=(function() { try { __THREW__ = 0; return _uselocale($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1,0); var $58$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 23: 
 ___resumeException($53$0)
 case 24: 
 var $59=($45|0)==-1;
 if($59){var $_1_lcssa=$_1218;label=26;break;}else{label=25;break;}
 case 25: 
 var $61=HEAP32[(($to_nxt)>>2)];
 var $62=(($61+$45)|0);
 HEAP32[(($to_nxt)>>2)]=$62;
 var $63=(($_1218+4)|0);
 var $64=HEAP32[(($frm_nxt)>>2)];
 var $65=($63|0)==($64|0);
 if($65){var $_1_lcssa=$63;label=26;break;}else{var $_1218=$63;var $41=$62;label=16;break;}
 case 26: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=50;break;
 case 27: 
 var $67=HEAP32[(($to_nxt)>>2)];
 var $68=(($67+$24)|0);
 HEAP32[(($to_nxt)>>2)]=$68;
 var $69=($68|0)==($to_end|0);
 if($69){label=48;break;}else{label=28;break;}
 case 28: 
 var $71=($fend_1254|0)==($frm_end|0);
 if($71){label=29;break;}else{label=30;break;}
 case 29: 
 var $_pre291=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $112=$68;var $111=$_pre291;label=47;break;
 case 30: 
 var $73=HEAP32[(($12)>>2)];
 var $74=_uselocale($73);
 var $75=(function() { try { __THREW__ = 0; return _wcrtomb($13,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $77=($74|0)==0;
 if($77){label=38;break;}else{label=32;break;}
 case 32: 
 var $79=(function() { try { __THREW__ = 0; return _uselocale($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 33: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1,0); var $81$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 34: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 var $84=($74|0)==0;
 if($84){label=37;break;}else{label=35;break;}
 case 35: 
 var $86=(function() { try { __THREW__ = 0; return _uselocale($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=36;break; }
 case 36: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 37: 
 ___resumeException($83$0)
 case 38: 
 var $89=($75|0)==-1;
 if($89){var $_0=2;label=50;break;}else{label=39;break;}
 case 39: 
 var $91=HEAP32[(($to_nxt)>>2)];
 var $92=$91;
 var $93=((($11)-($92))|0);
 var $94=($75>>>0)>($93>>>0);
 if($94){var $_0=1;label=50;break;}else{label=40;break;}
 case 40: 
 var $95=($75|0)==0;
 if($95){label=43;break;}else{var $n_0220=$75;var $p_0221=$13;var $96=$91;label=41;break;}
 case 41: 
 var $96;
 var $p_0221;
 var $n_0220;
 var $97=HEAP8[($p_0221)];
 var $98=(($96+1)|0);
 HEAP32[(($to_nxt)>>2)]=$98;
 HEAP8[($96)]=$97;
 var $99=((($n_0220)-(1))|0);
 var $100=($99|0)==0;
 if($100){label=43;break;}else{label=42;break;}
 case 42: 
 var $101=(($p_0221+1)|0);
 var $_pre292=HEAP32[(($to_nxt)>>2)];
 var $n_0220=$99;var $p_0221=$101;var $96=$_pre292;label=41;break;
 case 43: 
 var $102=HEAP32[(($frm_nxt)>>2)];
 var $103=(($102+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$103;
 var $fend_2=$103;label=44;break;
 case 44: 
 var $fend_2;
 var $105=($fend_2|0)==($frm_end|0);
 if($105){var $fend_2_lcssa=$frm_end;label=46;break;}else{label=45;break;}
 case 45: 
 var $107=HEAP32[(($fend_2)>>2)];
 var $108=($107|0)==0;
 var $109=(($fend_2+4)|0);
 if($108){var $fend_2_lcssa=$fend_2;label=46;break;}else{var $fend_2=$109;label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre288=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $112=$_pre288;var $111=$103;label=47;break;
 case 47: 
 var $111;
 var $112;
 var $fend_3;
 var $113=($111|0)==($frm_end|0);
 var $114=($112|0)==($to_end|0);
 var $or_cond=$113|$114;
 if($or_cond){var $115=$111;label=49;break;}else{var $_0194252=$112;var $_0193253=$111;var $fend_1254=$fend_3;label=6;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $115=$_pre;label=49;break;
 case 49: 
 var $115;
 var $not_=($115|0)!=($frm_end|0);
 var $116=($not_&1);
 var $_0=$116;label=50;break;
 case 50: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $2=($fend_0|0)==($frm_end|0);
 if($2){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($fend_0)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_0+1)|0);
 if($5){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$6;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $8=($frm|0)==($frm_end|0);
 var $9=($to|0)==($to_end|0);
 var $or_cond266=$8|$9;
 if($or_cond266){var $108=$frm;label=48;break;}else{label=5;break;}
 case 5: 
 var $10=$st;
 var $11=$to_end;
 var $12=(($this+8)|0);
 var $_0202267=$to;var $_0201268=$frm;var $fend_1269=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1269;
 var $_0201268;
 var $_0202267;
 var $ld$0$0=(($10)|0);
 var $14$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $14$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$14$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$14$1;
 var $15=$fend_1269;
 var $16=$_0201268;
 var $17=((($15)-($16))|0);
 var $18=$_0202267;
 var $19=((($11)-($18))|0);
 var $20=$19>>2;
 var $21=HEAP32[(($12)>>2)];
 var $22=_uselocale($21);
 var $23=(function() { try { __THREW__ = 0; return _mbsnrtowcs($_0202267,$frm_nxt,$17,$20,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $25=($22|0)==0;
 if($25){label=14;break;}else{label=8;break;}
 case 8: 
 var $27=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 9: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1,0); var $29$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=($22|0)==0;
 if($32){label=13;break;}else{label=11;break;}
 case 11: 
 var $34=(function() { try { __THREW__ = 0; return _uselocale($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 ___resumeException($31$0)
 case 14: 
 if(($23|0)==-1){ label=15;break;}else if(($23|0)==0){ var $_0=2;label=49;break;}else{label=31;break;}
 case 15: 
 HEAP32[(($to_nxt)>>2)]=$_0202267;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=($_0201268|0)==($37|0);
 if($38){var $_1_lcssa=$_0201268;label=30;break;}else{var $storemerge231=$_0202267;var $_1232=$_0201268;label=16;break;}
 case 16: 
 var $_1232;
 var $storemerge231;
 var $39=$_1232;
 var $40=((($15)-($39))|0);
 var $41=HEAP32[(($12)>>2)];
 var $42=_uselocale($41);
 var $43=(function() { try { __THREW__ = 0; return _mbrtowc($storemerge231,$_1232,$40,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $45=($42|0)==0;
 if($45){label=24;break;}else{label=18;break;}
 case 18: 
 var $47=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 19: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=($42|0)==0;
 if($52){label=23;break;}else{label=21;break;}
 case 21: 
 var $54=(function() { try { __THREW__ = 0; return _uselocale($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1,0); var $56$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 23: 
 ___resumeException($51$0)
 case 24: 
 if(($43|0)==0){ label=25;break;}else if(($43|0)==-1){ label=26;break;}else if(($43|0)==-2){ label=27;break;}else{label=28;break;}
 case 25: 
 var $58=(($_1232+1)|0);
 var $_2=$58;label=29;break;
 case 26: 
 HEAP32[(($frm_nxt)>>2)]=$_1232;
 var $_0=2;label=49;break;
 case 27: 
 HEAP32[(($frm_nxt)>>2)]=$_1232;
 var $_0=1;label=49;break;
 case 28: 
 var $62=(($_1232+$43)|0);
 var $_2=$62;label=29;break;
 case 29: 
 var $_2;
 var $64=HEAP32[(($to_nxt)>>2)];
 var $65=(($64+4)|0);
 HEAP32[(($to_nxt)>>2)]=$65;
 var $66=HEAP32[(($frm_nxt)>>2)];
 var $67=($_2|0)==($66|0);
 if($67){var $_1_lcssa=$_2;label=30;break;}else{var $storemerge231=$65;var $_1232=$_2;label=16;break;}
 case 30: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_223=($_1_lcssa|0)!=($frm_end|0);
 var $68=($not_223&1);
 var $_0=$68;label=49;break;
 case 31: 
 var $70=HEAP32[(($to_nxt)>>2)];
 var $71=(($70+($23<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$71;
 var $72=($71|0)==($to_end|0);
 if($72){label=47;break;}else{label=32;break;}
 case 32: 
 var $74=($fend_1269|0)==($frm_end|0);
 var $_pre314=HEAP32[(($frm_nxt)>>2)];
 if($74){var $fend_3=$frm_end;var $105=$71;var $104=$_pre314;label=46;break;}else{label=33;break;}
 case 33: 
 var $76=HEAP32[(($12)>>2)];
 var $77=_uselocale($76);
 var $78=(function() { try { __THREW__ = 0; return _mbrtowc($71,$_pre314,1,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $80=($77|0)==0;
 if($80){label=41;break;}else{label=35;break;}
 case 35: 
 var $82=(function() { try { __THREW__ = 0; return _uselocale($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=36;break; }
 case 36: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1,0); var $84$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 37: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=($77|0)==0;
 if($87){label=40;break;}else{label=38;break;}
 case 38: 
 var $89=(function() { try { __THREW__ = 0; return _uselocale($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1,0); var $91$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 40: 
 ___resumeException($86$0)
 case 41: 
 var $92=($78|0)==0;
 if($92){label=42;break;}else{var $_0=2;label=49;break;}
 case 42: 
 var $94=HEAP32[(($to_nxt)>>2)];
 var $95=(($94+4)|0);
 HEAP32[(($to_nxt)>>2)]=$95;
 var $96=HEAP32[(($frm_nxt)>>2)];
 var $97=(($96+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$97;
 var $fend_2=$97;label=43;break;
 case 43: 
 var $fend_2;
 var $99=($fend_2|0)==($frm_end|0);
 if($99){var $fend_2_lcssa=$frm_end;label=45;break;}else{label=44;break;}
 case 44: 
 var $101=HEAP8[($fend_2)];
 var $102=(($101<<24)>>24)==0;
 var $103=(($fend_2+1)|0);
 if($102){var $fend_2_lcssa=$fend_2;label=45;break;}else{var $fend_2=$103;label=43;break;}
 case 45: 
 var $fend_2_lcssa;
 var $_pre312=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $105=$_pre312;var $104=$97;label=46;break;
 case 46: 
 var $104;
 var $105;
 var $fend_3;
 var $106=($104|0)==($frm_end|0);
 var $107=($105|0)==($to_end|0);
 var $or_cond=$106|$107;
 if($or_cond){var $108=$104;label=48;break;}else{var $_0202267=$105;var $_0201268=$104;var $fend_1269=$fend_3;label=6;break;}
 case 47: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $108=$_pre;label=48;break;
 case 48: 
 var $108;
 var $not_=($108|0)!=($frm_end|0);
 var $109=($not_&1);
 var $_0=$109;label=49;break;
 case 49: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($tmp)|0);
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=_uselocale($3);
 var $5=(function() { try { __THREW__ = 0; return _wcrtomb($1,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $7=($4|0)==0;
 if($7){label=9;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 4: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=($4|0)==0;
 if($14){label=8;break;}else{label=6;break;}
 case 6: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 8: 
 ___resumeException($13$0)
 case 9: 
 if(($5|0)==-1|($5|0)==0){ var $_0=2;label=14;break;}else{label=10;break;}
 case 10: 
 var $20=((($5)-(1))|0);
 var $21=HEAP32[(($to_nxt)>>2)];
 var $22=$to_end;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=($20>>>0)>($24>>>0);
 if($25){var $_0=1;label=14;break;}else{label=11;break;}
 case 11: 
 var $26=($20|0)==0;
 if($26){var $_0=0;label=14;break;}else{var $n_064=$20;var $p_065=$1;var $27=$21;label=12;break;}
 case 12: 
 var $27;
 var $p_065;
 var $n_064;
 var $28=HEAP8[($p_065)];
 var $29=(($27+1)|0);
 HEAP32[(($to_nxt)>>2)]=$29;
 HEAP8[($27)]=$28;
 var $30=((($n_064)-(1))|0);
 var $31=($30|0)==0;
 if($31){var $_0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $32=(($p_065+1)|0);
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $n_064=$30;var $p_065=$32;var $27=$_pre;label=12;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return _mbtowc(0,0,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $6=($3|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 var $13=($3|0)==0;
 if($13){label=17;break;}else{label=7;break;}
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 8: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 var $18=($4|0)==0;
 if($18){label=10;break;}else{var $_0=-1;label=15;break;}
 case 10: 
 var $20=HEAP32[(($1)>>2)];
 var $21=($20|0)==0;
 if($21){var $_0=1;label=15;break;}else{label=11;break;}
 case 11: 
 var $23=(function() { try { __THREW__ = 0; return _uselocale($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $24=($23|0)==0;
 if($24){var $_0=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $26=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=15;break; } else { label=14;break; }
 case 14: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1,0); var $28$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 15: 
 var $_0;
 return $_0;
 case 16: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1,0); var $30$1 = tempRet0;
 label=17;break;
 case 17: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond71=$1|$2;
 if($or_cond71){var $nbytes_0_lcssa=0;label=15;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $_06172=$frm;var $nbytes_073=0;var $nwchar_t_074=0;label=3;break;
 case 3: 
 var $nwchar_t_074;
 var $nbytes_073;
 var $_06172;
 var $6=$_06172;
 var $7=((($3)-($6))|0);
 var $8=HEAP32[(($4)>>2)];
 var $9=_uselocale($8);
 var $10=(function() { try { __THREW__ = 0; return _mbrlen($_06172,$7,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $12=($9|0)==0;
 if($12){label=11;break;}else{label=5;break;}
 case 5: 
 var $14=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 7: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=($9|0)==0;
 if($19){label=10;break;}else{label=8;break;}
 case 8: 
 var $21=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($18$0)
 case 11: 
 if(($10|0)==0){ label=12;break;}else if(($10|0)==-1|($10|0)==-2){ var $nbytes_0_lcssa=$nbytes_073;label=15;break;}else{label=13;break;}
 case 12: 
 var $25=(($_06172+1)|0);
 var $_pn=1;var $_1=$25;label=14;break;
 case 13: 
 var $27=(($_06172+$10)|0);
 var $_pn=$10;var $_1=$27;label=14;break;
 case 14: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_073))|0);
 var $29=((($nwchar_t_074)+(1))|0);
 var $30=($29>>>0)>=($mx>>>0);
 var $31=($_1|0)==($frm_end|0);
 var $or_cond=$30|$31;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=15;break;}else{var $_06172=$_1;var $nbytes_073=$nbytes_1;var $nwchar_t_074=$29;label=3;break;}
 case 15: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $11=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $11=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $11=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $11;
 return $11;
 case 7: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>1;
 var $8=(($frm+($7<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=26;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=$frm_end;
 var $15=HEAP32[(($frm_nxt)>>2)];
 var $16=($15>>>0)<($frm_end>>>0);
 if($16){label=5;break;}else{var $_0=0;label=26;break;}
 case 5: 
 var $17=$to_end;
 var $19=$15;label=6;break;
 case 6: 
 var $19;
 var $20=HEAP16[(($19)>>1)];
 var $21=($20&65535);
 var $22=($21>>>0)>($Maxcode>>>0);
 if($22){var $_0=2;label=26;break;}else{label=7;break;}
 case 7: 
 var $24=($20&65535)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($17)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=26;break;}else{label=9;break;}
 case 9: 
 var $31=(($20)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=25;break;
 case 10: 
 var $34=($20&65535)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($17)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=26;break;}else{label=12;break;}
 case 12: 
 var $41=$21>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$21&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=25;break;
 case 13: 
 var $51=($20&65535)<55296;
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $53=HEAP32[(($to_nxt)>>2)];
 var $54=$53;
 var $55=((($17)-($54))|0);
 var $56=($55|0)<3;
 if($56){var $_0=1;label=26;break;}else{label=15;break;}
 case 15: 
 var $58=$21>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($53+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($53)]=$60;
 var $62=$21>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$21&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=25;break;
 case 16: 
 var $74=($20&65535)<56320;
 if($74){label=17;break;}else{label=22;break;}
 case 17: 
 var $76=$19;
 var $77=((($14)-($76))|0);
 var $78=($77|0)<4;
 if($78){var $_0=1;label=26;break;}else{label=18;break;}
 case 18: 
 var $80=(($19+2)|0);
 var $81=HEAP16[(($80)>>1)];
 var $82=($81&65535);
 var $83=$82&64512;
 var $84=($83|0)==56320;
 if($84){label=19;break;}else{var $_0=2;label=26;break;}
 case 19: 
 var $86=HEAP32[(($to_nxt)>>2)];
 var $87=$86;
 var $88=((($17)-($87))|0);
 var $89=($88|0)<4;
 if($89){var $_0=1;label=26;break;}else{label=20;break;}
 case 20: 
 var $91=$21&960;
 var $92=$91<<10;
 var $93=((($92)+(65536))|0);
 var $94=$21<<10;
 var $95=$94&64512;
 var $96=$93|$95;
 var $97=$82&1023;
 var $98=$96|$97;
 var $99=($98>>>0)>($Maxcode>>>0);
 if($99){var $_0=2;label=26;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$80;
 var $101=$91>>>6;
 var $102=((($101)+(1))|0);
 var $103=$102>>>2;
 var $104=$103|240;
 var $105=(($104)&255);
 var $106=HEAP32[(($to_nxt)>>2)];
 var $107=(($106+1)|0);
 HEAP32[(($to_nxt)>>2)]=$107;
 HEAP8[($106)]=$105;
 var $108=$102<<4;
 var $109=$108&48;
 var $110=$21>>>2;
 var $111=$110&15;
 var $112=$111|$109;
 var $113=$112|128;
 var $114=(($113)&255);
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 HEAP8[($115)]=$114;
 var $117=$21<<4;
 var $118=$117&48;
 var $119=$82>>>6;
 var $120=$119&15;
 var $121=$118|$120;
 var $122=$121|128;
 var $123=(($122)&255);
 var $124=HEAP32[(($to_nxt)>>2)];
 var $125=(($124+1)|0);
 HEAP32[(($to_nxt)>>2)]=$125;
 HEAP8[($124)]=$123;
 var $126=$82&63;
 var $127=$126|128;
 var $128=(($127)&255);
 var $129=HEAP32[(($to_nxt)>>2)];
 var $130=(($129+1)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 HEAP8[($129)]=$128;
 label=25;break;
 case 22: 
 var $132=($20&65535)<57344;
 if($132){var $_0=2;label=26;break;}else{label=23;break;}
 case 23: 
 var $134=HEAP32[(($to_nxt)>>2)];
 var $135=$134;
 var $136=((($17)-($135))|0);
 var $137=($136|0)<3;
 if($137){var $_0=1;label=26;break;}else{label=24;break;}
 case 24: 
 var $139=$21>>>12;
 var $140=$139|224;
 var $141=(($140)&255);
 var $142=(($134+1)|0);
 HEAP32[(($to_nxt)>>2)]=$142;
 HEAP8[($134)]=$141;
 var $143=$21>>>6;
 var $144=$143&63;
 var $145=$144|128;
 var $146=(($145)&255);
 var $147=HEAP32[(($to_nxt)>>2)];
 var $148=(($147+1)|0);
 HEAP32[(($to_nxt)>>2)]=$148;
 HEAP8[($147)]=$146;
 var $149=$21&63;
 var $150=$149|128;
 var $151=(($150)&255);
 var $152=HEAP32[(($to_nxt)>>2)];
 var $153=(($152+1)|0);
 HEAP32[(($to_nxt)>>2)]=$153;
 HEAP8[($152)]=$151;
 label=25;break;
 case 25: 
 var $155=HEAP32[(($frm_nxt)>>2)];
 var $156=(($155+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$156;
 var $157=($156>>>0)<($frm_end>>>0);
 if($157){var $19=$156;label=6;break;}else{var $_0=0;label=26;break;}
 case 26: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>1;
 var $13=(($to+($12<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre79=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre79;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre79;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre79;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre79)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre79;label=7;break;}
 case 4: 
 var $12=(($_pre79+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre79;label=7;break;}
 case 5: 
 var $16=(($_pre79+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre79;label=7;break;}
 case 6: 
 var $20=(($_pre79+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $175=$21;label=40;break;}
 case 8: 
 var $23=$frm_end;
 var $24=$to_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $27=$_pre;var $26=$21;label=9;break;
 case 9: 
 var $26;
 var $27;
 var $28=($27>>>0)<($to_end>>>0);
 if($28){label=10;break;}else{var $175=$26;label=40;break;}
 case 10: 
 var $30=HEAP8[($26)];
 var $31=($30&255);
 var $32=($31>>>0)>($Maxcode>>>0);
 if($32){var $_0=2;label=41;break;}else{label=11;break;}
 case 11: 
 var $34=(($30<<24)>>24)>-1;
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $36=($30&255);
 HEAP16[(($27)>>1)]=$36;
 var $37=HEAP32[(($frm_nxt)>>2)];
 var $38=(($37+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$38;
 label=39;break;
 case 13: 
 var $40=($30&255)<194;
 if($40){var $_0=2;label=41;break;}else{label=14;break;}
 case 14: 
 var $42=($30&255)<224;
 if($42){label=15;break;}else{label=19;break;}
 case 15: 
 var $44=$26;
 var $45=((($23)-($44))|0);
 var $46=($45|0)<2;
 if($46){var $_0=1;label=41;break;}else{label=16;break;}
 case 16: 
 var $48=(($26+1)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$50&192;
 var $52=($51|0)==128;
 if($52){label=17;break;}else{var $_0=2;label=41;break;}
 case 17: 
 var $54=$31<<6;
 var $55=$54&1984;
 var $56=$50&63;
 var $57=$56|$55;
 var $58=($57>>>0)>($Maxcode>>>0);
 if($58){var $_0=2;label=41;break;}else{label=18;break;}
 case 18: 
 var $60=(($57)&65535);
 HEAP16[(($27)>>1)]=$60;
 var $61=HEAP32[(($frm_nxt)>>2)];
 var $62=(($61+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$62;
 label=39;break;
 case 19: 
 var $64=($30&255)<240;
 if($64){label=20;break;}else{label=28;break;}
 case 20: 
 var $66=$26;
 var $67=((($23)-($66))|0);
 var $68=($67|0)<3;
 if($68){var $_0=1;label=41;break;}else{label=21;break;}
 case 21: 
 var $70=(($26+1)|0);
 var $71=HEAP8[($70)];
 var $72=(($26+2)|0);
 var $73=HEAP8[($72)];
 if(($31|0)==224){ label=22;break;}else if(($31|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $75=$71&-32;
 var $76=(($75<<24)>>24)==-96;
 if($76){label=25;break;}else{var $_0=2;label=41;break;}
 case 23: 
 var $78=$71&-32;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=25;break;}else{var $_0=2;label=41;break;}
 case 24: 
 var $81=$71&-64;
 var $82=(($81<<24)>>24)==-128;
 if($82){label=25;break;}else{var $_0=2;label=41;break;}
 case 25: 
 var $84=($73&255);
 var $85=$84&192;
 var $86=($85|0)==128;
 if($86){label=26;break;}else{var $_0=2;label=41;break;}
 case 26: 
 var $88=$31<<12;
 var $89=($71&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$84&63;
 var $94=$92|$93;
 var $95=$94&65535;
 var $96=($95>>>0)>($Maxcode>>>0);
 if($96){var $_0=2;label=41;break;}else{label=27;break;}
 case 27: 
 var $98=(($94)&65535);
 HEAP16[(($27)>>1)]=$98;
 var $99=HEAP32[(($frm_nxt)>>2)];
 var $100=(($99+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$100;
 label=39;break;
 case 28: 
 var $102=($30&255)<245;
 if($102){label=29;break;}else{var $_0=2;label=41;break;}
 case 29: 
 var $104=$26;
 var $105=((($23)-($104))|0);
 var $106=($105|0)<4;
 if($106){var $_0=1;label=41;break;}else{label=30;break;}
 case 30: 
 var $108=(($26+1)|0);
 var $109=HEAP8[($108)];
 var $110=(($26+2)|0);
 var $111=HEAP8[($110)];
 var $112=(($26+3)|0);
 var $113=HEAP8[($112)];
 if(($31|0)==240){ label=31;break;}else if(($31|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($109)+(112))&255);
 var $115=($_off&255)<48;
 if($115){label=34;break;}else{var $_0=2;label=41;break;}
 case 32: 
 var $117=$109&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=34;break;}else{var $_0=2;label=41;break;}
 case 33: 
 var $120=$109&-64;
 var $121=(($120<<24)>>24)==-128;
 if($121){label=34;break;}else{var $_0=2;label=41;break;}
 case 34: 
 var $123=($111&255);
 var $124=$123&192;
 var $125=($124|0)==128;
 if($125){label=35;break;}else{var $_0=2;label=41;break;}
 case 35: 
 var $127=($113&255);
 var $128=$127&192;
 var $129=($128|0)==128;
 if($129){label=36;break;}else{var $_0=2;label=41;break;}
 case 36: 
 var $131=$27;
 var $132=((($24)-($131))|0);
 var $133=($132|0)<4;
 if($133){var $_0=1;label=41;break;}else{label=37;break;}
 case 37: 
 var $135=$31&7;
 var $136=$135<<18;
 var $137=($109&255);
 var $138=$137<<12;
 var $139=$138&258048;
 var $140=$139|$136;
 var $141=$123<<6;
 var $142=$141&4032;
 var $143=$140|$142;
 var $144=$127&63;
 var $145=$143|$144;
 var $146=($145>>>0)>($Maxcode>>>0);
 if($146){var $_0=2;label=41;break;}else{label=38;break;}
 case 38: 
 var $148=$135<<2;
 var $149=$137>>>4;
 var $150=$149&3;
 var $151=$150|$148;
 var $152=$151<<6;
 var $153=((($152)+(16320))|0);
 var $154=$137<<2;
 var $155=$154&60;
 var $156=$123>>>4;
 var $157=$156&3;
 var $158=$155|$157;
 var $159=$158|$153;
 var $160=$159|55296;
 var $161=(($160)&65535);
 HEAP16[(($27)>>1)]=$161;
 var $162=$141&960;
 var $163=$144|$162;
 var $164=$163|56320;
 var $165=(($164)&65535);
 var $166=HEAP32[(($to_nxt)>>2)];
 var $167=(($166+2)|0);
 HEAP32[(($to_nxt)>>2)]=$167;
 HEAP16[(($167)>>1)]=$165;
 var $168=HEAP32[(($frm_nxt)>>2)];
 var $169=(($168+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$169;
 label=39;break;
 case 39: 
 var $171=HEAP32[(($to_nxt)>>2)];
 var $172=(($171+2)|0);
 HEAP32[(($to_nxt)>>2)]=$172;
 var $173=HEAP32[(($frm_nxt)>>2)];
 var $174=($173>>>0)<($frm_end>>>0);
 if($174){var $27=$172;var $26=$173;label=9;break;}else{var $175=$173;label=40;break;}
 case 40: 
 var $175;
 var $176=($175>>>0)<($frm_end>>>0);
 var $177=($176&1);
 var $_0=$177;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 var $2=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=$18?$19:$frm;
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond83=$20&$21;
 if($or_cond83){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar16_t_084=0;var $frm_nxt_185=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_185;
 var $nchar16_t_084;
 var $23=HEAP8[($frm_nxt_185)];
 var $24=($23&255);
 var $25=($24>>>0)>($Maxcode>>>0);
 if($25){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=9;break;}
 case 9: 
 var $27=(($23<<24)>>24)>-1;
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=(($frm_nxt_185+1)|0);
 var $frm_nxt_2=$29;var $nchar16_t_1=$nchar16_t_084;label=43;break;
 case 11: 
 var $31=($23&255)<194;
 if($31){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=12;break;}
 case 12: 
 var $33=($23&255)<224;
 if($33){label=13;break;}else{label=17;break;}
 case 13: 
 var $35=$frm_nxt_185;
 var $36=((($22)-($35))|0);
 var $37=($36|0)<2;
 if($37){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=14;break;}
 case 14: 
 var $39=(($frm_nxt_185+1)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=$41&192;
 var $43=($42|0)==128;
 if($43){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 15: 
 var $45=$24<<6;
 var $46=$45&1984;
 var $47=$41&63;
 var $48=$47|$46;
 var $49=($48>>>0)>($Maxcode>>>0);
 if($49){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=16;break;}
 case 16: 
 var $51=(($frm_nxt_185+2)|0);
 var $frm_nxt_2=$51;var $nchar16_t_1=$nchar16_t_084;label=43;break;
 case 17: 
 var $53=($23&255)<240;
 if($53){label=18;break;}else{label=29;break;}
 case 18: 
 var $55=$frm_nxt_185;
 var $56=((($22)-($55))|0);
 var $57=($56|0)<3;
 if($57){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=19;break;}
 case 19: 
 var $59=(($frm_nxt_185+1)|0);
 var $60=HEAP8[($59)];
 var $61=(($frm_nxt_185+2)|0);
 var $62=HEAP8[($61)];
 if(($24|0)==224){ label=20;break;}else if(($24|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $64=$60&-32;
 var $65=(($64<<24)>>24)==-96;
 if($65){label=26;break;}else{label=21;break;}
 case 21: 
 var $67=$frm;
 var $68=((($55)-($67))|0);
 var $_0=$68;label=45;break;
 case 22: 
 var $70=$60&-32;
 var $71=(($70<<24)>>24)==-128;
 if($71){label=26;break;}else{label=23;break;}
 case 23: 
 var $73=$frm;
 var $74=((($55)-($73))|0);
 var $_0=$74;label=45;break;
 case 24: 
 var $76=$60&-64;
 var $77=(($76<<24)>>24)==-128;
 if($77){label=26;break;}else{label=25;break;}
 case 25: 
 var $79=$frm;
 var $80=((($55)-($79))|0);
 var $_0=$80;label=45;break;
 case 26: 
 var $82=($62&255);
 var $83=$82&192;
 var $84=($83|0)==128;
 if($84){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 27: 
 var $86=$24<<12;
 var $87=$86&61440;
 var $88=($60&255);
 var $89=$88<<6;
 var $90=$89&4032;
 var $91=$90|$87;
 var $92=$82&63;
 var $93=$91|$92;
 var $94=($93>>>0)>($Maxcode>>>0);
 if($94){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=28;break;}
 case 28: 
 var $96=(($frm_nxt_185+3)|0);
 var $frm_nxt_2=$96;var $nchar16_t_1=$nchar16_t_084;label=43;break;
 case 29: 
 var $98=($23&255)<245;
 if($98){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 30: 
 var $100=$frm_nxt_185;
 var $101=((($22)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=31;break;}
 case 31: 
 var $104=((($mx)-($nchar16_t_084))|0);
 var $105=($104>>>0)<2;
 if($105){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=32;break;}
 case 32: 
 var $107=(($frm_nxt_185+1)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_185+2)|0);
 var $110=HEAP8[($109)];
 var $111=(($frm_nxt_185+3)|0);
 var $112=HEAP8[($111)];
 if(($24|0)==240){ label=33;break;}else if(($24|0)==244){ label=35;break;}else{label=37;break;}
 case 33: 
 var $_off=((($108)+(112))&255);
 var $114=($_off&255)<48;
 if($114){label=39;break;}else{label=34;break;}
 case 34: 
 var $116=$frm;
 var $117=((($100)-($116))|0);
 var $_0=$117;label=45;break;
 case 35: 
 var $119=$108&-16;
 var $120=(($119<<24)>>24)==-128;
 if($120){label=39;break;}else{label=36;break;}
 case 36: 
 var $122=$frm;
 var $123=((($100)-($122))|0);
 var $_0=$123;label=45;break;
 case 37: 
 var $125=$108&-64;
 var $126=(($125<<24)>>24)==-128;
 if($126){label=39;break;}else{label=38;break;}
 case 38: 
 var $128=$frm;
 var $129=((($100)-($128))|0);
 var $_0=$129;label=45;break;
 case 39: 
 var $131=($110&255);
 var $132=$131&192;
 var $133=($132|0)==128;
 if($133){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 40: 
 var $135=($112&255);
 var $136=$135&192;
 var $137=($136|0)==128;
 if($137){label=41;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}
 case 41: 
 var $139=$24<<18;
 var $140=$139&1835008;
 var $141=($108&255);
 var $142=$141<<12;
 var $143=$142&258048;
 var $144=$143|$140;
 var $145=$131<<6;
 var $146=$145&4032;
 var $147=$144|$146;
 var $148=$135&63;
 var $149=$147|$148;
 var $150=($149>>>0)>($Maxcode>>>0);
 if($150){var $frm_nxt_1_lcssa=$frm_nxt_185;label=44;break;}else{label=42;break;}
 case 42: 
 var $152=((($nchar16_t_084)+(1))|0);
 var $153=(($frm_nxt_185+4)|0);
 var $frm_nxt_2=$153;var $nchar16_t_1=$152;label=43;break;
 case 43: 
 var $nchar16_t_1;
 var $frm_nxt_2;
 var $155=((($nchar16_t_1)+(1))|0);
 var $156=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $157=($155>>>0)<($mx>>>0);
 var $or_cond=$156&$157;
 if($or_cond){var $nchar16_t_084=$155;var $frm_nxt_185=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 44: 
 var $frm_nxt_1_lcssa;
 var $158=$frm_nxt_1_lcssa;
 var $159=$frm;
 var $160=((($158)-($159))|0);
 var $_0=$160;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=$6>>2;
 var $8=(($frm+($7<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$8;
 var $9=HEAP32[(($_to_nxt)>>2)];
 var $10=$9;
 var $11=$to;
 var $12=((($10)-($11))|0);
 var $13=(($to+$12)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&2;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=$to_end;
 var $5=$to;
 var $6=((($4)-($5))|0);
 var $7=($6|0)<3;
 if($7){var $_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $9=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$9;
 HEAP8[($to)]=-17;
 var $10=HEAP32[(($to_nxt)>>2)];
 var $11=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$11;
 HEAP8[($10)]=-69;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $13=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 HEAP8[($12)]=-65;
 label=4;break;
 case 4: 
 var $14=HEAP32[(($frm_nxt)>>2)];
 var $15=($14>>>0)<($frm_end>>>0);
 if($15){label=5;break;}else{var $_0=0;label=19;break;}
 case 5: 
 var $16=$to_end;
 var $18=$14;label=6;break;
 case 6: 
 var $18;
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2048;
 var $21=($20|0)==55296;
 var $22=($19>>>0)>($Maxcode>>>0);
 var $or_cond=$21|$22;
 if($or_cond){var $_0=2;label=19;break;}else{label=7;break;}
 case 7: 
 var $24=($19>>>0)<128;
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=HEAP32[(($to_nxt)>>2)];
 var $27=$26;
 var $28=((($16)-($27))|0);
 var $29=($28|0)<1;
 if($29){var $_0=1;label=19;break;}else{label=9;break;}
 case 9: 
 var $31=(($19)&255);
 var $32=(($26+1)|0);
 HEAP32[(($to_nxt)>>2)]=$32;
 HEAP8[($26)]=$31;
 label=18;break;
 case 10: 
 var $34=($19>>>0)<2048;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=HEAP32[(($to_nxt)>>2)];
 var $37=$36;
 var $38=((($16)-($37))|0);
 var $39=($38|0)<2;
 if($39){var $_0=1;label=19;break;}else{label=12;break;}
 case 12: 
 var $41=$19>>>6;
 var $42=$41|192;
 var $43=(($42)&255);
 var $44=(($36+1)|0);
 HEAP32[(($to_nxt)>>2)]=$44;
 HEAP8[($36)]=$43;
 var $45=$19&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=HEAP32[(($to_nxt)>>2)];
 var $49=(($48+1)|0);
 HEAP32[(($to_nxt)>>2)]=$49;
 HEAP8[($48)]=$47;
 label=18;break;
 case 13: 
 var $51=($19>>>0)<65536;
 var $52=HEAP32[(($to_nxt)>>2)];
 var $53=$52;
 var $54=((($16)-($53))|0);
 if($51){label=14;break;}else{label=16;break;}
 case 14: 
 var $56=($54|0)<3;
 if($56){var $_0=1;label=19;break;}else{label=15;break;}
 case 15: 
 var $58=$19>>>12;
 var $59=$58|224;
 var $60=(($59)&255);
 var $61=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$61;
 HEAP8[($52)]=$60;
 var $62=$19>>>6;
 var $63=$62&63;
 var $64=$63|128;
 var $65=(($64)&255);
 var $66=HEAP32[(($to_nxt)>>2)];
 var $67=(($66+1)|0);
 HEAP32[(($to_nxt)>>2)]=$67;
 HEAP8[($66)]=$65;
 var $68=$19&63;
 var $69=$68|128;
 var $70=(($69)&255);
 var $71=HEAP32[(($to_nxt)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($to_nxt)>>2)]=$72;
 HEAP8[($71)]=$70;
 label=18;break;
 case 16: 
 var $74=($54|0)<4;
 if($74){var $_0=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $76=$19>>>18;
 var $77=$76|240;
 var $78=(($77)&255);
 var $79=(($52+1)|0);
 HEAP32[(($to_nxt)>>2)]=$79;
 HEAP8[($52)]=$78;
 var $80=$19>>>12;
 var $81=$80&63;
 var $82=$81|128;
 var $83=(($82)&255);
 var $84=HEAP32[(($to_nxt)>>2)];
 var $85=(($84+1)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 HEAP8[($84)]=$83;
 var $86=$19>>>6;
 var $87=$86&63;
 var $88=$87|128;
 var $89=(($88)&255);
 var $90=HEAP32[(($to_nxt)>>2)];
 var $91=(($90+1)|0);
 HEAP32[(($to_nxt)>>2)]=$91;
 HEAP8[($90)]=$89;
 var $92=$19&63;
 var $93=$92|128;
 var $94=(($93)&255);
 var $95=HEAP32[(($to_nxt)>>2)];
 var $96=(($95+1)|0);
 HEAP32[(($to_nxt)>>2)]=$96;
 HEAP8[($95)]=$94;
 label=18;break;
 case 18: 
 var $98=HEAP32[(($frm_nxt)>>2)];
 var $99=(($98+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$99;
 var $100=($99>>>0)<($frm_end>>>0);
 if($100){var $18=$99;label=6;break;}else{var $_0=0;label=19;break;}
 case 19: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $2=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $3=HEAP32[(($_frm_nxt)>>2)];
 var $4=$3;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=(($frm+$6)|0);
 HEAP32[(($frm_nxt)>>2)]=$7;
 var $8=HEAP32[(($_to_nxt)>>2)];
 var $9=$8;
 var $10=$to;
 var $11=((($9)-($10))|0);
 var $12=$11>>2;
 var $13=(($to+($12<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$13;
 STACKTOP=sp;return $2;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=$mode&4;
 var $2=($1|0)==0;
 var $_pre71=HEAP32[(($frm_nxt)>>2)];
 if($2){var $21=$_pre71;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$_pre71;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $21=$_pre71;label=7;break;}
 case 3: 
 var $9=HEAP8[($_pre71)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $21=$_pre71;label=7;break;}
 case 4: 
 var $12=(($_pre71+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $21=$_pre71;label=7;break;}
 case 5: 
 var $16=(($_pre71+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 if($18){label=6;break;}else{var $21=$_pre71;label=7;break;}
 case 6: 
 var $20=(($_pre71+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$20;
 var $21=$20;label=7;break;
 case 7: 
 var $21;
 var $22=($21>>>0)<($frm_end>>>0);
 if($22){label=8;break;}else{var $147=$21;label=39;break;}
 case 8: 
 var $23=$frm_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $26=$_pre;var $25=$21;label=9;break;
 case 9: 
 var $25;
 var $26;
 var $27=($26>>>0)<($to_end>>>0);
 if($27){label=10;break;}else{var $147=$25;label=39;break;}
 case 10: 
 var $29=HEAP8[($25)];
 var $30=($29&255);
 var $31=(($29<<24)>>24)>-1;
 if($31){label=11;break;}else{label=13;break;}
 case 11: 
 var $33=($30>>>0)>($Maxcode>>>0);
 if($33){var $_0=2;label=40;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($26)>>2)]=$30;
 var $35=HEAP32[(($frm_nxt)>>2)];
 var $36=(($35+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$36;
 label=38;break;
 case 13: 
 var $38=($29&255)<194;
 if($38){var $_0=2;label=40;break;}else{label=14;break;}
 case 14: 
 var $40=($29&255)<224;
 if($40){label=15;break;}else{label=19;break;}
 case 15: 
 var $42=$25;
 var $43=((($23)-($42))|0);
 var $44=($43|0)<2;
 if($44){var $_0=1;label=40;break;}else{label=16;break;}
 case 16: 
 var $46=(($25+1)|0);
 var $47=HEAP8[($46)];
 var $48=($47&255);
 var $49=$48&192;
 var $50=($49|0)==128;
 if($50){label=17;break;}else{var $_0=2;label=40;break;}
 case 17: 
 var $52=$30<<6;
 var $53=$52&1984;
 var $54=$48&63;
 var $55=$54|$53;
 var $56=($55>>>0)>($Maxcode>>>0);
 if($56){var $_0=2;label=40;break;}else{label=18;break;}
 case 18: 
 HEAP32[(($26)>>2)]=$55;
 var $58=HEAP32[(($frm_nxt)>>2)];
 var $59=(($58+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$59;
 label=38;break;
 case 19: 
 var $61=($29&255)<240;
 if($61){label=20;break;}else{label=28;break;}
 case 20: 
 var $63=$25;
 var $64=((($23)-($63))|0);
 var $65=($64|0)<3;
 if($65){var $_0=1;label=40;break;}else{label=21;break;}
 case 21: 
 var $67=(($25+1)|0);
 var $68=HEAP8[($67)];
 var $69=(($25+2)|0);
 var $70=HEAP8[($69)];
 if(($30|0)==224){ label=22;break;}else if(($30|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $72=$68&-32;
 var $73=(($72<<24)>>24)==-96;
 if($73){label=25;break;}else{var $_0=2;label=40;break;}
 case 23: 
 var $75=$68&-32;
 var $76=(($75<<24)>>24)==-128;
 if($76){label=25;break;}else{var $_0=2;label=40;break;}
 case 24: 
 var $78=$68&-64;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=25;break;}else{var $_0=2;label=40;break;}
 case 25: 
 var $81=($70&255);
 var $82=$81&192;
 var $83=($82|0)==128;
 if($83){label=26;break;}else{var $_0=2;label=40;break;}
 case 26: 
 var $85=$30<<12;
 var $86=$85&61440;
 var $87=($68&255);
 var $88=$87<<6;
 var $89=$88&4032;
 var $90=$89|$86;
 var $91=$81&63;
 var $92=$90|$91;
 var $93=($92>>>0)>($Maxcode>>>0);
 if($93){var $_0=2;label=40;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($26)>>2)]=$92;
 var $95=HEAP32[(($frm_nxt)>>2)];
 var $96=(($95+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$96;
 label=38;break;
 case 28: 
 var $98=($29&255)<245;
 if($98){label=29;break;}else{var $_0=2;label=40;break;}
 case 29: 
 var $100=$25;
 var $101=((($23)-($100))|0);
 var $102=($101|0)<4;
 if($102){var $_0=1;label=40;break;}else{label=30;break;}
 case 30: 
 var $104=(($25+1)|0);
 var $105=HEAP8[($104)];
 var $106=(($25+2)|0);
 var $107=HEAP8[($106)];
 var $108=(($25+3)|0);
 var $109=HEAP8[($108)];
 if(($30|0)==240){ label=31;break;}else if(($30|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($105)+(112))&255);
 var $111=($_off&255)<48;
 if($111){label=34;break;}else{var $_0=2;label=40;break;}
 case 32: 
 var $113=$105&-16;
 var $114=(($113<<24)>>24)==-128;
 if($114){label=34;break;}else{var $_0=2;label=40;break;}
 case 33: 
 var $116=$105&-64;
 var $117=(($116<<24)>>24)==-128;
 if($117){label=34;break;}else{var $_0=2;label=40;break;}
 case 34: 
 var $119=($107&255);
 var $120=$119&192;
 var $121=($120|0)==128;
 if($121){label=35;break;}else{var $_0=2;label=40;break;}
 case 35: 
 var $123=($109&255);
 var $124=$123&192;
 var $125=($124|0)==128;
 if($125){label=36;break;}else{var $_0=2;label=40;break;}
 case 36: 
 var $127=$30<<18;
 var $128=$127&1835008;
 var $129=($105&255);
 var $130=$129<<12;
 var $131=$130&258048;
 var $132=$131|$128;
 var $133=$119<<6;
 var $134=$133&4032;
 var $135=$132|$134;
 var $136=$123&63;
 var $137=$135|$136;
 var $138=($137>>>0)>($Maxcode>>>0);
 if($138){var $_0=2;label=40;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($26)>>2)]=$137;
 var $140=HEAP32[(($frm_nxt)>>2)];
 var $141=(($140+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$141;
 label=38;break;
 case 38: 
 var $143=HEAP32[(($to_nxt)>>2)];
 var $144=(($143+4)|0);
 HEAP32[(($to_nxt)>>2)]=$144;
 var $145=HEAP32[(($frm_nxt)>>2)];
 var $146=($145>>>0)<($frm_end>>>0);
 if($146){var $26=$144;var $25=$145;label=9;break;}else{var $147=$145;label=39;break;}
 case 39: 
 var $147;
 var $148=($147>>>0)<($frm_end>>>0);
 var $149=($148&1);
 var $_0=$149;label=40;break;
 case 40: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 var $2=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $2;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$mode&4;
 var $2=($1|0)==0;
 if($2){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=$frm_end;
 var $5=$frm;
 var $6=((($4)-($5))|0);
 var $7=($6|0)>2;
 if($7){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $9=HEAP8[($frm)];
 var $10=(($9<<24)>>24)==-17;
 if($10){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $12=(($frm+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==-69;
 if($14){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $16=(($frm+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==-65;
 var $19=(($frm+3)|0);
 var $_frm=$18?$19:$frm;
 var $frm_nxt_1_ph=$_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $20=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $21=($mx|0)!=0;
 var $or_cond79=$20&$21;
 if($or_cond79){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $22=$frm_end;
 var $nchar32_t_080=1;var $frm_nxt_181=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_181;
 var $nchar32_t_080;
 var $24=HEAP8[($frm_nxt_181)];
 var $25=($24&255);
 var $26=(($24<<24)>>24)>-1;
 if($26){label=9;break;}else{label=11;break;}
 case 9: 
 var $28=($25>>>0)>($Maxcode>>>0);
 if($28){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=10;break;}
 case 10: 
 var $30=(($frm_nxt_181+1)|0);
 var $frm_nxt_2=$30;label=42;break;
 case 11: 
 var $32=($24&255)<194;
 if($32){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=12;break;}
 case 12: 
 var $34=($24&255)<224;
 if($34){label=13;break;}else{label=17;break;}
 case 13: 
 var $36=$frm_nxt_181;
 var $37=((($22)-($36))|0);
 var $38=($37|0)<2;
 if($38){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=14;break;}
 case 14: 
 var $40=(($frm_nxt_181+1)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$42&192;
 var $44=($43|0)==128;
 if($44){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 15: 
 var $46=$25<<6;
 var $47=$46&1984;
 var $48=$42&63;
 var $49=$48|$47;
 var $50=($49>>>0)>($Maxcode>>>0);
 if($50){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=16;break;}
 case 16: 
 var $52=(($frm_nxt_181+2)|0);
 var $frm_nxt_2=$52;label=42;break;
 case 17: 
 var $54=($24&255)<240;
 if($54){label=18;break;}else{label=29;break;}
 case 18: 
 var $56=$frm_nxt_181;
 var $57=((($22)-($56))|0);
 var $58=($57|0)<3;
 if($58){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=19;break;}
 case 19: 
 var $60=(($frm_nxt_181+1)|0);
 var $61=HEAP8[($60)];
 var $62=(($frm_nxt_181+2)|0);
 var $63=HEAP8[($62)];
 if(($25|0)==224){ label=20;break;}else if(($25|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $65=$61&-32;
 var $66=(($65<<24)>>24)==-96;
 if($66){label=26;break;}else{label=21;break;}
 case 21: 
 var $68=$frm;
 var $69=((($56)-($68))|0);
 var $_0=$69;label=45;break;
 case 22: 
 var $71=$61&-32;
 var $72=(($71<<24)>>24)==-128;
 if($72){label=26;break;}else{label=23;break;}
 case 23: 
 var $74=$frm;
 var $75=((($56)-($74))|0);
 var $_0=$75;label=45;break;
 case 24: 
 var $77=$61&-64;
 var $78=(($77<<24)>>24)==-128;
 if($78){label=26;break;}else{label=25;break;}
 case 25: 
 var $80=$frm;
 var $81=((($56)-($80))|0);
 var $_0=$81;label=45;break;
 case 26: 
 var $83=($63&255);
 var $84=$83&192;
 var $85=($84|0)==128;
 if($85){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 27: 
 var $87=$25<<12;
 var $88=$87&61440;
 var $89=($61&255);
 var $90=$89<<6;
 var $91=$90&4032;
 var $92=$91|$88;
 var $93=$83&63;
 var $94=$92|$93;
 var $95=($94>>>0)>($Maxcode>>>0);
 if($95){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=28;break;}
 case 28: 
 var $97=(($frm_nxt_181+3)|0);
 var $frm_nxt_2=$97;label=42;break;
 case 29: 
 var $99=($24&255)<245;
 if($99){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 30: 
 var $101=$frm_nxt_181;
 var $102=((($22)-($101))|0);
 var $103=($102|0)<4;
 if($103){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=31;break;}
 case 31: 
 var $105=(($frm_nxt_181+1)|0);
 var $106=HEAP8[($105)];
 var $107=(($frm_nxt_181+2)|0);
 var $108=HEAP8[($107)];
 var $109=(($frm_nxt_181+3)|0);
 var $110=HEAP8[($109)];
 if(($25|0)==240){ label=32;break;}else if(($25|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($106)+(112))&255);
 var $112=($_off&255)<48;
 if($112){label=38;break;}else{label=33;break;}
 case 33: 
 var $114=$frm;
 var $115=((($101)-($114))|0);
 var $_0=$115;label=45;break;
 case 34: 
 var $117=$106&-16;
 var $118=(($117<<24)>>24)==-128;
 if($118){label=38;break;}else{label=35;break;}
 case 35: 
 var $120=$frm;
 var $121=((($101)-($120))|0);
 var $_0=$121;label=45;break;
 case 36: 
 var $123=$106&-64;
 var $124=(($123<<24)>>24)==-128;
 if($124){label=38;break;}else{label=37;break;}
 case 37: 
 var $126=$frm;
 var $127=((($101)-($126))|0);
 var $_0=$127;label=45;break;
 case 38: 
 var $129=($108&255);
 var $130=$129&192;
 var $131=($130|0)==128;
 if($131){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 39: 
 var $133=($110&255);
 var $134=$133&192;
 var $135=($134|0)==128;
 if($135){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 40: 
 var $137=$25<<18;
 var $138=$137&1835008;
 var $139=($106&255);
 var $140=$139<<12;
 var $141=$140&258048;
 var $142=$141|$138;
 var $143=$129<<6;
 var $144=$143&4032;
 var $145=$142|$144;
 var $146=$133&63;
 var $147=$145|$146;
 var $148=($147>>>0)>($Maxcode>>>0);
 if($148){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=41;break;}
 case 41: 
 var $150=(($frm_nxt_181+4)|0);
 var $frm_nxt_2=$150;label=42;break;
 case 42: 
 var $frm_nxt_2;
 var $152=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $153=($nchar32_t_080>>>0)<($mx>>>0);
 var $or_cond=$152&$153;
 if($or_cond){label=43;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 43: 
 var $phitmp=((($nchar32_t_080)+(1))|0);
 var $nchar32_t_080=$phitmp;var $frm_nxt_181=$frm_nxt_2;label=8;break;
 case 44: 
 var $frm_nxt_1_lcssa;
 var $154=$frm_nxt_1_lcssa;
 var $155=$frm;
 var $156=((($154)-($155))|0);
 var $_0=$156;label=45;break;
 case 45: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7152;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7152;
 var $2=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7104;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 var $4=$this;
 __ZdlPv($4);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7104;
 var $2=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 var $3=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;
 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;
 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;
 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;
 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;
 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,4376,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;
 var $1=_wcslen(4304);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,4304,$1);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,4256,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;
 var $1=_wcslen(4176);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,4176,$1);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18584)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18584);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18472)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18472);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16016, 0, 168);
 var $12=_atexit(796,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16016,5376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16028,5328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16040,5320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16052,5304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16064,5288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16076,5264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16088,5248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16100,5240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16112,5232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16124,5184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16136,5176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16148,5144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16160,5136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16172,5128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((16976)>>2)]=16016;
 label=21;break;
 case 21: 
 var $29=HEAP32[((16976)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18528)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18528);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18448)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18448);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15272, 0, 168);
 var $12=_atexit(404,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15272,5952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15284,5920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15296,5888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15308,5848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15320,5776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15332,5720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15344,5624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15356,5608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15368,5552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15380,5496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15392,5464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15404,5448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15416,5432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15428,5416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((16888)>>2)]=15272;
 label=21;break;
 case 21: 
 var $29=HEAP32[((16888)>>2)];
 return $29;
 case 22: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18576)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18576);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18464)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18464);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15728, 0, 288);
 var $12=_atexit(450,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15728,656) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15740,616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15752,592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15764,536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15776,520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15788,504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15800,472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15812,432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15824,416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15836,392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15848,320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15860,288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15872,280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15884,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15896,248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15908,240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15920,520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15932,232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15944,224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15956,6040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15968,6032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15980,6024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15992,6016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16004,6008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((16968)>>2)]=15728;
 label=31;break;
 case 31: 
 var $39=HEAP32[((16968)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18520)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18520);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18440)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18440);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14984, 0, 288);
 var $12=_atexit(344,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14984,1648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14996,1592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15008,1552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15020,1512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15032,920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15044,1376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15056,1328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15068,1288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15080,1200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15092,1160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15104,1112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15116,1056) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $26=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15128,1032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $27=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15140,1008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15152,992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15164,944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15176,920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15188,888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15200,848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15212,824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15224,784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15236,752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15248,728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15260,696) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((16880)>>2)]=14984;
 label=31;break;
 case 31: 
 var $39=HEAP32[((16880)>>2)];
 return $39;
 case 32: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 ___resumeException($41$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18592)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18592);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18480)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18480);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16184, 0, 288);
 var $12=_atexit(340,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16184,1840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16196,1752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((16984)>>2)]=16184;
 label=9;break;
 case 9: 
 var $17=HEAP32[((16984)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18536)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18536);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(18456)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18456);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15440, 0, 288);
 var $12=_atexit(752,0,___dso_handle);
 label=6;break;
 case 6: 
 var $14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15440,2032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15452,1952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((16896)>>2)]=15440;
 label=9;break;
 case 9: 
 var $17=HEAP32[((16896)>>2)];
 return $17;
 case 10: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18600)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18600);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16992,4064,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((788),16992,___dso_handle);
 label=5;break;
 case 5: 
 return 16992;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18544)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18544);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(3960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16904,3960,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((528),16904,___dso_handle);
 label=6;break;
 case 6: 
 return 16904;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18624)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18624);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(17040,3904,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((788),17040,___dso_handle);
 label=5;break;
 case 5: 
 return 17040;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18568)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18568);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(3832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16952,3832,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((528),16952,___dso_handle);
 label=6;break;
 case 6: 
 return 16952;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18616)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18616);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(17024,3776,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((788),17024,___dso_handle);
 label=5;break;
 case 5: 
 return 17024;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18560)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18560);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(3616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16936,3616,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((528),16936,___dso_handle);
 label=6;break;
 case 6: 
 return 16936;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18608)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18608);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(17008,3584,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $6=_atexit((788),17008,___dso_handle);
 label=5;break;
 case 5: 
 return 17008;
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(18552)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18552);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _wcslen(3504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16920,3504,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $8=_atexit((528),16920,___dso_handle);
 label=6;break;
 case 6: 
 return 16920;
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_idx=$__vp;
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx9=(($__vp+4)|0);
 var $1=$_idx9;
 var $ld$0$0=(($1)|0);
 var $_idx9_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $_idx9_val$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$_idx9_val$1;
 var $3=$_idx_val;
 var $4=(($3+$2)|0);
 var $5=$4;
 var $6=$_idx9_val$0;
 var $7=$6&1;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$4;
 var $11=HEAP32[(($10)>>2)];
 var $12=((($6)-(1))|0);
 var $13=(($11+$12)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $18=$15;label=4;break;
 case 3: 
 var $17=$6;
 var $18=$17;label=4;break;
 case 4: 
 var $18;
 FUNCTION_TABLE[$18]($5);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=($8>>>0)<($__n>>>0);
 if($9){label=5;break;}else{var $_0_i=$__n;var $10=$4;label=2;break;}
 case 2: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $13=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($10)>>2)]=0;
 var $_pre11_i=HEAP32[(($3)>>2)];
 var $13=$_pre11_i;label=4;break;
 case 4: 
 var $13;
 var $14=(($13+4)|0);
 HEAP32[(($3)>>2)]=$14;
 var $15=((($_0_i)-(1))|0);
 var $16=($15|0)==0;
 if($16){label=20;break;}else{var $_0_i=$15;var $10=$14;label=2;break;}
 case 5: 
 var $18=(($this+16)|0);
 var $19=(($this)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($6)-($21))|0);
 var $23=$22>>2;
 var $24=((($23)+($__n))|0);
 var $25=($24>>>0)>1073741823;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 7: 
 var $28=((($5)-($21))|0);
 var $29=$28>>2;
 var $30=($29>>>0)>536870910;
 if($30){var $_04851=1073741823;label=11;break;}else{label=8;break;}
 case 8: 
 var $31=$28>>1;
 var $32=($31>>>0)<($24>>>0);
 var $_sroa_speculated=$32?$24:$31;
 var $33=($_sroa_speculated|0)==0;
 if($33){var $45=0;var $_049=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $35=(($this+128)|0);
 var $36=HEAP8[($35)];
 var $37=$36&1;
 var $38=(($37<<24)>>24)==0;
 var $39=($_sroa_speculated>>>0)<29;
 var $or_cond_i_i=$38&$39;
 if($or_cond_i_i){label=10;break;}else{var $_04851=$_sroa_speculated;label=11;break;}
 case 10: 
 HEAP8[($35)]=1;
 var $41=$18;
 var $45=$41;var $_049=$_sroa_speculated;label=12;break;
 case 11: 
 var $_04851;
 var $42=$_04851<<2;
 var $43=__Znwj($42);
 var $44=$43;
 var $45=$44;var $_049=$_04851;label=12;break;
 case 12: 
 var $_049;
 var $45;
 var $46=(($45+($23<<2))|0);
 var $_0_i39=$__n;var $48=$46;label=13;break;
 case 13: 
 var $48;
 var $_0_i39;
 var $49=($48|0)==0;
 if($49){var $51=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($48)>>2)]=0;
 var $51=$48;label=15;break;
 case 15: 
 var $51;
 var $52=(($51+4)|0);
 var $53=((($_0_i39)-(1))|0);
 var $54=($53|0)==0;
 if($54){label=16;break;}else{var $_0_i39=$53;var $48=$52;label=13;break;}
 case 16: 
 var $55=(($45+($_049<<2))|0);
 var $56=HEAP32[(($19)>>2)];
 var $57=HEAP32[(($3)>>2)];
 var $58=$57;
 var $59=$56;
 var $60=((($58)-($59))|0);
 var $61=$60>>2;
 var $_sum=((($23)-($61))|0);
 var $62=(($45+($_sum<<2))|0);
 var $63=$62;
 var $64=$56;
 assert($60 % 1 === 0);(_memcpy($63, $64, $60)|0);
 HEAP32[(($19)>>2)]=$62;
 HEAP32[(($3)>>2)]=$52;
 HEAP32[(($1)>>2)]=$55;
 var $65=($56|0)==0;
 if($65){label=20;break;}else{label=17;break;}
 case 17: 
 var $67=$18;
 var $68=($56|0)==($67|0);
 if($68){label=18;break;}else{label=19;break;}
 case 18: 
 var $70=(($this+128)|0);
 HEAP8[($70)]=0;
 label=20;break;
 case 19: 
 __ZdlPv($64);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15716);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15704);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15692);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15680);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15668);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15656);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15644);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15632);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15620);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15608);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15596);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15584);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15572);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15560);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15548);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15524);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15512);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15500);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15476);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15440);
 return;
}
function ___cxx_global_array_dtor53($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16460);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16448);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16436);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16424);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16412);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16400);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16388);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16376);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16364);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16352);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16340);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16328);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16316);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16304);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16292);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16280);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16268);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16256);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16244);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16220);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16196);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16184);
 return;
}
function ___cxx_global_array_dtor56($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15260);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15248);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15236);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15224);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15212);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15200);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15188);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15176);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15164);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15152);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15140);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15128);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15116);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15104);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15092);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15080);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15068);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15044);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15032);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15020);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15008);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14996);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(14984);
 return;
}
function ___cxx_global_array_dtor81($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16004);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15992);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15980);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15968);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15956);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15944);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15932);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15920);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15908);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15896);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15884);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15872);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15860);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15848);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15836);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15824);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15812);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15800);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15788);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15776);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15764);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15752);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15740);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(15728);
 return;
}
function ___cxx_global_array_dtor105($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15344);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15332);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15284);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15272);
 return;
}
function ___cxx_global_array_dtor120($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16040);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16016);
 return;
}
function _mbrlen($s,$n,$st){
 var label=0;
 var $1=($st|0)!=0;
 var $2=$1?$st:14488;
 var $3=_mbrtowc(0,$s,$n,$2);
 return $3;
}
function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_027=$2?14480:$st;
 var $3=(($_027)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_028=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((___fsmu8+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_028=$31;label=11;break;
 case 11: 
 var $_028;
 var $c_0;
 var $s_0;
 var $33=($_028|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_028;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $0=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$0;
 var $1=($wcs|0)!=0;
 var $2=(($wbuf)|0);
 var $_040_ph=$1?$wn:256;
 var $ws_0_ph=$1?$wcs:$2;
 var $3=($0|0)==0;
 var $4=($_040_ph|0)==0;
 var $or_cond59=$3|$4;
 if($or_cond59){var $cnt_1=0;var $_1=$n;var $_242=$_040_ph;var $ws_056=$ws_0_ph;var $23=$0;label=9;break;}else{label=2;break;}
 case 2: 
 var $5=(($wbuf)|0);
 var $_04060=$_040_ph;var $_061=$n;var $cnt_062=0;var $ws_063=$ws_0_ph;var $_pr78=$0;label=3;break;
 case 3: 
 var $_pr78;
 var $ws_063;
 var $cnt_062;
 var $_061;
 var $_04060;
 var $7=$_061>>>2;
 var $8=($7>>>0)>=($_04060>>>0);
 var $9=($_061>>>0)>131;
 var $or_cond43=$8|$9;
 if($or_cond43){label=4;break;}else{var $cnt_1=$cnt_062;var $_1=$_061;var $_242=$_04060;var $ws_056=$ws_063;var $23=$_pr78;label=9;break;}
 case 4: 
 var $_040_=$8?$_04060:$7;
 var $10=((($_061)-($_040_))|0);
 var $11=_mbsrtowcs($ws_063,$s,$_040_,$st);
 var $12=($11|0)==-1;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 var $_pr_pre=HEAP32[(($s)>>2)];
 var $cnt_1=-1;var $_1=$10;var $_242=0;var $ws_056=$ws_063;var $23=$_pr_pre;label=9;break;
 case 6: 
 var $14=($ws_063|0)==($5|0);
 if($14){var $ws_1=$5;var $_141=$_04060;label=8;break;}else{label=7;break;}
 case 7: 
 var $16=(($ws_063+($11<<2))|0);
 var $17=((($_04060)-($11))|0);
 var $ws_1=$16;var $_141=$17;label=8;break;
 case 8: 
 var $_141;
 var $ws_1;
 var $19=((($11)+($cnt_062))|0);
 var $20=HEAP32[(($s)>>2)];
 var $21=($20|0)==0;
 var $22=($_141|0)==0;
 var $or_cond=$21|$22;
 if($or_cond){var $cnt_1=$19;var $_1=$10;var $_242=$_141;var $ws_056=$ws_1;var $23=$20;label=9;break;}else{var $_04060=$_141;var $_061=$10;var $cnt_062=$19;var $ws_063=$ws_1;var $_pr78=$20;label=3;break;}
 case 9: 
 var $23;
 var $ws_056;
 var $_242;
 var $_1;
 var $cnt_1;
 var $24=($23|0)==0;
 if($24){var $cnt_3=$cnt_1;label=16;break;}else{label=10;break;}
 case 10: 
 var $25=($_242|0)==0;
 var $26=($_1|0)==0;
 var $or_cond4446=$25|$26;
 if($or_cond4446){var $cnt_3=$cnt_1;label=16;break;}else{var $_347=$_242;var $_248=$_1;var $cnt_249=$cnt_1;var $ws_250=$ws_056;var $27=$23;label=11;break;}
 case 11: 
 var $27;
 var $ws_250;
 var $cnt_249;
 var $_248;
 var $_347;
 var $28=_mbrtowc($ws_250,$27,$_248,$st);
 var $29=((($28)+(2))|0);
 var $30=($29>>>0)<3;
 if($30){label=12;break;}else{label=15;break;}
 case 12: 
 if(($28|0)==0){ label=13;break;}else if(($28|0)==-1){ var $cnt_3=-1;label=16;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_249;label=16;break;
 case 14: 
 var $34=(($st)|0);
 HEAP32[(($34)>>2)]=0;
 var $cnt_3=$cnt_249;label=16;break;
 case 15: 
 var $36=HEAP32[(($s)>>2)];
 var $37=(($36+$28)|0);
 HEAP32[(($s)>>2)]=$37;
 var $38=((($_248)-($28))|0);
 var $39=(($ws_250+4)|0);
 var $40=((($_347)-(1))|0);
 var $41=((($cnt_249)+(1))|0);
 var $42=($40|0)==0;
 var $43=($_248|0)==($28|0);
 var $or_cond44=$42|$43;
 if($or_cond44){var $cnt_3=$41;label=16;break;}else{var $_347=$40;var $_248=$38;var $cnt_249=$41;var $ws_250=$39;var $27=$37;label=11;break;}
 case 16: 
 var $cnt_3;
 if($1){label=17;break;}else{label=18;break;}
 case 17: 
 var $45=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$45;
 label=18;break;
 case 18: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_380=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=36;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_077=$wn;label=7;break;}else{var $s_5_ph=$1;var $_076_ph=$ws;var $_481_ph=$wn;label=6;break;}
 case 6: 
 var $_481_ph;
 var $_076_ph;
 var $s_5_ph;
 var $12=($_481_ph|0)==0;
 if($12){var $_0=$wn;label=53;break;}else{var $_48197=$_481_ph;var $_07698=$_076_ph;var $s_599=$s_5_ph;label=26;break;}
 case 7: 
 var $_077;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$13;label=12;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$13;label=12;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_17882=$_077;var $s_183=$s_0;label=10;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$27;label=12;break;}
 case 10: 
 var $s_183;
 var $_17882;
 var $28=(($s_183+4)|0);
 var $29=((($_17882)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 if($35){var $_17882=$29;var $s_183=$28;label=10;break;}else{label=11;break;}
 case 11: 
 var $36=(($31)&255);
 var $s_2=$28;var $_279=$29;var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $_279;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=(($s_2+1)|0);
 var $43=((($_279)-(1))|0);
 var $s_0=$42;var $_077=$43;label=7;break;
 case 14: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_8115=$_279;var $_4117=$ws;var $s_10119=$s_2;label=47;break;}else{label=15;break;}
 case 15: 
 var $48=(($s_2+1)|0);
 var $49=((___fsmu8+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_380=$_279;label=16;break;
 case 16: 
 var $_380;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_380;label=46;break;
 case 18: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=25;break;}else{label=19;break;}
 case 19: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=20;break;}else{label=21;break;}
 case 20: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_380;label=46;break;
 case 21: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=25;break;}else{label=22;break;}
 case 22: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_380;label=46;break;
 case 24: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=25;break;
 case 25: 
 var $s_4;
 var $87=((($_380)-(1))|0);
 var $s_0=$s_4;var $_077=$87;label=7;break;
 case 26: 
 var $s_599;
 var $_07698;
 var $_48197;
 var $88=HEAP8[($s_599)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=27;break;}else{var $s_7=$s_599;var $_2=$_07698;var $_6=$_48197;var $122=$88;label=32;break;}
 case 27: 
 var $93=$s_599;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_48197>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_587=$_48197;var $_188=$_07698;var $s_689=$s_599;label=28;break;}else{var $s_7=$s_599;var $_2=$_07698;var $_6=$_48197;var $122=$88;label=32;break;}
 case 28: 
 var $s_689;
 var $_188;
 var $_587;
 var $97=$s_689;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 var $104=(($s_689+1)|0);
 var $105=$98&255;
 var $106=(($_188+4)|0);
 HEAP32[(($_188)>>2)]=$105;
 var $107=(($s_689+2)|0);
 var $108=HEAP8[($104)];
 var $109=($108&255);
 var $110=(($_188+8)|0);
 HEAP32[(($106)>>2)]=$109;
 var $111=(($s_689+3)|0);
 var $112=HEAP8[($107)];
 var $113=($112&255);
 var $114=(($_188+12)|0);
 HEAP32[(($110)>>2)]=$113;
 var $115=(($s_689+4)|0);
 var $116=HEAP8[($111)];
 var $117=($116&255);
 var $118=(($_188+16)|0);
 HEAP32[(($114)>>2)]=$117;
 var $119=((($_587)-(4))|0);
 var $120=($119>>>0)>3;
 if($120){var $_587=$119;var $_188=$118;var $s_689=$115;label=28;break;}else{label=31;break;}
 case 30: 
 var $121=(($98)&255);
 var $s_7=$s_689;var $_2=$_188;var $_6=$_587;var $122=$121;label=32;break;
 case 31: 
 var $_pre_pre=HEAP8[($115)];
 var $s_7=$115;var $_2=$118;var $_6=$119;var $122=$_pre_pre;label=32;break;
 case 32: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=53;break;}else{var $_48197=$129;var $_07698=$128;var $s_599=$127;label=26;break;}
 case 34: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_8115=$_6;var $_4117=$_2;var $s_10119=$s_7;label=47;break;}else{label=35;break;}
 case 35: 
 var $135=(($s_7+1)|0);
 var $136=((___fsmu8+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=36;break;
 case 36: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=46;break;
 case 38: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=39;break;}else{var $c_5=$153;var $s_9=$151;label=45;break;}
 case 39: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=40;break;}else{label=41;break;}
 case 40: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=46;break;
 case 41: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=42;break;}else{var $c_5=$165;var $s_9=$164;label=45;break;}
 case 42: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=43;break;}else{label=44;break;}
 case 43: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=46;break;
 case 44: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=45;break;
 case 45: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_076_ph=$179;var $_481_ph=$180;label=6;break;
 case 46: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){var $_8115=$_8;var $_4117=$_4;var $s_10119=$s_10;label=47;break;}else{var $_4116=$_4;var $s_10118=$s_10;label=51;break;}
 case 47: 
 var $s_10119;
 var $_4117;
 var $_8115;
 var $183=HEAP8[($s_10119)];
 var $184=(($183<<24)>>24)==0;
 if($184){label=48;break;}else{var $_4116=$_4117;var $s_10118=$s_10119;label=51;break;}
 case 48: 
 var $186=($_4117|0)==0;
 if($186){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($_4117)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $189=((($wn)-($_8115))|0);
 var $_0=$189;label=53;break;
 case 51: 
 var $s_10118;
 var $_4116;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_4116|0)==0;
 if($192){var $_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_10118;
 var $_0=-1;label=53;break;
 case 53: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($src|0)==0;
 if($2){var $_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $4=($n|0)==0;
 if($4){label=18;break;}else{label=3;break;}
 case 3: 
 var $6=($wc|0)==0;
 if($6){label=4;break;}else{var $10=$wc;label=5;break;}
 case 4: 
 var $8=$1;
 HEAP32[(($1)>>2)]=$8;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 var $11=HEAP8[($src)];
 var $12=($11&255);
 var $13=(($11<<24)>>24)>-1;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($10)>>2)]=$12;
 var $15=(($11<<24)>>24)!=0;
 var $16=($15&1);
 var $_0=$16;label=19;break;
 case 7: 
 var $18=((($12)-(194))|0);
 var $19=($18>>>0)>50;
 if($19){label=18;break;}else{label=8;break;}
 case 8: 
 var $21=(($src+1)|0);
 var $22=((___fsmu8+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($n>>>0)<4;
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $26=((($n)*(6))&-1);
 var $27=((($26)-(6))|0);
 var $28=-2147483648>>>($27>>>0);
 var $29=$23&$28;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=18;break;}
 case 10: 
 var $32=HEAP8[($21)];
 var $33=($32&255);
 var $34=$33>>>3;
 var $35=((($34)-(16))|0);
 var $36=$23>>26;
 var $37=((($34)+($36))|0);
 var $38=$35|$37;
 var $39=($38>>>0)>7;
 if($39){label=18;break;}else{label=11;break;}
 case 11: 
 var $41=$23<<6;
 var $42=((($33)-(128))|0);
 var $43=$42|$41;
 var $44=($43|0)<0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($10)>>2)]=$43;
 var $_0=2;label=19;break;
 case 13: 
 var $47=(($src+2)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=((($49)-(128))|0);
 var $51=($50>>>0)>63;
 if($51){label=18;break;}else{label=14;break;}
 case 14: 
 var $53=$43<<6;
 var $54=$50|$53;
 var $55=($54|0)<0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($10)>>2)]=$54;
 var $_0=3;label=19;break;
 case 16: 
 var $58=(($src+3)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=((($60)-(128))|0);
 var $62=($61>>>0)>63;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=$54<<6;
 var $65=$61|$64;
 HEAP32[(($10)>>2)]=$65;
 var $_0=4;label=19;break;
 case 18: 
 var $67=___errno_location();
 HEAP32[(($67)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcrtomb($s,$wc,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $0=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$0;
 var $1=($dst|0)!=0;
 var $2=(($buf)|0);
 var $_037_ph=$1?$n:256;
 var $s_0_ph=$1?$dst:$2;
 var $3=($0|0)==0;
 var $4=($_037_ph|0)==0;
 var $or_cond56=$3|$4;
 if($or_cond56){var $cnt_1=0;var $_1=$wn;var $_239=$_037_ph;var $s_053=$s_0_ph;var $22=$0;label=9;break;}else{label=2;break;}
 case 2: 
 var $5=(($buf)|0);
 var $_03757=$_037_ph;var $_058=$wn;var $cnt_059=0;var $s_060=$s_0_ph;var $_pr75=$0;label=3;break;
 case 3: 
 var $_pr75;
 var $s_060;
 var $cnt_059;
 var $_058;
 var $_03757;
 var $7=($_058>>>0)>=($_03757>>>0);
 var $8=($_058>>>0)>32;
 var $or_cond40=$7|$8;
 if($or_cond40){label=4;break;}else{var $cnt_1=$cnt_059;var $_1=$_058;var $_239=$_03757;var $s_053=$s_060;var $22=$_pr75;label=9;break;}
 case 4: 
 var $_037__0=$7?$_03757:$_058;
 var $9=((($_058)-($_037__0))|0);
 var $10=_wcsrtombs($s_060,$ws,$_037__0,0);
 var $11=($10|0)==-1;
 if($11){label=5;break;}else{label=6;break;}
 case 5: 
 var $_pr_pre=HEAP32[(($ws)>>2)];
 var $cnt_1=-1;var $_1=$9;var $_239=0;var $s_053=$s_060;var $22=$_pr_pre;label=9;break;
 case 6: 
 var $13=($s_060|0)==($5|0);
 if($13){var $s_1=$5;var $_138=$_03757;label=8;break;}else{label=7;break;}
 case 7: 
 var $15=(($s_060+$10)|0);
 var $16=((($_03757)-($10))|0);
 var $s_1=$15;var $_138=$16;label=8;break;
 case 8: 
 var $_138;
 var $s_1;
 var $18=((($10)+($cnt_059))|0);
 var $19=HEAP32[(($ws)>>2)];
 var $20=($19|0)==0;
 var $21=($_138|0)==0;
 var $or_cond=$20|$21;
 if($or_cond){var $cnt_1=$18;var $_1=$9;var $_239=$_138;var $s_053=$s_1;var $22=$19;label=9;break;}else{var $_03757=$_138;var $_058=$9;var $cnt_059=$18;var $s_060=$s_1;var $_pr75=$19;label=3;break;}
 case 9: 
 var $22;
 var $s_053;
 var $_239;
 var $_1;
 var $cnt_1;
 var $23=($22|0)==0;
 if($23){var $cnt_3=$cnt_1;label=15;break;}else{label=10;break;}
 case 10: 
 var $24=($_239|0)==0;
 var $25=($_1|0)==0;
 var $or_cond4143=$24|$25;
 if($or_cond4143){var $cnt_3=$cnt_1;label=15;break;}else{var $_344=$_239;var $_245=$_1;var $cnt_246=$cnt_1;var $s_247=$s_053;var $26=$22;label=11;break;}
 case 11: 
 var $26;
 var $s_247;
 var $cnt_246;
 var $_245;
 var $_344;
 var $27=HEAP32[(($26)>>2)];
 var $28=_wcrtomb($s_247,$27,0);
 var $29=((($28)+(1))|0);
 var $30=($29>>>0)<2;
 if($30){label=12;break;}else{label=14;break;}
 case 12: 
 var $32=($28|0)==0;
 if($32){label=13;break;}else{var $cnt_3=-1;label=15;break;}
 case 13: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_246;label=15;break;
 case 14: 
 var $35=HEAP32[(($ws)>>2)];
 var $36=(($35+4)|0);
 HEAP32[(($ws)>>2)]=$36;
 var $37=((($_245)-(1))|0);
 var $38=(($s_247+$28)|0);
 var $39=((($_344)-($28))|0);
 var $40=((($cnt_246)+(1))|0);
 var $41=($_344|0)==($28|0);
 var $42=($37|0)==0;
 var $or_cond41=$41|$42;
 if($or_cond41){var $cnt_3=$40;label=15;break;}else{var $_344=$39;var $_245=$37;var $cnt_246=$40;var $s_247=$38;var $26=$36;label=11;break;}
 case 15: 
 var $cnt_3;
 if($1){label=16;break;}else{label=17;break;}
 case 16: 
 var $44=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$44;
 label=17;break;
 case 17: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_252_lcssa=$n;var $_049_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre88=HEAP32[(($ws)>>2)];
 var $_25272=$n;var $_04973=$s;var $18=$_pre88;label=8;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_05055=0;var $ws2_056=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_056;
 var $_05055;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8,0);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_151=((($_pn)+($_05055))|0);
 var $14=(($ws2_056+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_151;label=26;break;}else{var $_05055=$_151;var $ws2_056=$14;var $8=$15;label=5;break;}
 case 8: 
 var $18;
 var $_04973;
 var $_25272;
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){var $_252_lcssa=$_25272;var $_049_lcssa=$_04973;label=9;break;}else{label=11;break;}
 case 9: 
 var $_049_lcssa;
 var $_252_lcssa;
 var $21=($_252_lcssa|0)==0;
 if($21){var $_461=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $22=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_465=$_252_lcssa;var $_266=$_049_lcssa;var $40=$_pre;label=16;break;
 case 11: 
 var $24=($19>>>0)>127;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=_wcrtomb($_04973,$19,0);
 var $27=($26|0)==-1;
 if($27){var $_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $29=(($_04973+$26)|0);
 var $30=((($_25272)-($26))|0);
 var $_1=$29;var $_353=$30;var $36=$18;label=15;break;
 case 14: 
 var $32=(($19)&255);
 var $33=(($_04973+1)|0);
 HEAP8[($_04973)]=$32;
 var $34=((($_25272)-(1))|0);
 var $_pre89=HEAP32[(($ws)>>2)];
 var $_1=$33;var $_353=$34;var $36=$_pre89;label=15;break;
 case 15: 
 var $36;
 var $_353;
 var $_1;
 var $37=(($36+4)|0);
 HEAP32[(($ws)>>2)]=$37;
 var $38=($_353>>>0)>3;
 if($38){var $_25272=$_353;var $_04973=$_1;var $18=$37;label=8;break;}else{var $_252_lcssa=$_353;var $_049_lcssa=$_1;label=9;break;}
 case 16: 
 var $40;
 var $_266;
 var $_465;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=24;break;}else{label=17;break;}
 case 17: 
 var $44=($41>>>0)>127;
 if($44){label=18;break;}else{label=22;break;}
 case 18: 
 var $46=_wcrtomb($22,$41,0);
 var $47=($46|0)==-1;
 if($47){var $_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $49=($46>>>0)>($_465>>>0);
 if($49){label=20;break;}else{label=21;break;}
 case 20: 
 var $51=((($n)-($_465))|0);
 var $_0=$51;label=26;break;
 case 21: 
 var $53=HEAP32[(($40)>>2)];
 var $54=_wcrtomb($_266,$53,0);
 var $55=(($_266+$46)|0);
 var $56=((($_465)-($46))|0);
 var $_3=$55;var $_5=$56;var $61=$40;label=23;break;
 case 22: 
 var $58=(($41)&255);
 var $59=(($_266+1)|0);
 HEAP8[($_266)]=$58;
 var $60=((($_465)-(1))|0);
 var $_pre87=HEAP32[(($ws)>>2)];
 var $_3=$59;var $_5=$60;var $61=$_pre87;label=23;break;
 case 23: 
 var $61;
 var $_5;
 var $_3;
 var $62=(($61+4)|0);
 HEAP32[(($ws)>>2)]=$62;
 var $63=($_5|0)==0;
 if($63){var $_461=0;label=25;break;}else{var $_465=$_5;var $_266=$_3;var $40=$62;label=16;break;}
 case 24: 
 HEAP8[($_266)]=0;
 var $_461=$_465;label=25;break;
 case 25: 
 var $_461;
 HEAP32[(($ws)>>2)]=0;
 var $65=((($n)-($_461))|0);
 var $_0=$65;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcslen($s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP32[(($_0)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0+4)|0);
 if($3){label=3;break;}else{var $_0=$4;label=2;break;}
 case 3: 
 var $6=$_0;
 var $7=$s;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemcpy($d,$s,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_056=$s;var $_047=$n;var $_08=$d;label=2;break;}
 case 2: 
 var $_08;
 var $_047;
 var $_056;
 var $2=((($_047)-(1))|0);
 var $3=(($_056+4)|0);
 var $4=HEAP32[(($_056)>>2)];
 var $5=(($_08+4)|0);
 HEAP32[(($_08)>>2)]=$4;
 var $6=($2|0)==0;
 if($6){label=3;break;}else{var $_056=$3;var $_047=$2;var $_08=$5;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemmove($d,$s,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_01316=$s;var $_117=$n;var $_018=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_018;
 var $_117;
 var $_01316;
 var $12=((($_117)-(1))|0);
 var $13=(($_01316+4)|0);
 var $14=HEAP32[(($_01316)>>2)];
 var $15=(($_018+4)|0);
 HEAP32[(($_018)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_01316=$13;var $_117=$12;var $_018=$15;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemset($d,$c,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_045=$n;var $_06=$d;label=2;break;}
 case 2: 
 var $_06;
 var $_045;
 var $2=((($_045)-(1))|0);
 var $3=(($_06+4)|0);
 HEAP32[(($_06)>>2)]=$c;
 var $4=($2|0)==0;
 if($4){label=3;break;}else{var $_045=$2;var $_06=$3;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9type_infoD2Ev($this){
 var label=0;
 return;
}
function __ZNSt8bad_castC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6560;
 return;
}
function __ZNSt8bad_castD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt8bad_castD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt8bad_cast4whatEv($this){
 var label=0;
 return 3704;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this){
 var label=0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0){
 var label=0;
 var $2=(($this)|0);
 var $3=(($thrown_type)|0);
 var $4=($2|0)==($3|0);
 return $4;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_0=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_0=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,14336,14320,-1);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_0=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 _memset($12, 0, 56);
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_0=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_0=1;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i16=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i16=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i16;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i16)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=$49?$path_below:2;
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=$74?$path_below:2;
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=(($p_0+8)|0);
 var $81=($80>>>0)<($29>>>0);
 if($81){var $p_0=$80;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=HEAP32[(($adjustedPtr)>>2)];
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$3;
 var $4=(($this)|0);
 var $5=(($thrown_type)|0);
 var $6=($4|0)==($5|0);
 var $7=($5|0)==14400;
 var $__i=$6|$7;
 if($__i){var $_0=1;label=12;break;}else{label=2;break;}
 case 2: 
 var $9=($thrown_type|0)==0;
 if($9){var $_0=0;label=12;break;}else{label=3;break;}
 case 3: 
 var $11=$thrown_type;
 var $12=___dynamic_cast($11,14336,14288,-1);
 var $13=($12|0)==0;
 if($13){var $_0=0;label=12;break;}else{label=4;break;}
 case 4: 
 var $15=(($12+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19^-1;
 var $21=$17&$20;
 var $22=($21|0)==0;
 if($22){label=5;break;}else{var $_0=0;label=12;break;}
 case 5: 
 var $24=(($this+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25)|0);
 var $27=(($12+12)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=($25|0)==($29|0);
 var $31=($26|0)==12704;
 var $or_cond=$30|$31;
 if($or_cond){var $_0=1;label=12;break;}else{label=6;break;}
 case 6: 
 var $33=($25|0)==0;
 if($33){var $_0=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $35=$25;
 var $36=___dynamic_cast($35,14336,14320,-1);
 var $37=$36;
 var $38=($36|0)==0;
 if($38){var $_0=0;label=12;break;}else{label=8;break;}
 case 8: 
 var $40=HEAP32[(($28)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 var $44=___dynamic_cast($43,14336,14320,-1);
 var $45=$44;
 var $46=($44|0)==0;
 if($46){var $_0=0;label=12;break;}else{label=10;break;}
 case 10: 
 var $48=$info;
 _memset($48, 0, 56);
 var $49=(($info)|0);
 HEAP32[(($49)>>2)]=$45;
 var $50=(($info+8)|0);
 HEAP32[(($50)>>2)]=$37;
 var $51=(($info+12)|0);
 HEAP32[(($51)>>2)]=-1;
 var $52=(($info+48)|0);
 HEAP32[(($52)>>2)]=1;
 var $53=$44;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+28)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$56]($45,$info,$57,1);
 var $58=(($info+24)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==1;
 if($60){label=11;break;}else{var $_0=0;label=12;break;}
 case 11: 
 var $62=(($info+16)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$63;
 var $_0=1;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=(($info)|0);
 HEAP32[(($10)>>2)]=$dst_type;
 var $11=(($info+4)|0);
 HEAP32[(($11)>>2)]=$static_ptr;
 var $12=(($info+8)|0);
 HEAP32[(($12)>>2)]=$static_type;
 var $13=(($info+12)|0);
 HEAP32[(($13)>>2)]=$src2dst_offset;
 var $14=(($info+16)|0);
 var $15=(($info+20)|0);
 var $16=(($info+24)|0);
 var $17=(($info+28)|0);
 var $18=(($info+32)|0);
 var $19=(($info+40)|0);
 var $20=$8;
 var $21=(($dst_type)|0);
 var $22=($20|0)==($21|0);
 var $23=$14;
 _memset($23, 0, 39);
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $25=(($info+48)|0);
 HEAP32[(($25)>>2)]=1;
 var $26=$8;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+20)|0);
 var $29=HEAP32[(($28)>>2)];
 FUNCTION_TABLE[$29]($9,$info,$6,$6,1,0);
 var $30=HEAP32[(($16)>>2)];
 var $31=($30|0)==1;
 var $_=$31?$6:0;
 STACKTOP=sp;return $_;
 case 3: 
 var $33=(($info+36)|0);
 var $34=$8;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($9,$info,$6,1,0);
 var $38=HEAP32[(($33)>>2)];
 if(($38|0)==0){ label=4;break;}else if(($38|0)==1){ label=7;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 4: 
 var $40=HEAP32[(($19)>>2)];
 var $41=($40|0)==1;
 if($41){label=5;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 5: 
 var $43=HEAP32[(($17)>>2)];
 var $44=($43|0)==1;
 if($44){label=6;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 6: 
 var $46=HEAP32[(($18)>>2)];
 var $47=($46|0)==1;
 var $48=HEAP32[(($15)>>2)];
 var $_13=$47?$48:0;
 var $dst_ptr_0=$_13;label=12;break;
 case 7: 
 var $50=HEAP32[(($16)>>2)];
 var $51=($50|0)==1;
 if($51){label=11;break;}else{label=8;break;}
 case 8: 
 var $53=HEAP32[(($19)>>2)];
 var $54=($53|0)==0;
 if($54){label=9;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 9: 
 var $56=HEAP32[(($17)>>2)];
 var $57=($56|0)==1;
 if($57){label=10;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 10: 
 var $59=HEAP32[(($18)>>2)];
 var $60=($59|0)==1;
 if($60){label=11;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 11: 
 var $62=HEAP32[(($14)>>2)];
 var $dst_ptr_0=$62;label=12;break;
 case 12: 
 var $dst_ptr_0;
 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off098=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off087=0;var $p_088=$42;var $is_dst_type_derived_from_static_type_0_off089=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off089;
 var $p_088;
 var $does_dst_type_point_to_our_static_type_0_off087;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_088+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i81=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i81=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i81;
 var $60=(($p_088)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i81)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off089;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;label=22;break;}
 case 16: 
 var $74=HEAP8[($44)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off089;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;label=21;break;}else{label=17;break;}
 case 17: 
 var $78=HEAP8[($43)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=20;break;}else{label=18;break;}
 case 18: 
 var $82=HEAP32[(($47)>>2)];
 var $83=($82|0)==1;
 if($83){label=27;break;}else{label=19;break;}
 case 19: 
 var $85=HEAP32[(($46)>>2)];
 var $86=$85&2;
 var $87=($86|0)==0;
 if($87){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $89=HEAP32[(($46)>>2)];
 var $90=$89&1;
 var $91=($90|0)==0;
 if($91){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $93=(($p_088+8)|0);
 var $94=($93>>>0)<($40>>>0);
 if($94){var $does_dst_type_point_to_our_static_type_0_off087=$does_dst_type_point_to_our_static_type_1_off0;var $p_088=$93;var $is_dst_type_derived_from_static_type_0_off089=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off098=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off098;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $95=(($info+40)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)+(1))|0);
 HEAP32[(($95)>>2)]=$97;
 var $98=(($info+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==1;
 if($100){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;label=26;break;}
 case 24: 
 var $102=(($info+24)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==2;
 if($104){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;label=26;break;}
 case 25: 
 var $106=(($info+54)|0);
 HEAP8[($106)]=1;
 if($is_dst_type_derived_from_static_type_2_off098){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off099;
 if($is_dst_type_derived_from_static_type_2_off099){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $110=(($this+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($this+16+($111<<3))|0);
 var $113=(($this+20)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114>>8;
 var $116=$114&1;
 var $117=($116|0)==0;
 if($117){var $offset_to_base_0_i82=$115;label=31;break;}else{label=30;break;}
 case 30: 
 var $119=$current_ptr;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+$115)|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $offset_to_base_0_i82=$123;label=31;break;
 case 31: 
 var $offset_to_base_0_i82;
 var $124=(($this+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+24)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($current_ptr+$offset_to_base_0_i82)|0);
 var $131=$114&2;
 var $132=($131|0)!=0;
 var $133=$132?$path_below:2;
 FUNCTION_TABLE[$129]($125,$info,$130,$133,$use_strcmp);
 var $134=(($this+24)|0);
 var $135=($111|0)>1;
 if($135){label=32;break;}else{label=53;break;}
 case 32: 
 var $137=(($this+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&2;
 var $140=($139|0)==0;
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 var $142=(($info+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==1;
 if($144){label=34;break;}else{label=39;break;}
 case 34: 
 var $145=(($info+54)|0);
 var $146=$current_ptr;
 var $p2_0=$134;label=35;break;
 case 35: 
 var $p2_0;
 var $148=HEAP8[($145)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=36;break;}else{label=53;break;}
 case 36: 
 var $152=(($p2_0+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153>>8;
 var $155=$153&1;
 var $156=($155|0)==0;
 if($156){var $offset_to_base_0_i79=$154;label=38;break;}else{label=37;break;}
 case 37: 
 var $158=HEAP32[(($146)>>2)];
 var $159=(($158+$154)|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $offset_to_base_0_i79=$161;label=38;break;
 case 38: 
 var $offset_to_base_0_i79;
 var $162=(($p2_0)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+24)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($current_ptr+$offset_to_base_0_i79)|0);
 var $169=$153&2;
 var $170=($169|0)!=0;
 var $171=$170?$path_below:2;
 FUNCTION_TABLE[$167]($163,$info,$168,$171,$use_strcmp);
 var $172=(($p2_0+8)|0);
 var $173=($172>>>0)<($112>>>0);
 if($173){var $p2_0=$172;label=35;break;}else{label=53;break;}
 case 39: 
 var $175=$138&1;
 var $176=($175|0)==0;
 if($176){label=41;break;}else{label=40;break;}
 case 40: 
 var $177=(($info+24)|0);
 var $178=(($info+54)|0);
 var $179=$current_ptr;
 var $p2_1=$134;label=42;break;
 case 41: 
 var $180=(($info+54)|0);
 var $181=$current_ptr;
 var $p2_2=$134;label=48;break;
 case 42: 
 var $p2_1;
 var $183=HEAP8[($178)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=43;break;}else{label=53;break;}
 case 43: 
 var $187=HEAP32[(($142)>>2)];
 var $188=($187|0)==1;
 if($188){label=44;break;}else{label=45;break;}
 case 44: 
 var $190=HEAP32[(($177)>>2)];
 var $191=($190|0)==1;
 if($191){label=53;break;}else{label=45;break;}
 case 45: 
 var $193=(($p2_1+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$194>>8;
 var $196=$194&1;
 var $197=($196|0)==0;
 if($197){var $offset_to_base_0_i77=$195;label=47;break;}else{label=46;break;}
 case 46: 
 var $199=HEAP32[(($179)>>2)];
 var $200=(($199+$195)|0);
 var $201=$200;
 var $202=HEAP32[(($201)>>2)];
 var $offset_to_base_0_i77=$202;label=47;break;
 case 47: 
 var $offset_to_base_0_i77;
 var $203=(($p2_1)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$204;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+24)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($current_ptr+$offset_to_base_0_i77)|0);
 var $210=$194&2;
 var $211=($210|0)!=0;
 var $212=$211?$path_below:2;
 FUNCTION_TABLE[$208]($204,$info,$209,$212,$use_strcmp);
 var $213=(($p2_1+8)|0);
 var $214=($213>>>0)<($112>>>0);
 if($214){var $p2_1=$213;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $216=HEAP8[($180)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=49;break;}else{label=53;break;}
 case 49: 
 var $220=HEAP32[(($142)>>2)];
 var $221=($220|0)==1;
 if($221){label=53;break;}else{label=50;break;}
 case 50: 
 var $223=(($p2_2+4)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224>>8;
 var $226=$224&1;
 var $227=($226|0)==0;
 if($227){var $offset_to_base_0_i=$225;label=52;break;}else{label=51;break;}
 case 51: 
 var $229=HEAP32[(($181)>>2)];
 var $230=(($229+$225)|0);
 var $231=$230;
 var $232=HEAP32[(($231)>>2)];
 var $offset_to_base_0_i=$232;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $233=(($p2_2)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$234;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+24)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($current_ptr+$offset_to_base_0_i)|0);
 var $240=$224&2;
 var $241=($240|0)!=0;
 var $242=$241?$path_below:2;
 FUNCTION_TABLE[$238]($234,$info,$239,$242,$use_strcmp);
 var $243=(($p2_2+8)|0);
 var $244=($243>>>0)<($112>>>0);
 if($244){var $p2_2=$243;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $is_dst_type_derived_from_static_type_0_off036=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $50=HEAP8[($38)];
 var $51=$50&1;
 var $not_=(($51<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off036=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off036;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $52=(($info+40)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)+(1))|0);
 HEAP32[(($52)>>2)]=$54;
 var $55=(($info+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==1;
 if($57){label=14;break;}else{label=16;break;}
 case 14: 
 var $59=(($info+24)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==2;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=(($info+54)|0);
 HEAP8[($63)]=1;
 if($is_dst_type_derived_from_static_type_0_off036){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off036){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $67=(($this+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+24)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond23_i=$36&$37;
 if($or_cond23_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=$47&1;
 var $49=(($info+53)|0);
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($this+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($this+16+($53<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $55=(($this+20)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56>>8;
 var $58=$56&1;
 var $59=($58|0)==0;
 if($59){var $offset_to_base_0_i32=$57;label=14;break;}else{label=13;break;}
 case 13: 
 var $61=$current_ptr;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+$57)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i32=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i32;
 var $66=(($this+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($current_ptr+$offset_to_base_0_i32)|0);
 var $73=$56&2;
 var $74=($73|0)!=0;
 var $75=$74?$path_below:2;
 FUNCTION_TABLE[$71]($67,$info,$dst_ptr,$72,$75,$use_strcmp);
 var $76=($53|0)>1;
 if($76){label=15;break;}else{label=25;break;}
 case 15: 
 var $77=(($this+24)|0);
 var $78=(($info+24)|0);
 var $79=(($this+8)|0);
 var $80=(($info+54)|0);
 var $81=$current_ptr;
 var $p_0=$77;label=16;break;
 case 16: 
 var $p_0;
 var $83=HEAP8[($80)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=17;break;}else{label=25;break;}
 case 17: 
 var $87=HEAP8[($46)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=20;break;}else{label=18;break;}
 case 18: 
 var $91=HEAP32[(($78)>>2)];
 var $92=($91|0)==1;
 if($92){label=25;break;}else{label=19;break;}
 case 19: 
 var $94=HEAP32[(($79)>>2)];
 var $95=$94&2;
 var $96=($95|0)==0;
 if($96){label=25;break;}else{label=22;break;}
 case 20: 
 var $98=HEAP8[($49)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $102=HEAP32[(($79)>>2)];
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $106=(($p_0+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107>>8;
 var $109=$107&1;
 var $110=($109|0)==0;
 if($110){var $offset_to_base_0_i=$108;label=24;break;}else{label=23;break;}
 case 23: 
 var $112=HEAP32[(($81)>>2)];
 var $113=(($112+$108)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $offset_to_base_0_i=$115;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $116=(($p_0)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+20)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($current_ptr+$offset_to_base_0_i)|0);
 var $123=$107&2;
 var $124=($123|0)!=0;
 var $125=$124?$path_below:2;
 FUNCTION_TABLE[$121]($117,$info,$dst_ptr,$122,$125,$use_strcmp);
 var $126=(($p_0+8)|0);
 var $127=($126>>>0)<($54>>>0);
 if($127){var $p_0=$126;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$48;
 HEAP8[($49)]=$51;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond23_i=$36&$37;
 if($or_cond23_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond23_i=$34&$35;
 if($or_cond23_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((14512)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((14552+($18<<2))|0);
 var $20=$19;
 var $_sum111=((($18)+(2))|0);
 var $21=((14552+($_sum111<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((14512)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((14528)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum113114=$40|4;
 var $44=(($43+$_sum113114)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((14520)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((14552+($83<<2))|0);
 var $85=$84;
 var $_sum104=((($83)+(2))|0);
 var $86=((14552+($_sum104<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((14512)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((14528)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum106107=$8|4;
 var $113=(($109+$_sum106107)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((14520)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((14532)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((14552+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((14512)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((14512)>>2)]=$130;
 var $_sum109_pre=((($122)+(2))|0);
 var $_pre=((14552+($_sum109_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum110=((($122)+(2))|0);
 var $132=((14552+($_sum110<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((14528)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((14520)>>2)]=$106;
 HEAP32[((14532)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((14516)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((14816+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=$190?$189:$rsize_0_i;
 var $_v_0_i=$190?$185:$v_0_i;
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((14528)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((14816+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((14516)>>2)];
 var $252=$251&$250;
 HEAP32[((14516)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((14528)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((14528)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((14528)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((14528)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i137=$8|4;
 var $311=(($192+$_sum_i137)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((14520)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((14532)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((14552+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((14512)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((14512)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((14552+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((14552+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((14528)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((14520)>>2)]=$rsize_0_i;
 HEAP32[((14532)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $344=($342|0)==0;
 if($344){var $nb_0=$8;label=160;break;}else{var $mem_0=$343;label=341;break;}
 case 78: 
 var $346=($bytes>>>0)>4294967231;
 if($346){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $348=((($bytes)+(11))|0);
 var $349=$348&-8;
 var $350=HEAP32[((14516)>>2)];
 var $351=($350|0)==0;
 if($351){var $nb_0=$349;label=160;break;}else{label=80;break;}
 case 80: 
 var $353=(((-$349))|0);
 var $354=$348>>>8;
 var $355=($354|0)==0;
 if($355){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $357=($349>>>0)>16777215;
 if($357){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $359=((($354)+(1048320))|0);
 var $360=$359>>>16;
 var $361=$360&8;
 var $362=$354<<$361;
 var $363=((($362)+(520192))|0);
 var $364=$363>>>16;
 var $365=$364&4;
 var $366=$365|$361;
 var $367=$362<<$365;
 var $368=((($367)+(245760))|0);
 var $369=$368>>>16;
 var $370=$369&2;
 var $371=$366|$370;
 var $372=(((14)-($371))|0);
 var $373=$367<<$370;
 var $374=$373>>>15;
 var $375=((($372)+($374))|0);
 var $376=$375<<1;
 var $377=((($375)+(7))|0);
 var $378=$349>>>($377>>>0);
 var $379=$378&1;
 var $380=$379|$376;
 var $idx_0_i=$380;label=83;break;
 case 83: 
 var $idx_0_i;
 var $382=((14816+($idx_0_i<<2))|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($383|0)==0;
 if($384){var $v_2_i=0;var $rsize_2_i=$353;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $386=($idx_0_i|0)==31;
 if($386){var $391=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $388=$idx_0_i>>>1;
 var $389=(((25)-($388))|0);
 var $391=$389;label=86;break;
 case 86: 
 var $391;
 var $392=$349<<$391;
 var $v_0_i118=0;var $rsize_0_i117=$353;var $t_0_i116=$383;var $sizebits_0_i=$392;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i116;
 var $rsize_0_i117;
 var $v_0_i118;
 var $394=(($t_0_i116+4)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=$395&-8;
 var $397=((($396)-($349))|0);
 var $398=($397>>>0)<($rsize_0_i117>>>0);
 if($398){label=88;break;}else{var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;label=89;break;}
 case 88: 
 var $400=($396|0)==($349|0);
 if($400){var $v_2_i=$t_0_i116;var $rsize_2_i=$397;var $t_1_i=$t_0_i116;label=90;break;}else{var $v_1_i=$t_0_i116;var $rsize_1_i=$397;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $402=(($t_0_i116+20)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=$sizebits_0_i>>>31;
 var $405=(($t_0_i116+16+($404<<2))|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($403|0)==0;
 var $408=($403|0)==($406|0);
 var $or_cond_i=$407|$408;
 var $rst_1_i=$or_cond_i?$rst_0_i:$403;
 var $409=($406|0)==0;
 var $410=$sizebits_0_i<<1;
 if($409){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$406;var $sizebits_0_i=$410;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $411=($t_1_i|0)==0;
 var $412=($v_2_i|0)==0;
 var $or_cond21_i=$411&$412;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $414=2<<$idx_0_i;
 var $415=(((-$414))|0);
 var $416=$414|$415;
 var $417=$350&$416;
 var $418=($417|0)==0;
 if($418){var $nb_0=$349;label=160;break;}else{label=92;break;}
 case 92: 
 var $420=(((-$417))|0);
 var $421=$417&$420;
 var $422=((($421)-(1))|0);
 var $423=$422>>>12;
 var $424=$423&16;
 var $425=$422>>>($424>>>0);
 var $426=$425>>>5;
 var $427=$426&8;
 var $428=$427|$424;
 var $429=$425>>>($427>>>0);
 var $430=$429>>>2;
 var $431=$430&4;
 var $432=$428|$431;
 var $433=$429>>>($431>>>0);
 var $434=$433>>>1;
 var $435=$434&2;
 var $436=$432|$435;
 var $437=$433>>>($435>>>0);
 var $438=$437>>>1;
 var $439=$438&1;
 var $440=$436|$439;
 var $441=$437>>>($439>>>0);
 var $442=((($440)+($441))|0);
 var $443=((14816+($442<<2))|0);
 var $444=HEAP32[(($443)>>2)];
 var $t_2_ph_i=$444;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $445=($t_2_ph_i|0)==0;
 if($445){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_330_i;
 var $rsize_329_i;
 var $t_228_i;
 var $446=(($t_228_i+4)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=$447&-8;
 var $449=((($448)-($349))|0);
 var $450=($449>>>0)<($rsize_329_i>>>0);
 var $_rsize_3_i=$450?$449:$rsize_329_i;
 var $t_2_v_3_i=$450?$t_228_i:$v_330_i;
 var $451=(($t_228_i+16)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){label=95;break;}else{var $t_228_i=$452;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $454=(($t_228_i+20)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=($455|0)==0;
 if($456){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_228_i=$455;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $457=($v_3_lcssa_i|0)==0;
 if($457){var $nb_0=$349;label=160;break;}else{label=97;break;}
 case 97: 
 var $459=HEAP32[((14520)>>2)];
 var $460=((($459)-($349))|0);
 var $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
 if($461){label=98;break;}else{var $nb_0=$349;label=160;break;}
 case 98: 
 var $463=$v_3_lcssa_i;
 var $464=HEAP32[((14528)>>2)];
 var $465=($463>>>0)<($464>>>0);
 if($465){label=158;break;}else{label=99;break;}
 case 99: 
 var $467=(($463+$349)|0);
 var $468=$467;
 var $469=($463>>>0)<($467>>>0);
 if($469){label=100;break;}else{label=158;break;}
 case 100: 
 var $471=(($v_3_lcssa_i+24)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($v_3_lcssa_i+12)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($474|0)==($v_3_lcssa_i|0);
 if($475){label=106;break;}else{label=101;break;}
 case 101: 
 var $477=(($v_3_lcssa_i+8)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=$478;
 var $480=($479>>>0)<($464>>>0);
 if($480){label=105;break;}else{label=102;break;}
 case 102: 
 var $482=(($478+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($483|0)==($v_3_lcssa_i|0);
 if($484){label=103;break;}else{label=105;break;}
 case 103: 
 var $486=(($474+8)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=($487|0)==($v_3_lcssa_i|0);
 if($488){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($482)>>2)]=$474;
 HEAP32[(($486)>>2)]=$478;
 var $R_1_i122=$474;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $491=(($v_3_lcssa_i+20)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($492|0)==0;
 if($493){label=107;break;}else{var $R_0_i120=$492;var $RP_0_i119=$491;label=108;break;}
 case 107: 
 var $495=(($v_3_lcssa_i+16)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){var $R_1_i122=0;label=113;break;}else{var $R_0_i120=$496;var $RP_0_i119=$495;label=108;break;}
 case 108: 
 var $RP_0_i119;
 var $R_0_i120;
 var $498=(($R_0_i120+20)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){label=109;break;}else{var $R_0_i120=$499;var $RP_0_i119=$498;label=108;break;}
 case 109: 
 var $502=(($R_0_i120+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($503|0)==0;
 if($504){label=110;break;}else{var $R_0_i120=$503;var $RP_0_i119=$502;label=108;break;}
 case 110: 
 var $506=$RP_0_i119;
 var $507=($506>>>0)<($464>>>0);
 if($507){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i119)>>2)]=0;
 var $R_1_i122=$R_0_i120;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i122;
 var $511=($472|0)==0;
 if($511){label=133;break;}else{label=114;break;}
 case 114: 
 var $513=(($v_3_lcssa_i+28)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=((14816+($514<<2))|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=($v_3_lcssa_i|0)==($516|0);
 if($517){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($515)>>2)]=$R_1_i122;
 var $cond_i123=($R_1_i122|0)==0;
 if($cond_i123){label=116;break;}else{label=123;break;}
 case 116: 
 var $519=HEAP32[(($513)>>2)];
 var $520=1<<$519;
 var $521=$520^-1;
 var $522=HEAP32[((14516)>>2)];
 var $523=$522&$521;
 HEAP32[((14516)>>2)]=$523;
 label=133;break;
 case 117: 
 var $525=$472;
 var $526=HEAP32[((14528)>>2)];
 var $527=($525>>>0)<($526>>>0);
 if($527){label=121;break;}else{label=118;break;}
 case 118: 
 var $529=(($472+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($530|0)==($v_3_lcssa_i|0);
 if($531){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($529)>>2)]=$R_1_i122;
 label=122;break;
 case 120: 
 var $534=(($472+20)|0);
 HEAP32[(($534)>>2)]=$R_1_i122;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $537=($R_1_i122|0)==0;
 if($537){label=133;break;}else{label=123;break;}
 case 123: 
 var $539=$R_1_i122;
 var $540=HEAP32[((14528)>>2)];
 var $541=($539>>>0)<($540>>>0);
 if($541){label=132;break;}else{label=124;break;}
 case 124: 
 var $543=(($R_1_i122+24)|0);
 HEAP32[(($543)>>2)]=$472;
 var $544=(($v_3_lcssa_i+16)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=($545|0)==0;
 if($546){label=128;break;}else{label=125;break;}
 case 125: 
 var $548=$545;
 var $549=HEAP32[((14528)>>2)];
 var $550=($548>>>0)<($549>>>0);
 if($550){label=127;break;}else{label=126;break;}
 case 126: 
 var $552=(($R_1_i122+16)|0);
 HEAP32[(($552)>>2)]=$545;
 var $553=(($545+24)|0);
 HEAP32[(($553)>>2)]=$R_1_i122;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $556=(($v_3_lcssa_i+20)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($557|0)==0;
 if($558){label=133;break;}else{label=129;break;}
 case 129: 
 var $560=$557;
 var $561=HEAP32[((14528)>>2)];
 var $562=($560>>>0)<($561>>>0);
 if($562){label=131;break;}else{label=130;break;}
 case 130: 
 var $564=(($R_1_i122+20)|0);
 HEAP32[(($564)>>2)]=$557;
 var $565=(($557+24)|0);
 HEAP32[(($565)>>2)]=$R_1_i122;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $569=($rsize_3_lcssa_i>>>0)<16;
 if($569){label=134;break;}else{label=135;break;}
 case 134: 
 var $571=((($rsize_3_lcssa_i)+($349))|0);
 var $572=$571|3;
 var $573=(($v_3_lcssa_i+4)|0);
 HEAP32[(($573)>>2)]=$572;
 var $_sum19_i=((($571)+(4))|0);
 var $574=(($463+$_sum19_i)|0);
 var $575=$574;
 var $576=HEAP32[(($575)>>2)];
 var $577=$576|1;
 HEAP32[(($575)>>2)]=$577;
 label=159;break;
 case 135: 
 var $579=$349|3;
 var $580=(($v_3_lcssa_i+4)|0);
 HEAP32[(($580)>>2)]=$579;
 var $581=$rsize_3_lcssa_i|1;
 var $_sum_i125136=$349|4;
 var $582=(($463+$_sum_i125136)|0);
 var $583=$582;
 HEAP32[(($583)>>2)]=$581;
 var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
 var $584=(($463+$_sum1_i126)|0);
 var $585=$584;
 HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
 var $586=$rsize_3_lcssa_i>>>3;
 var $587=($rsize_3_lcssa_i>>>0)<256;
 if($587){label=136;break;}else{label=141;break;}
 case 136: 
 var $589=$586<<1;
 var $590=((14552+($589<<2))|0);
 var $591=$590;
 var $592=HEAP32[((14512)>>2)];
 var $593=1<<$586;
 var $594=$592&$593;
 var $595=($594|0)==0;
 if($595){label=137;break;}else{label=138;break;}
 case 137: 
 var $597=$592|$593;
 HEAP32[((14512)>>2)]=$597;
 var $_sum15_pre_i=((($589)+(2))|0);
 var $_pre_i127=((14552+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$591;var $_pre_phi_i128=$_pre_i127;label=140;break;
 case 138: 
 var $_sum18_i=((($589)+(2))|0);
 var $599=((14552+($_sum18_i<<2))|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=$600;
 var $602=HEAP32[((14528)>>2)];
 var $603=($601>>>0)<($602>>>0);
 if($603){label=139;break;}else{var $F5_0_i=$600;var $_pre_phi_i128=$599;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i128;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i128)>>2)]=$468;
 var $606=(($F5_0_i+12)|0);
 HEAP32[(($606)>>2)]=$468;
 var $_sum16_i=((($349)+(8))|0);
 var $607=(($463+$_sum16_i)|0);
 var $608=$607;
 HEAP32[(($608)>>2)]=$F5_0_i;
 var $_sum17_i=((($349)+(12))|0);
 var $609=(($463+$_sum17_i)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=$591;
 label=159;break;
 case 141: 
 var $612=$467;
 var $613=$rsize_3_lcssa_i>>>8;
 var $614=($613|0)==0;
 if($614){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $616=($rsize_3_lcssa_i>>>0)>16777215;
 if($616){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $618=((($613)+(1048320))|0);
 var $619=$618>>>16;
 var $620=$619&8;
 var $621=$613<<$620;
 var $622=((($621)+(520192))|0);
 var $623=$622>>>16;
 var $624=$623&4;
 var $625=$624|$620;
 var $626=$621<<$624;
 var $627=((($626)+(245760))|0);
 var $628=$627>>>16;
 var $629=$628&2;
 var $630=$625|$629;
 var $631=(((14)-($630))|0);
 var $632=$626<<$629;
 var $633=$632>>>15;
 var $634=((($631)+($633))|0);
 var $635=$634<<1;
 var $636=((($634)+(7))|0);
 var $637=$rsize_3_lcssa_i>>>($636>>>0);
 var $638=$637&1;
 var $639=$638|$635;
 var $I7_0_i=$639;label=144;break;
 case 144: 
 var $I7_0_i;
 var $641=((14816+($I7_0_i<<2))|0);
 var $_sum2_i=((($349)+(28))|0);
 var $642=(($463+$_sum2_i)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=$I7_0_i;
 var $_sum3_i129=((($349)+(16))|0);
 var $644=(($463+$_sum3_i129)|0);
 var $_sum4_i130=((($349)+(20))|0);
 var $645=(($463+$_sum4_i130)|0);
 var $646=$645;
 HEAP32[(($646)>>2)]=0;
 var $647=$644;
 HEAP32[(($647)>>2)]=0;
 var $648=HEAP32[((14516)>>2)];
 var $649=1<<$I7_0_i;
 var $650=$648&$649;
 var $651=($650|0)==0;
 if($651){label=145;break;}else{label=146;break;}
 case 145: 
 var $653=$648|$649;
 HEAP32[((14516)>>2)]=$653;
 HEAP32[(($641)>>2)]=$612;
 var $654=$641;
 var $_sum5_i=((($349)+(24))|0);
 var $655=(($463+$_sum5_i)|0);
 var $656=$655;
 HEAP32[(($656)>>2)]=$654;
 var $_sum6_i=((($349)+(12))|0);
 var $657=(($463+$_sum6_i)|0);
 var $658=$657;
 HEAP32[(($658)>>2)]=$612;
 var $_sum7_i=((($349)+(8))|0);
 var $659=(($463+$_sum7_i)|0);
 var $660=$659;
 HEAP32[(($660)>>2)]=$612;
 label=159;break;
 case 146: 
 var $662=HEAP32[(($641)>>2)];
 var $663=($I7_0_i|0)==31;
 if($663){var $668=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $665=$I7_0_i>>>1;
 var $666=(((25)-($665))|0);
 var $668=$666;label=148;break;
 case 148: 
 var $668;
 var $669=$rsize_3_lcssa_i<<$668;
 var $K12_0_i=$669;var $T_0_i=$662;label=149;break;
 case 149: 
 var $T_0_i;
 var $K12_0_i;
 var $671=(($T_0_i+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){label=154;break;}else{label=150;break;}
 case 150: 
 var $676=$K12_0_i>>>31;
 var $677=(($T_0_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 var $680=$K12_0_i<<1;
 if($679){label=151;break;}else{var $K12_0_i=$680;var $T_0_i=$678;label=149;break;}
 case 151: 
 var $682=$677;
 var $683=HEAP32[((14528)>>2)];
 var $684=($682>>>0)<($683>>>0);
 if($684){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($677)>>2)]=$612;
 var $_sum12_i=((($349)+(24))|0);
 var $686=(($463+$_sum12_i)|0);
 var $687=$686;
 HEAP32[(($687)>>2)]=$T_0_i;
 var $_sum13_i=((($349)+(12))|0);
 var $688=(($463+$_sum13_i)|0);
 var $689=$688;
 HEAP32[(($689)>>2)]=$612;
 var $_sum14_i=((($349)+(8))|0);
 var $690=(($463+$_sum14_i)|0);
 var $691=$690;
 HEAP32[(($691)>>2)]=$612;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $694=(($T_0_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_i;
 var $697=HEAP32[((14528)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=157;break;}else{label=155;break;}
 case 155: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=157;break;}else{label=156;break;}
 case 156: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$612;
 HEAP32[(($694)>>2)]=$612;
 var $_sum9_i=((($349)+(8))|0);
 var $704=(($463+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($349)+(12))|0);
 var $706=(($463+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_i;
 var $_sum11_i=((($349)+(24))|0);
 var $708=(($463+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $713=($711|0)==0;
 if($713){var $nb_0=$349;label=160;break;}else{var $mem_0=$712;label=341;break;}
 case 160: 
 var $nb_0;
 var $714=HEAP32[((14520)>>2)];
 var $715=($nb_0>>>0)>($714>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((14532)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((14532)>>2)]=$723;
 HEAP32[((14520)>>2)]=$717;
 var $724=$717|1;
 var $_sum102=((($nb_0)+(4))|0);
 var $725=(($721+$_sum102)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((14520)>>2)]=0;
 HEAP32[((14532)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum101=((($714)+(4))|0);
 var $735=(($734+$_sum101)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((14524)>>2)];
 var $744=($nb_0>>>0)<($743>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((14524)>>2)]=$746;
 var $747=HEAP32[((14536)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((14536)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((14456)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((14464)>>2)]=$762;
 HEAP32[((14460)>>2)]=$762;
 HEAP32[((14468)>>2)]=-1;
 HEAP32[((14472)>>2)]=-1;
 HEAP32[((14476)>>2)]=0;
 HEAP32[((14956)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((14456)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((14464)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((14952)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((14944)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((14956)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((14536)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=14960;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_0303639_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((14460)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((14944)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i131=$826&$827;
 if($or_cond_i131){label=185;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((14952)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_0303639_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 var $ssize_0__i=$836?$ssize_0_i:0;
 var $__i=$836?$809:-1;
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$835;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $838=HEAP32[((14524)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 var $_3_i=$847?$840:0;
 var $_4_i=$847?$843:-1;
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $849=(((-$ssize_1_i))|0);
 var $850=($tbase_0_i|0)==-1;
 if($850){label=191;break;}else{var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $852=($br_0_i|0)!=-1;
 var $853=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$852&$853;
 var $854=($ssize_1_i>>>0)<($771>>>0);
 var $or_cond6_i=$or_cond5_i&$854;
 if($or_cond6_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $856=HEAP32[((14464)>>2)];
 var $857=((($773)-($ssize_1_i))|0);
 var $858=((($857)+($856))|0);
 var $859=(((-$856))|0);
 var $860=$858&$859;
 var $861=($860>>>0)<2147483647;
 if($861){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $863=_sbrk($860);
 var $864=($863|0)==-1;
 if($864){label=195;break;}else{label=194;break;}
 case 194: 
 var $866=((($860)+($ssize_1_i))|0);
 var $ssize_2_i=$866;label=196;break;
 case 195: 
 var $868=_sbrk($849);
 var $tsize_0303639_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $870=($br_0_i|0)==-1;
 if($870){var $tsize_0303639_i=$tsize_0_i;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0303639_i;
 var $871=HEAP32[((14956)>>2)];
 var $872=$871|4;
 HEAP32[((14956)>>2)]=$872;
 var $tsize_1_i=$tsize_0303639_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $874=($776>>>0)<2147483647;
 if($874){label=199;break;}else{label=340;break;}
 case 199: 
 var $876=_sbrk($776);
 var $877=_sbrk(0);
 var $notlhs_i=($876|0)!=-1;
 var $notrhs_i=($877|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $878=($876>>>0)<($877>>>0);
 var $or_cond9_i=$or_cond8_not_i&$878;
 if($or_cond9_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $879=$877;
 var $880=$876;
 var $881=((($879)-($880))|0);
 var $882=((($nb_0)+(40))|0);
 var $883=($881>>>0)>($882>>>0);
 var $_tsize_1_i=$883?$881:$tsize_1_i;
 var $_tbase_1_i=$883?$876:-1;
 var $884=($_tbase_1_i|0)==-1;
 if($884){label=340;break;}else{var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((14944)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((14944)>>2)]=$886;
 var $887=HEAP32[((14948)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((14948)>>2)]=$886;
 label=203;break;
 case 203: 
 var $890=HEAP32[((14536)>>2)];
 var $891=($890|0)==0;
 if($891){label=204;break;}else{var $sp_067_i=14960;label=211;break;}
 case 204: 
 var $893=HEAP32[((14528)>>2)];
 var $894=($893|0)==0;
 var $895=($tbase_245_i>>>0)<($893>>>0);
 var $or_cond10_i=$894|$895;
 if($or_cond10_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((14528)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((14960)>>2)]=$tbase_245_i;
 HEAP32[((14964)>>2)]=$tsize_244_i;
 HEAP32[((14972)>>2)]=0;
 var $897=HEAP32[((14456)>>2)];
 HEAP32[((14548)>>2)]=$897;
 HEAP32[((14544)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $899=$i_02_i_i<<1;
 var $900=((14552+($899<<2))|0);
 var $901=$900;
 var $_sum_i_i=((($899)+(3))|0);
 var $902=((14552+($_sum_i_i<<2))|0);
 HEAP32[(($902)>>2)]=$901;
 var $_sum1_i_i=((($899)+(2))|0);
 var $903=((14552+($_sum1_i_i<<2))|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=((($i_02_i_i)+(1))|0);
 var $905=($904>>>0)<32;
 if($905){var $i_02_i_i=$904;label=207;break;}else{label=208;break;}
 case 208: 
 var $906=((($tsize_244_i)-(40))|0);
 var $907=(($tbase_245_i+8)|0);
 var $908=$907;
 var $909=$908&7;
 var $910=($909|0)==0;
 if($910){var $914=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $912=(((-$908))|0);
 var $913=$912&7;
 var $914=$913;label=210;break;
 case 210: 
 var $914;
 var $915=(($tbase_245_i+$914)|0);
 var $916=$915;
 var $917=((($906)-($914))|0);
 HEAP32[((14536)>>2)]=$916;
 HEAP32[((14524)>>2)]=$917;
 var $918=$917|1;
 var $_sum_i14_i=((($914)+(4))|0);
 var $919=(($tbase_245_i+$_sum_i14_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=$918;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $921=(($tbase_245_i+$_sum2_i_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=40;
 var $923=HEAP32[((14472)>>2)];
 HEAP32[((14540)>>2)]=$923;
 label=338;break;
 case 211: 
 var $sp_067_i;
 var $924=(($sp_067_i)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($sp_067_i+4)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($925+$927)|0);
 var $929=($tbase_245_i|0)==($928|0);
 if($929){label=213;break;}else{label=212;break;}
 case 212: 
 var $931=(($sp_067_i+8)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($932|0)==0;
 if($933){label=218;break;}else{var $sp_067_i=$932;label=211;break;}
 case 213: 
 var $934=(($sp_067_i+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=$935&8;
 var $937=($936|0)==0;
 if($937){label=214;break;}else{label=218;break;}
 case 214: 
 var $939=$890;
 var $940=($939>>>0)>=($925>>>0);
 var $941=($939>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$940&$941;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $943=((($927)+($tsize_244_i))|0);
 HEAP32[(($926)>>2)]=$943;
 var $944=HEAP32[((14536)>>2)];
 var $945=HEAP32[((14524)>>2)];
 var $946=((($945)+($tsize_244_i))|0);
 var $947=$944;
 var $948=(($944+8)|0);
 var $949=$948;
 var $950=$949&7;
 var $951=($950|0)==0;
 if($951){var $955=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $953=(((-$949))|0);
 var $954=$953&7;
 var $955=$954;label=217;break;
 case 217: 
 var $955;
 var $956=(($947+$955)|0);
 var $957=$956;
 var $958=((($946)-($955))|0);
 HEAP32[((14536)>>2)]=$957;
 HEAP32[((14524)>>2)]=$958;
 var $959=$958|1;
 var $_sum_i18_i=((($955)+(4))|0);
 var $960=(($947+$_sum_i18_i)|0);
 var $961=$960;
 HEAP32[(($961)>>2)]=$959;
 var $_sum2_i19_i=((($946)+(4))|0);
 var $962=(($947+$_sum2_i19_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=40;
 var $964=HEAP32[((14472)>>2)];
 HEAP32[((14540)>>2)]=$964;
 label=338;break;
 case 218: 
 var $965=HEAP32[((14528)>>2)];
 var $966=($tbase_245_i>>>0)<($965>>>0);
 if($966){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((14528)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $968=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_160_i=14960;label=221;break;
 case 221: 
 var $sp_160_i;
 var $970=(($sp_160_i)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==($968|0);
 if($972){label=223;break;}else{label=222;break;}
 case 222: 
 var $974=(($sp_160_i+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){label=304;break;}else{var $sp_160_i=$975;label=221;break;}
 case 223: 
 var $977=(($sp_160_i+12)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978&8;
 var $980=($979|0)==0;
 if($980){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($970)>>2)]=$tbase_245_i;
 var $982=(($sp_160_i+4)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=((($983)+($tsize_244_i))|0);
 HEAP32[(($982)>>2)]=$984;
 var $985=(($tbase_245_i+8)|0);
 var $986=$985;
 var $987=$986&7;
 var $988=($987|0)==0;
 if($988){var $993=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $990=(((-$986))|0);
 var $991=$990&7;
 var $993=$991;label=226;break;
 case 226: 
 var $993;
 var $994=(($tbase_245_i+$993)|0);
 var $_sum93_i=((($tsize_244_i)+(8))|0);
 var $995=(($tbase_245_i+$_sum93_i)|0);
 var $996=$995;
 var $997=$996&7;
 var $998=($997|0)==0;
 if($998){var $1003=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1000=(((-$996))|0);
 var $1001=$1000&7;
 var $1003=$1001;label=228;break;
 case 228: 
 var $1003;
 var $_sum94_i=((($1003)+($tsize_244_i))|0);
 var $1004=(($tbase_245_i+$_sum94_i)|0);
 var $1005=$1004;
 var $1006=$1004;
 var $1007=$994;
 var $1008=((($1006)-($1007))|0);
 var $_sum_i21_i=((($993)+($nb_0))|0);
 var $1009=(($tbase_245_i+$_sum_i21_i)|0);
 var $1010=$1009;
 var $1011=((($1008)-($nb_0))|0);
 var $1012=$nb_0|3;
 var $_sum1_i22_i=((($993)+(4))|0);
 var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
 var $1014=$1013;
 HEAP32[(($1014)>>2)]=$1012;
 var $1015=HEAP32[((14536)>>2)];
 var $1016=($1005|0)==($1015|0);
 if($1016){label=229;break;}else{label=230;break;}
 case 229: 
 var $1018=HEAP32[((14524)>>2)];
 var $1019=((($1018)+($1011))|0);
 HEAP32[((14524)>>2)]=$1019;
 HEAP32[((14536)>>2)]=$1010;
 var $1020=$1019|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1021=(($tbase_245_i+$_sum46_i_i)|0);
 var $1022=$1021;
 HEAP32[(($1022)>>2)]=$1020;
 label=303;break;
 case 230: 
 var $1024=HEAP32[((14532)>>2)];
 var $1025=($1005|0)==($1024|0);
 if($1025){label=231;break;}else{label=232;break;}
 case 231: 
 var $1027=HEAP32[((14520)>>2)];
 var $1028=((($1027)+($1011))|0);
 HEAP32[((14520)>>2)]=$1028;
 HEAP32[((14532)>>2)]=$1010;
 var $1029=$1028|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1030=(($tbase_245_i+$_sum44_i_i)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1029;
 var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
 var $1032=(($tbase_245_i+$_sum45_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1028;
 label=303;break;
 case 232: 
 var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
 var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
 var $1035=(($tbase_245_i+$_sum95_i)|0);
 var $1036=$1035;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=$1037&3;
 var $1039=($1038|0)==1;
 if($1039){label=233;break;}else{var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;label=280;break;}
 case 233: 
 var $1041=$1037&-8;
 var $1042=$1037>>>3;
 var $1043=($1037>>>0)<256;
 if($1043){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1003|8;
 var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1045=(($tbase_245_i+$_sum105_i)|0);
 var $1046=$1045;
 var $1047=HEAP32[(($1046)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum41_i_i)+($1003))|0);
 var $1048=(($tbase_245_i+$_sum106_i)|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=$1042<<1;
 var $1052=((14552+($1051<<2))|0);
 var $1053=$1052;
 var $1054=($1047|0)==($1053|0);
 if($1054){label=237;break;}else{label=235;break;}
 case 235: 
 var $1056=$1047;
 var $1057=HEAP32[((14528)>>2)];
 var $1058=($1056>>>0)<($1057>>>0);
 if($1058){label=245;break;}else{label=236;break;}
 case 236: 
 var $1060=(($1047+12)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1061|0)==($1005|0);
 if($1062){label=237;break;}else{label=245;break;}
 case 237: 
 var $1063=($1050|0)==($1047|0);
 if($1063){label=238;break;}else{label=239;break;}
 case 238: 
 var $1065=1<<$1042;
 var $1066=$1065^-1;
 var $1067=HEAP32[((14512)>>2)];
 var $1068=$1067&$1066;
 HEAP32[((14512)>>2)]=$1068;
 label=279;break;
 case 239: 
 var $1070=($1050|0)==($1053|0);
 if($1070){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre56_i_i=(($1050+8)|0);
 var $_pre_phi57_i_i=$_pre56_i_i;label=243;break;
 case 241: 
 var $1072=$1050;
 var $1073=HEAP32[((14528)>>2)];
 var $1074=($1072>>>0)<($1073>>>0);
 if($1074){label=244;break;}else{label=242;break;}
 case 242: 
 var $1076=(($1050+8)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=($1077|0)==($1005|0);
 if($1078){var $_pre_phi57_i_i=$1076;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi57_i_i;
 var $1079=(($1047+12)|0);
 HEAP32[(($1079)>>2)]=$1050;
 HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1081=$1004;
 var $_sum34_i_i=$1003|24;
 var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1082=(($tbase_245_i+$_sum96_i)|0);
 var $1083=$1082;
 var $1084=HEAP32[(($1083)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum97_i=((($_sum5_i_i)+($1003))|0);
 var $1085=(($tbase_245_i+$_sum97_i)|0);
 var $1086=$1085;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=($1087|0)==($1081|0);
 if($1088){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1003|8;
 var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1090=(($tbase_245_i+$_sum98_i)|0);
 var $1091=$1090;
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=$1092;
 var $1094=HEAP32[((14528)>>2)];
 var $1095=($1093>>>0)<($1094>>>0);
 if($1095){label=251;break;}else{label=248;break;}
 case 248: 
 var $1097=(($1092+12)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1081|0);
 if($1099){label=249;break;}else{label=251;break;}
 case 249: 
 var $1101=(($1087+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==($1081|0);
 if($1103){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1097)>>2)]=$1087;
 HEAP32[(($1101)>>2)]=$1092;
 var $R_1_i_i=$1087;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1003|16;
 var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1106=(($tbase_245_i+$_sum103_i)|0);
 var $1107=$1106;
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=($1108|0)==0;
 if($1109){label=253;break;}else{var $R_0_i_i=$1108;var $RP_0_i_i=$1107;label=254;break;}
 case 253: 
 var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1111=(($tbase_245_i+$_sum104_i)|0);
 var $1112=$1111;
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1115=(($R_0_i_i+20)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=255;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=254;break;}
 case 255: 
 var $1119=(($R_0_i_i+16)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=($1120|0)==0;
 if($1121){label=256;break;}else{var $R_0_i_i=$1120;var $RP_0_i_i=$1119;label=254;break;}
 case 256: 
 var $1123=$RP_0_i_i;
 var $1124=HEAP32[((14528)>>2)];
 var $1125=($1123>>>0)<($1124>>>0);
 if($1125){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1129=($1084|0)==0;
 if($1129){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum99_i=((($_sum31_i_i)+($1003))|0);
 var $1131=(($tbase_245_i+$_sum99_i)|0);
 var $1132=$1131;
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=((14816+($1133<<2))|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1081|0)==($1135|0);
 if($1136){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1134)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1138=HEAP32[(($1132)>>2)];
 var $1139=1<<$1138;
 var $1140=$1139^-1;
 var $1141=HEAP32[((14516)>>2)];
 var $1142=$1141&$1140;
 HEAP32[((14516)>>2)]=$1142;
 label=279;break;
 case 263: 
 var $1144=$1084;
 var $1145=HEAP32[((14528)>>2)];
 var $1146=($1144>>>0)<($1145>>>0);
 if($1146){label=267;break;}else{label=264;break;}
 case 264: 
 var $1148=(($1084+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1149|0)==($1081|0);
 if($1150){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1153=(($1084+20)|0);
 HEAP32[(($1153)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1156=($R_1_i_i|0)==0;
 if($1156){label=279;break;}else{label=269;break;}
 case 269: 
 var $1158=$R_1_i_i;
 var $1159=HEAP32[((14528)>>2)];
 var $1160=($1158>>>0)<($1159>>>0);
 if($1160){label=278;break;}else{label=270;break;}
 case 270: 
 var $1162=(($R_1_i_i+24)|0);
 HEAP32[(($1162)>>2)]=$1084;
 var $_sum3233_i_i=$1003|16;
 var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1163=(($tbase_245_i+$_sum100_i)|0);
 var $1164=$1163;
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=($1165|0)==0;
 if($1166){label=274;break;}else{label=271;break;}
 case 271: 
 var $1168=$1165;
 var $1169=HEAP32[((14528)>>2)];
 var $1170=($1168>>>0)<($1169>>>0);
 if($1170){label=273;break;}else{label=272;break;}
 case 272: 
 var $1172=(($R_1_i_i+16)|0);
 HEAP32[(($1172)>>2)]=$1165;
 var $1173=(($1165+24)|0);
 HEAP32[(($1173)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1176=(($tbase_245_i+$_sum101_i)|0);
 var $1177=$1176;
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=($1178|0)==0;
 if($1179){label=279;break;}else{label=275;break;}
 case 275: 
 var $1181=$1178;
 var $1182=HEAP32[((14528)>>2)];
 var $1183=($1181>>>0)<($1182>>>0);
 if($1183){label=277;break;}else{label=276;break;}
 case 276: 
 var $1185=(($R_1_i_i+20)|0);
 HEAP32[(($1185)>>2)]=$1178;
 var $1186=(($1178+24)|0);
 HEAP32[(($1186)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1041|$1003;
 var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1190=(($tbase_245_i+$_sum102_i)|0);
 var $1191=$1190;
 var $1192=((($1041)+($1011))|0);
 var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1194=(($oldfirst_0_i_i+4)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=$1195&-2;
 HEAP32[(($1194)>>2)]=$1196;
 var $1197=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1198=(($tbase_245_i+$_sum10_i_i)|0);
 var $1199=$1198;
 HEAP32[(($1199)>>2)]=$1197;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1200=(($tbase_245_i+$_sum11_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$qsize_0_i_i;
 var $1202=$qsize_0_i_i>>>3;
 var $1203=($qsize_0_i_i>>>0)<256;
 if($1203){label=281;break;}else{label=286;break;}
 case 281: 
 var $1205=$1202<<1;
 var $1206=((14552+($1205<<2))|0);
 var $1207=$1206;
 var $1208=HEAP32[((14512)>>2)];
 var $1209=1<<$1202;
 var $1210=$1208&$1209;
 var $1211=($1210|0)==0;
 if($1211){label=282;break;}else{label=283;break;}
 case 282: 
 var $1213=$1208|$1209;
 HEAP32[((14512)>>2)]=$1213;
 var $_sum27_pre_i_i=((($1205)+(2))|0);
 var $_pre_i24_i=((14552+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1205)+(2))|0);
 var $1215=((14552+($_sum30_i_i<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=$1216;
 var $1218=HEAP32[((14528)>>2)];
 var $1219=($1217>>>0)<($1218>>>0);
 if($1219){label=284;break;}else{var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
 var $1222=(($F4_0_i_i+12)|0);
 HEAP32[(($1222)>>2)]=$1010;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1223=(($tbase_245_i+$_sum28_i_i)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1225=(($tbase_245_i+$_sum29_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$1207;
 label=303;break;
 case 286: 
 var $1228=$1009;
 var $1229=$qsize_0_i_i>>>8;
 var $1230=($1229|0)==0;
 if($1230){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1232=($qsize_0_i_i>>>0)>16777215;
 if($1232){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1234=((($1229)+(1048320))|0);
 var $1235=$1234>>>16;
 var $1236=$1235&8;
 var $1237=$1229<<$1236;
 var $1238=((($1237)+(520192))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&4;
 var $1241=$1240|$1236;
 var $1242=$1237<<$1240;
 var $1243=((($1242)+(245760))|0);
 var $1244=$1243>>>16;
 var $1245=$1244&2;
 var $1246=$1241|$1245;
 var $1247=(((14)-($1246))|0);
 var $1248=$1242<<$1245;
 var $1249=$1248>>>15;
 var $1250=((($1247)+($1249))|0);
 var $1251=$1250<<1;
 var $1252=((($1250)+(7))|0);
 var $1253=$qsize_0_i_i>>>($1252>>>0);
 var $1254=$1253&1;
 var $1255=$1254|$1251;
 var $I7_0_i_i=$1255;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1257=((14816+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
 var $1259=$1258;
 HEAP32[(($1259)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1260=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1261=(($tbase_245_i+$_sum14_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=0;
 var $1263=$1260;
 HEAP32[(($1263)>>2)]=0;
 var $1264=HEAP32[((14516)>>2)];
 var $1265=1<<$I7_0_i_i;
 var $1266=$1264&$1265;
 var $1267=($1266|0)==0;
 if($1267){label=290;break;}else{label=291;break;}
 case 290: 
 var $1269=$1264|$1265;
 HEAP32[((14516)>>2)]=$1269;
 HEAP32[(($1257)>>2)]=$1228;
 var $1270=$1257;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1271=(($tbase_245_i+$_sum15_i_i)|0);
 var $1272=$1271;
 HEAP32[(($1272)>>2)]=$1270;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1273=(($tbase_245_i+$_sum16_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1228;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1275=(($tbase_245_i+$_sum17_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1228;
 label=303;break;
 case 291: 
 var $1278=HEAP32[(($1257)>>2)];
 var $1279=($I7_0_i_i|0)==31;
 if($1279){var $1284=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1281=$I7_0_i_i>>>1;
 var $1282=(((25)-($1281))|0);
 var $1284=$1282;label=293;break;
 case 293: 
 var $1284;
 var $1285=$qsize_0_i_i<<$1284;
 var $K8_0_i_i=$1285;var $T_0_i27_i=$1278;label=294;break;
 case 294: 
 var $T_0_i27_i;
 var $K8_0_i_i;
 var $1287=(($T_0_i27_i+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){label=299;break;}else{label=295;break;}
 case 295: 
 var $1292=$K8_0_i_i>>>31;
 var $1293=(($T_0_i27_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 var $1296=$K8_0_i_i<<1;
 if($1295){label=296;break;}else{var $K8_0_i_i=$1296;var $T_0_i27_i=$1294;label=294;break;}
 case 296: 
 var $1298=$1293;
 var $1299=HEAP32[((14528)>>2)];
 var $1300=($1298>>>0)<($1299>>>0);
 if($1300){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($1293)>>2)]=$1228;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1302=(($tbase_245_i+$_sum24_i_i)|0);
 var $1303=$1302;
 HEAP32[(($1303)>>2)]=$T_0_i27_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1304=(($tbase_245_i+$_sum25_i_i)|0);
 var $1305=$1304;
 HEAP32[(($1305)>>2)]=$1228;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1306=(($tbase_245_i+$_sum26_i_i)|0);
 var $1307=$1306;
 HEAP32[(($1307)>>2)]=$1228;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $1310=(($T_0_i27_i+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=$T_0_i27_i;
 var $1313=HEAP32[((14528)>>2)];
 var $1314=($1312>>>0)<($1313>>>0);
 if($1314){label=302;break;}else{label=300;break;}
 case 300: 
 var $1316=$1311;
 var $1317=($1316>>>0)<($1313>>>0);
 if($1317){label=302;break;}else{label=301;break;}
 case 301: 
 var $1319=(($1311+12)|0);
 HEAP32[(($1319)>>2)]=$1228;
 HEAP32[(($1310)>>2)]=$1228;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1320=(($tbase_245_i+$_sum21_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$1311;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1322=(($tbase_245_i+$_sum22_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=$T_0_i27_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1324=(($tbase_245_i+$_sum23_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$993|8;
 var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1326;label=341;break;
 case 304: 
 var $1327=$890;
 var $sp_0_i_i_i=14960;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1329=(($sp_0_i_i_i)|0);
 var $1330=HEAP32[(($1329)>>2)];
 var $1331=($1330>>>0)>($1327>>>0);
 if($1331){label=307;break;}else{label=306;break;}
 case 306: 
 var $1333=(($sp_0_i_i_i+4)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1330+$1334)|0);
 var $1336=($1335>>>0)>($1327>>>0);
 if($1336){label=308;break;}else{label=307;break;}
 case 307: 
 var $1338=(($sp_0_i_i_i+8)|0);
 var $1339=HEAP32[(($1338)>>2)];
 var $sp_0_i_i_i=$1339;label=305;break;
 case 308: 
 var $_sum_i15_i=((($1334)-(47))|0);
 var $_sum1_i16_i=((($1334)-(39))|0);
 var $1340=(($1330+$_sum1_i16_i)|0);
 var $1341=$1340;
 var $1342=$1341&7;
 var $1343=($1342|0)==0;
 if($1343){var $1348=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1345=(((-$1341))|0);
 var $1346=$1345&7;
 var $1348=$1346;label=310;break;
 case 310: 
 var $1348;
 var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
 var $1349=(($1330+$_sum2_i17_i)|0);
 var $1350=(($890+16)|0);
 var $1351=$1350;
 var $1352=($1349>>>0)<($1351>>>0);
 var $1353=$1352?$1327:$1349;
 var $1354=(($1353+8)|0);
 var $1355=$1354;
 var $1356=((($tsize_244_i)-(40))|0);
 var $1357=(($tbase_245_i+8)|0);
 var $1358=$1357;
 var $1359=$1358&7;
 var $1360=($1359|0)==0;
 if($1360){var $1364=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1362=(((-$1358))|0);
 var $1363=$1362&7;
 var $1364=$1363;label=312;break;
 case 312: 
 var $1364;
 var $1365=(($tbase_245_i+$1364)|0);
 var $1366=$1365;
 var $1367=((($1356)-($1364))|0);
 HEAP32[((14536)>>2)]=$1366;
 HEAP32[((14524)>>2)]=$1367;
 var $1368=$1367|1;
 var $_sum_i_i_i=((($1364)+(4))|0);
 var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=$1368;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1372=$1371;
 HEAP32[(($1372)>>2)]=40;
 var $1373=HEAP32[((14472)>>2)];
 HEAP32[((14540)>>2)]=$1373;
 var $1374=(($1353+4)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1354)>>2)]=HEAP32[((14960)>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((14964)>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((14968)>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((14972)>>2)];
 HEAP32[((14960)>>2)]=$tbase_245_i;
 HEAP32[((14964)>>2)]=$tsize_244_i;
 HEAP32[((14972)>>2)]=0;
 HEAP32[((14968)>>2)]=$1355;
 var $1376=(($1353+28)|0);
 var $1377=$1376;
 HEAP32[(($1377)>>2)]=7;
 var $1378=(($1353+32)|0);
 var $1379=($1378>>>0)<($1335>>>0);
 if($1379){var $1380=$1377;label=313;break;}else{label=314;break;}
 case 313: 
 var $1380;
 var $1381=(($1380+4)|0);
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1380+8)|0);
 var $1383=$1382;
 var $1384=($1383>>>0)<($1335>>>0);
 if($1384){var $1380=$1381;label=313;break;}else{label=314;break;}
 case 314: 
 var $1385=($1353|0)==($1327|0);
 if($1385){label=338;break;}else{label=315;break;}
 case 315: 
 var $1387=$1353;
 var $1388=$890;
 var $1389=((($1387)-($1388))|0);
 var $1390=(($1327+$1389)|0);
 var $_sum3_i_i=((($1389)+(4))|0);
 var $1391=(($1327+$_sum3_i_i)|0);
 var $1392=$1391;
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=$1393&-2;
 HEAP32[(($1392)>>2)]=$1394;
 var $1395=$1389|1;
 var $1396=(($890+4)|0);
 HEAP32[(($1396)>>2)]=$1395;
 var $1397=$1390;
 HEAP32[(($1397)>>2)]=$1389;
 var $1398=$1389>>>3;
 var $1399=($1389>>>0)<256;
 if($1399){label=316;break;}else{label=321;break;}
 case 316: 
 var $1401=$1398<<1;
 var $1402=((14552+($1401<<2))|0);
 var $1403=$1402;
 var $1404=HEAP32[((14512)>>2)];
 var $1405=1<<$1398;
 var $1406=$1404&$1405;
 var $1407=($1406|0)==0;
 if($1407){label=317;break;}else{label=318;break;}
 case 317: 
 var $1409=$1404|$1405;
 HEAP32[((14512)>>2)]=$1409;
 var $_sum11_pre_i_i=((($1401)+(2))|0);
 var $_pre_i_i=((14552+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1403;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1401)+(2))|0);
 var $1411=((14552+($_sum12_i_i<<2))|0);
 var $1412=HEAP32[(($1411)>>2)];
 var $1413=$1412;
 var $1414=HEAP32[((14528)>>2)];
 var $1415=($1413>>>0)<($1414>>>0);
 if($1415){label=319;break;}else{var $F_0_i_i=$1412;var $_pre_phi_i_i=$1411;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$890;
 var $1418=(($F_0_i_i+12)|0);
 HEAP32[(($1418)>>2)]=$890;
 var $1419=(($890+8)|0);
 HEAP32[(($1419)>>2)]=$F_0_i_i;
 var $1420=(($890+12)|0);
 HEAP32[(($1420)>>2)]=$1403;
 label=338;break;
 case 321: 
 var $1422=$890;
 var $1423=$1389>>>8;
 var $1424=($1423|0)==0;
 if($1424){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1426=($1389>>>0)>16777215;
 if($1426){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1428=((($1423)+(1048320))|0);
 var $1429=$1428>>>16;
 var $1430=$1429&8;
 var $1431=$1423<<$1430;
 var $1432=((($1431)+(520192))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&4;
 var $1435=$1434|$1430;
 var $1436=$1431<<$1434;
 var $1437=((($1436)+(245760))|0);
 var $1438=$1437>>>16;
 var $1439=$1438&2;
 var $1440=$1435|$1439;
 var $1441=(((14)-($1440))|0);
 var $1442=$1436<<$1439;
 var $1443=$1442>>>15;
 var $1444=((($1441)+($1443))|0);
 var $1445=$1444<<1;
 var $1446=((($1444)+(7))|0);
 var $1447=$1389>>>($1446>>>0);
 var $1448=$1447&1;
 var $1449=$1448|$1445;
 var $I1_0_i_i=$1449;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1451=((14816+($I1_0_i_i<<2))|0);
 var $1452=(($890+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
 var $1453=(($890+20)|0);
 HEAP32[(($1453)>>2)]=0;
 var $1454=(($890+16)|0);
 HEAP32[(($1454)>>2)]=0;
 var $1455=HEAP32[((14516)>>2)];
 var $1456=1<<$I1_0_i_i;
 var $1457=$1455&$1456;
 var $1458=($1457|0)==0;
 if($1458){label=325;break;}else{label=326;break;}
 case 325: 
 var $1460=$1455|$1456;
 HEAP32[((14516)>>2)]=$1460;
 HEAP32[(($1451)>>2)]=$1422;
 var $1461=(($890+24)|0);
 var $_c_i_i=$1451;
 HEAP32[(($1461)>>2)]=$_c_i_i;
 var $1462=(($890+12)|0);
 HEAP32[(($1462)>>2)]=$890;
 var $1463=(($890+8)|0);
 HEAP32[(($1463)>>2)]=$890;
 label=338;break;
 case 326: 
 var $1465=HEAP32[(($1451)>>2)];
 var $1466=($I1_0_i_i|0)==31;
 if($1466){var $1471=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1468=$I1_0_i_i>>>1;
 var $1469=(((25)-($1468))|0);
 var $1471=$1469;label=328;break;
 case 328: 
 var $1471;
 var $1472=$1389<<$1471;
 var $K2_0_i_i=$1472;var $T_0_i_i=$1465;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K2_0_i_i;
 var $1474=(($T_0_i_i+4)|0);
 var $1475=HEAP32[(($1474)>>2)];
 var $1476=$1475&-8;
 var $1477=($1476|0)==($1389|0);
 if($1477){label=334;break;}else{label=330;break;}
 case 330: 
 var $1479=$K2_0_i_i>>>31;
 var $1480=(($T_0_i_i+16+($1479<<2))|0);
 var $1481=HEAP32[(($1480)>>2)];
 var $1482=($1481|0)==0;
 var $1483=$K2_0_i_i<<1;
 if($1482){label=331;break;}else{var $K2_0_i_i=$1483;var $T_0_i_i=$1481;label=329;break;}
 case 331: 
 var $1485=$1480;
 var $1486=HEAP32[((14528)>>2)];
 var $1487=($1485>>>0)<($1486>>>0);
 if($1487){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($1480)>>2)]=$1422;
 var $1489=(($890+24)|0);
 var $T_0_c8_i_i=$T_0_i_i;
 HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
 var $1490=(($890+12)|0);
 HEAP32[(($1490)>>2)]=$890;
 var $1491=(($890+8)|0);
 HEAP32[(($1491)>>2)]=$890;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $1494=(($T_0_i_i+8)|0);
 var $1495=HEAP32[(($1494)>>2)];
 var $1496=$T_0_i_i;
 var $1497=HEAP32[((14528)>>2)];
 var $1498=($1496>>>0)<($1497>>>0);
 if($1498){label=337;break;}else{label=335;break;}
 case 335: 
 var $1500=$1495;
 var $1501=($1500>>>0)<($1497>>>0);
 if($1501){label=337;break;}else{label=336;break;}
 case 336: 
 var $1503=(($1495+12)|0);
 HEAP32[(($1503)>>2)]=$1422;
 HEAP32[(($1494)>>2)]=$1422;
 var $1504=(($890+8)|0);
 var $_c7_i_i=$1495;
 HEAP32[(($1504)>>2)]=$_c7_i_i;
 var $1505=(($890+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($1505)>>2)]=$T_0_c_i_i;
 var $1506=(($890+24)|0);
 HEAP32[(($1506)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1507=HEAP32[((14524)>>2)];
 var $1508=($1507>>>0)>($nb_0>>>0);
 if($1508){label=339;break;}else{label=340;break;}
 case 339: 
 var $1510=((($1507)-($nb_0))|0);
 HEAP32[((14524)>>2)]=$1510;
 var $1511=HEAP32[((14536)>>2)];
 var $1512=$1511;
 var $1513=(($1512+$nb_0)|0);
 var $1514=$1513;
 HEAP32[((14536)>>2)]=$1514;
 var $1515=$1510|1;
 var $_sum_i134=((($nb_0)+(4))|0);
 var $1516=(($1512+$_sum_i134)|0);
 var $1517=$1516;
 HEAP32[(($1517)>>2)]=$1515;
 var $1518=$nb_0|3;
 var $1519=(($1511+4)|0);
 HEAP32[(($1519)>>2)]=$1518;
 var $1520=(($1511+8)|0);
 var $1521=$1520;
 var $mem_0=$1521;label=341;break;
 case 340: 
 var $1522=___errno_location();
 HEAP32[(($1522)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((14528)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum232=(((-8)-($21))|0);
 var $24=(($mem+$_sum232)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((14532)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum276=((($_sum232)+(8))|0);
 var $35=(($mem+$_sum276)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum277=((($_sum232)+(12))|0);
 var $38=(($mem+$_sum277)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((14552+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((14512)>>2)];
 var $57=$56&$55;
 HEAP32[((14512)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre305=(($40+8)|0);
 var $_pre_phi306=$_pre305;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi306=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi306;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi306)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum266=((($_sum232)+(24))|0);
 var $70=(($mem+$_sum266)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum267=((($_sum232)+(12))|0);
 var $73=(($mem+$_sum267)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum273=((($_sum232)+(8))|0);
 var $78=(($mem+$_sum273)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum269=((($_sum232)+(20))|0);
 var $93=(($mem+$_sum269)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum268=((($_sum232)+(16))|0);
 var $98=(($mem+$_sum268)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum270=((($_sum232)+(28))|0);
 var $117=(($mem+$_sum270)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((14816+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((14516)>>2)];
 var $128=$127&$126;
 HEAP32[((14516)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((14528)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((14528)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum271=((($_sum232)+(16))|0);
 var $149=(($mem+$_sum271)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((14528)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum272=((($_sum232)+(20))|0);
 var $162=(($mem+$_sum272)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((14528)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum233=((($14)-(4))|0);
 var $176=(($mem+$_sum233)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((14520)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum264=((($_sum232)+(4))|0);
 var $185=(($mem+$_sum264)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum263=((($14)-(4))|0);
 var $192=(($mem+$_sum263)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((14536)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((14524)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((14524)>>2)]=$204;
 HEAP32[((14536)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((14532)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((14532)>>2)]=0;
 HEAP32[((14520)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((14532)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((14520)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((14520)>>2)]=$215;
 HEAP32[((14532)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum257258=$14|4;
 var $229=(($mem+$_sum257258)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((14552+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((14528)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((14512)>>2)];
 var $249=$248&$247;
 HEAP32[((14512)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre303=(($231+8)|0);
 var $_pre_phi304=$_pre303;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((14528)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi304=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi304;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi304)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum235=((($14)+(16))|0);
 var $263=(($mem+$_sum235)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum236237=$14|4;
 var $266=(($mem+$_sum236237)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((14528)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum239=((($14)+(12))|0);
 var $287=(($mem+$_sum239)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum238=((($14)+(8))|0);
 var $292=(($mem+$_sum238)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((14528)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum250=((($14)+(20))|0);
 var $312=(($mem+$_sum250)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((14816+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond298=($R7_1|0)==0;
 if($cond298){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((14516)>>2)];
 var $323=$322&$321;
 HEAP32[((14516)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((14528)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((14528)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum251=((($14)+(8))|0);
 var $344=(($mem+$_sum251)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((14528)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum252=((($14)+(12))|0);
 var $357=(($mem+$_sum252)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((14528)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((14532)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((14520)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((14552+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((14512)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((14512)>>2)]=$396;
 var $_sum248_pre=((($388)+(2))|0);
 var $_pre=((14552+($_sum248_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum249=((($388)+(2))|0);
 var $398=((14552+($_sum249<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((14528)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((14816+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((14516)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((14516)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=$psize_1<<$458;
 var $K19_0=$459;var $T_0=$452;label=127;break;
 case 127: 
 var $T_0;
 var $K19_0;
 var $461=(($T_0+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){label=132;break;}else{label=128;break;}
 case 128: 
 var $466=$K19_0>>>31;
 var $467=(($T_0+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 var $470=$K19_0<<1;
 if($469){label=129;break;}else{var $K19_0=$470;var $T_0=$468;label=127;break;}
 case 129: 
 var $472=$467;
 var $473=HEAP32[((14528)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($467)>>2)]=$409;
 var $476=(($p_0+24)|0);
 var $T_0_c245=$T_0;
 HEAP32[(($476)>>2)]=$T_0_c245;
 var $477=(($p_0+12)|0);
 HEAP32[(($477)>>2)]=$p_0;
 var $478=(($p_0+8)|0);
 HEAP32[(($478)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $481=(($T_0+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0;
 var $484=HEAP32[((14528)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=135;break;}else{label=133;break;}
 case 133: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=135;break;}else{label=134;break;}
 case 134: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$409;
 HEAP32[(($481)>>2)]=$409;
 var $491=(($p_0+8)|0);
 var $_c244=$482;
 HEAP32[(($491)>>2)]=$_c244;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $495=HEAP32[((14544)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((14544)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=14968;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=138;break;}else{var $sp_0_in_i=$499;label=137;break;}
 case 138: 
 HEAP32[((14544)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _realloc($oldmem,$bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=$31?8:4;
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=$34?$33:$bytes;
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p,$nb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((14528)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((14464)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((14536)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((14524)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((14536)>>2)]=$57;
 HEAP32[((14524)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((14532)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((14520)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((14520)>>2)]=$storemerge27;
 HEAP32[((14532)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((14552+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((14512)>>2)];
 var $132=$131&$130;
 HEAP32[((14512)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((14816+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=HEAP32[(($193)>>2)];
 var $200=1<<$199;
 var $201=$200^-1;
 var $202=HEAP32[((14516)>>2)];
 var $203=$202&$201;
 HEAP32[((14516)>>2)]=$203;
 label=69;break;
 case 53: 
 var $205=$147;
 var $206=HEAP32[((14528)>>2)];
 var $207=($205>>>0)<($206>>>0);
 if($207){label=57;break;}else{label=54;break;}
 case 54: 
 var $209=(($147+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==($144|0);
 if($211){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($209)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $214=(($147+20)|0);
 HEAP32[(($214)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $217=($R_1|0)==0;
 if($217){label=69;break;}else{label=59;break;}
 case 59: 
 var $219=$R_1;
 var $220=HEAP32[((14528)>>2)];
 var $221=($219>>>0)<($220>>>0);
 if($221){label=68;break;}else{label=60;break;}
 case 60: 
 var $223=(($R_1+24)|0);
 HEAP32[(($223)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $224=(($4+$_sum12)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=64;break;}else{label=61;break;}
 case 61: 
 var $229=$226;
 var $230=HEAP32[((14528)>>2)];
 var $231=($229>>>0)<($230>>>0);
 if($231){label=63;break;}else{label=62;break;}
 case 62: 
 var $233=(($R_1+16)|0);
 HEAP32[(($233)>>2)]=$226;
 var $234=(($226+24)|0);
 HEAP32[(($234)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $237=(($4+$_sum13)|0);
 var $238=$237;
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=69;break;}else{label=65;break;}
 case 65: 
 var $242=$239;
 var $243=HEAP32[((14528)>>2)];
 var $244=($242>>>0)<($243>>>0);
 if($244){label=67;break;}else{label=66;break;}
 case 66: 
 var $246=(($R_1+20)|0);
 HEAP32[(($246)>>2)]=$239;
 var $247=(($239+24)|0);
 HEAP32[(($247)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $251=($106>>>0)<16;
 if($251){label=70;break;}else{label=71;break;}
 case 70: 
 var $253=HEAP32[(($1)>>2)];
 var $254=$253&1;
 var $255=$103|$254;
 var $256=$255|2;
 HEAP32[(($1)>>2)]=$256;
 var $_sum910=$103|4;
 var $257=(($4+$_sum910)|0);
 var $258=$257;
 var $259=HEAP32[(($258)>>2)];
 var $260=$259|1;
 HEAP32[(($258)>>2)]=$260;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $262=(($4+$nb)|0);
 var $263=$262;
 var $264=HEAP32[(($1)>>2)];
 var $265=$264&1;
 var $266=$265|$nb;
 var $267=$266|2;
 HEAP32[(($1)>>2)]=$267;
 var $_sum5=((($nb)+(4))|0);
 var $268=(($4+$_sum5)|0);
 var $269=$268;
 var $270=$106|3;
 HEAP32[(($269)>>2)]=$270;
 var $_sum78=$103|4;
 var $271=(($4+$_sum78)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273|1;
 HEAP32[(($272)>>2)]=$274;
 _dispose_chunk($263,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p,$psize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_0277=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((14528)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((14532)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((14552+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((14512)>>2)];
 var $49=$48&$47;
 HEAP32[((14512)>>2)]=$49;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre62=(($32+8)|0);
 var $_pre_phi63=$_pre62;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi63=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi63;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi63)>>2)]=$29;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_0277=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((14816+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=HEAP32[(($110)>>2)];
 var $117=1<<$116;
 var $118=$117^-1;
 var $119=HEAP32[((14516)>>2)];
 var $120=$119&$118;
 HEAP32[((14516)>>2)]=$120;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 35: 
 var $122=$64;
 var $123=HEAP32[((14528)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=39;break;}else{label=36;break;}
 case 36: 
 var $126=(($64+16)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==($61|0);
 if($128){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($126)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $131=(($64+20)|0);
 HEAP32[(($131)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $134=($R_1|0)==0;
 if($134){var $_0=$16;var $_0277=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $136=$R_1;
 var $137=HEAP32[((14528)>>2)];
 var $138=($136>>>0)<($137>>>0);
 if($138){label=50;break;}else{label=42;break;}
 case 42: 
 var $140=(($R_1+24)|0);
 HEAP32[(($140)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $141=(($1+$_sum31)|0);
 var $142=$141;
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){label=46;break;}else{label=43;break;}
 case 43: 
 var $146=$143;
 var $147=HEAP32[((14528)>>2)];
 var $148=($146>>>0)<($147>>>0);
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 var $150=(($R_1+16)|0);
 HEAP32[(($150)>>2)]=$143;
 var $151=(($143+24)|0);
 HEAP32[(($151)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $154=(($1+$_sum32)|0);
 var $155=$154;
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){var $_0=$16;var $_0277=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $159=$156;
 var $160=HEAP32[((14528)>>2)];
 var $161=($159>>>0)<($160>>>0);
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($R_1+20)|0);
 HEAP32[(($163)>>2)]=$156;
 var $164=(($156+24)|0);
 HEAP32[(($164)>>2)]=$R_1;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $168=(($1+$_sum)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=$170&3;
 var $172=($171|0)==3;
 if($172){label=52;break;}else{var $_0=$16;var $_0277=$17;label=54;break;}
 case 52: 
 HEAP32[((14520)>>2)]=$17;
 var $174=HEAP32[(($169)>>2)];
 var $175=$174&-2;
 HEAP32[(($169)>>2)]=$175;
 var $176=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $177=(($1+$_sum24)|0);
 var $178=$177;
 HEAP32[(($178)>>2)]=$176;
 var $179=$2;
 HEAP32[(($179)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_0277;
 var $_0;
 var $181=HEAP32[((14528)>>2)];
 var $182=($2>>>0)<($181>>>0);
 if($182){label=133;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $184=(($1+$_sum1)|0);
 var $185=$184;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&2;
 var $188=($187|0)==0;
 if($188){label=56;break;}else{label=109;break;}
 case 56: 
 var $190=HEAP32[((14536)>>2)];
 var $191=($3|0)==($190|0);
 if($191){label=57;break;}else{label=59;break;}
 case 57: 
 var $193=HEAP32[((14524)>>2)];
 var $194=((($193)+($_0277))|0);
 HEAP32[((14524)>>2)]=$194;
 HEAP32[((14536)>>2)]=$_0;
 var $195=$194|1;
 var $196=(($_0+4)|0);
 HEAP32[(($196)>>2)]=$195;
 var $197=HEAP32[((14532)>>2)];
 var $198=($_0|0)==($197|0);
 if($198){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((14532)>>2)]=0;
 HEAP32[((14520)>>2)]=0;
 label=134;break;
 case 59: 
 var $201=HEAP32[((14532)>>2)];
 var $202=($3|0)==($201|0);
 if($202){label=60;break;}else{label=61;break;}
 case 60: 
 var $204=HEAP32[((14520)>>2)];
 var $205=((($204)+($_0277))|0);
 HEAP32[((14520)>>2)]=$205;
 HEAP32[((14532)>>2)]=$_0;
 var $206=$205|1;
 var $207=(($_0+4)|0);
 HEAP32[(($207)>>2)]=$206;
 var $208=$_0;
 var $209=(($208+$205)|0);
 var $210=$209;
 HEAP32[(($210)>>2)]=$205;
 label=134;break;
 case 61: 
 var $212=$186&-8;
 var $213=((($212)+($_0277))|0);
 var $214=$186>>>3;
 var $215=($186>>>0)<256;
 if($215){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $217=(($1+$_sum20)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $220=(($1+$_sum21)|0);
 var $221=$220;
 var $222=HEAP32[(($221)>>2)];
 var $223=$214<<1;
 var $224=((14552+($223<<2))|0);
 var $225=$224;
 var $226=($219|0)==($225|0);
 if($226){label=65;break;}else{label=63;break;}
 case 63: 
 var $228=$219;
 var $229=($228>>>0)<($181>>>0);
 if($229){label=73;break;}else{label=64;break;}
 case 64: 
 var $231=(($219+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==($3|0);
 if($233){label=65;break;}else{label=73;break;}
 case 65: 
 var $234=($222|0)==($219|0);
 if($234){label=66;break;}else{label=67;break;}
 case 66: 
 var $236=1<<$214;
 var $237=$236^-1;
 var $238=HEAP32[((14512)>>2)];
 var $239=$238&$237;
 HEAP32[((14512)>>2)]=$239;
 label=107;break;
 case 67: 
 var $241=($222|0)==($225|0);
 if($241){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre60=(($222+8)|0);
 var $_pre_phi61=$_pre60;label=71;break;
 case 69: 
 var $243=$222;
 var $244=($243>>>0)<($181>>>0);
 if($244){label=72;break;}else{label=70;break;}
 case 70: 
 var $246=(($222+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==($3|0);
 if($248){var $_pre_phi61=$246;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi61;
 var $249=(($219+12)|0);
 HEAP32[(($249)>>2)]=$222;
 HEAP32[(($_pre_phi61)>>2)]=$219;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $251=$2;
 var $_sum2=((($psize)+(24))|0);
 var $252=(($1+$_sum2)|0);
 var $253=$252;
 var $254=HEAP32[(($253)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $255=(($1+$_sum3)|0);
 var $256=$255;
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($251|0);
 if($258){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $260=(($1+$_sum18)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $263=$262;
 var $264=($263>>>0)<($181>>>0);
 if($264){label=79;break;}else{label=76;break;}
 case 76: 
 var $266=(($262+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($251|0);
 if($268){label=77;break;}else{label=79;break;}
 case 77: 
 var $270=(($257+8)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==($251|0);
 if($272){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($266)>>2)]=$257;
 HEAP32[(($270)>>2)]=$262;
 var $R7_1=$257;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $275=(($1+$_sum5)|0);
 var $276=$275;
 var $277=HEAP32[(($276)>>2)];
 var $278=($277|0)==0;
 if($278){label=81;break;}else{var $R7_0=$277;var $RP9_0=$276;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $280=(($1+$_sum4)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==0;
 if($283){var $R7_1=0;label=87;break;}else{var $R7_0=$282;var $RP9_0=$281;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $284=(($R7_0+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=83;break;}else{var $R7_0=$285;var $RP9_0=$284;label=82;break;}
 case 83: 
 var $288=(($R7_0+16)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=82;break;}
 case 84: 
 var $292=$RP9_0;
 var $293=($292>>>0)<($181>>>0);
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $297=($254|0)==0;
 if($297){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $299=(($1+$_sum15)|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $302=((14816+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($251|0)==($303|0);
 if($304){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($302)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $306=HEAP32[(($300)>>2)];
 var $307=1<<$306;
 var $308=$307^-1;
 var $309=HEAP32[((14516)>>2)];
 var $310=$309&$308;
 HEAP32[((14516)>>2)]=$310;
 label=107;break;
 case 91: 
 var $312=$254;
 var $313=HEAP32[((14528)>>2)];
 var $314=($312>>>0)<($313>>>0);
 if($314){label=95;break;}else{label=92;break;}
 case 92: 
 var $316=(($254+16)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=($317|0)==($251|0);
 if($318){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($316)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $321=(($254+20)|0);
 HEAP32[(($321)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $324=($R7_1|0)==0;
 if($324){label=107;break;}else{label=97;break;}
 case 97: 
 var $326=$R7_1;
 var $327=HEAP32[((14528)>>2)];
 var $328=($326>>>0)<($327>>>0);
 if($328){label=106;break;}else{label=98;break;}
 case 98: 
 var $330=(($R7_1+24)|0);
 HEAP32[(($330)>>2)]=$254;
 var $_sum16=((($psize)+(16))|0);
 var $331=(($1+$_sum16)|0);
 var $332=$331;
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)==0;
 if($334){label=102;break;}else{label=99;break;}
 case 99: 
 var $336=$333;
 var $337=HEAP32[((14528)>>2)];
 var $338=($336>>>0)<($337>>>0);
 if($338){label=101;break;}else{label=100;break;}
 case 100: 
 var $340=(($R7_1+16)|0);
 HEAP32[(($340)>>2)]=$333;
 var $341=(($333+24)|0);
 HEAP32[(($341)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $344=(($1+$_sum17)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=107;break;}else{label=103;break;}
 case 103: 
 var $349=$346;
 var $350=HEAP32[((14528)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=105;break;}else{label=104;break;}
 case 104: 
 var $353=(($R7_1+20)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $358=$213|1;
 var $359=(($_0+4)|0);
 HEAP32[(($359)>>2)]=$358;
 var $360=$_0;
 var $361=(($360+$213)|0);
 var $362=$361;
 HEAP32[(($362)>>2)]=$213;
 var $363=HEAP32[((14532)>>2)];
 var $364=($_0|0)==($363|0);
 if($364){label=108;break;}else{var $_1=$213;label=110;break;}
 case 108: 
 HEAP32[((14520)>>2)]=$213;
 label=134;break;
 case 109: 
 var $367=$186&-2;
 HEAP32[(($185)>>2)]=$367;
 var $368=$_0277|1;
 var $369=(($_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=$_0;
 var $371=(($370+$_0277)|0);
 var $372=$371;
 HEAP32[(($372)>>2)]=$_0277;
 var $_1=$_0277;label=110;break;
 case 110: 
 var $_1;
 var $374=$_1>>>3;
 var $375=($_1>>>0)<256;
 if($375){label=111;break;}else{label=116;break;}
 case 111: 
 var $377=$374<<1;
 var $378=((14552+($377<<2))|0);
 var $379=$378;
 var $380=HEAP32[((14512)>>2)];
 var $381=1<<$374;
 var $382=$380&$381;
 var $383=($382|0)==0;
 if($383){label=112;break;}else{label=113;break;}
 case 112: 
 var $385=$380|$381;
 HEAP32[((14512)>>2)]=$385;
 var $_sum13_pre=((($377)+(2))|0);
 var $_pre=((14552+($_sum13_pre<<2))|0);
 var $F16_0=$379;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($377)+(2))|0);
 var $387=((14552+($_sum14<<2))|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$388;
 var $390=HEAP32[((14528)>>2)];
 var $391=($389>>>0)<($390>>>0);
 if($391){label=114;break;}else{var $F16_0=$388;var $_pre_phi=$387;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $394=(($F16_0+12)|0);
 HEAP32[(($394)>>2)]=$_0;
 var $395=(($_0+8)|0);
 HEAP32[(($395)>>2)]=$F16_0;
 var $396=(($_0+12)|0);
 HEAP32[(($396)>>2)]=$379;
 label=134;break;
 case 116: 
 var $398=$_0;
 var $399=$_1>>>8;
 var $400=($399|0)==0;
 if($400){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $402=($_1>>>0)>16777215;
 if($402){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $404=((($399)+(1048320))|0);
 var $405=$404>>>16;
 var $406=$405&8;
 var $407=$399<<$406;
 var $408=((($407)+(520192))|0);
 var $409=$408>>>16;
 var $410=$409&4;
 var $411=$410|$406;
 var $412=$407<<$410;
 var $413=((($412)+(245760))|0);
 var $414=$413>>>16;
 var $415=$414&2;
 var $416=$411|$415;
 var $417=(((14)-($416))|0);
 var $418=$412<<$415;
 var $419=$418>>>15;
 var $420=((($417)+($419))|0);
 var $421=$420<<1;
 var $422=((($420)+(7))|0);
 var $423=$_1>>>($422>>>0);
 var $424=$423&1;
 var $425=$424|$421;
 var $I19_0=$425;label=119;break;
 case 119: 
 var $I19_0;
 var $427=((14816+($I19_0<<2))|0);
 var $428=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 var $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[((14516)>>2)];
 var $432=1<<$I19_0;
 var $433=$431&$432;
 var $434=($433|0)==0;
 if($434){label=120;break;}else{label=121;break;}
 case 120: 
 var $436=$431|$432;
 HEAP32[((14516)>>2)]=$436;
 HEAP32[(($427)>>2)]=$398;
 var $437=(($_0+24)|0);
 var $_c=$427;
 HEAP32[(($437)>>2)]=$_c;
 var $438=(($_0+12)|0);
 HEAP32[(($438)>>2)]=$_0;
 var $439=(($_0+8)|0);
 HEAP32[(($439)>>2)]=$_0;
 label=134;break;
 case 121: 
 var $441=HEAP32[(($427)>>2)];
 var $442=($I19_0|0)==31;
 if($442){var $447=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $444=$I19_0>>>1;
 var $445=(((25)-($444))|0);
 var $447=$445;label=123;break;
 case 123: 
 var $447;
 var $448=$_1<<$447;
 var $K20_0=$448;var $T_0=$441;label=124;break;
 case 124: 
 var $T_0;
 var $K20_0;
 var $450=(($T_0+4)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=$451&-8;
 var $453=($452|0)==($_1|0);
 if($453){label=129;break;}else{label=125;break;}
 case 125: 
 var $455=$K20_0>>>31;
 var $456=(($T_0+16+($455<<2))|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=($457|0)==0;
 var $459=$K20_0<<1;
 if($458){label=126;break;}else{var $K20_0=$459;var $T_0=$457;label=124;break;}
 case 126: 
 var $461=$456;
 var $462=HEAP32[((14528)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=128;break;}else{label=127;break;}
 case 127: 
 HEAP32[(($456)>>2)]=$398;
 var $465=(($_0+24)|0);
 var $T_0_c10=$T_0;
 HEAP32[(($465)>>2)]=$T_0_c10;
 var $466=(($_0+12)|0);
 HEAP32[(($466)>>2)]=$_0;
 var $467=(($_0+8)|0);
 HEAP32[(($467)>>2)]=$_0;
 label=134;break;
 case 128: 
 _abort();
 throw "Reached an unreachable!";
 case 129: 
 var $470=(($T_0+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0;
 var $473=HEAP32[((14528)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=132;break;}else{label=130;break;}
 case 130: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=132;break;}else{label=131;break;}
 case 131: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$398;
 HEAP32[(($470)>>2)]=$398;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=$1?1:$size;
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((18432)>>2)],HEAP32[((18432)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=6528;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,12728,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $1;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$1;
 var $6=($5|0)<0;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$4$0;
 ___cxa_call_unexpected($8);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZdlPv($ptr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdaPv($ptr){
 var label=0;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt9bad_allocD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;
 return 3816;
}
function __ZSt17__throw_bad_allocv(){
 var label=0;
 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=6528;
 ___cxa_throw($1,12728,(68));
 throw "Reached an unreachable!";
}
function _strtod($string,$endPtr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_0=$string;label=2;break;
 case 2: 
 var $p_0;
 var $2=HEAP8[($p_0)];
 var $3=(($2<<24)>>24);
 var $4=_isspace($3);
 var $5=($4|0)==0;
 var $6=(($p_0+1)|0);
 if($5){label=3;break;}else{var $p_0=$6;label=2;break;}
 case 3: 
 var $8=HEAP8[($p_0)];
 if((($8<<24)>>24)==45){ label=4;break;}else if((($8<<24)>>24)==43){ label=5;break;}else{var $p_2=$p_0;var $sign_0=0;label=6;break;}
 case 4: 
 var $p_2=$6;var $sign_0=1;label=6;break;
 case 5: 
 var $p_2=$6;var $sign_0=0;label=6;break;
 case 6: 
 var $sign_0;
 var $p_2;
 var $decPt_0=-1;var $mantSize_0=0;var $p_3=$p_2;label=7;break;
 case 7: 
 var $p_3;
 var $mantSize_0;
 var $decPt_0;
 var $13=HEAP8[($p_3)];
 var $14=(($13<<24)>>24);
 var $15=((($14)-(48))|0);
 var $16=($15>>>0)<10;
 if($16){var $decPt_1=$decPt_0;label=9;break;}else{label=8;break;}
 case 8: 
 var $18=(($13<<24)>>24)!=46;
 var $19=($decPt_0|0)>-1;
 var $or_cond=$18|$19;
 if($or_cond){label=10;break;}else{var $decPt_1=$mantSize_0;label=9;break;}
 case 9: 
 var $decPt_1;
 var $21=(($p_3+1)|0);
 var $22=((($mantSize_0)+(1))|0);
 var $decPt_0=$decPt_1;var $mantSize_0=$22;var $p_3=$21;label=7;break;
 case 10: 
 var $24=(((-$mantSize_0))|0);
 var $25=(($p_3+$24)|0);
 var $26=($decPt_0|0)<0;
 var $not_=$26^1;
 var $27=(($not_<<31)>>31);
 var $mantSize_1=((($27)+($mantSize_0))|0);
 var $decPt_2=$26?$mantSize_0:$decPt_0;
 var $28=($mantSize_1|0)>18;
 var $29=(((-$mantSize_1))|0);
 var $fracExp_0_p=$28?-18:$29;
 var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
 var $mantSize_2=$28?18:$mantSize_1;
 var $30=($mantSize_2|0)==0;
 if($30){var $p_11=$string;var $fraction_0=0;label=37;break;}else{label=11;break;}
 case 11: 
 var $31=($mantSize_2|0)>9;
 if($31){var $p_479=$25;var $mantSize_380=$mantSize_2;var $frac1_081=0;label=15;break;}else{label=13;break;}
 case 12: 
 var $phitmp=($42|0);
 var $phitmp86=($phitmp)*(1000000000);
 var $frac1_0_lcssa93=$phitmp86;var $mantSize_3_lcssa94=9;var $p_4_lcssa95=$p_5;label=14;break;
 case 13: 
 var $32=($mantSize_2|0)>0;
 if($32){var $frac1_0_lcssa93=0;var $mantSize_3_lcssa94=$mantSize_2;var $p_4_lcssa95=$25;label=14;break;}else{var $frac2_0_lcssa=0;var $frac1_0_lcssa92=0;label=22;break;}
 case 14: 
 var $p_4_lcssa95;
 var $mantSize_3_lcssa94;
 var $frac1_0_lcssa93;
 var $p_672=$p_4_lcssa95;var $mantSize_473=$mantSize_3_lcssa94;var $frac2_074=0;label=18;break;
 case 15: 
 var $frac1_081;
 var $mantSize_380;
 var $p_479;
 var $33=HEAP8[($p_479)];
 var $34=(($p_479+1)|0);
 var $35=(($33<<24)>>24)==46;
 if($35){label=16;break;}else{var $c_0_in=$33;var $p_5=$34;label=17;break;}
 case 16: 
 var $37=HEAP8[($34)];
 var $38=(($p_479+2)|0);
 var $c_0_in=$37;var $p_5=$38;label=17;break;
 case 17: 
 var $p_5;
 var $c_0_in;
 var $c_0=(($c_0_in<<24)>>24);
 var $40=((($frac1_081)*(10))&-1);
 var $41=((($40)-(48))|0);
 var $42=((($41)+($c_0))|0);
 var $43=((($mantSize_380)-(1))|0);
 var $44=($43|0)>9;
 if($44){var $p_479=$p_5;var $mantSize_380=$43;var $frac1_081=$42;label=15;break;}else{label=12;break;}
 case 18: 
 var $frac2_074;
 var $mantSize_473;
 var $p_672;
 var $46=HEAP8[($p_672)];
 var $47=(($p_672+1)|0);
 var $48=(($46<<24)>>24)==46;
 if($48){label=19;break;}else{var $c_1_in=$46;var $p_7=$47;label=20;break;}
 case 19: 
 var $50=HEAP8[($47)];
 var $51=(($p_672+2)|0);
 var $c_1_in=$50;var $p_7=$51;label=20;break;
 case 20: 
 var $p_7;
 var $c_1_in;
 var $c_1=(($c_1_in<<24)>>24);
 var $53=((($frac2_074)*(10))&-1);
 var $54=((($53)-(48))|0);
 var $55=((($54)+($c_1))|0);
 var $56=((($mantSize_473)-(1))|0);
 var $57=($56|0)>0;
 if($57){var $p_672=$p_7;var $mantSize_473=$56;var $frac2_074=$55;label=18;break;}else{label=21;break;}
 case 21: 
 var $phitmp87=($55|0);
 var $frac2_0_lcssa=$phitmp87;var $frac1_0_lcssa92=$frac1_0_lcssa93;label=22;break;
 case 22: 
 var $frac1_0_lcssa92;
 var $frac2_0_lcssa;
 var $59=($frac1_0_lcssa92)+($frac2_0_lcssa);
 if((($13<<24)>>24)==69|(($13<<24)>>24)==101){ label=23;break;}else{var $exp_1=0;var $p_10=$p_3;var $expSign_1=0;label=28;break;}
 case 23: 
 var $61=(($p_3+1)|0);
 var $62=HEAP8[($61)];
 if((($62<<24)>>24)==45){ label=24;break;}else if((($62<<24)>>24)==43){ label=25;break;}else{var $p_9_ph=$61;var $expSign_0_ph=0;label=26;break;}
 case 24: 
 var $64=(($p_3+2)|0);
 var $p_9_ph=$64;var $expSign_0_ph=1;label=26;break;
 case 25: 
 var $66=(($p_3+2)|0);
 var $p_9_ph=$66;var $expSign_0_ph=0;label=26;break;
 case 26: 
 var $expSign_0_ph;
 var $p_9_ph;
 var $67=HEAP8[($p_9_ph)];
 var $68=(($67<<24)>>24);
 var $69=((($68)-(48))|0);
 var $70=($69>>>0)<10;
 if($70){var $p_966=$p_9_ph;var $exp_067=0;var $71=$68;label=27;break;}else{var $exp_1=0;var $p_10=$p_9_ph;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 27: 
 var $71;
 var $exp_067;
 var $p_966;
 var $72=((($exp_067)*(10))&-1);
 var $73=((($72)-(48))|0);
 var $74=((($73)+($71))|0);
 var $75=(($p_966+1)|0);
 var $76=HEAP8[($75)];
 var $77=(($76<<24)>>24);
 var $78=((($77)-(48))|0);
 var $79=($78>>>0)<10;
 if($79){var $p_966=$75;var $exp_067=$74;var $71=$77;label=27;break;}else{var $exp_1=$74;var $p_10=$75;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 28: 
 var $expSign_1;
 var $p_10;
 var $exp_1;
 var $80=($expSign_1|0)==0;
 var $81=(((-$exp_1))|0);
 var $exp_2_p=$80?$exp_1:$81;
 var $exp_2=((($fracExp_0)+($exp_2_p))|0);
 var $82=($exp_2|0)<0;
 var $83=(((-$exp_2))|0);
 var $exp_3=$82?$83:$exp_2;
 var $84=($exp_3|0)>511;
 if($84){label=29;break;}else{label=30;break;}
 case 29: 
 var $85=___errno_location();
 HEAP32[(($85)>>2)]=34;
 var $dblExp_062=1;var $d_063=152;var $exp_564=511;label=31;break;
 case 30: 
 var $86=($exp_3|0)==0;
 if($86){var $dblExp_0_lcssa=1;label=34;break;}else{var $dblExp_062=1;var $d_063=152;var $exp_564=$exp_3;label=31;break;}
 case 31: 
 var $exp_564;
 var $d_063;
 var $dblExp_062;
 var $87=$exp_564&1;
 var $88=($87|0)==0;
 if($88){var $dblExp_1=$dblExp_062;label=33;break;}else{label=32;break;}
 case 32: 
 var $90=HEAPF64[(($d_063)>>3)];
 var $91=($dblExp_062)*($90);
 var $dblExp_1=$91;label=33;break;
 case 33: 
 var $dblExp_1;
 var $93=$exp_564>>1;
 var $94=(($d_063+8)|0);
 var $95=($93|0)==0;
 if($95){var $dblExp_0_lcssa=$dblExp_1;label=34;break;}else{var $dblExp_062=$dblExp_1;var $d_063=$94;var $exp_564=$93;label=31;break;}
 case 34: 
 var $dblExp_0_lcssa;
 var $96=($exp_2|0)>-1;
 if($96){label=36;break;}else{label=35;break;}
 case 35: 
 var $98=($59)/($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$98;label=37;break;
 case 36: 
 var $100=($59)*($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$100;label=37;break;
 case 37: 
 var $fraction_0;
 var $p_11;
 var $102=($endPtr|0)==0;
 if($102){label=39;break;}else{label=38;break;}
 case 38: 
 HEAP32[(($endPtr)>>2)]=$p_11;
 label=39;break;
 case 39: 
 var $105=($sign_0|0)==0;
 if($105){var $_0=$fraction_0;label=41;break;}else{label=40;break;}
 case 40: 
 var $107=((-.0))-($fraction_0);
 var $_0=$107;label=41;break;
 case 41: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold_l($nptr,$endptr,$loc){
 var label=0;
 var $1=_strtod($nptr,$endptr);
 return $1;
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=CuraEngine.js.map